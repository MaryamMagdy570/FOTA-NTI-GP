
Gateway.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000062a8  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000158  08006448  08006448  00016448  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080065a0  080065a0  0002008c  2**0
                  CONTENTS
  4 .ARM          00000000  080065a0  080065a0  0002008c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080065a0  080065a0  0002008c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080065a0  080065a0  000165a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080065a4  080065a4  000165a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000008c  20000000  080065a8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002008c  2**0
                  CONTENTS
 10 .bss          00001c30  2000008c  2000008c  0002008c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20001cbc  20001cbc  0002008c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  000200bc  2**0
                  CONTENTS, READONLY
 14 .debug_info   000161c0  00000000  00000000  000200ff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00003125  00000000  00000000  000362bf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001250  00000000  00000000  000393e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000e50  00000000  00000000  0003a638  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00023335  00000000  00000000  0003b488  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00016be2  00000000  00000000  0005e7bd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000d7a0c  00000000  00000000  0007539f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00004e68  00000000  00000000  0014cdac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000045  00000000  00000000  00151c14  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000008c 	.word	0x2000008c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08006430 	.word	0x08006430

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000090 	.word	0x20000090
 80001dc:	08006430 	.word	0x08006430

080001e0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80001e0:	b480      	push	{r7}
 80001e2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80001e4:	b672      	cpsid	i
}
 80001e6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80001e8:	e7fe      	b.n	80001e8 <Error_Handler+0x8>

080001ea <vRecord_TimerCallBack>:
/* USER CODE BEGIN Application */

/*@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@*/
/* ISRs code -----------------------------------------------------------------*/
void vRecord_TimerCallBack(TimerHandle_t Bump_Dist_Timer)
{}
 80001ea:	b480      	push	{r7}
 80001ec:	b083      	sub	sp, #12
 80001ee:	af00      	add	r7, sp, #0
 80001f0:	6078      	str	r0, [r7, #4]
 80001f2:	bf00      	nop
 80001f4:	370c      	adds	r7, #12
 80001f6:	46bd      	mov	sp, r7
 80001f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80001fc:	4770      	bx	lr

080001fe <Check_Validity_Task_Func>:
/*@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@*/

/*@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@*/
/* General Branch code -------------------------------------------------------*/
void Check_Validity_Task_Func(void * pvParameters)
{
 80001fe:	b480      	push	{r7}
 8000200:	b083      	sub	sp, #12
 8000202:	af00      	add	r7, sp, #0
 8000204:	6078      	str	r0, [r7, #4]
	while(1)
 8000206:	e7fe      	b.n	8000206 <Check_Validity_Task_Func+0x8>

08000208 <Init_Deinit_Reset_Task_Func>:
/*@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@*/

/*@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@*/
/* General Control Branch code -----------------------------------------------*/
void Init_Deinit_Reset_Task_Func(void * pvParameters)
{
 8000208:	b480      	push	{r7}
 800020a:	b083      	sub	sp, #12
 800020c:	af00      	add	r7, sp, #0
 800020e:	6078      	str	r0, [r7, #4]
	while(1)
 8000210:	e7fe      	b.n	8000210 <Init_Deinit_Reset_Task_Func+0x8>

08000212 <Control_Branch_Task_Func>:
	{

	}
}
void Control_Branch_Task_Func(void * pvParameters)
{
 8000212:	b480      	push	{r7}
 8000214:	b083      	sub	sp, #12
 8000216:	af00      	add	r7, sp, #0
 8000218:	6078      	str	r0, [r7, #4]
	while(1)
 800021a:	e7fe      	b.n	800021a <Control_Branch_Task_Func+0x8>

0800021c <Control_DMA_Task_Func>:
	{

	}
}
void Control_DMA_Task_Func(void * pvParameters)
{
 800021c:	b480      	push	{r7}
 800021e:	b083      	sub	sp, #12
 8000220:	af00      	add	r7, sp, #0
 8000222:	6078      	str	r0, [r7, #4]
	while(1)
 8000224:	e7fe      	b.n	8000224 <Control_DMA_Task_Func+0x8>

08000226 <Manage_ESP_Task_Func>:
/*@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@*/

/*@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@*/
/* ESP Branch code -----------------------------------------------------------*/
void Manage_ESP_Task_Func(void * pvParameters)
{
 8000226:	b480      	push	{r7}
 8000228:	b083      	sub	sp, #12
 800022a:	af00      	add	r7, sp, #0
 800022c:	6078      	str	r0, [r7, #4]
	while(1)
 800022e:	e7fe      	b.n	800022e <Manage_ESP_Task_Func+0x8>

08000230 <Send_to_ESP_Task_Func>:
	{

	}
}
void Send_to_ESP_Task_Func(void * pvParameters)
{
 8000230:	b480      	push	{r7}
 8000232:	b083      	sub	sp, #12
 8000234:	af00      	add	r7, sp, #0
 8000236:	6078      	str	r0, [r7, #4]
	while(1)
 8000238:	e7fe      	b.n	8000238 <Send_to_ESP_Task_Func+0x8>

0800023a <Receive_from_EST_Task_Func>:
	{

	}
}
void Receive_from_EST_Task_Func(void * pvParameters)
{
 800023a:	b480      	push	{r7}
 800023c:	b083      	sub	sp, #12
 800023e:	af00      	add	r7, sp, #0
 8000240:	6078      	str	r0, [r7, #4]
	while(1)
 8000242:	e7fe      	b.n	8000242 <Receive_from_EST_Task_Func+0x8>

08000244 <Manage_SD_Task_Func>:
/*@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@*/

/*@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@*/
/* SD Branch code -------------------------------------------------------*/
void Manage_SD_Task_Func(void * pvParameters)
{
 8000244:	b480      	push	{r7}
 8000246:	b083      	sub	sp, #12
 8000248:	af00      	add	r7, sp, #0
 800024a:	6078      	str	r0, [r7, #4]
	while(1)
 800024c:	e7fe      	b.n	800024c <Manage_SD_Task_Func+0x8>

0800024e <Send_to_SD_Task_Func>:
	{

	}
}
void Send_to_SD_Task_Func(void * pvParameters)
{
 800024e:	b480      	push	{r7}
 8000250:	b083      	sub	sp, #12
 8000252:	af00      	add	r7, sp, #0
 8000254:	6078      	str	r0, [r7, #4]
	while(1)
 8000256:	e7fe      	b.n	8000256 <Send_to_SD_Task_Func+0x8>

08000258 <Receive_from_SD_Task_Func>:
	{

	}
}
void Receive_from_SD_Task_Func(void * pvParameters)
{
 8000258:	b480      	push	{r7}
 800025a:	b083      	sub	sp, #12
 800025c:	af00      	add	r7, sp, #0
 800025e:	6078      	str	r0, [r7, #4]
	while(1)
 8000260:	e7fe      	b.n	8000260 <Receive_from_SD_Task_Func+0x8>
	...

08000264 <Check_Network_Task_Func>:
/*@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@*/
/* Main Nodes Branch code ----------------------------------------------------*/
uint8_t flag_address_buffer_update = 0;
uint8_t slave_address_buffer[MAX_SLAVE_COUNT]={0x50,0x51,0x52,0x53,0x54};
void Check_Network_Task_Func(void * pvParameters)
{
 8000264:	b580      	push	{r7, lr}
 8000266:	b086      	sub	sp, #24
 8000268:	af00      	add	r7, sp, #0
 800026a:	6078      	str	r0, [r7, #4]
	uint8_t slave_address_buffer[MAX_SLAVE_COUNT];
    uint8_t data_to_slave = 0xAA;
 800026c:	23aa      	movs	r3, #170	; 0xaa
 800026e:	73fb      	strb	r3, [r7, #15]
    uint8_t data_from_slave;
    uint8_t slave_index = 0;
 8000270:	2300      	movs	r3, #0
 8000272:	75fb      	strb	r3, [r7, #23]
    while(1)
    {
    	//i2c transmit with slave address = 0x00
    	xQueueSend(IN_N_CheckNet_Send_Queue, &data_to_slave,0);
 8000274:	4b1e      	ldr	r3, [pc, #120]	; (80002f0 <Check_Network_Task_Func+0x8c>)
 8000276:	6818      	ldr	r0, [r3, #0]
 8000278:	f107 010f 	add.w	r1, r7, #15
 800027c:	2300      	movs	r3, #0
 800027e:	2200      	movs	r2, #0
 8000280:	f003 fa6a 	bl	8003758 <xQueueGenericSend>
    	// receive from i2c slave their addresses
    	xQueueReceive(IN_N_Receive_CheckNet_Queue,&data_from_slave ,0);
 8000284:	4b1b      	ldr	r3, [pc, #108]	; (80002f4 <Check_Network_Task_Func+0x90>)
 8000286:	681b      	ldr	r3, [r3, #0]
 8000288:	f107 010e 	add.w	r1, r7, #14
 800028c:	2200      	movs	r2, #0
 800028e:	4618      	mov	r0, r3
 8000290:	f003 fc1e 	bl	8003ad0 <xQueueReceive>
    	/*** store slave address in slave_address_buffer ***/
    	uint8_t isNewSlave = 1;
 8000294:	2301      	movs	r3, #1
 8000296:	75bb      	strb	r3, [r7, #22]
    	for (uint8_t i = 0; i < MAX_SLAVE_COUNT; ++i)
 8000298:	2300      	movs	r3, #0
 800029a:	757b      	strb	r3, [r7, #21]
 800029c:	e00d      	b.n	80002ba <Check_Network_Task_Func+0x56>
    	{
    		if (slave_address_buffer[i] == data_from_slave)
 800029e:	7d7b      	ldrb	r3, [r7, #21]
 80002a0:	3318      	adds	r3, #24
 80002a2:	443b      	add	r3, r7
 80002a4:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 80002a8:	7bbb      	ldrb	r3, [r7, #14]
 80002aa:	429a      	cmp	r2, r3
 80002ac:	d102      	bne.n	80002b4 <Check_Network_Task_Func+0x50>
    		{
    			isNewSlave = 0;
 80002ae:	2300      	movs	r3, #0
 80002b0:	75bb      	strb	r3, [r7, #22]
    			break;
 80002b2:	e005      	b.n	80002c0 <Check_Network_Task_Func+0x5c>
    	for (uint8_t i = 0; i < MAX_SLAVE_COUNT; ++i)
 80002b4:	7d7b      	ldrb	r3, [r7, #21]
 80002b6:	3301      	adds	r3, #1
 80002b8:	757b      	strb	r3, [r7, #21]
 80002ba:	7d7b      	ldrb	r3, [r7, #21]
 80002bc:	2b04      	cmp	r3, #4
 80002be:	d9ee      	bls.n	800029e <Check_Network_Task_Func+0x3a>
    		}
    	}
    	// If it's a new slave, add it to the array
    	if (isNewSlave && (slave_index < MAX_SLAVE_COUNT))
 80002c0:	7dbb      	ldrb	r3, [r7, #22]
 80002c2:	2b00      	cmp	r3, #0
 80002c4:	d00a      	beq.n	80002dc <Check_Network_Task_Func+0x78>
 80002c6:	7dfb      	ldrb	r3, [r7, #23]
 80002c8:	2b04      	cmp	r3, #4
 80002ca:	d807      	bhi.n	80002dc <Check_Network_Task_Func+0x78>
    	{
    		slave_address_buffer[slave_index++] = data_from_slave;
 80002cc:	7dfb      	ldrb	r3, [r7, #23]
 80002ce:	1c5a      	adds	r2, r3, #1
 80002d0:	75fa      	strb	r2, [r7, #23]
 80002d2:	7bba      	ldrb	r2, [r7, #14]
 80002d4:	3318      	adds	r3, #24
 80002d6:	443b      	add	r3, r7
 80002d8:	f803 2c08 	strb.w	r2, [r3, #-8]
    	}
    	//send the buffer to manage network using queue
    	xQueueSend(IN_N_CheckNet_MNetwork_Queue ,slave_address_buffer,0);
 80002dc:	4b06      	ldr	r3, [pc, #24]	; (80002f8 <Check_Network_Task_Func+0x94>)
 80002de:	6818      	ldr	r0, [r3, #0]
 80002e0:	f107 0110 	add.w	r1, r7, #16
 80002e4:	2300      	movs	r3, #0
 80002e6:	2200      	movs	r2, #0
 80002e8:	f003 fa36 	bl	8003758 <xQueueGenericSend>
    {
 80002ec:	e7c2      	b.n	8000274 <Check_Network_Task_Func+0x10>
 80002ee:	bf00      	nop
 80002f0:	20000120 	.word	0x20000120
 80002f4:	2000011c 	.word	0x2000011c
 80002f8:	20000128 	.word	0x20000128

080002fc <Manage_Network_Task_Func>:
    }
}

void Manage_Network_Task_Func(void * pvParameters)
{
 80002fc:	b580      	push	{r7, lr}
 80002fe:	b086      	sub	sp, #24
 8000300:	af00      	add	r7, sp, #0
 8000302:	6078      	str	r0, [r7, #4]
	uint8_t node_id;
	uint8_t StateSUM;
	while(1)
	{
	   //get the slave address buffer from check network
	   if (flag_address_buffer_update == 0)
 8000304:	4b42      	ldr	r3, [pc, #264]	; (8000410 <Manage_Network_Task_Func+0x114>)
 8000306:	781b      	ldrb	r3, [r3, #0]
 8000308:	2b00      	cmp	r3, #0
 800030a:	d10b      	bne.n	8000324 <Manage_Network_Task_Func+0x28>
	   {
		   xQueueReceive(IN_N_CheckNet_MNetwork_Queue ,slave_address_buffer,portMAX_DELAY);
 800030c:	4b41      	ldr	r3, [pc, #260]	; (8000414 <Manage_Network_Task_Func+0x118>)
 800030e:	681b      	ldr	r3, [r3, #0]
 8000310:	f04f 32ff 	mov.w	r2, #4294967295
 8000314:	4940      	ldr	r1, [pc, #256]	; (8000418 <Manage_Network_Task_Func+0x11c>)
 8000316:	4618      	mov	r0, r3
 8000318:	f003 fbda 	bl	8003ad0 <xQueueReceive>
		   flag_address_buffer_update = 1; //trigger it only once
 800031c:	4b3c      	ldr	r3, [pc, #240]	; (8000410 <Manage_Network_Task_Func+0x114>)
 800031e:	2201      	movs	r2, #1
 8000320:	701a      	strb	r2, [r3, #0]
 8000322:	e7ef      	b.n	8000304 <Manage_Network_Task_Func+0x8>
	   }
	   else
	   {
		   if (uxQueueMessagesWaiting(OUT_S_N_MSD_MNet_Queue) > 0) //check if there is update in queue
 8000324:	4b3d      	ldr	r3, [pc, #244]	; (800041c <Manage_Network_Task_Func+0x120>)
 8000326:	681b      	ldr	r3, [r3, #0]
 8000328:	4618      	mov	r0, r3
 800032a:	f003 fdbd 	bl	8003ea8 <uxQueueMessagesWaiting>
 800032e:	4603      	mov	r3, r0
 8000330:	2b00      	cmp	r3, #0
 8000332:	d069      	beq.n	8000408 <Manage_Network_Task_Func+0x10c>
		   {
			 //get the nodeS i want to update from sd card
			 xQueueReceive(OUT_S_N_MSD_MNet_Queue ,update_node_buffer,0);
 8000334:	4b39      	ldr	r3, [pc, #228]	; (800041c <Manage_Network_Task_Func+0x120>)
 8000336:	681b      	ldr	r3, [r3, #0]
 8000338:	f107 0110 	add.w	r1, r7, #16
 800033c:	2200      	movs	r2, #0
 800033e:	4618      	mov	r0, r3
 8000340:	f003 fbc6 	bl	8003ad0 <xQueueReceive>
			 StateSUM = 0;
 8000344:	2300      	movs	r3, #0
 8000346:	75fb      	strb	r3, [r7, #23]
			 for(uint8_t var=0; var < 5;var++)
 8000348:	2300      	movs	r3, #0
 800034a:	75bb      	strb	r3, [r7, #22]
 800034c:	e00a      	b.n	8000364 <Manage_Network_Task_Func+0x68>
			 {
			   StateSUM += update_node_buffer[var];
 800034e:	7dbb      	ldrb	r3, [r7, #22]
 8000350:	3318      	adds	r3, #24
 8000352:	443b      	add	r3, r7
 8000354:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 8000358:	7dfb      	ldrb	r3, [r7, #23]
 800035a:	4413      	add	r3, r2
 800035c:	75fb      	strb	r3, [r7, #23]
			 for(uint8_t var=0; var < 5;var++)
 800035e:	7dbb      	ldrb	r3, [r7, #22]
 8000360:	3301      	adds	r3, #1
 8000362:	75bb      	strb	r3, [r7, #22]
 8000364:	7dbb      	ldrb	r3, [r7, #22]
 8000366:	2b04      	cmp	r3, #4
 8000368:	d9f1      	bls.n	800034e <Manage_Network_Task_Func+0x52>
			 }
		   }
		   while(StateSUM > 0)
 800036a:	e04d      	b.n	8000408 <Manage_Network_Task_Func+0x10c>
		   {
			 if (uxQueueMessagesWaiting(OUT_S_N_MSD_MNet_Queue) > 0)
 800036c:	4b2b      	ldr	r3, [pc, #172]	; (800041c <Manage_Network_Task_Func+0x120>)
 800036e:	681b      	ldr	r3, [r3, #0]
 8000370:	4618      	mov	r0, r3
 8000372:	f003 fd99 	bl	8003ea8 <uxQueueMessagesWaiting>
 8000376:	4603      	mov	r3, r0
 8000378:	2b00      	cmp	r3, #0
 800037a:	d01b      	beq.n	80003b4 <Manage_Network_Task_Func+0xb8>
			 {
			    //get the nodeS i want to update from sd card
			    xQueueReceive(OUT_S_N_MSD_MNet_Queue ,update_node_buffer,0);
 800037c:	4b27      	ldr	r3, [pc, #156]	; (800041c <Manage_Network_Task_Func+0x120>)
 800037e:	681b      	ldr	r3, [r3, #0]
 8000380:	f107 0110 	add.w	r1, r7, #16
 8000384:	2200      	movs	r2, #0
 8000386:	4618      	mov	r0, r3
 8000388:	f003 fba2 	bl	8003ad0 <xQueueReceive>
			    StateSUM = 0;
 800038c:	2300      	movs	r3, #0
 800038e:	75fb      	strb	r3, [r7, #23]
			    for(node_id=0; node_id < MAX_SLAVE_COUNT;node_id++)
 8000390:	2300      	movs	r3, #0
 8000392:	73fb      	strb	r3, [r7, #15]
 8000394:	e00b      	b.n	80003ae <Manage_Network_Task_Func+0xb2>
			    {
			  	   StateSUM += update_node_buffer[node_id];
 8000396:	7bfb      	ldrb	r3, [r7, #15]
 8000398:	3318      	adds	r3, #24
 800039a:	443b      	add	r3, r7
 800039c:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 80003a0:	7dfb      	ldrb	r3, [r7, #23]
 80003a2:	4413      	add	r3, r2
 80003a4:	75fb      	strb	r3, [r7, #23]
			    for(node_id=0; node_id < MAX_SLAVE_COUNT;node_id++)
 80003a6:	7bfb      	ldrb	r3, [r7, #15]
 80003a8:	3301      	adds	r3, #1
 80003aa:	b2db      	uxtb	r3, r3
 80003ac:	73fb      	strb	r3, [r7, #15]
 80003ae:	7bfb      	ldrb	r3, [r7, #15]
 80003b0:	2b04      	cmp	r3, #4
 80003b2:	d9f0      	bls.n	8000396 <Manage_Network_Task_Func+0x9a>
			    }
			 }
			 for(node_id=0 ; node_id<MAX_SLAVE_COUNT;node_id++)
 80003b4:	2300      	movs	r3, #0
 80003b6:	73fb      	strb	r3, [r7, #15]
 80003b8:	e023      	b.n	8000402 <Manage_Network_Task_Func+0x106>
			 {
				if(update_node_buffer[node_id]==1)
 80003ba:	7bfb      	ldrb	r3, [r7, #15]
 80003bc:	3318      	adds	r3, #24
 80003be:	443b      	add	r3, r7
 80003c0:	f813 3c08 	ldrb.w	r3, [r3, #-8]
 80003c4:	2b01      	cmp	r3, #1
 80003c6:	d118      	bne.n	80003fa <Manage_Network_Task_Func+0xfe>
				{
					//SEND THE NODE TO MCONN TASK
					xQueueSend(IN_N_MNetwork_MConn_Queue ,&node_id,0);
 80003c8:	4b15      	ldr	r3, [pc, #84]	; (8000420 <Manage_Network_Task_Func+0x124>)
 80003ca:	6818      	ldr	r0, [r3, #0]
 80003cc:	f107 010f 	add.w	r1, r7, #15
 80003d0:	2300      	movs	r3, #0
 80003d2:	2200      	movs	r2, #0
 80003d4:	f003 f9c0 	bl	8003758 <xQueueGenericSend>
					//SEND THE SLAVE ADDRESS OF THE NODE TO SEND TASK
					xQueueSend(IN_N_MNetwork_Send_Queue ,&slave_address_buffer[node_id],0);
 80003d8:	4b12      	ldr	r3, [pc, #72]	; (8000424 <Manage_Network_Task_Func+0x128>)
 80003da:	6818      	ldr	r0, [r3, #0]
 80003dc:	7bfb      	ldrb	r3, [r7, #15]
 80003de:	461a      	mov	r2, r3
 80003e0:	4b0d      	ldr	r3, [pc, #52]	; (8000418 <Manage_Network_Task_Func+0x11c>)
 80003e2:	18d1      	adds	r1, r2, r3
 80003e4:	2300      	movs	r3, #0
 80003e6:	2200      	movs	r2, #0
 80003e8:	f003 f9b6 	bl	8003758 <xQueueGenericSend>
					xSemaphoreTake(IN_N_MConn_MNet_Semph,portMAX_DELAY);
 80003ec:	4b0e      	ldr	r3, [pc, #56]	; (8000428 <Manage_Network_Task_Func+0x12c>)
 80003ee:	681b      	ldr	r3, [r3, #0]
 80003f0:	f04f 31ff 	mov.w	r1, #4294967295
 80003f4:	4618      	mov	r0, r3
 80003f6:	f003 fc4b 	bl	8003c90 <xQueueSemaphoreTake>
			 for(node_id=0 ; node_id<MAX_SLAVE_COUNT;node_id++)
 80003fa:	7bfb      	ldrb	r3, [r7, #15]
 80003fc:	3301      	adds	r3, #1
 80003fe:	b2db      	uxtb	r3, r3
 8000400:	73fb      	strb	r3, [r7, #15]
 8000402:	7bfb      	ldrb	r3, [r7, #15]
 8000404:	2b04      	cmp	r3, #4
 8000406:	d9d8      	bls.n	80003ba <Manage_Network_Task_Func+0xbe>
		   while(StateSUM > 0)
 8000408:	7dfb      	ldrb	r3, [r7, #23]
 800040a:	2b00      	cmp	r3, #0
 800040c:	d1ae      	bne.n	800036c <Manage_Network_Task_Func+0x70>
	   if (flag_address_buffer_update == 0)
 800040e:	e779      	b.n	8000304 <Manage_Network_Task_Func+0x8>
 8000410:	20000144 	.word	0x20000144
 8000414:	20000128 	.word	0x20000128
 8000418:	20000018 	.word	0x20000018
 800041c:	200000e8 	.word	0x200000e8
 8000420:	20000108 	.word	0x20000108
 8000424:	20000124 	.word	0x20000124
 8000428:	2000013c 	.word	0x2000013c

0800042c <Manage_Connection_Task_Func>:
	   }
	}
}

void Manage_Connection_Task_Func(void * pvParameters)
{
 800042c:	b590      	push	{r4, r7, lr}
 800042e:	f5ad 7d07 	sub.w	sp, sp, #540	; 0x21c
 8000432:	af00      	add	r7, sp, #0
 8000434:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8000438:	f5a3 7305 	sub.w	r3, r3, #532	; 0x214
 800043c:	6018      	str	r0, [r3, #0]
	QueueSetMemberHandle_t 	local_Queue = NULL;
 800043e:	2300      	movs	r3, #0
 8000440:	f8c7 3210 	str.w	r3, [r7, #528]	; 0x210
	uint8_t			Node_Number;
	uint8_t			record_localBuffer[5][2][50];
	uint8_t			MSD_ack_Buffer[2];
	uint8_t			ack_localBuffer[2];
	bool	 		swing = 0;
 8000444:	2300      	movs	r3, #0
 8000446:	f887 3217 	strb.w	r3, [r7, #535]	; 0x217
	uint8_t 		recordSize = 0;
 800044a:	2300      	movs	r3, #0
 800044c:	f887 3214 	strb.w	r3, [r7, #532]	; 0x214
	uint8_t 		oldSize[5] = {3,3,3,3,3};  // the size of the Info starting message.
 8000450:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8000454:	f5a3 7304 	sub.w	r3, r3, #528	; 0x210
 8000458:	4ad2      	ldr	r2, [pc, #840]	; (80007a4 <Manage_Connection_Task_Func+0x378>)
 800045a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800045e:	6018      	str	r0, [r3, #0]
 8000460:	3304      	adds	r3, #4
 8000462:	7019      	strb	r1, [r3, #0]
	uint8_t 		var = 0;
 8000464:	2300      	movs	r3, #0
 8000466:	f887 3215 	strb.w	r3, [r7, #533]	; 0x215

	while(1)
	{
		// take the starting semaphore.
		// check which queue has received new data.
		local_Queue = xQueueSelectFromSet(MConn_QueueSet, 0);
 800046a:	4bcf      	ldr	r3, [pc, #828]	; (80007a8 <Manage_Connection_Task_Func+0x37c>)
 800046c:	681b      	ldr	r3, [r3, #0]
 800046e:	2100      	movs	r1, #0
 8000470:	4618      	mov	r0, r3
 8000472:	f003 fefb 	bl	800426c <xQueueSelectFromSet>
 8000476:	f8c7 0210 	str.w	r0, [r7, #528]	; 0x210
		if (local_Queue == OUT_S_N_MSD_MConn_Queue) // Receive new record from Manage SD task
 800047a:	4bcc      	ldr	r3, [pc, #816]	; (80007ac <Manage_Connection_Task_Func+0x380>)
 800047c:	681b      	ldr	r3, [r3, #0]
 800047e:	f8d7 2210 	ldr.w	r2, [r7, #528]	; 0x210
 8000482:	429a      	cmp	r2, r3
 8000484:	f040 80f8 	bne.w	8000678 <Manage_Connection_Task_Func+0x24c>
				}
			}
			else
			{
				// store the record inside a local buffer.
				xQueueReceive(local_Queue, record_localBuffer[swing], 0);
 8000488:	f897 3217 	ldrb.w	r3, [r7, #535]	; 0x217
 800048c:	f107 0218 	add.w	r2, r7, #24
 8000490:	2164      	movs	r1, #100	; 0x64
 8000492:	fb01 f303 	mul.w	r3, r1, r3
 8000496:	4413      	add	r3, r2
 8000498:	2200      	movs	r2, #0
 800049a:	4619      	mov	r1, r3
 800049c:	f8d7 0210 	ldr.w	r0, [r7, #528]	; 0x210
 80004a0:	f003 fb16 	bl	8003ad0 <xQueueReceive>
				// count the record size.
				while(record_localBuffer[Node_Number][swing][var] != '#') {
 80004a4:	e004      	b.n	80004b0 <Manage_Connection_Task_Func+0x84>
					recordSize++;
 80004a6:	f897 3214 	ldrb.w	r3, [r7, #532]	; 0x214
 80004aa:	3301      	adds	r3, #1
 80004ac:	f887 3214 	strb.w	r3, [r7, #532]	; 0x214
				while(record_localBuffer[Node_Number][swing][var] != '#') {
 80004b0:	f897 320f 	ldrb.w	r3, [r7, #527]	; 0x20f
 80004b4:	461c      	mov	r4, r3
 80004b6:	f897 2217 	ldrb.w	r2, [r7, #535]	; 0x217
 80004ba:	f897 3215 	ldrb.w	r3, [r7, #533]	; 0x215
 80004be:	f507 7106 	add.w	r1, r7, #536	; 0x218
 80004c2:	f5a1 7100 	sub.w	r1, r1, #512	; 0x200
 80004c6:	2032      	movs	r0, #50	; 0x32
 80004c8:	fb02 f000 	mul.w	r0, r2, r0
 80004cc:	2264      	movs	r2, #100	; 0x64
 80004ce:	fb04 f202 	mul.w	r2, r4, r2
 80004d2:	4402      	add	r2, r0
 80004d4:	440a      	add	r2, r1
 80004d6:	4413      	add	r3, r2
 80004d8:	781b      	ldrb	r3, [r3, #0]
 80004da:	2b23      	cmp	r3, #35	; 0x23
 80004dc:	d1e3      	bne.n	80004a6 <Manage_Connection_Task_Func+0x7a>
				}
				var = 0;	// return the var value to zero.
 80004de:	2300      	movs	r3, #0
 80004e0:	f887 3215 	strb.w	r3, [r7, #533]	; 0x215
				recordSize++; // as we add the size of the next record.  (Need to be checked)
 80004e4:	f897 3214 	ldrb.w	r3, [r7, #532]	; 0x214
 80004e8:	3301      	adds	r3, #1
 80004ea:	f887 3214 	strb.w	r3, [r7, #532]	; 0x214
				record_localBuffer[Node_Number][!swing][oldSize[Node_Number]] = recordSize;
 80004ee:	f897 320f 	ldrb.w	r3, [r7, #527]	; 0x20f
 80004f2:	461c      	mov	r4, r3
 80004f4:	f897 3217 	ldrb.w	r3, [r7, #535]	; 0x217
 80004f8:	f083 0301 	eor.w	r3, r3, #1
 80004fc:	b2db      	uxtb	r3, r3
 80004fe:	4619      	mov	r1, r3
 8000500:	f897 320f 	ldrb.w	r3, [r7, #527]	; 0x20f
 8000504:	461a      	mov	r2, r3
 8000506:	f507 7306 	add.w	r3, r7, #536	; 0x218
 800050a:	f5a3 7304 	sub.w	r3, r3, #528	; 0x210
 800050e:	5c9b      	ldrb	r3, [r3, r2]
 8000510:	4618      	mov	r0, r3
 8000512:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8000516:	f5a3 7200 	sub.w	r2, r3, #512	; 0x200
 800051a:	2332      	movs	r3, #50	; 0x32
 800051c:	fb03 f101 	mul.w	r1, r3, r1
 8000520:	2364      	movs	r3, #100	; 0x64
 8000522:	fb04 f303 	mul.w	r3, r4, r3
 8000526:	440b      	add	r3, r1
 8000528:	4413      	add	r3, r2
 800052a:	4403      	add	r3, r0
 800052c:	f897 2214 	ldrb.w	r2, [r7, #532]	; 0x214
 8000530:	701a      	strb	r2, [r3, #0]
				// send the old record and the size of the new one to the send task.
				xQueueSend(IN_N_MConn_Send_Queue_1,record_localBuffer[!swing],0);
 8000532:	4b9f      	ldr	r3, [pc, #636]	; (80007b0 <Manage_Connection_Task_Func+0x384>)
 8000534:	6818      	ldr	r0, [r3, #0]
 8000536:	f897 3217 	ldrb.w	r3, [r7, #535]	; 0x217
 800053a:	f083 0301 	eor.w	r3, r3, #1
 800053e:	b2db      	uxtb	r3, r3
 8000540:	4619      	mov	r1, r3
 8000542:	f107 0218 	add.w	r2, r7, #24
 8000546:	2364      	movs	r3, #100	; 0x64
 8000548:	fb01 f303 	mul.w	r3, r1, r3
 800054c:	18d1      	adds	r1, r2, r3
 800054e:	2300      	movs	r3, #0
 8000550:	2200      	movs	r2, #0
 8000552:	f003 f901 	bl	8003758 <xQueueGenericSend>
				oldSize[Node_Number]++;
 8000556:	f897 320f 	ldrb.w	r3, [r7, #527]	; 0x20f
 800055a:	f507 7206 	add.w	r2, r7, #536	; 0x218
 800055e:	f5a2 7204 	sub.w	r2, r2, #528	; 0x210
 8000562:	5cd2      	ldrb	r2, [r2, r3]
 8000564:	3201      	adds	r2, #1
 8000566:	b2d1      	uxtb	r1, r2
 8000568:	f507 7206 	add.w	r2, r7, #536	; 0x218
 800056c:	f5a2 7204 	sub.w	r2, r2, #528	; 0x210
 8000570:	54d1      	strb	r1, [r2, r3]
				xQueueSend(IN_N_MConn_Send_Queue_2,&oldSize[Node_Number],0);
 8000572:	4b90      	ldr	r3, [pc, #576]	; (80007b4 <Manage_Connection_Task_Func+0x388>)
 8000574:	6818      	ldr	r0, [r3, #0]
 8000576:	f897 320f 	ldrb.w	r3, [r7, #527]	; 0x20f
 800057a:	461a      	mov	r2, r3
 800057c:	f107 0308 	add.w	r3, r7, #8
 8000580:	1899      	adds	r1, r3, r2
 8000582:	2300      	movs	r3, #0
 8000584:	2200      	movs	r2, #0
 8000586:	f003 f8e7 	bl	8003758 <xQueueGenericSend>
				// clear the buffer and change the values.
				for (uint8_t var_l = 0; var_l < oldSize[Node_Number]; ++var_l) {
 800058a:	2300      	movs	r3, #0
 800058c:	f887 3216 	strb.w	r3, [r7, #534]	; 0x216
 8000590:	e01e      	b.n	80005d0 <Manage_Connection_Task_Func+0x1a4>
					record_localBuffer[Node_Number][!swing][var_l] = 0;
 8000592:	f897 320f 	ldrb.w	r3, [r7, #527]	; 0x20f
 8000596:	461c      	mov	r4, r3
 8000598:	f897 3217 	ldrb.w	r3, [r7, #535]	; 0x217
 800059c:	f083 0301 	eor.w	r3, r3, #1
 80005a0:	b2db      	uxtb	r3, r3
 80005a2:	4618      	mov	r0, r3
 80005a4:	f897 3216 	ldrb.w	r3, [r7, #534]	; 0x216
 80005a8:	f507 7206 	add.w	r2, r7, #536	; 0x218
 80005ac:	f5a2 7100 	sub.w	r1, r2, #512	; 0x200
 80005b0:	2232      	movs	r2, #50	; 0x32
 80005b2:	fb02 f000 	mul.w	r0, r2, r0
 80005b6:	2264      	movs	r2, #100	; 0x64
 80005b8:	fb04 f202 	mul.w	r2, r4, r2
 80005bc:	4402      	add	r2, r0
 80005be:	440a      	add	r2, r1
 80005c0:	4413      	add	r3, r2
 80005c2:	2200      	movs	r2, #0
 80005c4:	701a      	strb	r2, [r3, #0]
				for (uint8_t var_l = 0; var_l < oldSize[Node_Number]; ++var_l) {
 80005c6:	f897 3216 	ldrb.w	r3, [r7, #534]	; 0x216
 80005ca:	3301      	adds	r3, #1
 80005cc:	f887 3216 	strb.w	r3, [r7, #534]	; 0x216
 80005d0:	f897 320f 	ldrb.w	r3, [r7, #527]	; 0x20f
 80005d4:	461a      	mov	r2, r3
 80005d6:	f507 7306 	add.w	r3, r7, #536	; 0x218
 80005da:	f5a3 7304 	sub.w	r3, r3, #528	; 0x210
 80005de:	5c9b      	ldrb	r3, [r3, r2]
 80005e0:	f897 2216 	ldrb.w	r2, [r7, #534]	; 0x216
 80005e4:	429a      	cmp	r2, r3
 80005e6:	d3d4      	bcc.n	8000592 <Manage_Connection_Task_Func+0x166>
				}
				swing = !swing; // Flip the swing value.
 80005e8:	f897 3217 	ldrb.w	r3, [r7, #535]	; 0x217
 80005ec:	2b00      	cmp	r3, #0
 80005ee:	bf14      	ite	ne
 80005f0:	2301      	movne	r3, #1
 80005f2:	2300      	moveq	r3, #0
 80005f4:	b2db      	uxtb	r3, r3
 80005f6:	f083 0301 	eor.w	r3, r3, #1
 80005fa:	b2db      	uxtb	r3, r3
 80005fc:	f887 3217 	strb.w	r3, [r7, #535]	; 0x217
 8000600:	f897 3217 	ldrb.w	r3, [r7, #535]	; 0x217
 8000604:	f003 0301 	and.w	r3, r3, #1
 8000608:	f887 3217 	strb.w	r3, [r7, #535]	; 0x217
				oldSize[Node_Number] = recordSize; // store the recordsize as the oldsize.
 800060c:	f897 320f 	ldrb.w	r3, [r7, #527]	; 0x20f
 8000610:	4619      	mov	r1, r3
 8000612:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8000616:	f5a3 7304 	sub.w	r3, r3, #528	; 0x210
 800061a:	f897 2214 	ldrb.w	r2, [r7, #532]	; 0x214
 800061e:	545a      	strb	r2, [r3, r1]
			}
			record_Counter[Node_Number]++;
 8000620:	f897 320f 	ldrb.w	r3, [r7, #527]	; 0x20f
 8000624:	4a64      	ldr	r2, [pc, #400]	; (80007b8 <Manage_Connection_Task_Func+0x38c>)
 8000626:	f932 2013 	ldrsh.w	r2, [r2, r3, lsl #1]
 800062a:	b292      	uxth	r2, r2
 800062c:	3201      	adds	r2, #1
 800062e:	b292      	uxth	r2, r2
 8000630:	b211      	sxth	r1, r2
 8000632:	4a61      	ldr	r2, [pc, #388]	; (80007b8 <Manage_Connection_Task_Func+0x38c>)
 8000634:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			// give the ACK that trigger the Manage SD task
			MSD_ack_Buffer[0] =	FILE_RECORD[Node_Number];
 8000638:	f897 320f 	ldrb.w	r3, [r7, #527]	; 0x20f
 800063c:	461a      	mov	r2, r3
 800063e:	4b5f      	ldr	r3, [pc, #380]	; (80007bc <Manage_Connection_Task_Func+0x390>)
 8000640:	5c9a      	ldrb	r2, [r3, r2]
 8000642:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8000646:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800064a:	701a      	strb	r2, [r3, #0]
			MSD_ack_Buffer[1] = 0;
 800064c:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8000650:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8000654:	2200      	movs	r2, #0
 8000656:	705a      	strb	r2, [r3, #1]
			xQueueSend(OUT_N_S_MConn_MSD_Queue,MSD_ack_Buffer,0);
 8000658:	4b59      	ldr	r3, [pc, #356]	; (80007c0 <Manage_Connection_Task_Func+0x394>)
 800065a:	6818      	ldr	r0, [r3, #0]
 800065c:	f107 0114 	add.w	r1, r7, #20
 8000660:	2300      	movs	r3, #0
 8000662:	2200      	movs	r2, #0
 8000664:	f003 f878 	bl	8003758 <xQueueGenericSend>
			// Give the semaphore to the manage Network to change the node number.
			xSemaphoreGive(IN_N_MConn_MNet_Semph);
 8000668:	4b56      	ldr	r3, [pc, #344]	; (80007c4 <Manage_Connection_Task_Func+0x398>)
 800066a:	6818      	ldr	r0, [r3, #0]
 800066c:	2300      	movs	r3, #0
 800066e:	2200      	movs	r2, #0
 8000670:	2100      	movs	r1, #0
 8000672:	f003 f871 	bl	8003758 <xQueueGenericSend>
 8000676:	e6f8      	b.n	800046a <Manage_Connection_Task_Func+0x3e>
		}
		else if (local_Queue == IN_N_MNetwork_MConn_Queue) // Receive Data from Manage network task
 8000678:	4b53      	ldr	r3, [pc, #332]	; (80007c8 <Manage_Connection_Task_Func+0x39c>)
 800067a:	681b      	ldr	r3, [r3, #0]
 800067c:	f8d7 2210 	ldr.w	r2, [r7, #528]	; 0x210
 8000680:	429a      	cmp	r2, r3
 8000682:	d108      	bne.n	8000696 <Manage_Connection_Task_Func+0x26a>
		{
			// store the Node Number inside a local buffer.
			xQueueReceive(local_Queue, &Node_Number, 0);
 8000684:	f207 230f 	addw	r3, r7, #527	; 0x20f
 8000688:	2200      	movs	r2, #0
 800068a:	4619      	mov	r1, r3
 800068c:	f8d7 0210 	ldr.w	r0, [r7, #528]	; 0x210
 8000690:	f003 fa1e 	bl	8003ad0 <xQueueReceive>
 8000694:	e6e9      	b.n	800046a <Manage_Connection_Task_Func+0x3e>
		}
		else if (local_Queue == IN_N_Receive_MConn_Queue_1) // Receive acknowledge from the Connected Node.
 8000696:	4b4d      	ldr	r3, [pc, #308]	; (80007cc <Manage_Connection_Task_Func+0x3a0>)
 8000698:	681b      	ldr	r3, [r3, #0]
 800069a:	f8d7 2210 	ldr.w	r2, [r7, #528]	; 0x210
 800069e:	429a      	cmp	r2, r3
 80006a0:	f47f aee3 	bne.w	800046a <Manage_Connection_Task_Func+0x3e>
		{
			// store the acknowledge inside a local buffer.
			xQueueReceive(local_Queue, &ack_localBuffer[0], 0);
 80006a4:	f107 0310 	add.w	r3, r7, #16
 80006a8:	2200      	movs	r2, #0
 80006aa:	4619      	mov	r1, r3
 80006ac:	f8d7 0210 	ldr.w	r0, [r7, #528]	; 0x210
 80006b0:	f003 fa0e 	bl	8003ad0 <xQueueReceive>
			// store the Node Number.
			xQueueReceive(local_Queue, &ack_localBuffer[1], 0);
 80006b4:	f107 0310 	add.w	r3, r7, #16
 80006b8:	3301      	adds	r3, #1
 80006ba:	2200      	movs	r2, #0
 80006bc:	4619      	mov	r1, r3
 80006be:	f8d7 0210 	ldr.w	r0, [r7, #528]	; 0x210
 80006c2:	f003 fa05 	bl	8003ad0 <xQueueReceive>
			// switch on acks value.
			switch (ack_localBuffer[0])
 80006c6:	f507 7306 	add.w	r3, r7, #536	; 0x218
 80006ca:	f5a3 7302 	sub.w	r3, r3, #520	; 0x208
 80006ce:	781b      	ldrb	r3, [r3, #0]
 80006d0:	3b01      	subs	r3, #1
 80006d2:	2b06      	cmp	r3, #6
 80006d4:	f200 80d0 	bhi.w	8000878 <Manage_Connection_Task_Func+0x44c>
 80006d8:	a201      	add	r2, pc, #4	; (adr r2, 80006e0 <Manage_Connection_Task_Func+0x2b4>)
 80006da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80006de:	bf00      	nop
 80006e0:	080006fd 	.word	0x080006fd
 80006e4:	08000735 	.word	0x08000735
 80006e8:	0800076d 	.word	0x0800076d
 80006ec:	08000879 	.word	0x08000879
 80006f0:	08000879 	.word	0x08000879
 80006f4:	080007d9 	.word	0x080007d9
 80006f8:	08000811 	.word	0x08000811
			{
				case 	0x01:  // Start connection.
					// ask the SD for starting information {Number of Records(2-Bytes),First record size(1-Byte)}.
					// give the ACK that Open File in the SD task
					MSD_ack_Buffer[0] =	FILE_OPEN[ack_localBuffer[1]];
 80006fc:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8000700:	f5a3 7302 	sub.w	r3, r3, #520	; 0x208
 8000704:	785b      	ldrb	r3, [r3, #1]
 8000706:	461a      	mov	r2, r3
 8000708:	4b31      	ldr	r3, [pc, #196]	; (80007d0 <Manage_Connection_Task_Func+0x3a4>)
 800070a:	5c9a      	ldrb	r2, [r3, r2]
 800070c:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8000710:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8000714:	701a      	strb	r2, [r3, #0]
					MSD_ack_Buffer[1] = 0;
 8000716:	f507 7306 	add.w	r3, r7, #536	; 0x218
 800071a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800071e:	2200      	movs	r2, #0
 8000720:	705a      	strb	r2, [r3, #1]
					xQueueSend(OUT_N_S_MConn_MSD_Queue,MSD_ack_Buffer,0);
 8000722:	4b27      	ldr	r3, [pc, #156]	; (80007c0 <Manage_Connection_Task_Func+0x394>)
 8000724:	6818      	ldr	r0, [r3, #0]
 8000726:	f107 0114 	add.w	r1, r7, #20
 800072a:	2300      	movs	r3, #0
 800072c:	2200      	movs	r2, #0
 800072e:	f003 f813 	bl	8003758 <xQueueGenericSend>
					break;
 8000732:	e0a2      	b.n	800087a <Manage_Connection_Task_Func+0x44e>

				case 	0x02:  // Accepted ACK for new Image .
					// ask the SD for the First Record.
					MSD_ack_Buffer[0] =	FILE_RECORD[ack_localBuffer[1]];
 8000734:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8000738:	f5a3 7302 	sub.w	r3, r3, #520	; 0x208
 800073c:	785b      	ldrb	r3, [r3, #1]
 800073e:	461a      	mov	r2, r3
 8000740:	4b1e      	ldr	r3, [pc, #120]	; (80007bc <Manage_Connection_Task_Func+0x390>)
 8000742:	5c9a      	ldrb	r2, [r3, r2]
 8000744:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8000748:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800074c:	701a      	strb	r2, [r3, #0]
					MSD_ack_Buffer[1] = 0;
 800074e:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8000752:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8000756:	2200      	movs	r2, #0
 8000758:	705a      	strb	r2, [r3, #1]
					xQueueSend(OUT_N_S_MConn_MSD_Queue,MSD_ack_Buffer,0);
 800075a:	4b19      	ldr	r3, [pc, #100]	; (80007c0 <Manage_Connection_Task_Func+0x394>)
 800075c:	6818      	ldr	r0, [r3, #0]
 800075e:	f107 0114 	add.w	r1, r7, #20
 8000762:	2300      	movs	r3, #0
 8000764:	2200      	movs	r2, #0
 8000766:	f002 fff7 	bl	8003758 <xQueueGenericSend>
					break;
 800076a:	e086      	b.n	800087a <Manage_Connection_Task_Func+0x44e>

				case 	0x03:  // Not Accepted n_ack for new Image .
					// Delete the Image and inform the Server.
					MSD_ack_Buffer[0] =	FILE_CLOSE[ack_localBuffer[1]];
 800076c:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8000770:	f5a3 7302 	sub.w	r3, r3, #520	; 0x208
 8000774:	785b      	ldrb	r3, [r3, #1]
 8000776:	461a      	mov	r2, r3
 8000778:	4b16      	ldr	r3, [pc, #88]	; (80007d4 <Manage_Connection_Task_Func+0x3a8>)
 800077a:	5c9a      	ldrb	r2, [r3, r2]
 800077c:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8000780:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8000784:	701a      	strb	r2, [r3, #0]
					MSD_ack_Buffer[1] = 0;
 8000786:	f507 7306 	add.w	r3, r7, #536	; 0x218
 800078a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800078e:	2200      	movs	r2, #0
 8000790:	705a      	strb	r2, [r3, #1]
					xQueueSend(OUT_N_S_MConn_MSD_Queue,MSD_ack_Buffer,0);
 8000792:	4b0b      	ldr	r3, [pc, #44]	; (80007c0 <Manage_Connection_Task_Func+0x394>)
 8000794:	6818      	ldr	r0, [r3, #0]
 8000796:	f107 0114 	add.w	r1, r7, #20
 800079a:	2300      	movs	r3, #0
 800079c:	2200      	movs	r2, #0
 800079e:	f002 ffdb 	bl	8003758 <xQueueGenericSend>
					break;
 80007a2:	e06a      	b.n	800087a <Manage_Connection_Task_Func+0x44e>
 80007a4:	08006448 	.word	0x08006448
 80007a8:	2000012c 	.word	0x2000012c
 80007ac:	200000ec 	.word	0x200000ec
 80007b0:	20000114 	.word	0x20000114
 80007b4:	20000118 	.word	0x20000118
 80007b8:	20000020 	.word	0x20000020
 80007bc:	20000010 	.word	0x20000010
 80007c0:	200000f0 	.word	0x200000f0
 80007c4:	2000013c 	.word	0x2000013c
 80007c8:	20000108 	.word	0x20000108
 80007cc:	2000010c 	.word	0x2000010c
 80007d0:	20000000 	.word	0x20000000
 80007d4:	20000008 	.word	0x20000008
					// store the start time.
					break;

				case 	0x06:	// process Failed.
					// stop and end the process.
					MSD_ack_Buffer[0] =	FILE_CLOSE[ack_localBuffer[1]];
 80007d8:	f507 7306 	add.w	r3, r7, #536	; 0x218
 80007dc:	f5a3 7302 	sub.w	r3, r3, #520	; 0x208
 80007e0:	785b      	ldrb	r3, [r3, #1]
 80007e2:	461a      	mov	r2, r3
 80007e4:	4b25      	ldr	r3, [pc, #148]	; (800087c <Manage_Connection_Task_Func+0x450>)
 80007e6:	5c9a      	ldrb	r2, [r3, r2]
 80007e8:	f507 7306 	add.w	r3, r7, #536	; 0x218
 80007ec:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80007f0:	701a      	strb	r2, [r3, #0]
					MSD_ack_Buffer[1] = 0;
 80007f2:	f507 7306 	add.w	r3, r7, #536	; 0x218
 80007f6:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80007fa:	2200      	movs	r2, #0
 80007fc:	705a      	strb	r2, [r3, #1]
					xQueueSend(OUT_N_S_MConn_MSD_Queue,MSD_ack_Buffer,0);
 80007fe:	4b20      	ldr	r3, [pc, #128]	; (8000880 <Manage_Connection_Task_Func+0x454>)
 8000800:	6818      	ldr	r0, [r3, #0]
 8000802:	f107 0114 	add.w	r1, r7, #20
 8000806:	2300      	movs	r3, #0
 8000808:	2200      	movs	r2, #0
 800080a:	f002 ffa5 	bl	8003758 <xQueueGenericSend>
					break;
 800080e:	e034      	b.n	800087a <Manage_Connection_Task_Func+0x44e>

				case 	0x07:	// End Process successfully.
					ResetBranch();
 8000810:	f000 f89e 	bl	8000950 <ResetBranch>
					record_Counter[ack_localBuffer[1]] = 0;
 8000814:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8000818:	f5a3 7302 	sub.w	r3, r3, #520	; 0x208
 800081c:	785b      	ldrb	r3, [r3, #1]
 800081e:	461a      	mov	r2, r3
 8000820:	4b18      	ldr	r3, [pc, #96]	; (8000884 <Manage_Connection_Task_Func+0x458>)
 8000822:	2100      	movs	r1, #0
 8000824:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
					oldSize[ack_localBuffer[1]] = 3;
 8000828:	f507 7306 	add.w	r3, r7, #536	; 0x218
 800082c:	f5a3 7302 	sub.w	r3, r3, #520	; 0x208
 8000830:	785b      	ldrb	r3, [r3, #1]
 8000832:	461a      	mov	r2, r3
 8000834:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8000838:	f5a3 7304 	sub.w	r3, r3, #528	; 0x210
 800083c:	2103      	movs	r1, #3
 800083e:	5499      	strb	r1, [r3, r2]
					// send the end ACK to the MSD task.
					MSD_ack_Buffer[0] =	FILE_CLOSE[ack_localBuffer[1]];
 8000840:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8000844:	f5a3 7302 	sub.w	r3, r3, #520	; 0x208
 8000848:	785b      	ldrb	r3, [r3, #1]
 800084a:	461a      	mov	r2, r3
 800084c:	4b0b      	ldr	r3, [pc, #44]	; (800087c <Manage_Connection_Task_Func+0x450>)
 800084e:	5c9a      	ldrb	r2, [r3, r2]
 8000850:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8000854:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8000858:	701a      	strb	r2, [r3, #0]
					MSD_ack_Buffer[1] = 0;
 800085a:	f507 7306 	add.w	r3, r7, #536	; 0x218
 800085e:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8000862:	2200      	movs	r2, #0
 8000864:	705a      	strb	r2, [r3, #1]
					xQueueSend(OUT_N_S_MConn_MSD_Queue,MSD_ack_Buffer,0);
 8000866:	4b06      	ldr	r3, [pc, #24]	; (8000880 <Manage_Connection_Task_Func+0x454>)
 8000868:	6818      	ldr	r0, [r3, #0]
 800086a:	f107 0114 	add.w	r1, r7, #20
 800086e:	2300      	movs	r3, #0
 8000870:	2200      	movs	r2, #0
 8000872:	f002 ff71 	bl	8003758 <xQueueGenericSend>
					break;
 8000876:	e000      	b.n	800087a <Manage_Connection_Task_Func+0x44e>

				default:
					break;
 8000878:	bf00      	nop
		local_Queue = xQueueSelectFromSet(MConn_QueueSet, 0);
 800087a:	e5f6      	b.n	800046a <Manage_Connection_Task_Func+0x3e>
 800087c:	20000008 	.word	0x20000008
 8000880:	200000f0 	.word	0x200000f0
 8000884:	20000020 	.word	0x20000020

08000888 <Receive_from_Node_Task_Func>:
		}
	}
}

void Receive_from_Node_Task_Func(void * pvParameters)
{
 8000888:	b580      	push	{r7, lr}
 800088a:	b090      	sub	sp, #64	; 0x40
 800088c:	af00      	add	r7, sp, #0
 800088e:	6078      	str	r0, [r7, #4]
	while(1)
	{
		// store the received data into the local buffer
		//HAL_I2C_Slave_Receive_DMA(hi2c, pData, Size)
		// send the data to the manage connection task.
		xQueueSend(IN_N_Receive_MConn_Queue_1,ack_localBuffer,0);
 8000890:	4b08      	ldr	r3, [pc, #32]	; (80008b4 <Receive_from_Node_Task_Func+0x2c>)
 8000892:	6818      	ldr	r0, [r3, #0]
 8000894:	f107 010c 	add.w	r1, r7, #12
 8000898:	2300      	movs	r3, #0
 800089a:	2200      	movs	r2, #0
 800089c:	f002 ff5c 	bl	8003758 <xQueueGenericSend>
		// get the Node ID from the Address value, and send it to the Manage Connection.
		// GETID_FUN(ADDRESS,NodeNum);
		xQueueSend(IN_N_Receive_MConn_Queue_2,&NodeNum,0);
 80008a0:	4b05      	ldr	r3, [pc, #20]	; (80008b8 <Receive_from_Node_Task_Func+0x30>)
 80008a2:	6818      	ldr	r0, [r3, #0]
 80008a4:	f107 010b 	add.w	r1, r7, #11
 80008a8:	2300      	movs	r3, #0
 80008aa:	2200      	movs	r2, #0
 80008ac:	f002 ff54 	bl	8003758 <xQueueGenericSend>
		xQueueSend(IN_N_Receive_MConn_Queue_1,ack_localBuffer,0);
 80008b0:	e7ee      	b.n	8000890 <Receive_from_Node_Task_Func+0x8>
 80008b2:	bf00      	nop
 80008b4:	2000010c 	.word	0x2000010c
 80008b8:	20000110 	.word	0x20000110

080008bc <Send_to_Node_Task_Func>:
	}
}

void Send_to_Node_Task_Func(void * pvParameters)
{
 80008bc:	b580      	push	{r7, lr}
 80008be:	b092      	sub	sp, #72	; 0x48
 80008c0:	af00      	add	r7, sp, #0
 80008c2:	6078      	str	r0, [r7, #4]
	QueueSetMemberHandle_t 	local_Queue = NULL;
 80008c4:	2300      	movs	r3, #0
 80008c6:	647b      	str	r3, [r7, #68]	; 0x44
	uint8_t			DevAddress = 0;
 80008c8:	2300      	movs	r3, #0
 80008ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
	uint8_t			record_localBuffer[50];
	uint8_t			record_Size;
	while(1)
	{
		// receive the data from the Queue.
		local_Queue = xQueueSelectFromSet(N_Send_QueueSet, 0);
 80008ce:	4b1c      	ldr	r3, [pc, #112]	; (8000940 <Send_to_Node_Task_Func+0x84>)
 80008d0:	681b      	ldr	r3, [r3, #0]
 80008d2:	2100      	movs	r1, #0
 80008d4:	4618      	mov	r0, r3
 80008d6:	f003 fcc9 	bl	800426c <xQueueSelectFromSet>
 80008da:	6478      	str	r0, [r7, #68]	; 0x44
		if (local_Queue == IN_N_MConn_Send_Queue_1) // Receive new record from Manage SD task
 80008dc:	4b19      	ldr	r3, [pc, #100]	; (8000944 <Send_to_Node_Task_Func+0x88>)
 80008de:	681b      	ldr	r3, [r3, #0]
 80008e0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80008e2:	429a      	cmp	r2, r3
 80008e4:	d110      	bne.n	8000908 <Send_to_Node_Task_Func+0x4c>
		{
			xQueueReceive(IN_N_MConn_Send_Queue_1, record_localBuffer, 0);
 80008e6:	4b17      	ldr	r3, [pc, #92]	; (8000944 <Send_to_Node_Task_Func+0x88>)
 80008e8:	681b      	ldr	r3, [r3, #0]
 80008ea:	f107 0110 	add.w	r1, r7, #16
 80008ee:	2200      	movs	r2, #0
 80008f0:	4618      	mov	r0, r3
 80008f2:	f003 f8ed 	bl	8003ad0 <xQueueReceive>
			xQueueReceive(IN_N_MConn_Send_Queue_1, &record_Size, 0);
 80008f6:	4b13      	ldr	r3, [pc, #76]	; (8000944 <Send_to_Node_Task_Func+0x88>)
 80008f8:	681b      	ldr	r3, [r3, #0]
 80008fa:	f107 010f 	add.w	r1, r7, #15
 80008fe:	2200      	movs	r2, #0
 8000900:	4618      	mov	r0, r3
 8000902:	f003 f8e5 	bl	8003ad0 <xQueueReceive>
 8000906:	e7e2      	b.n	80008ce <Send_to_Node_Task_Func+0x12>
			// send the data.
			//HAL_I2C_Master_Transmit_DMA(hi2c, 0x00, record_localBuffer, record_Size);
		}
		else if (local_Queue == IN_N_CheckNet_Send_Queue)
 8000908:	4b0f      	ldr	r3, [pc, #60]	; (8000948 <Send_to_Node_Task_Func+0x8c>)
 800090a:	681b      	ldr	r3, [r3, #0]
 800090c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800090e:	429a      	cmp	r2, r3
 8000910:	d108      	bne.n	8000924 <Send_to_Node_Task_Func+0x68>
		{
			xQueueReceive(IN_N_CheckNet_Send_Queue, record_localBuffer, 0);
 8000912:	4b0d      	ldr	r3, [pc, #52]	; (8000948 <Send_to_Node_Task_Func+0x8c>)
 8000914:	681b      	ldr	r3, [r3, #0]
 8000916:	f107 0110 	add.w	r1, r7, #16
 800091a:	2200      	movs	r2, #0
 800091c:	4618      	mov	r0, r3
 800091e:	f003 f8d7 	bl	8003ad0 <xQueueReceive>
 8000922:	e7d4      	b.n	80008ce <Send_to_Node_Task_Func+0x12>
			// send the data.
			//HAL_I2C_Master_Transmit_DMA(hi2c, 0x00, record_localBuffer[0], 1);
		}
		else if (local_Queue == IN_N_MNetwork_Send_Queue)
 8000924:	4b09      	ldr	r3, [pc, #36]	; (800094c <Send_to_Node_Task_Func+0x90>)
 8000926:	681b      	ldr	r3, [r3, #0]
 8000928:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800092a:	429a      	cmp	r2, r3
 800092c:	d1cf      	bne.n	80008ce <Send_to_Node_Task_Func+0x12>
		{
			xQueueReceive(IN_N_MNetwork_Send_Queue, &DevAddress, 0);
 800092e:	4b07      	ldr	r3, [pc, #28]	; (800094c <Send_to_Node_Task_Func+0x90>)
 8000930:	681b      	ldr	r3, [r3, #0]
 8000932:	f107 0143 	add.w	r1, r7, #67	; 0x43
 8000936:	2200      	movs	r2, #0
 8000938:	4618      	mov	r0, r3
 800093a:	f003 f8c9 	bl	8003ad0 <xQueueReceive>
		local_Queue = xQueueSelectFromSet(N_Send_QueueSet, 0);
 800093e:	e7c6      	b.n	80008ce <Send_to_Node_Task_Func+0x12>
 8000940:	20000130 	.word	0x20000130
 8000944:	20000114 	.word	0x20000114
 8000948:	20000120 	.word	0x20000120
 800094c:	20000124 	.word	0x20000124

08000950 <ResetBranch>:
		}
	}
}
/*----------------------------------------------------------------------------*/
void ResetBranch(void)
{
 8000950:	b480      	push	{r7}
 8000952:	af00      	add	r7, sp, #0
	flag_address_buffer_update=0;
 8000954:	4b03      	ldr	r3, [pc, #12]	; (8000964 <ResetBranch+0x14>)
 8000956:	2200      	movs	r2, #0
 8000958:	701a      	strb	r2, [r3, #0]
}
 800095a:	bf00      	nop
 800095c:	46bd      	mov	sp, r7
 800095e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000962:	4770      	bx	lr
 8000964:	20000144 	.word	0x20000144

08000968 <MX_FREERTOS_Init>:
/*@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@*/

/* USER CODE END Application */
void MX_FREERTOS_Init(void) {
 8000968:	b580      	push	{r7, lr}
 800096a:	b082      	sub	sp, #8
 800096c:	af02      	add	r7, sp, #8
  /* USER CODE END Init */

  /* USER CODE BEGIN RTOS_SEMAPHORES */
  /* add semaphores, ... */
	// General Branches
	OUT_N_S_MConn_MNSD_Semph = xSemaphoreCreateBinary();
 800096e:	2203      	movs	r2, #3
 8000970:	2100      	movs	r1, #0
 8000972:	2001      	movs	r0, #1
 8000974:	f002 fe8b 	bl	800368e <xQueueGenericCreate>
 8000978:	4603      	mov	r3, r0
 800097a:	4ab7      	ldr	r2, [pc, #732]	; (8000c58 <MX_FREERTOS_Init+0x2f0>)
 800097c:	6013      	str	r3, [r2, #0]
	// General control
	// ESP
	// SD
	// Nodes
	IN_N_CheckNet_Semph = xSemaphoreCreateBinary();
 800097e:	2203      	movs	r2, #3
 8000980:	2100      	movs	r1, #0
 8000982:	2001      	movs	r0, #1
 8000984:	f002 fe83 	bl	800368e <xQueueGenericCreate>
 8000988:	4603      	mov	r3, r0
 800098a:	4ab4      	ldr	r2, [pc, #720]	; (8000c5c <MX_FREERTOS_Init+0x2f4>)
 800098c:	6013      	str	r3, [r2, #0]
	IN_N_MConn_MNet_Semph = xSemaphoreCreateBinary();
 800098e:	2203      	movs	r2, #3
 8000990:	2100      	movs	r1, #0
 8000992:	2001      	movs	r0, #1
 8000994:	f002 fe7b 	bl	800368e <xQueueGenericCreate>
 8000998:	4603      	mov	r3, r0
 800099a:	4ab1      	ldr	r2, [pc, #708]	; (8000c60 <MX_FREERTOS_Init+0x2f8>)
 800099c:	6013      	str	r3, [r2, #0]
  /* USER CODE END RTOS_SEMAPHORES */

  /* USER CODE BEGIN RTOS_TIMERS */
  /* start timers, add new ones, ... */
	Record_Timer = xTimerCreate("Record Timer", _1S_, pdTRUE, NULL, &vRecord_TimerCallBack ); // the periodic will change according to the flashing speed.
 800099e:	4bb1      	ldr	r3, [pc, #708]	; (8000c64 <MX_FREERTOS_Init+0x2fc>)
 80009a0:	9300      	str	r3, [sp, #0]
 80009a2:	2300      	movs	r3, #0
 80009a4:	2201      	movs	r2, #1
 80009a6:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80009aa:	48af      	ldr	r0, [pc, #700]	; (8000c68 <MX_FREERTOS_Init+0x300>)
 80009ac:	f004 fd10 	bl	80053d0 <xTimerCreate>
 80009b0:	4603      	mov	r3, r0
 80009b2:	4aae      	ldr	r2, [pc, #696]	; (8000c6c <MX_FREERTOS_Init+0x304>)
 80009b4:	6013      	str	r3, [r2, #0]
  /* USER CODE END RTOS_TIMERS */

  /* USER CODE BEGIN RTOS_QUEUES */
  /* add queues, ... */
	// General Branches
	OUT_E_S_MESP_MSD_Queue 	= xQueueCreate(2,sizeof(uint8_t));
 80009b6:	2200      	movs	r2, #0
 80009b8:	2101      	movs	r1, #1
 80009ba:	2002      	movs	r0, #2
 80009bc:	f002 fe67 	bl	800368e <xQueueGenericCreate>
 80009c0:	4603      	mov	r3, r0
 80009c2:	4aab      	ldr	r2, [pc, #684]	; (8000c70 <MX_FREERTOS_Init+0x308>)
 80009c4:	6013      	str	r3, [r2, #0]
	OUT_S_N_MSD_MNet_Queue 	= xQueueCreate(2,sizeof(uint8_t));
 80009c6:	2200      	movs	r2, #0
 80009c8:	2101      	movs	r1, #1
 80009ca:	2002      	movs	r0, #2
 80009cc:	f002 fe5f 	bl	800368e <xQueueGenericCreate>
 80009d0:	4603      	mov	r3, r0
 80009d2:	4aa8      	ldr	r2, [pc, #672]	; (8000c74 <MX_FREERTOS_Init+0x30c>)
 80009d4:	6013      	str	r3, [r2, #0]
	OUT_S_N_MSD_MConn_Queue = xQueueCreate(2,sizeof(uint8_t));
 80009d6:	2200      	movs	r2, #0
 80009d8:	2101      	movs	r1, #1
 80009da:	2002      	movs	r0, #2
 80009dc:	f002 fe57 	bl	800368e <xQueueGenericCreate>
 80009e0:	4603      	mov	r3, r0
 80009e2:	4aa5      	ldr	r2, [pc, #660]	; (8000c78 <MX_FREERTOS_Init+0x310>)
 80009e4:	6013      	str	r3, [r2, #0]
	OUT_N_S_MConn_MSD_Queue	= xQueueCreate(2,sizeof(uint8_t));
 80009e6:	2200      	movs	r2, #0
 80009e8:	2101      	movs	r1, #1
 80009ea:	2002      	movs	r0, #2
 80009ec:	f002 fe4f 	bl	800368e <xQueueGenericCreate>
 80009f0:	4603      	mov	r3, r0
 80009f2:	4aa2      	ldr	r2, [pc, #648]	; (8000c7c <MX_FREERTOS_Init+0x314>)
 80009f4:	6013      	str	r3, [r2, #0]
	// General control
	IN_G_CBranch_CDMA_Queue = xQueueCreate(2,sizeof(uint8_t));
 80009f6:	2200      	movs	r2, #0
 80009f8:	2101      	movs	r1, #1
 80009fa:	2002      	movs	r0, #2
 80009fc:	f002 fe47 	bl	800368e <xQueueGenericCreate>
 8000a00:	4603      	mov	r3, r0
 8000a02:	4a9f      	ldr	r2, [pc, #636]	; (8000c80 <MX_FREERTOS_Init+0x318>)
 8000a04:	6013      	str	r3, [r2, #0]
	// ESP
	IN_E_Receive_MESP_Queue = xQueueCreate(2,sizeof(uint8_t));
 8000a06:	2200      	movs	r2, #0
 8000a08:	2101      	movs	r1, #1
 8000a0a:	2002      	movs	r0, #2
 8000a0c:	f002 fe3f 	bl	800368e <xQueueGenericCreate>
 8000a10:	4603      	mov	r3, r0
 8000a12:	4a9c      	ldr	r2, [pc, #624]	; (8000c84 <MX_FREERTOS_Init+0x31c>)
 8000a14:	6013      	str	r3, [r2, #0]
	IN_E_MESP_Send_Queue    = xQueueCreate(2,sizeof(uint8_t));
 8000a16:	2200      	movs	r2, #0
 8000a18:	2101      	movs	r1, #1
 8000a1a:	2002      	movs	r0, #2
 8000a1c:	f002 fe37 	bl	800368e <xQueueGenericCreate>
 8000a20:	4603      	mov	r3, r0
 8000a22:	4a99      	ldr	r2, [pc, #612]	; (8000c88 <MX_FREERTOS_Init+0x320>)
 8000a24:	6013      	str	r3, [r2, #0]
	// SD
	IN_S_Receive_MSD_Queue 	= xQueueCreate(2,sizeof(uint8_t));
 8000a26:	2200      	movs	r2, #0
 8000a28:	2101      	movs	r1, #1
 8000a2a:	2002      	movs	r0, #2
 8000a2c:	f002 fe2f 	bl	800368e <xQueueGenericCreate>
 8000a30:	4603      	mov	r3, r0
 8000a32:	4a96      	ldr	r2, [pc, #600]	; (8000c8c <MX_FREERTOS_Init+0x324>)
 8000a34:	6013      	str	r3, [r2, #0]
	IN_S_MSD_Send_Queue 	= xQueueCreate(2,sizeof(uint8_t));
 8000a36:	2200      	movs	r2, #0
 8000a38:	2101      	movs	r1, #1
 8000a3a:	2002      	movs	r0, #2
 8000a3c:	f002 fe27 	bl	800368e <xQueueGenericCreate>
 8000a40:	4603      	mov	r3, r0
 8000a42:	4a93      	ldr	r2, [pc, #588]	; (8000c90 <MX_FREERTOS_Init+0x328>)
 8000a44:	6013      	str	r3, [r2, #0]
	// Nodes
	IN_N_MNetwork_MConn_Queue   = xQueueCreate(1,sizeof(uint8_t));
 8000a46:	2200      	movs	r2, #0
 8000a48:	2101      	movs	r1, #1
 8000a4a:	2001      	movs	r0, #1
 8000a4c:	f002 fe1f 	bl	800368e <xQueueGenericCreate>
 8000a50:	4603      	mov	r3, r0
 8000a52:	4a90      	ldr	r2, [pc, #576]	; (8000c94 <MX_FREERTOS_Init+0x32c>)
 8000a54:	6013      	str	r3, [r2, #0]
	IN_N_Receive_MConn_Queue_1  = xQueueCreate(2,sizeof(uint8_t));
 8000a56:	2200      	movs	r2, #0
 8000a58:	2101      	movs	r1, #1
 8000a5a:	2002      	movs	r0, #2
 8000a5c:	f002 fe17 	bl	800368e <xQueueGenericCreate>
 8000a60:	4603      	mov	r3, r0
 8000a62:	4a8d      	ldr	r2, [pc, #564]	; (8000c98 <MX_FREERTOS_Init+0x330>)
 8000a64:	6013      	str	r3, [r2, #0]
	IN_N_Receive_MConn_Queue_2	= xQueueCreate(1,sizeof(uint8_t));
 8000a66:	2200      	movs	r2, #0
 8000a68:	2101      	movs	r1, #1
 8000a6a:	2001      	movs	r0, #1
 8000a6c:	f002 fe0f 	bl	800368e <xQueueGenericCreate>
 8000a70:	4603      	mov	r3, r0
 8000a72:	4a8a      	ldr	r2, [pc, #552]	; (8000c9c <MX_FREERTOS_Init+0x334>)
 8000a74:	6013      	str	r3, [r2, #0]
	IN_N_MConn_Send_Queue_1 	= xQueueCreate(2,sizeof(uint8_t));
 8000a76:	2200      	movs	r2, #0
 8000a78:	2101      	movs	r1, #1
 8000a7a:	2002      	movs	r0, #2
 8000a7c:	f002 fe07 	bl	800368e <xQueueGenericCreate>
 8000a80:	4603      	mov	r3, r0
 8000a82:	4a87      	ldr	r2, [pc, #540]	; (8000ca0 <MX_FREERTOS_Init+0x338>)
 8000a84:	6013      	str	r3, [r2, #0]
	IN_N_MConn_Send_Queue_2	    = xQueueCreate(1,sizeof(uint8_t));
 8000a86:	2200      	movs	r2, #0
 8000a88:	2101      	movs	r1, #1
 8000a8a:	2001      	movs	r0, #1
 8000a8c:	f002 fdff 	bl	800368e <xQueueGenericCreate>
 8000a90:	4603      	mov	r3, r0
 8000a92:	4a84      	ldr	r2, [pc, #528]	; (8000ca4 <MX_FREERTOS_Init+0x33c>)
 8000a94:	6013      	str	r3, [r2, #0]
	IN_N_Receive_CheckNet_Queue = xQueueCreate(2,sizeof(uint8_t));
 8000a96:	2200      	movs	r2, #0
 8000a98:	2101      	movs	r1, #1
 8000a9a:	2002      	movs	r0, #2
 8000a9c:	f002 fdf7 	bl	800368e <xQueueGenericCreate>
 8000aa0:	4603      	mov	r3, r0
 8000aa2:	4a81      	ldr	r2, [pc, #516]	; (8000ca8 <MX_FREERTOS_Init+0x340>)
 8000aa4:	6013      	str	r3, [r2, #0]
	IN_N_CheckNet_Send_Queue 	= xQueueCreate(2,sizeof(uint8_t));
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	2101      	movs	r1, #1
 8000aaa:	2002      	movs	r0, #2
 8000aac:	f002 fdef 	bl	800368e <xQueueGenericCreate>
 8000ab0:	4603      	mov	r3, r0
 8000ab2:	4a7e      	ldr	r2, [pc, #504]	; (8000cac <MX_FREERTOS_Init+0x344>)
 8000ab4:	6013      	str	r3, [r2, #0]
	IN_N_MNetwork_Send_Queue	= xQueueCreate(2,sizeof(uint8_t));
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	2101      	movs	r1, #1
 8000aba:	2002      	movs	r0, #2
 8000abc:	f002 fde7 	bl	800368e <xQueueGenericCreate>
 8000ac0:	4603      	mov	r3, r0
 8000ac2:	4a7b      	ldr	r2, [pc, #492]	; (8000cb0 <MX_FREERTOS_Init+0x348>)
 8000ac4:	6013      	str	r3, [r2, #0]
	IN_N_CheckNet_MNetwork_Queue= xQueueCreate(2,sizeof(uint8_t));
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	2101      	movs	r1, #1
 8000aca:	2002      	movs	r0, #2
 8000acc:	f002 fddf 	bl	800368e <xQueueGenericCreate>
 8000ad0:	4603      	mov	r3, r0
 8000ad2:	4a78      	ldr	r2, [pc, #480]	; (8000cb4 <MX_FREERTOS_Init+0x34c>)
 8000ad4:	6013      	str	r3, [r2, #0]
	// QueueSet.
	MConn_QueueSet			= xQueueCreateSet(MConn_QueueSet_Size);
 8000ad6:	2032      	movs	r0, #50	; 0x32
 8000ad8:	f003 fb98 	bl	800420c <xQueueCreateSet>
 8000adc:	4603      	mov	r3, r0
 8000ade:	4a76      	ldr	r2, [pc, #472]	; (8000cb8 <MX_FREERTOS_Init+0x350>)
 8000ae0:	6013      	str	r3, [r2, #0]
	N_Send_QueueSet 		= xQueueCreateSet(N_Send_QueueSet_Size);
 8000ae2:	2032      	movs	r0, #50	; 0x32
 8000ae4:	f003 fb92 	bl	800420c <xQueueCreateSet>
 8000ae8:	4603      	mov	r3, r0
 8000aea:	4a74      	ldr	r2, [pc, #464]	; (8000cbc <MX_FREERTOS_Init+0x354>)
 8000aec:	6013      	str	r3, [r2, #0]
	// Add to set
	xQueueAddToSet(IN_N_Receive_MConn_Queue_1, MConn_QueueSet);
 8000aee:	4b6a      	ldr	r3, [pc, #424]	; (8000c98 <MX_FREERTOS_Init+0x330>)
 8000af0:	681b      	ldr	r3, [r3, #0]
 8000af2:	4a71      	ldr	r2, [pc, #452]	; (8000cb8 <MX_FREERTOS_Init+0x350>)
 8000af4:	6812      	ldr	r2, [r2, #0]
 8000af6:	4611      	mov	r1, r2
 8000af8:	4618      	mov	r0, r3
 8000afa:	f003 fb96 	bl	800422a <xQueueAddToSet>
	xQueueAddToSet(OUT_S_N_MSD_MConn_Queue, MConn_QueueSet);
 8000afe:	4b5e      	ldr	r3, [pc, #376]	; (8000c78 <MX_FREERTOS_Init+0x310>)
 8000b00:	681b      	ldr	r3, [r3, #0]
 8000b02:	4a6d      	ldr	r2, [pc, #436]	; (8000cb8 <MX_FREERTOS_Init+0x350>)
 8000b04:	6812      	ldr	r2, [r2, #0]
 8000b06:	4611      	mov	r1, r2
 8000b08:	4618      	mov	r0, r3
 8000b0a:	f003 fb8e 	bl	800422a <xQueueAddToSet>
	xQueueAddToSet(IN_N_MNetwork_MConn_Queue, MConn_QueueSet);
 8000b0e:	4b61      	ldr	r3, [pc, #388]	; (8000c94 <MX_FREERTOS_Init+0x32c>)
 8000b10:	681b      	ldr	r3, [r3, #0]
 8000b12:	4a69      	ldr	r2, [pc, #420]	; (8000cb8 <MX_FREERTOS_Init+0x350>)
 8000b14:	6812      	ldr	r2, [r2, #0]
 8000b16:	4611      	mov	r1, r2
 8000b18:	4618      	mov	r0, r3
 8000b1a:	f003 fb86 	bl	800422a <xQueueAddToSet>

	xQueueAddToSet(IN_N_MConn_Send_Queue_1, N_Send_QueueSet);
 8000b1e:	4b60      	ldr	r3, [pc, #384]	; (8000ca0 <MX_FREERTOS_Init+0x338>)
 8000b20:	681b      	ldr	r3, [r3, #0]
 8000b22:	4a66      	ldr	r2, [pc, #408]	; (8000cbc <MX_FREERTOS_Init+0x354>)
 8000b24:	6812      	ldr	r2, [r2, #0]
 8000b26:	4611      	mov	r1, r2
 8000b28:	4618      	mov	r0, r3
 8000b2a:	f003 fb7e 	bl	800422a <xQueueAddToSet>
	xQueueAddToSet(IN_N_MNetwork_Send_Queue, N_Send_QueueSet);
 8000b2e:	4b60      	ldr	r3, [pc, #384]	; (8000cb0 <MX_FREERTOS_Init+0x348>)
 8000b30:	681b      	ldr	r3, [r3, #0]
 8000b32:	4a62      	ldr	r2, [pc, #392]	; (8000cbc <MX_FREERTOS_Init+0x354>)
 8000b34:	6812      	ldr	r2, [r2, #0]
 8000b36:	4611      	mov	r1, r2
 8000b38:	4618      	mov	r0, r3
 8000b3a:	f003 fb76 	bl	800422a <xQueueAddToSet>

  /* Create the thread(s) */
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
	/* General Branch Fun */
	xTaskCreate( Check_Validity_Task_Func , "Check Validity"  , 100 , NULL , 26U , &Check_Validity_Task_Handler );
 8000b3e:	4b60      	ldr	r3, [pc, #384]	; (8000cc0 <MX_FREERTOS_Init+0x358>)
 8000b40:	9301      	str	r3, [sp, #4]
 8000b42:	231a      	movs	r3, #26
 8000b44:	9300      	str	r3, [sp, #0]
 8000b46:	2300      	movs	r3, #0
 8000b48:	2264      	movs	r2, #100	; 0x64
 8000b4a:	495e      	ldr	r1, [pc, #376]	; (8000cc4 <MX_FREERTOS_Init+0x35c>)
 8000b4c:	485e      	ldr	r0, [pc, #376]	; (8000cc8 <MX_FREERTOS_Init+0x360>)
 8000b4e:	f003 fc56 	bl	80043fe <xTaskCreate>
	/* General Control Branch Fun */
	xTaskCreate( Init_Deinit_Reset_Task_Func , "Initi,Deinit,and Reset"  , 100 , NULL , 30U , &Init_Deinit_Reset_Task_Handler );
 8000b52:	4b5e      	ldr	r3, [pc, #376]	; (8000ccc <MX_FREERTOS_Init+0x364>)
 8000b54:	9301      	str	r3, [sp, #4]
 8000b56:	231e      	movs	r3, #30
 8000b58:	9300      	str	r3, [sp, #0]
 8000b5a:	2300      	movs	r3, #0
 8000b5c:	2264      	movs	r2, #100	; 0x64
 8000b5e:	495c      	ldr	r1, [pc, #368]	; (8000cd0 <MX_FREERTOS_Init+0x368>)
 8000b60:	485c      	ldr	r0, [pc, #368]	; (8000cd4 <MX_FREERTOS_Init+0x36c>)
 8000b62:	f003 fc4c 	bl	80043fe <xTaskCreate>
	xTaskCreate( Control_Branch_Task_Func , "Control Branch"  , 100 , NULL , 29U , &Control_Branch_Task_Handler );
 8000b66:	4b5c      	ldr	r3, [pc, #368]	; (8000cd8 <MX_FREERTOS_Init+0x370>)
 8000b68:	9301      	str	r3, [sp, #4]
 8000b6a:	231d      	movs	r3, #29
 8000b6c:	9300      	str	r3, [sp, #0]
 8000b6e:	2300      	movs	r3, #0
 8000b70:	2264      	movs	r2, #100	; 0x64
 8000b72:	495a      	ldr	r1, [pc, #360]	; (8000cdc <MX_FREERTOS_Init+0x374>)
 8000b74:	485a      	ldr	r0, [pc, #360]	; (8000ce0 <MX_FREERTOS_Init+0x378>)
 8000b76:	f003 fc42 	bl	80043fe <xTaskCreate>
	xTaskCreate( Control_DMA_Task_Func , "Control DMA"  , 100 , NULL , 28U , &Control_DMA_Task_Handler );
 8000b7a:	4b5a      	ldr	r3, [pc, #360]	; (8000ce4 <MX_FREERTOS_Init+0x37c>)
 8000b7c:	9301      	str	r3, [sp, #4]
 8000b7e:	231c      	movs	r3, #28
 8000b80:	9300      	str	r3, [sp, #0]
 8000b82:	2300      	movs	r3, #0
 8000b84:	2264      	movs	r2, #100	; 0x64
 8000b86:	4958      	ldr	r1, [pc, #352]	; (8000ce8 <MX_FREERTOS_Init+0x380>)
 8000b88:	4858      	ldr	r0, [pc, #352]	; (8000cec <MX_FREERTOS_Init+0x384>)
 8000b8a:	f003 fc38 	bl	80043fe <xTaskCreate>
	/* ESP Branch Fun */
	xTaskCreate( Receive_from_EST_Task_Func , "Receive from EST"  , 100 , NULL , 5U , &Receive_from_EST_Task_Handler );
 8000b8e:	4b58      	ldr	r3, [pc, #352]	; (8000cf0 <MX_FREERTOS_Init+0x388>)
 8000b90:	9301      	str	r3, [sp, #4]
 8000b92:	2305      	movs	r3, #5
 8000b94:	9300      	str	r3, [sp, #0]
 8000b96:	2300      	movs	r3, #0
 8000b98:	2264      	movs	r2, #100	; 0x64
 8000b9a:	4956      	ldr	r1, [pc, #344]	; (8000cf4 <MX_FREERTOS_Init+0x38c>)
 8000b9c:	4856      	ldr	r0, [pc, #344]	; (8000cf8 <MX_FREERTOS_Init+0x390>)
 8000b9e:	f003 fc2e 	bl	80043fe <xTaskCreate>
	xTaskCreate( Manage_ESP_Task_Func , "Manage ESP"  , 100 , NULL , 4U , &Manage_ESP_Task_Handler );
 8000ba2:	4b56      	ldr	r3, [pc, #344]	; (8000cfc <MX_FREERTOS_Init+0x394>)
 8000ba4:	9301      	str	r3, [sp, #4]
 8000ba6:	2304      	movs	r3, #4
 8000ba8:	9300      	str	r3, [sp, #0]
 8000baa:	2300      	movs	r3, #0
 8000bac:	2264      	movs	r2, #100	; 0x64
 8000bae:	4954      	ldr	r1, [pc, #336]	; (8000d00 <MX_FREERTOS_Init+0x398>)
 8000bb0:	4854      	ldr	r0, [pc, #336]	; (8000d04 <MX_FREERTOS_Init+0x39c>)
 8000bb2:	f003 fc24 	bl	80043fe <xTaskCreate>
	xTaskCreate( Send_to_ESP_Task_Func , "Send to ESP"  , 100 , NULL , 3U , &Send_to_ESP_Task_Handler );
 8000bb6:	4b54      	ldr	r3, [pc, #336]	; (8000d08 <MX_FREERTOS_Init+0x3a0>)
 8000bb8:	9301      	str	r3, [sp, #4]
 8000bba:	2303      	movs	r3, #3
 8000bbc:	9300      	str	r3, [sp, #0]
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	2264      	movs	r2, #100	; 0x64
 8000bc2:	4952      	ldr	r1, [pc, #328]	; (8000d0c <MX_FREERTOS_Init+0x3a4>)
 8000bc4:	4852      	ldr	r0, [pc, #328]	; (8000d10 <MX_FREERTOS_Init+0x3a8>)
 8000bc6:	f003 fc1a 	bl	80043fe <xTaskCreate>
	/* SD Branch Fun */
	xTaskCreate( Manage_SD_Task_Func , "Manage SD"  , 100 , NULL , 5U , &Manage_SD_Task_Handler );
 8000bca:	4b52      	ldr	r3, [pc, #328]	; (8000d14 <MX_FREERTOS_Init+0x3ac>)
 8000bcc:	9301      	str	r3, [sp, #4]
 8000bce:	2305      	movs	r3, #5
 8000bd0:	9300      	str	r3, [sp, #0]
 8000bd2:	2300      	movs	r3, #0
 8000bd4:	2264      	movs	r2, #100	; 0x64
 8000bd6:	4950      	ldr	r1, [pc, #320]	; (8000d18 <MX_FREERTOS_Init+0x3b0>)
 8000bd8:	4850      	ldr	r0, [pc, #320]	; (8000d1c <MX_FREERTOS_Init+0x3b4>)
 8000bda:	f003 fc10 	bl	80043fe <xTaskCreate>
	xTaskCreate( Send_to_SD_Task_Func , "Send to SD"  , 100 , NULL , 4U , &Send_to_SD_Task_Handler );
 8000bde:	4b50      	ldr	r3, [pc, #320]	; (8000d20 <MX_FREERTOS_Init+0x3b8>)
 8000be0:	9301      	str	r3, [sp, #4]
 8000be2:	2304      	movs	r3, #4
 8000be4:	9300      	str	r3, [sp, #0]
 8000be6:	2300      	movs	r3, #0
 8000be8:	2264      	movs	r2, #100	; 0x64
 8000bea:	494e      	ldr	r1, [pc, #312]	; (8000d24 <MX_FREERTOS_Init+0x3bc>)
 8000bec:	484e      	ldr	r0, [pc, #312]	; (8000d28 <MX_FREERTOS_Init+0x3c0>)
 8000bee:	f003 fc06 	bl	80043fe <xTaskCreate>
	xTaskCreate( Receive_from_SD_Task_Func , "Receive from SD"  , 100 , NULL , 3U , &Receive_from_SD_Task_Handler );
 8000bf2:	4b4e      	ldr	r3, [pc, #312]	; (8000d2c <MX_FREERTOS_Init+0x3c4>)
 8000bf4:	9301      	str	r3, [sp, #4]
 8000bf6:	2303      	movs	r3, #3
 8000bf8:	9300      	str	r3, [sp, #0]
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	2264      	movs	r2, #100	; 0x64
 8000bfe:	494c      	ldr	r1, [pc, #304]	; (8000d30 <MX_FREERTOS_Init+0x3c8>)
 8000c00:	484c      	ldr	r0, [pc, #304]	; (8000d34 <MX_FREERTOS_Init+0x3cc>)
 8000c02:	f003 fbfc 	bl	80043fe <xTaskCreate>
	/* Main Nodes Branch Fun */
	xTaskCreate( Check_Network_Task_Func , "Check Network"  , 100 , NULL , 5U , &Check_Network_Task_Handler );
 8000c06:	4b4c      	ldr	r3, [pc, #304]	; (8000d38 <MX_FREERTOS_Init+0x3d0>)
 8000c08:	9301      	str	r3, [sp, #4]
 8000c0a:	2305      	movs	r3, #5
 8000c0c:	9300      	str	r3, [sp, #0]
 8000c0e:	2300      	movs	r3, #0
 8000c10:	2264      	movs	r2, #100	; 0x64
 8000c12:	494a      	ldr	r1, [pc, #296]	; (8000d3c <MX_FREERTOS_Init+0x3d4>)
 8000c14:	484a      	ldr	r0, [pc, #296]	; (8000d40 <MX_FREERTOS_Init+0x3d8>)
 8000c16:	f003 fbf2 	bl	80043fe <xTaskCreate>
	xTaskCreate( Manage_Network_Task_Func , "Manage Network"  , 100 , NULL , 4U , &Manage_Network_Task_Handler );
 8000c1a:	4b4a      	ldr	r3, [pc, #296]	; (8000d44 <MX_FREERTOS_Init+0x3dc>)
 8000c1c:	9301      	str	r3, [sp, #4]
 8000c1e:	2304      	movs	r3, #4
 8000c20:	9300      	str	r3, [sp, #0]
 8000c22:	2300      	movs	r3, #0
 8000c24:	2264      	movs	r2, #100	; 0x64
 8000c26:	4948      	ldr	r1, [pc, #288]	; (8000d48 <MX_FREERTOS_Init+0x3e0>)
 8000c28:	4848      	ldr	r0, [pc, #288]	; (8000d4c <MX_FREERTOS_Init+0x3e4>)
 8000c2a:	f003 fbe8 	bl	80043fe <xTaskCreate>
	xTaskCreate( Receive_from_Node_Task_Func , "Receive from Node"  , 100 , NULL , 3U , &Receive_from_Node_Task_Handler );
 8000c2e:	4b48      	ldr	r3, [pc, #288]	; (8000d50 <MX_FREERTOS_Init+0x3e8>)
 8000c30:	9301      	str	r3, [sp, #4]
 8000c32:	2303      	movs	r3, #3
 8000c34:	9300      	str	r3, [sp, #0]
 8000c36:	2300      	movs	r3, #0
 8000c38:	2264      	movs	r2, #100	; 0x64
 8000c3a:	4946      	ldr	r1, [pc, #280]	; (8000d54 <MX_FREERTOS_Init+0x3ec>)
 8000c3c:	4846      	ldr	r0, [pc, #280]	; (8000d58 <MX_FREERTOS_Init+0x3f0>)
 8000c3e:	f003 fbde 	bl	80043fe <xTaskCreate>
	xTaskCreate( Manage_Connection_Task_Func , "Manage Connection"  , 100 , NULL , 2U , &Manage_Connection_Task_Handler );
 8000c42:	4b46      	ldr	r3, [pc, #280]	; (8000d5c <MX_FREERTOS_Init+0x3f4>)
 8000c44:	9301      	str	r3, [sp, #4]
 8000c46:	2302      	movs	r3, #2
 8000c48:	9300      	str	r3, [sp, #0]
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	2264      	movs	r2, #100	; 0x64
 8000c4e:	4944      	ldr	r1, [pc, #272]	; (8000d60 <MX_FREERTOS_Init+0x3f8>)
 8000c50:	4844      	ldr	r0, [pc, #272]	; (8000d64 <MX_FREERTOS_Init+0x3fc>)
 8000c52:	f003 fbd4 	bl	80043fe <xTaskCreate>
 8000c56:	e087      	b.n	8000d68 <MX_FREERTOS_Init+0x400>
 8000c58:	20000134 	.word	0x20000134
 8000c5c:	20000138 	.word	0x20000138
 8000c60:	2000013c 	.word	0x2000013c
 8000c64:	080001eb 	.word	0x080001eb
 8000c68:	08006450 	.word	0x08006450
 8000c6c:	20000140 	.word	0x20000140
 8000c70:	200000e4 	.word	0x200000e4
 8000c74:	200000e8 	.word	0x200000e8
 8000c78:	200000ec 	.word	0x200000ec
 8000c7c:	200000f0 	.word	0x200000f0
 8000c80:	200000f4 	.word	0x200000f4
 8000c84:	200000f8 	.word	0x200000f8
 8000c88:	200000fc 	.word	0x200000fc
 8000c8c:	20000100 	.word	0x20000100
 8000c90:	20000104 	.word	0x20000104
 8000c94:	20000108 	.word	0x20000108
 8000c98:	2000010c 	.word	0x2000010c
 8000c9c:	20000110 	.word	0x20000110
 8000ca0:	20000114 	.word	0x20000114
 8000ca4:	20000118 	.word	0x20000118
 8000ca8:	2000011c 	.word	0x2000011c
 8000cac:	20000120 	.word	0x20000120
 8000cb0:	20000124 	.word	0x20000124
 8000cb4:	20000128 	.word	0x20000128
 8000cb8:	2000012c 	.word	0x2000012c
 8000cbc:	20000130 	.word	0x20000130
 8000cc0:	200000a8 	.word	0x200000a8
 8000cc4:	08006460 	.word	0x08006460
 8000cc8:	080001ff 	.word	0x080001ff
 8000ccc:	200000ac 	.word	0x200000ac
 8000cd0:	08006470 	.word	0x08006470
 8000cd4:	08000209 	.word	0x08000209
 8000cd8:	200000b0 	.word	0x200000b0
 8000cdc:	08006488 	.word	0x08006488
 8000ce0:	08000213 	.word	0x08000213
 8000ce4:	200000b4 	.word	0x200000b4
 8000ce8:	08006498 	.word	0x08006498
 8000cec:	0800021d 	.word	0x0800021d
 8000cf0:	200000c0 	.word	0x200000c0
 8000cf4:	080064a4 	.word	0x080064a4
 8000cf8:	0800023b 	.word	0x0800023b
 8000cfc:	200000b8 	.word	0x200000b8
 8000d00:	080064b8 	.word	0x080064b8
 8000d04:	08000227 	.word	0x08000227
 8000d08:	200000bc 	.word	0x200000bc
 8000d0c:	080064c4 	.word	0x080064c4
 8000d10:	08000231 	.word	0x08000231
 8000d14:	200000c4 	.word	0x200000c4
 8000d18:	080064d0 	.word	0x080064d0
 8000d1c:	08000245 	.word	0x08000245
 8000d20:	200000c8 	.word	0x200000c8
 8000d24:	080064dc 	.word	0x080064dc
 8000d28:	0800024f 	.word	0x0800024f
 8000d2c:	200000cc 	.word	0x200000cc
 8000d30:	080064e8 	.word	0x080064e8
 8000d34:	08000259 	.word	0x08000259
 8000d38:	200000d0 	.word	0x200000d0
 8000d3c:	080064f8 	.word	0x080064f8
 8000d40:	08000265 	.word	0x08000265
 8000d44:	200000d4 	.word	0x200000d4
 8000d48:	08006508 	.word	0x08006508
 8000d4c:	080002fd 	.word	0x080002fd
 8000d50:	200000dc 	.word	0x200000dc
 8000d54:	08006518 	.word	0x08006518
 8000d58:	08000889 	.word	0x08000889
 8000d5c:	200000d8 	.word	0x200000d8
 8000d60:	0800652c 	.word	0x0800652c
 8000d64:	0800042d 	.word	0x0800042d
	xTaskCreate( Send_to_Node_Task_Func , "Send to Node"  , 100 , NULL , 1U , &Send_to_Node_Task_Handler );
 8000d68:	4b06      	ldr	r3, [pc, #24]	; (8000d84 <MX_FREERTOS_Init+0x41c>)
 8000d6a:	9301      	str	r3, [sp, #4]
 8000d6c:	2301      	movs	r3, #1
 8000d6e:	9300      	str	r3, [sp, #0]
 8000d70:	2300      	movs	r3, #0
 8000d72:	2264      	movs	r2, #100	; 0x64
 8000d74:	4904      	ldr	r1, [pc, #16]	; (8000d88 <MX_FREERTOS_Init+0x420>)
 8000d76:	4805      	ldr	r0, [pc, #20]	; (8000d8c <MX_FREERTOS_Init+0x424>)
 8000d78:	f003 fb41 	bl	80043fe <xTaskCreate>

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8000d7c:	bf00      	nop
 8000d7e:	46bd      	mov	sp, r7
 8000d80:	bd80      	pop	{r7, pc}
 8000d82:	bf00      	nop
 8000d84:	200000e0 	.word	0x200000e0
 8000d88:	08006540 	.word	0x08006540
 8000d8c:	080008bd 	.word	0x080008bd

08000d90 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Pinout Configuration
*/
void MX_GPIO_Init(void)
{
 8000d90:	b480      	push	{r7}
 8000d92:	b085      	sub	sp, #20
 8000d94:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000d96:	4b1b      	ldr	r3, [pc, #108]	; (8000e04 <MX_GPIO_Init+0x74>)
 8000d98:	695b      	ldr	r3, [r3, #20]
 8000d9a:	4a1a      	ldr	r2, [pc, #104]	; (8000e04 <MX_GPIO_Init+0x74>)
 8000d9c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000da0:	6153      	str	r3, [r2, #20]
 8000da2:	4b18      	ldr	r3, [pc, #96]	; (8000e04 <MX_GPIO_Init+0x74>)
 8000da4:	695b      	ldr	r3, [r3, #20]
 8000da6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000daa:	60fb      	str	r3, [r7, #12]
 8000dac:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dae:	4b15      	ldr	r3, [pc, #84]	; (8000e04 <MX_GPIO_Init+0x74>)
 8000db0:	695b      	ldr	r3, [r3, #20]
 8000db2:	4a14      	ldr	r2, [pc, #80]	; (8000e04 <MX_GPIO_Init+0x74>)
 8000db4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000db8:	6153      	str	r3, [r2, #20]
 8000dba:	4b12      	ldr	r3, [pc, #72]	; (8000e04 <MX_GPIO_Init+0x74>)
 8000dbc:	695b      	ldr	r3, [r3, #20]
 8000dbe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000dc2:	60bb      	str	r3, [r7, #8]
 8000dc4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000dc6:	4b0f      	ldr	r3, [pc, #60]	; (8000e04 <MX_GPIO_Init+0x74>)
 8000dc8:	695b      	ldr	r3, [r3, #20]
 8000dca:	4a0e      	ldr	r2, [pc, #56]	; (8000e04 <MX_GPIO_Init+0x74>)
 8000dcc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000dd0:	6153      	str	r3, [r2, #20]
 8000dd2:	4b0c      	ldr	r3, [pc, #48]	; (8000e04 <MX_GPIO_Init+0x74>)
 8000dd4:	695b      	ldr	r3, [r3, #20]
 8000dd6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000dda:	607b      	str	r3, [r7, #4]
 8000ddc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000dde:	4b09      	ldr	r3, [pc, #36]	; (8000e04 <MX_GPIO_Init+0x74>)
 8000de0:	695b      	ldr	r3, [r3, #20]
 8000de2:	4a08      	ldr	r2, [pc, #32]	; (8000e04 <MX_GPIO_Init+0x74>)
 8000de4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000de8:	6153      	str	r3, [r2, #20]
 8000dea:	4b06      	ldr	r3, [pc, #24]	; (8000e04 <MX_GPIO_Init+0x74>)
 8000dec:	695b      	ldr	r3, [r3, #20]
 8000dee:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000df2:	603b      	str	r3, [r7, #0]
 8000df4:	683b      	ldr	r3, [r7, #0]

}
 8000df6:	bf00      	nop
 8000df8:	3714      	adds	r7, #20
 8000dfa:	46bd      	mov	sp, r7
 8000dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e00:	4770      	bx	lr
 8000e02:	bf00      	nop
 8000e04:	40021000 	.word	0x40021000

08000e08 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e0c:	f000 f96a 	bl	80010e4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e10:	f000 f809 	bl	8000e26 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e14:	f7ff ffbc 	bl	8000d90 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000e18:	f002 fa0a 	bl	8003230 <osKernelInitialize>

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 8000e1c:	f7ff fda4 	bl	8000968 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8000e20:	f002 fa3a 	bl	8003298 <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000e24:	e7fe      	b.n	8000e24 <main+0x1c>

08000e26 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e26:	b580      	push	{r7, lr}
 8000e28:	b0a6      	sub	sp, #152	; 0x98
 8000e2a:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e2c:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000e30:	2228      	movs	r2, #40	; 0x28
 8000e32:	2100      	movs	r1, #0
 8000e34:	4618      	mov	r0, r3
 8000e36:	f005 fa11 	bl	800625c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e3a:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000e3e:	2200      	movs	r2, #0
 8000e40:	601a      	str	r2, [r3, #0]
 8000e42:	605a      	str	r2, [r3, #4]
 8000e44:	609a      	str	r2, [r3, #8]
 8000e46:	60da      	str	r2, [r3, #12]
 8000e48:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000e4a:	1d3b      	adds	r3, r7, #4
 8000e4c:	2258      	movs	r2, #88	; 0x58
 8000e4e:	2100      	movs	r1, #0
 8000e50:	4618      	mov	r0, r3
 8000e52:	f005 fa03 	bl	800625c <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000e56:	2302      	movs	r3, #2
 8000e58:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000e5a:	2301      	movs	r3, #1
 8000e5c:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000e5e:	2310      	movs	r3, #16
 8000e60:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000e64:	2300      	movs	r3, #0
 8000e66:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e6a:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000e6e:	4618      	mov	r0, r3
 8000e70:	f000 fa50 	bl	8001314 <HAL_RCC_OscConfig>
 8000e74:	4603      	mov	r3, r0
 8000e76:	2b00      	cmp	r3, #0
 8000e78:	d001      	beq.n	8000e7e <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000e7a:	f7ff f9b1 	bl	80001e0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e7e:	230f      	movs	r3, #15
 8000e80:	65fb      	str	r3, [r7, #92]	; 0x5c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000e82:	2300      	movs	r3, #0
 8000e84:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e86:	2300      	movs	r3, #0
 8000e88:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000e8e:	2300      	movs	r3, #0
 8000e90:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000e92:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000e96:	2100      	movs	r1, #0
 8000e98:	4618      	mov	r0, r3
 8000e9a:	f001 fa8f 	bl	80023bc <HAL_RCC_ClockConfig>
 8000e9e:	4603      	mov	r3, r0
 8000ea0:	2b00      	cmp	r3, #0
 8000ea2:	d001      	beq.n	8000ea8 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000ea4:	f7ff f99c 	bl	80001e0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_USART2
 8000ea8:	2327      	movs	r3, #39	; 0x27
 8000eaa:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_I2C1;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000eac:	2300      	movs	r3, #0
 8000eae:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000eb0:	2300      	movs	r3, #0
 8000eb2:	613b      	str	r3, [r7, #16]
  PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000eb4:	2300      	movs	r3, #0
 8000eb6:	617b      	str	r3, [r7, #20]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8000eb8:	2300      	movs	r3, #0
 8000eba:	623b      	str	r3, [r7, #32]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000ebc:	1d3b      	adds	r3, r7, #4
 8000ebe:	4618      	mov	r0, r3
 8000ec0:	f001 fcc2 	bl	8002848 <HAL_RCCEx_PeriphCLKConfig>
 8000ec4:	4603      	mov	r3, r0
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	d001      	beq.n	8000ece <SystemClock_Config+0xa8>
  {
    Error_Handler();
 8000eca:	f7ff f989 	bl	80001e0 <Error_Handler>
  }
}
 8000ece:	bf00      	nop
 8000ed0:	3798      	adds	r7, #152	; 0x98
 8000ed2:	46bd      	mov	sp, r7
 8000ed4:	bd80      	pop	{r7, pc}
	...

08000ed8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	b082      	sub	sp, #8
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	4a04      	ldr	r2, [pc, #16]	; (8000ef8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000ee6:	4293      	cmp	r3, r2
 8000ee8:	d101      	bne.n	8000eee <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000eea:	f000 f911 	bl	8001110 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000eee:	bf00      	nop
 8000ef0:	3708      	adds	r7, #8
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	bd80      	pop	{r7, pc}
 8000ef6:	bf00      	nop
 8000ef8:	40012c00 	.word	0x40012c00

08000efc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000efc:	b580      	push	{r7, lr}
 8000efe:	b082      	sub	sp, #8
 8000f00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f02:	4b11      	ldr	r3, [pc, #68]	; (8000f48 <HAL_MspInit+0x4c>)
 8000f04:	699b      	ldr	r3, [r3, #24]
 8000f06:	4a10      	ldr	r2, [pc, #64]	; (8000f48 <HAL_MspInit+0x4c>)
 8000f08:	f043 0301 	orr.w	r3, r3, #1
 8000f0c:	6193      	str	r3, [r2, #24]
 8000f0e:	4b0e      	ldr	r3, [pc, #56]	; (8000f48 <HAL_MspInit+0x4c>)
 8000f10:	699b      	ldr	r3, [r3, #24]
 8000f12:	f003 0301 	and.w	r3, r3, #1
 8000f16:	607b      	str	r3, [r7, #4]
 8000f18:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f1a:	4b0b      	ldr	r3, [pc, #44]	; (8000f48 <HAL_MspInit+0x4c>)
 8000f1c:	69db      	ldr	r3, [r3, #28]
 8000f1e:	4a0a      	ldr	r2, [pc, #40]	; (8000f48 <HAL_MspInit+0x4c>)
 8000f20:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f24:	61d3      	str	r3, [r2, #28]
 8000f26:	4b08      	ldr	r3, [pc, #32]	; (8000f48 <HAL_MspInit+0x4c>)
 8000f28:	69db      	ldr	r3, [r3, #28]
 8000f2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f2e:	603b      	str	r3, [r7, #0]
 8000f30:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000f32:	2200      	movs	r2, #0
 8000f34:	210f      	movs	r1, #15
 8000f36:	f06f 0001 	mvn.w	r0, #1
 8000f3a:	f000 f9c1 	bl	80012c0 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f3e:	bf00      	nop
 8000f40:	3708      	adds	r7, #8
 8000f42:	46bd      	mov	sp, r7
 8000f44:	bd80      	pop	{r7, pc}
 8000f46:	bf00      	nop
 8000f48:	40021000 	.word	0x40021000

08000f4c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	b08c      	sub	sp, #48	; 0x30
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8000f54:	2300      	movs	r3, #0
 8000f56:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 8000f58:	2300      	movs	r3, #0
 8000f5a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000f5c:	4b2e      	ldr	r3, [pc, #184]	; (8001018 <HAL_InitTick+0xcc>)
 8000f5e:	699b      	ldr	r3, [r3, #24]
 8000f60:	4a2d      	ldr	r2, [pc, #180]	; (8001018 <HAL_InitTick+0xcc>)
 8000f62:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000f66:	6193      	str	r3, [r2, #24]
 8000f68:	4b2b      	ldr	r3, [pc, #172]	; (8001018 <HAL_InitTick+0xcc>)
 8000f6a:	699b      	ldr	r3, [r3, #24]
 8000f6c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000f70:	60bb      	str	r3, [r7, #8]
 8000f72:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000f74:	f107 020c 	add.w	r2, r7, #12
 8000f78:	f107 0310 	add.w	r3, r7, #16
 8000f7c:	4611      	mov	r1, r2
 8000f7e:	4618      	mov	r0, r3
 8000f80:	f001 fc30 	bl	80027e4 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000f84:	f001 fc0c 	bl	80027a0 <HAL_RCC_GetPCLK2Freq>
 8000f88:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000f8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000f8c:	4a23      	ldr	r2, [pc, #140]	; (800101c <HAL_InitTick+0xd0>)
 8000f8e:	fba2 2303 	umull	r2, r3, r2, r3
 8000f92:	0c9b      	lsrs	r3, r3, #18
 8000f94:	3b01      	subs	r3, #1
 8000f96:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000f98:	4b21      	ldr	r3, [pc, #132]	; (8001020 <HAL_InitTick+0xd4>)
 8000f9a:	4a22      	ldr	r2, [pc, #136]	; (8001024 <HAL_InitTick+0xd8>)
 8000f9c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8000f9e:	4b20      	ldr	r3, [pc, #128]	; (8001020 <HAL_InitTick+0xd4>)
 8000fa0:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000fa4:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000fa6:	4a1e      	ldr	r2, [pc, #120]	; (8001020 <HAL_InitTick+0xd4>)
 8000fa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000faa:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000fac:	4b1c      	ldr	r3, [pc, #112]	; (8001020 <HAL_InitTick+0xd4>)
 8000fae:	2200      	movs	r2, #0
 8000fb0:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000fb2:	4b1b      	ldr	r3, [pc, #108]	; (8001020 <HAL_InitTick+0xd4>)
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000fb8:	4b19      	ldr	r3, [pc, #100]	; (8001020 <HAL_InitTick+0xd4>)
 8000fba:	2200      	movs	r2, #0
 8000fbc:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8000fbe:	4818      	ldr	r0, [pc, #96]	; (8001020 <HAL_InitTick+0xd4>)
 8000fc0:	f001 fe60 	bl	8002c84 <HAL_TIM_Base_Init>
 8000fc4:	4603      	mov	r3, r0
 8000fc6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8000fca:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	d11b      	bne.n	800100a <HAL_InitTick+0xbe>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8000fd2:	4813      	ldr	r0, [pc, #76]	; (8001020 <HAL_InitTick+0xd4>)
 8000fd4:	f001 feb8 	bl	8002d48 <HAL_TIM_Base_Start_IT>
 8000fd8:	4603      	mov	r3, r0
 8000fda:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8000fde:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d111      	bne.n	800100a <HAL_InitTick+0xbe>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8000fe6:	2019      	movs	r0, #25
 8000fe8:	f000 f986 	bl	80012f8 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	2b0f      	cmp	r3, #15
 8000ff0:	d808      	bhi.n	8001004 <HAL_InitTick+0xb8>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority, 0U);
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	6879      	ldr	r1, [r7, #4]
 8000ff6:	2019      	movs	r0, #25
 8000ff8:	f000 f962 	bl	80012c0 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000ffc:	4a0a      	ldr	r2, [pc, #40]	; (8001028 <HAL_InitTick+0xdc>)
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	6013      	str	r3, [r2, #0]
 8001002:	e002      	b.n	800100a <HAL_InitTick+0xbe>
      }
      else
      {
        status = HAL_ERROR;
 8001004:	2301      	movs	r3, #1
 8001006:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 800100a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800100e:	4618      	mov	r0, r3
 8001010:	3730      	adds	r7, #48	; 0x30
 8001012:	46bd      	mov	sp, r7
 8001014:	bd80      	pop	{r7, pc}
 8001016:	bf00      	nop
 8001018:	40021000 	.word	0x40021000
 800101c:	431bde83 	.word	0x431bde83
 8001020:	20000148 	.word	0x20000148
 8001024:	40012c00 	.word	0x40012c00
 8001028:	20000030 	.word	0x20000030

0800102c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800102c:	b480      	push	{r7}
 800102e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001030:	e7fe      	b.n	8001030 <NMI_Handler+0x4>

08001032 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001032:	b480      	push	{r7}
 8001034:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001036:	e7fe      	b.n	8001036 <HardFault_Handler+0x4>

08001038 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001038:	b480      	push	{r7}
 800103a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800103c:	e7fe      	b.n	800103c <MemManage_Handler+0x4>

0800103e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800103e:	b480      	push	{r7}
 8001040:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001042:	e7fe      	b.n	8001042 <BusFault_Handler+0x4>

08001044 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001044:	b480      	push	{r7}
 8001046:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001048:	e7fe      	b.n	8001048 <UsageFault_Handler+0x4>

0800104a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800104a:	b480      	push	{r7}
 800104c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800104e:	bf00      	nop
 8001050:	46bd      	mov	sp, r7
 8001052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001056:	4770      	bx	lr

08001058 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update and TIM16 interrupts.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8001058:	b580      	push	{r7, lr}
 800105a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800105c:	4802      	ldr	r0, [pc, #8]	; (8001068 <TIM1_UP_TIM16_IRQHandler+0x10>)
 800105e:	f001 fee3 	bl	8002e28 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8001062:	bf00      	nop
 8001064:	bd80      	pop	{r7, pc}
 8001066:	bf00      	nop
 8001068:	20000148 	.word	0x20000148

0800106c <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800106c:	b480      	push	{r7}
 800106e:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001070:	4b06      	ldr	r3, [pc, #24]	; (800108c <SystemInit+0x20>)
 8001072:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001076:	4a05      	ldr	r2, [pc, #20]	; (800108c <SystemInit+0x20>)
 8001078:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800107c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001080:	bf00      	nop
 8001082:	46bd      	mov	sp, r7
 8001084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001088:	4770      	bx	lr
 800108a:	bf00      	nop
 800108c:	e000ed00 	.word	0xe000ed00

08001090 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001090:	f8df d034 	ldr.w	sp, [pc, #52]	; 80010c8 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8001094:	f7ff ffea 	bl	800106c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001098:	480c      	ldr	r0, [pc, #48]	; (80010cc <LoopForever+0x6>)
  ldr r1, =_edata
 800109a:	490d      	ldr	r1, [pc, #52]	; (80010d0 <LoopForever+0xa>)
  ldr r2, =_sidata
 800109c:	4a0d      	ldr	r2, [pc, #52]	; (80010d4 <LoopForever+0xe>)
  movs r3, #0
 800109e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80010a0:	e002      	b.n	80010a8 <LoopCopyDataInit>

080010a2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80010a2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80010a4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80010a6:	3304      	adds	r3, #4

080010a8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80010a8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80010aa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80010ac:	d3f9      	bcc.n	80010a2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80010ae:	4a0a      	ldr	r2, [pc, #40]	; (80010d8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80010b0:	4c0a      	ldr	r4, [pc, #40]	; (80010dc <LoopForever+0x16>)
  movs r3, #0
 80010b2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80010b4:	e001      	b.n	80010ba <LoopFillZerobss>

080010b6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80010b6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80010b8:	3204      	adds	r2, #4

080010ba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80010ba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80010bc:	d3fb      	bcc.n	80010b6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80010be:	f005 f92b 	bl	8006318 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80010c2:	f7ff fea1 	bl	8000e08 <main>

080010c6 <LoopForever>:

LoopForever:
    b LoopForever
 80010c6:	e7fe      	b.n	80010c6 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80010c8:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 80010cc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80010d0:	2000008c 	.word	0x2000008c
  ldr r2, =_sidata
 80010d4:	080065a8 	.word	0x080065a8
  ldr r2, =_sbss
 80010d8:	2000008c 	.word	0x2000008c
  ldr r4, =_ebss
 80010dc:	20001cbc 	.word	0x20001cbc

080010e0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80010e0:	e7fe      	b.n	80010e0 <ADC1_2_IRQHandler>
	...

080010e4 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80010e4:	b580      	push	{r7, lr}
 80010e6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80010e8:	4b08      	ldr	r3, [pc, #32]	; (800110c <HAL_Init+0x28>)
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	4a07      	ldr	r2, [pc, #28]	; (800110c <HAL_Init+0x28>)
 80010ee:	f043 0310 	orr.w	r3, r3, #16
 80010f2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80010f4:	2003      	movs	r0, #3
 80010f6:	f000 f8d8 	bl	80012aa <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80010fa:	200f      	movs	r0, #15
 80010fc:	f7ff ff26 	bl	8000f4c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001100:	f7ff fefc 	bl	8000efc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001104:	2300      	movs	r3, #0
}
 8001106:	4618      	mov	r0, r3
 8001108:	bd80      	pop	{r7, pc}
 800110a:	bf00      	nop
 800110c:	40022000 	.word	0x40022000

08001110 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001110:	b480      	push	{r7}
 8001112:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001114:	4b06      	ldr	r3, [pc, #24]	; (8001130 <HAL_IncTick+0x20>)
 8001116:	781b      	ldrb	r3, [r3, #0]
 8001118:	461a      	mov	r2, r3
 800111a:	4b06      	ldr	r3, [pc, #24]	; (8001134 <HAL_IncTick+0x24>)
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	4413      	add	r3, r2
 8001120:	4a04      	ldr	r2, [pc, #16]	; (8001134 <HAL_IncTick+0x24>)
 8001122:	6013      	str	r3, [r2, #0]
}
 8001124:	bf00      	nop
 8001126:	46bd      	mov	sp, r7
 8001128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112c:	4770      	bx	lr
 800112e:	bf00      	nop
 8001130:	20000034 	.word	0x20000034
 8001134:	20000194 	.word	0x20000194

08001138 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001138:	b480      	push	{r7}
 800113a:	af00      	add	r7, sp, #0
  return uwTick;  
 800113c:	4b03      	ldr	r3, [pc, #12]	; (800114c <HAL_GetTick+0x14>)
 800113e:	681b      	ldr	r3, [r3, #0]
}
 8001140:	4618      	mov	r0, r3
 8001142:	46bd      	mov	sp, r7
 8001144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001148:	4770      	bx	lr
 800114a:	bf00      	nop
 800114c:	20000194 	.word	0x20000194

08001150 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001150:	b480      	push	{r7}
 8001152:	b085      	sub	sp, #20
 8001154:	af00      	add	r7, sp, #0
 8001156:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	f003 0307 	and.w	r3, r3, #7
 800115e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001160:	4b0c      	ldr	r3, [pc, #48]	; (8001194 <__NVIC_SetPriorityGrouping+0x44>)
 8001162:	68db      	ldr	r3, [r3, #12]
 8001164:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001166:	68ba      	ldr	r2, [r7, #8]
 8001168:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800116c:	4013      	ands	r3, r2
 800116e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001170:	68fb      	ldr	r3, [r7, #12]
 8001172:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001174:	68bb      	ldr	r3, [r7, #8]
 8001176:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001178:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800117c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001180:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001182:	4a04      	ldr	r2, [pc, #16]	; (8001194 <__NVIC_SetPriorityGrouping+0x44>)
 8001184:	68bb      	ldr	r3, [r7, #8]
 8001186:	60d3      	str	r3, [r2, #12]
}
 8001188:	bf00      	nop
 800118a:	3714      	adds	r7, #20
 800118c:	46bd      	mov	sp, r7
 800118e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001192:	4770      	bx	lr
 8001194:	e000ed00 	.word	0xe000ed00

08001198 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001198:	b480      	push	{r7}
 800119a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800119c:	4b04      	ldr	r3, [pc, #16]	; (80011b0 <__NVIC_GetPriorityGrouping+0x18>)
 800119e:	68db      	ldr	r3, [r3, #12]
 80011a0:	0a1b      	lsrs	r3, r3, #8
 80011a2:	f003 0307 	and.w	r3, r3, #7
}
 80011a6:	4618      	mov	r0, r3
 80011a8:	46bd      	mov	sp, r7
 80011aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ae:	4770      	bx	lr
 80011b0:	e000ed00 	.word	0xe000ed00

080011b4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011b4:	b480      	push	{r7}
 80011b6:	b083      	sub	sp, #12
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	4603      	mov	r3, r0
 80011bc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	db0b      	blt.n	80011de <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80011c6:	79fb      	ldrb	r3, [r7, #7]
 80011c8:	f003 021f 	and.w	r2, r3, #31
 80011cc:	4907      	ldr	r1, [pc, #28]	; (80011ec <__NVIC_EnableIRQ+0x38>)
 80011ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011d2:	095b      	lsrs	r3, r3, #5
 80011d4:	2001      	movs	r0, #1
 80011d6:	fa00 f202 	lsl.w	r2, r0, r2
 80011da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80011de:	bf00      	nop
 80011e0:	370c      	adds	r7, #12
 80011e2:	46bd      	mov	sp, r7
 80011e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e8:	4770      	bx	lr
 80011ea:	bf00      	nop
 80011ec:	e000e100 	.word	0xe000e100

080011f0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80011f0:	b480      	push	{r7}
 80011f2:	b083      	sub	sp, #12
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	4603      	mov	r3, r0
 80011f8:	6039      	str	r1, [r7, #0]
 80011fa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001200:	2b00      	cmp	r3, #0
 8001202:	db0a      	blt.n	800121a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001204:	683b      	ldr	r3, [r7, #0]
 8001206:	b2da      	uxtb	r2, r3
 8001208:	490c      	ldr	r1, [pc, #48]	; (800123c <__NVIC_SetPriority+0x4c>)
 800120a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800120e:	0112      	lsls	r2, r2, #4
 8001210:	b2d2      	uxtb	r2, r2
 8001212:	440b      	add	r3, r1
 8001214:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001218:	e00a      	b.n	8001230 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800121a:	683b      	ldr	r3, [r7, #0]
 800121c:	b2da      	uxtb	r2, r3
 800121e:	4908      	ldr	r1, [pc, #32]	; (8001240 <__NVIC_SetPriority+0x50>)
 8001220:	79fb      	ldrb	r3, [r7, #7]
 8001222:	f003 030f 	and.w	r3, r3, #15
 8001226:	3b04      	subs	r3, #4
 8001228:	0112      	lsls	r2, r2, #4
 800122a:	b2d2      	uxtb	r2, r2
 800122c:	440b      	add	r3, r1
 800122e:	761a      	strb	r2, [r3, #24]
}
 8001230:	bf00      	nop
 8001232:	370c      	adds	r7, #12
 8001234:	46bd      	mov	sp, r7
 8001236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800123a:	4770      	bx	lr
 800123c:	e000e100 	.word	0xe000e100
 8001240:	e000ed00 	.word	0xe000ed00

08001244 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001244:	b480      	push	{r7}
 8001246:	b089      	sub	sp, #36	; 0x24
 8001248:	af00      	add	r7, sp, #0
 800124a:	60f8      	str	r0, [r7, #12]
 800124c:	60b9      	str	r1, [r7, #8]
 800124e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001250:	68fb      	ldr	r3, [r7, #12]
 8001252:	f003 0307 	and.w	r3, r3, #7
 8001256:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001258:	69fb      	ldr	r3, [r7, #28]
 800125a:	f1c3 0307 	rsb	r3, r3, #7
 800125e:	2b04      	cmp	r3, #4
 8001260:	bf28      	it	cs
 8001262:	2304      	movcs	r3, #4
 8001264:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001266:	69fb      	ldr	r3, [r7, #28]
 8001268:	3304      	adds	r3, #4
 800126a:	2b06      	cmp	r3, #6
 800126c:	d902      	bls.n	8001274 <NVIC_EncodePriority+0x30>
 800126e:	69fb      	ldr	r3, [r7, #28]
 8001270:	3b03      	subs	r3, #3
 8001272:	e000      	b.n	8001276 <NVIC_EncodePriority+0x32>
 8001274:	2300      	movs	r3, #0
 8001276:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001278:	f04f 32ff 	mov.w	r2, #4294967295
 800127c:	69bb      	ldr	r3, [r7, #24]
 800127e:	fa02 f303 	lsl.w	r3, r2, r3
 8001282:	43da      	mvns	r2, r3
 8001284:	68bb      	ldr	r3, [r7, #8]
 8001286:	401a      	ands	r2, r3
 8001288:	697b      	ldr	r3, [r7, #20]
 800128a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800128c:	f04f 31ff 	mov.w	r1, #4294967295
 8001290:	697b      	ldr	r3, [r7, #20]
 8001292:	fa01 f303 	lsl.w	r3, r1, r3
 8001296:	43d9      	mvns	r1, r3
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800129c:	4313      	orrs	r3, r2
         );
}
 800129e:	4618      	mov	r0, r3
 80012a0:	3724      	adds	r7, #36	; 0x24
 80012a2:	46bd      	mov	sp, r7
 80012a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a8:	4770      	bx	lr

080012aa <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012aa:	b580      	push	{r7, lr}
 80012ac:	b082      	sub	sp, #8
 80012ae:	af00      	add	r7, sp, #0
 80012b0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80012b2:	6878      	ldr	r0, [r7, #4]
 80012b4:	f7ff ff4c 	bl	8001150 <__NVIC_SetPriorityGrouping>
}
 80012b8:	bf00      	nop
 80012ba:	3708      	adds	r7, #8
 80012bc:	46bd      	mov	sp, r7
 80012be:	bd80      	pop	{r7, pc}

080012c0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80012c0:	b580      	push	{r7, lr}
 80012c2:	b086      	sub	sp, #24
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	4603      	mov	r3, r0
 80012c8:	60b9      	str	r1, [r7, #8]
 80012ca:	607a      	str	r2, [r7, #4]
 80012cc:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80012ce:	2300      	movs	r3, #0
 80012d0:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80012d2:	f7ff ff61 	bl	8001198 <__NVIC_GetPriorityGrouping>
 80012d6:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80012d8:	687a      	ldr	r2, [r7, #4]
 80012da:	68b9      	ldr	r1, [r7, #8]
 80012dc:	6978      	ldr	r0, [r7, #20]
 80012de:	f7ff ffb1 	bl	8001244 <NVIC_EncodePriority>
 80012e2:	4602      	mov	r2, r0
 80012e4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80012e8:	4611      	mov	r1, r2
 80012ea:	4618      	mov	r0, r3
 80012ec:	f7ff ff80 	bl	80011f0 <__NVIC_SetPriority>
}
 80012f0:	bf00      	nop
 80012f2:	3718      	adds	r7, #24
 80012f4:	46bd      	mov	sp, r7
 80012f6:	bd80      	pop	{r7, pc}

080012f8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012f8:	b580      	push	{r7, lr}
 80012fa:	b082      	sub	sp, #8
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	4603      	mov	r3, r0
 8001300:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001302:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001306:	4618      	mov	r0, r3
 8001308:	f7ff ff54 	bl	80011b4 <__NVIC_EnableIRQ>
}
 800130c:	bf00      	nop
 800130e:	3708      	adds	r7, #8
 8001310:	46bd      	mov	sp, r7
 8001312:	bd80      	pop	{r7, pc}

08001314 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001314:	b580      	push	{r7, lr}
 8001316:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 800131a:	af00      	add	r7, sp, #0
 800131c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001320:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001324:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001326:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800132a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	2b00      	cmp	r3, #0
 8001332:	d102      	bne.n	800133a <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8001334:	2301      	movs	r3, #1
 8001336:	f001 b83a 	b.w	80023ae <HAL_RCC_OscConfig+0x109a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800133a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800133e:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	f003 0301 	and.w	r3, r3, #1
 800134a:	2b00      	cmp	r3, #0
 800134c:	f000 816f 	beq.w	800162e <HAL_RCC_OscConfig+0x31a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001350:	4bb5      	ldr	r3, [pc, #724]	; (8001628 <HAL_RCC_OscConfig+0x314>)
 8001352:	685b      	ldr	r3, [r3, #4]
 8001354:	f003 030c 	and.w	r3, r3, #12
 8001358:	2b04      	cmp	r3, #4
 800135a:	d00c      	beq.n	8001376 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800135c:	4bb2      	ldr	r3, [pc, #712]	; (8001628 <HAL_RCC_OscConfig+0x314>)
 800135e:	685b      	ldr	r3, [r3, #4]
 8001360:	f003 030c 	and.w	r3, r3, #12
 8001364:	2b08      	cmp	r3, #8
 8001366:	d15c      	bne.n	8001422 <HAL_RCC_OscConfig+0x10e>
 8001368:	4baf      	ldr	r3, [pc, #700]	; (8001628 <HAL_RCC_OscConfig+0x314>)
 800136a:	685b      	ldr	r3, [r3, #4]
 800136c:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8001370:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001374:	d155      	bne.n	8001422 <HAL_RCC_OscConfig+0x10e>
 8001376:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800137a:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800137e:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8001382:	fa93 f3a3 	rbit	r3, r3
 8001386:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800138a:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800138e:	fab3 f383 	clz	r3, r3
 8001392:	b2db      	uxtb	r3, r3
 8001394:	095b      	lsrs	r3, r3, #5
 8001396:	b2db      	uxtb	r3, r3
 8001398:	f043 0301 	orr.w	r3, r3, #1
 800139c:	b2db      	uxtb	r3, r3
 800139e:	2b01      	cmp	r3, #1
 80013a0:	d102      	bne.n	80013a8 <HAL_RCC_OscConfig+0x94>
 80013a2:	4ba1      	ldr	r3, [pc, #644]	; (8001628 <HAL_RCC_OscConfig+0x314>)
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	e015      	b.n	80013d4 <HAL_RCC_OscConfig+0xc0>
 80013a8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80013ac:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80013b0:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 80013b4:	fa93 f3a3 	rbit	r3, r3
 80013b8:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 80013bc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80013c0:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 80013c4:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 80013c8:	fa93 f3a3 	rbit	r3, r3
 80013cc:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 80013d0:	4b95      	ldr	r3, [pc, #596]	; (8001628 <HAL_RCC_OscConfig+0x314>)
 80013d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013d4:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80013d8:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 80013dc:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 80013e0:	fa92 f2a2 	rbit	r2, r2
 80013e4:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
  return result;
 80013e8:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 80013ec:	fab2 f282 	clz	r2, r2
 80013f0:	b2d2      	uxtb	r2, r2
 80013f2:	f042 0220 	orr.w	r2, r2, #32
 80013f6:	b2d2      	uxtb	r2, r2
 80013f8:	f002 021f 	and.w	r2, r2, #31
 80013fc:	2101      	movs	r1, #1
 80013fe:	fa01 f202 	lsl.w	r2, r1, r2
 8001402:	4013      	ands	r3, r2
 8001404:	2b00      	cmp	r3, #0
 8001406:	f000 8111 	beq.w	800162c <HAL_RCC_OscConfig+0x318>
 800140a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800140e:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	685b      	ldr	r3, [r3, #4]
 8001416:	2b00      	cmp	r3, #0
 8001418:	f040 8108 	bne.w	800162c <HAL_RCC_OscConfig+0x318>
      {
        return HAL_ERROR;
 800141c:	2301      	movs	r3, #1
 800141e:	f000 bfc6 	b.w	80023ae <HAL_RCC_OscConfig+0x109a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001422:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001426:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	685b      	ldr	r3, [r3, #4]
 800142e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001432:	d106      	bne.n	8001442 <HAL_RCC_OscConfig+0x12e>
 8001434:	4b7c      	ldr	r3, [pc, #496]	; (8001628 <HAL_RCC_OscConfig+0x314>)
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	4a7b      	ldr	r2, [pc, #492]	; (8001628 <HAL_RCC_OscConfig+0x314>)
 800143a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800143e:	6013      	str	r3, [r2, #0]
 8001440:	e036      	b.n	80014b0 <HAL_RCC_OscConfig+0x19c>
 8001442:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001446:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	685b      	ldr	r3, [r3, #4]
 800144e:	2b00      	cmp	r3, #0
 8001450:	d10c      	bne.n	800146c <HAL_RCC_OscConfig+0x158>
 8001452:	4b75      	ldr	r3, [pc, #468]	; (8001628 <HAL_RCC_OscConfig+0x314>)
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	4a74      	ldr	r2, [pc, #464]	; (8001628 <HAL_RCC_OscConfig+0x314>)
 8001458:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800145c:	6013      	str	r3, [r2, #0]
 800145e:	4b72      	ldr	r3, [pc, #456]	; (8001628 <HAL_RCC_OscConfig+0x314>)
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	4a71      	ldr	r2, [pc, #452]	; (8001628 <HAL_RCC_OscConfig+0x314>)
 8001464:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001468:	6013      	str	r3, [r2, #0]
 800146a:	e021      	b.n	80014b0 <HAL_RCC_OscConfig+0x19c>
 800146c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001470:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	685b      	ldr	r3, [r3, #4]
 8001478:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800147c:	d10c      	bne.n	8001498 <HAL_RCC_OscConfig+0x184>
 800147e:	4b6a      	ldr	r3, [pc, #424]	; (8001628 <HAL_RCC_OscConfig+0x314>)
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	4a69      	ldr	r2, [pc, #420]	; (8001628 <HAL_RCC_OscConfig+0x314>)
 8001484:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001488:	6013      	str	r3, [r2, #0]
 800148a:	4b67      	ldr	r3, [pc, #412]	; (8001628 <HAL_RCC_OscConfig+0x314>)
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	4a66      	ldr	r2, [pc, #408]	; (8001628 <HAL_RCC_OscConfig+0x314>)
 8001490:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001494:	6013      	str	r3, [r2, #0]
 8001496:	e00b      	b.n	80014b0 <HAL_RCC_OscConfig+0x19c>
 8001498:	4b63      	ldr	r3, [pc, #396]	; (8001628 <HAL_RCC_OscConfig+0x314>)
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	4a62      	ldr	r2, [pc, #392]	; (8001628 <HAL_RCC_OscConfig+0x314>)
 800149e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80014a2:	6013      	str	r3, [r2, #0]
 80014a4:	4b60      	ldr	r3, [pc, #384]	; (8001628 <HAL_RCC_OscConfig+0x314>)
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	4a5f      	ldr	r2, [pc, #380]	; (8001628 <HAL_RCC_OscConfig+0x314>)
 80014aa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80014ae:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80014b0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80014b4:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	685b      	ldr	r3, [r3, #4]
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d059      	beq.n	8001574 <HAL_RCC_OscConfig+0x260>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014c0:	f7ff fe3a 	bl	8001138 <HAL_GetTick>
 80014c4:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80014c8:	e00a      	b.n	80014e0 <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80014ca:	f7ff fe35 	bl	8001138 <HAL_GetTick>
 80014ce:	4602      	mov	r2, r0
 80014d0:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80014d4:	1ad3      	subs	r3, r2, r3
 80014d6:	2b64      	cmp	r3, #100	; 0x64
 80014d8:	d902      	bls.n	80014e0 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 80014da:	2303      	movs	r3, #3
 80014dc:	f000 bf67 	b.w	80023ae <HAL_RCC_OscConfig+0x109a>
 80014e0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80014e4:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014e8:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 80014ec:	fa93 f3a3 	rbit	r3, r3
 80014f0:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
  return result;
 80014f4:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80014f8:	fab3 f383 	clz	r3, r3
 80014fc:	b2db      	uxtb	r3, r3
 80014fe:	095b      	lsrs	r3, r3, #5
 8001500:	b2db      	uxtb	r3, r3
 8001502:	f043 0301 	orr.w	r3, r3, #1
 8001506:	b2db      	uxtb	r3, r3
 8001508:	2b01      	cmp	r3, #1
 800150a:	d102      	bne.n	8001512 <HAL_RCC_OscConfig+0x1fe>
 800150c:	4b46      	ldr	r3, [pc, #280]	; (8001628 <HAL_RCC_OscConfig+0x314>)
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	e015      	b.n	800153e <HAL_RCC_OscConfig+0x22a>
 8001512:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001516:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800151a:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 800151e:	fa93 f3a3 	rbit	r3, r3
 8001522:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 8001526:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800152a:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 800152e:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 8001532:	fa93 f3a3 	rbit	r3, r3
 8001536:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 800153a:	4b3b      	ldr	r3, [pc, #236]	; (8001628 <HAL_RCC_OscConfig+0x314>)
 800153c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800153e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001542:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
 8001546:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 800154a:	fa92 f2a2 	rbit	r2, r2
 800154e:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
  return result;
 8001552:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8001556:	fab2 f282 	clz	r2, r2
 800155a:	b2d2      	uxtb	r2, r2
 800155c:	f042 0220 	orr.w	r2, r2, #32
 8001560:	b2d2      	uxtb	r2, r2
 8001562:	f002 021f 	and.w	r2, r2, #31
 8001566:	2101      	movs	r1, #1
 8001568:	fa01 f202 	lsl.w	r2, r1, r2
 800156c:	4013      	ands	r3, r2
 800156e:	2b00      	cmp	r3, #0
 8001570:	d0ab      	beq.n	80014ca <HAL_RCC_OscConfig+0x1b6>
 8001572:	e05c      	b.n	800162e <HAL_RCC_OscConfig+0x31a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001574:	f7ff fde0 	bl	8001138 <HAL_GetTick>
 8001578:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800157c:	e00a      	b.n	8001594 <HAL_RCC_OscConfig+0x280>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800157e:	f7ff fddb 	bl	8001138 <HAL_GetTick>
 8001582:	4602      	mov	r2, r0
 8001584:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001588:	1ad3      	subs	r3, r2, r3
 800158a:	2b64      	cmp	r3, #100	; 0x64
 800158c:	d902      	bls.n	8001594 <HAL_RCC_OscConfig+0x280>
          {
            return HAL_TIMEOUT;
 800158e:	2303      	movs	r3, #3
 8001590:	f000 bf0d 	b.w	80023ae <HAL_RCC_OscConfig+0x109a>
 8001594:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001598:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800159c:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 80015a0:	fa93 f3a3 	rbit	r3, r3
 80015a4:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
  return result;
 80015a8:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80015ac:	fab3 f383 	clz	r3, r3
 80015b0:	b2db      	uxtb	r3, r3
 80015b2:	095b      	lsrs	r3, r3, #5
 80015b4:	b2db      	uxtb	r3, r3
 80015b6:	f043 0301 	orr.w	r3, r3, #1
 80015ba:	b2db      	uxtb	r3, r3
 80015bc:	2b01      	cmp	r3, #1
 80015be:	d102      	bne.n	80015c6 <HAL_RCC_OscConfig+0x2b2>
 80015c0:	4b19      	ldr	r3, [pc, #100]	; (8001628 <HAL_RCC_OscConfig+0x314>)
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	e015      	b.n	80015f2 <HAL_RCC_OscConfig+0x2de>
 80015c6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80015ca:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015ce:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 80015d2:	fa93 f3a3 	rbit	r3, r3
 80015d6:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 80015da:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80015de:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 80015e2:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80015e6:	fa93 f3a3 	rbit	r3, r3
 80015ea:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 80015ee:	4b0e      	ldr	r3, [pc, #56]	; (8001628 <HAL_RCC_OscConfig+0x314>)
 80015f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015f2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80015f6:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 80015fa:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 80015fe:	fa92 f2a2 	rbit	r2, r2
 8001602:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
  return result;
 8001606:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 800160a:	fab2 f282 	clz	r2, r2
 800160e:	b2d2      	uxtb	r2, r2
 8001610:	f042 0220 	orr.w	r2, r2, #32
 8001614:	b2d2      	uxtb	r2, r2
 8001616:	f002 021f 	and.w	r2, r2, #31
 800161a:	2101      	movs	r1, #1
 800161c:	fa01 f202 	lsl.w	r2, r1, r2
 8001620:	4013      	ands	r3, r2
 8001622:	2b00      	cmp	r3, #0
 8001624:	d1ab      	bne.n	800157e <HAL_RCC_OscConfig+0x26a>
 8001626:	e002      	b.n	800162e <HAL_RCC_OscConfig+0x31a>
 8001628:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800162c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800162e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001632:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	f003 0302 	and.w	r3, r3, #2
 800163e:	2b00      	cmp	r3, #0
 8001640:	f000 817f 	beq.w	8001942 <HAL_RCC_OscConfig+0x62e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001644:	4ba7      	ldr	r3, [pc, #668]	; (80018e4 <HAL_RCC_OscConfig+0x5d0>)
 8001646:	685b      	ldr	r3, [r3, #4]
 8001648:	f003 030c 	and.w	r3, r3, #12
 800164c:	2b00      	cmp	r3, #0
 800164e:	d00c      	beq.n	800166a <HAL_RCC_OscConfig+0x356>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001650:	4ba4      	ldr	r3, [pc, #656]	; (80018e4 <HAL_RCC_OscConfig+0x5d0>)
 8001652:	685b      	ldr	r3, [r3, #4]
 8001654:	f003 030c 	and.w	r3, r3, #12
 8001658:	2b08      	cmp	r3, #8
 800165a:	d173      	bne.n	8001744 <HAL_RCC_OscConfig+0x430>
 800165c:	4ba1      	ldr	r3, [pc, #644]	; (80018e4 <HAL_RCC_OscConfig+0x5d0>)
 800165e:	685b      	ldr	r3, [r3, #4]
 8001660:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8001664:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001668:	d16c      	bne.n	8001744 <HAL_RCC_OscConfig+0x430>
 800166a:	2302      	movs	r3, #2
 800166c:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001670:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8001674:	fa93 f3a3 	rbit	r3, r3
 8001678:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
  return result;
 800167c:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001680:	fab3 f383 	clz	r3, r3
 8001684:	b2db      	uxtb	r3, r3
 8001686:	095b      	lsrs	r3, r3, #5
 8001688:	b2db      	uxtb	r3, r3
 800168a:	f043 0301 	orr.w	r3, r3, #1
 800168e:	b2db      	uxtb	r3, r3
 8001690:	2b01      	cmp	r3, #1
 8001692:	d102      	bne.n	800169a <HAL_RCC_OscConfig+0x386>
 8001694:	4b93      	ldr	r3, [pc, #588]	; (80018e4 <HAL_RCC_OscConfig+0x5d0>)
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	e013      	b.n	80016c2 <HAL_RCC_OscConfig+0x3ae>
 800169a:	2302      	movs	r3, #2
 800169c:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016a0:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 80016a4:	fa93 f3a3 	rbit	r3, r3
 80016a8:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 80016ac:	2302      	movs	r3, #2
 80016ae:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 80016b2:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 80016b6:	fa93 f3a3 	rbit	r3, r3
 80016ba:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 80016be:	4b89      	ldr	r3, [pc, #548]	; (80018e4 <HAL_RCC_OscConfig+0x5d0>)
 80016c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016c2:	2202      	movs	r2, #2
 80016c4:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 80016c8:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 80016cc:	fa92 f2a2 	rbit	r2, r2
 80016d0:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
  return result;
 80016d4:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 80016d8:	fab2 f282 	clz	r2, r2
 80016dc:	b2d2      	uxtb	r2, r2
 80016de:	f042 0220 	orr.w	r2, r2, #32
 80016e2:	b2d2      	uxtb	r2, r2
 80016e4:	f002 021f 	and.w	r2, r2, #31
 80016e8:	2101      	movs	r1, #1
 80016ea:	fa01 f202 	lsl.w	r2, r1, r2
 80016ee:	4013      	ands	r3, r2
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d00a      	beq.n	800170a <HAL_RCC_OscConfig+0x3f6>
 80016f4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80016f8:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	68db      	ldr	r3, [r3, #12]
 8001700:	2b01      	cmp	r3, #1
 8001702:	d002      	beq.n	800170a <HAL_RCC_OscConfig+0x3f6>
      {
        return HAL_ERROR;
 8001704:	2301      	movs	r3, #1
 8001706:	f000 be52 	b.w	80023ae <HAL_RCC_OscConfig+0x109a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800170a:	4b76      	ldr	r3, [pc, #472]	; (80018e4 <HAL_RCC_OscConfig+0x5d0>)
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001712:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001716:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	691b      	ldr	r3, [r3, #16]
 800171e:	21f8      	movs	r1, #248	; 0xf8
 8001720:	f8c7 1174 	str.w	r1, [r7, #372]	; 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001724:	f8d7 1174 	ldr.w	r1, [r7, #372]	; 0x174
 8001728:	fa91 f1a1 	rbit	r1, r1
 800172c:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
  return result;
 8001730:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8001734:	fab1 f181 	clz	r1, r1
 8001738:	b2c9      	uxtb	r1, r1
 800173a:	408b      	lsls	r3, r1
 800173c:	4969      	ldr	r1, [pc, #420]	; (80018e4 <HAL_RCC_OscConfig+0x5d0>)
 800173e:	4313      	orrs	r3, r2
 8001740:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001742:	e0fe      	b.n	8001942 <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001744:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001748:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	68db      	ldr	r3, [r3, #12]
 8001750:	2b00      	cmp	r3, #0
 8001752:	f000 8088 	beq.w	8001866 <HAL_RCC_OscConfig+0x552>
 8001756:	2301      	movs	r3, #1
 8001758:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800175c:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8001760:	fa93 f3a3 	rbit	r3, r3
 8001764:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  return result;
 8001768:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800176c:	fab3 f383 	clz	r3, r3
 8001770:	b2db      	uxtb	r3, r3
 8001772:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001776:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800177a:	009b      	lsls	r3, r3, #2
 800177c:	461a      	mov	r2, r3
 800177e:	2301      	movs	r3, #1
 8001780:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001782:	f7ff fcd9 	bl	8001138 <HAL_GetTick>
 8001786:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800178a:	e00a      	b.n	80017a2 <HAL_RCC_OscConfig+0x48e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800178c:	f7ff fcd4 	bl	8001138 <HAL_GetTick>
 8001790:	4602      	mov	r2, r0
 8001792:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001796:	1ad3      	subs	r3, r2, r3
 8001798:	2b02      	cmp	r3, #2
 800179a:	d902      	bls.n	80017a2 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 800179c:	2303      	movs	r3, #3
 800179e:	f000 be06 	b.w	80023ae <HAL_RCC_OscConfig+0x109a>
 80017a2:	2302      	movs	r3, #2
 80017a4:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017a8:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 80017ac:	fa93 f3a3 	rbit	r3, r3
 80017b0:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
  return result;
 80017b4:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80017b8:	fab3 f383 	clz	r3, r3
 80017bc:	b2db      	uxtb	r3, r3
 80017be:	095b      	lsrs	r3, r3, #5
 80017c0:	b2db      	uxtb	r3, r3
 80017c2:	f043 0301 	orr.w	r3, r3, #1
 80017c6:	b2db      	uxtb	r3, r3
 80017c8:	2b01      	cmp	r3, #1
 80017ca:	d102      	bne.n	80017d2 <HAL_RCC_OscConfig+0x4be>
 80017cc:	4b45      	ldr	r3, [pc, #276]	; (80018e4 <HAL_RCC_OscConfig+0x5d0>)
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	e013      	b.n	80017fa <HAL_RCC_OscConfig+0x4e6>
 80017d2:	2302      	movs	r3, #2
 80017d4:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017d8:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 80017dc:	fa93 f3a3 	rbit	r3, r3
 80017e0:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 80017e4:	2302      	movs	r3, #2
 80017e6:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 80017ea:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 80017ee:	fa93 f3a3 	rbit	r3, r3
 80017f2:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 80017f6:	4b3b      	ldr	r3, [pc, #236]	; (80018e4 <HAL_RCC_OscConfig+0x5d0>)
 80017f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017fa:	2202      	movs	r2, #2
 80017fc:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 8001800:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8001804:	fa92 f2a2 	rbit	r2, r2
 8001808:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
  return result;
 800180c:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8001810:	fab2 f282 	clz	r2, r2
 8001814:	b2d2      	uxtb	r2, r2
 8001816:	f042 0220 	orr.w	r2, r2, #32
 800181a:	b2d2      	uxtb	r2, r2
 800181c:	f002 021f 	and.w	r2, r2, #31
 8001820:	2101      	movs	r1, #1
 8001822:	fa01 f202 	lsl.w	r2, r1, r2
 8001826:	4013      	ands	r3, r2
 8001828:	2b00      	cmp	r3, #0
 800182a:	d0af      	beq.n	800178c <HAL_RCC_OscConfig+0x478>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800182c:	4b2d      	ldr	r3, [pc, #180]	; (80018e4 <HAL_RCC_OscConfig+0x5d0>)
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001834:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001838:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	691b      	ldr	r3, [r3, #16]
 8001840:	21f8      	movs	r1, #248	; 0xf8
 8001842:	f8c7 1144 	str.w	r1, [r7, #324]	; 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001846:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 800184a:	fa91 f1a1 	rbit	r1, r1
 800184e:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
  return result;
 8001852:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8001856:	fab1 f181 	clz	r1, r1
 800185a:	b2c9      	uxtb	r1, r1
 800185c:	408b      	lsls	r3, r1
 800185e:	4921      	ldr	r1, [pc, #132]	; (80018e4 <HAL_RCC_OscConfig+0x5d0>)
 8001860:	4313      	orrs	r3, r2
 8001862:	600b      	str	r3, [r1, #0]
 8001864:	e06d      	b.n	8001942 <HAL_RCC_OscConfig+0x62e>
 8001866:	2301      	movs	r3, #1
 8001868:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800186c:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8001870:	fa93 f3a3 	rbit	r3, r3
 8001874:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  return result;
 8001878:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800187c:	fab3 f383 	clz	r3, r3
 8001880:	b2db      	uxtb	r3, r3
 8001882:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001886:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800188a:	009b      	lsls	r3, r3, #2
 800188c:	461a      	mov	r2, r3
 800188e:	2300      	movs	r3, #0
 8001890:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001892:	f7ff fc51 	bl	8001138 <HAL_GetTick>
 8001896:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800189a:	e00a      	b.n	80018b2 <HAL_RCC_OscConfig+0x59e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800189c:	f7ff fc4c 	bl	8001138 <HAL_GetTick>
 80018a0:	4602      	mov	r2, r0
 80018a2:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80018a6:	1ad3      	subs	r3, r2, r3
 80018a8:	2b02      	cmp	r3, #2
 80018aa:	d902      	bls.n	80018b2 <HAL_RCC_OscConfig+0x59e>
          {
            return HAL_TIMEOUT;
 80018ac:	2303      	movs	r3, #3
 80018ae:	f000 bd7e 	b.w	80023ae <HAL_RCC_OscConfig+0x109a>
 80018b2:	2302      	movs	r3, #2
 80018b4:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018b8:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80018bc:	fa93 f3a3 	rbit	r3, r3
 80018c0:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  return result;
 80018c4:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80018c8:	fab3 f383 	clz	r3, r3
 80018cc:	b2db      	uxtb	r3, r3
 80018ce:	095b      	lsrs	r3, r3, #5
 80018d0:	b2db      	uxtb	r3, r3
 80018d2:	f043 0301 	orr.w	r3, r3, #1
 80018d6:	b2db      	uxtb	r3, r3
 80018d8:	2b01      	cmp	r3, #1
 80018da:	d105      	bne.n	80018e8 <HAL_RCC_OscConfig+0x5d4>
 80018dc:	4b01      	ldr	r3, [pc, #4]	; (80018e4 <HAL_RCC_OscConfig+0x5d0>)
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	e016      	b.n	8001910 <HAL_RCC_OscConfig+0x5fc>
 80018e2:	bf00      	nop
 80018e4:	40021000 	.word	0x40021000
 80018e8:	2302      	movs	r3, #2
 80018ea:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018ee:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80018f2:	fa93 f3a3 	rbit	r3, r3
 80018f6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 80018fa:	2302      	movs	r3, #2
 80018fc:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8001900:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8001904:	fa93 f3a3 	rbit	r3, r3
 8001908:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 800190c:	4bbf      	ldr	r3, [pc, #764]	; (8001c0c <HAL_RCC_OscConfig+0x8f8>)
 800190e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001910:	2202      	movs	r2, #2
 8001912:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 8001916:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 800191a:	fa92 f2a2 	rbit	r2, r2
 800191e:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
  return result;
 8001922:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8001926:	fab2 f282 	clz	r2, r2
 800192a:	b2d2      	uxtb	r2, r2
 800192c:	f042 0220 	orr.w	r2, r2, #32
 8001930:	b2d2      	uxtb	r2, r2
 8001932:	f002 021f 	and.w	r2, r2, #31
 8001936:	2101      	movs	r1, #1
 8001938:	fa01 f202 	lsl.w	r2, r1, r2
 800193c:	4013      	ands	r3, r2
 800193e:	2b00      	cmp	r3, #0
 8001940:	d1ac      	bne.n	800189c <HAL_RCC_OscConfig+0x588>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001942:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001946:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	f003 0308 	and.w	r3, r3, #8
 8001952:	2b00      	cmp	r3, #0
 8001954:	f000 8113 	beq.w	8001b7e <HAL_RCC_OscConfig+0x86a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001958:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800195c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	695b      	ldr	r3, [r3, #20]
 8001964:	2b00      	cmp	r3, #0
 8001966:	d07c      	beq.n	8001a62 <HAL_RCC_OscConfig+0x74e>
 8001968:	2301      	movs	r3, #1
 800196a:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800196e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001972:	fa93 f3a3 	rbit	r3, r3
 8001976:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  return result;
 800197a:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800197e:	fab3 f383 	clz	r3, r3
 8001982:	b2db      	uxtb	r3, r3
 8001984:	461a      	mov	r2, r3
 8001986:	4ba2      	ldr	r3, [pc, #648]	; (8001c10 <HAL_RCC_OscConfig+0x8fc>)
 8001988:	4413      	add	r3, r2
 800198a:	009b      	lsls	r3, r3, #2
 800198c:	461a      	mov	r2, r3
 800198e:	2301      	movs	r3, #1
 8001990:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001992:	f7ff fbd1 	bl	8001138 <HAL_GetTick>
 8001996:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800199a:	e00a      	b.n	80019b2 <HAL_RCC_OscConfig+0x69e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800199c:	f7ff fbcc 	bl	8001138 <HAL_GetTick>
 80019a0:	4602      	mov	r2, r0
 80019a2:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80019a6:	1ad3      	subs	r3, r2, r3
 80019a8:	2b02      	cmp	r3, #2
 80019aa:	d902      	bls.n	80019b2 <HAL_RCC_OscConfig+0x69e>
        {
          return HAL_TIMEOUT;
 80019ac:	2303      	movs	r3, #3
 80019ae:	f000 bcfe 	b.w	80023ae <HAL_RCC_OscConfig+0x109a>
 80019b2:	2302      	movs	r3, #2
 80019b4:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019b8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80019bc:	fa93 f2a3 	rbit	r2, r3
 80019c0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80019c4:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80019c8:	601a      	str	r2, [r3, #0]
 80019ca:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80019ce:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80019d2:	2202      	movs	r2, #2
 80019d4:	601a      	str	r2, [r3, #0]
 80019d6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80019da:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	fa93 f2a3 	rbit	r2, r3
 80019e4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80019e8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80019ec:	601a      	str	r2, [r3, #0]
 80019ee:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80019f2:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80019f6:	2202      	movs	r2, #2
 80019f8:	601a      	str	r2, [r3, #0]
 80019fa:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80019fe:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	fa93 f2a3 	rbit	r2, r3
 8001a08:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001a0c:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001a10:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a12:	4b7e      	ldr	r3, [pc, #504]	; (8001c0c <HAL_RCC_OscConfig+0x8f8>)
 8001a14:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001a16:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001a1a:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8001a1e:	2102      	movs	r1, #2
 8001a20:	6019      	str	r1, [r3, #0]
 8001a22:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001a26:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	fa93 f1a3 	rbit	r1, r3
 8001a30:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001a34:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8001a38:	6019      	str	r1, [r3, #0]
  return result;
 8001a3a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001a3e:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	fab3 f383 	clz	r3, r3
 8001a48:	b2db      	uxtb	r3, r3
 8001a4a:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001a4e:	b2db      	uxtb	r3, r3
 8001a50:	f003 031f 	and.w	r3, r3, #31
 8001a54:	2101      	movs	r1, #1
 8001a56:	fa01 f303 	lsl.w	r3, r1, r3
 8001a5a:	4013      	ands	r3, r2
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d09d      	beq.n	800199c <HAL_RCC_OscConfig+0x688>
 8001a60:	e08d      	b.n	8001b7e <HAL_RCC_OscConfig+0x86a>
 8001a62:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001a66:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8001a6a:	2201      	movs	r2, #1
 8001a6c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a6e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001a72:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	fa93 f2a3 	rbit	r2, r3
 8001a7c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001a80:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8001a84:	601a      	str	r2, [r3, #0]
  return result;
 8001a86:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001a8a:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8001a8e:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001a90:	fab3 f383 	clz	r3, r3
 8001a94:	b2db      	uxtb	r3, r3
 8001a96:	461a      	mov	r2, r3
 8001a98:	4b5d      	ldr	r3, [pc, #372]	; (8001c10 <HAL_RCC_OscConfig+0x8fc>)
 8001a9a:	4413      	add	r3, r2
 8001a9c:	009b      	lsls	r3, r3, #2
 8001a9e:	461a      	mov	r2, r3
 8001aa0:	2300      	movs	r3, #0
 8001aa2:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001aa4:	f7ff fb48 	bl	8001138 <HAL_GetTick>
 8001aa8:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001aac:	e00a      	b.n	8001ac4 <HAL_RCC_OscConfig+0x7b0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001aae:	f7ff fb43 	bl	8001138 <HAL_GetTick>
 8001ab2:	4602      	mov	r2, r0
 8001ab4:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001ab8:	1ad3      	subs	r3, r2, r3
 8001aba:	2b02      	cmp	r3, #2
 8001abc:	d902      	bls.n	8001ac4 <HAL_RCC_OscConfig+0x7b0>
        {
          return HAL_TIMEOUT;
 8001abe:	2303      	movs	r3, #3
 8001ac0:	f000 bc75 	b.w	80023ae <HAL_RCC_OscConfig+0x109a>
 8001ac4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001ac8:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8001acc:	2202      	movs	r2, #2
 8001ace:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ad0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001ad4:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	fa93 f2a3 	rbit	r2, r3
 8001ade:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001ae2:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8001ae6:	601a      	str	r2, [r3, #0]
 8001ae8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001aec:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8001af0:	2202      	movs	r2, #2
 8001af2:	601a      	str	r2, [r3, #0]
 8001af4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001af8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	fa93 f2a3 	rbit	r2, r3
 8001b02:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001b06:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8001b0a:	601a      	str	r2, [r3, #0]
 8001b0c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001b10:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8001b14:	2202      	movs	r2, #2
 8001b16:	601a      	str	r2, [r3, #0]
 8001b18:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001b1c:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	fa93 f2a3 	rbit	r2, r3
 8001b26:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001b2a:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8001b2e:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001b30:	4b36      	ldr	r3, [pc, #216]	; (8001c0c <HAL_RCC_OscConfig+0x8f8>)
 8001b32:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001b34:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001b38:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8001b3c:	2102      	movs	r1, #2
 8001b3e:	6019      	str	r1, [r3, #0]
 8001b40:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001b44:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	fa93 f1a3 	rbit	r1, r3
 8001b4e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001b52:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8001b56:	6019      	str	r1, [r3, #0]
  return result;
 8001b58:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001b5c:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	fab3 f383 	clz	r3, r3
 8001b66:	b2db      	uxtb	r3, r3
 8001b68:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001b6c:	b2db      	uxtb	r3, r3
 8001b6e:	f003 031f 	and.w	r3, r3, #31
 8001b72:	2101      	movs	r1, #1
 8001b74:	fa01 f303 	lsl.w	r3, r1, r3
 8001b78:	4013      	ands	r3, r2
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d197      	bne.n	8001aae <HAL_RCC_OscConfig+0x79a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001b7e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001b82:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	f003 0304 	and.w	r3, r3, #4
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	f000 81a5 	beq.w	8001ede <HAL_RCC_OscConfig+0xbca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001b94:	2300      	movs	r3, #0
 8001b96:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001b9a:	4b1c      	ldr	r3, [pc, #112]	; (8001c0c <HAL_RCC_OscConfig+0x8f8>)
 8001b9c:	69db      	ldr	r3, [r3, #28]
 8001b9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d116      	bne.n	8001bd4 <HAL_RCC_OscConfig+0x8c0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001ba6:	4b19      	ldr	r3, [pc, #100]	; (8001c0c <HAL_RCC_OscConfig+0x8f8>)
 8001ba8:	69db      	ldr	r3, [r3, #28]
 8001baa:	4a18      	ldr	r2, [pc, #96]	; (8001c0c <HAL_RCC_OscConfig+0x8f8>)
 8001bac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001bb0:	61d3      	str	r3, [r2, #28]
 8001bb2:	4b16      	ldr	r3, [pc, #88]	; (8001c0c <HAL_RCC_OscConfig+0x8f8>)
 8001bb4:	69db      	ldr	r3, [r3, #28]
 8001bb6:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8001bba:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001bbe:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001bc2:	601a      	str	r2, [r3, #0]
 8001bc4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001bc8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001bcc:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8001bce:	2301      	movs	r3, #1
 8001bd0:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001bd4:	4b0f      	ldr	r3, [pc, #60]	; (8001c14 <HAL_RCC_OscConfig+0x900>)
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d121      	bne.n	8001c24 <HAL_RCC_OscConfig+0x910>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001be0:	4b0c      	ldr	r3, [pc, #48]	; (8001c14 <HAL_RCC_OscConfig+0x900>)
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	4a0b      	ldr	r2, [pc, #44]	; (8001c14 <HAL_RCC_OscConfig+0x900>)
 8001be6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001bea:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001bec:	f7ff faa4 	bl	8001138 <HAL_GetTick>
 8001bf0:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001bf4:	e010      	b.n	8001c18 <HAL_RCC_OscConfig+0x904>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001bf6:	f7ff fa9f 	bl	8001138 <HAL_GetTick>
 8001bfa:	4602      	mov	r2, r0
 8001bfc:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001c00:	1ad3      	subs	r3, r2, r3
 8001c02:	2b64      	cmp	r3, #100	; 0x64
 8001c04:	d908      	bls.n	8001c18 <HAL_RCC_OscConfig+0x904>
        {
          return HAL_TIMEOUT;
 8001c06:	2303      	movs	r3, #3
 8001c08:	e3d1      	b.n	80023ae <HAL_RCC_OscConfig+0x109a>
 8001c0a:	bf00      	nop
 8001c0c:	40021000 	.word	0x40021000
 8001c10:	10908120 	.word	0x10908120
 8001c14:	40007000 	.word	0x40007000
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c18:	4b8d      	ldr	r3, [pc, #564]	; (8001e50 <HAL_RCC_OscConfig+0xb3c>)
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d0e8      	beq.n	8001bf6 <HAL_RCC_OscConfig+0x8e2>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001c24:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001c28:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	689b      	ldr	r3, [r3, #8]
 8001c30:	2b01      	cmp	r3, #1
 8001c32:	d106      	bne.n	8001c42 <HAL_RCC_OscConfig+0x92e>
 8001c34:	4b87      	ldr	r3, [pc, #540]	; (8001e54 <HAL_RCC_OscConfig+0xb40>)
 8001c36:	6a1b      	ldr	r3, [r3, #32]
 8001c38:	4a86      	ldr	r2, [pc, #536]	; (8001e54 <HAL_RCC_OscConfig+0xb40>)
 8001c3a:	f043 0301 	orr.w	r3, r3, #1
 8001c3e:	6213      	str	r3, [r2, #32]
 8001c40:	e035      	b.n	8001cae <HAL_RCC_OscConfig+0x99a>
 8001c42:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001c46:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	689b      	ldr	r3, [r3, #8]
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d10c      	bne.n	8001c6c <HAL_RCC_OscConfig+0x958>
 8001c52:	4b80      	ldr	r3, [pc, #512]	; (8001e54 <HAL_RCC_OscConfig+0xb40>)
 8001c54:	6a1b      	ldr	r3, [r3, #32]
 8001c56:	4a7f      	ldr	r2, [pc, #508]	; (8001e54 <HAL_RCC_OscConfig+0xb40>)
 8001c58:	f023 0301 	bic.w	r3, r3, #1
 8001c5c:	6213      	str	r3, [r2, #32]
 8001c5e:	4b7d      	ldr	r3, [pc, #500]	; (8001e54 <HAL_RCC_OscConfig+0xb40>)
 8001c60:	6a1b      	ldr	r3, [r3, #32]
 8001c62:	4a7c      	ldr	r2, [pc, #496]	; (8001e54 <HAL_RCC_OscConfig+0xb40>)
 8001c64:	f023 0304 	bic.w	r3, r3, #4
 8001c68:	6213      	str	r3, [r2, #32]
 8001c6a:	e020      	b.n	8001cae <HAL_RCC_OscConfig+0x99a>
 8001c6c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001c70:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	689b      	ldr	r3, [r3, #8]
 8001c78:	2b05      	cmp	r3, #5
 8001c7a:	d10c      	bne.n	8001c96 <HAL_RCC_OscConfig+0x982>
 8001c7c:	4b75      	ldr	r3, [pc, #468]	; (8001e54 <HAL_RCC_OscConfig+0xb40>)
 8001c7e:	6a1b      	ldr	r3, [r3, #32]
 8001c80:	4a74      	ldr	r2, [pc, #464]	; (8001e54 <HAL_RCC_OscConfig+0xb40>)
 8001c82:	f043 0304 	orr.w	r3, r3, #4
 8001c86:	6213      	str	r3, [r2, #32]
 8001c88:	4b72      	ldr	r3, [pc, #456]	; (8001e54 <HAL_RCC_OscConfig+0xb40>)
 8001c8a:	6a1b      	ldr	r3, [r3, #32]
 8001c8c:	4a71      	ldr	r2, [pc, #452]	; (8001e54 <HAL_RCC_OscConfig+0xb40>)
 8001c8e:	f043 0301 	orr.w	r3, r3, #1
 8001c92:	6213      	str	r3, [r2, #32]
 8001c94:	e00b      	b.n	8001cae <HAL_RCC_OscConfig+0x99a>
 8001c96:	4b6f      	ldr	r3, [pc, #444]	; (8001e54 <HAL_RCC_OscConfig+0xb40>)
 8001c98:	6a1b      	ldr	r3, [r3, #32]
 8001c9a:	4a6e      	ldr	r2, [pc, #440]	; (8001e54 <HAL_RCC_OscConfig+0xb40>)
 8001c9c:	f023 0301 	bic.w	r3, r3, #1
 8001ca0:	6213      	str	r3, [r2, #32]
 8001ca2:	4b6c      	ldr	r3, [pc, #432]	; (8001e54 <HAL_RCC_OscConfig+0xb40>)
 8001ca4:	6a1b      	ldr	r3, [r3, #32]
 8001ca6:	4a6b      	ldr	r2, [pc, #428]	; (8001e54 <HAL_RCC_OscConfig+0xb40>)
 8001ca8:	f023 0304 	bic.w	r3, r3, #4
 8001cac:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001cae:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001cb2:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	689b      	ldr	r3, [r3, #8]
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	f000 8081 	beq.w	8001dc2 <HAL_RCC_OscConfig+0xaae>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001cc0:	f7ff fa3a 	bl	8001138 <HAL_GetTick>
 8001cc4:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001cc8:	e00b      	b.n	8001ce2 <HAL_RCC_OscConfig+0x9ce>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001cca:	f7ff fa35 	bl	8001138 <HAL_GetTick>
 8001cce:	4602      	mov	r2, r0
 8001cd0:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001cd4:	1ad3      	subs	r3, r2, r3
 8001cd6:	f241 3288 	movw	r2, #5000	; 0x1388
 8001cda:	4293      	cmp	r3, r2
 8001cdc:	d901      	bls.n	8001ce2 <HAL_RCC_OscConfig+0x9ce>
        {
          return HAL_TIMEOUT;
 8001cde:	2303      	movs	r3, #3
 8001ce0:	e365      	b.n	80023ae <HAL_RCC_OscConfig+0x109a>
 8001ce2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001ce6:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8001cea:	2202      	movs	r2, #2
 8001cec:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cee:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001cf2:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	fa93 f2a3 	rbit	r2, r3
 8001cfc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001d00:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8001d04:	601a      	str	r2, [r3, #0]
 8001d06:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001d0a:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8001d0e:	2202      	movs	r2, #2
 8001d10:	601a      	str	r2, [r3, #0]
 8001d12:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001d16:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	fa93 f2a3 	rbit	r2, r3
 8001d20:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001d24:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8001d28:	601a      	str	r2, [r3, #0]
  return result;
 8001d2a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001d2e:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8001d32:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d34:	fab3 f383 	clz	r3, r3
 8001d38:	b2db      	uxtb	r3, r3
 8001d3a:	095b      	lsrs	r3, r3, #5
 8001d3c:	b2db      	uxtb	r3, r3
 8001d3e:	f043 0302 	orr.w	r3, r3, #2
 8001d42:	b2db      	uxtb	r3, r3
 8001d44:	2b02      	cmp	r3, #2
 8001d46:	d102      	bne.n	8001d4e <HAL_RCC_OscConfig+0xa3a>
 8001d48:	4b42      	ldr	r3, [pc, #264]	; (8001e54 <HAL_RCC_OscConfig+0xb40>)
 8001d4a:	6a1b      	ldr	r3, [r3, #32]
 8001d4c:	e013      	b.n	8001d76 <HAL_RCC_OscConfig+0xa62>
 8001d4e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001d52:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8001d56:	2202      	movs	r2, #2
 8001d58:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d5a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001d5e:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	fa93 f2a3 	rbit	r2, r3
 8001d68:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001d6c:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 8001d70:	601a      	str	r2, [r3, #0]
 8001d72:	4b38      	ldr	r3, [pc, #224]	; (8001e54 <HAL_RCC_OscConfig+0xb40>)
 8001d74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d76:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001d7a:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8001d7e:	2102      	movs	r1, #2
 8001d80:	6011      	str	r1, [r2, #0]
 8001d82:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001d86:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8001d8a:	6812      	ldr	r2, [r2, #0]
 8001d8c:	fa92 f1a2 	rbit	r1, r2
 8001d90:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001d94:	f5a2 72b0 	sub.w	r2, r2, #352	; 0x160
 8001d98:	6011      	str	r1, [r2, #0]
  return result;
 8001d9a:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001d9e:	f5a2 72b0 	sub.w	r2, r2, #352	; 0x160
 8001da2:	6812      	ldr	r2, [r2, #0]
 8001da4:	fab2 f282 	clz	r2, r2
 8001da8:	b2d2      	uxtb	r2, r2
 8001daa:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001dae:	b2d2      	uxtb	r2, r2
 8001db0:	f002 021f 	and.w	r2, r2, #31
 8001db4:	2101      	movs	r1, #1
 8001db6:	fa01 f202 	lsl.w	r2, r1, r2
 8001dba:	4013      	ands	r3, r2
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d084      	beq.n	8001cca <HAL_RCC_OscConfig+0x9b6>
 8001dc0:	e083      	b.n	8001eca <HAL_RCC_OscConfig+0xbb6>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001dc2:	f7ff f9b9 	bl	8001138 <HAL_GetTick>
 8001dc6:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001dca:	e00b      	b.n	8001de4 <HAL_RCC_OscConfig+0xad0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001dcc:	f7ff f9b4 	bl	8001138 <HAL_GetTick>
 8001dd0:	4602      	mov	r2, r0
 8001dd2:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001dd6:	1ad3      	subs	r3, r2, r3
 8001dd8:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ddc:	4293      	cmp	r3, r2
 8001dde:	d901      	bls.n	8001de4 <HAL_RCC_OscConfig+0xad0>
        {
          return HAL_TIMEOUT;
 8001de0:	2303      	movs	r3, #3
 8001de2:	e2e4      	b.n	80023ae <HAL_RCC_OscConfig+0x109a>
 8001de4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001de8:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8001dec:	2202      	movs	r2, #2
 8001dee:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001df0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001df4:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	fa93 f2a3 	rbit	r2, r3
 8001dfe:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001e02:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8001e06:	601a      	str	r2, [r3, #0]
 8001e08:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001e0c:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8001e10:	2202      	movs	r2, #2
 8001e12:	601a      	str	r2, [r3, #0]
 8001e14:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001e18:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	fa93 f2a3 	rbit	r2, r3
 8001e22:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001e26:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8001e2a:	601a      	str	r2, [r3, #0]
  return result;
 8001e2c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001e30:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8001e34:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e36:	fab3 f383 	clz	r3, r3
 8001e3a:	b2db      	uxtb	r3, r3
 8001e3c:	095b      	lsrs	r3, r3, #5
 8001e3e:	b2db      	uxtb	r3, r3
 8001e40:	f043 0302 	orr.w	r3, r3, #2
 8001e44:	b2db      	uxtb	r3, r3
 8001e46:	2b02      	cmp	r3, #2
 8001e48:	d106      	bne.n	8001e58 <HAL_RCC_OscConfig+0xb44>
 8001e4a:	4b02      	ldr	r3, [pc, #8]	; (8001e54 <HAL_RCC_OscConfig+0xb40>)
 8001e4c:	6a1b      	ldr	r3, [r3, #32]
 8001e4e:	e017      	b.n	8001e80 <HAL_RCC_OscConfig+0xb6c>
 8001e50:	40007000 	.word	0x40007000
 8001e54:	40021000 	.word	0x40021000
 8001e58:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001e5c:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8001e60:	2202      	movs	r2, #2
 8001e62:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e64:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001e68:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	fa93 f2a3 	rbit	r2, r3
 8001e72:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001e76:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 8001e7a:	601a      	str	r2, [r3, #0]
 8001e7c:	4bb3      	ldr	r3, [pc, #716]	; (800214c <HAL_RCC_OscConfig+0xe38>)
 8001e7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e80:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001e84:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8001e88:	2102      	movs	r1, #2
 8001e8a:	6011      	str	r1, [r2, #0]
 8001e8c:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001e90:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8001e94:	6812      	ldr	r2, [r2, #0]
 8001e96:	fa92 f1a2 	rbit	r1, r2
 8001e9a:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001e9e:	f5a2 72c0 	sub.w	r2, r2, #384	; 0x180
 8001ea2:	6011      	str	r1, [r2, #0]
  return result;
 8001ea4:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001ea8:	f5a2 72c0 	sub.w	r2, r2, #384	; 0x180
 8001eac:	6812      	ldr	r2, [r2, #0]
 8001eae:	fab2 f282 	clz	r2, r2
 8001eb2:	b2d2      	uxtb	r2, r2
 8001eb4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001eb8:	b2d2      	uxtb	r2, r2
 8001eba:	f002 021f 	and.w	r2, r2, #31
 8001ebe:	2101      	movs	r1, #1
 8001ec0:	fa01 f202 	lsl.w	r2, r1, r2
 8001ec4:	4013      	ands	r3, r2
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d180      	bne.n	8001dcc <HAL_RCC_OscConfig+0xab8>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001eca:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 8001ece:	2b01      	cmp	r3, #1
 8001ed0:	d105      	bne.n	8001ede <HAL_RCC_OscConfig+0xbca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001ed2:	4b9e      	ldr	r3, [pc, #632]	; (800214c <HAL_RCC_OscConfig+0xe38>)
 8001ed4:	69db      	ldr	r3, [r3, #28]
 8001ed6:	4a9d      	ldr	r2, [pc, #628]	; (800214c <HAL_RCC_OscConfig+0xe38>)
 8001ed8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001edc:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001ede:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001ee2:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	699b      	ldr	r3, [r3, #24]
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	f000 825e 	beq.w	80023ac <HAL_RCC_OscConfig+0x1098>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001ef0:	4b96      	ldr	r3, [pc, #600]	; (800214c <HAL_RCC_OscConfig+0xe38>)
 8001ef2:	685b      	ldr	r3, [r3, #4]
 8001ef4:	f003 030c 	and.w	r3, r3, #12
 8001ef8:	2b08      	cmp	r3, #8
 8001efa:	f000 821f 	beq.w	800233c <HAL_RCC_OscConfig+0x1028>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001efe:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001f02:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	699b      	ldr	r3, [r3, #24]
 8001f0a:	2b02      	cmp	r3, #2
 8001f0c:	f040 8170 	bne.w	80021f0 <HAL_RCC_OscConfig+0xedc>
 8001f10:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001f14:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8001f18:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001f1c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f1e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001f22:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	fa93 f2a3 	rbit	r2, r3
 8001f2c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001f30:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8001f34:	601a      	str	r2, [r3, #0]
  return result;
 8001f36:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001f3a:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8001f3e:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f40:	fab3 f383 	clz	r3, r3
 8001f44:	b2db      	uxtb	r3, r3
 8001f46:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001f4a:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001f4e:	009b      	lsls	r3, r3, #2
 8001f50:	461a      	mov	r2, r3
 8001f52:	2300      	movs	r3, #0
 8001f54:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f56:	f7ff f8ef 	bl	8001138 <HAL_GetTick>
 8001f5a:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f5e:	e009      	b.n	8001f74 <HAL_RCC_OscConfig+0xc60>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001f60:	f7ff f8ea 	bl	8001138 <HAL_GetTick>
 8001f64:	4602      	mov	r2, r0
 8001f66:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001f6a:	1ad3      	subs	r3, r2, r3
 8001f6c:	2b02      	cmp	r3, #2
 8001f6e:	d901      	bls.n	8001f74 <HAL_RCC_OscConfig+0xc60>
          {
            return HAL_TIMEOUT;
 8001f70:	2303      	movs	r3, #3
 8001f72:	e21c      	b.n	80023ae <HAL_RCC_OscConfig+0x109a>
 8001f74:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001f78:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8001f7c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001f80:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f82:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001f86:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	fa93 f2a3 	rbit	r2, r3
 8001f90:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001f94:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8001f98:	601a      	str	r2, [r3, #0]
  return result;
 8001f9a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001f9e:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8001fa2:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001fa4:	fab3 f383 	clz	r3, r3
 8001fa8:	b2db      	uxtb	r3, r3
 8001faa:	095b      	lsrs	r3, r3, #5
 8001fac:	b2db      	uxtb	r3, r3
 8001fae:	f043 0301 	orr.w	r3, r3, #1
 8001fb2:	b2db      	uxtb	r3, r3
 8001fb4:	2b01      	cmp	r3, #1
 8001fb6:	d102      	bne.n	8001fbe <HAL_RCC_OscConfig+0xcaa>
 8001fb8:	4b64      	ldr	r3, [pc, #400]	; (800214c <HAL_RCC_OscConfig+0xe38>)
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	e027      	b.n	800200e <HAL_RCC_OscConfig+0xcfa>
 8001fbe:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001fc2:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8001fc6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001fca:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fcc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001fd0:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	fa93 f2a3 	rbit	r2, r3
 8001fda:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001fde:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8001fe2:	601a      	str	r2, [r3, #0]
 8001fe4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001fe8:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8001fec:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001ff0:	601a      	str	r2, [r3, #0]
 8001ff2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001ff6:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	fa93 f2a3 	rbit	r2, r3
 8002000:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002004:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 8002008:	601a      	str	r2, [r3, #0]
 800200a:	4b50      	ldr	r3, [pc, #320]	; (800214c <HAL_RCC_OscConfig+0xe38>)
 800200c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800200e:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002012:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8002016:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800201a:	6011      	str	r1, [r2, #0]
 800201c:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002020:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8002024:	6812      	ldr	r2, [r2, #0]
 8002026:	fa92 f1a2 	rbit	r1, r2
 800202a:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800202e:	f5a2 72d4 	sub.w	r2, r2, #424	; 0x1a8
 8002032:	6011      	str	r1, [r2, #0]
  return result;
 8002034:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002038:	f5a2 72d4 	sub.w	r2, r2, #424	; 0x1a8
 800203c:	6812      	ldr	r2, [r2, #0]
 800203e:	fab2 f282 	clz	r2, r2
 8002042:	b2d2      	uxtb	r2, r2
 8002044:	f042 0220 	orr.w	r2, r2, #32
 8002048:	b2d2      	uxtb	r2, r2
 800204a:	f002 021f 	and.w	r2, r2, #31
 800204e:	2101      	movs	r1, #1
 8002050:	fa01 f202 	lsl.w	r2, r1, r2
 8002054:	4013      	ands	r3, r2
 8002056:	2b00      	cmp	r3, #0
 8002058:	d182      	bne.n	8001f60 <HAL_RCC_OscConfig+0xc4c>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800205a:	4b3c      	ldr	r3, [pc, #240]	; (800214c <HAL_RCC_OscConfig+0xe38>)
 800205c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800205e:	f023 020f 	bic.w	r2, r3, #15
 8002062:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002066:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800206e:	4937      	ldr	r1, [pc, #220]	; (800214c <HAL_RCC_OscConfig+0xe38>)
 8002070:	4313      	orrs	r3, r2
 8002072:	62cb      	str	r3, [r1, #44]	; 0x2c
 8002074:	4b35      	ldr	r3, [pc, #212]	; (800214c <HAL_RCC_OscConfig+0xe38>)
 8002076:	685b      	ldr	r3, [r3, #4]
 8002078:	f423 1276 	bic.w	r2, r3, #4030464	; 0x3d8000
 800207c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002080:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	6a19      	ldr	r1, [r3, #32]
 8002088:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800208c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	69db      	ldr	r3, [r3, #28]
 8002094:	430b      	orrs	r3, r1
 8002096:	492d      	ldr	r1, [pc, #180]	; (800214c <HAL_RCC_OscConfig+0xe38>)
 8002098:	4313      	orrs	r3, r2
 800209a:	604b      	str	r3, [r1, #4]
 800209c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80020a0:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 80020a4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80020a8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020aa:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80020ae:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	fa93 f2a3 	rbit	r2, r3
 80020b8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80020bc:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 80020c0:	601a      	str	r2, [r3, #0]
  return result;
 80020c2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80020c6:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 80020ca:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80020cc:	fab3 f383 	clz	r3, r3
 80020d0:	b2db      	uxtb	r3, r3
 80020d2:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80020d6:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80020da:	009b      	lsls	r3, r3, #2
 80020dc:	461a      	mov	r2, r3
 80020de:	2301      	movs	r3, #1
 80020e0:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020e2:	f7ff f829 	bl	8001138 <HAL_GetTick>
 80020e6:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80020ea:	e009      	b.n	8002100 <HAL_RCC_OscConfig+0xdec>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80020ec:	f7ff f824 	bl	8001138 <HAL_GetTick>
 80020f0:	4602      	mov	r2, r0
 80020f2:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80020f6:	1ad3      	subs	r3, r2, r3
 80020f8:	2b02      	cmp	r3, #2
 80020fa:	d901      	bls.n	8002100 <HAL_RCC_OscConfig+0xdec>
          {
            return HAL_TIMEOUT;
 80020fc:	2303      	movs	r3, #3
 80020fe:	e156      	b.n	80023ae <HAL_RCC_OscConfig+0x109a>
 8002100:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002104:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8002108:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800210c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800210e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002112:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	fa93 f2a3 	rbit	r2, r3
 800211c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002120:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8002124:	601a      	str	r2, [r3, #0]
  return result;
 8002126:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800212a:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 800212e:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002130:	fab3 f383 	clz	r3, r3
 8002134:	b2db      	uxtb	r3, r3
 8002136:	095b      	lsrs	r3, r3, #5
 8002138:	b2db      	uxtb	r3, r3
 800213a:	f043 0301 	orr.w	r3, r3, #1
 800213e:	b2db      	uxtb	r3, r3
 8002140:	2b01      	cmp	r3, #1
 8002142:	d105      	bne.n	8002150 <HAL_RCC_OscConfig+0xe3c>
 8002144:	4b01      	ldr	r3, [pc, #4]	; (800214c <HAL_RCC_OscConfig+0xe38>)
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	e02a      	b.n	80021a0 <HAL_RCC_OscConfig+0xe8c>
 800214a:	bf00      	nop
 800214c:	40021000 	.word	0x40021000
 8002150:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002154:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8002158:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800215c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800215e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002162:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	fa93 f2a3 	rbit	r2, r3
 800216c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002170:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8002174:	601a      	str	r2, [r3, #0]
 8002176:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800217a:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 800217e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002182:	601a      	str	r2, [r3, #0]
 8002184:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002188:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	fa93 f2a3 	rbit	r2, r3
 8002192:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002196:	f5a3 73e4 	sub.w	r3, r3, #456	; 0x1c8
 800219a:	601a      	str	r2, [r3, #0]
 800219c:	4b86      	ldr	r3, [pc, #536]	; (80023b8 <HAL_RCC_OscConfig+0x10a4>)
 800219e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021a0:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80021a4:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 80021a8:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80021ac:	6011      	str	r1, [r2, #0]
 80021ae:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80021b2:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 80021b6:	6812      	ldr	r2, [r2, #0]
 80021b8:	fa92 f1a2 	rbit	r1, r2
 80021bc:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80021c0:	f5a2 72e8 	sub.w	r2, r2, #464	; 0x1d0
 80021c4:	6011      	str	r1, [r2, #0]
  return result;
 80021c6:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80021ca:	f5a2 72e8 	sub.w	r2, r2, #464	; 0x1d0
 80021ce:	6812      	ldr	r2, [r2, #0]
 80021d0:	fab2 f282 	clz	r2, r2
 80021d4:	b2d2      	uxtb	r2, r2
 80021d6:	f042 0220 	orr.w	r2, r2, #32
 80021da:	b2d2      	uxtb	r2, r2
 80021dc:	f002 021f 	and.w	r2, r2, #31
 80021e0:	2101      	movs	r1, #1
 80021e2:	fa01 f202 	lsl.w	r2, r1, r2
 80021e6:	4013      	ands	r3, r2
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	f43f af7f 	beq.w	80020ec <HAL_RCC_OscConfig+0xdd8>
 80021ee:	e0dd      	b.n	80023ac <HAL_RCC_OscConfig+0x1098>
 80021f0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80021f4:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 80021f8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80021fc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021fe:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002202:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	fa93 f2a3 	rbit	r2, r3
 800220c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002210:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8002214:	601a      	str	r2, [r3, #0]
  return result;
 8002216:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800221a:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 800221e:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002220:	fab3 f383 	clz	r3, r3
 8002224:	b2db      	uxtb	r3, r3
 8002226:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800222a:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800222e:	009b      	lsls	r3, r3, #2
 8002230:	461a      	mov	r2, r3
 8002232:	2300      	movs	r3, #0
 8002234:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002236:	f7fe ff7f 	bl	8001138 <HAL_GetTick>
 800223a:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800223e:	e009      	b.n	8002254 <HAL_RCC_OscConfig+0xf40>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002240:	f7fe ff7a 	bl	8001138 <HAL_GetTick>
 8002244:	4602      	mov	r2, r0
 8002246:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800224a:	1ad3      	subs	r3, r2, r3
 800224c:	2b02      	cmp	r3, #2
 800224e:	d901      	bls.n	8002254 <HAL_RCC_OscConfig+0xf40>
          {
            return HAL_TIMEOUT;
 8002250:	2303      	movs	r3, #3
 8002252:	e0ac      	b.n	80023ae <HAL_RCC_OscConfig+0x109a>
 8002254:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002258:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 800225c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002260:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002262:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002266:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	fa93 f2a3 	rbit	r2, r3
 8002270:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002274:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8002278:	601a      	str	r2, [r3, #0]
  return result;
 800227a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800227e:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8002282:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002284:	fab3 f383 	clz	r3, r3
 8002288:	b2db      	uxtb	r3, r3
 800228a:	095b      	lsrs	r3, r3, #5
 800228c:	b2db      	uxtb	r3, r3
 800228e:	f043 0301 	orr.w	r3, r3, #1
 8002292:	b2db      	uxtb	r3, r3
 8002294:	2b01      	cmp	r3, #1
 8002296:	d102      	bne.n	800229e <HAL_RCC_OscConfig+0xf8a>
 8002298:	4b47      	ldr	r3, [pc, #284]	; (80023b8 <HAL_RCC_OscConfig+0x10a4>)
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	e027      	b.n	80022ee <HAL_RCC_OscConfig+0xfda>
 800229e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80022a2:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 80022a6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80022aa:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022ac:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80022b0:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	fa93 f2a3 	rbit	r2, r3
 80022ba:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80022be:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 80022c2:	601a      	str	r2, [r3, #0]
 80022c4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80022c8:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 80022cc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80022d0:	601a      	str	r2, [r3, #0]
 80022d2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80022d6:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	fa93 f2a3 	rbit	r2, r3
 80022e0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80022e4:	f5a3 73f8 	sub.w	r3, r3, #496	; 0x1f0
 80022e8:	601a      	str	r2, [r3, #0]
 80022ea:	4b33      	ldr	r3, [pc, #204]	; (80023b8 <HAL_RCC_OscConfig+0x10a4>)
 80022ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022ee:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80022f2:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 80022f6:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80022fa:	6011      	str	r1, [r2, #0]
 80022fc:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002300:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8002304:	6812      	ldr	r2, [r2, #0]
 8002306:	fa92 f1a2 	rbit	r1, r2
 800230a:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800230e:	f5a2 72fc 	sub.w	r2, r2, #504	; 0x1f8
 8002312:	6011      	str	r1, [r2, #0]
  return result;
 8002314:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002318:	f5a2 72fc 	sub.w	r2, r2, #504	; 0x1f8
 800231c:	6812      	ldr	r2, [r2, #0]
 800231e:	fab2 f282 	clz	r2, r2
 8002322:	b2d2      	uxtb	r2, r2
 8002324:	f042 0220 	orr.w	r2, r2, #32
 8002328:	b2d2      	uxtb	r2, r2
 800232a:	f002 021f 	and.w	r2, r2, #31
 800232e:	2101      	movs	r1, #1
 8002330:	fa01 f202 	lsl.w	r2, r1, r2
 8002334:	4013      	ands	r3, r2
 8002336:	2b00      	cmp	r3, #0
 8002338:	d182      	bne.n	8002240 <HAL_RCC_OscConfig+0xf2c>
 800233a:	e037      	b.n	80023ac <HAL_RCC_OscConfig+0x1098>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800233c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002340:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	699b      	ldr	r3, [r3, #24]
 8002348:	2b01      	cmp	r3, #1
 800234a:	d101      	bne.n	8002350 <HAL_RCC_OscConfig+0x103c>
      {
        return HAL_ERROR;
 800234c:	2301      	movs	r3, #1
 800234e:	e02e      	b.n	80023ae <HAL_RCC_OscConfig+0x109a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002350:	4b19      	ldr	r3, [pc, #100]	; (80023b8 <HAL_RCC_OscConfig+0x10a4>)
 8002352:	685b      	ldr	r3, [r3, #4]
 8002354:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 8002358:	4b17      	ldr	r3, [pc, #92]	; (80023b8 <HAL_RCC_OscConfig+0x10a4>)
 800235a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800235c:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002360:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8002364:	f403 32c0 	and.w	r2, r3, #98304	; 0x18000
 8002368:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800236c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	69db      	ldr	r3, [r3, #28]
 8002374:	429a      	cmp	r2, r3
 8002376:	d117      	bne.n	80023a8 <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8002378:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800237c:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002380:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002384:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800238c:	429a      	cmp	r2, r3
 800238e:	d10b      	bne.n	80023a8 <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 8002390:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002394:	f003 020f 	and.w	r2, r3, #15
 8002398:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800239c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 80023a4:	429a      	cmp	r2, r3
 80023a6:	d001      	beq.n	80023ac <HAL_RCC_OscConfig+0x1098>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 80023a8:	2301      	movs	r3, #1
 80023aa:	e000      	b.n	80023ae <HAL_RCC_OscConfig+0x109a>
        }
      }
    }
  }

  return HAL_OK;
 80023ac:	2300      	movs	r3, #0
}
 80023ae:	4618      	mov	r0, r3
 80023b0:	f507 7702 	add.w	r7, r7, #520	; 0x208
 80023b4:	46bd      	mov	sp, r7
 80023b6:	bd80      	pop	{r7, pc}
 80023b8:	40021000 	.word	0x40021000

080023bc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80023bc:	b580      	push	{r7, lr}
 80023be:	b09e      	sub	sp, #120	; 0x78
 80023c0:	af00      	add	r7, sp, #0
 80023c2:	6078      	str	r0, [r7, #4]
 80023c4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80023c6:	2300      	movs	r3, #0
 80023c8:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d101      	bne.n	80023d4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80023d0:	2301      	movs	r3, #1
 80023d2:	e162      	b.n	800269a <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80023d4:	4b90      	ldr	r3, [pc, #576]	; (8002618 <HAL_RCC_ClockConfig+0x25c>)
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	f003 0307 	and.w	r3, r3, #7
 80023dc:	683a      	ldr	r2, [r7, #0]
 80023de:	429a      	cmp	r2, r3
 80023e0:	d910      	bls.n	8002404 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80023e2:	4b8d      	ldr	r3, [pc, #564]	; (8002618 <HAL_RCC_ClockConfig+0x25c>)
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	f023 0207 	bic.w	r2, r3, #7
 80023ea:	498b      	ldr	r1, [pc, #556]	; (8002618 <HAL_RCC_ClockConfig+0x25c>)
 80023ec:	683b      	ldr	r3, [r7, #0]
 80023ee:	4313      	orrs	r3, r2
 80023f0:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80023f2:	4b89      	ldr	r3, [pc, #548]	; (8002618 <HAL_RCC_ClockConfig+0x25c>)
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	f003 0307 	and.w	r3, r3, #7
 80023fa:	683a      	ldr	r2, [r7, #0]
 80023fc:	429a      	cmp	r2, r3
 80023fe:	d001      	beq.n	8002404 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002400:	2301      	movs	r3, #1
 8002402:	e14a      	b.n	800269a <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	f003 0302 	and.w	r3, r3, #2
 800240c:	2b00      	cmp	r3, #0
 800240e:	d008      	beq.n	8002422 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002410:	4b82      	ldr	r3, [pc, #520]	; (800261c <HAL_RCC_ClockConfig+0x260>)
 8002412:	685b      	ldr	r3, [r3, #4]
 8002414:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	689b      	ldr	r3, [r3, #8]
 800241c:	497f      	ldr	r1, [pc, #508]	; (800261c <HAL_RCC_ClockConfig+0x260>)
 800241e:	4313      	orrs	r3, r2
 8002420:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	f003 0301 	and.w	r3, r3, #1
 800242a:	2b00      	cmp	r3, #0
 800242c:	f000 80dc 	beq.w	80025e8 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	685b      	ldr	r3, [r3, #4]
 8002434:	2b01      	cmp	r3, #1
 8002436:	d13c      	bne.n	80024b2 <HAL_RCC_ClockConfig+0xf6>
 8002438:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800243c:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800243e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002440:	fa93 f3a3 	rbit	r3, r3
 8002444:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8002446:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002448:	fab3 f383 	clz	r3, r3
 800244c:	b2db      	uxtb	r3, r3
 800244e:	095b      	lsrs	r3, r3, #5
 8002450:	b2db      	uxtb	r3, r3
 8002452:	f043 0301 	orr.w	r3, r3, #1
 8002456:	b2db      	uxtb	r3, r3
 8002458:	2b01      	cmp	r3, #1
 800245a:	d102      	bne.n	8002462 <HAL_RCC_ClockConfig+0xa6>
 800245c:	4b6f      	ldr	r3, [pc, #444]	; (800261c <HAL_RCC_ClockConfig+0x260>)
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	e00f      	b.n	8002482 <HAL_RCC_ClockConfig+0xc6>
 8002462:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002466:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002468:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800246a:	fa93 f3a3 	rbit	r3, r3
 800246e:	667b      	str	r3, [r7, #100]	; 0x64
 8002470:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002474:	663b      	str	r3, [r7, #96]	; 0x60
 8002476:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002478:	fa93 f3a3 	rbit	r3, r3
 800247c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800247e:	4b67      	ldr	r3, [pc, #412]	; (800261c <HAL_RCC_ClockConfig+0x260>)
 8002480:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002482:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002486:	65ba      	str	r2, [r7, #88]	; 0x58
 8002488:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800248a:	fa92 f2a2 	rbit	r2, r2
 800248e:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8002490:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002492:	fab2 f282 	clz	r2, r2
 8002496:	b2d2      	uxtb	r2, r2
 8002498:	f042 0220 	orr.w	r2, r2, #32
 800249c:	b2d2      	uxtb	r2, r2
 800249e:	f002 021f 	and.w	r2, r2, #31
 80024a2:	2101      	movs	r1, #1
 80024a4:	fa01 f202 	lsl.w	r2, r1, r2
 80024a8:	4013      	ands	r3, r2
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d17b      	bne.n	80025a6 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80024ae:	2301      	movs	r3, #1
 80024b0:	e0f3      	b.n	800269a <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	685b      	ldr	r3, [r3, #4]
 80024b6:	2b02      	cmp	r3, #2
 80024b8:	d13c      	bne.n	8002534 <HAL_RCC_ClockConfig+0x178>
 80024ba:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80024be:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024c0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80024c2:	fa93 f3a3 	rbit	r3, r3
 80024c6:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80024c8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80024ca:	fab3 f383 	clz	r3, r3
 80024ce:	b2db      	uxtb	r3, r3
 80024d0:	095b      	lsrs	r3, r3, #5
 80024d2:	b2db      	uxtb	r3, r3
 80024d4:	f043 0301 	orr.w	r3, r3, #1
 80024d8:	b2db      	uxtb	r3, r3
 80024da:	2b01      	cmp	r3, #1
 80024dc:	d102      	bne.n	80024e4 <HAL_RCC_ClockConfig+0x128>
 80024de:	4b4f      	ldr	r3, [pc, #316]	; (800261c <HAL_RCC_ClockConfig+0x260>)
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	e00f      	b.n	8002504 <HAL_RCC_ClockConfig+0x148>
 80024e4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80024e8:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024ea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80024ec:	fa93 f3a3 	rbit	r3, r3
 80024f0:	647b      	str	r3, [r7, #68]	; 0x44
 80024f2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80024f6:	643b      	str	r3, [r7, #64]	; 0x40
 80024f8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80024fa:	fa93 f3a3 	rbit	r3, r3
 80024fe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002500:	4b46      	ldr	r3, [pc, #280]	; (800261c <HAL_RCC_ClockConfig+0x260>)
 8002502:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002504:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002508:	63ba      	str	r2, [r7, #56]	; 0x38
 800250a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800250c:	fa92 f2a2 	rbit	r2, r2
 8002510:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8002512:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002514:	fab2 f282 	clz	r2, r2
 8002518:	b2d2      	uxtb	r2, r2
 800251a:	f042 0220 	orr.w	r2, r2, #32
 800251e:	b2d2      	uxtb	r2, r2
 8002520:	f002 021f 	and.w	r2, r2, #31
 8002524:	2101      	movs	r1, #1
 8002526:	fa01 f202 	lsl.w	r2, r1, r2
 800252a:	4013      	ands	r3, r2
 800252c:	2b00      	cmp	r3, #0
 800252e:	d13a      	bne.n	80025a6 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002530:	2301      	movs	r3, #1
 8002532:	e0b2      	b.n	800269a <HAL_RCC_ClockConfig+0x2de>
 8002534:	2302      	movs	r3, #2
 8002536:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002538:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800253a:	fa93 f3a3 	rbit	r3, r3
 800253e:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002540:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002542:	fab3 f383 	clz	r3, r3
 8002546:	b2db      	uxtb	r3, r3
 8002548:	095b      	lsrs	r3, r3, #5
 800254a:	b2db      	uxtb	r3, r3
 800254c:	f043 0301 	orr.w	r3, r3, #1
 8002550:	b2db      	uxtb	r3, r3
 8002552:	2b01      	cmp	r3, #1
 8002554:	d102      	bne.n	800255c <HAL_RCC_ClockConfig+0x1a0>
 8002556:	4b31      	ldr	r3, [pc, #196]	; (800261c <HAL_RCC_ClockConfig+0x260>)
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	e00d      	b.n	8002578 <HAL_RCC_ClockConfig+0x1bc>
 800255c:	2302      	movs	r3, #2
 800255e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002560:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002562:	fa93 f3a3 	rbit	r3, r3
 8002566:	627b      	str	r3, [r7, #36]	; 0x24
 8002568:	2302      	movs	r3, #2
 800256a:	623b      	str	r3, [r7, #32]
 800256c:	6a3b      	ldr	r3, [r7, #32]
 800256e:	fa93 f3a3 	rbit	r3, r3
 8002572:	61fb      	str	r3, [r7, #28]
 8002574:	4b29      	ldr	r3, [pc, #164]	; (800261c <HAL_RCC_ClockConfig+0x260>)
 8002576:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002578:	2202      	movs	r2, #2
 800257a:	61ba      	str	r2, [r7, #24]
 800257c:	69ba      	ldr	r2, [r7, #24]
 800257e:	fa92 f2a2 	rbit	r2, r2
 8002582:	617a      	str	r2, [r7, #20]
  return result;
 8002584:	697a      	ldr	r2, [r7, #20]
 8002586:	fab2 f282 	clz	r2, r2
 800258a:	b2d2      	uxtb	r2, r2
 800258c:	f042 0220 	orr.w	r2, r2, #32
 8002590:	b2d2      	uxtb	r2, r2
 8002592:	f002 021f 	and.w	r2, r2, #31
 8002596:	2101      	movs	r1, #1
 8002598:	fa01 f202 	lsl.w	r2, r1, r2
 800259c:	4013      	ands	r3, r2
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d101      	bne.n	80025a6 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80025a2:	2301      	movs	r3, #1
 80025a4:	e079      	b.n	800269a <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80025a6:	4b1d      	ldr	r3, [pc, #116]	; (800261c <HAL_RCC_ClockConfig+0x260>)
 80025a8:	685b      	ldr	r3, [r3, #4]
 80025aa:	f023 0203 	bic.w	r2, r3, #3
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	685b      	ldr	r3, [r3, #4]
 80025b2:	491a      	ldr	r1, [pc, #104]	; (800261c <HAL_RCC_ClockConfig+0x260>)
 80025b4:	4313      	orrs	r3, r2
 80025b6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80025b8:	f7fe fdbe 	bl	8001138 <HAL_GetTick>
 80025bc:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80025be:	e00a      	b.n	80025d6 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80025c0:	f7fe fdba 	bl	8001138 <HAL_GetTick>
 80025c4:	4602      	mov	r2, r0
 80025c6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80025c8:	1ad3      	subs	r3, r2, r3
 80025ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80025ce:	4293      	cmp	r3, r2
 80025d0:	d901      	bls.n	80025d6 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 80025d2:	2303      	movs	r3, #3
 80025d4:	e061      	b.n	800269a <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80025d6:	4b11      	ldr	r3, [pc, #68]	; (800261c <HAL_RCC_ClockConfig+0x260>)
 80025d8:	685b      	ldr	r3, [r3, #4]
 80025da:	f003 020c 	and.w	r2, r3, #12
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	685b      	ldr	r3, [r3, #4]
 80025e2:	009b      	lsls	r3, r3, #2
 80025e4:	429a      	cmp	r2, r3
 80025e6:	d1eb      	bne.n	80025c0 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80025e8:	4b0b      	ldr	r3, [pc, #44]	; (8002618 <HAL_RCC_ClockConfig+0x25c>)
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	f003 0307 	and.w	r3, r3, #7
 80025f0:	683a      	ldr	r2, [r7, #0]
 80025f2:	429a      	cmp	r2, r3
 80025f4:	d214      	bcs.n	8002620 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80025f6:	4b08      	ldr	r3, [pc, #32]	; (8002618 <HAL_RCC_ClockConfig+0x25c>)
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	f023 0207 	bic.w	r2, r3, #7
 80025fe:	4906      	ldr	r1, [pc, #24]	; (8002618 <HAL_RCC_ClockConfig+0x25c>)
 8002600:	683b      	ldr	r3, [r7, #0]
 8002602:	4313      	orrs	r3, r2
 8002604:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002606:	4b04      	ldr	r3, [pc, #16]	; (8002618 <HAL_RCC_ClockConfig+0x25c>)
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	f003 0307 	and.w	r3, r3, #7
 800260e:	683a      	ldr	r2, [r7, #0]
 8002610:	429a      	cmp	r2, r3
 8002612:	d005      	beq.n	8002620 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8002614:	2301      	movs	r3, #1
 8002616:	e040      	b.n	800269a <HAL_RCC_ClockConfig+0x2de>
 8002618:	40022000 	.word	0x40022000
 800261c:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	f003 0304 	and.w	r3, r3, #4
 8002628:	2b00      	cmp	r3, #0
 800262a:	d008      	beq.n	800263e <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800262c:	4b1d      	ldr	r3, [pc, #116]	; (80026a4 <HAL_RCC_ClockConfig+0x2e8>)
 800262e:	685b      	ldr	r3, [r3, #4]
 8002630:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	68db      	ldr	r3, [r3, #12]
 8002638:	491a      	ldr	r1, [pc, #104]	; (80026a4 <HAL_RCC_ClockConfig+0x2e8>)
 800263a:	4313      	orrs	r3, r2
 800263c:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	f003 0308 	and.w	r3, r3, #8
 8002646:	2b00      	cmp	r3, #0
 8002648:	d009      	beq.n	800265e <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800264a:	4b16      	ldr	r3, [pc, #88]	; (80026a4 <HAL_RCC_ClockConfig+0x2e8>)
 800264c:	685b      	ldr	r3, [r3, #4]
 800264e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	691b      	ldr	r3, [r3, #16]
 8002656:	00db      	lsls	r3, r3, #3
 8002658:	4912      	ldr	r1, [pc, #72]	; (80026a4 <HAL_RCC_ClockConfig+0x2e8>)
 800265a:	4313      	orrs	r3, r2
 800265c:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800265e:	f000 f829 	bl	80026b4 <HAL_RCC_GetSysClockFreq>
 8002662:	4601      	mov	r1, r0
 8002664:	4b0f      	ldr	r3, [pc, #60]	; (80026a4 <HAL_RCC_ClockConfig+0x2e8>)
 8002666:	685b      	ldr	r3, [r3, #4]
 8002668:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800266c:	22f0      	movs	r2, #240	; 0xf0
 800266e:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002670:	693a      	ldr	r2, [r7, #16]
 8002672:	fa92 f2a2 	rbit	r2, r2
 8002676:	60fa      	str	r2, [r7, #12]
  return result;
 8002678:	68fa      	ldr	r2, [r7, #12]
 800267a:	fab2 f282 	clz	r2, r2
 800267e:	b2d2      	uxtb	r2, r2
 8002680:	40d3      	lsrs	r3, r2
 8002682:	4a09      	ldr	r2, [pc, #36]	; (80026a8 <HAL_RCC_ClockConfig+0x2ec>)
 8002684:	5cd3      	ldrb	r3, [r2, r3]
 8002686:	fa21 f303 	lsr.w	r3, r1, r3
 800268a:	4a08      	ldr	r2, [pc, #32]	; (80026ac <HAL_RCC_ClockConfig+0x2f0>)
 800268c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 800268e:	4b08      	ldr	r3, [pc, #32]	; (80026b0 <HAL_RCC_ClockConfig+0x2f4>)
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	4618      	mov	r0, r3
 8002694:	f7fe fc5a 	bl	8000f4c <HAL_InitTick>
  
  return HAL_OK;
 8002698:	2300      	movs	r3, #0
}
 800269a:	4618      	mov	r0, r3
 800269c:	3778      	adds	r7, #120	; 0x78
 800269e:	46bd      	mov	sp, r7
 80026a0:	bd80      	pop	{r7, pc}
 80026a2:	bf00      	nop
 80026a4:	40021000 	.word	0x40021000
 80026a8:	08006568 	.word	0x08006568
 80026ac:	2000002c 	.word	0x2000002c
 80026b0:	20000030 	.word	0x20000030

080026b4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80026b4:	b480      	push	{r7}
 80026b6:	b08b      	sub	sp, #44	; 0x2c
 80026b8:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80026ba:	2300      	movs	r3, #0
 80026bc:	61fb      	str	r3, [r7, #28]
 80026be:	2300      	movs	r3, #0
 80026c0:	61bb      	str	r3, [r7, #24]
 80026c2:	2300      	movs	r3, #0
 80026c4:	627b      	str	r3, [r7, #36]	; 0x24
 80026c6:	2300      	movs	r3, #0
 80026c8:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80026ca:	2300      	movs	r3, #0
 80026cc:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 80026ce:	4b2a      	ldr	r3, [pc, #168]	; (8002778 <HAL_RCC_GetSysClockFreq+0xc4>)
 80026d0:	685b      	ldr	r3, [r3, #4]
 80026d2:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80026d4:	69fb      	ldr	r3, [r7, #28]
 80026d6:	f003 030c 	and.w	r3, r3, #12
 80026da:	2b04      	cmp	r3, #4
 80026dc:	d002      	beq.n	80026e4 <HAL_RCC_GetSysClockFreq+0x30>
 80026de:	2b08      	cmp	r3, #8
 80026e0:	d003      	beq.n	80026ea <HAL_RCC_GetSysClockFreq+0x36>
 80026e2:	e03f      	b.n	8002764 <HAL_RCC_GetSysClockFreq+0xb0>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80026e4:	4b25      	ldr	r3, [pc, #148]	; (800277c <HAL_RCC_GetSysClockFreq+0xc8>)
 80026e6:	623b      	str	r3, [r7, #32]
      break;
 80026e8:	e03f      	b.n	800276a <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 80026ea:	69fb      	ldr	r3, [r7, #28]
 80026ec:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 80026f0:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 80026f4:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026f6:	68ba      	ldr	r2, [r7, #8]
 80026f8:	fa92 f2a2 	rbit	r2, r2
 80026fc:	607a      	str	r2, [r7, #4]
  return result;
 80026fe:	687a      	ldr	r2, [r7, #4]
 8002700:	fab2 f282 	clz	r2, r2
 8002704:	b2d2      	uxtb	r2, r2
 8002706:	40d3      	lsrs	r3, r2
 8002708:	4a1d      	ldr	r2, [pc, #116]	; (8002780 <HAL_RCC_GetSysClockFreq+0xcc>)
 800270a:	5cd3      	ldrb	r3, [r2, r3]
 800270c:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 800270e:	4b1a      	ldr	r3, [pc, #104]	; (8002778 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002710:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002712:	f003 030f 	and.w	r3, r3, #15
 8002716:	220f      	movs	r2, #15
 8002718:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800271a:	693a      	ldr	r2, [r7, #16]
 800271c:	fa92 f2a2 	rbit	r2, r2
 8002720:	60fa      	str	r2, [r7, #12]
  return result;
 8002722:	68fa      	ldr	r2, [r7, #12]
 8002724:	fab2 f282 	clz	r2, r2
 8002728:	b2d2      	uxtb	r2, r2
 800272a:	40d3      	lsrs	r3, r2
 800272c:	4a15      	ldr	r2, [pc, #84]	; (8002784 <HAL_RCC_GetSysClockFreq+0xd0>)
 800272e:	5cd3      	ldrb	r3, [r2, r3]
 8002730:	61bb      	str	r3, [r7, #24]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 8002732:	69fb      	ldr	r3, [r7, #28]
 8002734:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002738:	2b00      	cmp	r3, #0
 800273a:	d008      	beq.n	800274e <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800273c:	4a0f      	ldr	r2, [pc, #60]	; (800277c <HAL_RCC_GetSysClockFreq+0xc8>)
 800273e:	69bb      	ldr	r3, [r7, #24]
 8002740:	fbb2 f2f3 	udiv	r2, r2, r3
 8002744:	697b      	ldr	r3, [r7, #20]
 8002746:	fb02 f303 	mul.w	r3, r2, r3
 800274a:	627b      	str	r3, [r7, #36]	; 0x24
 800274c:	e007      	b.n	800275e <HAL_RCC_GetSysClockFreq+0xaa>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800274e:	4a0b      	ldr	r2, [pc, #44]	; (800277c <HAL_RCC_GetSysClockFreq+0xc8>)
 8002750:	69bb      	ldr	r3, [r7, #24]
 8002752:	fbb2 f2f3 	udiv	r2, r2, r3
 8002756:	697b      	ldr	r3, [r7, #20]
 8002758:	fb02 f303 	mul.w	r3, r2, r3
 800275c:	627b      	str	r3, [r7, #36]	; 0x24
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 800275e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002760:	623b      	str	r3, [r7, #32]
      break;
 8002762:	e002      	b.n	800276a <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002764:	4b05      	ldr	r3, [pc, #20]	; (800277c <HAL_RCC_GetSysClockFreq+0xc8>)
 8002766:	623b      	str	r3, [r7, #32]
      break;
 8002768:	bf00      	nop
    }
  }
  return sysclockfreq;
 800276a:	6a3b      	ldr	r3, [r7, #32]
}
 800276c:	4618      	mov	r0, r3
 800276e:	372c      	adds	r7, #44	; 0x2c
 8002770:	46bd      	mov	sp, r7
 8002772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002776:	4770      	bx	lr
 8002778:	40021000 	.word	0x40021000
 800277c:	007a1200 	.word	0x007a1200
 8002780:	08006580 	.word	0x08006580
 8002784:	08006590 	.word	0x08006590

08002788 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002788:	b480      	push	{r7}
 800278a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800278c:	4b03      	ldr	r3, [pc, #12]	; (800279c <HAL_RCC_GetHCLKFreq+0x14>)
 800278e:	681b      	ldr	r3, [r3, #0]
}
 8002790:	4618      	mov	r0, r3
 8002792:	46bd      	mov	sp, r7
 8002794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002798:	4770      	bx	lr
 800279a:	bf00      	nop
 800279c:	2000002c 	.word	0x2000002c

080027a0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80027a0:	b580      	push	{r7, lr}
 80027a2:	b082      	sub	sp, #8
 80027a4:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 80027a6:	f7ff ffef 	bl	8002788 <HAL_RCC_GetHCLKFreq>
 80027aa:	4601      	mov	r1, r0
 80027ac:	4b0b      	ldr	r3, [pc, #44]	; (80027dc <HAL_RCC_GetPCLK2Freq+0x3c>)
 80027ae:	685b      	ldr	r3, [r3, #4]
 80027b0:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 80027b4:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80027b8:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027ba:	687a      	ldr	r2, [r7, #4]
 80027bc:	fa92 f2a2 	rbit	r2, r2
 80027c0:	603a      	str	r2, [r7, #0]
  return result;
 80027c2:	683a      	ldr	r2, [r7, #0]
 80027c4:	fab2 f282 	clz	r2, r2
 80027c8:	b2d2      	uxtb	r2, r2
 80027ca:	40d3      	lsrs	r3, r2
 80027cc:	4a04      	ldr	r2, [pc, #16]	; (80027e0 <HAL_RCC_GetPCLK2Freq+0x40>)
 80027ce:	5cd3      	ldrb	r3, [r2, r3]
 80027d0:	fa21 f303 	lsr.w	r3, r1, r3
} 
 80027d4:	4618      	mov	r0, r3
 80027d6:	3708      	adds	r7, #8
 80027d8:	46bd      	mov	sp, r7
 80027da:	bd80      	pop	{r7, pc}
 80027dc:	40021000 	.word	0x40021000
 80027e0:	08006578 	.word	0x08006578

080027e4 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80027e4:	b480      	push	{r7}
 80027e6:	b083      	sub	sp, #12
 80027e8:	af00      	add	r7, sp, #0
 80027ea:	6078      	str	r0, [r7, #4]
 80027ec:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	220f      	movs	r2, #15
 80027f2:	601a      	str	r2, [r3, #0]
  
  /* Get the SYSCLK configuration --------------------------------------------*/ 
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80027f4:	4b12      	ldr	r3, [pc, #72]	; (8002840 <HAL_RCC_GetClockConfig+0x5c>)
 80027f6:	685b      	ldr	r3, [r3, #4]
 80027f8:	f003 0203 	and.w	r2, r3, #3
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	605a      	str	r2, [r3, #4]
  
  /* Get the HCLK configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE); 
 8002800:	4b0f      	ldr	r3, [pc, #60]	; (8002840 <HAL_RCC_GetClockConfig+0x5c>)
 8002802:	685b      	ldr	r3, [r3, #4]
 8002804:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	609a      	str	r2, [r3, #8]
  
  /* Get the APB1 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);   
 800280c:	4b0c      	ldr	r3, [pc, #48]	; (8002840 <HAL_RCC_GetClockConfig+0x5c>)
 800280e:	685b      	ldr	r3, [r3, #4]
 8002810:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	60da      	str	r2, [r3, #12]
  
  /* Get the APB2 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8002818:	4b09      	ldr	r3, [pc, #36]	; (8002840 <HAL_RCC_GetClockConfig+0x5c>)
 800281a:	685b      	ldr	r3, [r3, #4]
 800281c:	08db      	lsrs	r3, r3, #3
 800281e:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	611a      	str	r2, [r3, #16]
  
  /* Get the Flash Wait State (Latency) configuration ------------------------*/   
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY); 
 8002826:	4b07      	ldr	r3, [pc, #28]	; (8002844 <HAL_RCC_GetClockConfig+0x60>)
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	f003 0207 	and.w	r2, r3, #7
 800282e:	683b      	ldr	r3, [r7, #0]
 8002830:	601a      	str	r2, [r3, #0]
}
 8002832:	bf00      	nop
 8002834:	370c      	adds	r7, #12
 8002836:	46bd      	mov	sp, r7
 8002838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800283c:	4770      	bx	lr
 800283e:	bf00      	nop
 8002840:	40021000 	.word	0x40021000
 8002844:	40022000 	.word	0x40022000

08002848 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002848:	b580      	push	{r7, lr}
 800284a:	b092      	sub	sp, #72	; 0x48
 800284c:	af00      	add	r7, sp, #0
 800284e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002850:	2300      	movs	r3, #0
 8002852:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8002854:	2300      	movs	r3, #0
 8002856:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8002858:	2300      	movs	r3, #0
 800285a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002866:	2b00      	cmp	r3, #0
 8002868:	f000 80d4 	beq.w	8002a14 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800286c:	4b4e      	ldr	r3, [pc, #312]	; (80029a8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800286e:	69db      	ldr	r3, [r3, #28]
 8002870:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002874:	2b00      	cmp	r3, #0
 8002876:	d10e      	bne.n	8002896 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002878:	4b4b      	ldr	r3, [pc, #300]	; (80029a8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800287a:	69db      	ldr	r3, [r3, #28]
 800287c:	4a4a      	ldr	r2, [pc, #296]	; (80029a8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800287e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002882:	61d3      	str	r3, [r2, #28]
 8002884:	4b48      	ldr	r3, [pc, #288]	; (80029a8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002886:	69db      	ldr	r3, [r3, #28]
 8002888:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800288c:	60bb      	str	r3, [r7, #8]
 800288e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002890:	2301      	movs	r3, #1
 8002892:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002896:	4b45      	ldr	r3, [pc, #276]	; (80029ac <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d118      	bne.n	80028d4 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80028a2:	4b42      	ldr	r3, [pc, #264]	; (80029ac <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	4a41      	ldr	r2, [pc, #260]	; (80029ac <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80028a8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80028ac:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80028ae:	f7fe fc43 	bl	8001138 <HAL_GetTick>
 80028b2:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028b4:	e008      	b.n	80028c8 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80028b6:	f7fe fc3f 	bl	8001138 <HAL_GetTick>
 80028ba:	4602      	mov	r2, r0
 80028bc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80028be:	1ad3      	subs	r3, r2, r3
 80028c0:	2b64      	cmp	r3, #100	; 0x64
 80028c2:	d901      	bls.n	80028c8 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 80028c4:	2303      	movs	r3, #3
 80028c6:	e1d6      	b.n	8002c76 <HAL_RCCEx_PeriphCLKConfig+0x42e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028c8:	4b38      	ldr	r3, [pc, #224]	; (80029ac <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d0f0      	beq.n	80028b6 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80028d4:	4b34      	ldr	r3, [pc, #208]	; (80029a8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80028d6:	6a1b      	ldr	r3, [r3, #32]
 80028d8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80028dc:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80028de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	f000 8084 	beq.w	80029ee <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	685b      	ldr	r3, [r3, #4]
 80028ea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80028ee:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80028f0:	429a      	cmp	r2, r3
 80028f2:	d07c      	beq.n	80029ee <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80028f4:	4b2c      	ldr	r3, [pc, #176]	; (80029a8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80028f6:	6a1b      	ldr	r3, [r3, #32]
 80028f8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80028fc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80028fe:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002902:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002904:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002906:	fa93 f3a3 	rbit	r3, r3
 800290a:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 800290c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800290e:	fab3 f383 	clz	r3, r3
 8002912:	b2db      	uxtb	r3, r3
 8002914:	461a      	mov	r2, r3
 8002916:	4b26      	ldr	r3, [pc, #152]	; (80029b0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002918:	4413      	add	r3, r2
 800291a:	009b      	lsls	r3, r3, #2
 800291c:	461a      	mov	r2, r3
 800291e:	2301      	movs	r3, #1
 8002920:	6013      	str	r3, [r2, #0]
 8002922:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002926:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002928:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800292a:	fa93 f3a3 	rbit	r3, r3
 800292e:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002930:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002932:	fab3 f383 	clz	r3, r3
 8002936:	b2db      	uxtb	r3, r3
 8002938:	461a      	mov	r2, r3
 800293a:	4b1d      	ldr	r3, [pc, #116]	; (80029b0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800293c:	4413      	add	r3, r2
 800293e:	009b      	lsls	r3, r3, #2
 8002940:	461a      	mov	r2, r3
 8002942:	2300      	movs	r3, #0
 8002944:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002946:	4a18      	ldr	r2, [pc, #96]	; (80029a8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002948:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800294a:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800294c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800294e:	f003 0301 	and.w	r3, r3, #1
 8002952:	2b00      	cmp	r3, #0
 8002954:	d04b      	beq.n	80029ee <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002956:	f7fe fbef 	bl	8001138 <HAL_GetTick>
 800295a:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800295c:	e00a      	b.n	8002974 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800295e:	f7fe fbeb 	bl	8001138 <HAL_GetTick>
 8002962:	4602      	mov	r2, r0
 8002964:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002966:	1ad3      	subs	r3, r2, r3
 8002968:	f241 3288 	movw	r2, #5000	; 0x1388
 800296c:	4293      	cmp	r3, r2
 800296e:	d901      	bls.n	8002974 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8002970:	2303      	movs	r3, #3
 8002972:	e180      	b.n	8002c76 <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8002974:	2302      	movs	r3, #2
 8002976:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002978:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800297a:	fa93 f3a3 	rbit	r3, r3
 800297e:	627b      	str	r3, [r7, #36]	; 0x24
 8002980:	2302      	movs	r3, #2
 8002982:	623b      	str	r3, [r7, #32]
 8002984:	6a3b      	ldr	r3, [r7, #32]
 8002986:	fa93 f3a3 	rbit	r3, r3
 800298a:	61fb      	str	r3, [r7, #28]
  return result;
 800298c:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800298e:	fab3 f383 	clz	r3, r3
 8002992:	b2db      	uxtb	r3, r3
 8002994:	095b      	lsrs	r3, r3, #5
 8002996:	b2db      	uxtb	r3, r3
 8002998:	f043 0302 	orr.w	r3, r3, #2
 800299c:	b2db      	uxtb	r3, r3
 800299e:	2b02      	cmp	r3, #2
 80029a0:	d108      	bne.n	80029b4 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 80029a2:	4b01      	ldr	r3, [pc, #4]	; (80029a8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80029a4:	6a1b      	ldr	r3, [r3, #32]
 80029a6:	e00d      	b.n	80029c4 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 80029a8:	40021000 	.word	0x40021000
 80029ac:	40007000 	.word	0x40007000
 80029b0:	10908100 	.word	0x10908100
 80029b4:	2302      	movs	r3, #2
 80029b6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029b8:	69bb      	ldr	r3, [r7, #24]
 80029ba:	fa93 f3a3 	rbit	r3, r3
 80029be:	617b      	str	r3, [r7, #20]
 80029c0:	4b9a      	ldr	r3, [pc, #616]	; (8002c2c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80029c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029c4:	2202      	movs	r2, #2
 80029c6:	613a      	str	r2, [r7, #16]
 80029c8:	693a      	ldr	r2, [r7, #16]
 80029ca:	fa92 f2a2 	rbit	r2, r2
 80029ce:	60fa      	str	r2, [r7, #12]
  return result;
 80029d0:	68fa      	ldr	r2, [r7, #12]
 80029d2:	fab2 f282 	clz	r2, r2
 80029d6:	b2d2      	uxtb	r2, r2
 80029d8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80029dc:	b2d2      	uxtb	r2, r2
 80029de:	f002 021f 	and.w	r2, r2, #31
 80029e2:	2101      	movs	r1, #1
 80029e4:	fa01 f202 	lsl.w	r2, r1, r2
 80029e8:	4013      	ands	r3, r2
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d0b7      	beq.n	800295e <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 80029ee:	4b8f      	ldr	r3, [pc, #572]	; (8002c2c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80029f0:	6a1b      	ldr	r3, [r3, #32]
 80029f2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	685b      	ldr	r3, [r3, #4]
 80029fa:	498c      	ldr	r1, [pc, #560]	; (8002c2c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80029fc:	4313      	orrs	r3, r2
 80029fe:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002a00:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8002a04:	2b01      	cmp	r3, #1
 8002a06:	d105      	bne.n	8002a14 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002a08:	4b88      	ldr	r3, [pc, #544]	; (8002c2c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002a0a:	69db      	ldr	r3, [r3, #28]
 8002a0c:	4a87      	ldr	r2, [pc, #540]	; (8002c2c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002a0e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002a12:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	f003 0301 	and.w	r3, r3, #1
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d008      	beq.n	8002a32 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002a20:	4b82      	ldr	r3, [pc, #520]	; (8002c2c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002a22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a24:	f023 0203 	bic.w	r2, r3, #3
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	689b      	ldr	r3, [r3, #8]
 8002a2c:	497f      	ldr	r1, [pc, #508]	; (8002c2c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002a2e:	4313      	orrs	r3, r2
 8002a30:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	f003 0302 	and.w	r3, r3, #2
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d008      	beq.n	8002a50 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002a3e:	4b7b      	ldr	r3, [pc, #492]	; (8002c2c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002a40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a42:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	68db      	ldr	r3, [r3, #12]
 8002a4a:	4978      	ldr	r1, [pc, #480]	; (8002c2c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002a4c:	4313      	orrs	r3, r2
 8002a4e:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	f003 0304 	and.w	r3, r3, #4
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d008      	beq.n	8002a6e <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002a5c:	4b73      	ldr	r3, [pc, #460]	; (8002c2c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002a5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a60:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	691b      	ldr	r3, [r3, #16]
 8002a68:	4970      	ldr	r1, [pc, #448]	; (8002c2c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002a6a:	4313      	orrs	r3, r2
 8002a6c:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	f003 0320 	and.w	r3, r3, #32
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d008      	beq.n	8002a8c <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002a7a:	4b6c      	ldr	r3, [pc, #432]	; (8002c2c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002a7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a7e:	f023 0210 	bic.w	r2, r3, #16
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	69db      	ldr	r3, [r3, #28]
 8002a86:	4969      	ldr	r1, [pc, #420]	; (8002c2c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002a88:	4313      	orrs	r3, r2
 8002a8a:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d008      	beq.n	8002aaa <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8002a98:	4b64      	ldr	r3, [pc, #400]	; (8002c2c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002a9a:	685b      	ldr	r3, [r3, #4]
 8002a9c:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002aa4:	4961      	ldr	r1, [pc, #388]	; (8002c2c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002aa6:	4313      	orrs	r3, r2
 8002aa8:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d008      	beq.n	8002ac8 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002ab6:	4b5d      	ldr	r3, [pc, #372]	; (8002c2c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002ab8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002aba:	f023 0220 	bic.w	r2, r3, #32
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	6a1b      	ldr	r3, [r3, #32]
 8002ac2:	495a      	ldr	r1, [pc, #360]	; (8002c2c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002ac4:	4313      	orrs	r3, r2
 8002ac6:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d008      	beq.n	8002ae6 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002ad4:	4b55      	ldr	r3, [pc, #340]	; (8002c2c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002ad6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ad8:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ae0:	4952      	ldr	r1, [pc, #328]	; (8002c2c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002ae2:	4313      	orrs	r3, r2
 8002ae4:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	f003 0308 	and.w	r3, r3, #8
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d008      	beq.n	8002b04 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002af2:	4b4e      	ldr	r3, [pc, #312]	; (8002c2c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002af4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002af6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	695b      	ldr	r3, [r3, #20]
 8002afe:	494b      	ldr	r1, [pc, #300]	; (8002c2c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002b00:	4313      	orrs	r3, r2
 8002b02:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	f003 0310 	and.w	r3, r3, #16
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d008      	beq.n	8002b22 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002b10:	4b46      	ldr	r3, [pc, #280]	; (8002c2c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002b12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b14:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	699b      	ldr	r3, [r3, #24]
 8002b1c:	4943      	ldr	r1, [pc, #268]	; (8002c2c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002b1e:	4313      	orrs	r3, r2
 8002b20:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d008      	beq.n	8002b40 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002b2e:	4b3f      	ldr	r3, [pc, #252]	; (8002c2c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002b30:	685b      	ldr	r3, [r3, #4]
 8002b32:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b3a:	493c      	ldr	r1, [pc, #240]	; (8002c2c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002b3c:	4313      	orrs	r3, r2
 8002b3e:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d008      	beq.n	8002b5e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002b4c:	4b37      	ldr	r3, [pc, #220]	; (8002c2c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002b4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b50:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b58:	4934      	ldr	r1, [pc, #208]	; (8002c2c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002b5a:	4313      	orrs	r3, r2
 8002b5c:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d008      	beq.n	8002b7c <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8002b6a:	4b30      	ldr	r3, [pc, #192]	; (8002c2c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002b6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b6e:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b76:	492d      	ldr	r1, [pc, #180]	; (8002c2c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002b78:	4313      	orrs	r3, r2
 8002b7a:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d008      	beq.n	8002b9a <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8002b88:	4b28      	ldr	r3, [pc, #160]	; (8002c2c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002b8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b8c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b94:	4925      	ldr	r1, [pc, #148]	; (8002c2c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002b96:	4313      	orrs	r3, r2
 8002b98:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d008      	beq.n	8002bb8 <HAL_RCCEx_PeriphCLKConfig+0x370>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8002ba6:	4b21      	ldr	r3, [pc, #132]	; (8002c2c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002ba8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002baa:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bb2:	491e      	ldr	r1, [pc, #120]	; (8002c2c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002bb4:	4313      	orrs	r3, r2
 8002bb6:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d008      	beq.n	8002bd6 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 8002bc4:	4b19      	ldr	r3, [pc, #100]	; (8002c2c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002bc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bc8:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bd0:	4916      	ldr	r1, [pc, #88]	; (8002c2c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002bd2:	4313      	orrs	r3, r2
 8002bd4:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d008      	beq.n	8002bf4 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 8002be2:	4b12      	ldr	r3, [pc, #72]	; (8002c2c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002be4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002be6:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002bee:	490f      	ldr	r1, [pc, #60]	; (8002c2c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002bf0:	4313      	orrs	r3, r2
 8002bf2:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d008      	beq.n	8002c12 <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8002c00:	4b0a      	ldr	r3, [pc, #40]	; (8002c2c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002c02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c04:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c0c:	4907      	ldr	r1, [pc, #28]	; (8002c2c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002c0e:	4313      	orrs	r3, r2
 8002c10:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d00c      	beq.n	8002c38 <HAL_RCCEx_PeriphCLKConfig+0x3f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 8002c1e:	4b03      	ldr	r3, [pc, #12]	; (8002c2c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002c20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c22:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	e002      	b.n	8002c30 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 8002c2a:	bf00      	nop
 8002c2c:	40021000 	.word	0x40021000
 8002c30:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002c32:	4913      	ldr	r1, [pc, #76]	; (8002c80 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002c34:	4313      	orrs	r3, r2
 8002c36:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d008      	beq.n	8002c56 <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8002c44:	4b0e      	ldr	r3, [pc, #56]	; (8002c80 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002c46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c48:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c50:	490b      	ldr	r1, [pc, #44]	; (8002c80 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002c52:	4313      	orrs	r3, r2
 8002c54:	630b      	str	r3, [r1, #48]	; 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d008      	beq.n	8002c74 <HAL_RCCEx_PeriphCLKConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 8002c62:	4b07      	ldr	r3, [pc, #28]	; (8002c80 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002c64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c66:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002c6e:	4904      	ldr	r1, [pc, #16]	; (8002c80 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002c70:	4313      	orrs	r3, r2
 8002c72:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8002c74:	2300      	movs	r3, #0
}
 8002c76:	4618      	mov	r0, r3
 8002c78:	3748      	adds	r7, #72	; 0x48
 8002c7a:	46bd      	mov	sp, r7
 8002c7c:	bd80      	pop	{r7, pc}
 8002c7e:	bf00      	nop
 8002c80:	40021000 	.word	0x40021000

08002c84 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002c84:	b580      	push	{r7, lr}
 8002c86:	b082      	sub	sp, #8
 8002c88:	af00      	add	r7, sp, #0
 8002c8a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d101      	bne.n	8002c96 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002c92:	2301      	movs	r3, #1
 8002c94:	e049      	b.n	8002d2a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c9c:	b2db      	uxtb	r3, r3
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d106      	bne.n	8002cb0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	2200      	movs	r2, #0
 8002ca6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002caa:	6878      	ldr	r0, [r7, #4]
 8002cac:	f000 f841 	bl	8002d32 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	2202      	movs	r2, #2
 8002cb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681a      	ldr	r2, [r3, #0]
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	3304      	adds	r3, #4
 8002cc0:	4619      	mov	r1, r3
 8002cc2:	4610      	mov	r0, r2
 8002cc4:	f000 f9f8 	bl	80030b8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	2201      	movs	r2, #1
 8002ccc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	2201      	movs	r2, #1
 8002cd4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	2201      	movs	r2, #1
 8002cdc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	2201      	movs	r2, #1
 8002ce4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	2201      	movs	r2, #1
 8002cec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	2201      	movs	r2, #1
 8002cf4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	2201      	movs	r2, #1
 8002cfc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	2201      	movs	r2, #1
 8002d04:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	2201      	movs	r2, #1
 8002d0c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	2201      	movs	r2, #1
 8002d14:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	2201      	movs	r2, #1
 8002d1c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	2201      	movs	r2, #1
 8002d24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002d28:	2300      	movs	r3, #0
}
 8002d2a:	4618      	mov	r0, r3
 8002d2c:	3708      	adds	r7, #8
 8002d2e:	46bd      	mov	sp, r7
 8002d30:	bd80      	pop	{r7, pc}

08002d32 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8002d32:	b480      	push	{r7}
 8002d34:	b083      	sub	sp, #12
 8002d36:	af00      	add	r7, sp, #0
 8002d38:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8002d3a:	bf00      	nop
 8002d3c:	370c      	adds	r7, #12
 8002d3e:	46bd      	mov	sp, r7
 8002d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d44:	4770      	bx	lr
	...

08002d48 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002d48:	b480      	push	{r7}
 8002d4a:	b085      	sub	sp, #20
 8002d4c:	af00      	add	r7, sp, #0
 8002d4e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d56:	b2db      	uxtb	r3, r3
 8002d58:	2b01      	cmp	r3, #1
 8002d5a:	d001      	beq.n	8002d60 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002d5c:	2301      	movs	r3, #1
 8002d5e:	e04f      	b.n	8002e00 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	2202      	movs	r2, #2
 8002d64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	68da      	ldr	r2, [r3, #12]
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	f042 0201 	orr.w	r2, r2, #1
 8002d76:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	4a23      	ldr	r2, [pc, #140]	; (8002e0c <HAL_TIM_Base_Start_IT+0xc4>)
 8002d7e:	4293      	cmp	r3, r2
 8002d80:	d01d      	beq.n	8002dbe <HAL_TIM_Base_Start_IT+0x76>
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d8a:	d018      	beq.n	8002dbe <HAL_TIM_Base_Start_IT+0x76>
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	4a1f      	ldr	r2, [pc, #124]	; (8002e10 <HAL_TIM_Base_Start_IT+0xc8>)
 8002d92:	4293      	cmp	r3, r2
 8002d94:	d013      	beq.n	8002dbe <HAL_TIM_Base_Start_IT+0x76>
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	4a1e      	ldr	r2, [pc, #120]	; (8002e14 <HAL_TIM_Base_Start_IT+0xcc>)
 8002d9c:	4293      	cmp	r3, r2
 8002d9e:	d00e      	beq.n	8002dbe <HAL_TIM_Base_Start_IT+0x76>
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	4a1c      	ldr	r2, [pc, #112]	; (8002e18 <HAL_TIM_Base_Start_IT+0xd0>)
 8002da6:	4293      	cmp	r3, r2
 8002da8:	d009      	beq.n	8002dbe <HAL_TIM_Base_Start_IT+0x76>
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	4a1b      	ldr	r2, [pc, #108]	; (8002e1c <HAL_TIM_Base_Start_IT+0xd4>)
 8002db0:	4293      	cmp	r3, r2
 8002db2:	d004      	beq.n	8002dbe <HAL_TIM_Base_Start_IT+0x76>
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	4a19      	ldr	r2, [pc, #100]	; (8002e20 <HAL_TIM_Base_Start_IT+0xd8>)
 8002dba:	4293      	cmp	r3, r2
 8002dbc:	d115      	bne.n	8002dea <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	689a      	ldr	r2, [r3, #8]
 8002dc4:	4b17      	ldr	r3, [pc, #92]	; (8002e24 <HAL_TIM_Base_Start_IT+0xdc>)
 8002dc6:	4013      	ands	r3, r2
 8002dc8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	2b06      	cmp	r3, #6
 8002dce:	d015      	beq.n	8002dfc <HAL_TIM_Base_Start_IT+0xb4>
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002dd6:	d011      	beq.n	8002dfc <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	681a      	ldr	r2, [r3, #0]
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	f042 0201 	orr.w	r2, r2, #1
 8002de6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002de8:	e008      	b.n	8002dfc <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	681a      	ldr	r2, [r3, #0]
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	f042 0201 	orr.w	r2, r2, #1
 8002df8:	601a      	str	r2, [r3, #0]
 8002dfa:	e000      	b.n	8002dfe <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002dfc:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002dfe:	2300      	movs	r3, #0
}
 8002e00:	4618      	mov	r0, r3
 8002e02:	3714      	adds	r7, #20
 8002e04:	46bd      	mov	sp, r7
 8002e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e0a:	4770      	bx	lr
 8002e0c:	40012c00 	.word	0x40012c00
 8002e10:	40000400 	.word	0x40000400
 8002e14:	40000800 	.word	0x40000800
 8002e18:	40013400 	.word	0x40013400
 8002e1c:	40014000 	.word	0x40014000
 8002e20:	40015000 	.word	0x40015000
 8002e24:	00010007 	.word	0x00010007

08002e28 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002e28:	b580      	push	{r7, lr}
 8002e2a:	b082      	sub	sp, #8
 8002e2c:	af00      	add	r7, sp, #0
 8002e2e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	691b      	ldr	r3, [r3, #16]
 8002e36:	f003 0302 	and.w	r3, r3, #2
 8002e3a:	2b02      	cmp	r3, #2
 8002e3c:	d122      	bne.n	8002e84 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	68db      	ldr	r3, [r3, #12]
 8002e44:	f003 0302 	and.w	r3, r3, #2
 8002e48:	2b02      	cmp	r3, #2
 8002e4a:	d11b      	bne.n	8002e84 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	f06f 0202 	mvn.w	r2, #2
 8002e54:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	2201      	movs	r2, #1
 8002e5a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	699b      	ldr	r3, [r3, #24]
 8002e62:	f003 0303 	and.w	r3, r3, #3
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d003      	beq.n	8002e72 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002e6a:	6878      	ldr	r0, [r7, #4]
 8002e6c:	f000 f905 	bl	800307a <HAL_TIM_IC_CaptureCallback>
 8002e70:	e005      	b.n	8002e7e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002e72:	6878      	ldr	r0, [r7, #4]
 8002e74:	f000 f8f7 	bl	8003066 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002e78:	6878      	ldr	r0, [r7, #4]
 8002e7a:	f000 f908 	bl	800308e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	2200      	movs	r2, #0
 8002e82:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	691b      	ldr	r3, [r3, #16]
 8002e8a:	f003 0304 	and.w	r3, r3, #4
 8002e8e:	2b04      	cmp	r3, #4
 8002e90:	d122      	bne.n	8002ed8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	68db      	ldr	r3, [r3, #12]
 8002e98:	f003 0304 	and.w	r3, r3, #4
 8002e9c:	2b04      	cmp	r3, #4
 8002e9e:	d11b      	bne.n	8002ed8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	f06f 0204 	mvn.w	r2, #4
 8002ea8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	2202      	movs	r2, #2
 8002eae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	699b      	ldr	r3, [r3, #24]
 8002eb6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d003      	beq.n	8002ec6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002ebe:	6878      	ldr	r0, [r7, #4]
 8002ec0:	f000 f8db 	bl	800307a <HAL_TIM_IC_CaptureCallback>
 8002ec4:	e005      	b.n	8002ed2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002ec6:	6878      	ldr	r0, [r7, #4]
 8002ec8:	f000 f8cd 	bl	8003066 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ecc:	6878      	ldr	r0, [r7, #4]
 8002ece:	f000 f8de 	bl	800308e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	2200      	movs	r2, #0
 8002ed6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	691b      	ldr	r3, [r3, #16]
 8002ede:	f003 0308 	and.w	r3, r3, #8
 8002ee2:	2b08      	cmp	r3, #8
 8002ee4:	d122      	bne.n	8002f2c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	68db      	ldr	r3, [r3, #12]
 8002eec:	f003 0308 	and.w	r3, r3, #8
 8002ef0:	2b08      	cmp	r3, #8
 8002ef2:	d11b      	bne.n	8002f2c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	f06f 0208 	mvn.w	r2, #8
 8002efc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	2204      	movs	r2, #4
 8002f02:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	69db      	ldr	r3, [r3, #28]
 8002f0a:	f003 0303 	and.w	r3, r3, #3
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d003      	beq.n	8002f1a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002f12:	6878      	ldr	r0, [r7, #4]
 8002f14:	f000 f8b1 	bl	800307a <HAL_TIM_IC_CaptureCallback>
 8002f18:	e005      	b.n	8002f26 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002f1a:	6878      	ldr	r0, [r7, #4]
 8002f1c:	f000 f8a3 	bl	8003066 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002f20:	6878      	ldr	r0, [r7, #4]
 8002f22:	f000 f8b4 	bl	800308e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	2200      	movs	r2, #0
 8002f2a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	691b      	ldr	r3, [r3, #16]
 8002f32:	f003 0310 	and.w	r3, r3, #16
 8002f36:	2b10      	cmp	r3, #16
 8002f38:	d122      	bne.n	8002f80 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	68db      	ldr	r3, [r3, #12]
 8002f40:	f003 0310 	and.w	r3, r3, #16
 8002f44:	2b10      	cmp	r3, #16
 8002f46:	d11b      	bne.n	8002f80 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	f06f 0210 	mvn.w	r2, #16
 8002f50:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	2208      	movs	r2, #8
 8002f56:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	69db      	ldr	r3, [r3, #28]
 8002f5e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d003      	beq.n	8002f6e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002f66:	6878      	ldr	r0, [r7, #4]
 8002f68:	f000 f887 	bl	800307a <HAL_TIM_IC_CaptureCallback>
 8002f6c:	e005      	b.n	8002f7a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002f6e:	6878      	ldr	r0, [r7, #4]
 8002f70:	f000 f879 	bl	8003066 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002f74:	6878      	ldr	r0, [r7, #4]
 8002f76:	f000 f88a 	bl	800308e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	2200      	movs	r2, #0
 8002f7e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	691b      	ldr	r3, [r3, #16]
 8002f86:	f003 0301 	and.w	r3, r3, #1
 8002f8a:	2b01      	cmp	r3, #1
 8002f8c:	d10e      	bne.n	8002fac <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	68db      	ldr	r3, [r3, #12]
 8002f94:	f003 0301 	and.w	r3, r3, #1
 8002f98:	2b01      	cmp	r3, #1
 8002f9a:	d107      	bne.n	8002fac <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	f06f 0201 	mvn.w	r2, #1
 8002fa4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002fa6:	6878      	ldr	r0, [r7, #4]
 8002fa8:	f7fd ff96 	bl	8000ed8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	691b      	ldr	r3, [r3, #16]
 8002fb2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002fb6:	2b80      	cmp	r3, #128	; 0x80
 8002fb8:	d10e      	bne.n	8002fd8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	68db      	ldr	r3, [r3, #12]
 8002fc0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002fc4:	2b80      	cmp	r3, #128	; 0x80
 8002fc6:	d107      	bne.n	8002fd8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002fd0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002fd2:	6878      	ldr	r0, [r7, #4]
 8002fd4:	f000 f918 	bl	8003208 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	691b      	ldr	r3, [r3, #16]
 8002fde:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fe2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002fe6:	d10e      	bne.n	8003006 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	68db      	ldr	r3, [r3, #12]
 8002fee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ff2:	2b80      	cmp	r3, #128	; 0x80
 8002ff4:	d107      	bne.n	8003006 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8002ffe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003000:	6878      	ldr	r0, [r7, #4]
 8003002:	f000 f90b 	bl	800321c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	691b      	ldr	r3, [r3, #16]
 800300c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003010:	2b40      	cmp	r3, #64	; 0x40
 8003012:	d10e      	bne.n	8003032 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	68db      	ldr	r3, [r3, #12]
 800301a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800301e:	2b40      	cmp	r3, #64	; 0x40
 8003020:	d107      	bne.n	8003032 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800302a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800302c:	6878      	ldr	r0, [r7, #4]
 800302e:	f000 f838 	bl	80030a2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	691b      	ldr	r3, [r3, #16]
 8003038:	f003 0320 	and.w	r3, r3, #32
 800303c:	2b20      	cmp	r3, #32
 800303e:	d10e      	bne.n	800305e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	68db      	ldr	r3, [r3, #12]
 8003046:	f003 0320 	and.w	r3, r3, #32
 800304a:	2b20      	cmp	r3, #32
 800304c:	d107      	bne.n	800305e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	f06f 0220 	mvn.w	r2, #32
 8003056:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003058:	6878      	ldr	r0, [r7, #4]
 800305a:	f000 f8cb 	bl	80031f4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800305e:	bf00      	nop
 8003060:	3708      	adds	r7, #8
 8003062:	46bd      	mov	sp, r7
 8003064:	bd80      	pop	{r7, pc}

08003066 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003066:	b480      	push	{r7}
 8003068:	b083      	sub	sp, #12
 800306a:	af00      	add	r7, sp, #0
 800306c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800306e:	bf00      	nop
 8003070:	370c      	adds	r7, #12
 8003072:	46bd      	mov	sp, r7
 8003074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003078:	4770      	bx	lr

0800307a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800307a:	b480      	push	{r7}
 800307c:	b083      	sub	sp, #12
 800307e:	af00      	add	r7, sp, #0
 8003080:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003082:	bf00      	nop
 8003084:	370c      	adds	r7, #12
 8003086:	46bd      	mov	sp, r7
 8003088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800308c:	4770      	bx	lr

0800308e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800308e:	b480      	push	{r7}
 8003090:	b083      	sub	sp, #12
 8003092:	af00      	add	r7, sp, #0
 8003094:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003096:	bf00      	nop
 8003098:	370c      	adds	r7, #12
 800309a:	46bd      	mov	sp, r7
 800309c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a0:	4770      	bx	lr

080030a2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80030a2:	b480      	push	{r7}
 80030a4:	b083      	sub	sp, #12
 80030a6:	af00      	add	r7, sp, #0
 80030a8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80030aa:	bf00      	nop
 80030ac:	370c      	adds	r7, #12
 80030ae:	46bd      	mov	sp, r7
 80030b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b4:	4770      	bx	lr
	...

080030b8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80030b8:	b480      	push	{r7}
 80030ba:	b085      	sub	sp, #20
 80030bc:	af00      	add	r7, sp, #0
 80030be:	6078      	str	r0, [r7, #4]
 80030c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	4a42      	ldr	r2, [pc, #264]	; (80031d4 <TIM_Base_SetConfig+0x11c>)
 80030cc:	4293      	cmp	r3, r2
 80030ce:	d013      	beq.n	80030f8 <TIM_Base_SetConfig+0x40>
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80030d6:	d00f      	beq.n	80030f8 <TIM_Base_SetConfig+0x40>
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	4a3f      	ldr	r2, [pc, #252]	; (80031d8 <TIM_Base_SetConfig+0x120>)
 80030dc:	4293      	cmp	r3, r2
 80030de:	d00b      	beq.n	80030f8 <TIM_Base_SetConfig+0x40>
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	4a3e      	ldr	r2, [pc, #248]	; (80031dc <TIM_Base_SetConfig+0x124>)
 80030e4:	4293      	cmp	r3, r2
 80030e6:	d007      	beq.n	80030f8 <TIM_Base_SetConfig+0x40>
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	4a3d      	ldr	r2, [pc, #244]	; (80031e0 <TIM_Base_SetConfig+0x128>)
 80030ec:	4293      	cmp	r3, r2
 80030ee:	d003      	beq.n	80030f8 <TIM_Base_SetConfig+0x40>
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	4a3c      	ldr	r2, [pc, #240]	; (80031e4 <TIM_Base_SetConfig+0x12c>)
 80030f4:	4293      	cmp	r3, r2
 80030f6:	d108      	bne.n	800310a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80030fe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003100:	683b      	ldr	r3, [r7, #0]
 8003102:	685b      	ldr	r3, [r3, #4]
 8003104:	68fa      	ldr	r2, [r7, #12]
 8003106:	4313      	orrs	r3, r2
 8003108:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	4a31      	ldr	r2, [pc, #196]	; (80031d4 <TIM_Base_SetConfig+0x11c>)
 800310e:	4293      	cmp	r3, r2
 8003110:	d01f      	beq.n	8003152 <TIM_Base_SetConfig+0x9a>
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003118:	d01b      	beq.n	8003152 <TIM_Base_SetConfig+0x9a>
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	4a2e      	ldr	r2, [pc, #184]	; (80031d8 <TIM_Base_SetConfig+0x120>)
 800311e:	4293      	cmp	r3, r2
 8003120:	d017      	beq.n	8003152 <TIM_Base_SetConfig+0x9a>
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	4a2d      	ldr	r2, [pc, #180]	; (80031dc <TIM_Base_SetConfig+0x124>)
 8003126:	4293      	cmp	r3, r2
 8003128:	d013      	beq.n	8003152 <TIM_Base_SetConfig+0x9a>
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	4a2c      	ldr	r2, [pc, #176]	; (80031e0 <TIM_Base_SetConfig+0x128>)
 800312e:	4293      	cmp	r3, r2
 8003130:	d00f      	beq.n	8003152 <TIM_Base_SetConfig+0x9a>
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	4a2c      	ldr	r2, [pc, #176]	; (80031e8 <TIM_Base_SetConfig+0x130>)
 8003136:	4293      	cmp	r3, r2
 8003138:	d00b      	beq.n	8003152 <TIM_Base_SetConfig+0x9a>
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	4a2b      	ldr	r2, [pc, #172]	; (80031ec <TIM_Base_SetConfig+0x134>)
 800313e:	4293      	cmp	r3, r2
 8003140:	d007      	beq.n	8003152 <TIM_Base_SetConfig+0x9a>
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	4a2a      	ldr	r2, [pc, #168]	; (80031f0 <TIM_Base_SetConfig+0x138>)
 8003146:	4293      	cmp	r3, r2
 8003148:	d003      	beq.n	8003152 <TIM_Base_SetConfig+0x9a>
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	4a25      	ldr	r2, [pc, #148]	; (80031e4 <TIM_Base_SetConfig+0x12c>)
 800314e:	4293      	cmp	r3, r2
 8003150:	d108      	bne.n	8003164 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003158:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800315a:	683b      	ldr	r3, [r7, #0]
 800315c:	68db      	ldr	r3, [r3, #12]
 800315e:	68fa      	ldr	r2, [r7, #12]
 8003160:	4313      	orrs	r3, r2
 8003162:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800316a:	683b      	ldr	r3, [r7, #0]
 800316c:	695b      	ldr	r3, [r3, #20]
 800316e:	4313      	orrs	r3, r2
 8003170:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	68fa      	ldr	r2, [r7, #12]
 8003176:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003178:	683b      	ldr	r3, [r7, #0]
 800317a:	689a      	ldr	r2, [r3, #8]
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003180:	683b      	ldr	r3, [r7, #0]
 8003182:	681a      	ldr	r2, [r3, #0]
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	4a12      	ldr	r2, [pc, #72]	; (80031d4 <TIM_Base_SetConfig+0x11c>)
 800318c:	4293      	cmp	r3, r2
 800318e:	d013      	beq.n	80031b8 <TIM_Base_SetConfig+0x100>
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	4a13      	ldr	r2, [pc, #76]	; (80031e0 <TIM_Base_SetConfig+0x128>)
 8003194:	4293      	cmp	r3, r2
 8003196:	d00f      	beq.n	80031b8 <TIM_Base_SetConfig+0x100>
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	4a13      	ldr	r2, [pc, #76]	; (80031e8 <TIM_Base_SetConfig+0x130>)
 800319c:	4293      	cmp	r3, r2
 800319e:	d00b      	beq.n	80031b8 <TIM_Base_SetConfig+0x100>
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	4a12      	ldr	r2, [pc, #72]	; (80031ec <TIM_Base_SetConfig+0x134>)
 80031a4:	4293      	cmp	r3, r2
 80031a6:	d007      	beq.n	80031b8 <TIM_Base_SetConfig+0x100>
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	4a11      	ldr	r2, [pc, #68]	; (80031f0 <TIM_Base_SetConfig+0x138>)
 80031ac:	4293      	cmp	r3, r2
 80031ae:	d003      	beq.n	80031b8 <TIM_Base_SetConfig+0x100>
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	4a0c      	ldr	r2, [pc, #48]	; (80031e4 <TIM_Base_SetConfig+0x12c>)
 80031b4:	4293      	cmp	r3, r2
 80031b6:	d103      	bne.n	80031c0 <TIM_Base_SetConfig+0x108>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80031b8:	683b      	ldr	r3, [r7, #0]
 80031ba:	691a      	ldr	r2, [r3, #16]
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	2201      	movs	r2, #1
 80031c4:	615a      	str	r2, [r3, #20]
}
 80031c6:	bf00      	nop
 80031c8:	3714      	adds	r7, #20
 80031ca:	46bd      	mov	sp, r7
 80031cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d0:	4770      	bx	lr
 80031d2:	bf00      	nop
 80031d4:	40012c00 	.word	0x40012c00
 80031d8:	40000400 	.word	0x40000400
 80031dc:	40000800 	.word	0x40000800
 80031e0:	40013400 	.word	0x40013400
 80031e4:	40015000 	.word	0x40015000
 80031e8:	40014000 	.word	0x40014000
 80031ec:	40014400 	.word	0x40014400
 80031f0:	40014800 	.word	0x40014800

080031f4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80031f4:	b480      	push	{r7}
 80031f6:	b083      	sub	sp, #12
 80031f8:	af00      	add	r7, sp, #0
 80031fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80031fc:	bf00      	nop
 80031fe:	370c      	adds	r7, #12
 8003200:	46bd      	mov	sp, r7
 8003202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003206:	4770      	bx	lr

08003208 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003208:	b480      	push	{r7}
 800320a:	b083      	sub	sp, #12
 800320c:	af00      	add	r7, sp, #0
 800320e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003210:	bf00      	nop
 8003212:	370c      	adds	r7, #12
 8003214:	46bd      	mov	sp, r7
 8003216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800321a:	4770      	bx	lr

0800321c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800321c:	b480      	push	{r7}
 800321e:	b083      	sub	sp, #12
 8003220:	af00      	add	r7, sp, #0
 8003222:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003224:	bf00      	nop
 8003226:	370c      	adds	r7, #12
 8003228:	46bd      	mov	sp, r7
 800322a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800322e:	4770      	bx	lr

08003230 <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8003230:	b480      	push	{r7}
 8003232:	b085      	sub	sp, #20
 8003234:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003236:	f3ef 8305 	mrs	r3, IPSR
 800323a:	60bb      	str	r3, [r7, #8]
  return(result);
 800323c:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800323e:	2b00      	cmp	r3, #0
 8003240:	d10f      	bne.n	8003262 <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003242:	f3ef 8310 	mrs	r3, PRIMASK
 8003246:	607b      	str	r3, [r7, #4]
  return(result);
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	2b00      	cmp	r3, #0
 800324c:	d109      	bne.n	8003262 <osKernelInitialize+0x32>
 800324e:	4b11      	ldr	r3, [pc, #68]	; (8003294 <osKernelInitialize+0x64>)
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	2b02      	cmp	r3, #2
 8003254:	d109      	bne.n	800326a <osKernelInitialize+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003256:	f3ef 8311 	mrs	r3, BASEPRI
 800325a:	603b      	str	r3, [r7, #0]
  return(result);
 800325c:	683b      	ldr	r3, [r7, #0]
 800325e:	2b00      	cmp	r3, #0
 8003260:	d003      	beq.n	800326a <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8003262:	f06f 0305 	mvn.w	r3, #5
 8003266:	60fb      	str	r3, [r7, #12]
 8003268:	e00c      	b.n	8003284 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 800326a:	4b0a      	ldr	r3, [pc, #40]	; (8003294 <osKernelInitialize+0x64>)
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	2b00      	cmp	r3, #0
 8003270:	d105      	bne.n	800327e <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 8003272:	4b08      	ldr	r3, [pc, #32]	; (8003294 <osKernelInitialize+0x64>)
 8003274:	2201      	movs	r2, #1
 8003276:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8003278:	2300      	movs	r3, #0
 800327a:	60fb      	str	r3, [r7, #12]
 800327c:	e002      	b.n	8003284 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 800327e:	f04f 33ff 	mov.w	r3, #4294967295
 8003282:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8003284:	68fb      	ldr	r3, [r7, #12]
}
 8003286:	4618      	mov	r0, r3
 8003288:	3714      	adds	r7, #20
 800328a:	46bd      	mov	sp, r7
 800328c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003290:	4770      	bx	lr
 8003292:	bf00      	nop
 8003294:	20000198 	.word	0x20000198

08003298 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8003298:	b580      	push	{r7, lr}
 800329a:	b084      	sub	sp, #16
 800329c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800329e:	f3ef 8305 	mrs	r3, IPSR
 80032a2:	60bb      	str	r3, [r7, #8]
  return(result);
 80032a4:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d10f      	bne.n	80032ca <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80032aa:	f3ef 8310 	mrs	r3, PRIMASK
 80032ae:	607b      	str	r3, [r7, #4]
  return(result);
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d109      	bne.n	80032ca <osKernelStart+0x32>
 80032b6:	4b11      	ldr	r3, [pc, #68]	; (80032fc <osKernelStart+0x64>)
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	2b02      	cmp	r3, #2
 80032bc:	d109      	bne.n	80032d2 <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80032be:	f3ef 8311 	mrs	r3, BASEPRI
 80032c2:	603b      	str	r3, [r7, #0]
  return(result);
 80032c4:	683b      	ldr	r3, [r7, #0]
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d003      	beq.n	80032d2 <osKernelStart+0x3a>
    stat = osErrorISR;
 80032ca:	f06f 0305 	mvn.w	r3, #5
 80032ce:	60fb      	str	r3, [r7, #12]
 80032d0:	e00e      	b.n	80032f0 <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 80032d2:	4b0a      	ldr	r3, [pc, #40]	; (80032fc <osKernelStart+0x64>)
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	2b01      	cmp	r3, #1
 80032d8:	d107      	bne.n	80032ea <osKernelStart+0x52>
      KernelState = osKernelRunning;
 80032da:	4b08      	ldr	r3, [pc, #32]	; (80032fc <osKernelStart+0x64>)
 80032dc:	2202      	movs	r2, #2
 80032de:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 80032e0:	f001 f9e0 	bl	80046a4 <vTaskStartScheduler>
      stat = osOK;
 80032e4:	2300      	movs	r3, #0
 80032e6:	60fb      	str	r3, [r7, #12]
 80032e8:	e002      	b.n	80032f0 <osKernelStart+0x58>
    } else {
      stat = osError;
 80032ea:	f04f 33ff 	mov.w	r3, #4294967295
 80032ee:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 80032f0:	68fb      	ldr	r3, [r7, #12]
}
 80032f2:	4618      	mov	r0, r3
 80032f4:	3710      	adds	r7, #16
 80032f6:	46bd      	mov	sp, r7
 80032f8:	bd80      	pop	{r7, pc}
 80032fa:	bf00      	nop
 80032fc:	20000198 	.word	0x20000198

08003300 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8003300:	b480      	push	{r7}
 8003302:	b085      	sub	sp, #20
 8003304:	af00      	add	r7, sp, #0
 8003306:	60f8      	str	r0, [r7, #12]
 8003308:	60b9      	str	r1, [r7, #8]
 800330a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	4a07      	ldr	r2, [pc, #28]	; (800332c <vApplicationGetIdleTaskMemory+0x2c>)
 8003310:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8003312:	68bb      	ldr	r3, [r7, #8]
 8003314:	4a06      	ldr	r2, [pc, #24]	; (8003330 <vApplicationGetIdleTaskMemory+0x30>)
 8003316:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	2280      	movs	r2, #128	; 0x80
 800331c:	601a      	str	r2, [r3, #0]
}
 800331e:	bf00      	nop
 8003320:	3714      	adds	r7, #20
 8003322:	46bd      	mov	sp, r7
 8003324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003328:	4770      	bx	lr
 800332a:	bf00      	nop
 800332c:	2000019c 	.word	0x2000019c
 8003330:	20000244 	.word	0x20000244

08003334 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8003334:	b480      	push	{r7}
 8003336:	b085      	sub	sp, #20
 8003338:	af00      	add	r7, sp, #0
 800333a:	60f8      	str	r0, [r7, #12]
 800333c:	60b9      	str	r1, [r7, #8]
 800333e:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	4a07      	ldr	r2, [pc, #28]	; (8003360 <vApplicationGetTimerTaskMemory+0x2c>)
 8003344:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8003346:	68bb      	ldr	r3, [r7, #8]
 8003348:	4a06      	ldr	r2, [pc, #24]	; (8003364 <vApplicationGetTimerTaskMemory+0x30>)
 800334a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003352:	601a      	str	r2, [r3, #0]
}
 8003354:	bf00      	nop
 8003356:	3714      	adds	r7, #20
 8003358:	46bd      	mov	sp, r7
 800335a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800335e:	4770      	bx	lr
 8003360:	20000444 	.word	0x20000444
 8003364:	200004ec 	.word	0x200004ec

08003368 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003368:	b480      	push	{r7}
 800336a:	b083      	sub	sp, #12
 800336c:	af00      	add	r7, sp, #0
 800336e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	f103 0208 	add.w	r2, r3, #8
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	f04f 32ff 	mov.w	r2, #4294967295
 8003380:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	f103 0208 	add.w	r2, r3, #8
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	f103 0208 	add.w	r2, r3, #8
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	2200      	movs	r2, #0
 800339a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800339c:	bf00      	nop
 800339e:	370c      	adds	r7, #12
 80033a0:	46bd      	mov	sp, r7
 80033a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a6:	4770      	bx	lr

080033a8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80033a8:	b480      	push	{r7}
 80033aa:	b083      	sub	sp, #12
 80033ac:	af00      	add	r7, sp, #0
 80033ae:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	2200      	movs	r2, #0
 80033b4:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80033b6:	bf00      	nop
 80033b8:	370c      	adds	r7, #12
 80033ba:	46bd      	mov	sp, r7
 80033bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c0:	4770      	bx	lr

080033c2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80033c2:	b480      	push	{r7}
 80033c4:	b085      	sub	sp, #20
 80033c6:	af00      	add	r7, sp, #0
 80033c8:	6078      	str	r0, [r7, #4]
 80033ca:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	685b      	ldr	r3, [r3, #4]
 80033d0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80033d2:	683b      	ldr	r3, [r7, #0]
 80033d4:	68fa      	ldr	r2, [r7, #12]
 80033d6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	689a      	ldr	r2, [r3, #8]
 80033dc:	683b      	ldr	r3, [r7, #0]
 80033de:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	689b      	ldr	r3, [r3, #8]
 80033e4:	683a      	ldr	r2, [r7, #0]
 80033e6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	683a      	ldr	r2, [r7, #0]
 80033ec:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80033ee:	683b      	ldr	r3, [r7, #0]
 80033f0:	687a      	ldr	r2, [r7, #4]
 80033f2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	1c5a      	adds	r2, r3, #1
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	601a      	str	r2, [r3, #0]
}
 80033fe:	bf00      	nop
 8003400:	3714      	adds	r7, #20
 8003402:	46bd      	mov	sp, r7
 8003404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003408:	4770      	bx	lr

0800340a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800340a:	b480      	push	{r7}
 800340c:	b085      	sub	sp, #20
 800340e:	af00      	add	r7, sp, #0
 8003410:	6078      	str	r0, [r7, #4]
 8003412:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003414:	683b      	ldr	r3, [r7, #0]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800341a:	68bb      	ldr	r3, [r7, #8]
 800341c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003420:	d103      	bne.n	800342a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	691b      	ldr	r3, [r3, #16]
 8003426:	60fb      	str	r3, [r7, #12]
 8003428:	e00c      	b.n	8003444 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	3308      	adds	r3, #8
 800342e:	60fb      	str	r3, [r7, #12]
 8003430:	e002      	b.n	8003438 <vListInsert+0x2e>
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	685b      	ldr	r3, [r3, #4]
 8003436:	60fb      	str	r3, [r7, #12]
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	685b      	ldr	r3, [r3, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	68ba      	ldr	r2, [r7, #8]
 8003440:	429a      	cmp	r2, r3
 8003442:	d2f6      	bcs.n	8003432 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	685a      	ldr	r2, [r3, #4]
 8003448:	683b      	ldr	r3, [r7, #0]
 800344a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800344c:	683b      	ldr	r3, [r7, #0]
 800344e:	685b      	ldr	r3, [r3, #4]
 8003450:	683a      	ldr	r2, [r7, #0]
 8003452:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003454:	683b      	ldr	r3, [r7, #0]
 8003456:	68fa      	ldr	r2, [r7, #12]
 8003458:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	683a      	ldr	r2, [r7, #0]
 800345e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8003460:	683b      	ldr	r3, [r7, #0]
 8003462:	687a      	ldr	r2, [r7, #4]
 8003464:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	1c5a      	adds	r2, r3, #1
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	601a      	str	r2, [r3, #0]
}
 8003470:	bf00      	nop
 8003472:	3714      	adds	r7, #20
 8003474:	46bd      	mov	sp, r7
 8003476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800347a:	4770      	bx	lr

0800347c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800347c:	b480      	push	{r7}
 800347e:	b085      	sub	sp, #20
 8003480:	af00      	add	r7, sp, #0
 8003482:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	691b      	ldr	r3, [r3, #16]
 8003488:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	685b      	ldr	r3, [r3, #4]
 800348e:	687a      	ldr	r2, [r7, #4]
 8003490:	6892      	ldr	r2, [r2, #8]
 8003492:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	689b      	ldr	r3, [r3, #8]
 8003498:	687a      	ldr	r2, [r7, #4]
 800349a:	6852      	ldr	r2, [r2, #4]
 800349c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	685b      	ldr	r3, [r3, #4]
 80034a2:	687a      	ldr	r2, [r7, #4]
 80034a4:	429a      	cmp	r2, r3
 80034a6:	d103      	bne.n	80034b0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	689a      	ldr	r2, [r3, #8]
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	2200      	movs	r2, #0
 80034b4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	1e5a      	subs	r2, r3, #1
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	681b      	ldr	r3, [r3, #0]
}
 80034c4:	4618      	mov	r0, r3
 80034c6:	3714      	adds	r7, #20
 80034c8:	46bd      	mov	sp, r7
 80034ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ce:	4770      	bx	lr

080034d0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80034d0:	b580      	push	{r7, lr}
 80034d2:	b084      	sub	sp, #16
 80034d4:	af00      	add	r7, sp, #0
 80034d6:	6078      	str	r0, [r7, #4]
 80034d8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d10a      	bne.n	80034fa <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80034e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034e8:	f383 8811 	msr	BASEPRI, r3
 80034ec:	f3bf 8f6f 	isb	sy
 80034f0:	f3bf 8f4f 	dsb	sy
 80034f4:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80034f6:	bf00      	nop
 80034f8:	e7fe      	b.n	80034f8 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80034fa:	f002 fbb3 	bl	8005c64 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	681a      	ldr	r2, [r3, #0]
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003506:	68f9      	ldr	r1, [r7, #12]
 8003508:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800350a:	fb01 f303 	mul.w	r3, r1, r3
 800350e:	441a      	add	r2, r3
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	2200      	movs	r2, #0
 8003518:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	681a      	ldr	r2, [r3, #0]
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	681a      	ldr	r2, [r3, #0]
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800352a:	3b01      	subs	r3, #1
 800352c:	68f9      	ldr	r1, [r7, #12]
 800352e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003530:	fb01 f303 	mul.w	r3, r1, r3
 8003534:	441a      	add	r2, r3
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	22ff      	movs	r2, #255	; 0xff
 800353e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	22ff      	movs	r2, #255	; 0xff
 8003546:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800354a:	683b      	ldr	r3, [r7, #0]
 800354c:	2b00      	cmp	r3, #0
 800354e:	d114      	bne.n	800357a <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	691b      	ldr	r3, [r3, #16]
 8003554:	2b00      	cmp	r3, #0
 8003556:	d01a      	beq.n	800358e <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	3310      	adds	r3, #16
 800355c:	4618      	mov	r0, r3
 800355e:	f001 fb3f 	bl	8004be0 <xTaskRemoveFromEventList>
 8003562:	4603      	mov	r3, r0
 8003564:	2b00      	cmp	r3, #0
 8003566:	d012      	beq.n	800358e <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8003568:	4b0c      	ldr	r3, [pc, #48]	; (800359c <xQueueGenericReset+0xcc>)
 800356a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800356e:	601a      	str	r2, [r3, #0]
 8003570:	f3bf 8f4f 	dsb	sy
 8003574:	f3bf 8f6f 	isb	sy
 8003578:	e009      	b.n	800358e <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	3310      	adds	r3, #16
 800357e:	4618      	mov	r0, r3
 8003580:	f7ff fef2 	bl	8003368 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	3324      	adds	r3, #36	; 0x24
 8003588:	4618      	mov	r0, r3
 800358a:	f7ff feed 	bl	8003368 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800358e:	f002 fb99 	bl	8005cc4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8003592:	2301      	movs	r3, #1
}
 8003594:	4618      	mov	r0, r3
 8003596:	3710      	adds	r7, #16
 8003598:	46bd      	mov	sp, r7
 800359a:	bd80      	pop	{r7, pc}
 800359c:	e000ed04 	.word	0xe000ed04

080035a0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80035a0:	b580      	push	{r7, lr}
 80035a2:	b08e      	sub	sp, #56	; 0x38
 80035a4:	af02      	add	r7, sp, #8
 80035a6:	60f8      	str	r0, [r7, #12]
 80035a8:	60b9      	str	r1, [r7, #8]
 80035aa:	607a      	str	r2, [r7, #4]
 80035ac:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d10a      	bne.n	80035ca <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 80035b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035b8:	f383 8811 	msr	BASEPRI, r3
 80035bc:	f3bf 8f6f 	isb	sy
 80035c0:	f3bf 8f4f 	dsb	sy
 80035c4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80035c6:	bf00      	nop
 80035c8:	e7fe      	b.n	80035c8 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80035ca:	683b      	ldr	r3, [r7, #0]
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d10a      	bne.n	80035e6 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 80035d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035d4:	f383 8811 	msr	BASEPRI, r3
 80035d8:	f3bf 8f6f 	isb	sy
 80035dc:	f3bf 8f4f 	dsb	sy
 80035e0:	627b      	str	r3, [r7, #36]	; 0x24
}
 80035e2:	bf00      	nop
 80035e4:	e7fe      	b.n	80035e4 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d002      	beq.n	80035f2 <xQueueGenericCreateStatic+0x52>
 80035ec:	68bb      	ldr	r3, [r7, #8]
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d001      	beq.n	80035f6 <xQueueGenericCreateStatic+0x56>
 80035f2:	2301      	movs	r3, #1
 80035f4:	e000      	b.n	80035f8 <xQueueGenericCreateStatic+0x58>
 80035f6:	2300      	movs	r3, #0
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d10a      	bne.n	8003612 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 80035fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003600:	f383 8811 	msr	BASEPRI, r3
 8003604:	f3bf 8f6f 	isb	sy
 8003608:	f3bf 8f4f 	dsb	sy
 800360c:	623b      	str	r3, [r7, #32]
}
 800360e:	bf00      	nop
 8003610:	e7fe      	b.n	8003610 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	2b00      	cmp	r3, #0
 8003616:	d102      	bne.n	800361e <xQueueGenericCreateStatic+0x7e>
 8003618:	68bb      	ldr	r3, [r7, #8]
 800361a:	2b00      	cmp	r3, #0
 800361c:	d101      	bne.n	8003622 <xQueueGenericCreateStatic+0x82>
 800361e:	2301      	movs	r3, #1
 8003620:	e000      	b.n	8003624 <xQueueGenericCreateStatic+0x84>
 8003622:	2300      	movs	r3, #0
 8003624:	2b00      	cmp	r3, #0
 8003626:	d10a      	bne.n	800363e <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8003628:	f04f 0350 	mov.w	r3, #80	; 0x50
 800362c:	f383 8811 	msr	BASEPRI, r3
 8003630:	f3bf 8f6f 	isb	sy
 8003634:	f3bf 8f4f 	dsb	sy
 8003638:	61fb      	str	r3, [r7, #28]
}
 800363a:	bf00      	nop
 800363c:	e7fe      	b.n	800363c <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800363e:	2354      	movs	r3, #84	; 0x54
 8003640:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8003642:	697b      	ldr	r3, [r7, #20]
 8003644:	2b54      	cmp	r3, #84	; 0x54
 8003646:	d00a      	beq.n	800365e <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8003648:	f04f 0350 	mov.w	r3, #80	; 0x50
 800364c:	f383 8811 	msr	BASEPRI, r3
 8003650:	f3bf 8f6f 	isb	sy
 8003654:	f3bf 8f4f 	dsb	sy
 8003658:	61bb      	str	r3, [r7, #24]
}
 800365a:	bf00      	nop
 800365c:	e7fe      	b.n	800365c <xQueueGenericCreateStatic+0xbc>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800365e:	683b      	ldr	r3, [r7, #0]
 8003660:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8003662:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003664:	2b00      	cmp	r3, #0
 8003666:	d00d      	beq.n	8003684 <xQueueGenericCreateStatic+0xe4>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8003668:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800366a:	2201      	movs	r2, #1
 800366c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003670:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8003674:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003676:	9300      	str	r3, [sp, #0]
 8003678:	4613      	mov	r3, r2
 800367a:	687a      	ldr	r2, [r7, #4]
 800367c:	68b9      	ldr	r1, [r7, #8]
 800367e:	68f8      	ldr	r0, [r7, #12]
 8003680:	f000 f843 	bl	800370a <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8003684:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8003686:	4618      	mov	r0, r3
 8003688:	3730      	adds	r7, #48	; 0x30
 800368a:	46bd      	mov	sp, r7
 800368c:	bd80      	pop	{r7, pc}

0800368e <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800368e:	b580      	push	{r7, lr}
 8003690:	b08a      	sub	sp, #40	; 0x28
 8003692:	af02      	add	r7, sp, #8
 8003694:	60f8      	str	r0, [r7, #12]
 8003696:	60b9      	str	r1, [r7, #8]
 8003698:	4613      	mov	r3, r2
 800369a:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d10a      	bne.n	80036b8 <xQueueGenericCreate+0x2a>
	__asm volatile
 80036a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036a6:	f383 8811 	msr	BASEPRI, r3
 80036aa:	f3bf 8f6f 	isb	sy
 80036ae:	f3bf 8f4f 	dsb	sy
 80036b2:	613b      	str	r3, [r7, #16]
}
 80036b4:	bf00      	nop
 80036b6:	e7fe      	b.n	80036b6 <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 80036b8:	68bb      	ldr	r3, [r7, #8]
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d102      	bne.n	80036c4 <xQueueGenericCreate+0x36>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 80036be:	2300      	movs	r3, #0
 80036c0:	61fb      	str	r3, [r7, #28]
 80036c2:	e004      	b.n	80036ce <xQueueGenericCreate+0x40>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	68ba      	ldr	r2, [r7, #8]
 80036c8:	fb02 f303 	mul.w	r3, r2, r3
 80036cc:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 80036ce:	69fb      	ldr	r3, [r7, #28]
 80036d0:	3354      	adds	r3, #84	; 0x54
 80036d2:	4618      	mov	r0, r3
 80036d4:	f002 fbe8 	bl	8005ea8 <pvPortMalloc>
 80036d8:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80036da:	69bb      	ldr	r3, [r7, #24]
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d00f      	beq.n	8003700 <xQueueGenericCreate+0x72>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 80036e0:	69bb      	ldr	r3, [r7, #24]
 80036e2:	3354      	adds	r3, #84	; 0x54
 80036e4:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80036e6:	69bb      	ldr	r3, [r7, #24]
 80036e8:	2200      	movs	r2, #0
 80036ea:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80036ee:	79fa      	ldrb	r2, [r7, #7]
 80036f0:	69bb      	ldr	r3, [r7, #24]
 80036f2:	9300      	str	r3, [sp, #0]
 80036f4:	4613      	mov	r3, r2
 80036f6:	697a      	ldr	r2, [r7, #20]
 80036f8:	68b9      	ldr	r1, [r7, #8]
 80036fa:	68f8      	ldr	r0, [r7, #12]
 80036fc:	f000 f805 	bl	800370a <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8003700:	69bb      	ldr	r3, [r7, #24]
	}
 8003702:	4618      	mov	r0, r3
 8003704:	3720      	adds	r7, #32
 8003706:	46bd      	mov	sp, r7
 8003708:	bd80      	pop	{r7, pc}

0800370a <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800370a:	b580      	push	{r7, lr}
 800370c:	b084      	sub	sp, #16
 800370e:	af00      	add	r7, sp, #0
 8003710:	60f8      	str	r0, [r7, #12]
 8003712:	60b9      	str	r1, [r7, #8]
 8003714:	607a      	str	r2, [r7, #4]
 8003716:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8003718:	68bb      	ldr	r3, [r7, #8]
 800371a:	2b00      	cmp	r3, #0
 800371c:	d103      	bne.n	8003726 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800371e:	69bb      	ldr	r3, [r7, #24]
 8003720:	69ba      	ldr	r2, [r7, #24]
 8003722:	601a      	str	r2, [r3, #0]
 8003724:	e002      	b.n	800372c <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8003726:	69bb      	ldr	r3, [r7, #24]
 8003728:	687a      	ldr	r2, [r7, #4]
 800372a:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800372c:	69bb      	ldr	r3, [r7, #24]
 800372e:	68fa      	ldr	r2, [r7, #12]
 8003730:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8003732:	69bb      	ldr	r3, [r7, #24]
 8003734:	68ba      	ldr	r2, [r7, #8]
 8003736:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8003738:	2101      	movs	r1, #1
 800373a:	69b8      	ldr	r0, [r7, #24]
 800373c:	f7ff fec8 	bl	80034d0 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8003740:	69bb      	ldr	r3, [r7, #24]
 8003742:	78fa      	ldrb	r2, [r7, #3]
 8003744:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_TRACE_FACILITY */

	#if( configUSE_QUEUE_SETS == 1 )
	{
		pxNewQueue->pxQueueSetContainer = NULL;
 8003748:	69bb      	ldr	r3, [r7, #24]
 800374a:	2200      	movs	r2, #0
 800374c:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800374e:	bf00      	nop
 8003750:	3710      	adds	r7, #16
 8003752:	46bd      	mov	sp, r7
 8003754:	bd80      	pop	{r7, pc}
	...

08003758 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8003758:	b580      	push	{r7, lr}
 800375a:	b08e      	sub	sp, #56	; 0x38
 800375c:	af00      	add	r7, sp, #0
 800375e:	60f8      	str	r0, [r7, #12]
 8003760:	60b9      	str	r1, [r7, #8]
 8003762:	607a      	str	r2, [r7, #4]
 8003764:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8003766:	2300      	movs	r3, #0
 8003768:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800376e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003770:	2b00      	cmp	r3, #0
 8003772:	d10a      	bne.n	800378a <xQueueGenericSend+0x32>
	__asm volatile
 8003774:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003778:	f383 8811 	msr	BASEPRI, r3
 800377c:	f3bf 8f6f 	isb	sy
 8003780:	f3bf 8f4f 	dsb	sy
 8003784:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8003786:	bf00      	nop
 8003788:	e7fe      	b.n	8003788 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800378a:	68bb      	ldr	r3, [r7, #8]
 800378c:	2b00      	cmp	r3, #0
 800378e:	d103      	bne.n	8003798 <xQueueGenericSend+0x40>
 8003790:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003792:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003794:	2b00      	cmp	r3, #0
 8003796:	d101      	bne.n	800379c <xQueueGenericSend+0x44>
 8003798:	2301      	movs	r3, #1
 800379a:	e000      	b.n	800379e <xQueueGenericSend+0x46>
 800379c:	2300      	movs	r3, #0
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d10a      	bne.n	80037b8 <xQueueGenericSend+0x60>
	__asm volatile
 80037a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037a6:	f383 8811 	msr	BASEPRI, r3
 80037aa:	f3bf 8f6f 	isb	sy
 80037ae:	f3bf 8f4f 	dsb	sy
 80037b2:	627b      	str	r3, [r7, #36]	; 0x24
}
 80037b4:	bf00      	nop
 80037b6:	e7fe      	b.n	80037b6 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80037b8:	683b      	ldr	r3, [r7, #0]
 80037ba:	2b02      	cmp	r3, #2
 80037bc:	d103      	bne.n	80037c6 <xQueueGenericSend+0x6e>
 80037be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037c2:	2b01      	cmp	r3, #1
 80037c4:	d101      	bne.n	80037ca <xQueueGenericSend+0x72>
 80037c6:	2301      	movs	r3, #1
 80037c8:	e000      	b.n	80037cc <xQueueGenericSend+0x74>
 80037ca:	2300      	movs	r3, #0
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d10a      	bne.n	80037e6 <xQueueGenericSend+0x8e>
	__asm volatile
 80037d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037d4:	f383 8811 	msr	BASEPRI, r3
 80037d8:	f3bf 8f6f 	isb	sy
 80037dc:	f3bf 8f4f 	dsb	sy
 80037e0:	623b      	str	r3, [r7, #32]
}
 80037e2:	bf00      	nop
 80037e4:	e7fe      	b.n	80037e4 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80037e6:	f001 fbc3 	bl	8004f70 <xTaskGetSchedulerState>
 80037ea:	4603      	mov	r3, r0
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d102      	bne.n	80037f6 <xQueueGenericSend+0x9e>
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d101      	bne.n	80037fa <xQueueGenericSend+0xa2>
 80037f6:	2301      	movs	r3, #1
 80037f8:	e000      	b.n	80037fc <xQueueGenericSend+0xa4>
 80037fa:	2300      	movs	r3, #0
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d10a      	bne.n	8003816 <xQueueGenericSend+0xbe>
	__asm volatile
 8003800:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003804:	f383 8811 	msr	BASEPRI, r3
 8003808:	f3bf 8f6f 	isb	sy
 800380c:	f3bf 8f4f 	dsb	sy
 8003810:	61fb      	str	r3, [r7, #28]
}
 8003812:	bf00      	nop
 8003814:	e7fe      	b.n	8003814 <xQueueGenericSend+0xbc>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003816:	f002 fa25 	bl	8005c64 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800381a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800381c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800381e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003820:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003822:	429a      	cmp	r2, r3
 8003824:	d302      	bcc.n	800382c <xQueueGenericSend+0xd4>
 8003826:	683b      	ldr	r3, [r7, #0]
 8003828:	2b02      	cmp	r3, #2
 800382a:	d13d      	bne.n	80038a8 <xQueueGenericSend+0x150>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800382c:	683a      	ldr	r2, [r7, #0]
 800382e:	68b9      	ldr	r1, [r7, #8]
 8003830:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003832:	f000 fb6f 	bl	8003f14 <prvCopyDataToQueue>
 8003836:	62f8      	str	r0, [r7, #44]	; 0x2c

				#if ( configUSE_QUEUE_SETS == 1 )
				{
					if( pxQueue->pxQueueSetContainer != NULL )
 8003838:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800383a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800383c:	2b00      	cmp	r3, #0
 800383e:	d00f      	beq.n	8003860 <xQueueGenericSend+0x108>
					{
						if( prvNotifyQueueSetContainer( pxQueue, xCopyPosition ) != pdFALSE )
 8003840:	6839      	ldr	r1, [r7, #0]
 8003842:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003844:	f000 fd25 	bl	8004292 <prvNotifyQueueSetContainer>
 8003848:	4603      	mov	r3, r0
 800384a:	2b00      	cmp	r3, #0
 800384c:	d028      	beq.n	80038a0 <xQueueGenericSend+0x148>
						{
							/* The queue is a member of a queue set, and posting
							to the queue set caused a higher priority task to
							unblock. A context switch is required. */
							queueYIELD_IF_USING_PREEMPTION();
 800384e:	4b4a      	ldr	r3, [pc, #296]	; (8003978 <xQueueGenericSend+0x220>)
 8003850:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003854:	601a      	str	r2, [r3, #0]
 8003856:	f3bf 8f4f 	dsb	sy
 800385a:	f3bf 8f6f 	isb	sy
 800385e:	e01f      	b.n	80038a0 <xQueueGenericSend+0x148>
					}
					else
					{
						/* If there was a task waiting for data to arrive on the
						queue then unblock it now. */
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003860:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003862:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003864:	2b00      	cmp	r3, #0
 8003866:	d010      	beq.n	800388a <xQueueGenericSend+0x132>
						{
							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003868:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800386a:	3324      	adds	r3, #36	; 0x24
 800386c:	4618      	mov	r0, r3
 800386e:	f001 f9b7 	bl	8004be0 <xTaskRemoveFromEventList>
 8003872:	4603      	mov	r3, r0
 8003874:	2b00      	cmp	r3, #0
 8003876:	d013      	beq.n	80038a0 <xQueueGenericSend+0x148>
							{
								/* The unblocked task has a priority higher than
								our own so yield immediately.  Yes it is ok to
								do this from within the critical section - the
								kernel takes care of that. */
								queueYIELD_IF_USING_PREEMPTION();
 8003878:	4b3f      	ldr	r3, [pc, #252]	; (8003978 <xQueueGenericSend+0x220>)
 800387a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800387e:	601a      	str	r2, [r3, #0]
 8003880:	f3bf 8f4f 	dsb	sy
 8003884:	f3bf 8f6f 	isb	sy
 8003888:	e00a      	b.n	80038a0 <xQueueGenericSend+0x148>
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
						}
						else if( xYieldRequired != pdFALSE )
 800388a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800388c:	2b00      	cmp	r3, #0
 800388e:	d007      	beq.n	80038a0 <xQueueGenericSend+0x148>
						{
							/* This path is a special case that will only get
							executed if the task was holding multiple mutexes
							and the mutexes were given back in an order that is
							different to that in which they were taken. */
							queueYIELD_IF_USING_PREEMPTION();
 8003890:	4b39      	ldr	r3, [pc, #228]	; (8003978 <xQueueGenericSend+0x220>)
 8003892:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003896:	601a      	str	r2, [r3, #0]
 8003898:	f3bf 8f4f 	dsb	sy
 800389c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80038a0:	f002 fa10 	bl	8005cc4 <vPortExitCritical>
				return pdPASS;
 80038a4:	2301      	movs	r3, #1
 80038a6:	e063      	b.n	8003970 <xQueueGenericSend+0x218>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d103      	bne.n	80038b6 <xQueueGenericSend+0x15e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80038ae:	f002 fa09 	bl	8005cc4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80038b2:	2300      	movs	r3, #0
 80038b4:	e05c      	b.n	8003970 <xQueueGenericSend+0x218>
				}
				else if( xEntryTimeSet == pdFALSE )
 80038b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d106      	bne.n	80038ca <xQueueGenericSend+0x172>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80038bc:	f107 0314 	add.w	r3, r7, #20
 80038c0:	4618      	mov	r0, r3
 80038c2:	f001 f9f1 	bl	8004ca8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80038c6:	2301      	movs	r3, #1
 80038c8:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80038ca:	f002 f9fb 	bl	8005cc4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80038ce:	f000 ff59 	bl	8004784 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80038d2:	f002 f9c7 	bl	8005c64 <vPortEnterCritical>
 80038d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038d8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80038dc:	b25b      	sxtb	r3, r3
 80038de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038e2:	d103      	bne.n	80038ec <xQueueGenericSend+0x194>
 80038e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038e6:	2200      	movs	r2, #0
 80038e8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80038ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038ee:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80038f2:	b25b      	sxtb	r3, r3
 80038f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038f8:	d103      	bne.n	8003902 <xQueueGenericSend+0x1aa>
 80038fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038fc:	2200      	movs	r2, #0
 80038fe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003902:	f002 f9df 	bl	8005cc4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003906:	1d3a      	adds	r2, r7, #4
 8003908:	f107 0314 	add.w	r3, r7, #20
 800390c:	4611      	mov	r1, r2
 800390e:	4618      	mov	r0, r3
 8003910:	f001 f9e0 	bl	8004cd4 <xTaskCheckForTimeOut>
 8003914:	4603      	mov	r3, r0
 8003916:	2b00      	cmp	r3, #0
 8003918:	d124      	bne.n	8003964 <xQueueGenericSend+0x20c>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800391a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800391c:	f000 fc00 	bl	8004120 <prvIsQueueFull>
 8003920:	4603      	mov	r3, r0
 8003922:	2b00      	cmp	r3, #0
 8003924:	d018      	beq.n	8003958 <xQueueGenericSend+0x200>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8003926:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003928:	3310      	adds	r3, #16
 800392a:	687a      	ldr	r2, [r7, #4]
 800392c:	4611      	mov	r1, r2
 800392e:	4618      	mov	r0, r3
 8003930:	f001 f906 	bl	8004b40 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8003934:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003936:	f000 fb7d 	bl	8004034 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800393a:	f000 ff31 	bl	80047a0 <xTaskResumeAll>
 800393e:	4603      	mov	r3, r0
 8003940:	2b00      	cmp	r3, #0
 8003942:	f47f af68 	bne.w	8003816 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8003946:	4b0c      	ldr	r3, [pc, #48]	; (8003978 <xQueueGenericSend+0x220>)
 8003948:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800394c:	601a      	str	r2, [r3, #0]
 800394e:	f3bf 8f4f 	dsb	sy
 8003952:	f3bf 8f6f 	isb	sy
 8003956:	e75e      	b.n	8003816 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8003958:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800395a:	f000 fb6b 	bl	8004034 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800395e:	f000 ff1f 	bl	80047a0 <xTaskResumeAll>
 8003962:	e758      	b.n	8003816 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8003964:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003966:	f000 fb65 	bl	8004034 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800396a:	f000 ff19 	bl	80047a0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800396e:	2300      	movs	r3, #0
		}
	}
}
 8003970:	4618      	mov	r0, r3
 8003972:	3738      	adds	r7, #56	; 0x38
 8003974:	46bd      	mov	sp, r7
 8003976:	bd80      	pop	{r7, pc}
 8003978:	e000ed04 	.word	0xe000ed04

0800397c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800397c:	b580      	push	{r7, lr}
 800397e:	b08e      	sub	sp, #56	; 0x38
 8003980:	af00      	add	r7, sp, #0
 8003982:	60f8      	str	r0, [r7, #12]
 8003984:	60b9      	str	r1, [r7, #8]
 8003986:	607a      	str	r2, [r7, #4]
 8003988:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800398e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003990:	2b00      	cmp	r3, #0
 8003992:	d10a      	bne.n	80039aa <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8003994:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003998:	f383 8811 	msr	BASEPRI, r3
 800399c:	f3bf 8f6f 	isb	sy
 80039a0:	f3bf 8f4f 	dsb	sy
 80039a4:	627b      	str	r3, [r7, #36]	; 0x24
}
 80039a6:	bf00      	nop
 80039a8:	e7fe      	b.n	80039a8 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80039aa:	68bb      	ldr	r3, [r7, #8]
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d103      	bne.n	80039b8 <xQueueGenericSendFromISR+0x3c>
 80039b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d101      	bne.n	80039bc <xQueueGenericSendFromISR+0x40>
 80039b8:	2301      	movs	r3, #1
 80039ba:	e000      	b.n	80039be <xQueueGenericSendFromISR+0x42>
 80039bc:	2300      	movs	r3, #0
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d10a      	bne.n	80039d8 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 80039c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039c6:	f383 8811 	msr	BASEPRI, r3
 80039ca:	f3bf 8f6f 	isb	sy
 80039ce:	f3bf 8f4f 	dsb	sy
 80039d2:	623b      	str	r3, [r7, #32]
}
 80039d4:	bf00      	nop
 80039d6:	e7fe      	b.n	80039d6 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80039d8:	683b      	ldr	r3, [r7, #0]
 80039da:	2b02      	cmp	r3, #2
 80039dc:	d103      	bne.n	80039e6 <xQueueGenericSendFromISR+0x6a>
 80039de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039e2:	2b01      	cmp	r3, #1
 80039e4:	d101      	bne.n	80039ea <xQueueGenericSendFromISR+0x6e>
 80039e6:	2301      	movs	r3, #1
 80039e8:	e000      	b.n	80039ec <xQueueGenericSendFromISR+0x70>
 80039ea:	2300      	movs	r3, #0
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d10a      	bne.n	8003a06 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 80039f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039f4:	f383 8811 	msr	BASEPRI, r3
 80039f8:	f3bf 8f6f 	isb	sy
 80039fc:	f3bf 8f4f 	dsb	sy
 8003a00:	61fb      	str	r3, [r7, #28]
}
 8003a02:	bf00      	nop
 8003a04:	e7fe      	b.n	8003a04 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003a06:	f002 fa0f 	bl	8005e28 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8003a0a:	f3ef 8211 	mrs	r2, BASEPRI
 8003a0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a12:	f383 8811 	msr	BASEPRI, r3
 8003a16:	f3bf 8f6f 	isb	sy
 8003a1a:	f3bf 8f4f 	dsb	sy
 8003a1e:	61ba      	str	r2, [r7, #24]
 8003a20:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8003a22:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003a24:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003a26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a28:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003a2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a2e:	429a      	cmp	r2, r3
 8003a30:	d302      	bcc.n	8003a38 <xQueueGenericSendFromISR+0xbc>
 8003a32:	683b      	ldr	r3, [r7, #0]
 8003a34:	2b02      	cmp	r3, #2
 8003a36:	d13e      	bne.n	8003ab6 <xQueueGenericSendFromISR+0x13a>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8003a38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a3a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003a3e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003a42:	683a      	ldr	r2, [r7, #0]
 8003a44:	68b9      	ldr	r1, [r7, #8]
 8003a46:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003a48:	f000 fa64 	bl	8003f14 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8003a4c:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8003a50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a54:	d124      	bne.n	8003aa0 <xQueueGenericSendFromISR+0x124>
			{
				#if ( configUSE_QUEUE_SETS == 1 )
				{
					if( pxQueue->pxQueueSetContainer != NULL )
 8003a56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a58:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d00d      	beq.n	8003a7a <xQueueGenericSendFromISR+0xfe>
					{
						if( prvNotifyQueueSetContainer( pxQueue, xCopyPosition ) != pdFALSE )
 8003a5e:	6839      	ldr	r1, [r7, #0]
 8003a60:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003a62:	f000 fc16 	bl	8004292 <prvNotifyQueueSetContainer>
 8003a66:	4603      	mov	r3, r0
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d021      	beq.n	8003ab0 <xQueueGenericSendFromISR+0x134>
						{
							/* The queue is a member of a queue set, and posting
							to the queue set caused a higher priority task to
							unblock.  A context switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d01e      	beq.n	8003ab0 <xQueueGenericSendFromISR+0x134>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	2201      	movs	r2, #1
 8003a76:	601a      	str	r2, [r3, #0]
 8003a78:	e01a      	b.n	8003ab0 <xQueueGenericSendFromISR+0x134>
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else
					{
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003a7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d016      	beq.n	8003ab0 <xQueueGenericSendFromISR+0x134>
						{
							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003a82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a84:	3324      	adds	r3, #36	; 0x24
 8003a86:	4618      	mov	r0, r3
 8003a88:	f001 f8aa 	bl	8004be0 <xTaskRemoveFromEventList>
 8003a8c:	4603      	mov	r3, r0
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d00e      	beq.n	8003ab0 <xQueueGenericSendFromISR+0x134>
							{
								/* The task waiting has a higher priority so
								record that a context switch is required. */
								if( pxHigherPriorityTaskWoken != NULL )
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d00b      	beq.n	8003ab0 <xQueueGenericSendFromISR+0x134>
								{
									*pxHigherPriorityTaskWoken = pdTRUE;
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	2201      	movs	r2, #1
 8003a9c:	601a      	str	r2, [r3, #0]
 8003a9e:	e007      	b.n	8003ab0 <xQueueGenericSendFromISR+0x134>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8003aa0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003aa4:	3301      	adds	r3, #1
 8003aa6:	b2db      	uxtb	r3, r3
 8003aa8:	b25a      	sxtb	r2, r3
 8003aaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003aac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8003ab0:	2301      	movs	r3, #1
 8003ab2:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8003ab4:	e001      	b.n	8003aba <xQueueGenericSendFromISR+0x13e>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8003ab6:	2300      	movs	r3, #0
 8003ab8:	637b      	str	r3, [r7, #52]	; 0x34
 8003aba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003abc:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8003abe:	693b      	ldr	r3, [r7, #16]
 8003ac0:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8003ac4:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8003ac6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8003ac8:	4618      	mov	r0, r3
 8003aca:	3738      	adds	r7, #56	; 0x38
 8003acc:	46bd      	mov	sp, r7
 8003ace:	bd80      	pop	{r7, pc}

08003ad0 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8003ad0:	b580      	push	{r7, lr}
 8003ad2:	b08c      	sub	sp, #48	; 0x30
 8003ad4:	af00      	add	r7, sp, #0
 8003ad6:	60f8      	str	r0, [r7, #12]
 8003ad8:	60b9      	str	r1, [r7, #8]
 8003ada:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8003adc:	2300      	movs	r3, #0
 8003ade:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8003ae4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d10a      	bne.n	8003b00 <xQueueReceive+0x30>
	__asm volatile
 8003aea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003aee:	f383 8811 	msr	BASEPRI, r3
 8003af2:	f3bf 8f6f 	isb	sy
 8003af6:	f3bf 8f4f 	dsb	sy
 8003afa:	623b      	str	r3, [r7, #32]
}
 8003afc:	bf00      	nop
 8003afe:	e7fe      	b.n	8003afe <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003b00:	68bb      	ldr	r3, [r7, #8]
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d103      	bne.n	8003b0e <xQueueReceive+0x3e>
 8003b06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d101      	bne.n	8003b12 <xQueueReceive+0x42>
 8003b0e:	2301      	movs	r3, #1
 8003b10:	e000      	b.n	8003b14 <xQueueReceive+0x44>
 8003b12:	2300      	movs	r3, #0
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d10a      	bne.n	8003b2e <xQueueReceive+0x5e>
	__asm volatile
 8003b18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b1c:	f383 8811 	msr	BASEPRI, r3
 8003b20:	f3bf 8f6f 	isb	sy
 8003b24:	f3bf 8f4f 	dsb	sy
 8003b28:	61fb      	str	r3, [r7, #28]
}
 8003b2a:	bf00      	nop
 8003b2c:	e7fe      	b.n	8003b2c <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003b2e:	f001 fa1f 	bl	8004f70 <xTaskGetSchedulerState>
 8003b32:	4603      	mov	r3, r0
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d102      	bne.n	8003b3e <xQueueReceive+0x6e>
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d101      	bne.n	8003b42 <xQueueReceive+0x72>
 8003b3e:	2301      	movs	r3, #1
 8003b40:	e000      	b.n	8003b44 <xQueueReceive+0x74>
 8003b42:	2300      	movs	r3, #0
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d10a      	bne.n	8003b5e <xQueueReceive+0x8e>
	__asm volatile
 8003b48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b4c:	f383 8811 	msr	BASEPRI, r3
 8003b50:	f3bf 8f6f 	isb	sy
 8003b54:	f3bf 8f4f 	dsb	sy
 8003b58:	61bb      	str	r3, [r7, #24]
}
 8003b5a:	bf00      	nop
 8003b5c:	e7fe      	b.n	8003b5c <xQueueReceive+0x8c>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8003b5e:	f002 f881 	bl	8005c64 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003b62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b66:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003b68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d01f      	beq.n	8003bae <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003b6e:	68b9      	ldr	r1, [r7, #8]
 8003b70:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003b72:	f000 fa39 	bl	8003fe8 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8003b76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b78:	1e5a      	subs	r2, r3, #1
 8003b7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b7c:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003b7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b80:	691b      	ldr	r3, [r3, #16]
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d00f      	beq.n	8003ba6 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003b86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b88:	3310      	adds	r3, #16
 8003b8a:	4618      	mov	r0, r3
 8003b8c:	f001 f828 	bl	8004be0 <xTaskRemoveFromEventList>
 8003b90:	4603      	mov	r3, r0
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d007      	beq.n	8003ba6 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8003b96:	4b3d      	ldr	r3, [pc, #244]	; (8003c8c <xQueueReceive+0x1bc>)
 8003b98:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003b9c:	601a      	str	r2, [r3, #0]
 8003b9e:	f3bf 8f4f 	dsb	sy
 8003ba2:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8003ba6:	f002 f88d 	bl	8005cc4 <vPortExitCritical>
				return pdPASS;
 8003baa:	2301      	movs	r3, #1
 8003bac:	e069      	b.n	8003c82 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d103      	bne.n	8003bbc <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003bb4:	f002 f886 	bl	8005cc4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8003bb8:	2300      	movs	r3, #0
 8003bba:	e062      	b.n	8003c82 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003bbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d106      	bne.n	8003bd0 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003bc2:	f107 0310 	add.w	r3, r7, #16
 8003bc6:	4618      	mov	r0, r3
 8003bc8:	f001 f86e 	bl	8004ca8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003bcc:	2301      	movs	r3, #1
 8003bce:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003bd0:	f002 f878 	bl	8005cc4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003bd4:	f000 fdd6 	bl	8004784 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003bd8:	f002 f844 	bl	8005c64 <vPortEnterCritical>
 8003bdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003bde:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003be2:	b25b      	sxtb	r3, r3
 8003be4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003be8:	d103      	bne.n	8003bf2 <xQueueReceive+0x122>
 8003bea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003bec:	2200      	movs	r2, #0
 8003bee:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003bf2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003bf4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003bf8:	b25b      	sxtb	r3, r3
 8003bfa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003bfe:	d103      	bne.n	8003c08 <xQueueReceive+0x138>
 8003c00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c02:	2200      	movs	r2, #0
 8003c04:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003c08:	f002 f85c 	bl	8005cc4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003c0c:	1d3a      	adds	r2, r7, #4
 8003c0e:	f107 0310 	add.w	r3, r7, #16
 8003c12:	4611      	mov	r1, r2
 8003c14:	4618      	mov	r0, r3
 8003c16:	f001 f85d 	bl	8004cd4 <xTaskCheckForTimeOut>
 8003c1a:	4603      	mov	r3, r0
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d123      	bne.n	8003c68 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003c20:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003c22:	f000 fa67 	bl	80040f4 <prvIsQueueEmpty>
 8003c26:	4603      	mov	r3, r0
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d017      	beq.n	8003c5c <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003c2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c2e:	3324      	adds	r3, #36	; 0x24
 8003c30:	687a      	ldr	r2, [r7, #4]
 8003c32:	4611      	mov	r1, r2
 8003c34:	4618      	mov	r0, r3
 8003c36:	f000 ff83 	bl	8004b40 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8003c3a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003c3c:	f000 f9fa 	bl	8004034 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003c40:	f000 fdae 	bl	80047a0 <xTaskResumeAll>
 8003c44:	4603      	mov	r3, r0
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d189      	bne.n	8003b5e <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8003c4a:	4b10      	ldr	r3, [pc, #64]	; (8003c8c <xQueueReceive+0x1bc>)
 8003c4c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003c50:	601a      	str	r2, [r3, #0]
 8003c52:	f3bf 8f4f 	dsb	sy
 8003c56:	f3bf 8f6f 	isb	sy
 8003c5a:	e780      	b.n	8003b5e <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8003c5c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003c5e:	f000 f9e9 	bl	8004034 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003c62:	f000 fd9d 	bl	80047a0 <xTaskResumeAll>
 8003c66:	e77a      	b.n	8003b5e <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8003c68:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003c6a:	f000 f9e3 	bl	8004034 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003c6e:	f000 fd97 	bl	80047a0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003c72:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003c74:	f000 fa3e 	bl	80040f4 <prvIsQueueEmpty>
 8003c78:	4603      	mov	r3, r0
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	f43f af6f 	beq.w	8003b5e <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8003c80:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8003c82:	4618      	mov	r0, r3
 8003c84:	3730      	adds	r7, #48	; 0x30
 8003c86:	46bd      	mov	sp, r7
 8003c88:	bd80      	pop	{r7, pc}
 8003c8a:	bf00      	nop
 8003c8c:	e000ed04 	.word	0xe000ed04

08003c90 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8003c90:	b580      	push	{r7, lr}
 8003c92:	b08e      	sub	sp, #56	; 0x38
 8003c94:	af00      	add	r7, sp, #0
 8003c96:	6078      	str	r0, [r7, #4]
 8003c98:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8003c9a:	2300      	movs	r3, #0
 8003c9c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8003ca2:	2300      	movs	r3, #0
 8003ca4:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8003ca6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d10a      	bne.n	8003cc2 <xQueueSemaphoreTake+0x32>
	__asm volatile
 8003cac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003cb0:	f383 8811 	msr	BASEPRI, r3
 8003cb4:	f3bf 8f6f 	isb	sy
 8003cb8:	f3bf 8f4f 	dsb	sy
 8003cbc:	623b      	str	r3, [r7, #32]
}
 8003cbe:	bf00      	nop
 8003cc0:	e7fe      	b.n	8003cc0 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8003cc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003cc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d00a      	beq.n	8003ce0 <xQueueSemaphoreTake+0x50>
	__asm volatile
 8003cca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003cce:	f383 8811 	msr	BASEPRI, r3
 8003cd2:	f3bf 8f6f 	isb	sy
 8003cd6:	f3bf 8f4f 	dsb	sy
 8003cda:	61fb      	str	r3, [r7, #28]
}
 8003cdc:	bf00      	nop
 8003cde:	e7fe      	b.n	8003cde <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003ce0:	f001 f946 	bl	8004f70 <xTaskGetSchedulerState>
 8003ce4:	4603      	mov	r3, r0
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d102      	bne.n	8003cf0 <xQueueSemaphoreTake+0x60>
 8003cea:	683b      	ldr	r3, [r7, #0]
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d101      	bne.n	8003cf4 <xQueueSemaphoreTake+0x64>
 8003cf0:	2301      	movs	r3, #1
 8003cf2:	e000      	b.n	8003cf6 <xQueueSemaphoreTake+0x66>
 8003cf4:	2300      	movs	r3, #0
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d10a      	bne.n	8003d10 <xQueueSemaphoreTake+0x80>
	__asm volatile
 8003cfa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003cfe:	f383 8811 	msr	BASEPRI, r3
 8003d02:	f3bf 8f6f 	isb	sy
 8003d06:	f3bf 8f4f 	dsb	sy
 8003d0a:	61bb      	str	r3, [r7, #24]
}
 8003d0c:	bf00      	nop
 8003d0e:	e7fe      	b.n	8003d0e <xQueueSemaphoreTake+0x7e>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8003d10:	f001 ffa8 	bl	8005c64 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8003d14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d18:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8003d1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d024      	beq.n	8003d6a <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8003d20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d22:	1e5a      	subs	r2, r3, #1
 8003d24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d26:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003d28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d104      	bne.n	8003d3a <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 8003d30:	f001 fa9e 	bl	8005270 <pvTaskIncrementMutexHeldCount>
 8003d34:	4602      	mov	r2, r0
 8003d36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d38:	605a      	str	r2, [r3, #4]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003d3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d3c:	691b      	ldr	r3, [r3, #16]
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d00f      	beq.n	8003d62 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003d42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d44:	3310      	adds	r3, #16
 8003d46:	4618      	mov	r0, r3
 8003d48:	f000 ff4a 	bl	8004be0 <xTaskRemoveFromEventList>
 8003d4c:	4603      	mov	r3, r0
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d007      	beq.n	8003d62 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8003d52:	4b54      	ldr	r3, [pc, #336]	; (8003ea4 <xQueueSemaphoreTake+0x214>)
 8003d54:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003d58:	601a      	str	r2, [r3, #0]
 8003d5a:	f3bf 8f4f 	dsb	sy
 8003d5e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8003d62:	f001 ffaf 	bl	8005cc4 <vPortExitCritical>
				return pdPASS;
 8003d66:	2301      	movs	r3, #1
 8003d68:	e097      	b.n	8003e9a <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003d6a:	683b      	ldr	r3, [r7, #0]
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d111      	bne.n	8003d94 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8003d70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d00a      	beq.n	8003d8c <xQueueSemaphoreTake+0xfc>
	__asm volatile
 8003d76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d7a:	f383 8811 	msr	BASEPRI, r3
 8003d7e:	f3bf 8f6f 	isb	sy
 8003d82:	f3bf 8f4f 	dsb	sy
 8003d86:	617b      	str	r3, [r7, #20]
}
 8003d88:	bf00      	nop
 8003d8a:	e7fe      	b.n	8003d8a <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8003d8c:	f001 ff9a 	bl	8005cc4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8003d90:	2300      	movs	r3, #0
 8003d92:	e082      	b.n	8003e9a <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003d94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d106      	bne.n	8003da8 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003d9a:	f107 030c 	add.w	r3, r7, #12
 8003d9e:	4618      	mov	r0, r3
 8003da0:	f000 ff82 	bl	8004ca8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003da4:	2301      	movs	r3, #1
 8003da6:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003da8:	f001 ff8c 	bl	8005cc4 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003dac:	f000 fcea 	bl	8004784 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003db0:	f001 ff58 	bl	8005c64 <vPortEnterCritical>
 8003db4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003db6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003dba:	b25b      	sxtb	r3, r3
 8003dbc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003dc0:	d103      	bne.n	8003dca <xQueueSemaphoreTake+0x13a>
 8003dc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003dc4:	2200      	movs	r2, #0
 8003dc6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003dca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003dcc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003dd0:	b25b      	sxtb	r3, r3
 8003dd2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003dd6:	d103      	bne.n	8003de0 <xQueueSemaphoreTake+0x150>
 8003dd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003dda:	2200      	movs	r2, #0
 8003ddc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003de0:	f001 ff70 	bl	8005cc4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003de4:	463a      	mov	r2, r7
 8003de6:	f107 030c 	add.w	r3, r7, #12
 8003dea:	4611      	mov	r1, r2
 8003dec:	4618      	mov	r0, r3
 8003dee:	f000 ff71 	bl	8004cd4 <xTaskCheckForTimeOut>
 8003df2:	4603      	mov	r3, r0
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d132      	bne.n	8003e5e <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003df8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003dfa:	f000 f97b 	bl	80040f4 <prvIsQueueEmpty>
 8003dfe:	4603      	mov	r3, r0
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d026      	beq.n	8003e52 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003e04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d109      	bne.n	8003e20 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8003e0c:	f001 ff2a 	bl	8005c64 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 8003e10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e12:	685b      	ldr	r3, [r3, #4]
 8003e14:	4618      	mov	r0, r3
 8003e16:	f001 f8c9 	bl	8004fac <xTaskPriorityInherit>
 8003e1a:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8003e1c:	f001 ff52 	bl	8005cc4 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003e20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e22:	3324      	adds	r3, #36	; 0x24
 8003e24:	683a      	ldr	r2, [r7, #0]
 8003e26:	4611      	mov	r1, r2
 8003e28:	4618      	mov	r0, r3
 8003e2a:	f000 fe89 	bl	8004b40 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8003e2e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003e30:	f000 f900 	bl	8004034 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003e34:	f000 fcb4 	bl	80047a0 <xTaskResumeAll>
 8003e38:	4603      	mov	r3, r0
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	f47f af68 	bne.w	8003d10 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8003e40:	4b18      	ldr	r3, [pc, #96]	; (8003ea4 <xQueueSemaphoreTake+0x214>)
 8003e42:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003e46:	601a      	str	r2, [r3, #0]
 8003e48:	f3bf 8f4f 	dsb	sy
 8003e4c:	f3bf 8f6f 	isb	sy
 8003e50:	e75e      	b.n	8003d10 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8003e52:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003e54:	f000 f8ee 	bl	8004034 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003e58:	f000 fca2 	bl	80047a0 <xTaskResumeAll>
 8003e5c:	e758      	b.n	8003d10 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8003e5e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003e60:	f000 f8e8 	bl	8004034 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003e64:	f000 fc9c 	bl	80047a0 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003e68:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003e6a:	f000 f943 	bl	80040f4 <prvIsQueueEmpty>
 8003e6e:	4603      	mov	r3, r0
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	f43f af4d 	beq.w	8003d10 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8003e76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d00d      	beq.n	8003e98 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8003e7c:	f001 fef2 	bl	8005c64 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8003e80:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003e82:	f000 f82f 	bl	8003ee4 <prvGetDisinheritPriorityAfterTimeout>
 8003e86:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
 8003e88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e8a:	685b      	ldr	r3, [r3, #4]
 8003e8c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003e8e:	4618      	mov	r0, r3
 8003e90:	f001 f968 	bl	8005164 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8003e94:	f001 ff16 	bl	8005cc4 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8003e98:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8003e9a:	4618      	mov	r0, r3
 8003e9c:	3738      	adds	r7, #56	; 0x38
 8003e9e:	46bd      	mov	sp, r7
 8003ea0:	bd80      	pop	{r7, pc}
 8003ea2:	bf00      	nop
 8003ea4:	e000ed04 	.word	0xe000ed04

08003ea8 <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 8003ea8:	b580      	push	{r7, lr}
 8003eaa:	b084      	sub	sp, #16
 8003eac:	af00      	add	r7, sp, #0
 8003eae:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d10a      	bne.n	8003ecc <uxQueueMessagesWaiting+0x24>
	__asm volatile
 8003eb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003eba:	f383 8811 	msr	BASEPRI, r3
 8003ebe:	f3bf 8f6f 	isb	sy
 8003ec2:	f3bf 8f4f 	dsb	sy
 8003ec6:	60bb      	str	r3, [r7, #8]
}
 8003ec8:	bf00      	nop
 8003eca:	e7fe      	b.n	8003eca <uxQueueMessagesWaiting+0x22>

	taskENTER_CRITICAL();
 8003ecc:	f001 feca 	bl	8005c64 <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ed4:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 8003ed6:	f001 fef5 	bl	8005cc4 <vPortExitCritical>

	return uxReturn;
 8003eda:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8003edc:	4618      	mov	r0, r3
 8003ede:	3710      	adds	r7, #16
 8003ee0:	46bd      	mov	sp, r7
 8003ee2:	bd80      	pop	{r7, pc}

08003ee4 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8003ee4:	b480      	push	{r7}
 8003ee6:	b085      	sub	sp, #20
 8003ee8:	af00      	add	r7, sp, #0
 8003eea:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d006      	beq.n	8003f02 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 8003efe:	60fb      	str	r3, [r7, #12]
 8003f00:	e001      	b.n	8003f06 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8003f02:	2300      	movs	r3, #0
 8003f04:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8003f06:	68fb      	ldr	r3, [r7, #12]
	}
 8003f08:	4618      	mov	r0, r3
 8003f0a:	3714      	adds	r7, #20
 8003f0c:	46bd      	mov	sp, r7
 8003f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f12:	4770      	bx	lr

08003f14 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8003f14:	b580      	push	{r7, lr}
 8003f16:	b086      	sub	sp, #24
 8003f18:	af00      	add	r7, sp, #0
 8003f1a:	60f8      	str	r0, [r7, #12]
 8003f1c:	60b9      	str	r1, [r7, #8]
 8003f1e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8003f20:	2300      	movs	r3, #0
 8003f22:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f28:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d10d      	bne.n	8003f4e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d14d      	bne.n	8003fd6 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	685b      	ldr	r3, [r3, #4]
 8003f3e:	4618      	mov	r0, r3
 8003f40:	f001 f8a2 	bl	8005088 <xTaskPriorityDisinherit>
 8003f44:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	2200      	movs	r2, #0
 8003f4a:	605a      	str	r2, [r3, #4]
 8003f4c:	e043      	b.n	8003fd6 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d119      	bne.n	8003f88 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	6898      	ldr	r0, [r3, #8]
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f5c:	461a      	mov	r2, r3
 8003f5e:	68b9      	ldr	r1, [r7, #8]
 8003f60:	f002 fa00 	bl	8006364 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	689a      	ldr	r2, [r3, #8]
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f6c:	441a      	add	r2, r3
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	689a      	ldr	r2, [r3, #8]
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	685b      	ldr	r3, [r3, #4]
 8003f7a:	429a      	cmp	r2, r3
 8003f7c:	d32b      	bcc.n	8003fd6 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	681a      	ldr	r2, [r3, #0]
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	609a      	str	r2, [r3, #8]
 8003f86:	e026      	b.n	8003fd6 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	68d8      	ldr	r0, [r3, #12]
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f90:	461a      	mov	r2, r3
 8003f92:	68b9      	ldr	r1, [r7, #8]
 8003f94:	f002 f9e6 	bl	8006364 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	68da      	ldr	r2, [r3, #12]
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fa0:	425b      	negs	r3, r3
 8003fa2:	441a      	add	r2, r3
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	68da      	ldr	r2, [r3, #12]
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	429a      	cmp	r2, r3
 8003fb2:	d207      	bcs.n	8003fc4 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	685a      	ldr	r2, [r3, #4]
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fbc:	425b      	negs	r3, r3
 8003fbe:	441a      	add	r2, r3
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	2b02      	cmp	r3, #2
 8003fc8:	d105      	bne.n	8003fd6 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003fca:	693b      	ldr	r3, [r7, #16]
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d002      	beq.n	8003fd6 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8003fd0:	693b      	ldr	r3, [r7, #16]
 8003fd2:	3b01      	subs	r3, #1
 8003fd4:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8003fd6:	693b      	ldr	r3, [r7, #16]
 8003fd8:	1c5a      	adds	r2, r3, #1
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8003fde:	697b      	ldr	r3, [r7, #20]
}
 8003fe0:	4618      	mov	r0, r3
 8003fe2:	3718      	adds	r7, #24
 8003fe4:	46bd      	mov	sp, r7
 8003fe6:	bd80      	pop	{r7, pc}

08003fe8 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8003fe8:	b580      	push	{r7, lr}
 8003fea:	b082      	sub	sp, #8
 8003fec:	af00      	add	r7, sp, #0
 8003fee:	6078      	str	r0, [r7, #4]
 8003ff0:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d018      	beq.n	800402c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	68da      	ldr	r2, [r3, #12]
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004002:	441a      	add	r2, r3
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	68da      	ldr	r2, [r3, #12]
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	685b      	ldr	r3, [r3, #4]
 8004010:	429a      	cmp	r2, r3
 8004012:	d303      	bcc.n	800401c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681a      	ldr	r2, [r3, #0]
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	68d9      	ldr	r1, [r3, #12]
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004024:	461a      	mov	r2, r3
 8004026:	6838      	ldr	r0, [r7, #0]
 8004028:	f002 f99c 	bl	8006364 <memcpy>
	}
}
 800402c:	bf00      	nop
 800402e:	3708      	adds	r7, #8
 8004030:	46bd      	mov	sp, r7
 8004032:	bd80      	pop	{r7, pc}

08004034 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8004034:	b580      	push	{r7, lr}
 8004036:	b084      	sub	sp, #16
 8004038:	af00      	add	r7, sp, #0
 800403a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800403c:	f001 fe12 	bl	8005c64 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004046:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004048:	e01f      	b.n	800408a <prvUnlockQueue+0x56>
		{
			/* Data was posted while the queue was locked.  Are any tasks
			blocked waiting for data to become available? */
			#if ( configUSE_QUEUE_SETS == 1 )
			{
				if( pxQueue->pxQueueSetContainer != NULL )
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800404e:	2b00      	cmp	r3, #0
 8004050:	d009      	beq.n	8004066 <prvUnlockQueue+0x32>
				{
					if( prvNotifyQueueSetContainer( pxQueue, queueSEND_TO_BACK ) != pdFALSE )
 8004052:	2100      	movs	r1, #0
 8004054:	6878      	ldr	r0, [r7, #4]
 8004056:	f000 f91c 	bl	8004292 <prvNotifyQueueSetContainer>
 800405a:	4603      	mov	r3, r0
 800405c:	2b00      	cmp	r3, #0
 800405e:	d010      	beq.n	8004082 <prvUnlockQueue+0x4e>
					{
						/* The queue is a member of a queue set, and posting to
						the queue set caused a higher priority task to unblock.
						A context switch is required. */
						vTaskMissedYield();
 8004060:	f000 fe9a 	bl	8004d98 <vTaskMissedYield>
 8004064:	e00d      	b.n	8004082 <prvUnlockQueue+0x4e>
				else
				{
					/* Tasks that are removed from the event list will get
					added to the pending ready list as the scheduler is still
					suspended. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800406a:	2b00      	cmp	r3, #0
 800406c:	d012      	beq.n	8004094 <prvUnlockQueue+0x60>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	3324      	adds	r3, #36	; 0x24
 8004072:	4618      	mov	r0, r3
 8004074:	f000 fdb4 	bl	8004be0 <xTaskRemoveFromEventList>
 8004078:	4603      	mov	r3, r0
 800407a:	2b00      	cmp	r3, #0
 800407c:	d001      	beq.n	8004082 <prvUnlockQueue+0x4e>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							vTaskMissedYield();
 800407e:	f000 fe8b 	bl	8004d98 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8004082:	7bfb      	ldrb	r3, [r7, #15]
 8004084:	3b01      	subs	r3, #1
 8004086:	b2db      	uxtb	r3, r3
 8004088:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800408a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800408e:	2b00      	cmp	r3, #0
 8004090:	dcdb      	bgt.n	800404a <prvUnlockQueue+0x16>
 8004092:	e000      	b.n	8004096 <prvUnlockQueue+0x62>
						break;
 8004094:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	22ff      	movs	r2, #255	; 0xff
 800409a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800409e:	f001 fe11 	bl	8005cc4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80040a2:	f001 fddf 	bl	8005c64 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80040ac:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80040ae:	e011      	b.n	80040d4 <prvUnlockQueue+0xa0>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	691b      	ldr	r3, [r3, #16]
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d012      	beq.n	80040de <prvUnlockQueue+0xaa>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	3310      	adds	r3, #16
 80040bc:	4618      	mov	r0, r3
 80040be:	f000 fd8f 	bl	8004be0 <xTaskRemoveFromEventList>
 80040c2:	4603      	mov	r3, r0
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d001      	beq.n	80040cc <prvUnlockQueue+0x98>
				{
					vTaskMissedYield();
 80040c8:	f000 fe66 	bl	8004d98 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80040cc:	7bbb      	ldrb	r3, [r7, #14]
 80040ce:	3b01      	subs	r3, #1
 80040d0:	b2db      	uxtb	r3, r3
 80040d2:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80040d4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80040d8:	2b00      	cmp	r3, #0
 80040da:	dce9      	bgt.n	80040b0 <prvUnlockQueue+0x7c>
 80040dc:	e000      	b.n	80040e0 <prvUnlockQueue+0xac>
			}
			else
			{
				break;
 80040de:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	22ff      	movs	r2, #255	; 0xff
 80040e4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80040e8:	f001 fdec 	bl	8005cc4 <vPortExitCritical>
}
 80040ec:	bf00      	nop
 80040ee:	3710      	adds	r7, #16
 80040f0:	46bd      	mov	sp, r7
 80040f2:	bd80      	pop	{r7, pc}

080040f4 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80040f4:	b580      	push	{r7, lr}
 80040f6:	b084      	sub	sp, #16
 80040f8:	af00      	add	r7, sp, #0
 80040fa:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80040fc:	f001 fdb2 	bl	8005c64 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004104:	2b00      	cmp	r3, #0
 8004106:	d102      	bne.n	800410e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8004108:	2301      	movs	r3, #1
 800410a:	60fb      	str	r3, [r7, #12]
 800410c:	e001      	b.n	8004112 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800410e:	2300      	movs	r3, #0
 8004110:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004112:	f001 fdd7 	bl	8005cc4 <vPortExitCritical>

	return xReturn;
 8004116:	68fb      	ldr	r3, [r7, #12]
}
 8004118:	4618      	mov	r0, r3
 800411a:	3710      	adds	r7, #16
 800411c:	46bd      	mov	sp, r7
 800411e:	bd80      	pop	{r7, pc}

08004120 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8004120:	b580      	push	{r7, lr}
 8004122:	b084      	sub	sp, #16
 8004124:	af00      	add	r7, sp, #0
 8004126:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004128:	f001 fd9c 	bl	8005c64 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004134:	429a      	cmp	r2, r3
 8004136:	d102      	bne.n	800413e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8004138:	2301      	movs	r3, #1
 800413a:	60fb      	str	r3, [r7, #12]
 800413c:	e001      	b.n	8004142 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800413e:	2300      	movs	r3, #0
 8004140:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004142:	f001 fdbf 	bl	8005cc4 <vPortExitCritical>

	return xReturn;
 8004146:	68fb      	ldr	r3, [r7, #12]
}
 8004148:	4618      	mov	r0, r3
 800414a:	3710      	adds	r7, #16
 800414c:	46bd      	mov	sp, r7
 800414e:	bd80      	pop	{r7, pc}

08004150 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8004150:	b480      	push	{r7}
 8004152:	b085      	sub	sp, #20
 8004154:	af00      	add	r7, sp, #0
 8004156:	6078      	str	r0, [r7, #4]
 8004158:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800415a:	2300      	movs	r3, #0
 800415c:	60fb      	str	r3, [r7, #12]
 800415e:	e014      	b.n	800418a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8004160:	4a0f      	ldr	r2, [pc, #60]	; (80041a0 <vQueueAddToRegistry+0x50>)
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8004168:	2b00      	cmp	r3, #0
 800416a:	d10b      	bne.n	8004184 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800416c:	490c      	ldr	r1, [pc, #48]	; (80041a0 <vQueueAddToRegistry+0x50>)
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	683a      	ldr	r2, [r7, #0]
 8004172:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8004176:	4a0a      	ldr	r2, [pc, #40]	; (80041a0 <vQueueAddToRegistry+0x50>)
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	00db      	lsls	r3, r3, #3
 800417c:	4413      	add	r3, r2
 800417e:	687a      	ldr	r2, [r7, #4]
 8004180:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8004182:	e006      	b.n	8004192 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	3301      	adds	r3, #1
 8004188:	60fb      	str	r3, [r7, #12]
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	2b07      	cmp	r3, #7
 800418e:	d9e7      	bls.n	8004160 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8004190:	bf00      	nop
 8004192:	bf00      	nop
 8004194:	3714      	adds	r7, #20
 8004196:	46bd      	mov	sp, r7
 8004198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800419c:	4770      	bx	lr
 800419e:	bf00      	nop
 80041a0:	200008ec 	.word	0x200008ec

080041a4 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80041a4:	b580      	push	{r7, lr}
 80041a6:	b086      	sub	sp, #24
 80041a8:	af00      	add	r7, sp, #0
 80041aa:	60f8      	str	r0, [r7, #12]
 80041ac:	60b9      	str	r1, [r7, #8]
 80041ae:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80041b4:	f001 fd56 	bl	8005c64 <vPortEnterCritical>
 80041b8:	697b      	ldr	r3, [r7, #20]
 80041ba:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80041be:	b25b      	sxtb	r3, r3
 80041c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041c4:	d103      	bne.n	80041ce <vQueueWaitForMessageRestricted+0x2a>
 80041c6:	697b      	ldr	r3, [r7, #20]
 80041c8:	2200      	movs	r2, #0
 80041ca:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80041ce:	697b      	ldr	r3, [r7, #20]
 80041d0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80041d4:	b25b      	sxtb	r3, r3
 80041d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041da:	d103      	bne.n	80041e4 <vQueueWaitForMessageRestricted+0x40>
 80041dc:	697b      	ldr	r3, [r7, #20]
 80041de:	2200      	movs	r2, #0
 80041e0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80041e4:	f001 fd6e 	bl	8005cc4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80041e8:	697b      	ldr	r3, [r7, #20]
 80041ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d106      	bne.n	80041fe <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80041f0:	697b      	ldr	r3, [r7, #20]
 80041f2:	3324      	adds	r3, #36	; 0x24
 80041f4:	687a      	ldr	r2, [r7, #4]
 80041f6:	68b9      	ldr	r1, [r7, #8]
 80041f8:	4618      	mov	r0, r3
 80041fa:	f000 fcc5 	bl	8004b88 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80041fe:	6978      	ldr	r0, [r7, #20]
 8004200:	f7ff ff18 	bl	8004034 <prvUnlockQueue>
	}
 8004204:	bf00      	nop
 8004206:	3718      	adds	r7, #24
 8004208:	46bd      	mov	sp, r7
 800420a:	bd80      	pop	{r7, pc}

0800420c <xQueueCreateSet>:
/*-----------------------------------------------------------*/

#if( ( configUSE_QUEUE_SETS == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueSetHandle_t xQueueCreateSet( const UBaseType_t uxEventQueueLength )
	{
 800420c:	b580      	push	{r7, lr}
 800420e:	b084      	sub	sp, #16
 8004210:	af00      	add	r7, sp, #0
 8004212:	6078      	str	r0, [r7, #4]
	QueueSetHandle_t pxQueue;

		pxQueue = xQueueGenericCreate( uxEventQueueLength, ( UBaseType_t ) sizeof( Queue_t * ), queueQUEUE_TYPE_SET );
 8004214:	2200      	movs	r2, #0
 8004216:	2104      	movs	r1, #4
 8004218:	6878      	ldr	r0, [r7, #4]
 800421a:	f7ff fa38 	bl	800368e <xQueueGenericCreate>
 800421e:	60f8      	str	r0, [r7, #12]

		return pxQueue;
 8004220:	68fb      	ldr	r3, [r7, #12]
	}
 8004222:	4618      	mov	r0, r3
 8004224:	3710      	adds	r7, #16
 8004226:	46bd      	mov	sp, r7
 8004228:	bd80      	pop	{r7, pc}

0800422a <xQueueAddToSet>:
/*-----------------------------------------------------------*/

#if ( configUSE_QUEUE_SETS == 1 )

	BaseType_t xQueueAddToSet( QueueSetMemberHandle_t xQueueOrSemaphore, QueueSetHandle_t xQueueSet )
	{
 800422a:	b580      	push	{r7, lr}
 800422c:	b084      	sub	sp, #16
 800422e:	af00      	add	r7, sp, #0
 8004230:	6078      	str	r0, [r7, #4]
 8004232:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 8004234:	f001 fd16 	bl	8005c64 <vPortEnterCritical>
		{
			if( ( ( Queue_t * ) xQueueOrSemaphore )->pxQueueSetContainer != NULL )
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800423c:	2b00      	cmp	r3, #0
 800423e:	d002      	beq.n	8004246 <xQueueAddToSet+0x1c>
			{
				/* Cannot add a queue/semaphore to more than one queue set. */
				xReturn = pdFAIL;
 8004240:	2300      	movs	r3, #0
 8004242:	60fb      	str	r3, [r7, #12]
 8004244:	e00b      	b.n	800425e <xQueueAddToSet+0x34>
			}
			else if( ( ( Queue_t * ) xQueueOrSemaphore )->uxMessagesWaiting != ( UBaseType_t ) 0 )
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800424a:	2b00      	cmp	r3, #0
 800424c:	d002      	beq.n	8004254 <xQueueAddToSet+0x2a>
			{
				/* Cannot add a queue/semaphore to a queue set if there are already
				items in the queue/semaphore. */
				xReturn = pdFAIL;
 800424e:	2300      	movs	r3, #0
 8004250:	60fb      	str	r3, [r7, #12]
 8004252:	e004      	b.n	800425e <xQueueAddToSet+0x34>
			}
			else
			{
				( ( Queue_t * ) xQueueOrSemaphore )->pxQueueSetContainer = xQueueSet;
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	683a      	ldr	r2, [r7, #0]
 8004258:	649a      	str	r2, [r3, #72]	; 0x48
				xReturn = pdPASS;
 800425a:	2301      	movs	r3, #1
 800425c:	60fb      	str	r3, [r7, #12]
			}
		}
		taskEXIT_CRITICAL();
 800425e:	f001 fd31 	bl	8005cc4 <vPortExitCritical>

		return xReturn;
 8004262:	68fb      	ldr	r3, [r7, #12]
	}
 8004264:	4618      	mov	r0, r3
 8004266:	3710      	adds	r7, #16
 8004268:	46bd      	mov	sp, r7
 800426a:	bd80      	pop	{r7, pc}

0800426c <xQueueSelectFromSet>:
/*-----------------------------------------------------------*/

#if ( configUSE_QUEUE_SETS == 1 )

	QueueSetMemberHandle_t xQueueSelectFromSet( QueueSetHandle_t xQueueSet, TickType_t const xTicksToWait )
	{
 800426c:	b580      	push	{r7, lr}
 800426e:	b084      	sub	sp, #16
 8004270:	af00      	add	r7, sp, #0
 8004272:	6078      	str	r0, [r7, #4]
 8004274:	6039      	str	r1, [r7, #0]
	QueueSetMemberHandle_t xReturn = NULL;
 8004276:	2300      	movs	r3, #0
 8004278:	60fb      	str	r3, [r7, #12]

		( void ) xQueueReceive( ( QueueHandle_t ) xQueueSet, &xReturn, xTicksToWait ); /*lint !e961 Casting from one typedef to another is not redundant. */
 800427a:	f107 030c 	add.w	r3, r7, #12
 800427e:	683a      	ldr	r2, [r7, #0]
 8004280:	4619      	mov	r1, r3
 8004282:	6878      	ldr	r0, [r7, #4]
 8004284:	f7ff fc24 	bl	8003ad0 <xQueueReceive>
		return xReturn;
 8004288:	68fb      	ldr	r3, [r7, #12]
	}
 800428a:	4618      	mov	r0, r3
 800428c:	3710      	adds	r7, #16
 800428e:	46bd      	mov	sp, r7
 8004290:	bd80      	pop	{r7, pc}

08004292 <prvNotifyQueueSetContainer>:
/*-----------------------------------------------------------*/

#if ( configUSE_QUEUE_SETS == 1 )

	static BaseType_t prvNotifyQueueSetContainer( const Queue_t * const pxQueue, const BaseType_t xCopyPosition )
	{
 8004292:	b580      	push	{r7, lr}
 8004294:	b088      	sub	sp, #32
 8004296:	af00      	add	r7, sp, #0
 8004298:	6078      	str	r0, [r7, #4]
 800429a:	6039      	str	r1, [r7, #0]
	Queue_t *pxQueueSetContainer = pxQueue->pxQueueSetContainer;
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80042a0:	61bb      	str	r3, [r7, #24]
	BaseType_t xReturn = pdFALSE;
 80042a2:	2300      	movs	r3, #0
 80042a4:	61fb      	str	r3, [r7, #28]

		/* This function must be called form a critical section. */

		configASSERT( pxQueueSetContainer );
 80042a6:	69bb      	ldr	r3, [r7, #24]
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d10a      	bne.n	80042c2 <prvNotifyQueueSetContainer+0x30>
	__asm volatile
 80042ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042b0:	f383 8811 	msr	BASEPRI, r3
 80042b4:	f3bf 8f6f 	isb	sy
 80042b8:	f3bf 8f4f 	dsb	sy
 80042bc:	613b      	str	r3, [r7, #16]
}
 80042be:	bf00      	nop
 80042c0:	e7fe      	b.n	80042c0 <prvNotifyQueueSetContainer+0x2e>
		configASSERT( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength );
 80042c2:	69bb      	ldr	r3, [r7, #24]
 80042c4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80042c6:	69bb      	ldr	r3, [r7, #24]
 80042c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80042ca:	429a      	cmp	r2, r3
 80042cc:	d30a      	bcc.n	80042e4 <prvNotifyQueueSetContainer+0x52>
	__asm volatile
 80042ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042d2:	f383 8811 	msr	BASEPRI, r3
 80042d6:	f3bf 8f6f 	isb	sy
 80042da:	f3bf 8f4f 	dsb	sy
 80042de:	60fb      	str	r3, [r7, #12]
}
 80042e0:	bf00      	nop
 80042e2:	e7fe      	b.n	80042e2 <prvNotifyQueueSetContainer+0x50>

		if( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength )
 80042e4:	69bb      	ldr	r3, [r7, #24]
 80042e6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80042e8:	69bb      	ldr	r3, [r7, #24]
 80042ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80042ec:	429a      	cmp	r2, r3
 80042ee:	d225      	bcs.n	800433c <prvNotifyQueueSetContainer+0xaa>
		{
			const int8_t cTxLock = pxQueueSetContainer->cTxLock;
 80042f0:	69bb      	ldr	r3, [r7, #24]
 80042f2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80042f6:	75fb      	strb	r3, [r7, #23]

			traceQUEUE_SEND( pxQueueSetContainer );

			/* The data copied is the handle of the queue that contains data. */
			xReturn = prvCopyDataToQueue( pxQueueSetContainer, &pxQueue, xCopyPosition );
 80042f8:	1d3b      	adds	r3, r7, #4
 80042fa:	683a      	ldr	r2, [r7, #0]
 80042fc:	4619      	mov	r1, r3
 80042fe:	69b8      	ldr	r0, [r7, #24]
 8004300:	f7ff fe08 	bl	8003f14 <prvCopyDataToQueue>
 8004304:	61f8      	str	r0, [r7, #28]

			if( cTxLock == queueUNLOCKED )
 8004306:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800430a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800430e:	d10e      	bne.n	800432e <prvNotifyQueueSetContainer+0x9c>
			{
				if( listLIST_IS_EMPTY( &( pxQueueSetContainer->xTasksWaitingToReceive ) ) == pdFALSE )
 8004310:	69bb      	ldr	r3, [r7, #24]
 8004312:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004314:	2b00      	cmp	r3, #0
 8004316:	d011      	beq.n	800433c <prvNotifyQueueSetContainer+0xaa>
				{
					if( xTaskRemoveFromEventList( &( pxQueueSetContainer->xTasksWaitingToReceive ) ) != pdFALSE )
 8004318:	69bb      	ldr	r3, [r7, #24]
 800431a:	3324      	adds	r3, #36	; 0x24
 800431c:	4618      	mov	r0, r3
 800431e:	f000 fc5f 	bl	8004be0 <xTaskRemoveFromEventList>
 8004322:	4603      	mov	r3, r0
 8004324:	2b00      	cmp	r3, #0
 8004326:	d009      	beq.n	800433c <prvNotifyQueueSetContainer+0xaa>
					{
						/* The task waiting has a higher priority. */
						xReturn = pdTRUE;
 8004328:	2301      	movs	r3, #1
 800432a:	61fb      	str	r3, [r7, #28]
 800432c:	e006      	b.n	800433c <prvNotifyQueueSetContainer+0xaa>
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else
			{
				pxQueueSetContainer->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800432e:	7dfb      	ldrb	r3, [r7, #23]
 8004330:	3301      	adds	r3, #1
 8004332:	b2db      	uxtb	r3, r3
 8004334:	b25a      	sxtb	r2, r3
 8004336:	69bb      	ldr	r3, [r7, #24]
 8004338:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800433c:	69fb      	ldr	r3, [r7, #28]
	}
 800433e:	4618      	mov	r0, r3
 8004340:	3720      	adds	r7, #32
 8004342:	46bd      	mov	sp, r7
 8004344:	bd80      	pop	{r7, pc}

08004346 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8004346:	b580      	push	{r7, lr}
 8004348:	b08e      	sub	sp, #56	; 0x38
 800434a:	af04      	add	r7, sp, #16
 800434c:	60f8      	str	r0, [r7, #12]
 800434e:	60b9      	str	r1, [r7, #8]
 8004350:	607a      	str	r2, [r7, #4]
 8004352:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8004354:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004356:	2b00      	cmp	r3, #0
 8004358:	d10a      	bne.n	8004370 <xTaskCreateStatic+0x2a>
	__asm volatile
 800435a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800435e:	f383 8811 	msr	BASEPRI, r3
 8004362:	f3bf 8f6f 	isb	sy
 8004366:	f3bf 8f4f 	dsb	sy
 800436a:	623b      	str	r3, [r7, #32]
}
 800436c:	bf00      	nop
 800436e:	e7fe      	b.n	800436e <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8004370:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004372:	2b00      	cmp	r3, #0
 8004374:	d10a      	bne.n	800438c <xTaskCreateStatic+0x46>
	__asm volatile
 8004376:	f04f 0350 	mov.w	r3, #80	; 0x50
 800437a:	f383 8811 	msr	BASEPRI, r3
 800437e:	f3bf 8f6f 	isb	sy
 8004382:	f3bf 8f4f 	dsb	sy
 8004386:	61fb      	str	r3, [r7, #28]
}
 8004388:	bf00      	nop
 800438a:	e7fe      	b.n	800438a <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800438c:	23a8      	movs	r3, #168	; 0xa8
 800438e:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8004390:	693b      	ldr	r3, [r7, #16]
 8004392:	2ba8      	cmp	r3, #168	; 0xa8
 8004394:	d00a      	beq.n	80043ac <xTaskCreateStatic+0x66>
	__asm volatile
 8004396:	f04f 0350 	mov.w	r3, #80	; 0x50
 800439a:	f383 8811 	msr	BASEPRI, r3
 800439e:	f3bf 8f6f 	isb	sy
 80043a2:	f3bf 8f4f 	dsb	sy
 80043a6:	61bb      	str	r3, [r7, #24]
}
 80043a8:	bf00      	nop
 80043aa:	e7fe      	b.n	80043aa <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80043ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d01e      	beq.n	80043f0 <xTaskCreateStatic+0xaa>
 80043b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d01b      	beq.n	80043f0 <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80043b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043ba:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80043bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043be:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80043c0:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80043c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043c4:	2202      	movs	r2, #2
 80043c6:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80043ca:	2300      	movs	r3, #0
 80043cc:	9303      	str	r3, [sp, #12]
 80043ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043d0:	9302      	str	r3, [sp, #8]
 80043d2:	f107 0314 	add.w	r3, r7, #20
 80043d6:	9301      	str	r3, [sp, #4]
 80043d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043da:	9300      	str	r3, [sp, #0]
 80043dc:	683b      	ldr	r3, [r7, #0]
 80043de:	687a      	ldr	r2, [r7, #4]
 80043e0:	68b9      	ldr	r1, [r7, #8]
 80043e2:	68f8      	ldr	r0, [r7, #12]
 80043e4:	f000 f850 	bl	8004488 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80043e8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80043ea:	f000 f8eb 	bl	80045c4 <prvAddNewTaskToReadyList>
 80043ee:	e001      	b.n	80043f4 <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 80043f0:	2300      	movs	r3, #0
 80043f2:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80043f4:	697b      	ldr	r3, [r7, #20]
	}
 80043f6:	4618      	mov	r0, r3
 80043f8:	3728      	adds	r7, #40	; 0x28
 80043fa:	46bd      	mov	sp, r7
 80043fc:	bd80      	pop	{r7, pc}

080043fe <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80043fe:	b580      	push	{r7, lr}
 8004400:	b08c      	sub	sp, #48	; 0x30
 8004402:	af04      	add	r7, sp, #16
 8004404:	60f8      	str	r0, [r7, #12]
 8004406:	60b9      	str	r1, [r7, #8]
 8004408:	603b      	str	r3, [r7, #0]
 800440a:	4613      	mov	r3, r2
 800440c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800440e:	88fb      	ldrh	r3, [r7, #6]
 8004410:	009b      	lsls	r3, r3, #2
 8004412:	4618      	mov	r0, r3
 8004414:	f001 fd48 	bl	8005ea8 <pvPortMalloc>
 8004418:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800441a:	697b      	ldr	r3, [r7, #20]
 800441c:	2b00      	cmp	r3, #0
 800441e:	d00e      	beq.n	800443e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8004420:	20a8      	movs	r0, #168	; 0xa8
 8004422:	f001 fd41 	bl	8005ea8 <pvPortMalloc>
 8004426:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8004428:	69fb      	ldr	r3, [r7, #28]
 800442a:	2b00      	cmp	r3, #0
 800442c:	d003      	beq.n	8004436 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800442e:	69fb      	ldr	r3, [r7, #28]
 8004430:	697a      	ldr	r2, [r7, #20]
 8004432:	631a      	str	r2, [r3, #48]	; 0x30
 8004434:	e005      	b.n	8004442 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8004436:	6978      	ldr	r0, [r7, #20]
 8004438:	f001 fdfa 	bl	8006030 <vPortFree>
 800443c:	e001      	b.n	8004442 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800443e:	2300      	movs	r3, #0
 8004440:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8004442:	69fb      	ldr	r3, [r7, #28]
 8004444:	2b00      	cmp	r3, #0
 8004446:	d017      	beq.n	8004478 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8004448:	69fb      	ldr	r3, [r7, #28]
 800444a:	2200      	movs	r2, #0
 800444c:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8004450:	88fa      	ldrh	r2, [r7, #6]
 8004452:	2300      	movs	r3, #0
 8004454:	9303      	str	r3, [sp, #12]
 8004456:	69fb      	ldr	r3, [r7, #28]
 8004458:	9302      	str	r3, [sp, #8]
 800445a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800445c:	9301      	str	r3, [sp, #4]
 800445e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004460:	9300      	str	r3, [sp, #0]
 8004462:	683b      	ldr	r3, [r7, #0]
 8004464:	68b9      	ldr	r1, [r7, #8]
 8004466:	68f8      	ldr	r0, [r7, #12]
 8004468:	f000 f80e 	bl	8004488 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800446c:	69f8      	ldr	r0, [r7, #28]
 800446e:	f000 f8a9 	bl	80045c4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8004472:	2301      	movs	r3, #1
 8004474:	61bb      	str	r3, [r7, #24]
 8004476:	e002      	b.n	800447e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004478:	f04f 33ff 	mov.w	r3, #4294967295
 800447c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800447e:	69bb      	ldr	r3, [r7, #24]
	}
 8004480:	4618      	mov	r0, r3
 8004482:	3720      	adds	r7, #32
 8004484:	46bd      	mov	sp, r7
 8004486:	bd80      	pop	{r7, pc}

08004488 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8004488:	b580      	push	{r7, lr}
 800448a:	b088      	sub	sp, #32
 800448c:	af00      	add	r7, sp, #0
 800448e:	60f8      	str	r0, [r7, #12]
 8004490:	60b9      	str	r1, [r7, #8]
 8004492:	607a      	str	r2, [r7, #4]
 8004494:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8004496:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004498:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	009b      	lsls	r3, r3, #2
 800449e:	461a      	mov	r2, r3
 80044a0:	21a5      	movs	r1, #165	; 0xa5
 80044a2:	f001 fedb 	bl	800625c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 80044a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044a8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80044b0:	3b01      	subs	r3, #1
 80044b2:	009b      	lsls	r3, r3, #2
 80044b4:	4413      	add	r3, r2
 80044b6:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 80044b8:	69bb      	ldr	r3, [r7, #24]
 80044ba:	f023 0307 	bic.w	r3, r3, #7
 80044be:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80044c0:	69bb      	ldr	r3, [r7, #24]
 80044c2:	f003 0307 	and.w	r3, r3, #7
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d00a      	beq.n	80044e0 <prvInitialiseNewTask+0x58>
	__asm volatile
 80044ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044ce:	f383 8811 	msr	BASEPRI, r3
 80044d2:	f3bf 8f6f 	isb	sy
 80044d6:	f3bf 8f4f 	dsb	sy
 80044da:	617b      	str	r3, [r7, #20]
}
 80044dc:	bf00      	nop
 80044de:	e7fe      	b.n	80044de <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80044e0:	2300      	movs	r3, #0
 80044e2:	61fb      	str	r3, [r7, #28]
 80044e4:	e012      	b.n	800450c <prvInitialiseNewTask+0x84>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80044e6:	68ba      	ldr	r2, [r7, #8]
 80044e8:	69fb      	ldr	r3, [r7, #28]
 80044ea:	4413      	add	r3, r2
 80044ec:	7819      	ldrb	r1, [r3, #0]
 80044ee:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80044f0:	69fb      	ldr	r3, [r7, #28]
 80044f2:	4413      	add	r3, r2
 80044f4:	3334      	adds	r3, #52	; 0x34
 80044f6:	460a      	mov	r2, r1
 80044f8:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 80044fa:	68ba      	ldr	r2, [r7, #8]
 80044fc:	69fb      	ldr	r3, [r7, #28]
 80044fe:	4413      	add	r3, r2
 8004500:	781b      	ldrb	r3, [r3, #0]
 8004502:	2b00      	cmp	r3, #0
 8004504:	d006      	beq.n	8004514 <prvInitialiseNewTask+0x8c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004506:	69fb      	ldr	r3, [r7, #28]
 8004508:	3301      	adds	r3, #1
 800450a:	61fb      	str	r3, [r7, #28]
 800450c:	69fb      	ldr	r3, [r7, #28]
 800450e:	2b0f      	cmp	r3, #15
 8004510:	d9e9      	bls.n	80044e6 <prvInitialiseNewTask+0x5e>
 8004512:	e000      	b.n	8004516 <prvInitialiseNewTask+0x8e>
		{
			break;
 8004514:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004516:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004518:	2200      	movs	r2, #0
 800451a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800451e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004520:	2b37      	cmp	r3, #55	; 0x37
 8004522:	d901      	bls.n	8004528 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8004524:	2337      	movs	r3, #55	; 0x37
 8004526:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8004528:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800452a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800452c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800452e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004530:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004532:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8004534:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004536:	2200      	movs	r2, #0
 8004538:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800453a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800453c:	3304      	adds	r3, #4
 800453e:	4618      	mov	r0, r3
 8004540:	f7fe ff32 	bl	80033a8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004544:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004546:	3318      	adds	r3, #24
 8004548:	4618      	mov	r0, r3
 800454a:	f7fe ff2d 	bl	80033a8 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800454e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004550:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004552:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004554:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004556:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800455a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800455c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800455e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004560:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004562:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8004564:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004566:	2200      	movs	r2, #0
 8004568:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800456c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800456e:	2200      	movs	r2, #0
 8004570:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8004574:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004576:	3354      	adds	r3, #84	; 0x54
 8004578:	224c      	movs	r2, #76	; 0x4c
 800457a:	2100      	movs	r1, #0
 800457c:	4618      	mov	r0, r3
 800457e:	f001 fe6d 	bl	800625c <memset>
 8004582:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004584:	4a0c      	ldr	r2, [pc, #48]	; (80045b8 <prvInitialiseNewTask+0x130>)
 8004586:	659a      	str	r2, [r3, #88]	; 0x58
 8004588:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800458a:	4a0c      	ldr	r2, [pc, #48]	; (80045bc <prvInitialiseNewTask+0x134>)
 800458c:	65da      	str	r2, [r3, #92]	; 0x5c
 800458e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004590:	4a0b      	ldr	r2, [pc, #44]	; (80045c0 <prvInitialiseNewTask+0x138>)
 8004592:	661a      	str	r2, [r3, #96]	; 0x60
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004594:	683a      	ldr	r2, [r7, #0]
 8004596:	68f9      	ldr	r1, [r7, #12]
 8004598:	69b8      	ldr	r0, [r7, #24]
 800459a:	f001 fa37 	bl	8005a0c <pxPortInitialiseStack>
 800459e:	4602      	mov	r2, r0
 80045a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045a2:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 80045a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d002      	beq.n	80045b0 <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80045aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045ac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80045ae:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80045b0:	bf00      	nop
 80045b2:	3720      	adds	r7, #32
 80045b4:	46bd      	mov	sp, r7
 80045b6:	bd80      	pop	{r7, pc}
 80045b8:	20001b7c 	.word	0x20001b7c
 80045bc:	20001be4 	.word	0x20001be4
 80045c0:	20001c4c 	.word	0x20001c4c

080045c4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80045c4:	b580      	push	{r7, lr}
 80045c6:	b082      	sub	sp, #8
 80045c8:	af00      	add	r7, sp, #0
 80045ca:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80045cc:	f001 fb4a 	bl	8005c64 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80045d0:	4b2d      	ldr	r3, [pc, #180]	; (8004688 <prvAddNewTaskToReadyList+0xc4>)
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	3301      	adds	r3, #1
 80045d6:	4a2c      	ldr	r2, [pc, #176]	; (8004688 <prvAddNewTaskToReadyList+0xc4>)
 80045d8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80045da:	4b2c      	ldr	r3, [pc, #176]	; (800468c <prvAddNewTaskToReadyList+0xc8>)
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d109      	bne.n	80045f6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80045e2:	4a2a      	ldr	r2, [pc, #168]	; (800468c <prvAddNewTaskToReadyList+0xc8>)
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80045e8:	4b27      	ldr	r3, [pc, #156]	; (8004688 <prvAddNewTaskToReadyList+0xc4>)
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	2b01      	cmp	r3, #1
 80045ee:	d110      	bne.n	8004612 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80045f0:	f000 fbf6 	bl	8004de0 <prvInitialiseTaskLists>
 80045f4:	e00d      	b.n	8004612 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80045f6:	4b26      	ldr	r3, [pc, #152]	; (8004690 <prvAddNewTaskToReadyList+0xcc>)
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d109      	bne.n	8004612 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80045fe:	4b23      	ldr	r3, [pc, #140]	; (800468c <prvAddNewTaskToReadyList+0xc8>)
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004608:	429a      	cmp	r2, r3
 800460a:	d802      	bhi.n	8004612 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800460c:	4a1f      	ldr	r2, [pc, #124]	; (800468c <prvAddNewTaskToReadyList+0xc8>)
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8004612:	4b20      	ldr	r3, [pc, #128]	; (8004694 <prvAddNewTaskToReadyList+0xd0>)
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	3301      	adds	r3, #1
 8004618:	4a1e      	ldr	r2, [pc, #120]	; (8004694 <prvAddNewTaskToReadyList+0xd0>)
 800461a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800461c:	4b1d      	ldr	r3, [pc, #116]	; (8004694 <prvAddNewTaskToReadyList+0xd0>)
 800461e:	681a      	ldr	r2, [r3, #0]
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004628:	4b1b      	ldr	r3, [pc, #108]	; (8004698 <prvAddNewTaskToReadyList+0xd4>)
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	429a      	cmp	r2, r3
 800462e:	d903      	bls.n	8004638 <prvAddNewTaskToReadyList+0x74>
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004634:	4a18      	ldr	r2, [pc, #96]	; (8004698 <prvAddNewTaskToReadyList+0xd4>)
 8004636:	6013      	str	r3, [r2, #0]
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800463c:	4613      	mov	r3, r2
 800463e:	009b      	lsls	r3, r3, #2
 8004640:	4413      	add	r3, r2
 8004642:	009b      	lsls	r3, r3, #2
 8004644:	4a15      	ldr	r2, [pc, #84]	; (800469c <prvAddNewTaskToReadyList+0xd8>)
 8004646:	441a      	add	r2, r3
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	3304      	adds	r3, #4
 800464c:	4619      	mov	r1, r3
 800464e:	4610      	mov	r0, r2
 8004650:	f7fe feb7 	bl	80033c2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8004654:	f001 fb36 	bl	8005cc4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8004658:	4b0d      	ldr	r3, [pc, #52]	; (8004690 <prvAddNewTaskToReadyList+0xcc>)
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	2b00      	cmp	r3, #0
 800465e:	d00e      	beq.n	800467e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004660:	4b0a      	ldr	r3, [pc, #40]	; (800468c <prvAddNewTaskToReadyList+0xc8>)
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800466a:	429a      	cmp	r2, r3
 800466c:	d207      	bcs.n	800467e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800466e:	4b0c      	ldr	r3, [pc, #48]	; (80046a0 <prvAddNewTaskToReadyList+0xdc>)
 8004670:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004674:	601a      	str	r2, [r3, #0]
 8004676:	f3bf 8f4f 	dsb	sy
 800467a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800467e:	bf00      	nop
 8004680:	3708      	adds	r7, #8
 8004682:	46bd      	mov	sp, r7
 8004684:	bd80      	pop	{r7, pc}
 8004686:	bf00      	nop
 8004688:	20000e00 	.word	0x20000e00
 800468c:	2000092c 	.word	0x2000092c
 8004690:	20000e0c 	.word	0x20000e0c
 8004694:	20000e1c 	.word	0x20000e1c
 8004698:	20000e08 	.word	0x20000e08
 800469c:	20000930 	.word	0x20000930
 80046a0:	e000ed04 	.word	0xe000ed04

080046a4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80046a4:	b580      	push	{r7, lr}
 80046a6:	b08a      	sub	sp, #40	; 0x28
 80046a8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80046aa:	2300      	movs	r3, #0
 80046ac:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80046ae:	2300      	movs	r3, #0
 80046b0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80046b2:	463a      	mov	r2, r7
 80046b4:	1d39      	adds	r1, r7, #4
 80046b6:	f107 0308 	add.w	r3, r7, #8
 80046ba:	4618      	mov	r0, r3
 80046bc:	f7fe fe20 	bl	8003300 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80046c0:	6839      	ldr	r1, [r7, #0]
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	68ba      	ldr	r2, [r7, #8]
 80046c6:	9202      	str	r2, [sp, #8]
 80046c8:	9301      	str	r3, [sp, #4]
 80046ca:	2300      	movs	r3, #0
 80046cc:	9300      	str	r3, [sp, #0]
 80046ce:	2300      	movs	r3, #0
 80046d0:	460a      	mov	r2, r1
 80046d2:	4924      	ldr	r1, [pc, #144]	; (8004764 <vTaskStartScheduler+0xc0>)
 80046d4:	4824      	ldr	r0, [pc, #144]	; (8004768 <vTaskStartScheduler+0xc4>)
 80046d6:	f7ff fe36 	bl	8004346 <xTaskCreateStatic>
 80046da:	4603      	mov	r3, r0
 80046dc:	4a23      	ldr	r2, [pc, #140]	; (800476c <vTaskStartScheduler+0xc8>)
 80046de:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80046e0:	4b22      	ldr	r3, [pc, #136]	; (800476c <vTaskStartScheduler+0xc8>)
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d002      	beq.n	80046ee <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80046e8:	2301      	movs	r3, #1
 80046ea:	617b      	str	r3, [r7, #20]
 80046ec:	e001      	b.n	80046f2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80046ee:	2300      	movs	r3, #0
 80046f0:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80046f2:	697b      	ldr	r3, [r7, #20]
 80046f4:	2b01      	cmp	r3, #1
 80046f6:	d102      	bne.n	80046fe <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80046f8:	f000 fe22 	bl	8005340 <xTimerCreateTimerTask>
 80046fc:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80046fe:	697b      	ldr	r3, [r7, #20]
 8004700:	2b01      	cmp	r3, #1
 8004702:	d11b      	bne.n	800473c <vTaskStartScheduler+0x98>
	__asm volatile
 8004704:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004708:	f383 8811 	msr	BASEPRI, r3
 800470c:	f3bf 8f6f 	isb	sy
 8004710:	f3bf 8f4f 	dsb	sy
 8004714:	613b      	str	r3, [r7, #16]
}
 8004716:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8004718:	4b15      	ldr	r3, [pc, #84]	; (8004770 <vTaskStartScheduler+0xcc>)
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	3354      	adds	r3, #84	; 0x54
 800471e:	4a15      	ldr	r2, [pc, #84]	; (8004774 <vTaskStartScheduler+0xd0>)
 8004720:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8004722:	4b15      	ldr	r3, [pc, #84]	; (8004778 <vTaskStartScheduler+0xd4>)
 8004724:	f04f 32ff 	mov.w	r2, #4294967295
 8004728:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800472a:	4b14      	ldr	r3, [pc, #80]	; (800477c <vTaskStartScheduler+0xd8>)
 800472c:	2201      	movs	r2, #1
 800472e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8004730:	4b13      	ldr	r3, [pc, #76]	; (8004780 <vTaskStartScheduler+0xdc>)
 8004732:	2200      	movs	r2, #0
 8004734:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8004736:	f001 f9f3 	bl	8005b20 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800473a:	e00e      	b.n	800475a <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800473c:	697b      	ldr	r3, [r7, #20]
 800473e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004742:	d10a      	bne.n	800475a <vTaskStartScheduler+0xb6>
	__asm volatile
 8004744:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004748:	f383 8811 	msr	BASEPRI, r3
 800474c:	f3bf 8f6f 	isb	sy
 8004750:	f3bf 8f4f 	dsb	sy
 8004754:	60fb      	str	r3, [r7, #12]
}
 8004756:	bf00      	nop
 8004758:	e7fe      	b.n	8004758 <vTaskStartScheduler+0xb4>
}
 800475a:	bf00      	nop
 800475c:	3718      	adds	r7, #24
 800475e:	46bd      	mov	sp, r7
 8004760:	bd80      	pop	{r7, pc}
 8004762:	bf00      	nop
 8004764:	08006550 	.word	0x08006550
 8004768:	08004db1 	.word	0x08004db1
 800476c:	20000e24 	.word	0x20000e24
 8004770:	2000092c 	.word	0x2000092c
 8004774:	20000088 	.word	0x20000088
 8004778:	20000e20 	.word	0x20000e20
 800477c:	20000e0c 	.word	0x20000e0c
 8004780:	20000e04 	.word	0x20000e04

08004784 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004784:	b480      	push	{r7}
 8004786:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8004788:	4b04      	ldr	r3, [pc, #16]	; (800479c <vTaskSuspendAll+0x18>)
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	3301      	adds	r3, #1
 800478e:	4a03      	ldr	r2, [pc, #12]	; (800479c <vTaskSuspendAll+0x18>)
 8004790:	6013      	str	r3, [r2, #0]
}
 8004792:	bf00      	nop
 8004794:	46bd      	mov	sp, r7
 8004796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800479a:	4770      	bx	lr
 800479c:	20000e28 	.word	0x20000e28

080047a0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80047a0:	b580      	push	{r7, lr}
 80047a2:	b084      	sub	sp, #16
 80047a4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80047a6:	2300      	movs	r3, #0
 80047a8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80047aa:	2300      	movs	r3, #0
 80047ac:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80047ae:	4b42      	ldr	r3, [pc, #264]	; (80048b8 <xTaskResumeAll+0x118>)
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d10a      	bne.n	80047cc <xTaskResumeAll+0x2c>
	__asm volatile
 80047b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047ba:	f383 8811 	msr	BASEPRI, r3
 80047be:	f3bf 8f6f 	isb	sy
 80047c2:	f3bf 8f4f 	dsb	sy
 80047c6:	603b      	str	r3, [r7, #0]
}
 80047c8:	bf00      	nop
 80047ca:	e7fe      	b.n	80047ca <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80047cc:	f001 fa4a 	bl	8005c64 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80047d0:	4b39      	ldr	r3, [pc, #228]	; (80048b8 <xTaskResumeAll+0x118>)
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	3b01      	subs	r3, #1
 80047d6:	4a38      	ldr	r2, [pc, #224]	; (80048b8 <xTaskResumeAll+0x118>)
 80047d8:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80047da:	4b37      	ldr	r3, [pc, #220]	; (80048b8 <xTaskResumeAll+0x118>)
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d162      	bne.n	80048a8 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80047e2:	4b36      	ldr	r3, [pc, #216]	; (80048bc <xTaskResumeAll+0x11c>)
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d05e      	beq.n	80048a8 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80047ea:	e02f      	b.n	800484c <xTaskResumeAll+0xac>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 80047ec:	4b34      	ldr	r3, [pc, #208]	; (80048c0 <xTaskResumeAll+0x120>)
 80047ee:	68db      	ldr	r3, [r3, #12]
 80047f0:	68db      	ldr	r3, [r3, #12]
 80047f2:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	3318      	adds	r3, #24
 80047f8:	4618      	mov	r0, r3
 80047fa:	f7fe fe3f 	bl	800347c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	3304      	adds	r3, #4
 8004802:	4618      	mov	r0, r3
 8004804:	f7fe fe3a 	bl	800347c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800480c:	4b2d      	ldr	r3, [pc, #180]	; (80048c4 <xTaskResumeAll+0x124>)
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	429a      	cmp	r2, r3
 8004812:	d903      	bls.n	800481c <xTaskResumeAll+0x7c>
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004818:	4a2a      	ldr	r2, [pc, #168]	; (80048c4 <xTaskResumeAll+0x124>)
 800481a:	6013      	str	r3, [r2, #0]
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004820:	4613      	mov	r3, r2
 8004822:	009b      	lsls	r3, r3, #2
 8004824:	4413      	add	r3, r2
 8004826:	009b      	lsls	r3, r3, #2
 8004828:	4a27      	ldr	r2, [pc, #156]	; (80048c8 <xTaskResumeAll+0x128>)
 800482a:	441a      	add	r2, r3
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	3304      	adds	r3, #4
 8004830:	4619      	mov	r1, r3
 8004832:	4610      	mov	r0, r2
 8004834:	f7fe fdc5 	bl	80033c2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800483c:	4b23      	ldr	r3, [pc, #140]	; (80048cc <xTaskResumeAll+0x12c>)
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004842:	429a      	cmp	r2, r3
 8004844:	d302      	bcc.n	800484c <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8004846:	4b22      	ldr	r3, [pc, #136]	; (80048d0 <xTaskResumeAll+0x130>)
 8004848:	2201      	movs	r2, #1
 800484a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800484c:	4b1c      	ldr	r3, [pc, #112]	; (80048c0 <xTaskResumeAll+0x120>)
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	2b00      	cmp	r3, #0
 8004852:	d1cb      	bne.n	80047ec <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	2b00      	cmp	r3, #0
 8004858:	d001      	beq.n	800485e <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800485a:	f000 fb63 	bl	8004f24 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800485e:	4b1d      	ldr	r3, [pc, #116]	; (80048d4 <xTaskResumeAll+0x134>)
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	2b00      	cmp	r3, #0
 8004868:	d010      	beq.n	800488c <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800486a:	f000 f847 	bl	80048fc <xTaskIncrementTick>
 800486e:	4603      	mov	r3, r0
 8004870:	2b00      	cmp	r3, #0
 8004872:	d002      	beq.n	800487a <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8004874:	4b16      	ldr	r3, [pc, #88]	; (80048d0 <xTaskResumeAll+0x130>)
 8004876:	2201      	movs	r2, #1
 8004878:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	3b01      	subs	r3, #1
 800487e:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	2b00      	cmp	r3, #0
 8004884:	d1f1      	bne.n	800486a <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 8004886:	4b13      	ldr	r3, [pc, #76]	; (80048d4 <xTaskResumeAll+0x134>)
 8004888:	2200      	movs	r2, #0
 800488a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800488c:	4b10      	ldr	r3, [pc, #64]	; (80048d0 <xTaskResumeAll+0x130>)
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	2b00      	cmp	r3, #0
 8004892:	d009      	beq.n	80048a8 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8004894:	2301      	movs	r3, #1
 8004896:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8004898:	4b0f      	ldr	r3, [pc, #60]	; (80048d8 <xTaskResumeAll+0x138>)
 800489a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800489e:	601a      	str	r2, [r3, #0]
 80048a0:	f3bf 8f4f 	dsb	sy
 80048a4:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80048a8:	f001 fa0c 	bl	8005cc4 <vPortExitCritical>

	return xAlreadyYielded;
 80048ac:	68bb      	ldr	r3, [r7, #8]
}
 80048ae:	4618      	mov	r0, r3
 80048b0:	3710      	adds	r7, #16
 80048b2:	46bd      	mov	sp, r7
 80048b4:	bd80      	pop	{r7, pc}
 80048b6:	bf00      	nop
 80048b8:	20000e28 	.word	0x20000e28
 80048bc:	20000e00 	.word	0x20000e00
 80048c0:	20000dc0 	.word	0x20000dc0
 80048c4:	20000e08 	.word	0x20000e08
 80048c8:	20000930 	.word	0x20000930
 80048cc:	2000092c 	.word	0x2000092c
 80048d0:	20000e14 	.word	0x20000e14
 80048d4:	20000e10 	.word	0x20000e10
 80048d8:	e000ed04 	.word	0xe000ed04

080048dc <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80048dc:	b480      	push	{r7}
 80048de:	b083      	sub	sp, #12
 80048e0:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80048e2:	4b05      	ldr	r3, [pc, #20]	; (80048f8 <xTaskGetTickCount+0x1c>)
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80048e8:	687b      	ldr	r3, [r7, #4]
}
 80048ea:	4618      	mov	r0, r3
 80048ec:	370c      	adds	r7, #12
 80048ee:	46bd      	mov	sp, r7
 80048f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048f4:	4770      	bx	lr
 80048f6:	bf00      	nop
 80048f8:	20000e04 	.word	0x20000e04

080048fc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80048fc:	b580      	push	{r7, lr}
 80048fe:	b086      	sub	sp, #24
 8004900:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8004902:	2300      	movs	r3, #0
 8004904:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004906:	4b51      	ldr	r3, [pc, #324]	; (8004a4c <xTaskIncrementTick+0x150>)
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	2b00      	cmp	r3, #0
 800490c:	f040 808e 	bne.w	8004a2c <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004910:	4b4f      	ldr	r3, [pc, #316]	; (8004a50 <xTaskIncrementTick+0x154>)
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	3301      	adds	r3, #1
 8004916:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8004918:	4a4d      	ldr	r2, [pc, #308]	; (8004a50 <xTaskIncrementTick+0x154>)
 800491a:	693b      	ldr	r3, [r7, #16]
 800491c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800491e:	693b      	ldr	r3, [r7, #16]
 8004920:	2b00      	cmp	r3, #0
 8004922:	d120      	bne.n	8004966 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8004924:	4b4b      	ldr	r3, [pc, #300]	; (8004a54 <xTaskIncrementTick+0x158>)
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	2b00      	cmp	r3, #0
 800492c:	d00a      	beq.n	8004944 <xTaskIncrementTick+0x48>
	__asm volatile
 800492e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004932:	f383 8811 	msr	BASEPRI, r3
 8004936:	f3bf 8f6f 	isb	sy
 800493a:	f3bf 8f4f 	dsb	sy
 800493e:	603b      	str	r3, [r7, #0]
}
 8004940:	bf00      	nop
 8004942:	e7fe      	b.n	8004942 <xTaskIncrementTick+0x46>
 8004944:	4b43      	ldr	r3, [pc, #268]	; (8004a54 <xTaskIncrementTick+0x158>)
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	60fb      	str	r3, [r7, #12]
 800494a:	4b43      	ldr	r3, [pc, #268]	; (8004a58 <xTaskIncrementTick+0x15c>)
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	4a41      	ldr	r2, [pc, #260]	; (8004a54 <xTaskIncrementTick+0x158>)
 8004950:	6013      	str	r3, [r2, #0]
 8004952:	4a41      	ldr	r2, [pc, #260]	; (8004a58 <xTaskIncrementTick+0x15c>)
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	6013      	str	r3, [r2, #0]
 8004958:	4b40      	ldr	r3, [pc, #256]	; (8004a5c <xTaskIncrementTick+0x160>)
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	3301      	adds	r3, #1
 800495e:	4a3f      	ldr	r2, [pc, #252]	; (8004a5c <xTaskIncrementTick+0x160>)
 8004960:	6013      	str	r3, [r2, #0]
 8004962:	f000 fadf 	bl	8004f24 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8004966:	4b3e      	ldr	r3, [pc, #248]	; (8004a60 <xTaskIncrementTick+0x164>)
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	693a      	ldr	r2, [r7, #16]
 800496c:	429a      	cmp	r2, r3
 800496e:	d34e      	bcc.n	8004a0e <xTaskIncrementTick+0x112>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004970:	4b38      	ldr	r3, [pc, #224]	; (8004a54 <xTaskIncrementTick+0x158>)
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	2b00      	cmp	r3, #0
 8004978:	d101      	bne.n	800497e <xTaskIncrementTick+0x82>
 800497a:	2301      	movs	r3, #1
 800497c:	e000      	b.n	8004980 <xTaskIncrementTick+0x84>
 800497e:	2300      	movs	r3, #0
 8004980:	2b00      	cmp	r3, #0
 8004982:	d004      	beq.n	800498e <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004984:	4b36      	ldr	r3, [pc, #216]	; (8004a60 <xTaskIncrementTick+0x164>)
 8004986:	f04f 32ff 	mov.w	r2, #4294967295
 800498a:	601a      	str	r2, [r3, #0]
					break;
 800498c:	e03f      	b.n	8004a0e <xTaskIncrementTick+0x112>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800498e:	4b31      	ldr	r3, [pc, #196]	; (8004a54 <xTaskIncrementTick+0x158>)
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	68db      	ldr	r3, [r3, #12]
 8004994:	68db      	ldr	r3, [r3, #12]
 8004996:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004998:	68bb      	ldr	r3, [r7, #8]
 800499a:	685b      	ldr	r3, [r3, #4]
 800499c:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800499e:	693a      	ldr	r2, [r7, #16]
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	429a      	cmp	r2, r3
 80049a4:	d203      	bcs.n	80049ae <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80049a6:	4a2e      	ldr	r2, [pc, #184]	; (8004a60 <xTaskIncrementTick+0x164>)
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	6013      	str	r3, [r2, #0]
						break;
 80049ac:	e02f      	b.n	8004a0e <xTaskIncrementTick+0x112>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80049ae:	68bb      	ldr	r3, [r7, #8]
 80049b0:	3304      	adds	r3, #4
 80049b2:	4618      	mov	r0, r3
 80049b4:	f7fe fd62 	bl	800347c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80049b8:	68bb      	ldr	r3, [r7, #8]
 80049ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d004      	beq.n	80049ca <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80049c0:	68bb      	ldr	r3, [r7, #8]
 80049c2:	3318      	adds	r3, #24
 80049c4:	4618      	mov	r0, r3
 80049c6:	f7fe fd59 	bl	800347c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80049ca:	68bb      	ldr	r3, [r7, #8]
 80049cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80049ce:	4b25      	ldr	r3, [pc, #148]	; (8004a64 <xTaskIncrementTick+0x168>)
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	429a      	cmp	r2, r3
 80049d4:	d903      	bls.n	80049de <xTaskIncrementTick+0xe2>
 80049d6:	68bb      	ldr	r3, [r7, #8]
 80049d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049da:	4a22      	ldr	r2, [pc, #136]	; (8004a64 <xTaskIncrementTick+0x168>)
 80049dc:	6013      	str	r3, [r2, #0]
 80049de:	68bb      	ldr	r3, [r7, #8]
 80049e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80049e2:	4613      	mov	r3, r2
 80049e4:	009b      	lsls	r3, r3, #2
 80049e6:	4413      	add	r3, r2
 80049e8:	009b      	lsls	r3, r3, #2
 80049ea:	4a1f      	ldr	r2, [pc, #124]	; (8004a68 <xTaskIncrementTick+0x16c>)
 80049ec:	441a      	add	r2, r3
 80049ee:	68bb      	ldr	r3, [r7, #8]
 80049f0:	3304      	adds	r3, #4
 80049f2:	4619      	mov	r1, r3
 80049f4:	4610      	mov	r0, r2
 80049f6:	f7fe fce4 	bl	80033c2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80049fa:	68bb      	ldr	r3, [r7, #8]
 80049fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80049fe:	4b1b      	ldr	r3, [pc, #108]	; (8004a6c <xTaskIncrementTick+0x170>)
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a04:	429a      	cmp	r2, r3
 8004a06:	d3b3      	bcc.n	8004970 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8004a08:	2301      	movs	r3, #1
 8004a0a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004a0c:	e7b0      	b.n	8004970 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004a0e:	4b17      	ldr	r3, [pc, #92]	; (8004a6c <xTaskIncrementTick+0x170>)
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a14:	4914      	ldr	r1, [pc, #80]	; (8004a68 <xTaskIncrementTick+0x16c>)
 8004a16:	4613      	mov	r3, r2
 8004a18:	009b      	lsls	r3, r3, #2
 8004a1a:	4413      	add	r3, r2
 8004a1c:	009b      	lsls	r3, r3, #2
 8004a1e:	440b      	add	r3, r1
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	2b01      	cmp	r3, #1
 8004a24:	d907      	bls.n	8004a36 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8004a26:	2301      	movs	r3, #1
 8004a28:	617b      	str	r3, [r7, #20]
 8004a2a:	e004      	b.n	8004a36 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8004a2c:	4b10      	ldr	r3, [pc, #64]	; (8004a70 <xTaskIncrementTick+0x174>)
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	3301      	adds	r3, #1
 8004a32:	4a0f      	ldr	r2, [pc, #60]	; (8004a70 <xTaskIncrementTick+0x174>)
 8004a34:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8004a36:	4b0f      	ldr	r3, [pc, #60]	; (8004a74 <xTaskIncrementTick+0x178>)
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d001      	beq.n	8004a42 <xTaskIncrementTick+0x146>
		{
			xSwitchRequired = pdTRUE;
 8004a3e:	2301      	movs	r3, #1
 8004a40:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8004a42:	697b      	ldr	r3, [r7, #20]
}
 8004a44:	4618      	mov	r0, r3
 8004a46:	3718      	adds	r7, #24
 8004a48:	46bd      	mov	sp, r7
 8004a4a:	bd80      	pop	{r7, pc}
 8004a4c:	20000e28 	.word	0x20000e28
 8004a50:	20000e04 	.word	0x20000e04
 8004a54:	20000db8 	.word	0x20000db8
 8004a58:	20000dbc 	.word	0x20000dbc
 8004a5c:	20000e18 	.word	0x20000e18
 8004a60:	20000e20 	.word	0x20000e20
 8004a64:	20000e08 	.word	0x20000e08
 8004a68:	20000930 	.word	0x20000930
 8004a6c:	2000092c 	.word	0x2000092c
 8004a70:	20000e10 	.word	0x20000e10
 8004a74:	20000e14 	.word	0x20000e14

08004a78 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004a78:	b480      	push	{r7}
 8004a7a:	b085      	sub	sp, #20
 8004a7c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004a7e:	4b2a      	ldr	r3, [pc, #168]	; (8004b28 <vTaskSwitchContext+0xb0>)
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d003      	beq.n	8004a8e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8004a86:	4b29      	ldr	r3, [pc, #164]	; (8004b2c <vTaskSwitchContext+0xb4>)
 8004a88:	2201      	movs	r2, #1
 8004a8a:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004a8c:	e046      	b.n	8004b1c <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 8004a8e:	4b27      	ldr	r3, [pc, #156]	; (8004b2c <vTaskSwitchContext+0xb4>)
 8004a90:	2200      	movs	r2, #0
 8004a92:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8004a94:	4b26      	ldr	r3, [pc, #152]	; (8004b30 <vTaskSwitchContext+0xb8>)
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	60fb      	str	r3, [r7, #12]
 8004a9a:	e010      	b.n	8004abe <vTaskSwitchContext+0x46>
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d10a      	bne.n	8004ab8 <vTaskSwitchContext+0x40>
	__asm volatile
 8004aa2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004aa6:	f383 8811 	msr	BASEPRI, r3
 8004aaa:	f3bf 8f6f 	isb	sy
 8004aae:	f3bf 8f4f 	dsb	sy
 8004ab2:	607b      	str	r3, [r7, #4]
}
 8004ab4:	bf00      	nop
 8004ab6:	e7fe      	b.n	8004ab6 <vTaskSwitchContext+0x3e>
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	3b01      	subs	r3, #1
 8004abc:	60fb      	str	r3, [r7, #12]
 8004abe:	491d      	ldr	r1, [pc, #116]	; (8004b34 <vTaskSwitchContext+0xbc>)
 8004ac0:	68fa      	ldr	r2, [r7, #12]
 8004ac2:	4613      	mov	r3, r2
 8004ac4:	009b      	lsls	r3, r3, #2
 8004ac6:	4413      	add	r3, r2
 8004ac8:	009b      	lsls	r3, r3, #2
 8004aca:	440b      	add	r3, r1
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d0e4      	beq.n	8004a9c <vTaskSwitchContext+0x24>
 8004ad2:	68fa      	ldr	r2, [r7, #12]
 8004ad4:	4613      	mov	r3, r2
 8004ad6:	009b      	lsls	r3, r3, #2
 8004ad8:	4413      	add	r3, r2
 8004ada:	009b      	lsls	r3, r3, #2
 8004adc:	4a15      	ldr	r2, [pc, #84]	; (8004b34 <vTaskSwitchContext+0xbc>)
 8004ade:	4413      	add	r3, r2
 8004ae0:	60bb      	str	r3, [r7, #8]
 8004ae2:	68bb      	ldr	r3, [r7, #8]
 8004ae4:	685b      	ldr	r3, [r3, #4]
 8004ae6:	685a      	ldr	r2, [r3, #4]
 8004ae8:	68bb      	ldr	r3, [r7, #8]
 8004aea:	605a      	str	r2, [r3, #4]
 8004aec:	68bb      	ldr	r3, [r7, #8]
 8004aee:	685a      	ldr	r2, [r3, #4]
 8004af0:	68bb      	ldr	r3, [r7, #8]
 8004af2:	3308      	adds	r3, #8
 8004af4:	429a      	cmp	r2, r3
 8004af6:	d104      	bne.n	8004b02 <vTaskSwitchContext+0x8a>
 8004af8:	68bb      	ldr	r3, [r7, #8]
 8004afa:	685b      	ldr	r3, [r3, #4]
 8004afc:	685a      	ldr	r2, [r3, #4]
 8004afe:	68bb      	ldr	r3, [r7, #8]
 8004b00:	605a      	str	r2, [r3, #4]
 8004b02:	68bb      	ldr	r3, [r7, #8]
 8004b04:	685b      	ldr	r3, [r3, #4]
 8004b06:	68db      	ldr	r3, [r3, #12]
 8004b08:	4a0b      	ldr	r2, [pc, #44]	; (8004b38 <vTaskSwitchContext+0xc0>)
 8004b0a:	6013      	str	r3, [r2, #0]
 8004b0c:	4a08      	ldr	r2, [pc, #32]	; (8004b30 <vTaskSwitchContext+0xb8>)
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8004b12:	4b09      	ldr	r3, [pc, #36]	; (8004b38 <vTaskSwitchContext+0xc0>)
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	3354      	adds	r3, #84	; 0x54
 8004b18:	4a08      	ldr	r2, [pc, #32]	; (8004b3c <vTaskSwitchContext+0xc4>)
 8004b1a:	6013      	str	r3, [r2, #0]
}
 8004b1c:	bf00      	nop
 8004b1e:	3714      	adds	r7, #20
 8004b20:	46bd      	mov	sp, r7
 8004b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b26:	4770      	bx	lr
 8004b28:	20000e28 	.word	0x20000e28
 8004b2c:	20000e14 	.word	0x20000e14
 8004b30:	20000e08 	.word	0x20000e08
 8004b34:	20000930 	.word	0x20000930
 8004b38:	2000092c 	.word	0x2000092c
 8004b3c:	20000088 	.word	0x20000088

08004b40 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8004b40:	b580      	push	{r7, lr}
 8004b42:	b084      	sub	sp, #16
 8004b44:	af00      	add	r7, sp, #0
 8004b46:	6078      	str	r0, [r7, #4]
 8004b48:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d10a      	bne.n	8004b66 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8004b50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b54:	f383 8811 	msr	BASEPRI, r3
 8004b58:	f3bf 8f6f 	isb	sy
 8004b5c:	f3bf 8f4f 	dsb	sy
 8004b60:	60fb      	str	r3, [r7, #12]
}
 8004b62:	bf00      	nop
 8004b64:	e7fe      	b.n	8004b64 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004b66:	4b07      	ldr	r3, [pc, #28]	; (8004b84 <vTaskPlaceOnEventList+0x44>)
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	3318      	adds	r3, #24
 8004b6c:	4619      	mov	r1, r3
 8004b6e:	6878      	ldr	r0, [r7, #4]
 8004b70:	f7fe fc4b 	bl	800340a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004b74:	2101      	movs	r1, #1
 8004b76:	6838      	ldr	r0, [r7, #0]
 8004b78:	f000 fb8e 	bl	8005298 <prvAddCurrentTaskToDelayedList>
}
 8004b7c:	bf00      	nop
 8004b7e:	3710      	adds	r7, #16
 8004b80:	46bd      	mov	sp, r7
 8004b82:	bd80      	pop	{r7, pc}
 8004b84:	2000092c 	.word	0x2000092c

08004b88 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004b88:	b580      	push	{r7, lr}
 8004b8a:	b086      	sub	sp, #24
 8004b8c:	af00      	add	r7, sp, #0
 8004b8e:	60f8      	str	r0, [r7, #12]
 8004b90:	60b9      	str	r1, [r7, #8]
 8004b92:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d10a      	bne.n	8004bb0 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8004b9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b9e:	f383 8811 	msr	BASEPRI, r3
 8004ba2:	f3bf 8f6f 	isb	sy
 8004ba6:	f3bf 8f4f 	dsb	sy
 8004baa:	617b      	str	r3, [r7, #20]
}
 8004bac:	bf00      	nop
 8004bae:	e7fe      	b.n	8004bae <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004bb0:	4b0a      	ldr	r3, [pc, #40]	; (8004bdc <vTaskPlaceOnEventListRestricted+0x54>)
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	3318      	adds	r3, #24
 8004bb6:	4619      	mov	r1, r3
 8004bb8:	68f8      	ldr	r0, [r7, #12]
 8004bba:	f7fe fc02 	bl	80033c2 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d002      	beq.n	8004bca <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8004bc4:	f04f 33ff 	mov.w	r3, #4294967295
 8004bc8:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8004bca:	6879      	ldr	r1, [r7, #4]
 8004bcc:	68b8      	ldr	r0, [r7, #8]
 8004bce:	f000 fb63 	bl	8005298 <prvAddCurrentTaskToDelayedList>
	}
 8004bd2:	bf00      	nop
 8004bd4:	3718      	adds	r7, #24
 8004bd6:	46bd      	mov	sp, r7
 8004bd8:	bd80      	pop	{r7, pc}
 8004bda:	bf00      	nop
 8004bdc:	2000092c 	.word	0x2000092c

08004be0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8004be0:	b580      	push	{r7, lr}
 8004be2:	b086      	sub	sp, #24
 8004be4:	af00      	add	r7, sp, #0
 8004be6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	68db      	ldr	r3, [r3, #12]
 8004bec:	68db      	ldr	r3, [r3, #12]
 8004bee:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8004bf0:	693b      	ldr	r3, [r7, #16]
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d10a      	bne.n	8004c0c <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8004bf6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bfa:	f383 8811 	msr	BASEPRI, r3
 8004bfe:	f3bf 8f6f 	isb	sy
 8004c02:	f3bf 8f4f 	dsb	sy
 8004c06:	60fb      	str	r3, [r7, #12]
}
 8004c08:	bf00      	nop
 8004c0a:	e7fe      	b.n	8004c0a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8004c0c:	693b      	ldr	r3, [r7, #16]
 8004c0e:	3318      	adds	r3, #24
 8004c10:	4618      	mov	r0, r3
 8004c12:	f7fe fc33 	bl	800347c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004c16:	4b1e      	ldr	r3, [pc, #120]	; (8004c90 <xTaskRemoveFromEventList+0xb0>)
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d11d      	bne.n	8004c5a <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8004c1e:	693b      	ldr	r3, [r7, #16]
 8004c20:	3304      	adds	r3, #4
 8004c22:	4618      	mov	r0, r3
 8004c24:	f7fe fc2a 	bl	800347c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8004c28:	693b      	ldr	r3, [r7, #16]
 8004c2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c2c:	4b19      	ldr	r3, [pc, #100]	; (8004c94 <xTaskRemoveFromEventList+0xb4>)
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	429a      	cmp	r2, r3
 8004c32:	d903      	bls.n	8004c3c <xTaskRemoveFromEventList+0x5c>
 8004c34:	693b      	ldr	r3, [r7, #16]
 8004c36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c38:	4a16      	ldr	r2, [pc, #88]	; (8004c94 <xTaskRemoveFromEventList+0xb4>)
 8004c3a:	6013      	str	r3, [r2, #0]
 8004c3c:	693b      	ldr	r3, [r7, #16]
 8004c3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c40:	4613      	mov	r3, r2
 8004c42:	009b      	lsls	r3, r3, #2
 8004c44:	4413      	add	r3, r2
 8004c46:	009b      	lsls	r3, r3, #2
 8004c48:	4a13      	ldr	r2, [pc, #76]	; (8004c98 <xTaskRemoveFromEventList+0xb8>)
 8004c4a:	441a      	add	r2, r3
 8004c4c:	693b      	ldr	r3, [r7, #16]
 8004c4e:	3304      	adds	r3, #4
 8004c50:	4619      	mov	r1, r3
 8004c52:	4610      	mov	r0, r2
 8004c54:	f7fe fbb5 	bl	80033c2 <vListInsertEnd>
 8004c58:	e005      	b.n	8004c66 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8004c5a:	693b      	ldr	r3, [r7, #16]
 8004c5c:	3318      	adds	r3, #24
 8004c5e:	4619      	mov	r1, r3
 8004c60:	480e      	ldr	r0, [pc, #56]	; (8004c9c <xTaskRemoveFromEventList+0xbc>)
 8004c62:	f7fe fbae 	bl	80033c2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004c66:	693b      	ldr	r3, [r7, #16]
 8004c68:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c6a:	4b0d      	ldr	r3, [pc, #52]	; (8004ca0 <xTaskRemoveFromEventList+0xc0>)
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c70:	429a      	cmp	r2, r3
 8004c72:	d905      	bls.n	8004c80 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8004c74:	2301      	movs	r3, #1
 8004c76:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8004c78:	4b0a      	ldr	r3, [pc, #40]	; (8004ca4 <xTaskRemoveFromEventList+0xc4>)
 8004c7a:	2201      	movs	r2, #1
 8004c7c:	601a      	str	r2, [r3, #0]
 8004c7e:	e001      	b.n	8004c84 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8004c80:	2300      	movs	r3, #0
 8004c82:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8004c84:	697b      	ldr	r3, [r7, #20]
}
 8004c86:	4618      	mov	r0, r3
 8004c88:	3718      	adds	r7, #24
 8004c8a:	46bd      	mov	sp, r7
 8004c8c:	bd80      	pop	{r7, pc}
 8004c8e:	bf00      	nop
 8004c90:	20000e28 	.word	0x20000e28
 8004c94:	20000e08 	.word	0x20000e08
 8004c98:	20000930 	.word	0x20000930
 8004c9c:	20000dc0 	.word	0x20000dc0
 8004ca0:	2000092c 	.word	0x2000092c
 8004ca4:	20000e14 	.word	0x20000e14

08004ca8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8004ca8:	b480      	push	{r7}
 8004caa:	b083      	sub	sp, #12
 8004cac:	af00      	add	r7, sp, #0
 8004cae:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8004cb0:	4b06      	ldr	r3, [pc, #24]	; (8004ccc <vTaskInternalSetTimeOutState+0x24>)
 8004cb2:	681a      	ldr	r2, [r3, #0]
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8004cb8:	4b05      	ldr	r3, [pc, #20]	; (8004cd0 <vTaskInternalSetTimeOutState+0x28>)
 8004cba:	681a      	ldr	r2, [r3, #0]
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	605a      	str	r2, [r3, #4]
}
 8004cc0:	bf00      	nop
 8004cc2:	370c      	adds	r7, #12
 8004cc4:	46bd      	mov	sp, r7
 8004cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cca:	4770      	bx	lr
 8004ccc:	20000e18 	.word	0x20000e18
 8004cd0:	20000e04 	.word	0x20000e04

08004cd4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8004cd4:	b580      	push	{r7, lr}
 8004cd6:	b088      	sub	sp, #32
 8004cd8:	af00      	add	r7, sp, #0
 8004cda:	6078      	str	r0, [r7, #4]
 8004cdc:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d10a      	bne.n	8004cfa <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8004ce4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ce8:	f383 8811 	msr	BASEPRI, r3
 8004cec:	f3bf 8f6f 	isb	sy
 8004cf0:	f3bf 8f4f 	dsb	sy
 8004cf4:	613b      	str	r3, [r7, #16]
}
 8004cf6:	bf00      	nop
 8004cf8:	e7fe      	b.n	8004cf8 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8004cfa:	683b      	ldr	r3, [r7, #0]
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d10a      	bne.n	8004d16 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8004d00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d04:	f383 8811 	msr	BASEPRI, r3
 8004d08:	f3bf 8f6f 	isb	sy
 8004d0c:	f3bf 8f4f 	dsb	sy
 8004d10:	60fb      	str	r3, [r7, #12]
}
 8004d12:	bf00      	nop
 8004d14:	e7fe      	b.n	8004d14 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8004d16:	f000 ffa5 	bl	8005c64 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8004d1a:	4b1d      	ldr	r3, [pc, #116]	; (8004d90 <xTaskCheckForTimeOut+0xbc>)
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	685b      	ldr	r3, [r3, #4]
 8004d24:	69ba      	ldr	r2, [r7, #24]
 8004d26:	1ad3      	subs	r3, r2, r3
 8004d28:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8004d2a:	683b      	ldr	r3, [r7, #0]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d32:	d102      	bne.n	8004d3a <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8004d34:	2300      	movs	r3, #0
 8004d36:	61fb      	str	r3, [r7, #28]
 8004d38:	e023      	b.n	8004d82 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	681a      	ldr	r2, [r3, #0]
 8004d3e:	4b15      	ldr	r3, [pc, #84]	; (8004d94 <xTaskCheckForTimeOut+0xc0>)
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	429a      	cmp	r2, r3
 8004d44:	d007      	beq.n	8004d56 <xTaskCheckForTimeOut+0x82>
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	685b      	ldr	r3, [r3, #4]
 8004d4a:	69ba      	ldr	r2, [r7, #24]
 8004d4c:	429a      	cmp	r2, r3
 8004d4e:	d302      	bcc.n	8004d56 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8004d50:	2301      	movs	r3, #1
 8004d52:	61fb      	str	r3, [r7, #28]
 8004d54:	e015      	b.n	8004d82 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8004d56:	683b      	ldr	r3, [r7, #0]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	697a      	ldr	r2, [r7, #20]
 8004d5c:	429a      	cmp	r2, r3
 8004d5e:	d20b      	bcs.n	8004d78 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8004d60:	683b      	ldr	r3, [r7, #0]
 8004d62:	681a      	ldr	r2, [r3, #0]
 8004d64:	697b      	ldr	r3, [r7, #20]
 8004d66:	1ad2      	subs	r2, r2, r3
 8004d68:	683b      	ldr	r3, [r7, #0]
 8004d6a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8004d6c:	6878      	ldr	r0, [r7, #4]
 8004d6e:	f7ff ff9b 	bl	8004ca8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8004d72:	2300      	movs	r3, #0
 8004d74:	61fb      	str	r3, [r7, #28]
 8004d76:	e004      	b.n	8004d82 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8004d78:	683b      	ldr	r3, [r7, #0]
 8004d7a:	2200      	movs	r2, #0
 8004d7c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8004d7e:	2301      	movs	r3, #1
 8004d80:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8004d82:	f000 ff9f 	bl	8005cc4 <vPortExitCritical>

	return xReturn;
 8004d86:	69fb      	ldr	r3, [r7, #28]
}
 8004d88:	4618      	mov	r0, r3
 8004d8a:	3720      	adds	r7, #32
 8004d8c:	46bd      	mov	sp, r7
 8004d8e:	bd80      	pop	{r7, pc}
 8004d90:	20000e04 	.word	0x20000e04
 8004d94:	20000e18 	.word	0x20000e18

08004d98 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8004d98:	b480      	push	{r7}
 8004d9a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8004d9c:	4b03      	ldr	r3, [pc, #12]	; (8004dac <vTaskMissedYield+0x14>)
 8004d9e:	2201      	movs	r2, #1
 8004da0:	601a      	str	r2, [r3, #0]
}
 8004da2:	bf00      	nop
 8004da4:	46bd      	mov	sp, r7
 8004da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004daa:	4770      	bx	lr
 8004dac:	20000e14 	.word	0x20000e14

08004db0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004db0:	b580      	push	{r7, lr}
 8004db2:	b082      	sub	sp, #8
 8004db4:	af00      	add	r7, sp, #0
 8004db6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004db8:	f000 f852 	bl	8004e60 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004dbc:	4b06      	ldr	r3, [pc, #24]	; (8004dd8 <prvIdleTask+0x28>)
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	2b01      	cmp	r3, #1
 8004dc2:	d9f9      	bls.n	8004db8 <prvIdleTask+0x8>
			{
				taskYIELD();
 8004dc4:	4b05      	ldr	r3, [pc, #20]	; (8004ddc <prvIdleTask+0x2c>)
 8004dc6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004dca:	601a      	str	r2, [r3, #0]
 8004dcc:	f3bf 8f4f 	dsb	sy
 8004dd0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8004dd4:	e7f0      	b.n	8004db8 <prvIdleTask+0x8>
 8004dd6:	bf00      	nop
 8004dd8:	20000930 	.word	0x20000930
 8004ddc:	e000ed04 	.word	0xe000ed04

08004de0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004de0:	b580      	push	{r7, lr}
 8004de2:	b082      	sub	sp, #8
 8004de4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004de6:	2300      	movs	r3, #0
 8004de8:	607b      	str	r3, [r7, #4]
 8004dea:	e00c      	b.n	8004e06 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004dec:	687a      	ldr	r2, [r7, #4]
 8004dee:	4613      	mov	r3, r2
 8004df0:	009b      	lsls	r3, r3, #2
 8004df2:	4413      	add	r3, r2
 8004df4:	009b      	lsls	r3, r3, #2
 8004df6:	4a12      	ldr	r2, [pc, #72]	; (8004e40 <prvInitialiseTaskLists+0x60>)
 8004df8:	4413      	add	r3, r2
 8004dfa:	4618      	mov	r0, r3
 8004dfc:	f7fe fab4 	bl	8003368 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	3301      	adds	r3, #1
 8004e04:	607b      	str	r3, [r7, #4]
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	2b37      	cmp	r3, #55	; 0x37
 8004e0a:	d9ef      	bls.n	8004dec <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004e0c:	480d      	ldr	r0, [pc, #52]	; (8004e44 <prvInitialiseTaskLists+0x64>)
 8004e0e:	f7fe faab 	bl	8003368 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8004e12:	480d      	ldr	r0, [pc, #52]	; (8004e48 <prvInitialiseTaskLists+0x68>)
 8004e14:	f7fe faa8 	bl	8003368 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004e18:	480c      	ldr	r0, [pc, #48]	; (8004e4c <prvInitialiseTaskLists+0x6c>)
 8004e1a:	f7fe faa5 	bl	8003368 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8004e1e:	480c      	ldr	r0, [pc, #48]	; (8004e50 <prvInitialiseTaskLists+0x70>)
 8004e20:	f7fe faa2 	bl	8003368 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004e24:	480b      	ldr	r0, [pc, #44]	; (8004e54 <prvInitialiseTaskLists+0x74>)
 8004e26:	f7fe fa9f 	bl	8003368 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8004e2a:	4b0b      	ldr	r3, [pc, #44]	; (8004e58 <prvInitialiseTaskLists+0x78>)
 8004e2c:	4a05      	ldr	r2, [pc, #20]	; (8004e44 <prvInitialiseTaskLists+0x64>)
 8004e2e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004e30:	4b0a      	ldr	r3, [pc, #40]	; (8004e5c <prvInitialiseTaskLists+0x7c>)
 8004e32:	4a05      	ldr	r2, [pc, #20]	; (8004e48 <prvInitialiseTaskLists+0x68>)
 8004e34:	601a      	str	r2, [r3, #0]
}
 8004e36:	bf00      	nop
 8004e38:	3708      	adds	r7, #8
 8004e3a:	46bd      	mov	sp, r7
 8004e3c:	bd80      	pop	{r7, pc}
 8004e3e:	bf00      	nop
 8004e40:	20000930 	.word	0x20000930
 8004e44:	20000d90 	.word	0x20000d90
 8004e48:	20000da4 	.word	0x20000da4
 8004e4c:	20000dc0 	.word	0x20000dc0
 8004e50:	20000dd4 	.word	0x20000dd4
 8004e54:	20000dec 	.word	0x20000dec
 8004e58:	20000db8 	.word	0x20000db8
 8004e5c:	20000dbc 	.word	0x20000dbc

08004e60 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004e60:	b580      	push	{r7, lr}
 8004e62:	b082      	sub	sp, #8
 8004e64:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004e66:	e019      	b.n	8004e9c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8004e68:	f000 fefc 	bl	8005c64 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8004e6c:	4b10      	ldr	r3, [pc, #64]	; (8004eb0 <prvCheckTasksWaitingTermination+0x50>)
 8004e6e:	68db      	ldr	r3, [r3, #12]
 8004e70:	68db      	ldr	r3, [r3, #12]
 8004e72:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	3304      	adds	r3, #4
 8004e78:	4618      	mov	r0, r3
 8004e7a:	f7fe faff 	bl	800347c <uxListRemove>
				--uxCurrentNumberOfTasks;
 8004e7e:	4b0d      	ldr	r3, [pc, #52]	; (8004eb4 <prvCheckTasksWaitingTermination+0x54>)
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	3b01      	subs	r3, #1
 8004e84:	4a0b      	ldr	r2, [pc, #44]	; (8004eb4 <prvCheckTasksWaitingTermination+0x54>)
 8004e86:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004e88:	4b0b      	ldr	r3, [pc, #44]	; (8004eb8 <prvCheckTasksWaitingTermination+0x58>)
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	3b01      	subs	r3, #1
 8004e8e:	4a0a      	ldr	r2, [pc, #40]	; (8004eb8 <prvCheckTasksWaitingTermination+0x58>)
 8004e90:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8004e92:	f000 ff17 	bl	8005cc4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8004e96:	6878      	ldr	r0, [r7, #4]
 8004e98:	f000 f810 	bl	8004ebc <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004e9c:	4b06      	ldr	r3, [pc, #24]	; (8004eb8 <prvCheckTasksWaitingTermination+0x58>)
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	d1e1      	bne.n	8004e68 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004ea4:	bf00      	nop
 8004ea6:	bf00      	nop
 8004ea8:	3708      	adds	r7, #8
 8004eaa:	46bd      	mov	sp, r7
 8004eac:	bd80      	pop	{r7, pc}
 8004eae:	bf00      	nop
 8004eb0:	20000dd4 	.word	0x20000dd4
 8004eb4:	20000e00 	.word	0x20000e00
 8004eb8:	20000de8 	.word	0x20000de8

08004ebc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004ebc:	b580      	push	{r7, lr}
 8004ebe:	b084      	sub	sp, #16
 8004ec0:	af00      	add	r7, sp, #0
 8004ec2:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	3354      	adds	r3, #84	; 0x54
 8004ec8:	4618      	mov	r0, r3
 8004eca:	f001 f9cf 	bl	800626c <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d108      	bne.n	8004eea <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004edc:	4618      	mov	r0, r3
 8004ede:	f001 f8a7 	bl	8006030 <vPortFree>
				vPortFree( pxTCB );
 8004ee2:	6878      	ldr	r0, [r7, #4]
 8004ee4:	f001 f8a4 	bl	8006030 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8004ee8:	e018      	b.n	8004f1c <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 8004ef0:	2b01      	cmp	r3, #1
 8004ef2:	d103      	bne.n	8004efc <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8004ef4:	6878      	ldr	r0, [r7, #4]
 8004ef6:	f001 f89b 	bl	8006030 <vPortFree>
	}
 8004efa:	e00f      	b.n	8004f1c <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 8004f02:	2b02      	cmp	r3, #2
 8004f04:	d00a      	beq.n	8004f1c <prvDeleteTCB+0x60>
	__asm volatile
 8004f06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f0a:	f383 8811 	msr	BASEPRI, r3
 8004f0e:	f3bf 8f6f 	isb	sy
 8004f12:	f3bf 8f4f 	dsb	sy
 8004f16:	60fb      	str	r3, [r7, #12]
}
 8004f18:	bf00      	nop
 8004f1a:	e7fe      	b.n	8004f1a <prvDeleteTCB+0x5e>
	}
 8004f1c:	bf00      	nop
 8004f1e:	3710      	adds	r7, #16
 8004f20:	46bd      	mov	sp, r7
 8004f22:	bd80      	pop	{r7, pc}

08004f24 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004f24:	b480      	push	{r7}
 8004f26:	b083      	sub	sp, #12
 8004f28:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004f2a:	4b0f      	ldr	r3, [pc, #60]	; (8004f68 <prvResetNextTaskUnblockTime+0x44>)
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d101      	bne.n	8004f38 <prvResetNextTaskUnblockTime+0x14>
 8004f34:	2301      	movs	r3, #1
 8004f36:	e000      	b.n	8004f3a <prvResetNextTaskUnblockTime+0x16>
 8004f38:	2300      	movs	r3, #0
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d004      	beq.n	8004f48 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004f3e:	4b0b      	ldr	r3, [pc, #44]	; (8004f6c <prvResetNextTaskUnblockTime+0x48>)
 8004f40:	f04f 32ff 	mov.w	r2, #4294967295
 8004f44:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004f46:	e008      	b.n	8004f5a <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8004f48:	4b07      	ldr	r3, [pc, #28]	; (8004f68 <prvResetNextTaskUnblockTime+0x44>)
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	68db      	ldr	r3, [r3, #12]
 8004f4e:	68db      	ldr	r3, [r3, #12]
 8004f50:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	685b      	ldr	r3, [r3, #4]
 8004f56:	4a05      	ldr	r2, [pc, #20]	; (8004f6c <prvResetNextTaskUnblockTime+0x48>)
 8004f58:	6013      	str	r3, [r2, #0]
}
 8004f5a:	bf00      	nop
 8004f5c:	370c      	adds	r7, #12
 8004f5e:	46bd      	mov	sp, r7
 8004f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f64:	4770      	bx	lr
 8004f66:	bf00      	nop
 8004f68:	20000db8 	.word	0x20000db8
 8004f6c:	20000e20 	.word	0x20000e20

08004f70 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8004f70:	b480      	push	{r7}
 8004f72:	b083      	sub	sp, #12
 8004f74:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8004f76:	4b0b      	ldr	r3, [pc, #44]	; (8004fa4 <xTaskGetSchedulerState+0x34>)
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d102      	bne.n	8004f84 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8004f7e:	2301      	movs	r3, #1
 8004f80:	607b      	str	r3, [r7, #4]
 8004f82:	e008      	b.n	8004f96 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004f84:	4b08      	ldr	r3, [pc, #32]	; (8004fa8 <xTaskGetSchedulerState+0x38>)
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d102      	bne.n	8004f92 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8004f8c:	2302      	movs	r3, #2
 8004f8e:	607b      	str	r3, [r7, #4]
 8004f90:	e001      	b.n	8004f96 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8004f92:	2300      	movs	r3, #0
 8004f94:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8004f96:	687b      	ldr	r3, [r7, #4]
	}
 8004f98:	4618      	mov	r0, r3
 8004f9a:	370c      	adds	r7, #12
 8004f9c:	46bd      	mov	sp, r7
 8004f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fa2:	4770      	bx	lr
 8004fa4:	20000e0c 	.word	0x20000e0c
 8004fa8:	20000e28 	.word	0x20000e28

08004fac <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8004fac:	b580      	push	{r7, lr}
 8004fae:	b084      	sub	sp, #16
 8004fb0:	af00      	add	r7, sp, #0
 8004fb2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = ( TCB_t * ) pxMutexHolder;
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8004fb8:	2300      	movs	r3, #0
 8004fba:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d056      	beq.n	8005070 <xTaskPriorityInherit+0xc4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8004fc2:	68bb      	ldr	r3, [r7, #8]
 8004fc4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004fc6:	4b2d      	ldr	r3, [pc, #180]	; (800507c <xTaskPriorityInherit+0xd0>)
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fcc:	429a      	cmp	r2, r3
 8004fce:	d246      	bcs.n	800505e <xTaskPriorityInherit+0xb2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8004fd0:	68bb      	ldr	r3, [r7, #8]
 8004fd2:	699b      	ldr	r3, [r3, #24]
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	db06      	blt.n	8004fe6 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004fd8:	4b28      	ldr	r3, [pc, #160]	; (800507c <xTaskPriorityInherit+0xd0>)
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fde:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8004fe2:	68bb      	ldr	r3, [r7, #8]
 8004fe4:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8004fe6:	68bb      	ldr	r3, [r7, #8]
 8004fe8:	6959      	ldr	r1, [r3, #20]
 8004fea:	68bb      	ldr	r3, [r7, #8]
 8004fec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004fee:	4613      	mov	r3, r2
 8004ff0:	009b      	lsls	r3, r3, #2
 8004ff2:	4413      	add	r3, r2
 8004ff4:	009b      	lsls	r3, r3, #2
 8004ff6:	4a22      	ldr	r2, [pc, #136]	; (8005080 <xTaskPriorityInherit+0xd4>)
 8004ff8:	4413      	add	r3, r2
 8004ffa:	4299      	cmp	r1, r3
 8004ffc:	d101      	bne.n	8005002 <xTaskPriorityInherit+0x56>
 8004ffe:	2301      	movs	r3, #1
 8005000:	e000      	b.n	8005004 <xTaskPriorityInherit+0x58>
 8005002:	2300      	movs	r3, #0
 8005004:	2b00      	cmp	r3, #0
 8005006:	d022      	beq.n	800504e <xTaskPriorityInherit+0xa2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005008:	68bb      	ldr	r3, [r7, #8]
 800500a:	3304      	adds	r3, #4
 800500c:	4618      	mov	r0, r3
 800500e:	f7fe fa35 	bl	800347c <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8005012:	4b1a      	ldr	r3, [pc, #104]	; (800507c <xTaskPriorityInherit+0xd0>)
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005018:	68bb      	ldr	r3, [r7, #8]
 800501a:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800501c:	68bb      	ldr	r3, [r7, #8]
 800501e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005020:	4b18      	ldr	r3, [pc, #96]	; (8005084 <xTaskPriorityInherit+0xd8>)
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	429a      	cmp	r2, r3
 8005026:	d903      	bls.n	8005030 <xTaskPriorityInherit+0x84>
 8005028:	68bb      	ldr	r3, [r7, #8]
 800502a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800502c:	4a15      	ldr	r2, [pc, #84]	; (8005084 <xTaskPriorityInherit+0xd8>)
 800502e:	6013      	str	r3, [r2, #0]
 8005030:	68bb      	ldr	r3, [r7, #8]
 8005032:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005034:	4613      	mov	r3, r2
 8005036:	009b      	lsls	r3, r3, #2
 8005038:	4413      	add	r3, r2
 800503a:	009b      	lsls	r3, r3, #2
 800503c:	4a10      	ldr	r2, [pc, #64]	; (8005080 <xTaskPriorityInherit+0xd4>)
 800503e:	441a      	add	r2, r3
 8005040:	68bb      	ldr	r3, [r7, #8]
 8005042:	3304      	adds	r3, #4
 8005044:	4619      	mov	r1, r3
 8005046:	4610      	mov	r0, r2
 8005048:	f7fe f9bb 	bl	80033c2 <vListInsertEnd>
 800504c:	e004      	b.n	8005058 <xTaskPriorityInherit+0xac>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800504e:	4b0b      	ldr	r3, [pc, #44]	; (800507c <xTaskPriorityInherit+0xd0>)
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005054:	68bb      	ldr	r3, [r7, #8]
 8005056:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8005058:	2301      	movs	r3, #1
 800505a:	60fb      	str	r3, [r7, #12]
 800505c:	e008      	b.n	8005070 <xTaskPriorityInherit+0xc4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800505e:	68bb      	ldr	r3, [r7, #8]
 8005060:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005062:	4b06      	ldr	r3, [pc, #24]	; (800507c <xTaskPriorityInherit+0xd0>)
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005068:	429a      	cmp	r2, r3
 800506a:	d201      	bcs.n	8005070 <xTaskPriorityInherit+0xc4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800506c:	2301      	movs	r3, #1
 800506e:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005070:	68fb      	ldr	r3, [r7, #12]
	}
 8005072:	4618      	mov	r0, r3
 8005074:	3710      	adds	r7, #16
 8005076:	46bd      	mov	sp, r7
 8005078:	bd80      	pop	{r7, pc}
 800507a:	bf00      	nop
 800507c:	2000092c 	.word	0x2000092c
 8005080:	20000930 	.word	0x20000930
 8005084:	20000e08 	.word	0x20000e08

08005088 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8005088:	b580      	push	{r7, lr}
 800508a:	b086      	sub	sp, #24
 800508c:	af00      	add	r7, sp, #0
 800508e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8005094:	2300      	movs	r3, #0
 8005096:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	2b00      	cmp	r3, #0
 800509c:	d056      	beq.n	800514c <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800509e:	4b2e      	ldr	r3, [pc, #184]	; (8005158 <xTaskPriorityDisinherit+0xd0>)
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	693a      	ldr	r2, [r7, #16]
 80050a4:	429a      	cmp	r2, r3
 80050a6:	d00a      	beq.n	80050be <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80050a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050ac:	f383 8811 	msr	BASEPRI, r3
 80050b0:	f3bf 8f6f 	isb	sy
 80050b4:	f3bf 8f4f 	dsb	sy
 80050b8:	60fb      	str	r3, [r7, #12]
}
 80050ba:	bf00      	nop
 80050bc:	e7fe      	b.n	80050bc <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80050be:	693b      	ldr	r3, [r7, #16]
 80050c0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d10a      	bne.n	80050dc <xTaskPriorityDisinherit+0x54>
	__asm volatile
 80050c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050ca:	f383 8811 	msr	BASEPRI, r3
 80050ce:	f3bf 8f6f 	isb	sy
 80050d2:	f3bf 8f4f 	dsb	sy
 80050d6:	60bb      	str	r3, [r7, #8]
}
 80050d8:	bf00      	nop
 80050da:	e7fe      	b.n	80050da <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 80050dc:	693b      	ldr	r3, [r7, #16]
 80050de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80050e0:	1e5a      	subs	r2, r3, #1
 80050e2:	693b      	ldr	r3, [r7, #16]
 80050e4:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80050e6:	693b      	ldr	r3, [r7, #16]
 80050e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80050ea:	693b      	ldr	r3, [r7, #16]
 80050ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80050ee:	429a      	cmp	r2, r3
 80050f0:	d02c      	beq.n	800514c <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80050f2:	693b      	ldr	r3, [r7, #16]
 80050f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d128      	bne.n	800514c <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80050fa:	693b      	ldr	r3, [r7, #16]
 80050fc:	3304      	adds	r3, #4
 80050fe:	4618      	mov	r0, r3
 8005100:	f7fe f9bc 	bl	800347c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8005104:	693b      	ldr	r3, [r7, #16]
 8005106:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005108:	693b      	ldr	r3, [r7, #16]
 800510a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800510c:	693b      	ldr	r3, [r7, #16]
 800510e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005110:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8005114:	693b      	ldr	r3, [r7, #16]
 8005116:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8005118:	693b      	ldr	r3, [r7, #16]
 800511a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800511c:	4b0f      	ldr	r3, [pc, #60]	; (800515c <xTaskPriorityDisinherit+0xd4>)
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	429a      	cmp	r2, r3
 8005122:	d903      	bls.n	800512c <xTaskPriorityDisinherit+0xa4>
 8005124:	693b      	ldr	r3, [r7, #16]
 8005126:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005128:	4a0c      	ldr	r2, [pc, #48]	; (800515c <xTaskPriorityDisinherit+0xd4>)
 800512a:	6013      	str	r3, [r2, #0]
 800512c:	693b      	ldr	r3, [r7, #16]
 800512e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005130:	4613      	mov	r3, r2
 8005132:	009b      	lsls	r3, r3, #2
 8005134:	4413      	add	r3, r2
 8005136:	009b      	lsls	r3, r3, #2
 8005138:	4a09      	ldr	r2, [pc, #36]	; (8005160 <xTaskPriorityDisinherit+0xd8>)
 800513a:	441a      	add	r2, r3
 800513c:	693b      	ldr	r3, [r7, #16]
 800513e:	3304      	adds	r3, #4
 8005140:	4619      	mov	r1, r3
 8005142:	4610      	mov	r0, r2
 8005144:	f7fe f93d 	bl	80033c2 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8005148:	2301      	movs	r3, #1
 800514a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800514c:	697b      	ldr	r3, [r7, #20]
	}
 800514e:	4618      	mov	r0, r3
 8005150:	3718      	adds	r7, #24
 8005152:	46bd      	mov	sp, r7
 8005154:	bd80      	pop	{r7, pc}
 8005156:	bf00      	nop
 8005158:	2000092c 	.word	0x2000092c
 800515c:	20000e08 	.word	0x20000e08
 8005160:	20000930 	.word	0x20000930

08005164 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8005164:	b580      	push	{r7, lr}
 8005166:	b088      	sub	sp, #32
 8005168:	af00      	add	r7, sp, #0
 800516a:	6078      	str	r0, [r7, #4]
 800516c:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8005172:	2301      	movs	r3, #1
 8005174:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	2b00      	cmp	r3, #0
 800517a:	d06f      	beq.n	800525c <vTaskPriorityDisinheritAfterTimeout+0xf8>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800517c:	69bb      	ldr	r3, [r7, #24]
 800517e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005180:	2b00      	cmp	r3, #0
 8005182:	d10a      	bne.n	800519a <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 8005184:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005188:	f383 8811 	msr	BASEPRI, r3
 800518c:	f3bf 8f6f 	isb	sy
 8005190:	f3bf 8f4f 	dsb	sy
 8005194:	60fb      	str	r3, [r7, #12]
}
 8005196:	bf00      	nop
 8005198:	e7fe      	b.n	8005198 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800519a:	69bb      	ldr	r3, [r7, #24]
 800519c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800519e:	683a      	ldr	r2, [r7, #0]
 80051a0:	429a      	cmp	r2, r3
 80051a2:	d902      	bls.n	80051aa <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 80051a4:	683b      	ldr	r3, [r7, #0]
 80051a6:	61fb      	str	r3, [r7, #28]
 80051a8:	e002      	b.n	80051b0 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 80051aa:	69bb      	ldr	r3, [r7, #24]
 80051ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80051ae:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 80051b0:	69bb      	ldr	r3, [r7, #24]
 80051b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051b4:	69fa      	ldr	r2, [r7, #28]
 80051b6:	429a      	cmp	r2, r3
 80051b8:	d050      	beq.n	800525c <vTaskPriorityDisinheritAfterTimeout+0xf8>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 80051ba:	69bb      	ldr	r3, [r7, #24]
 80051bc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80051be:	697a      	ldr	r2, [r7, #20]
 80051c0:	429a      	cmp	r2, r3
 80051c2:	d14b      	bne.n	800525c <vTaskPriorityDisinheritAfterTimeout+0xf8>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 80051c4:	4b27      	ldr	r3, [pc, #156]	; (8005264 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	69ba      	ldr	r2, [r7, #24]
 80051ca:	429a      	cmp	r2, r3
 80051cc:	d10a      	bne.n	80051e4 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 80051ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051d2:	f383 8811 	msr	BASEPRI, r3
 80051d6:	f3bf 8f6f 	isb	sy
 80051da:	f3bf 8f4f 	dsb	sy
 80051de:	60bb      	str	r3, [r7, #8]
}
 80051e0:	bf00      	nop
 80051e2:	e7fe      	b.n	80051e2 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 80051e4:	69bb      	ldr	r3, [r7, #24]
 80051e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051e8:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 80051ea:	69bb      	ldr	r3, [r7, #24]
 80051ec:	69fa      	ldr	r2, [r7, #28]
 80051ee:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80051f0:	69bb      	ldr	r3, [r7, #24]
 80051f2:	699b      	ldr	r3, [r3, #24]
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	db04      	blt.n	8005202 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80051f8:	69fb      	ldr	r3, [r7, #28]
 80051fa:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80051fe:	69bb      	ldr	r3, [r7, #24]
 8005200:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8005202:	69bb      	ldr	r3, [r7, #24]
 8005204:	6959      	ldr	r1, [r3, #20]
 8005206:	693a      	ldr	r2, [r7, #16]
 8005208:	4613      	mov	r3, r2
 800520a:	009b      	lsls	r3, r3, #2
 800520c:	4413      	add	r3, r2
 800520e:	009b      	lsls	r3, r3, #2
 8005210:	4a15      	ldr	r2, [pc, #84]	; (8005268 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8005212:	4413      	add	r3, r2
 8005214:	4299      	cmp	r1, r3
 8005216:	d101      	bne.n	800521c <vTaskPriorityDisinheritAfterTimeout+0xb8>
 8005218:	2301      	movs	r3, #1
 800521a:	e000      	b.n	800521e <vTaskPriorityDisinheritAfterTimeout+0xba>
 800521c:	2300      	movs	r3, #0
 800521e:	2b00      	cmp	r3, #0
 8005220:	d01c      	beq.n	800525c <vTaskPriorityDisinheritAfterTimeout+0xf8>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005222:	69bb      	ldr	r3, [r7, #24]
 8005224:	3304      	adds	r3, #4
 8005226:	4618      	mov	r0, r3
 8005228:	f7fe f928 	bl	800347c <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800522c:	69bb      	ldr	r3, [r7, #24]
 800522e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005230:	4b0e      	ldr	r3, [pc, #56]	; (800526c <vTaskPriorityDisinheritAfterTimeout+0x108>)
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	429a      	cmp	r2, r3
 8005236:	d903      	bls.n	8005240 <vTaskPriorityDisinheritAfterTimeout+0xdc>
 8005238:	69bb      	ldr	r3, [r7, #24]
 800523a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800523c:	4a0b      	ldr	r2, [pc, #44]	; (800526c <vTaskPriorityDisinheritAfterTimeout+0x108>)
 800523e:	6013      	str	r3, [r2, #0]
 8005240:	69bb      	ldr	r3, [r7, #24]
 8005242:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005244:	4613      	mov	r3, r2
 8005246:	009b      	lsls	r3, r3, #2
 8005248:	4413      	add	r3, r2
 800524a:	009b      	lsls	r3, r3, #2
 800524c:	4a06      	ldr	r2, [pc, #24]	; (8005268 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 800524e:	441a      	add	r2, r3
 8005250:	69bb      	ldr	r3, [r7, #24]
 8005252:	3304      	adds	r3, #4
 8005254:	4619      	mov	r1, r3
 8005256:	4610      	mov	r0, r2
 8005258:	f7fe f8b3 	bl	80033c2 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800525c:	bf00      	nop
 800525e:	3720      	adds	r7, #32
 8005260:	46bd      	mov	sp, r7
 8005262:	bd80      	pop	{r7, pc}
 8005264:	2000092c 	.word	0x2000092c
 8005268:	20000930 	.word	0x20000930
 800526c:	20000e08 	.word	0x20000e08

08005270 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
 8005270:	b480      	push	{r7}
 8005272:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8005274:	4b07      	ldr	r3, [pc, #28]	; (8005294 <pvTaskIncrementMutexHeldCount+0x24>)
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	2b00      	cmp	r3, #0
 800527a:	d004      	beq.n	8005286 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800527c:	4b05      	ldr	r3, [pc, #20]	; (8005294 <pvTaskIncrementMutexHeldCount+0x24>)
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005282:	3201      	adds	r2, #1
 8005284:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 8005286:	4b03      	ldr	r3, [pc, #12]	; (8005294 <pvTaskIncrementMutexHeldCount+0x24>)
 8005288:	681b      	ldr	r3, [r3, #0]
	}
 800528a:	4618      	mov	r0, r3
 800528c:	46bd      	mov	sp, r7
 800528e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005292:	4770      	bx	lr
 8005294:	2000092c 	.word	0x2000092c

08005298 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005298:	b580      	push	{r7, lr}
 800529a:	b084      	sub	sp, #16
 800529c:	af00      	add	r7, sp, #0
 800529e:	6078      	str	r0, [r7, #4]
 80052a0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80052a2:	4b21      	ldr	r3, [pc, #132]	; (8005328 <prvAddCurrentTaskToDelayedList+0x90>)
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80052a8:	4b20      	ldr	r3, [pc, #128]	; (800532c <prvAddCurrentTaskToDelayedList+0x94>)
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	3304      	adds	r3, #4
 80052ae:	4618      	mov	r0, r3
 80052b0:	f7fe f8e4 	bl	800347c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80052ba:	d10a      	bne.n	80052d2 <prvAddCurrentTaskToDelayedList+0x3a>
 80052bc:	683b      	ldr	r3, [r7, #0]
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d007      	beq.n	80052d2 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80052c2:	4b1a      	ldr	r3, [pc, #104]	; (800532c <prvAddCurrentTaskToDelayedList+0x94>)
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	3304      	adds	r3, #4
 80052c8:	4619      	mov	r1, r3
 80052ca:	4819      	ldr	r0, [pc, #100]	; (8005330 <prvAddCurrentTaskToDelayedList+0x98>)
 80052cc:	f7fe f879 	bl	80033c2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80052d0:	e026      	b.n	8005320 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80052d2:	68fa      	ldr	r2, [r7, #12]
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	4413      	add	r3, r2
 80052d8:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80052da:	4b14      	ldr	r3, [pc, #80]	; (800532c <prvAddCurrentTaskToDelayedList+0x94>)
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	68ba      	ldr	r2, [r7, #8]
 80052e0:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80052e2:	68ba      	ldr	r2, [r7, #8]
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	429a      	cmp	r2, r3
 80052e8:	d209      	bcs.n	80052fe <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80052ea:	4b12      	ldr	r3, [pc, #72]	; (8005334 <prvAddCurrentTaskToDelayedList+0x9c>)
 80052ec:	681a      	ldr	r2, [r3, #0]
 80052ee:	4b0f      	ldr	r3, [pc, #60]	; (800532c <prvAddCurrentTaskToDelayedList+0x94>)
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	3304      	adds	r3, #4
 80052f4:	4619      	mov	r1, r3
 80052f6:	4610      	mov	r0, r2
 80052f8:	f7fe f887 	bl	800340a <vListInsert>
}
 80052fc:	e010      	b.n	8005320 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80052fe:	4b0e      	ldr	r3, [pc, #56]	; (8005338 <prvAddCurrentTaskToDelayedList+0xa0>)
 8005300:	681a      	ldr	r2, [r3, #0]
 8005302:	4b0a      	ldr	r3, [pc, #40]	; (800532c <prvAddCurrentTaskToDelayedList+0x94>)
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	3304      	adds	r3, #4
 8005308:	4619      	mov	r1, r3
 800530a:	4610      	mov	r0, r2
 800530c:	f7fe f87d 	bl	800340a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8005310:	4b0a      	ldr	r3, [pc, #40]	; (800533c <prvAddCurrentTaskToDelayedList+0xa4>)
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	68ba      	ldr	r2, [r7, #8]
 8005316:	429a      	cmp	r2, r3
 8005318:	d202      	bcs.n	8005320 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800531a:	4a08      	ldr	r2, [pc, #32]	; (800533c <prvAddCurrentTaskToDelayedList+0xa4>)
 800531c:	68bb      	ldr	r3, [r7, #8]
 800531e:	6013      	str	r3, [r2, #0]
}
 8005320:	bf00      	nop
 8005322:	3710      	adds	r7, #16
 8005324:	46bd      	mov	sp, r7
 8005326:	bd80      	pop	{r7, pc}
 8005328:	20000e04 	.word	0x20000e04
 800532c:	2000092c 	.word	0x2000092c
 8005330:	20000dec 	.word	0x20000dec
 8005334:	20000dbc 	.word	0x20000dbc
 8005338:	20000db8 	.word	0x20000db8
 800533c:	20000e20 	.word	0x20000e20

08005340 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8005340:	b580      	push	{r7, lr}
 8005342:	b08a      	sub	sp, #40	; 0x28
 8005344:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8005346:	2300      	movs	r3, #0
 8005348:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800534a:	f000 fb1f 	bl	800598c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800534e:	4b1c      	ldr	r3, [pc, #112]	; (80053c0 <xTimerCreateTimerTask+0x80>)
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	2b00      	cmp	r3, #0
 8005354:	d021      	beq.n	800539a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8005356:	2300      	movs	r3, #0
 8005358:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800535a:	2300      	movs	r3, #0
 800535c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800535e:	1d3a      	adds	r2, r7, #4
 8005360:	f107 0108 	add.w	r1, r7, #8
 8005364:	f107 030c 	add.w	r3, r7, #12
 8005368:	4618      	mov	r0, r3
 800536a:	f7fd ffe3 	bl	8003334 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800536e:	6879      	ldr	r1, [r7, #4]
 8005370:	68bb      	ldr	r3, [r7, #8]
 8005372:	68fa      	ldr	r2, [r7, #12]
 8005374:	9202      	str	r2, [sp, #8]
 8005376:	9301      	str	r3, [sp, #4]
 8005378:	2302      	movs	r3, #2
 800537a:	9300      	str	r3, [sp, #0]
 800537c:	2300      	movs	r3, #0
 800537e:	460a      	mov	r2, r1
 8005380:	4910      	ldr	r1, [pc, #64]	; (80053c4 <xTimerCreateTimerTask+0x84>)
 8005382:	4811      	ldr	r0, [pc, #68]	; (80053c8 <xTimerCreateTimerTask+0x88>)
 8005384:	f7fe ffdf 	bl	8004346 <xTaskCreateStatic>
 8005388:	4603      	mov	r3, r0
 800538a:	4a10      	ldr	r2, [pc, #64]	; (80053cc <xTimerCreateTimerTask+0x8c>)
 800538c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800538e:	4b0f      	ldr	r3, [pc, #60]	; (80053cc <xTimerCreateTimerTask+0x8c>)
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	2b00      	cmp	r3, #0
 8005394:	d001      	beq.n	800539a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8005396:	2301      	movs	r3, #1
 8005398:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800539a:	697b      	ldr	r3, [r7, #20]
 800539c:	2b00      	cmp	r3, #0
 800539e:	d10a      	bne.n	80053b6 <xTimerCreateTimerTask+0x76>
	__asm volatile
 80053a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053a4:	f383 8811 	msr	BASEPRI, r3
 80053a8:	f3bf 8f6f 	isb	sy
 80053ac:	f3bf 8f4f 	dsb	sy
 80053b0:	613b      	str	r3, [r7, #16]
}
 80053b2:	bf00      	nop
 80053b4:	e7fe      	b.n	80053b4 <xTimerCreateTimerTask+0x74>
	return xReturn;
 80053b6:	697b      	ldr	r3, [r7, #20]
}
 80053b8:	4618      	mov	r0, r3
 80053ba:	3718      	adds	r7, #24
 80053bc:	46bd      	mov	sp, r7
 80053be:	bd80      	pop	{r7, pc}
 80053c0:	20000e5c 	.word	0x20000e5c
 80053c4:	08006558 	.word	0x08006558
 80053c8:	08005595 	.word	0x08005595
 80053cc:	20000e60 	.word	0x20000e60

080053d0 <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 80053d0:	b580      	push	{r7, lr}
 80053d2:	b088      	sub	sp, #32
 80053d4:	af02      	add	r7, sp, #8
 80053d6:	60f8      	str	r0, [r7, #12]
 80053d8:	60b9      	str	r1, [r7, #8]
 80053da:	607a      	str	r2, [r7, #4]
 80053dc:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) );
 80053de:	2030      	movs	r0, #48	; 0x30
 80053e0:	f000 fd62 	bl	8005ea8 <pvPortMalloc>
 80053e4:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 80053e6:	697b      	ldr	r3, [r7, #20]
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d00d      	beq.n	8005408 <xTimerCreate+0x38>
		{
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 80053ec:	697b      	ldr	r3, [r7, #20]
 80053ee:	9301      	str	r3, [sp, #4]
 80053f0:	6a3b      	ldr	r3, [r7, #32]
 80053f2:	9300      	str	r3, [sp, #0]
 80053f4:	683b      	ldr	r3, [r7, #0]
 80053f6:	687a      	ldr	r2, [r7, #4]
 80053f8:	68b9      	ldr	r1, [r7, #8]
 80053fa:	68f8      	ldr	r0, [r7, #12]
 80053fc:	f000 f809 	bl	8005412 <prvInitialiseNewTimer>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Timers can be created statically or dynamically, so note this
				timer was created dynamically in case the timer is later
				deleted. */
				pxNewTimer->ucStaticallyAllocated = pdFALSE;
 8005400:	697b      	ldr	r3, [r7, #20]
 8005402:	2200      	movs	r2, #0
 8005404:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */
		}

		return pxNewTimer;
 8005408:	697b      	ldr	r3, [r7, #20]
	}
 800540a:	4618      	mov	r0, r3
 800540c:	3718      	adds	r7, #24
 800540e:	46bd      	mov	sp, r7
 8005410:	bd80      	pop	{r7, pc}

08005412 <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 8005412:	b580      	push	{r7, lr}
 8005414:	b086      	sub	sp, #24
 8005416:	af00      	add	r7, sp, #0
 8005418:	60f8      	str	r0, [r7, #12]
 800541a:	60b9      	str	r1, [r7, #8]
 800541c:	607a      	str	r2, [r7, #4]
 800541e:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 8005420:	68bb      	ldr	r3, [r7, #8]
 8005422:	2b00      	cmp	r3, #0
 8005424:	d10a      	bne.n	800543c <prvInitialiseNewTimer+0x2a>
	__asm volatile
 8005426:	f04f 0350 	mov.w	r3, #80	; 0x50
 800542a:	f383 8811 	msr	BASEPRI, r3
 800542e:	f3bf 8f6f 	isb	sy
 8005432:	f3bf 8f4f 	dsb	sy
 8005436:	617b      	str	r3, [r7, #20]
}
 8005438:	bf00      	nop
 800543a:	e7fe      	b.n	800543a <prvInitialiseNewTimer+0x28>

	if( pxNewTimer != NULL )
 800543c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800543e:	2b00      	cmp	r3, #0
 8005440:	d015      	beq.n	800546e <prvInitialiseNewTimer+0x5c>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 8005442:	f000 faa3 	bl	800598c <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 8005446:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005448:	68fa      	ldr	r2, [r7, #12]
 800544a:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 800544c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800544e:	68ba      	ldr	r2, [r7, #8]
 8005450:	619a      	str	r2, [r3, #24]
		pxNewTimer->uxAutoReload = uxAutoReload;
 8005452:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005454:	687a      	ldr	r2, [r7, #4]
 8005456:	61da      	str	r2, [r3, #28]
		pxNewTimer->pvTimerID = pvTimerID;
 8005458:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800545a:	683a      	ldr	r2, [r7, #0]
 800545c:	621a      	str	r2, [r3, #32]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 800545e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005460:	6a3a      	ldr	r2, [r7, #32]
 8005462:	625a      	str	r2, [r3, #36]	; 0x24
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 8005464:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005466:	3304      	adds	r3, #4
 8005468:	4618      	mov	r0, r3
 800546a:	f7fd ff9d 	bl	80033a8 <vListInitialiseItem>
		traceTIMER_CREATE( pxNewTimer );
	}
}
 800546e:	bf00      	nop
 8005470:	3718      	adds	r7, #24
 8005472:	46bd      	mov	sp, r7
 8005474:	bd80      	pop	{r7, pc}
	...

08005478 <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8005478:	b580      	push	{r7, lr}
 800547a:	b08a      	sub	sp, #40	; 0x28
 800547c:	af00      	add	r7, sp, #0
 800547e:	60f8      	str	r0, [r7, #12]
 8005480:	60b9      	str	r1, [r7, #8]
 8005482:	607a      	str	r2, [r7, #4]
 8005484:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8005486:	2300      	movs	r3, #0
 8005488:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	2b00      	cmp	r3, #0
 800548e:	d10a      	bne.n	80054a6 <xTimerGenericCommand+0x2e>
	__asm volatile
 8005490:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005494:	f383 8811 	msr	BASEPRI, r3
 8005498:	f3bf 8f6f 	isb	sy
 800549c:	f3bf 8f4f 	dsb	sy
 80054a0:	623b      	str	r3, [r7, #32]
}
 80054a2:	bf00      	nop
 80054a4:	e7fe      	b.n	80054a4 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80054a6:	4b1a      	ldr	r3, [pc, #104]	; (8005510 <xTimerGenericCommand+0x98>)
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d02a      	beq.n	8005504 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80054ae:	68bb      	ldr	r3, [r7, #8]
 80054b0:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80054ba:	68bb      	ldr	r3, [r7, #8]
 80054bc:	2b05      	cmp	r3, #5
 80054be:	dc18      	bgt.n	80054f2 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80054c0:	f7ff fd56 	bl	8004f70 <xTaskGetSchedulerState>
 80054c4:	4603      	mov	r3, r0
 80054c6:	2b02      	cmp	r3, #2
 80054c8:	d109      	bne.n	80054de <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80054ca:	4b11      	ldr	r3, [pc, #68]	; (8005510 <xTimerGenericCommand+0x98>)
 80054cc:	6818      	ldr	r0, [r3, #0]
 80054ce:	f107 0110 	add.w	r1, r7, #16
 80054d2:	2300      	movs	r3, #0
 80054d4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80054d6:	f7fe f93f 	bl	8003758 <xQueueGenericSend>
 80054da:	6278      	str	r0, [r7, #36]	; 0x24
 80054dc:	e012      	b.n	8005504 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80054de:	4b0c      	ldr	r3, [pc, #48]	; (8005510 <xTimerGenericCommand+0x98>)
 80054e0:	6818      	ldr	r0, [r3, #0]
 80054e2:	f107 0110 	add.w	r1, r7, #16
 80054e6:	2300      	movs	r3, #0
 80054e8:	2200      	movs	r2, #0
 80054ea:	f7fe f935 	bl	8003758 <xQueueGenericSend>
 80054ee:	6278      	str	r0, [r7, #36]	; 0x24
 80054f0:	e008      	b.n	8005504 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80054f2:	4b07      	ldr	r3, [pc, #28]	; (8005510 <xTimerGenericCommand+0x98>)
 80054f4:	6818      	ldr	r0, [r3, #0]
 80054f6:	f107 0110 	add.w	r1, r7, #16
 80054fa:	2300      	movs	r3, #0
 80054fc:	683a      	ldr	r2, [r7, #0]
 80054fe:	f7fe fa3d 	bl	800397c <xQueueGenericSendFromISR>
 8005502:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8005504:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005506:	4618      	mov	r0, r3
 8005508:	3728      	adds	r7, #40	; 0x28
 800550a:	46bd      	mov	sp, r7
 800550c:	bd80      	pop	{r7, pc}
 800550e:	bf00      	nop
 8005510:	20000e5c 	.word	0x20000e5c

08005514 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8005514:	b580      	push	{r7, lr}
 8005516:	b088      	sub	sp, #32
 8005518:	af02      	add	r7, sp, #8
 800551a:	6078      	str	r0, [r7, #4]
 800551c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800551e:	4b1c      	ldr	r3, [pc, #112]	; (8005590 <prvProcessExpiredTimer+0x7c>)
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	68db      	ldr	r3, [r3, #12]
 8005524:	68db      	ldr	r3, [r3, #12]
 8005526:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005528:	697b      	ldr	r3, [r7, #20]
 800552a:	3304      	adds	r3, #4
 800552c:	4618      	mov	r0, r3
 800552e:	f7fd ffa5 	bl	800347c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8005532:	697b      	ldr	r3, [r7, #20]
 8005534:	69db      	ldr	r3, [r3, #28]
 8005536:	2b01      	cmp	r3, #1
 8005538:	d122      	bne.n	8005580 <prvProcessExpiredTimer+0x6c>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800553a:	697b      	ldr	r3, [r7, #20]
 800553c:	699a      	ldr	r2, [r3, #24]
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	18d1      	adds	r1, r2, r3
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	683a      	ldr	r2, [r7, #0]
 8005546:	6978      	ldr	r0, [r7, #20]
 8005548:	f000 f8c8 	bl	80056dc <prvInsertTimerInActiveList>
 800554c:	4603      	mov	r3, r0
 800554e:	2b00      	cmp	r3, #0
 8005550:	d016      	beq.n	8005580 <prvProcessExpiredTimer+0x6c>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005552:	2300      	movs	r3, #0
 8005554:	9300      	str	r3, [sp, #0]
 8005556:	2300      	movs	r3, #0
 8005558:	687a      	ldr	r2, [r7, #4]
 800555a:	2100      	movs	r1, #0
 800555c:	6978      	ldr	r0, [r7, #20]
 800555e:	f7ff ff8b 	bl	8005478 <xTimerGenericCommand>
 8005562:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8005564:	693b      	ldr	r3, [r7, #16]
 8005566:	2b00      	cmp	r3, #0
 8005568:	d10a      	bne.n	8005580 <prvProcessExpiredTimer+0x6c>
	__asm volatile
 800556a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800556e:	f383 8811 	msr	BASEPRI, r3
 8005572:	f3bf 8f6f 	isb	sy
 8005576:	f3bf 8f4f 	dsb	sy
 800557a:	60fb      	str	r3, [r7, #12]
}
 800557c:	bf00      	nop
 800557e:	e7fe      	b.n	800557e <prvProcessExpiredTimer+0x6a>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005580:	697b      	ldr	r3, [r7, #20]
 8005582:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005584:	6978      	ldr	r0, [r7, #20]
 8005586:	4798      	blx	r3
}
 8005588:	bf00      	nop
 800558a:	3718      	adds	r7, #24
 800558c:	46bd      	mov	sp, r7
 800558e:	bd80      	pop	{r7, pc}
 8005590:	20000e54 	.word	0x20000e54

08005594 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 8005594:	b580      	push	{r7, lr}
 8005596:	b084      	sub	sp, #16
 8005598:	af00      	add	r7, sp, #0
 800559a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800559c:	f107 0308 	add.w	r3, r7, #8
 80055a0:	4618      	mov	r0, r3
 80055a2:	f000 f857 	bl	8005654 <prvGetNextExpireTime>
 80055a6:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80055a8:	68bb      	ldr	r3, [r7, #8]
 80055aa:	4619      	mov	r1, r3
 80055ac:	68f8      	ldr	r0, [r7, #12]
 80055ae:	f000 f803 	bl	80055b8 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80055b2:	f000 f8d5 	bl	8005760 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80055b6:	e7f1      	b.n	800559c <prvTimerTask+0x8>

080055b8 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80055b8:	b580      	push	{r7, lr}
 80055ba:	b084      	sub	sp, #16
 80055bc:	af00      	add	r7, sp, #0
 80055be:	6078      	str	r0, [r7, #4]
 80055c0:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80055c2:	f7ff f8df 	bl	8004784 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80055c6:	f107 0308 	add.w	r3, r7, #8
 80055ca:	4618      	mov	r0, r3
 80055cc:	f000 f866 	bl	800569c <prvSampleTimeNow>
 80055d0:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80055d2:	68bb      	ldr	r3, [r7, #8]
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d130      	bne.n	800563a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80055d8:	683b      	ldr	r3, [r7, #0]
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d10a      	bne.n	80055f4 <prvProcessTimerOrBlockTask+0x3c>
 80055de:	687a      	ldr	r2, [r7, #4]
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	429a      	cmp	r2, r3
 80055e4:	d806      	bhi.n	80055f4 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80055e6:	f7ff f8db 	bl	80047a0 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80055ea:	68f9      	ldr	r1, [r7, #12]
 80055ec:	6878      	ldr	r0, [r7, #4]
 80055ee:	f7ff ff91 	bl	8005514 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80055f2:	e024      	b.n	800563e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80055f4:	683b      	ldr	r3, [r7, #0]
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d008      	beq.n	800560c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80055fa:	4b13      	ldr	r3, [pc, #76]	; (8005648 <prvProcessTimerOrBlockTask+0x90>)
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	2b00      	cmp	r3, #0
 8005602:	bf0c      	ite	eq
 8005604:	2301      	moveq	r3, #1
 8005606:	2300      	movne	r3, #0
 8005608:	b2db      	uxtb	r3, r3
 800560a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800560c:	4b0f      	ldr	r3, [pc, #60]	; (800564c <prvProcessTimerOrBlockTask+0x94>)
 800560e:	6818      	ldr	r0, [r3, #0]
 8005610:	687a      	ldr	r2, [r7, #4]
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	1ad3      	subs	r3, r2, r3
 8005616:	683a      	ldr	r2, [r7, #0]
 8005618:	4619      	mov	r1, r3
 800561a:	f7fe fdc3 	bl	80041a4 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800561e:	f7ff f8bf 	bl	80047a0 <xTaskResumeAll>
 8005622:	4603      	mov	r3, r0
 8005624:	2b00      	cmp	r3, #0
 8005626:	d10a      	bne.n	800563e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8005628:	4b09      	ldr	r3, [pc, #36]	; (8005650 <prvProcessTimerOrBlockTask+0x98>)
 800562a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800562e:	601a      	str	r2, [r3, #0]
 8005630:	f3bf 8f4f 	dsb	sy
 8005634:	f3bf 8f6f 	isb	sy
}
 8005638:	e001      	b.n	800563e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800563a:	f7ff f8b1 	bl	80047a0 <xTaskResumeAll>
}
 800563e:	bf00      	nop
 8005640:	3710      	adds	r7, #16
 8005642:	46bd      	mov	sp, r7
 8005644:	bd80      	pop	{r7, pc}
 8005646:	bf00      	nop
 8005648:	20000e58 	.word	0x20000e58
 800564c:	20000e5c 	.word	0x20000e5c
 8005650:	e000ed04 	.word	0xe000ed04

08005654 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8005654:	b480      	push	{r7}
 8005656:	b085      	sub	sp, #20
 8005658:	af00      	add	r7, sp, #0
 800565a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800565c:	4b0e      	ldr	r3, [pc, #56]	; (8005698 <prvGetNextExpireTime+0x44>)
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	2b00      	cmp	r3, #0
 8005664:	bf0c      	ite	eq
 8005666:	2301      	moveq	r3, #1
 8005668:	2300      	movne	r3, #0
 800566a:	b2db      	uxtb	r3, r3
 800566c:	461a      	mov	r2, r3
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	2b00      	cmp	r3, #0
 8005678:	d105      	bne.n	8005686 <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800567a:	4b07      	ldr	r3, [pc, #28]	; (8005698 <prvGetNextExpireTime+0x44>)
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	68db      	ldr	r3, [r3, #12]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	60fb      	str	r3, [r7, #12]
 8005684:	e001      	b.n	800568a <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8005686:	2300      	movs	r3, #0
 8005688:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800568a:	68fb      	ldr	r3, [r7, #12]
}
 800568c:	4618      	mov	r0, r3
 800568e:	3714      	adds	r7, #20
 8005690:	46bd      	mov	sp, r7
 8005692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005696:	4770      	bx	lr
 8005698:	20000e54 	.word	0x20000e54

0800569c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800569c:	b580      	push	{r7, lr}
 800569e:	b084      	sub	sp, #16
 80056a0:	af00      	add	r7, sp, #0
 80056a2:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80056a4:	f7ff f91a 	bl	80048dc <xTaskGetTickCount>
 80056a8:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80056aa:	4b0b      	ldr	r3, [pc, #44]	; (80056d8 <prvSampleTimeNow+0x3c>)
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	68fa      	ldr	r2, [r7, #12]
 80056b0:	429a      	cmp	r2, r3
 80056b2:	d205      	bcs.n	80056c0 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80056b4:	f000 f908 	bl	80058c8 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	2201      	movs	r2, #1
 80056bc:	601a      	str	r2, [r3, #0]
 80056be:	e002      	b.n	80056c6 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	2200      	movs	r2, #0
 80056c4:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80056c6:	4a04      	ldr	r2, [pc, #16]	; (80056d8 <prvSampleTimeNow+0x3c>)
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80056cc:	68fb      	ldr	r3, [r7, #12]
}
 80056ce:	4618      	mov	r0, r3
 80056d0:	3710      	adds	r7, #16
 80056d2:	46bd      	mov	sp, r7
 80056d4:	bd80      	pop	{r7, pc}
 80056d6:	bf00      	nop
 80056d8:	20000e64 	.word	0x20000e64

080056dc <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80056dc:	b580      	push	{r7, lr}
 80056de:	b086      	sub	sp, #24
 80056e0:	af00      	add	r7, sp, #0
 80056e2:	60f8      	str	r0, [r7, #12]
 80056e4:	60b9      	str	r1, [r7, #8]
 80056e6:	607a      	str	r2, [r7, #4]
 80056e8:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80056ea:	2300      	movs	r3, #0
 80056ec:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	68ba      	ldr	r2, [r7, #8]
 80056f2:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	68fa      	ldr	r2, [r7, #12]
 80056f8:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80056fa:	68ba      	ldr	r2, [r7, #8]
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	429a      	cmp	r2, r3
 8005700:	d812      	bhi.n	8005728 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005702:	687a      	ldr	r2, [r7, #4]
 8005704:	683b      	ldr	r3, [r7, #0]
 8005706:	1ad2      	subs	r2, r2, r3
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	699b      	ldr	r3, [r3, #24]
 800570c:	429a      	cmp	r2, r3
 800570e:	d302      	bcc.n	8005716 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8005710:	2301      	movs	r3, #1
 8005712:	617b      	str	r3, [r7, #20]
 8005714:	e01b      	b.n	800574e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8005716:	4b10      	ldr	r3, [pc, #64]	; (8005758 <prvInsertTimerInActiveList+0x7c>)
 8005718:	681a      	ldr	r2, [r3, #0]
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	3304      	adds	r3, #4
 800571e:	4619      	mov	r1, r3
 8005720:	4610      	mov	r0, r2
 8005722:	f7fd fe72 	bl	800340a <vListInsert>
 8005726:	e012      	b.n	800574e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8005728:	687a      	ldr	r2, [r7, #4]
 800572a:	683b      	ldr	r3, [r7, #0]
 800572c:	429a      	cmp	r2, r3
 800572e:	d206      	bcs.n	800573e <prvInsertTimerInActiveList+0x62>
 8005730:	68ba      	ldr	r2, [r7, #8]
 8005732:	683b      	ldr	r3, [r7, #0]
 8005734:	429a      	cmp	r2, r3
 8005736:	d302      	bcc.n	800573e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8005738:	2301      	movs	r3, #1
 800573a:	617b      	str	r3, [r7, #20]
 800573c:	e007      	b.n	800574e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800573e:	4b07      	ldr	r3, [pc, #28]	; (800575c <prvInsertTimerInActiveList+0x80>)
 8005740:	681a      	ldr	r2, [r3, #0]
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	3304      	adds	r3, #4
 8005746:	4619      	mov	r1, r3
 8005748:	4610      	mov	r0, r2
 800574a:	f7fd fe5e 	bl	800340a <vListInsert>
		}
	}

	return xProcessTimerNow;
 800574e:	697b      	ldr	r3, [r7, #20]
}
 8005750:	4618      	mov	r0, r3
 8005752:	3718      	adds	r7, #24
 8005754:	46bd      	mov	sp, r7
 8005756:	bd80      	pop	{r7, pc}
 8005758:	20000e58 	.word	0x20000e58
 800575c:	20000e54 	.word	0x20000e54

08005760 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8005760:	b580      	push	{r7, lr}
 8005762:	b08e      	sub	sp, #56	; 0x38
 8005764:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005766:	e09d      	b.n	80058a4 <prvProcessReceivedCommands+0x144>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	2b00      	cmp	r3, #0
 800576c:	da18      	bge.n	80057a0 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800576e:	1d3b      	adds	r3, r7, #4
 8005770:	3304      	adds	r3, #4
 8005772:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8005774:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005776:	2b00      	cmp	r3, #0
 8005778:	d10a      	bne.n	8005790 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800577a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800577e:	f383 8811 	msr	BASEPRI, r3
 8005782:	f3bf 8f6f 	isb	sy
 8005786:	f3bf 8f4f 	dsb	sy
 800578a:	61fb      	str	r3, [r7, #28]
}
 800578c:	bf00      	nop
 800578e:	e7fe      	b.n	800578e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8005790:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005796:	6850      	ldr	r0, [r2, #4]
 8005798:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800579a:	6892      	ldr	r2, [r2, #8]
 800579c:	4611      	mov	r1, r2
 800579e:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	db7e      	blt.n	80058a4 <prvProcessReceivedCommands+0x144>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80057aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057ac:	695b      	ldr	r3, [r3, #20]
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d004      	beq.n	80057bc <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80057b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057b4:	3304      	adds	r3, #4
 80057b6:	4618      	mov	r0, r3
 80057b8:	f7fd fe60 	bl	800347c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80057bc:	463b      	mov	r3, r7
 80057be:	4618      	mov	r0, r3
 80057c0:	f7ff ff6c 	bl	800569c <prvSampleTimeNow>
 80057c4:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	2b09      	cmp	r3, #9
 80057ca:	d86a      	bhi.n	80058a2 <prvProcessReceivedCommands+0x142>
 80057cc:	a201      	add	r2, pc, #4	; (adr r2, 80057d4 <prvProcessReceivedCommands+0x74>)
 80057ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057d2:	bf00      	nop
 80057d4:	080057fd 	.word	0x080057fd
 80057d8:	080057fd 	.word	0x080057fd
 80057dc:	080057fd 	.word	0x080057fd
 80057e0:	080058a5 	.word	0x080058a5
 80057e4:	08005859 	.word	0x08005859
 80057e8:	08005891 	.word	0x08005891
 80057ec:	080057fd 	.word	0x080057fd
 80057f0:	080057fd 	.word	0x080057fd
 80057f4:	080058a5 	.word	0x080058a5
 80057f8:	08005859 	.word	0x08005859
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80057fc:	68ba      	ldr	r2, [r7, #8]
 80057fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005800:	699b      	ldr	r3, [r3, #24]
 8005802:	18d1      	adds	r1, r2, r3
 8005804:	68bb      	ldr	r3, [r7, #8]
 8005806:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005808:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800580a:	f7ff ff67 	bl	80056dc <prvInsertTimerInActiveList>
 800580e:	4603      	mov	r3, r0
 8005810:	2b00      	cmp	r3, #0
 8005812:	d047      	beq.n	80058a4 <prvProcessReceivedCommands+0x144>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005814:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005816:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005818:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800581a:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800581c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800581e:	69db      	ldr	r3, [r3, #28]
 8005820:	2b01      	cmp	r3, #1
 8005822:	d13f      	bne.n	80058a4 <prvProcessReceivedCommands+0x144>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8005824:	68ba      	ldr	r2, [r7, #8]
 8005826:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005828:	699b      	ldr	r3, [r3, #24]
 800582a:	441a      	add	r2, r3
 800582c:	2300      	movs	r3, #0
 800582e:	9300      	str	r3, [sp, #0]
 8005830:	2300      	movs	r3, #0
 8005832:	2100      	movs	r1, #0
 8005834:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005836:	f7ff fe1f 	bl	8005478 <xTimerGenericCommand>
 800583a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800583c:	6a3b      	ldr	r3, [r7, #32]
 800583e:	2b00      	cmp	r3, #0
 8005840:	d130      	bne.n	80058a4 <prvProcessReceivedCommands+0x144>
	__asm volatile
 8005842:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005846:	f383 8811 	msr	BASEPRI, r3
 800584a:	f3bf 8f6f 	isb	sy
 800584e:	f3bf 8f4f 	dsb	sy
 8005852:	61bb      	str	r3, [r7, #24]
}
 8005854:	bf00      	nop
 8005856:	e7fe      	b.n	8005856 <prvProcessReceivedCommands+0xf6>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8005858:	68ba      	ldr	r2, [r7, #8]
 800585a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800585c:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800585e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005860:	699b      	ldr	r3, [r3, #24]
 8005862:	2b00      	cmp	r3, #0
 8005864:	d10a      	bne.n	800587c <prvProcessReceivedCommands+0x11c>
	__asm volatile
 8005866:	f04f 0350 	mov.w	r3, #80	; 0x50
 800586a:	f383 8811 	msr	BASEPRI, r3
 800586e:	f3bf 8f6f 	isb	sy
 8005872:	f3bf 8f4f 	dsb	sy
 8005876:	617b      	str	r3, [r7, #20]
}
 8005878:	bf00      	nop
 800587a:	e7fe      	b.n	800587a <prvProcessReceivedCommands+0x11a>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800587c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800587e:	699a      	ldr	r2, [r3, #24]
 8005880:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005882:	18d1      	adds	r1, r2, r3
 8005884:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005886:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005888:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800588a:	f7ff ff27 	bl	80056dc <prvInsertTimerInActiveList>
					break;
 800588e:	e009      	b.n	80058a4 <prvProcessReceivedCommands+0x144>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8005890:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005892:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8005896:	2b00      	cmp	r3, #0
 8005898:	d104      	bne.n	80058a4 <prvProcessReceivedCommands+0x144>
						{
							vPortFree( pxTimer );
 800589a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800589c:	f000 fbc8 	bl	8006030 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80058a0:	e000      	b.n	80058a4 <prvProcessReceivedCommands+0x144>

				default	:
					/* Don't expect to get here. */
					break;
 80058a2:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80058a4:	4b07      	ldr	r3, [pc, #28]	; (80058c4 <prvProcessReceivedCommands+0x164>)
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	1d39      	adds	r1, r7, #4
 80058aa:	2200      	movs	r2, #0
 80058ac:	4618      	mov	r0, r3
 80058ae:	f7fe f90f 	bl	8003ad0 <xQueueReceive>
 80058b2:	4603      	mov	r3, r0
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	f47f af57 	bne.w	8005768 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 80058ba:	bf00      	nop
 80058bc:	bf00      	nop
 80058be:	3730      	adds	r7, #48	; 0x30
 80058c0:	46bd      	mov	sp, r7
 80058c2:	bd80      	pop	{r7, pc}
 80058c4:	20000e5c 	.word	0x20000e5c

080058c8 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80058c8:	b580      	push	{r7, lr}
 80058ca:	b088      	sub	sp, #32
 80058cc:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80058ce:	e045      	b.n	800595c <prvSwitchTimerLists+0x94>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80058d0:	4b2c      	ldr	r3, [pc, #176]	; (8005984 <prvSwitchTimerLists+0xbc>)
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	68db      	ldr	r3, [r3, #12]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 80058da:	4b2a      	ldr	r3, [pc, #168]	; (8005984 <prvSwitchTimerLists+0xbc>)
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	68db      	ldr	r3, [r3, #12]
 80058e0:	68db      	ldr	r3, [r3, #12]
 80058e2:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	3304      	adds	r3, #4
 80058e8:	4618      	mov	r0, r3
 80058ea:	f7fd fdc7 	bl	800347c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058f2:	68f8      	ldr	r0, [r7, #12]
 80058f4:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	69db      	ldr	r3, [r3, #28]
 80058fa:	2b01      	cmp	r3, #1
 80058fc:	d12e      	bne.n	800595c <prvSwitchTimerLists+0x94>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	699b      	ldr	r3, [r3, #24]
 8005902:	693a      	ldr	r2, [r7, #16]
 8005904:	4413      	add	r3, r2
 8005906:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8005908:	68ba      	ldr	r2, [r7, #8]
 800590a:	693b      	ldr	r3, [r7, #16]
 800590c:	429a      	cmp	r2, r3
 800590e:	d90e      	bls.n	800592e <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	68ba      	ldr	r2, [r7, #8]
 8005914:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	68fa      	ldr	r2, [r7, #12]
 800591a:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800591c:	4b19      	ldr	r3, [pc, #100]	; (8005984 <prvSwitchTimerLists+0xbc>)
 800591e:	681a      	ldr	r2, [r3, #0]
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	3304      	adds	r3, #4
 8005924:	4619      	mov	r1, r3
 8005926:	4610      	mov	r0, r2
 8005928:	f7fd fd6f 	bl	800340a <vListInsert>
 800592c:	e016      	b.n	800595c <prvSwitchTimerLists+0x94>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800592e:	2300      	movs	r3, #0
 8005930:	9300      	str	r3, [sp, #0]
 8005932:	2300      	movs	r3, #0
 8005934:	693a      	ldr	r2, [r7, #16]
 8005936:	2100      	movs	r1, #0
 8005938:	68f8      	ldr	r0, [r7, #12]
 800593a:	f7ff fd9d 	bl	8005478 <xTimerGenericCommand>
 800593e:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	2b00      	cmp	r3, #0
 8005944:	d10a      	bne.n	800595c <prvSwitchTimerLists+0x94>
	__asm volatile
 8005946:	f04f 0350 	mov.w	r3, #80	; 0x50
 800594a:	f383 8811 	msr	BASEPRI, r3
 800594e:	f3bf 8f6f 	isb	sy
 8005952:	f3bf 8f4f 	dsb	sy
 8005956:	603b      	str	r3, [r7, #0]
}
 8005958:	bf00      	nop
 800595a:	e7fe      	b.n	800595a <prvSwitchTimerLists+0x92>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800595c:	4b09      	ldr	r3, [pc, #36]	; (8005984 <prvSwitchTimerLists+0xbc>)
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	2b00      	cmp	r3, #0
 8005964:	d1b4      	bne.n	80058d0 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8005966:	4b07      	ldr	r3, [pc, #28]	; (8005984 <prvSwitchTimerLists+0xbc>)
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800596c:	4b06      	ldr	r3, [pc, #24]	; (8005988 <prvSwitchTimerLists+0xc0>)
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	4a04      	ldr	r2, [pc, #16]	; (8005984 <prvSwitchTimerLists+0xbc>)
 8005972:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8005974:	4a04      	ldr	r2, [pc, #16]	; (8005988 <prvSwitchTimerLists+0xc0>)
 8005976:	697b      	ldr	r3, [r7, #20]
 8005978:	6013      	str	r3, [r2, #0]
}
 800597a:	bf00      	nop
 800597c:	3718      	adds	r7, #24
 800597e:	46bd      	mov	sp, r7
 8005980:	bd80      	pop	{r7, pc}
 8005982:	bf00      	nop
 8005984:	20000e54 	.word	0x20000e54
 8005988:	20000e58 	.word	0x20000e58

0800598c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800598c:	b580      	push	{r7, lr}
 800598e:	b082      	sub	sp, #8
 8005990:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8005992:	f000 f967 	bl	8005c64 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8005996:	4b15      	ldr	r3, [pc, #84]	; (80059ec <prvCheckForValidListAndQueue+0x60>)
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	2b00      	cmp	r3, #0
 800599c:	d120      	bne.n	80059e0 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800599e:	4814      	ldr	r0, [pc, #80]	; (80059f0 <prvCheckForValidListAndQueue+0x64>)
 80059a0:	f7fd fce2 	bl	8003368 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80059a4:	4813      	ldr	r0, [pc, #76]	; (80059f4 <prvCheckForValidListAndQueue+0x68>)
 80059a6:	f7fd fcdf 	bl	8003368 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80059aa:	4b13      	ldr	r3, [pc, #76]	; (80059f8 <prvCheckForValidListAndQueue+0x6c>)
 80059ac:	4a10      	ldr	r2, [pc, #64]	; (80059f0 <prvCheckForValidListAndQueue+0x64>)
 80059ae:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80059b0:	4b12      	ldr	r3, [pc, #72]	; (80059fc <prvCheckForValidListAndQueue+0x70>)
 80059b2:	4a10      	ldr	r2, [pc, #64]	; (80059f4 <prvCheckForValidListAndQueue+0x68>)
 80059b4:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80059b6:	2300      	movs	r3, #0
 80059b8:	9300      	str	r3, [sp, #0]
 80059ba:	4b11      	ldr	r3, [pc, #68]	; (8005a00 <prvCheckForValidListAndQueue+0x74>)
 80059bc:	4a11      	ldr	r2, [pc, #68]	; (8005a04 <prvCheckForValidListAndQueue+0x78>)
 80059be:	2110      	movs	r1, #16
 80059c0:	200a      	movs	r0, #10
 80059c2:	f7fd fded 	bl	80035a0 <xQueueGenericCreateStatic>
 80059c6:	4603      	mov	r3, r0
 80059c8:	4a08      	ldr	r2, [pc, #32]	; (80059ec <prvCheckForValidListAndQueue+0x60>)
 80059ca:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80059cc:	4b07      	ldr	r3, [pc, #28]	; (80059ec <prvCheckForValidListAndQueue+0x60>)
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	d005      	beq.n	80059e0 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80059d4:	4b05      	ldr	r3, [pc, #20]	; (80059ec <prvCheckForValidListAndQueue+0x60>)
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	490b      	ldr	r1, [pc, #44]	; (8005a08 <prvCheckForValidListAndQueue+0x7c>)
 80059da:	4618      	mov	r0, r3
 80059dc:	f7fe fbb8 	bl	8004150 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80059e0:	f000 f970 	bl	8005cc4 <vPortExitCritical>
}
 80059e4:	bf00      	nop
 80059e6:	46bd      	mov	sp, r7
 80059e8:	bd80      	pop	{r7, pc}
 80059ea:	bf00      	nop
 80059ec:	20000e5c 	.word	0x20000e5c
 80059f0:	20000e2c 	.word	0x20000e2c
 80059f4:	20000e40 	.word	0x20000e40
 80059f8:	20000e54 	.word	0x20000e54
 80059fc:	20000e58 	.word	0x20000e58
 8005a00:	20000f08 	.word	0x20000f08
 8005a04:	20000e68 	.word	0x20000e68
 8005a08:	08006560 	.word	0x08006560

08005a0c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8005a0c:	b480      	push	{r7}
 8005a0e:	b085      	sub	sp, #20
 8005a10:	af00      	add	r7, sp, #0
 8005a12:	60f8      	str	r0, [r7, #12]
 8005a14:	60b9      	str	r1, [r7, #8]
 8005a16:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	3b04      	subs	r3, #4
 8005a1c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005a24:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	3b04      	subs	r3, #4
 8005a2a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8005a2c:	68bb      	ldr	r3, [r7, #8]
 8005a2e:	f023 0201 	bic.w	r2, r3, #1
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	3b04      	subs	r3, #4
 8005a3a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005a3c:	4a0c      	ldr	r2, [pc, #48]	; (8005a70 <pxPortInitialiseStack+0x64>)
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	3b14      	subs	r3, #20
 8005a46:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8005a48:	687a      	ldr	r2, [r7, #4]
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	3b04      	subs	r3, #4
 8005a52:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	f06f 0202 	mvn.w	r2, #2
 8005a5a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	3b20      	subs	r3, #32
 8005a60:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8005a62:	68fb      	ldr	r3, [r7, #12]
}
 8005a64:	4618      	mov	r0, r3
 8005a66:	3714      	adds	r7, #20
 8005a68:	46bd      	mov	sp, r7
 8005a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a6e:	4770      	bx	lr
 8005a70:	08005a75 	.word	0x08005a75

08005a74 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005a74:	b480      	push	{r7}
 8005a76:	b085      	sub	sp, #20
 8005a78:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8005a7a:	2300      	movs	r3, #0
 8005a7c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8005a7e:	4b12      	ldr	r3, [pc, #72]	; (8005ac8 <prvTaskExitError+0x54>)
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a86:	d00a      	beq.n	8005a9e <prvTaskExitError+0x2a>
	__asm volatile
 8005a88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a8c:	f383 8811 	msr	BASEPRI, r3
 8005a90:	f3bf 8f6f 	isb	sy
 8005a94:	f3bf 8f4f 	dsb	sy
 8005a98:	60fb      	str	r3, [r7, #12]
}
 8005a9a:	bf00      	nop
 8005a9c:	e7fe      	b.n	8005a9c <prvTaskExitError+0x28>
	__asm volatile
 8005a9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005aa2:	f383 8811 	msr	BASEPRI, r3
 8005aa6:	f3bf 8f6f 	isb	sy
 8005aaa:	f3bf 8f4f 	dsb	sy
 8005aae:	60bb      	str	r3, [r7, #8]
}
 8005ab0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8005ab2:	bf00      	nop
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d0fc      	beq.n	8005ab4 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8005aba:	bf00      	nop
 8005abc:	bf00      	nop
 8005abe:	3714      	adds	r7, #20
 8005ac0:	46bd      	mov	sp, r7
 8005ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ac6:	4770      	bx	lr
 8005ac8:	20000038 	.word	0x20000038
 8005acc:	00000000 	.word	0x00000000

08005ad0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005ad0:	4b07      	ldr	r3, [pc, #28]	; (8005af0 <pxCurrentTCBConst2>)
 8005ad2:	6819      	ldr	r1, [r3, #0]
 8005ad4:	6808      	ldr	r0, [r1, #0]
 8005ad6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005ada:	f380 8809 	msr	PSP, r0
 8005ade:	f3bf 8f6f 	isb	sy
 8005ae2:	f04f 0000 	mov.w	r0, #0
 8005ae6:	f380 8811 	msr	BASEPRI, r0
 8005aea:	4770      	bx	lr
 8005aec:	f3af 8000 	nop.w

08005af0 <pxCurrentTCBConst2>:
 8005af0:	2000092c 	.word	0x2000092c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005af4:	bf00      	nop
 8005af6:	bf00      	nop

08005af8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8005af8:	4808      	ldr	r0, [pc, #32]	; (8005b1c <prvPortStartFirstTask+0x24>)
 8005afa:	6800      	ldr	r0, [r0, #0]
 8005afc:	6800      	ldr	r0, [r0, #0]
 8005afe:	f380 8808 	msr	MSP, r0
 8005b02:	f04f 0000 	mov.w	r0, #0
 8005b06:	f380 8814 	msr	CONTROL, r0
 8005b0a:	b662      	cpsie	i
 8005b0c:	b661      	cpsie	f
 8005b0e:	f3bf 8f4f 	dsb	sy
 8005b12:	f3bf 8f6f 	isb	sy
 8005b16:	df00      	svc	0
 8005b18:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8005b1a:	bf00      	nop
 8005b1c:	e000ed08 	.word	0xe000ed08

08005b20 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005b20:	b580      	push	{r7, lr}
 8005b22:	b086      	sub	sp, #24
 8005b24:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8005b26:	4b46      	ldr	r3, [pc, #280]	; (8005c40 <xPortStartScheduler+0x120>)
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	4a46      	ldr	r2, [pc, #280]	; (8005c44 <xPortStartScheduler+0x124>)
 8005b2c:	4293      	cmp	r3, r2
 8005b2e:	d10a      	bne.n	8005b46 <xPortStartScheduler+0x26>
	__asm volatile
 8005b30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b34:	f383 8811 	msr	BASEPRI, r3
 8005b38:	f3bf 8f6f 	isb	sy
 8005b3c:	f3bf 8f4f 	dsb	sy
 8005b40:	613b      	str	r3, [r7, #16]
}
 8005b42:	bf00      	nop
 8005b44:	e7fe      	b.n	8005b44 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8005b46:	4b3e      	ldr	r3, [pc, #248]	; (8005c40 <xPortStartScheduler+0x120>)
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	4a3f      	ldr	r2, [pc, #252]	; (8005c48 <xPortStartScheduler+0x128>)
 8005b4c:	4293      	cmp	r3, r2
 8005b4e:	d10a      	bne.n	8005b66 <xPortStartScheduler+0x46>
	__asm volatile
 8005b50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b54:	f383 8811 	msr	BASEPRI, r3
 8005b58:	f3bf 8f6f 	isb	sy
 8005b5c:	f3bf 8f4f 	dsb	sy
 8005b60:	60fb      	str	r3, [r7, #12]
}
 8005b62:	bf00      	nop
 8005b64:	e7fe      	b.n	8005b64 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8005b66:	4b39      	ldr	r3, [pc, #228]	; (8005c4c <xPortStartScheduler+0x12c>)
 8005b68:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8005b6a:	697b      	ldr	r3, [r7, #20]
 8005b6c:	781b      	ldrb	r3, [r3, #0]
 8005b6e:	b2db      	uxtb	r3, r3
 8005b70:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005b72:	697b      	ldr	r3, [r7, #20]
 8005b74:	22ff      	movs	r2, #255	; 0xff
 8005b76:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005b78:	697b      	ldr	r3, [r7, #20]
 8005b7a:	781b      	ldrb	r3, [r3, #0]
 8005b7c:	b2db      	uxtb	r3, r3
 8005b7e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005b80:	78fb      	ldrb	r3, [r7, #3]
 8005b82:	b2db      	uxtb	r3, r3
 8005b84:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005b88:	b2da      	uxtb	r2, r3
 8005b8a:	4b31      	ldr	r3, [pc, #196]	; (8005c50 <xPortStartScheduler+0x130>)
 8005b8c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8005b8e:	4b31      	ldr	r3, [pc, #196]	; (8005c54 <xPortStartScheduler+0x134>)
 8005b90:	2207      	movs	r2, #7
 8005b92:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005b94:	e009      	b.n	8005baa <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8005b96:	4b2f      	ldr	r3, [pc, #188]	; (8005c54 <xPortStartScheduler+0x134>)
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	3b01      	subs	r3, #1
 8005b9c:	4a2d      	ldr	r2, [pc, #180]	; (8005c54 <xPortStartScheduler+0x134>)
 8005b9e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005ba0:	78fb      	ldrb	r3, [r7, #3]
 8005ba2:	b2db      	uxtb	r3, r3
 8005ba4:	005b      	lsls	r3, r3, #1
 8005ba6:	b2db      	uxtb	r3, r3
 8005ba8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005baa:	78fb      	ldrb	r3, [r7, #3]
 8005bac:	b2db      	uxtb	r3, r3
 8005bae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005bb2:	2b80      	cmp	r3, #128	; 0x80
 8005bb4:	d0ef      	beq.n	8005b96 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8005bb6:	4b27      	ldr	r3, [pc, #156]	; (8005c54 <xPortStartScheduler+0x134>)
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	f1c3 0307 	rsb	r3, r3, #7
 8005bbe:	2b04      	cmp	r3, #4
 8005bc0:	d00a      	beq.n	8005bd8 <xPortStartScheduler+0xb8>
	__asm volatile
 8005bc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bc6:	f383 8811 	msr	BASEPRI, r3
 8005bca:	f3bf 8f6f 	isb	sy
 8005bce:	f3bf 8f4f 	dsb	sy
 8005bd2:	60bb      	str	r3, [r7, #8]
}
 8005bd4:	bf00      	nop
 8005bd6:	e7fe      	b.n	8005bd6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8005bd8:	4b1e      	ldr	r3, [pc, #120]	; (8005c54 <xPortStartScheduler+0x134>)
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	021b      	lsls	r3, r3, #8
 8005bde:	4a1d      	ldr	r2, [pc, #116]	; (8005c54 <xPortStartScheduler+0x134>)
 8005be0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005be2:	4b1c      	ldr	r3, [pc, #112]	; (8005c54 <xPortStartScheduler+0x134>)
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005bea:	4a1a      	ldr	r2, [pc, #104]	; (8005c54 <xPortStartScheduler+0x134>)
 8005bec:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	b2da      	uxtb	r2, r3
 8005bf2:	697b      	ldr	r3, [r7, #20]
 8005bf4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8005bf6:	4b18      	ldr	r3, [pc, #96]	; (8005c58 <xPortStartScheduler+0x138>)
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	4a17      	ldr	r2, [pc, #92]	; (8005c58 <xPortStartScheduler+0x138>)
 8005bfc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005c00:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8005c02:	4b15      	ldr	r3, [pc, #84]	; (8005c58 <xPortStartScheduler+0x138>)
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	4a14      	ldr	r2, [pc, #80]	; (8005c58 <xPortStartScheduler+0x138>)
 8005c08:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8005c0c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8005c0e:	f000 f8dd 	bl	8005dcc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8005c12:	4b12      	ldr	r3, [pc, #72]	; (8005c5c <xPortStartScheduler+0x13c>)
 8005c14:	2200      	movs	r2, #0
 8005c16:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8005c18:	f000 f8fc 	bl	8005e14 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8005c1c:	4b10      	ldr	r3, [pc, #64]	; (8005c60 <xPortStartScheduler+0x140>)
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	4a0f      	ldr	r2, [pc, #60]	; (8005c60 <xPortStartScheduler+0x140>)
 8005c22:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8005c26:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8005c28:	f7ff ff66 	bl	8005af8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8005c2c:	f7fe ff24 	bl	8004a78 <vTaskSwitchContext>
	prvTaskExitError();
 8005c30:	f7ff ff20 	bl	8005a74 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8005c34:	2300      	movs	r3, #0
}
 8005c36:	4618      	mov	r0, r3
 8005c38:	3718      	adds	r7, #24
 8005c3a:	46bd      	mov	sp, r7
 8005c3c:	bd80      	pop	{r7, pc}
 8005c3e:	bf00      	nop
 8005c40:	e000ed00 	.word	0xe000ed00
 8005c44:	410fc271 	.word	0x410fc271
 8005c48:	410fc270 	.word	0x410fc270
 8005c4c:	e000e400 	.word	0xe000e400
 8005c50:	20000f5c 	.word	0x20000f5c
 8005c54:	20000f60 	.word	0x20000f60
 8005c58:	e000ed20 	.word	0xe000ed20
 8005c5c:	20000038 	.word	0x20000038
 8005c60:	e000ef34 	.word	0xe000ef34

08005c64 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005c64:	b480      	push	{r7}
 8005c66:	b083      	sub	sp, #12
 8005c68:	af00      	add	r7, sp, #0
	__asm volatile
 8005c6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c6e:	f383 8811 	msr	BASEPRI, r3
 8005c72:	f3bf 8f6f 	isb	sy
 8005c76:	f3bf 8f4f 	dsb	sy
 8005c7a:	607b      	str	r3, [r7, #4]
}
 8005c7c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8005c7e:	4b0f      	ldr	r3, [pc, #60]	; (8005cbc <vPortEnterCritical+0x58>)
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	3301      	adds	r3, #1
 8005c84:	4a0d      	ldr	r2, [pc, #52]	; (8005cbc <vPortEnterCritical+0x58>)
 8005c86:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8005c88:	4b0c      	ldr	r3, [pc, #48]	; (8005cbc <vPortEnterCritical+0x58>)
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	2b01      	cmp	r3, #1
 8005c8e:	d10f      	bne.n	8005cb0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005c90:	4b0b      	ldr	r3, [pc, #44]	; (8005cc0 <vPortEnterCritical+0x5c>)
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	b2db      	uxtb	r3, r3
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d00a      	beq.n	8005cb0 <vPortEnterCritical+0x4c>
	__asm volatile
 8005c9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c9e:	f383 8811 	msr	BASEPRI, r3
 8005ca2:	f3bf 8f6f 	isb	sy
 8005ca6:	f3bf 8f4f 	dsb	sy
 8005caa:	603b      	str	r3, [r7, #0]
}
 8005cac:	bf00      	nop
 8005cae:	e7fe      	b.n	8005cae <vPortEnterCritical+0x4a>
	}
}
 8005cb0:	bf00      	nop
 8005cb2:	370c      	adds	r7, #12
 8005cb4:	46bd      	mov	sp, r7
 8005cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cba:	4770      	bx	lr
 8005cbc:	20000038 	.word	0x20000038
 8005cc0:	e000ed04 	.word	0xe000ed04

08005cc4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8005cc4:	b480      	push	{r7}
 8005cc6:	b083      	sub	sp, #12
 8005cc8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8005cca:	4b12      	ldr	r3, [pc, #72]	; (8005d14 <vPortExitCritical+0x50>)
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d10a      	bne.n	8005ce8 <vPortExitCritical+0x24>
	__asm volatile
 8005cd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cd6:	f383 8811 	msr	BASEPRI, r3
 8005cda:	f3bf 8f6f 	isb	sy
 8005cde:	f3bf 8f4f 	dsb	sy
 8005ce2:	607b      	str	r3, [r7, #4]
}
 8005ce4:	bf00      	nop
 8005ce6:	e7fe      	b.n	8005ce6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8005ce8:	4b0a      	ldr	r3, [pc, #40]	; (8005d14 <vPortExitCritical+0x50>)
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	3b01      	subs	r3, #1
 8005cee:	4a09      	ldr	r2, [pc, #36]	; (8005d14 <vPortExitCritical+0x50>)
 8005cf0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8005cf2:	4b08      	ldr	r3, [pc, #32]	; (8005d14 <vPortExitCritical+0x50>)
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d105      	bne.n	8005d06 <vPortExitCritical+0x42>
 8005cfa:	2300      	movs	r3, #0
 8005cfc:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005cfe:	683b      	ldr	r3, [r7, #0]
 8005d00:	f383 8811 	msr	BASEPRI, r3
}
 8005d04:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8005d06:	bf00      	nop
 8005d08:	370c      	adds	r7, #12
 8005d0a:	46bd      	mov	sp, r7
 8005d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d10:	4770      	bx	lr
 8005d12:	bf00      	nop
 8005d14:	20000038 	.word	0x20000038
	...

08005d20 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005d20:	f3ef 8009 	mrs	r0, PSP
 8005d24:	f3bf 8f6f 	isb	sy
 8005d28:	4b15      	ldr	r3, [pc, #84]	; (8005d80 <pxCurrentTCBConst>)
 8005d2a:	681a      	ldr	r2, [r3, #0]
 8005d2c:	f01e 0f10 	tst.w	lr, #16
 8005d30:	bf08      	it	eq
 8005d32:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005d36:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005d3a:	6010      	str	r0, [r2, #0]
 8005d3c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005d40:	f04f 0050 	mov.w	r0, #80	; 0x50
 8005d44:	f380 8811 	msr	BASEPRI, r0
 8005d48:	f3bf 8f4f 	dsb	sy
 8005d4c:	f3bf 8f6f 	isb	sy
 8005d50:	f7fe fe92 	bl	8004a78 <vTaskSwitchContext>
 8005d54:	f04f 0000 	mov.w	r0, #0
 8005d58:	f380 8811 	msr	BASEPRI, r0
 8005d5c:	bc09      	pop	{r0, r3}
 8005d5e:	6819      	ldr	r1, [r3, #0]
 8005d60:	6808      	ldr	r0, [r1, #0]
 8005d62:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005d66:	f01e 0f10 	tst.w	lr, #16
 8005d6a:	bf08      	it	eq
 8005d6c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005d70:	f380 8809 	msr	PSP, r0
 8005d74:	f3bf 8f6f 	isb	sy
 8005d78:	4770      	bx	lr
 8005d7a:	bf00      	nop
 8005d7c:	f3af 8000 	nop.w

08005d80 <pxCurrentTCBConst>:
 8005d80:	2000092c 	.word	0x2000092c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005d84:	bf00      	nop
 8005d86:	bf00      	nop

08005d88 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005d88:	b580      	push	{r7, lr}
 8005d8a:	b082      	sub	sp, #8
 8005d8c:	af00      	add	r7, sp, #0
	__asm volatile
 8005d8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d92:	f383 8811 	msr	BASEPRI, r3
 8005d96:	f3bf 8f6f 	isb	sy
 8005d9a:	f3bf 8f4f 	dsb	sy
 8005d9e:	607b      	str	r3, [r7, #4]
}
 8005da0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005da2:	f7fe fdab 	bl	80048fc <xTaskIncrementTick>
 8005da6:	4603      	mov	r3, r0
 8005da8:	2b00      	cmp	r3, #0
 8005daa:	d003      	beq.n	8005db4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8005dac:	4b06      	ldr	r3, [pc, #24]	; (8005dc8 <SysTick_Handler+0x40>)
 8005dae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005db2:	601a      	str	r2, [r3, #0]
 8005db4:	2300      	movs	r3, #0
 8005db6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005db8:	683b      	ldr	r3, [r7, #0]
 8005dba:	f383 8811 	msr	BASEPRI, r3
}
 8005dbe:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8005dc0:	bf00      	nop
 8005dc2:	3708      	adds	r7, #8
 8005dc4:	46bd      	mov	sp, r7
 8005dc6:	bd80      	pop	{r7, pc}
 8005dc8:	e000ed04 	.word	0xe000ed04

08005dcc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8005dcc:	b480      	push	{r7}
 8005dce:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005dd0:	4b0b      	ldr	r3, [pc, #44]	; (8005e00 <vPortSetupTimerInterrupt+0x34>)
 8005dd2:	2200      	movs	r2, #0
 8005dd4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005dd6:	4b0b      	ldr	r3, [pc, #44]	; (8005e04 <vPortSetupTimerInterrupt+0x38>)
 8005dd8:	2200      	movs	r2, #0
 8005dda:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8005ddc:	4b0a      	ldr	r3, [pc, #40]	; (8005e08 <vPortSetupTimerInterrupt+0x3c>)
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	4a0a      	ldr	r2, [pc, #40]	; (8005e0c <vPortSetupTimerInterrupt+0x40>)
 8005de2:	fba2 2303 	umull	r2, r3, r2, r3
 8005de6:	099b      	lsrs	r3, r3, #6
 8005de8:	4a09      	ldr	r2, [pc, #36]	; (8005e10 <vPortSetupTimerInterrupt+0x44>)
 8005dea:	3b01      	subs	r3, #1
 8005dec:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8005dee:	4b04      	ldr	r3, [pc, #16]	; (8005e00 <vPortSetupTimerInterrupt+0x34>)
 8005df0:	2207      	movs	r2, #7
 8005df2:	601a      	str	r2, [r3, #0]
}
 8005df4:	bf00      	nop
 8005df6:	46bd      	mov	sp, r7
 8005df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dfc:	4770      	bx	lr
 8005dfe:	bf00      	nop
 8005e00:	e000e010 	.word	0xe000e010
 8005e04:	e000e018 	.word	0xe000e018
 8005e08:	2000002c 	.word	0x2000002c
 8005e0c:	10624dd3 	.word	0x10624dd3
 8005e10:	e000e014 	.word	0xe000e014

08005e14 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8005e14:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8005e24 <vPortEnableVFP+0x10>
 8005e18:	6801      	ldr	r1, [r0, #0]
 8005e1a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8005e1e:	6001      	str	r1, [r0, #0]
 8005e20:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8005e22:	bf00      	nop
 8005e24:	e000ed88 	.word	0xe000ed88

08005e28 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8005e28:	b480      	push	{r7}
 8005e2a:	b085      	sub	sp, #20
 8005e2c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8005e2e:	f3ef 8305 	mrs	r3, IPSR
 8005e32:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	2b0f      	cmp	r3, #15
 8005e38:	d914      	bls.n	8005e64 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8005e3a:	4a17      	ldr	r2, [pc, #92]	; (8005e98 <vPortValidateInterruptPriority+0x70>)
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	4413      	add	r3, r2
 8005e40:	781b      	ldrb	r3, [r3, #0]
 8005e42:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8005e44:	4b15      	ldr	r3, [pc, #84]	; (8005e9c <vPortValidateInterruptPriority+0x74>)
 8005e46:	781b      	ldrb	r3, [r3, #0]
 8005e48:	7afa      	ldrb	r2, [r7, #11]
 8005e4a:	429a      	cmp	r2, r3
 8005e4c:	d20a      	bcs.n	8005e64 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8005e4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e52:	f383 8811 	msr	BASEPRI, r3
 8005e56:	f3bf 8f6f 	isb	sy
 8005e5a:	f3bf 8f4f 	dsb	sy
 8005e5e:	607b      	str	r3, [r7, #4]
}
 8005e60:	bf00      	nop
 8005e62:	e7fe      	b.n	8005e62 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8005e64:	4b0e      	ldr	r3, [pc, #56]	; (8005ea0 <vPortValidateInterruptPriority+0x78>)
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8005e6c:	4b0d      	ldr	r3, [pc, #52]	; (8005ea4 <vPortValidateInterruptPriority+0x7c>)
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	429a      	cmp	r2, r3
 8005e72:	d90a      	bls.n	8005e8a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8005e74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e78:	f383 8811 	msr	BASEPRI, r3
 8005e7c:	f3bf 8f6f 	isb	sy
 8005e80:	f3bf 8f4f 	dsb	sy
 8005e84:	603b      	str	r3, [r7, #0]
}
 8005e86:	bf00      	nop
 8005e88:	e7fe      	b.n	8005e88 <vPortValidateInterruptPriority+0x60>
	}
 8005e8a:	bf00      	nop
 8005e8c:	3714      	adds	r7, #20
 8005e8e:	46bd      	mov	sp, r7
 8005e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e94:	4770      	bx	lr
 8005e96:	bf00      	nop
 8005e98:	e000e3f0 	.word	0xe000e3f0
 8005e9c:	20000f5c 	.word	0x20000f5c
 8005ea0:	e000ed0c 	.word	0xe000ed0c
 8005ea4:	20000f60 	.word	0x20000f60

08005ea8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8005ea8:	b580      	push	{r7, lr}
 8005eaa:	b08a      	sub	sp, #40	; 0x28
 8005eac:	af00      	add	r7, sp, #0
 8005eae:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005eb0:	2300      	movs	r3, #0
 8005eb2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8005eb4:	f7fe fc66 	bl	8004784 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8005eb8:	4b58      	ldr	r3, [pc, #352]	; (800601c <pvPortMalloc+0x174>)
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	d101      	bne.n	8005ec4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005ec0:	f000 f910 	bl	80060e4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005ec4:	4b56      	ldr	r3, [pc, #344]	; (8006020 <pvPortMalloc+0x178>)
 8005ec6:	681a      	ldr	r2, [r3, #0]
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	4013      	ands	r3, r2
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	f040 808e 	bne.w	8005fee <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	d01d      	beq.n	8005f14 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8005ed8:	2208      	movs	r2, #8
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	4413      	add	r3, r2
 8005ede:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	f003 0307 	and.w	r3, r3, #7
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d014      	beq.n	8005f14 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	f023 0307 	bic.w	r3, r3, #7
 8005ef0:	3308      	adds	r3, #8
 8005ef2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	f003 0307 	and.w	r3, r3, #7
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d00a      	beq.n	8005f14 <pvPortMalloc+0x6c>
	__asm volatile
 8005efe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f02:	f383 8811 	msr	BASEPRI, r3
 8005f06:	f3bf 8f6f 	isb	sy
 8005f0a:	f3bf 8f4f 	dsb	sy
 8005f0e:	617b      	str	r3, [r7, #20]
}
 8005f10:	bf00      	nop
 8005f12:	e7fe      	b.n	8005f12 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d069      	beq.n	8005fee <pvPortMalloc+0x146>
 8005f1a:	4b42      	ldr	r3, [pc, #264]	; (8006024 <pvPortMalloc+0x17c>)
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	687a      	ldr	r2, [r7, #4]
 8005f20:	429a      	cmp	r2, r3
 8005f22:	d864      	bhi.n	8005fee <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8005f24:	4b40      	ldr	r3, [pc, #256]	; (8006028 <pvPortMalloc+0x180>)
 8005f26:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8005f28:	4b3f      	ldr	r3, [pc, #252]	; (8006028 <pvPortMalloc+0x180>)
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005f2e:	e004      	b.n	8005f3a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8005f30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f32:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8005f34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005f3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f3c:	685b      	ldr	r3, [r3, #4]
 8005f3e:	687a      	ldr	r2, [r7, #4]
 8005f40:	429a      	cmp	r2, r3
 8005f42:	d903      	bls.n	8005f4c <pvPortMalloc+0xa4>
 8005f44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	d1f1      	bne.n	8005f30 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8005f4c:	4b33      	ldr	r3, [pc, #204]	; (800601c <pvPortMalloc+0x174>)
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005f52:	429a      	cmp	r2, r3
 8005f54:	d04b      	beq.n	8005fee <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005f56:	6a3b      	ldr	r3, [r7, #32]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	2208      	movs	r2, #8
 8005f5c:	4413      	add	r3, r2
 8005f5e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005f60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f62:	681a      	ldr	r2, [r3, #0]
 8005f64:	6a3b      	ldr	r3, [r7, #32]
 8005f66:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005f68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f6a:	685a      	ldr	r2, [r3, #4]
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	1ad2      	subs	r2, r2, r3
 8005f70:	2308      	movs	r3, #8
 8005f72:	005b      	lsls	r3, r3, #1
 8005f74:	429a      	cmp	r2, r3
 8005f76:	d91f      	bls.n	8005fb8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005f78:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	4413      	add	r3, r2
 8005f7e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005f80:	69bb      	ldr	r3, [r7, #24]
 8005f82:	f003 0307 	and.w	r3, r3, #7
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d00a      	beq.n	8005fa0 <pvPortMalloc+0xf8>
	__asm volatile
 8005f8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f8e:	f383 8811 	msr	BASEPRI, r3
 8005f92:	f3bf 8f6f 	isb	sy
 8005f96:	f3bf 8f4f 	dsb	sy
 8005f9a:	613b      	str	r3, [r7, #16]
}
 8005f9c:	bf00      	nop
 8005f9e:	e7fe      	b.n	8005f9e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005fa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fa2:	685a      	ldr	r2, [r3, #4]
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	1ad2      	subs	r2, r2, r3
 8005fa8:	69bb      	ldr	r3, [r7, #24]
 8005faa:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8005fac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fae:	687a      	ldr	r2, [r7, #4]
 8005fb0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005fb2:	69b8      	ldr	r0, [r7, #24]
 8005fb4:	f000 f8f8 	bl	80061a8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005fb8:	4b1a      	ldr	r3, [pc, #104]	; (8006024 <pvPortMalloc+0x17c>)
 8005fba:	681a      	ldr	r2, [r3, #0]
 8005fbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fbe:	685b      	ldr	r3, [r3, #4]
 8005fc0:	1ad3      	subs	r3, r2, r3
 8005fc2:	4a18      	ldr	r2, [pc, #96]	; (8006024 <pvPortMalloc+0x17c>)
 8005fc4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005fc6:	4b17      	ldr	r3, [pc, #92]	; (8006024 <pvPortMalloc+0x17c>)
 8005fc8:	681a      	ldr	r2, [r3, #0]
 8005fca:	4b18      	ldr	r3, [pc, #96]	; (800602c <pvPortMalloc+0x184>)
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	429a      	cmp	r2, r3
 8005fd0:	d203      	bcs.n	8005fda <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005fd2:	4b14      	ldr	r3, [pc, #80]	; (8006024 <pvPortMalloc+0x17c>)
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	4a15      	ldr	r2, [pc, #84]	; (800602c <pvPortMalloc+0x184>)
 8005fd8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8005fda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fdc:	685a      	ldr	r2, [r3, #4]
 8005fde:	4b10      	ldr	r3, [pc, #64]	; (8006020 <pvPortMalloc+0x178>)
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	431a      	orrs	r2, r3
 8005fe4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fe6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8005fe8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fea:	2200      	movs	r2, #0
 8005fec:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8005fee:	f7fe fbd7 	bl	80047a0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8005ff2:	69fb      	ldr	r3, [r7, #28]
 8005ff4:	f003 0307 	and.w	r3, r3, #7
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	d00a      	beq.n	8006012 <pvPortMalloc+0x16a>
	__asm volatile
 8005ffc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006000:	f383 8811 	msr	BASEPRI, r3
 8006004:	f3bf 8f6f 	isb	sy
 8006008:	f3bf 8f4f 	dsb	sy
 800600c:	60fb      	str	r3, [r7, #12]
}
 800600e:	bf00      	nop
 8006010:	e7fe      	b.n	8006010 <pvPortMalloc+0x168>
	return pvReturn;
 8006012:	69fb      	ldr	r3, [r7, #28]
}
 8006014:	4618      	mov	r0, r3
 8006016:	3728      	adds	r7, #40	; 0x28
 8006018:	46bd      	mov	sp, r7
 800601a:	bd80      	pop	{r7, pc}
 800601c:	20001b6c 	.word	0x20001b6c
 8006020:	20001b78 	.word	0x20001b78
 8006024:	20001b70 	.word	0x20001b70
 8006028:	20001b64 	.word	0x20001b64
 800602c:	20001b74 	.word	0x20001b74

08006030 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006030:	b580      	push	{r7, lr}
 8006032:	b086      	sub	sp, #24
 8006034:	af00      	add	r7, sp, #0
 8006036:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	2b00      	cmp	r3, #0
 8006040:	d048      	beq.n	80060d4 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8006042:	2308      	movs	r3, #8
 8006044:	425b      	negs	r3, r3
 8006046:	697a      	ldr	r2, [r7, #20]
 8006048:	4413      	add	r3, r2
 800604a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800604c:	697b      	ldr	r3, [r7, #20]
 800604e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006050:	693b      	ldr	r3, [r7, #16]
 8006052:	685a      	ldr	r2, [r3, #4]
 8006054:	4b21      	ldr	r3, [pc, #132]	; (80060dc <vPortFree+0xac>)
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	4013      	ands	r3, r2
 800605a:	2b00      	cmp	r3, #0
 800605c:	d10a      	bne.n	8006074 <vPortFree+0x44>
	__asm volatile
 800605e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006062:	f383 8811 	msr	BASEPRI, r3
 8006066:	f3bf 8f6f 	isb	sy
 800606a:	f3bf 8f4f 	dsb	sy
 800606e:	60fb      	str	r3, [r7, #12]
}
 8006070:	bf00      	nop
 8006072:	e7fe      	b.n	8006072 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006074:	693b      	ldr	r3, [r7, #16]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	2b00      	cmp	r3, #0
 800607a:	d00a      	beq.n	8006092 <vPortFree+0x62>
	__asm volatile
 800607c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006080:	f383 8811 	msr	BASEPRI, r3
 8006084:	f3bf 8f6f 	isb	sy
 8006088:	f3bf 8f4f 	dsb	sy
 800608c:	60bb      	str	r3, [r7, #8]
}
 800608e:	bf00      	nop
 8006090:	e7fe      	b.n	8006090 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8006092:	693b      	ldr	r3, [r7, #16]
 8006094:	685a      	ldr	r2, [r3, #4]
 8006096:	4b11      	ldr	r3, [pc, #68]	; (80060dc <vPortFree+0xac>)
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	4013      	ands	r3, r2
 800609c:	2b00      	cmp	r3, #0
 800609e:	d019      	beq.n	80060d4 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80060a0:	693b      	ldr	r3, [r7, #16]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	2b00      	cmp	r3, #0
 80060a6:	d115      	bne.n	80060d4 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80060a8:	693b      	ldr	r3, [r7, #16]
 80060aa:	685a      	ldr	r2, [r3, #4]
 80060ac:	4b0b      	ldr	r3, [pc, #44]	; (80060dc <vPortFree+0xac>)
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	43db      	mvns	r3, r3
 80060b2:	401a      	ands	r2, r3
 80060b4:	693b      	ldr	r3, [r7, #16]
 80060b6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80060b8:	f7fe fb64 	bl	8004784 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80060bc:	693b      	ldr	r3, [r7, #16]
 80060be:	685a      	ldr	r2, [r3, #4]
 80060c0:	4b07      	ldr	r3, [pc, #28]	; (80060e0 <vPortFree+0xb0>)
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	4413      	add	r3, r2
 80060c6:	4a06      	ldr	r2, [pc, #24]	; (80060e0 <vPortFree+0xb0>)
 80060c8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80060ca:	6938      	ldr	r0, [r7, #16]
 80060cc:	f000 f86c 	bl	80061a8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80060d0:	f7fe fb66 	bl	80047a0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80060d4:	bf00      	nop
 80060d6:	3718      	adds	r7, #24
 80060d8:	46bd      	mov	sp, r7
 80060da:	bd80      	pop	{r7, pc}
 80060dc:	20001b78 	.word	0x20001b78
 80060e0:	20001b70 	.word	0x20001b70

080060e4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80060e4:	b480      	push	{r7}
 80060e6:	b085      	sub	sp, #20
 80060e8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80060ea:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80060ee:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80060f0:	4b27      	ldr	r3, [pc, #156]	; (8006190 <prvHeapInit+0xac>)
 80060f2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	f003 0307 	and.w	r3, r3, #7
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	d00c      	beq.n	8006118 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	3307      	adds	r3, #7
 8006102:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	f023 0307 	bic.w	r3, r3, #7
 800610a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800610c:	68ba      	ldr	r2, [r7, #8]
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	1ad3      	subs	r3, r2, r3
 8006112:	4a1f      	ldr	r2, [pc, #124]	; (8006190 <prvHeapInit+0xac>)
 8006114:	4413      	add	r3, r2
 8006116:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800611c:	4a1d      	ldr	r2, [pc, #116]	; (8006194 <prvHeapInit+0xb0>)
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006122:	4b1c      	ldr	r3, [pc, #112]	; (8006194 <prvHeapInit+0xb0>)
 8006124:	2200      	movs	r2, #0
 8006126:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	68ba      	ldr	r2, [r7, #8]
 800612c:	4413      	add	r3, r2
 800612e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006130:	2208      	movs	r2, #8
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	1a9b      	subs	r3, r3, r2
 8006136:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	f023 0307 	bic.w	r3, r3, #7
 800613e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	4a15      	ldr	r2, [pc, #84]	; (8006198 <prvHeapInit+0xb4>)
 8006144:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8006146:	4b14      	ldr	r3, [pc, #80]	; (8006198 <prvHeapInit+0xb4>)
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	2200      	movs	r2, #0
 800614c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800614e:	4b12      	ldr	r3, [pc, #72]	; (8006198 <prvHeapInit+0xb4>)
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	2200      	movs	r2, #0
 8006154:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800615a:	683b      	ldr	r3, [r7, #0]
 800615c:	68fa      	ldr	r2, [r7, #12]
 800615e:	1ad2      	subs	r2, r2, r3
 8006160:	683b      	ldr	r3, [r7, #0]
 8006162:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006164:	4b0c      	ldr	r3, [pc, #48]	; (8006198 <prvHeapInit+0xb4>)
 8006166:	681a      	ldr	r2, [r3, #0]
 8006168:	683b      	ldr	r3, [r7, #0]
 800616a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800616c:	683b      	ldr	r3, [r7, #0]
 800616e:	685b      	ldr	r3, [r3, #4]
 8006170:	4a0a      	ldr	r2, [pc, #40]	; (800619c <prvHeapInit+0xb8>)
 8006172:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006174:	683b      	ldr	r3, [r7, #0]
 8006176:	685b      	ldr	r3, [r3, #4]
 8006178:	4a09      	ldr	r2, [pc, #36]	; (80061a0 <prvHeapInit+0xbc>)
 800617a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800617c:	4b09      	ldr	r3, [pc, #36]	; (80061a4 <prvHeapInit+0xc0>)
 800617e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8006182:	601a      	str	r2, [r3, #0]
}
 8006184:	bf00      	nop
 8006186:	3714      	adds	r7, #20
 8006188:	46bd      	mov	sp, r7
 800618a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800618e:	4770      	bx	lr
 8006190:	20000f64 	.word	0x20000f64
 8006194:	20001b64 	.word	0x20001b64
 8006198:	20001b6c 	.word	0x20001b6c
 800619c:	20001b74 	.word	0x20001b74
 80061a0:	20001b70 	.word	0x20001b70
 80061a4:	20001b78 	.word	0x20001b78

080061a8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80061a8:	b480      	push	{r7}
 80061aa:	b085      	sub	sp, #20
 80061ac:	af00      	add	r7, sp, #0
 80061ae:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80061b0:	4b28      	ldr	r3, [pc, #160]	; (8006254 <prvInsertBlockIntoFreeList+0xac>)
 80061b2:	60fb      	str	r3, [r7, #12]
 80061b4:	e002      	b.n	80061bc <prvInsertBlockIntoFreeList+0x14>
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	60fb      	str	r3, [r7, #12]
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	687a      	ldr	r2, [r7, #4]
 80061c2:	429a      	cmp	r2, r3
 80061c4:	d8f7      	bhi.n	80061b6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	685b      	ldr	r3, [r3, #4]
 80061ce:	68ba      	ldr	r2, [r7, #8]
 80061d0:	4413      	add	r3, r2
 80061d2:	687a      	ldr	r2, [r7, #4]
 80061d4:	429a      	cmp	r2, r3
 80061d6:	d108      	bne.n	80061ea <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	685a      	ldr	r2, [r3, #4]
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	685b      	ldr	r3, [r3, #4]
 80061e0:	441a      	add	r2, r3
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	685b      	ldr	r3, [r3, #4]
 80061f2:	68ba      	ldr	r2, [r7, #8]
 80061f4:	441a      	add	r2, r3
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	429a      	cmp	r2, r3
 80061fc:	d118      	bne.n	8006230 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	681a      	ldr	r2, [r3, #0]
 8006202:	4b15      	ldr	r3, [pc, #84]	; (8006258 <prvInsertBlockIntoFreeList+0xb0>)
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	429a      	cmp	r2, r3
 8006208:	d00d      	beq.n	8006226 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	685a      	ldr	r2, [r3, #4]
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	685b      	ldr	r3, [r3, #4]
 8006214:	441a      	add	r2, r3
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	681a      	ldr	r2, [r3, #0]
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	601a      	str	r2, [r3, #0]
 8006224:	e008      	b.n	8006238 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006226:	4b0c      	ldr	r3, [pc, #48]	; (8006258 <prvInsertBlockIntoFreeList+0xb0>)
 8006228:	681a      	ldr	r2, [r3, #0]
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	601a      	str	r2, [r3, #0]
 800622e:	e003      	b.n	8006238 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	681a      	ldr	r2, [r3, #0]
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006238:	68fa      	ldr	r2, [r7, #12]
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	429a      	cmp	r2, r3
 800623e:	d002      	beq.n	8006246 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	687a      	ldr	r2, [r7, #4]
 8006244:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006246:	bf00      	nop
 8006248:	3714      	adds	r7, #20
 800624a:	46bd      	mov	sp, r7
 800624c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006250:	4770      	bx	lr
 8006252:	bf00      	nop
 8006254:	20001b64 	.word	0x20001b64
 8006258:	20001b6c 	.word	0x20001b6c

0800625c <memset>:
 800625c:	4402      	add	r2, r0
 800625e:	4603      	mov	r3, r0
 8006260:	4293      	cmp	r3, r2
 8006262:	d100      	bne.n	8006266 <memset+0xa>
 8006264:	4770      	bx	lr
 8006266:	f803 1b01 	strb.w	r1, [r3], #1
 800626a:	e7f9      	b.n	8006260 <memset+0x4>

0800626c <_reclaim_reent>:
 800626c:	4b29      	ldr	r3, [pc, #164]	; (8006314 <_reclaim_reent+0xa8>)
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	4283      	cmp	r3, r0
 8006272:	b570      	push	{r4, r5, r6, lr}
 8006274:	4604      	mov	r4, r0
 8006276:	d04b      	beq.n	8006310 <_reclaim_reent+0xa4>
 8006278:	69c3      	ldr	r3, [r0, #28]
 800627a:	b143      	cbz	r3, 800628e <_reclaim_reent+0x22>
 800627c:	68db      	ldr	r3, [r3, #12]
 800627e:	2b00      	cmp	r3, #0
 8006280:	d144      	bne.n	800630c <_reclaim_reent+0xa0>
 8006282:	69e3      	ldr	r3, [r4, #28]
 8006284:	6819      	ldr	r1, [r3, #0]
 8006286:	b111      	cbz	r1, 800628e <_reclaim_reent+0x22>
 8006288:	4620      	mov	r0, r4
 800628a:	f000 f879 	bl	8006380 <_free_r>
 800628e:	6961      	ldr	r1, [r4, #20]
 8006290:	b111      	cbz	r1, 8006298 <_reclaim_reent+0x2c>
 8006292:	4620      	mov	r0, r4
 8006294:	f000 f874 	bl	8006380 <_free_r>
 8006298:	69e1      	ldr	r1, [r4, #28]
 800629a:	b111      	cbz	r1, 80062a2 <_reclaim_reent+0x36>
 800629c:	4620      	mov	r0, r4
 800629e:	f000 f86f 	bl	8006380 <_free_r>
 80062a2:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80062a4:	b111      	cbz	r1, 80062ac <_reclaim_reent+0x40>
 80062a6:	4620      	mov	r0, r4
 80062a8:	f000 f86a 	bl	8006380 <_free_r>
 80062ac:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80062ae:	b111      	cbz	r1, 80062b6 <_reclaim_reent+0x4a>
 80062b0:	4620      	mov	r0, r4
 80062b2:	f000 f865 	bl	8006380 <_free_r>
 80062b6:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80062b8:	b111      	cbz	r1, 80062c0 <_reclaim_reent+0x54>
 80062ba:	4620      	mov	r0, r4
 80062bc:	f000 f860 	bl	8006380 <_free_r>
 80062c0:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80062c2:	b111      	cbz	r1, 80062ca <_reclaim_reent+0x5e>
 80062c4:	4620      	mov	r0, r4
 80062c6:	f000 f85b 	bl	8006380 <_free_r>
 80062ca:	6c61      	ldr	r1, [r4, #68]	; 0x44
 80062cc:	b111      	cbz	r1, 80062d4 <_reclaim_reent+0x68>
 80062ce:	4620      	mov	r0, r4
 80062d0:	f000 f856 	bl	8006380 <_free_r>
 80062d4:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 80062d6:	b111      	cbz	r1, 80062de <_reclaim_reent+0x72>
 80062d8:	4620      	mov	r0, r4
 80062da:	f000 f851 	bl	8006380 <_free_r>
 80062de:	6a23      	ldr	r3, [r4, #32]
 80062e0:	b1b3      	cbz	r3, 8006310 <_reclaim_reent+0xa4>
 80062e2:	4620      	mov	r0, r4
 80062e4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80062e8:	4718      	bx	r3
 80062ea:	5949      	ldr	r1, [r1, r5]
 80062ec:	b941      	cbnz	r1, 8006300 <_reclaim_reent+0x94>
 80062ee:	3504      	adds	r5, #4
 80062f0:	69e3      	ldr	r3, [r4, #28]
 80062f2:	2d80      	cmp	r5, #128	; 0x80
 80062f4:	68d9      	ldr	r1, [r3, #12]
 80062f6:	d1f8      	bne.n	80062ea <_reclaim_reent+0x7e>
 80062f8:	4620      	mov	r0, r4
 80062fa:	f000 f841 	bl	8006380 <_free_r>
 80062fe:	e7c0      	b.n	8006282 <_reclaim_reent+0x16>
 8006300:	680e      	ldr	r6, [r1, #0]
 8006302:	4620      	mov	r0, r4
 8006304:	f000 f83c 	bl	8006380 <_free_r>
 8006308:	4631      	mov	r1, r6
 800630a:	e7ef      	b.n	80062ec <_reclaim_reent+0x80>
 800630c:	2500      	movs	r5, #0
 800630e:	e7ef      	b.n	80062f0 <_reclaim_reent+0x84>
 8006310:	bd70      	pop	{r4, r5, r6, pc}
 8006312:	bf00      	nop
 8006314:	20000088 	.word	0x20000088

08006318 <__libc_init_array>:
 8006318:	b570      	push	{r4, r5, r6, lr}
 800631a:	4d0d      	ldr	r5, [pc, #52]	; (8006350 <__libc_init_array+0x38>)
 800631c:	4c0d      	ldr	r4, [pc, #52]	; (8006354 <__libc_init_array+0x3c>)
 800631e:	1b64      	subs	r4, r4, r5
 8006320:	10a4      	asrs	r4, r4, #2
 8006322:	2600      	movs	r6, #0
 8006324:	42a6      	cmp	r6, r4
 8006326:	d109      	bne.n	800633c <__libc_init_array+0x24>
 8006328:	4d0b      	ldr	r5, [pc, #44]	; (8006358 <__libc_init_array+0x40>)
 800632a:	4c0c      	ldr	r4, [pc, #48]	; (800635c <__libc_init_array+0x44>)
 800632c:	f000 f880 	bl	8006430 <_init>
 8006330:	1b64      	subs	r4, r4, r5
 8006332:	10a4      	asrs	r4, r4, #2
 8006334:	2600      	movs	r6, #0
 8006336:	42a6      	cmp	r6, r4
 8006338:	d105      	bne.n	8006346 <__libc_init_array+0x2e>
 800633a:	bd70      	pop	{r4, r5, r6, pc}
 800633c:	f855 3b04 	ldr.w	r3, [r5], #4
 8006340:	4798      	blx	r3
 8006342:	3601      	adds	r6, #1
 8006344:	e7ee      	b.n	8006324 <__libc_init_array+0xc>
 8006346:	f855 3b04 	ldr.w	r3, [r5], #4
 800634a:	4798      	blx	r3
 800634c:	3601      	adds	r6, #1
 800634e:	e7f2      	b.n	8006336 <__libc_init_array+0x1e>
 8006350:	080065a0 	.word	0x080065a0
 8006354:	080065a0 	.word	0x080065a0
 8006358:	080065a0 	.word	0x080065a0
 800635c:	080065a4 	.word	0x080065a4

08006360 <__retarget_lock_acquire_recursive>:
 8006360:	4770      	bx	lr

08006362 <__retarget_lock_release_recursive>:
 8006362:	4770      	bx	lr

08006364 <memcpy>:
 8006364:	440a      	add	r2, r1
 8006366:	4291      	cmp	r1, r2
 8006368:	f100 33ff 	add.w	r3, r0, #4294967295
 800636c:	d100      	bne.n	8006370 <memcpy+0xc>
 800636e:	4770      	bx	lr
 8006370:	b510      	push	{r4, lr}
 8006372:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006376:	f803 4f01 	strb.w	r4, [r3, #1]!
 800637a:	4291      	cmp	r1, r2
 800637c:	d1f9      	bne.n	8006372 <memcpy+0xe>
 800637e:	bd10      	pop	{r4, pc}

08006380 <_free_r>:
 8006380:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006382:	2900      	cmp	r1, #0
 8006384:	d044      	beq.n	8006410 <_free_r+0x90>
 8006386:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800638a:	9001      	str	r0, [sp, #4]
 800638c:	2b00      	cmp	r3, #0
 800638e:	f1a1 0404 	sub.w	r4, r1, #4
 8006392:	bfb8      	it	lt
 8006394:	18e4      	addlt	r4, r4, r3
 8006396:	f000 f83f 	bl	8006418 <__malloc_lock>
 800639a:	4a1e      	ldr	r2, [pc, #120]	; (8006414 <_free_r+0x94>)
 800639c:	9801      	ldr	r0, [sp, #4]
 800639e:	6813      	ldr	r3, [r2, #0]
 80063a0:	b933      	cbnz	r3, 80063b0 <_free_r+0x30>
 80063a2:	6063      	str	r3, [r4, #4]
 80063a4:	6014      	str	r4, [r2, #0]
 80063a6:	b003      	add	sp, #12
 80063a8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80063ac:	f000 b83a 	b.w	8006424 <__malloc_unlock>
 80063b0:	42a3      	cmp	r3, r4
 80063b2:	d908      	bls.n	80063c6 <_free_r+0x46>
 80063b4:	6825      	ldr	r5, [r4, #0]
 80063b6:	1961      	adds	r1, r4, r5
 80063b8:	428b      	cmp	r3, r1
 80063ba:	bf01      	itttt	eq
 80063bc:	6819      	ldreq	r1, [r3, #0]
 80063be:	685b      	ldreq	r3, [r3, #4]
 80063c0:	1949      	addeq	r1, r1, r5
 80063c2:	6021      	streq	r1, [r4, #0]
 80063c4:	e7ed      	b.n	80063a2 <_free_r+0x22>
 80063c6:	461a      	mov	r2, r3
 80063c8:	685b      	ldr	r3, [r3, #4]
 80063ca:	b10b      	cbz	r3, 80063d0 <_free_r+0x50>
 80063cc:	42a3      	cmp	r3, r4
 80063ce:	d9fa      	bls.n	80063c6 <_free_r+0x46>
 80063d0:	6811      	ldr	r1, [r2, #0]
 80063d2:	1855      	adds	r5, r2, r1
 80063d4:	42a5      	cmp	r5, r4
 80063d6:	d10b      	bne.n	80063f0 <_free_r+0x70>
 80063d8:	6824      	ldr	r4, [r4, #0]
 80063da:	4421      	add	r1, r4
 80063dc:	1854      	adds	r4, r2, r1
 80063de:	42a3      	cmp	r3, r4
 80063e0:	6011      	str	r1, [r2, #0]
 80063e2:	d1e0      	bne.n	80063a6 <_free_r+0x26>
 80063e4:	681c      	ldr	r4, [r3, #0]
 80063e6:	685b      	ldr	r3, [r3, #4]
 80063e8:	6053      	str	r3, [r2, #4]
 80063ea:	440c      	add	r4, r1
 80063ec:	6014      	str	r4, [r2, #0]
 80063ee:	e7da      	b.n	80063a6 <_free_r+0x26>
 80063f0:	d902      	bls.n	80063f8 <_free_r+0x78>
 80063f2:	230c      	movs	r3, #12
 80063f4:	6003      	str	r3, [r0, #0]
 80063f6:	e7d6      	b.n	80063a6 <_free_r+0x26>
 80063f8:	6825      	ldr	r5, [r4, #0]
 80063fa:	1961      	adds	r1, r4, r5
 80063fc:	428b      	cmp	r3, r1
 80063fe:	bf04      	itt	eq
 8006400:	6819      	ldreq	r1, [r3, #0]
 8006402:	685b      	ldreq	r3, [r3, #4]
 8006404:	6063      	str	r3, [r4, #4]
 8006406:	bf04      	itt	eq
 8006408:	1949      	addeq	r1, r1, r5
 800640a:	6021      	streq	r1, [r4, #0]
 800640c:	6054      	str	r4, [r2, #4]
 800640e:	e7ca      	b.n	80063a6 <_free_r+0x26>
 8006410:	b003      	add	sp, #12
 8006412:	bd30      	pop	{r4, r5, pc}
 8006414:	20001cb8 	.word	0x20001cb8

08006418 <__malloc_lock>:
 8006418:	4801      	ldr	r0, [pc, #4]	; (8006420 <__malloc_lock+0x8>)
 800641a:	f7ff bfa1 	b.w	8006360 <__retarget_lock_acquire_recursive>
 800641e:	bf00      	nop
 8006420:	20001cb4 	.word	0x20001cb4

08006424 <__malloc_unlock>:
 8006424:	4801      	ldr	r0, [pc, #4]	; (800642c <__malloc_unlock+0x8>)
 8006426:	f7ff bf9c 	b.w	8006362 <__retarget_lock_release_recursive>
 800642a:	bf00      	nop
 800642c:	20001cb4 	.word	0x20001cb4

08006430 <_init>:
 8006430:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006432:	bf00      	nop
 8006434:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006436:	bc08      	pop	{r3}
 8006438:	469e      	mov	lr, r3
 800643a:	4770      	bx	lr

0800643c <_fini>:
 800643c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800643e:	bf00      	nop
 8006440:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006442:	bc08      	pop	{r3}
 8006444:	469e      	mov	lr, r3
 8006446:	4770      	bx	lr
