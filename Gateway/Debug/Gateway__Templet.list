
Gateway__Templet.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000054c8  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000150  08005668  08005668  00015668  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080057b8  080057b8  00020060  2**0
                  CONTENTS
  4 .ARM          00000000  080057b8  080057b8  00020060  2**0
                  CONTENTS
  5 .preinit_array 00000000  080057b8  080057b8  00020060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080057b8  080057b8  000157b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080057bc  080057bc  000157bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000060  20000000  080057c0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020060  2**0
                  CONTENTS
 10 .bss          00001c0c  20000060  20000060  00020060  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20001c6c  20001c6c  00020060  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020060  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 14 .debug_info   000157e1  00000000  00000000  000200d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 0000305b  00000000  00000000  000358b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001218  00000000  00000000  00038910  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000e21  00000000  00000000  00039b28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  000232e4  00000000  00000000  0003a949  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00016813  00000000  00000000  0005dc2d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000d73e8  00000000  00000000  00074440  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00004d58  00000000  00000000  0014b828  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000070  00000000  00000000  00150580  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000060 	.word	0x20000060
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08005650 	.word	0x08005650

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000064 	.word	0x20000064
 80001dc:	08005650 	.word	0x08005650

080001e0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80001e0:	b480      	push	{r7}
 80001e2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80001e4:	b672      	cpsid	i
}
 80001e6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80001e8:	e7fe      	b.n	80001e8 <Error_Handler+0x8>
	...

080001ec <MX_FREERTOS_Init>:
/*USER TASKs END FunctionPrototypes*/

/* USER CODE END FunctionPrototypes */


void MX_FREERTOS_Init(void) {
 80001ec:	b580      	push	{r7, lr}
 80001ee:	b082      	sub	sp, #8
 80001f0:	af02      	add	r7, sp, #8
  /* USER CODE END Init */

  /* USER CODE BEGIN RTOS_SEMAPHORES */
  /* add semaphores, ... */
	// General Branches
	OUT_N_S_MConn_MNSD_Semph = xSemaphoreCreateBinary();
 80001f2:	2203      	movs	r2, #3
 80001f4:	2100      	movs	r1, #0
 80001f6:	2001      	movs	r0, #1
 80001f8:	f002 fe75 	bl	8002ee6 <xQueueGenericCreate>
 80001fc:	4603      	mov	r3, r0
 80001fe:	4a8f      	ldr	r2, [pc, #572]	; (800043c <MX_FREERTOS_Init+0x250>)
 8000200:	6013      	str	r3, [r2, #0]
	// General control
	// ESP
	// SD
	// Nodes
	IN_N_CheckNet_Semph = xSemaphoreCreateBinary();
 8000202:	2203      	movs	r2, #3
 8000204:	2100      	movs	r1, #0
 8000206:	2001      	movs	r0, #1
 8000208:	f002 fe6d 	bl	8002ee6 <xQueueGenericCreate>
 800020c:	4603      	mov	r3, r0
 800020e:	4a8c      	ldr	r2, [pc, #560]	; (8000440 <MX_FREERTOS_Init+0x254>)
 8000210:	6013      	str	r3, [r2, #0]
	IN_N_MConn_MNet_Semph = xSemaphoreCreateBinary();
 8000212:	2203      	movs	r2, #3
 8000214:	2100      	movs	r1, #0
 8000216:	2001      	movs	r0, #1
 8000218:	f002 fe65 	bl	8002ee6 <xQueueGenericCreate>
 800021c:	4603      	mov	r3, r0
 800021e:	4a89      	ldr	r2, [pc, #548]	; (8000444 <MX_FREERTOS_Init+0x258>)
 8000220:	6013      	str	r3, [r2, #0]
  /* USER CODE END RTOS_SEMAPHORES */

  /* USER CODE BEGIN RTOS_TIMERS */
  /* start timers, add new ones, ... */
	Record_Timer = xTimerCreate("Record Timer", _1S_, pdTRUE, NULL, &vRecord_TimerCallBack ); // the periodic will change according to the flashing speed.
 8000222:	4b89      	ldr	r3, [pc, #548]	; (8000448 <MX_FREERTOS_Init+0x25c>)
 8000224:	9300      	str	r3, [sp, #0]
 8000226:	2300      	movs	r3, #0
 8000228:	2201      	movs	r2, #1
 800022a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800022e:	4887      	ldr	r0, [pc, #540]	; (800044c <MX_FREERTOS_Init+0x260>)
 8000230:	f004 f9dc 	bl	80045ec <xTimerCreate>
 8000234:	4603      	mov	r3, r0
 8000236:	4a86      	ldr	r2, [pc, #536]	; (8000450 <MX_FREERTOS_Init+0x264>)
 8000238:	6013      	str	r3, [r2, #0]
  /* USER CODE END RTOS_TIMERS */

  /* USER CODE BEGIN RTOS_QUEUES */
  /* add queues, ... */
	// General Branches
	OUT_E_S_MESP_MSD_Queue 	= xQueueCreate(2,sizeof(uint8_t));
 800023a:	2200      	movs	r2, #0
 800023c:	2101      	movs	r1, #1
 800023e:	2002      	movs	r0, #2
 8000240:	f002 fe51 	bl	8002ee6 <xQueueGenericCreate>
 8000244:	4603      	mov	r3, r0
 8000246:	4a83      	ldr	r2, [pc, #524]	; (8000454 <MX_FREERTOS_Init+0x268>)
 8000248:	6013      	str	r3, [r2, #0]
	OUT_S_N_MSD_MNet_Queue 	= xQueueCreate(2,sizeof(uint8_t));
 800024a:	2200      	movs	r2, #0
 800024c:	2101      	movs	r1, #1
 800024e:	2002      	movs	r0, #2
 8000250:	f002 fe49 	bl	8002ee6 <xQueueGenericCreate>
 8000254:	4603      	mov	r3, r0
 8000256:	4a80      	ldr	r2, [pc, #512]	; (8000458 <MX_FREERTOS_Init+0x26c>)
 8000258:	6013      	str	r3, [r2, #0]
	OUT_S_N_MSD_MConn_Queue = xQueueCreate(2,sizeof(uint8_t));
 800025a:	2200      	movs	r2, #0
 800025c:	2101      	movs	r1, #1
 800025e:	2002      	movs	r0, #2
 8000260:	f002 fe41 	bl	8002ee6 <xQueueGenericCreate>
 8000264:	4603      	mov	r3, r0
 8000266:	4a7d      	ldr	r2, [pc, #500]	; (800045c <MX_FREERTOS_Init+0x270>)
 8000268:	6013      	str	r3, [r2, #0]
	// General control
	IN_G_CBranch_CDMA_Queue = xQueueCreate(2,sizeof(uint8_t));
 800026a:	2200      	movs	r2, #0
 800026c:	2101      	movs	r1, #1
 800026e:	2002      	movs	r0, #2
 8000270:	f002 fe39 	bl	8002ee6 <xQueueGenericCreate>
 8000274:	4603      	mov	r3, r0
 8000276:	4a7a      	ldr	r2, [pc, #488]	; (8000460 <MX_FREERTOS_Init+0x274>)
 8000278:	6013      	str	r3, [r2, #0]
	// ESP
	IN_E_Receive_MESP_Queue = xQueueCreate(2,sizeof(uint8_t));
 800027a:	2200      	movs	r2, #0
 800027c:	2101      	movs	r1, #1
 800027e:	2002      	movs	r0, #2
 8000280:	f002 fe31 	bl	8002ee6 <xQueueGenericCreate>
 8000284:	4603      	mov	r3, r0
 8000286:	4a77      	ldr	r2, [pc, #476]	; (8000464 <MX_FREERTOS_Init+0x278>)
 8000288:	6013      	str	r3, [r2, #0]
	IN_E_MESP_Send_Queue    = xQueueCreate(2,sizeof(uint8_t));
 800028a:	2200      	movs	r2, #0
 800028c:	2101      	movs	r1, #1
 800028e:	2002      	movs	r0, #2
 8000290:	f002 fe29 	bl	8002ee6 <xQueueGenericCreate>
 8000294:	4603      	mov	r3, r0
 8000296:	4a74      	ldr	r2, [pc, #464]	; (8000468 <MX_FREERTOS_Init+0x27c>)
 8000298:	6013      	str	r3, [r2, #0]
	// SD
	IN_S_Receive_MSD_Queue 	= xQueueCreate(2,sizeof(uint8_t));
 800029a:	2200      	movs	r2, #0
 800029c:	2101      	movs	r1, #1
 800029e:	2002      	movs	r0, #2
 80002a0:	f002 fe21 	bl	8002ee6 <xQueueGenericCreate>
 80002a4:	4603      	mov	r3, r0
 80002a6:	4a71      	ldr	r2, [pc, #452]	; (800046c <MX_FREERTOS_Init+0x280>)
 80002a8:	6013      	str	r3, [r2, #0]
	IN_S_MSD_Send_Queue 	= xQueueCreate(2,sizeof(uint8_t));
 80002aa:	2200      	movs	r2, #0
 80002ac:	2101      	movs	r1, #1
 80002ae:	2002      	movs	r0, #2
 80002b0:	f002 fe19 	bl	8002ee6 <xQueueGenericCreate>
 80002b4:	4603      	mov	r3, r0
 80002b6:	4a6e      	ldr	r2, [pc, #440]	; (8000470 <MX_FREERTOS_Init+0x284>)
 80002b8:	6013      	str	r3, [r2, #0]
	// Nodes
	IN_N_MNetwork_MConn_Queue   = xQueueCreate(2,sizeof(uint8_t));
 80002ba:	2200      	movs	r2, #0
 80002bc:	2101      	movs	r1, #1
 80002be:	2002      	movs	r0, #2
 80002c0:	f002 fe11 	bl	8002ee6 <xQueueGenericCreate>
 80002c4:	4603      	mov	r3, r0
 80002c6:	4a6b      	ldr	r2, [pc, #428]	; (8000474 <MX_FREERTOS_Init+0x288>)
 80002c8:	6013      	str	r3, [r2, #0]
	IN_N_Receive_MConn_Queue    = xQueueCreate(2,sizeof(uint8_t));
 80002ca:	2200      	movs	r2, #0
 80002cc:	2101      	movs	r1, #1
 80002ce:	2002      	movs	r0, #2
 80002d0:	f002 fe09 	bl	8002ee6 <xQueueGenericCreate>
 80002d4:	4603      	mov	r3, r0
 80002d6:	4a68      	ldr	r2, [pc, #416]	; (8000478 <MX_FREERTOS_Init+0x28c>)
 80002d8:	6013      	str	r3, [r2, #0]
	IN_N_MConn_Send_Queue 	    = xQueueCreate(2,sizeof(uint8_t));
 80002da:	2200      	movs	r2, #0
 80002dc:	2101      	movs	r1, #1
 80002de:	2002      	movs	r0, #2
 80002e0:	f002 fe01 	bl	8002ee6 <xQueueGenericCreate>
 80002e4:	4603      	mov	r3, r0
 80002e6:	4a65      	ldr	r2, [pc, #404]	; (800047c <MX_FREERTOS_Init+0x290>)
 80002e8:	6013      	str	r3, [r2, #0]
	IN_N_Receive_CheckNet_Queue = xQueueCreate(2,sizeof(uint8_t));
 80002ea:	2200      	movs	r2, #0
 80002ec:	2101      	movs	r1, #1
 80002ee:	2002      	movs	r0, #2
 80002f0:	f002 fdf9 	bl	8002ee6 <xQueueGenericCreate>
 80002f4:	4603      	mov	r3, r0
 80002f6:	4a62      	ldr	r2, [pc, #392]	; (8000480 <MX_FREERTOS_Init+0x294>)
 80002f8:	6013      	str	r3, [r2, #0]
	IN_N_CheckNet_Send_Queue 	= xQueueCreate(2,sizeof(uint8_t));
 80002fa:	2200      	movs	r2, #0
 80002fc:	2101      	movs	r1, #1
 80002fe:	2002      	movs	r0, #2
 8000300:	f002 fdf1 	bl	8002ee6 <xQueueGenericCreate>
 8000304:	4603      	mov	r3, r0
 8000306:	4a5f      	ldr	r2, [pc, #380]	; (8000484 <MX_FREERTOS_Init+0x298>)
 8000308:	6013      	str	r3, [r2, #0]

  /* Create the thread(s) */
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
	/* General Branch Fun */
	xTaskCreate( Check_Validity_Task_Func , "Check Validity"  , 100 , NULL , 26U , &Check_Validity_Task_Handler );
 800030a:	4b5f      	ldr	r3, [pc, #380]	; (8000488 <MX_FREERTOS_Init+0x29c>)
 800030c:	9301      	str	r3, [sp, #4]
 800030e:	231a      	movs	r3, #26
 8000310:	9300      	str	r3, [sp, #0]
 8000312:	2300      	movs	r3, #0
 8000314:	2264      	movs	r2, #100	; 0x64
 8000316:	495d      	ldr	r1, [pc, #372]	; (800048c <MX_FREERTOS_Init+0x2a0>)
 8000318:	485d      	ldr	r0, [pc, #372]	; (8000490 <MX_FREERTOS_Init+0x2a4>)
 800031a:	f003 fa85 	bl	8003828 <xTaskCreate>
	/* General Control Branch Fun */
	xTaskCreate( Init_Deinit_Reset_Task_Func , "Initi,Deinit,and Reset"  , 100 , NULL , 30U , &Init_Deinit_Reset_Task_Handler );
 800031e:	4b5d      	ldr	r3, [pc, #372]	; (8000494 <MX_FREERTOS_Init+0x2a8>)
 8000320:	9301      	str	r3, [sp, #4]
 8000322:	231e      	movs	r3, #30
 8000324:	9300      	str	r3, [sp, #0]
 8000326:	2300      	movs	r3, #0
 8000328:	2264      	movs	r2, #100	; 0x64
 800032a:	495b      	ldr	r1, [pc, #364]	; (8000498 <MX_FREERTOS_Init+0x2ac>)
 800032c:	485b      	ldr	r0, [pc, #364]	; (800049c <MX_FREERTOS_Init+0x2b0>)
 800032e:	f003 fa7b 	bl	8003828 <xTaskCreate>
	xTaskCreate( Control_Branch_Task_Func , "Control Branch"  , 100 , NULL , 29U , &Control_Branch_Task_Handler );
 8000332:	4b5b      	ldr	r3, [pc, #364]	; (80004a0 <MX_FREERTOS_Init+0x2b4>)
 8000334:	9301      	str	r3, [sp, #4]
 8000336:	231d      	movs	r3, #29
 8000338:	9300      	str	r3, [sp, #0]
 800033a:	2300      	movs	r3, #0
 800033c:	2264      	movs	r2, #100	; 0x64
 800033e:	4959      	ldr	r1, [pc, #356]	; (80004a4 <MX_FREERTOS_Init+0x2b8>)
 8000340:	4859      	ldr	r0, [pc, #356]	; (80004a8 <MX_FREERTOS_Init+0x2bc>)
 8000342:	f003 fa71 	bl	8003828 <xTaskCreate>
	xTaskCreate( Control_DMA_Task_Func , "Control DMA"  , 100 , NULL , 28U , &Control_DMA_Task_Handler );
 8000346:	4b59      	ldr	r3, [pc, #356]	; (80004ac <MX_FREERTOS_Init+0x2c0>)
 8000348:	9301      	str	r3, [sp, #4]
 800034a:	231c      	movs	r3, #28
 800034c:	9300      	str	r3, [sp, #0]
 800034e:	2300      	movs	r3, #0
 8000350:	2264      	movs	r2, #100	; 0x64
 8000352:	4957      	ldr	r1, [pc, #348]	; (80004b0 <MX_FREERTOS_Init+0x2c4>)
 8000354:	4857      	ldr	r0, [pc, #348]	; (80004b4 <MX_FREERTOS_Init+0x2c8>)
 8000356:	f003 fa67 	bl	8003828 <xTaskCreate>
	/* ESP Branch Fun */
	xTaskCreate( Receive_from_EST_Task_Func , "Receive from EST"  , 100 , NULL , 5U , &Receive_from_EST_Task_Handler );
 800035a:	4b57      	ldr	r3, [pc, #348]	; (80004b8 <MX_FREERTOS_Init+0x2cc>)
 800035c:	9301      	str	r3, [sp, #4]
 800035e:	2305      	movs	r3, #5
 8000360:	9300      	str	r3, [sp, #0]
 8000362:	2300      	movs	r3, #0
 8000364:	2264      	movs	r2, #100	; 0x64
 8000366:	4955      	ldr	r1, [pc, #340]	; (80004bc <MX_FREERTOS_Init+0x2d0>)
 8000368:	4855      	ldr	r0, [pc, #340]	; (80004c0 <MX_FREERTOS_Init+0x2d4>)
 800036a:	f003 fa5d 	bl	8003828 <xTaskCreate>
	xTaskCreate( Manage_ESP_Task_Func , "Manage ESP"  , 100 , NULL , 4U , &Manage_ESP_Task_Handler );
 800036e:	4b55      	ldr	r3, [pc, #340]	; (80004c4 <MX_FREERTOS_Init+0x2d8>)
 8000370:	9301      	str	r3, [sp, #4]
 8000372:	2304      	movs	r3, #4
 8000374:	9300      	str	r3, [sp, #0]
 8000376:	2300      	movs	r3, #0
 8000378:	2264      	movs	r2, #100	; 0x64
 800037a:	4953      	ldr	r1, [pc, #332]	; (80004c8 <MX_FREERTOS_Init+0x2dc>)
 800037c:	4853      	ldr	r0, [pc, #332]	; (80004cc <MX_FREERTOS_Init+0x2e0>)
 800037e:	f003 fa53 	bl	8003828 <xTaskCreate>
	xTaskCreate( Send_to_ESP_Task_Func , "Send to ESP"  , 100 , NULL , 3U , &Send_to_ESP_Task_Handler );
 8000382:	4b53      	ldr	r3, [pc, #332]	; (80004d0 <MX_FREERTOS_Init+0x2e4>)
 8000384:	9301      	str	r3, [sp, #4]
 8000386:	2303      	movs	r3, #3
 8000388:	9300      	str	r3, [sp, #0]
 800038a:	2300      	movs	r3, #0
 800038c:	2264      	movs	r2, #100	; 0x64
 800038e:	4951      	ldr	r1, [pc, #324]	; (80004d4 <MX_FREERTOS_Init+0x2e8>)
 8000390:	4851      	ldr	r0, [pc, #324]	; (80004d8 <MX_FREERTOS_Init+0x2ec>)
 8000392:	f003 fa49 	bl	8003828 <xTaskCreate>
	/* SD Branch Fun */
	xTaskCreate( Manage_SD_Task_Func , "Manage SD"  , 100 , NULL , 5U , &Manage_SD_Task_Handler );
 8000396:	4b51      	ldr	r3, [pc, #324]	; (80004dc <MX_FREERTOS_Init+0x2f0>)
 8000398:	9301      	str	r3, [sp, #4]
 800039a:	2305      	movs	r3, #5
 800039c:	9300      	str	r3, [sp, #0]
 800039e:	2300      	movs	r3, #0
 80003a0:	2264      	movs	r2, #100	; 0x64
 80003a2:	494f      	ldr	r1, [pc, #316]	; (80004e0 <MX_FREERTOS_Init+0x2f4>)
 80003a4:	484f      	ldr	r0, [pc, #316]	; (80004e4 <MX_FREERTOS_Init+0x2f8>)
 80003a6:	f003 fa3f 	bl	8003828 <xTaskCreate>
	xTaskCreate( Send_to_SD_Task_Func , "Send to SD"  , 100 , NULL , 4U , &Send_to_SD_Task_Handler );
 80003aa:	4b4f      	ldr	r3, [pc, #316]	; (80004e8 <MX_FREERTOS_Init+0x2fc>)
 80003ac:	9301      	str	r3, [sp, #4]
 80003ae:	2304      	movs	r3, #4
 80003b0:	9300      	str	r3, [sp, #0]
 80003b2:	2300      	movs	r3, #0
 80003b4:	2264      	movs	r2, #100	; 0x64
 80003b6:	494d      	ldr	r1, [pc, #308]	; (80004ec <MX_FREERTOS_Init+0x300>)
 80003b8:	484d      	ldr	r0, [pc, #308]	; (80004f0 <MX_FREERTOS_Init+0x304>)
 80003ba:	f003 fa35 	bl	8003828 <xTaskCreate>
	xTaskCreate( Receive_from_SD_Task_Func , "Receive from SD"  , 100 , NULL , 3U , &Receive_from_SD_Task_Handler );
 80003be:	4b4d      	ldr	r3, [pc, #308]	; (80004f4 <MX_FREERTOS_Init+0x308>)
 80003c0:	9301      	str	r3, [sp, #4]
 80003c2:	2303      	movs	r3, #3
 80003c4:	9300      	str	r3, [sp, #0]
 80003c6:	2300      	movs	r3, #0
 80003c8:	2264      	movs	r2, #100	; 0x64
 80003ca:	494b      	ldr	r1, [pc, #300]	; (80004f8 <MX_FREERTOS_Init+0x30c>)
 80003cc:	484b      	ldr	r0, [pc, #300]	; (80004fc <MX_FREERTOS_Init+0x310>)
 80003ce:	f003 fa2b 	bl	8003828 <xTaskCreate>
	/* Main Nodes Branch Fun */
	xTaskCreate( Check_Network_Task_Func , "Check Network"  , 100 , NULL , 5U , &Check_Network_Task_Handler );
 80003d2:	4b4b      	ldr	r3, [pc, #300]	; (8000500 <MX_FREERTOS_Init+0x314>)
 80003d4:	9301      	str	r3, [sp, #4]
 80003d6:	2305      	movs	r3, #5
 80003d8:	9300      	str	r3, [sp, #0]
 80003da:	2300      	movs	r3, #0
 80003dc:	2264      	movs	r2, #100	; 0x64
 80003de:	4949      	ldr	r1, [pc, #292]	; (8000504 <MX_FREERTOS_Init+0x318>)
 80003e0:	4849      	ldr	r0, [pc, #292]	; (8000508 <MX_FREERTOS_Init+0x31c>)
 80003e2:	f003 fa21 	bl	8003828 <xTaskCreate>
	xTaskCreate( Manage_Network_Task_Func , "Manage Network"  , 100 , NULL , 4U , &Manage_Network_Task_Handler );
 80003e6:	4b49      	ldr	r3, [pc, #292]	; (800050c <MX_FREERTOS_Init+0x320>)
 80003e8:	9301      	str	r3, [sp, #4]
 80003ea:	2304      	movs	r3, #4
 80003ec:	9300      	str	r3, [sp, #0]
 80003ee:	2300      	movs	r3, #0
 80003f0:	2264      	movs	r2, #100	; 0x64
 80003f2:	4947      	ldr	r1, [pc, #284]	; (8000510 <MX_FREERTOS_Init+0x324>)
 80003f4:	4847      	ldr	r0, [pc, #284]	; (8000514 <MX_FREERTOS_Init+0x328>)
 80003f6:	f003 fa17 	bl	8003828 <xTaskCreate>
	xTaskCreate( Receive_from_Node_Task_Func , "Receive from Node"  , 100 , NULL , 3U , &Receive_from_Node_Task_Handler );
 80003fa:	4b47      	ldr	r3, [pc, #284]	; (8000518 <MX_FREERTOS_Init+0x32c>)
 80003fc:	9301      	str	r3, [sp, #4]
 80003fe:	2303      	movs	r3, #3
 8000400:	9300      	str	r3, [sp, #0]
 8000402:	2300      	movs	r3, #0
 8000404:	2264      	movs	r2, #100	; 0x64
 8000406:	4945      	ldr	r1, [pc, #276]	; (800051c <MX_FREERTOS_Init+0x330>)
 8000408:	4845      	ldr	r0, [pc, #276]	; (8000520 <MX_FREERTOS_Init+0x334>)
 800040a:	f003 fa0d 	bl	8003828 <xTaskCreate>
	xTaskCreate( Manage_Connection_Task_Func , "Manage Connection"  , 100 , NULL , 2U , &Manage_Connection_Task_Handler );
 800040e:	4b45      	ldr	r3, [pc, #276]	; (8000524 <MX_FREERTOS_Init+0x338>)
 8000410:	9301      	str	r3, [sp, #4]
 8000412:	2302      	movs	r3, #2
 8000414:	9300      	str	r3, [sp, #0]
 8000416:	2300      	movs	r3, #0
 8000418:	2264      	movs	r2, #100	; 0x64
 800041a:	4943      	ldr	r1, [pc, #268]	; (8000528 <MX_FREERTOS_Init+0x33c>)
 800041c:	4843      	ldr	r0, [pc, #268]	; (800052c <MX_FREERTOS_Init+0x340>)
 800041e:	f003 fa03 	bl	8003828 <xTaskCreate>
	xTaskCreate( Send_to_Node_Task_Func , "Send to Node"  , 100 , NULL , 1U , &Send_to_Node_Task_Handler );
 8000422:	4b43      	ldr	r3, [pc, #268]	; (8000530 <MX_FREERTOS_Init+0x344>)
 8000424:	9301      	str	r3, [sp, #4]
 8000426:	2301      	movs	r3, #1
 8000428:	9300      	str	r3, [sp, #0]
 800042a:	2300      	movs	r3, #0
 800042c:	2264      	movs	r2, #100	; 0x64
 800042e:	4941      	ldr	r1, [pc, #260]	; (8000534 <MX_FREERTOS_Init+0x348>)
 8000430:	4841      	ldr	r0, [pc, #260]	; (8000538 <MX_FREERTOS_Init+0x34c>)
 8000432:	f003 f9f9 	bl	8003828 <xTaskCreate>

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8000436:	bf00      	nop
 8000438:	46bd      	mov	sp, r7
 800043a:	bd80      	pop	{r7, pc}
 800043c:	200000ec 	.word	0x200000ec
 8000440:	200000f0 	.word	0x200000f0
 8000444:	200000f4 	.word	0x200000f4
 8000448:	0800053d 	.word	0x0800053d
 800044c:	08005668 	.word	0x08005668
 8000450:	200000f8 	.word	0x200000f8
 8000454:	200000b8 	.word	0x200000b8
 8000458:	200000bc 	.word	0x200000bc
 800045c:	200000c0 	.word	0x200000c0
 8000460:	200000c4 	.word	0x200000c4
 8000464:	200000c8 	.word	0x200000c8
 8000468:	200000cc 	.word	0x200000cc
 800046c:	200000d0 	.word	0x200000d0
 8000470:	200000d4 	.word	0x200000d4
 8000474:	200000d8 	.word	0x200000d8
 8000478:	200000dc 	.word	0x200000dc
 800047c:	200000e0 	.word	0x200000e0
 8000480:	200000e4 	.word	0x200000e4
 8000484:	200000e8 	.word	0x200000e8
 8000488:	2000007c 	.word	0x2000007c
 800048c:	08005678 	.word	0x08005678
 8000490:	08000551 	.word	0x08000551
 8000494:	20000080 	.word	0x20000080
 8000498:	08005688 	.word	0x08005688
 800049c:	0800055b 	.word	0x0800055b
 80004a0:	20000084 	.word	0x20000084
 80004a4:	080056a0 	.word	0x080056a0
 80004a8:	08000565 	.word	0x08000565
 80004ac:	20000088 	.word	0x20000088
 80004b0:	080056b0 	.word	0x080056b0
 80004b4:	0800056f 	.word	0x0800056f
 80004b8:	20000094 	.word	0x20000094
 80004bc:	080056bc 	.word	0x080056bc
 80004c0:	0800058d 	.word	0x0800058d
 80004c4:	2000008c 	.word	0x2000008c
 80004c8:	080056d0 	.word	0x080056d0
 80004cc:	08000579 	.word	0x08000579
 80004d0:	20000090 	.word	0x20000090
 80004d4:	080056dc 	.word	0x080056dc
 80004d8:	08000583 	.word	0x08000583
 80004dc:	20000098 	.word	0x20000098
 80004e0:	080056e8 	.word	0x080056e8
 80004e4:	08000597 	.word	0x08000597
 80004e8:	2000009c 	.word	0x2000009c
 80004ec:	080056f4 	.word	0x080056f4
 80004f0:	080005a1 	.word	0x080005a1
 80004f4:	200000a0 	.word	0x200000a0
 80004f8:	08005700 	.word	0x08005700
 80004fc:	080005ab 	.word	0x080005ab
 8000500:	200000a4 	.word	0x200000a4
 8000504:	08005710 	.word	0x08005710
 8000508:	080005b5 	.word	0x080005b5
 800050c:	200000a8 	.word	0x200000a8
 8000510:	08005720 	.word	0x08005720
 8000514:	080005bf 	.word	0x080005bf
 8000518:	200000b0 	.word	0x200000b0
 800051c:	08005730 	.word	0x08005730
 8000520:	080005d3 	.word	0x080005d3
 8000524:	200000ac 	.word	0x200000ac
 8000528:	08005744 	.word	0x08005744
 800052c:	080005c9 	.word	0x080005c9
 8000530:	200000b4 	.word	0x200000b4
 8000534:	08005758 	.word	0x08005758
 8000538:	080005dd 	.word	0x080005dd

0800053c <vRecord_TimerCallBack>:
/* USER CODE BEGIN Application */

/*@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@*/
/* ISRs code -----------------------------------------------------------------*/
void vRecord_TimerCallBack(TimerHandle_t Bump_Dist_Timer)
{}
 800053c:	b480      	push	{r7}
 800053e:	b083      	sub	sp, #12
 8000540:	af00      	add	r7, sp, #0
 8000542:	6078      	str	r0, [r7, #4]
 8000544:	bf00      	nop
 8000546:	370c      	adds	r7, #12
 8000548:	46bd      	mov	sp, r7
 800054a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800054e:	4770      	bx	lr

08000550 <Check_Validity_Task_Func>:

/*@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@*/
/* General Branch code -------------------------------------------------------*/

void Check_Validity_Task_Func(void * pvParameters)
{
 8000550:	b480      	push	{r7}
 8000552:	b083      	sub	sp, #12
 8000554:	af00      	add	r7, sp, #0
 8000556:	6078      	str	r0, [r7, #4]
	while(1)
 8000558:	e7fe      	b.n	8000558 <Check_Validity_Task_Func+0x8>

0800055a <Init_Deinit_Reset_Task_Func>:
/*@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@*/

/*@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@*/
/* General Control Branch code -----------------------------------------------*/
void Init_Deinit_Reset_Task_Func(void * pvParameters)
{
 800055a:	b480      	push	{r7}
 800055c:	b083      	sub	sp, #12
 800055e:	af00      	add	r7, sp, #0
 8000560:	6078      	str	r0, [r7, #4]
	while(1)
 8000562:	e7fe      	b.n	8000562 <Init_Deinit_Reset_Task_Func+0x8>

08000564 <Control_Branch_Task_Func>:

	}
}

void Control_Branch_Task_Func(void * pvParameters)
{
 8000564:	b480      	push	{r7}
 8000566:	b083      	sub	sp, #12
 8000568:	af00      	add	r7, sp, #0
 800056a:	6078      	str	r0, [r7, #4]
	while(1)
 800056c:	e7fe      	b.n	800056c <Control_Branch_Task_Func+0x8>

0800056e <Control_DMA_Task_Func>:

	}
}

void Control_DMA_Task_Func(void * pvParameters)
{
 800056e:	b480      	push	{r7}
 8000570:	b083      	sub	sp, #12
 8000572:	af00      	add	r7, sp, #0
 8000574:	6078      	str	r0, [r7, #4]
	while(1)
 8000576:	e7fe      	b.n	8000576 <Control_DMA_Task_Func+0x8>

08000578 <Manage_ESP_Task_Func>:
/*@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@*/

/*@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@*/
/* ESP Branch code -----------------------------------------------------------*/
void Manage_ESP_Task_Func(void * pvParameters)
{
 8000578:	b480      	push	{r7}
 800057a:	b083      	sub	sp, #12
 800057c:	af00      	add	r7, sp, #0
 800057e:	6078      	str	r0, [r7, #4]
	while(1)
 8000580:	e7fe      	b.n	8000580 <Manage_ESP_Task_Func+0x8>

08000582 <Send_to_ESP_Task_Func>:

	}
}

void Send_to_ESP_Task_Func(void * pvParameters)
{
 8000582:	b480      	push	{r7}
 8000584:	b083      	sub	sp, #12
 8000586:	af00      	add	r7, sp, #0
 8000588:	6078      	str	r0, [r7, #4]
	while(1)
 800058a:	e7fe      	b.n	800058a <Send_to_ESP_Task_Func+0x8>

0800058c <Receive_from_EST_Task_Func>:

	}
}

void Receive_from_EST_Task_Func(void * pvParameters)
{
 800058c:	b480      	push	{r7}
 800058e:	b083      	sub	sp, #12
 8000590:	af00      	add	r7, sp, #0
 8000592:	6078      	str	r0, [r7, #4]
	while(1)
 8000594:	e7fe      	b.n	8000594 <Receive_from_EST_Task_Func+0x8>

08000596 <Manage_SD_Task_Func>:

/*@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@*/
/* SD Branch code -------------------------------------------------------*/

void Manage_SD_Task_Func(void * pvParameters)
{
 8000596:	b480      	push	{r7}
 8000598:	b083      	sub	sp, #12
 800059a:	af00      	add	r7, sp, #0
 800059c:	6078      	str	r0, [r7, #4]
	while(1)
 800059e:	e7fe      	b.n	800059e <Manage_SD_Task_Func+0x8>

080005a0 <Send_to_SD_Task_Func>:

	}
}

void Send_to_SD_Task_Func(void * pvParameters)
{
 80005a0:	b480      	push	{r7}
 80005a2:	b083      	sub	sp, #12
 80005a4:	af00      	add	r7, sp, #0
 80005a6:	6078      	str	r0, [r7, #4]
	while(1)
 80005a8:	e7fe      	b.n	80005a8 <Send_to_SD_Task_Func+0x8>

080005aa <Receive_from_SD_Task_Func>:

	}
}

void Receive_from_SD_Task_Func(void * pvParameters)
{
 80005aa:	b480      	push	{r7}
 80005ac:	b083      	sub	sp, #12
 80005ae:	af00      	add	r7, sp, #0
 80005b0:	6078      	str	r0, [r7, #4]
	while(1)
 80005b2:	e7fe      	b.n	80005b2 <Receive_from_SD_Task_Func+0x8>

080005b4 <Check_Network_Task_Func>:

/*@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@*/
/* Main Nodes Branch code ----------------------------------------------------*/

void Check_Network_Task_Func(void * pvParameters)
{
 80005b4:	b480      	push	{r7}
 80005b6:	b083      	sub	sp, #12
 80005b8:	af00      	add	r7, sp, #0
 80005ba:	6078      	str	r0, [r7, #4]
	while(1)
 80005bc:	e7fe      	b.n	80005bc <Check_Network_Task_Func+0x8>

080005be <Manage_Network_Task_Func>:

	}
}

void Manage_Network_Task_Func(void * pvParameters)
{
 80005be:	b480      	push	{r7}
 80005c0:	b083      	sub	sp, #12
 80005c2:	af00      	add	r7, sp, #0
 80005c4:	6078      	str	r0, [r7, #4]
	while(1)
 80005c6:	e7fe      	b.n	80005c6 <Manage_Network_Task_Func+0x8>

080005c8 <Manage_Connection_Task_Func>:

	}
}

void Manage_Connection_Task_Func(void * pvParameters)
{
 80005c8:	b480      	push	{r7}
 80005ca:	b083      	sub	sp, #12
 80005cc:	af00      	add	r7, sp, #0
 80005ce:	6078      	str	r0, [r7, #4]
	while(1)
 80005d0:	e7fe      	b.n	80005d0 <Manage_Connection_Task_Func+0x8>

080005d2 <Receive_from_Node_Task_Func>:

	}
}

void Receive_from_Node_Task_Func(void * pvParameters)
{
 80005d2:	b480      	push	{r7}
 80005d4:	b083      	sub	sp, #12
 80005d6:	af00      	add	r7, sp, #0
 80005d8:	6078      	str	r0, [r7, #4]
	while(1)
 80005da:	e7fe      	b.n	80005da <Receive_from_Node_Task_Func+0x8>

080005dc <Send_to_Node_Task_Func>:

	}
}

void Send_to_Node_Task_Func(void * pvParameters)
{
 80005dc:	b480      	push	{r7}
 80005de:	b083      	sub	sp, #12
 80005e0:	af00      	add	r7, sp, #0
 80005e2:	6078      	str	r0, [r7, #4]
	while(1)
 80005e4:	e7fe      	b.n	80005e4 <Send_to_Node_Task_Func+0x8>
	...

080005e8 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Pinout Configuration
*/
void MX_GPIO_Init(void)
{
 80005e8:	b480      	push	{r7}
 80005ea:	b085      	sub	sp, #20
 80005ec:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80005ee:	4b1b      	ldr	r3, [pc, #108]	; (800065c <MX_GPIO_Init+0x74>)
 80005f0:	695b      	ldr	r3, [r3, #20]
 80005f2:	4a1a      	ldr	r2, [pc, #104]	; (800065c <MX_GPIO_Init+0x74>)
 80005f4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80005f8:	6153      	str	r3, [r2, #20]
 80005fa:	4b18      	ldr	r3, [pc, #96]	; (800065c <MX_GPIO_Init+0x74>)
 80005fc:	695b      	ldr	r3, [r3, #20]
 80005fe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000602:	60fb      	str	r3, [r7, #12]
 8000604:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000606:	4b15      	ldr	r3, [pc, #84]	; (800065c <MX_GPIO_Init+0x74>)
 8000608:	695b      	ldr	r3, [r3, #20]
 800060a:	4a14      	ldr	r2, [pc, #80]	; (800065c <MX_GPIO_Init+0x74>)
 800060c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000610:	6153      	str	r3, [r2, #20]
 8000612:	4b12      	ldr	r3, [pc, #72]	; (800065c <MX_GPIO_Init+0x74>)
 8000614:	695b      	ldr	r3, [r3, #20]
 8000616:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800061a:	60bb      	str	r3, [r7, #8]
 800061c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800061e:	4b0f      	ldr	r3, [pc, #60]	; (800065c <MX_GPIO_Init+0x74>)
 8000620:	695b      	ldr	r3, [r3, #20]
 8000622:	4a0e      	ldr	r2, [pc, #56]	; (800065c <MX_GPIO_Init+0x74>)
 8000624:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000628:	6153      	str	r3, [r2, #20]
 800062a:	4b0c      	ldr	r3, [pc, #48]	; (800065c <MX_GPIO_Init+0x74>)
 800062c:	695b      	ldr	r3, [r3, #20]
 800062e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000632:	607b      	str	r3, [r7, #4]
 8000634:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000636:	4b09      	ldr	r3, [pc, #36]	; (800065c <MX_GPIO_Init+0x74>)
 8000638:	695b      	ldr	r3, [r3, #20]
 800063a:	4a08      	ldr	r2, [pc, #32]	; (800065c <MX_GPIO_Init+0x74>)
 800063c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000640:	6153      	str	r3, [r2, #20]
 8000642:	4b06      	ldr	r3, [pc, #24]	; (800065c <MX_GPIO_Init+0x74>)
 8000644:	695b      	ldr	r3, [r3, #20]
 8000646:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800064a:	603b      	str	r3, [r7, #0]
 800064c:	683b      	ldr	r3, [r7, #0]

}
 800064e:	bf00      	nop
 8000650:	3714      	adds	r7, #20
 8000652:	46bd      	mov	sp, r7
 8000654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000658:	4770      	bx	lr
 800065a:	bf00      	nop
 800065c:	40021000 	.word	0x40021000

08000660 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000660:	b580      	push	{r7, lr}
 8000662:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000664:	f000 f96a 	bl	800093c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000668:	f000 f809 	bl	800067e <SystemClock_Config>
  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800066c:	f7ff ffbc 	bl	80005e8 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000670:	f002 fa0a 	bl	8002a88 <osKernelInitialize>

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 8000674:	f7ff fdba 	bl	80001ec <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8000678:	f002 fa3a 	bl	8002af0 <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800067c:	e7fe      	b.n	800067c <main+0x1c>

0800067e <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800067e:	b580      	push	{r7, lr}
 8000680:	b0a6      	sub	sp, #152	; 0x98
 8000682:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000684:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000688:	2228      	movs	r2, #40	; 0x28
 800068a:	2100      	movs	r1, #0
 800068c:	4618      	mov	r0, r3
 800068e:	f004 fef5 	bl	800547c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000692:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000696:	2200      	movs	r2, #0
 8000698:	601a      	str	r2, [r3, #0]
 800069a:	605a      	str	r2, [r3, #4]
 800069c:	609a      	str	r2, [r3, #8]
 800069e:	60da      	str	r2, [r3, #12]
 80006a0:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80006a2:	1d3b      	adds	r3, r7, #4
 80006a4:	2258      	movs	r2, #88	; 0x58
 80006a6:	2100      	movs	r1, #0
 80006a8:	4618      	mov	r0, r3
 80006aa:	f004 fee7 	bl	800547c <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006ae:	2302      	movs	r3, #2
 80006b0:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006b2:	2301      	movs	r3, #1
 80006b4:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006b6:	2310      	movs	r3, #16
 80006b8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80006bc:	2300      	movs	r3, #0
 80006be:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006c2:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80006c6:	4618      	mov	r0, r3
 80006c8:	f000 fa50 	bl	8000b6c <HAL_RCC_OscConfig>
 80006cc:	4603      	mov	r3, r0
 80006ce:	2b00      	cmp	r3, #0
 80006d0:	d001      	beq.n	80006d6 <SystemClock_Config+0x58>
  {
    Error_Handler();
 80006d2:	f7ff fd85 	bl	80001e0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006d6:	230f      	movs	r3, #15
 80006d8:	65fb      	str	r3, [r7, #92]	; 0x5c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80006da:	2300      	movs	r3, #0
 80006dc:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006de:	2300      	movs	r3, #0
 80006e0:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006e2:	2300      	movs	r3, #0
 80006e4:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006e6:	2300      	movs	r3, #0
 80006e8:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80006ea:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80006ee:	2100      	movs	r1, #0
 80006f0:	4618      	mov	r0, r3
 80006f2:	f001 fa8f 	bl	8001c14 <HAL_RCC_ClockConfig>
 80006f6:	4603      	mov	r3, r0
 80006f8:	2b00      	cmp	r3, #0
 80006fa:	d001      	beq.n	8000700 <SystemClock_Config+0x82>
  {
    Error_Handler();
 80006fc:	f7ff fd70 	bl	80001e0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_USART2
 8000700:	2327      	movs	r3, #39	; 0x27
 8000702:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_I2C1;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000704:	2300      	movs	r3, #0
 8000706:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000708:	2300      	movs	r3, #0
 800070a:	613b      	str	r3, [r7, #16]
  PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 800070c:	2300      	movs	r3, #0
 800070e:	617b      	str	r3, [r7, #20]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8000710:	2300      	movs	r3, #0
 8000712:	623b      	str	r3, [r7, #32]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000714:	1d3b      	adds	r3, r7, #4
 8000716:	4618      	mov	r0, r3
 8000718:	f001 fcc2 	bl	80020a0 <HAL_RCCEx_PeriphCLKConfig>
 800071c:	4603      	mov	r3, r0
 800071e:	2b00      	cmp	r3, #0
 8000720:	d001      	beq.n	8000726 <SystemClock_Config+0xa8>
  {
    Error_Handler();
 8000722:	f7ff fd5d 	bl	80001e0 <Error_Handler>
  }
}
 8000726:	bf00      	nop
 8000728:	3798      	adds	r7, #152	; 0x98
 800072a:	46bd      	mov	sp, r7
 800072c:	bd80      	pop	{r7, pc}
	...

08000730 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000730:	b580      	push	{r7, lr}
 8000732:	b082      	sub	sp, #8
 8000734:	af00      	add	r7, sp, #0
 8000736:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000738:	687b      	ldr	r3, [r7, #4]
 800073a:	681b      	ldr	r3, [r3, #0]
 800073c:	4a04      	ldr	r2, [pc, #16]	; (8000750 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800073e:	4293      	cmp	r3, r2
 8000740:	d101      	bne.n	8000746 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000742:	f000 f911 	bl	8000968 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000746:	bf00      	nop
 8000748:	3708      	adds	r7, #8
 800074a:	46bd      	mov	sp, r7
 800074c:	bd80      	pop	{r7, pc}
 800074e:	bf00      	nop
 8000750:	40012c00 	.word	0x40012c00

08000754 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000754:	b580      	push	{r7, lr}
 8000756:	b082      	sub	sp, #8
 8000758:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800075a:	4b11      	ldr	r3, [pc, #68]	; (80007a0 <HAL_MspInit+0x4c>)
 800075c:	699b      	ldr	r3, [r3, #24]
 800075e:	4a10      	ldr	r2, [pc, #64]	; (80007a0 <HAL_MspInit+0x4c>)
 8000760:	f043 0301 	orr.w	r3, r3, #1
 8000764:	6193      	str	r3, [r2, #24]
 8000766:	4b0e      	ldr	r3, [pc, #56]	; (80007a0 <HAL_MspInit+0x4c>)
 8000768:	699b      	ldr	r3, [r3, #24]
 800076a:	f003 0301 	and.w	r3, r3, #1
 800076e:	607b      	str	r3, [r7, #4]
 8000770:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000772:	4b0b      	ldr	r3, [pc, #44]	; (80007a0 <HAL_MspInit+0x4c>)
 8000774:	69db      	ldr	r3, [r3, #28]
 8000776:	4a0a      	ldr	r2, [pc, #40]	; (80007a0 <HAL_MspInit+0x4c>)
 8000778:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800077c:	61d3      	str	r3, [r2, #28]
 800077e:	4b08      	ldr	r3, [pc, #32]	; (80007a0 <HAL_MspInit+0x4c>)
 8000780:	69db      	ldr	r3, [r3, #28]
 8000782:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000786:	603b      	str	r3, [r7, #0]
 8000788:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800078a:	2200      	movs	r2, #0
 800078c:	210f      	movs	r1, #15
 800078e:	f06f 0001 	mvn.w	r0, #1
 8000792:	f000 f9c1 	bl	8000b18 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000796:	bf00      	nop
 8000798:	3708      	adds	r7, #8
 800079a:	46bd      	mov	sp, r7
 800079c:	bd80      	pop	{r7, pc}
 800079e:	bf00      	nop
 80007a0:	40021000 	.word	0x40021000

080007a4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80007a4:	b580      	push	{r7, lr}
 80007a6:	b08c      	sub	sp, #48	; 0x30
 80007a8:	af00      	add	r7, sp, #0
 80007aa:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 80007ac:	2300      	movs	r3, #0
 80007ae:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 80007b0:	2300      	movs	r3, #0
 80007b2:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 80007b4:	4b2e      	ldr	r3, [pc, #184]	; (8000870 <HAL_InitTick+0xcc>)
 80007b6:	699b      	ldr	r3, [r3, #24]
 80007b8:	4a2d      	ldr	r2, [pc, #180]	; (8000870 <HAL_InitTick+0xcc>)
 80007ba:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80007be:	6193      	str	r3, [r2, #24]
 80007c0:	4b2b      	ldr	r3, [pc, #172]	; (8000870 <HAL_InitTick+0xcc>)
 80007c2:	699b      	ldr	r3, [r3, #24]
 80007c4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80007c8:	60bb      	str	r3, [r7, #8]
 80007ca:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80007cc:	f107 020c 	add.w	r2, r7, #12
 80007d0:	f107 0310 	add.w	r3, r7, #16
 80007d4:	4611      	mov	r1, r2
 80007d6:	4618      	mov	r0, r3
 80007d8:	f001 fc30 	bl	800203c <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 80007dc:	f001 fc0c 	bl	8001ff8 <HAL_RCC_GetPCLK2Freq>
 80007e0:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80007e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80007e4:	4a23      	ldr	r2, [pc, #140]	; (8000874 <HAL_InitTick+0xd0>)
 80007e6:	fba2 2303 	umull	r2, r3, r2, r3
 80007ea:	0c9b      	lsrs	r3, r3, #18
 80007ec:	3b01      	subs	r3, #1
 80007ee:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 80007f0:	4b21      	ldr	r3, [pc, #132]	; (8000878 <HAL_InitTick+0xd4>)
 80007f2:	4a22      	ldr	r2, [pc, #136]	; (800087c <HAL_InitTick+0xd8>)
 80007f4:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 80007f6:	4b20      	ldr	r3, [pc, #128]	; (8000878 <HAL_InitTick+0xd4>)
 80007f8:	f240 32e7 	movw	r2, #999	; 0x3e7
 80007fc:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 80007fe:	4a1e      	ldr	r2, [pc, #120]	; (8000878 <HAL_InitTick+0xd4>)
 8000800:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000802:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000804:	4b1c      	ldr	r3, [pc, #112]	; (8000878 <HAL_InitTick+0xd4>)
 8000806:	2200      	movs	r2, #0
 8000808:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800080a:	4b1b      	ldr	r3, [pc, #108]	; (8000878 <HAL_InitTick+0xd4>)
 800080c:	2200      	movs	r2, #0
 800080e:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000810:	4b19      	ldr	r3, [pc, #100]	; (8000878 <HAL_InitTick+0xd4>)
 8000812:	2200      	movs	r2, #0
 8000814:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8000816:	4818      	ldr	r0, [pc, #96]	; (8000878 <HAL_InitTick+0xd4>)
 8000818:	f001 fe60 	bl	80024dc <HAL_TIM_Base_Init>
 800081c:	4603      	mov	r3, r0
 800081e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8000822:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000826:	2b00      	cmp	r3, #0
 8000828:	d11b      	bne.n	8000862 <HAL_InitTick+0xbe>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 800082a:	4813      	ldr	r0, [pc, #76]	; (8000878 <HAL_InitTick+0xd4>)
 800082c:	f001 feb8 	bl	80025a0 <HAL_TIM_Base_Start_IT>
 8000830:	4603      	mov	r3, r0
 8000832:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8000836:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800083a:	2b00      	cmp	r3, #0
 800083c:	d111      	bne.n	8000862 <HAL_InitTick+0xbe>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 800083e:	2019      	movs	r0, #25
 8000840:	f000 f986 	bl	8000b50 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000844:	687b      	ldr	r3, [r7, #4]
 8000846:	2b0f      	cmp	r3, #15
 8000848:	d808      	bhi.n	800085c <HAL_InitTick+0xb8>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority, 0U);
 800084a:	2200      	movs	r2, #0
 800084c:	6879      	ldr	r1, [r7, #4]
 800084e:	2019      	movs	r0, #25
 8000850:	f000 f962 	bl	8000b18 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000854:	4a0a      	ldr	r2, [pc, #40]	; (8000880 <HAL_InitTick+0xdc>)
 8000856:	687b      	ldr	r3, [r7, #4]
 8000858:	6013      	str	r3, [r2, #0]
 800085a:	e002      	b.n	8000862 <HAL_InitTick+0xbe>
      }
      else
      {
        status = HAL_ERROR;
 800085c:	2301      	movs	r3, #1
 800085e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8000862:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8000866:	4618      	mov	r0, r3
 8000868:	3730      	adds	r7, #48	; 0x30
 800086a:	46bd      	mov	sp, r7
 800086c:	bd80      	pop	{r7, pc}
 800086e:	bf00      	nop
 8000870:	40021000 	.word	0x40021000
 8000874:	431bde83 	.word	0x431bde83
 8000878:	200000fc 	.word	0x200000fc
 800087c:	40012c00 	.word	0x40012c00
 8000880:	20000004 	.word	0x20000004

08000884 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000884:	b480      	push	{r7}
 8000886:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000888:	e7fe      	b.n	8000888 <NMI_Handler+0x4>

0800088a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800088a:	b480      	push	{r7}
 800088c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800088e:	e7fe      	b.n	800088e <HardFault_Handler+0x4>

08000890 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000890:	b480      	push	{r7}
 8000892:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000894:	e7fe      	b.n	8000894 <MemManage_Handler+0x4>

08000896 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000896:	b480      	push	{r7}
 8000898:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800089a:	e7fe      	b.n	800089a <BusFault_Handler+0x4>

0800089c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800089c:	b480      	push	{r7}
 800089e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80008a0:	e7fe      	b.n	80008a0 <UsageFault_Handler+0x4>

080008a2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80008a2:	b480      	push	{r7}
 80008a4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80008a6:	bf00      	nop
 80008a8:	46bd      	mov	sp, r7
 80008aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ae:	4770      	bx	lr

080008b0 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update and TIM16 interrupts.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 80008b0:	b580      	push	{r7, lr}
 80008b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80008b4:	4802      	ldr	r0, [pc, #8]	; (80008c0 <TIM1_UP_TIM16_IRQHandler+0x10>)
 80008b6:	f001 fee3 	bl	8002680 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 80008ba:	bf00      	nop
 80008bc:	bd80      	pop	{r7, pc}
 80008be:	bf00      	nop
 80008c0:	200000fc 	.word	0x200000fc

080008c4 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80008c4:	b480      	push	{r7}
 80008c6:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80008c8:	4b06      	ldr	r3, [pc, #24]	; (80008e4 <SystemInit+0x20>)
 80008ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80008ce:	4a05      	ldr	r2, [pc, #20]	; (80008e4 <SystemInit+0x20>)
 80008d0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80008d4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80008d8:	bf00      	nop
 80008da:	46bd      	mov	sp, r7
 80008dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008e0:	4770      	bx	lr
 80008e2:	bf00      	nop
 80008e4:	e000ed00 	.word	0xe000ed00

080008e8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80008e8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000920 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 80008ec:	f7ff ffea 	bl	80008c4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80008f0:	480c      	ldr	r0, [pc, #48]	; (8000924 <LoopForever+0x6>)
  ldr r1, =_edata
 80008f2:	490d      	ldr	r1, [pc, #52]	; (8000928 <LoopForever+0xa>)
  ldr r2, =_sidata
 80008f4:	4a0d      	ldr	r2, [pc, #52]	; (800092c <LoopForever+0xe>)
  movs r3, #0
 80008f6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80008f8:	e002      	b.n	8000900 <LoopCopyDataInit>

080008fa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80008fa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80008fc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80008fe:	3304      	adds	r3, #4

08000900 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000900:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000902:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000904:	d3f9      	bcc.n	80008fa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000906:	4a0a      	ldr	r2, [pc, #40]	; (8000930 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000908:	4c0a      	ldr	r4, [pc, #40]	; (8000934 <LoopForever+0x16>)
  movs r3, #0
 800090a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800090c:	e001      	b.n	8000912 <LoopFillZerobss>

0800090e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800090e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000910:	3204      	adds	r2, #4

08000912 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000912:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000914:	d3fb      	bcc.n	800090e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000916:	f004 fe0f 	bl	8005538 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800091a:	f7ff fea1 	bl	8000660 <main>

0800091e <LoopForever>:

LoopForever:
    b LoopForever
 800091e:	e7fe      	b.n	800091e <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000920:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000924:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000928:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 800092c:	080057c0 	.word	0x080057c0
  ldr r2, =_sbss
 8000930:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8000934:	20001c6c 	.word	0x20001c6c

08000938 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000938:	e7fe      	b.n	8000938 <ADC1_2_IRQHandler>
	...

0800093c <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800093c:	b580      	push	{r7, lr}
 800093e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000940:	4b08      	ldr	r3, [pc, #32]	; (8000964 <HAL_Init+0x28>)
 8000942:	681b      	ldr	r3, [r3, #0]
 8000944:	4a07      	ldr	r2, [pc, #28]	; (8000964 <HAL_Init+0x28>)
 8000946:	f043 0310 	orr.w	r3, r3, #16
 800094a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800094c:	2003      	movs	r0, #3
 800094e:	f000 f8d8 	bl	8000b02 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000952:	200f      	movs	r0, #15
 8000954:	f7ff ff26 	bl	80007a4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000958:	f7ff fefc 	bl	8000754 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800095c:	2300      	movs	r3, #0
}
 800095e:	4618      	mov	r0, r3
 8000960:	bd80      	pop	{r7, pc}
 8000962:	bf00      	nop
 8000964:	40022000 	.word	0x40022000

08000968 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000968:	b480      	push	{r7}
 800096a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800096c:	4b06      	ldr	r3, [pc, #24]	; (8000988 <HAL_IncTick+0x20>)
 800096e:	781b      	ldrb	r3, [r3, #0]
 8000970:	461a      	mov	r2, r3
 8000972:	4b06      	ldr	r3, [pc, #24]	; (800098c <HAL_IncTick+0x24>)
 8000974:	681b      	ldr	r3, [r3, #0]
 8000976:	4413      	add	r3, r2
 8000978:	4a04      	ldr	r2, [pc, #16]	; (800098c <HAL_IncTick+0x24>)
 800097a:	6013      	str	r3, [r2, #0]
}
 800097c:	bf00      	nop
 800097e:	46bd      	mov	sp, r7
 8000980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop
 8000988:	20000008 	.word	0x20000008
 800098c:	20000148 	.word	0x20000148

08000990 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000990:	b480      	push	{r7}
 8000992:	af00      	add	r7, sp, #0
  return uwTick;  
 8000994:	4b03      	ldr	r3, [pc, #12]	; (80009a4 <HAL_GetTick+0x14>)
 8000996:	681b      	ldr	r3, [r3, #0]
}
 8000998:	4618      	mov	r0, r3
 800099a:	46bd      	mov	sp, r7
 800099c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a0:	4770      	bx	lr
 80009a2:	bf00      	nop
 80009a4:	20000148 	.word	0x20000148

080009a8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80009a8:	b480      	push	{r7}
 80009aa:	b085      	sub	sp, #20
 80009ac:	af00      	add	r7, sp, #0
 80009ae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80009b0:	687b      	ldr	r3, [r7, #4]
 80009b2:	f003 0307 	and.w	r3, r3, #7
 80009b6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80009b8:	4b0c      	ldr	r3, [pc, #48]	; (80009ec <__NVIC_SetPriorityGrouping+0x44>)
 80009ba:	68db      	ldr	r3, [r3, #12]
 80009bc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80009be:	68ba      	ldr	r2, [r7, #8]
 80009c0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80009c4:	4013      	ands	r3, r2
 80009c6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80009c8:	68fb      	ldr	r3, [r7, #12]
 80009ca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80009cc:	68bb      	ldr	r3, [r7, #8]
 80009ce:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80009d0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80009d4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80009d8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80009da:	4a04      	ldr	r2, [pc, #16]	; (80009ec <__NVIC_SetPriorityGrouping+0x44>)
 80009dc:	68bb      	ldr	r3, [r7, #8]
 80009de:	60d3      	str	r3, [r2, #12]
}
 80009e0:	bf00      	nop
 80009e2:	3714      	adds	r7, #20
 80009e4:	46bd      	mov	sp, r7
 80009e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ea:	4770      	bx	lr
 80009ec:	e000ed00 	.word	0xe000ed00

080009f0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80009f0:	b480      	push	{r7}
 80009f2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80009f4:	4b04      	ldr	r3, [pc, #16]	; (8000a08 <__NVIC_GetPriorityGrouping+0x18>)
 80009f6:	68db      	ldr	r3, [r3, #12]
 80009f8:	0a1b      	lsrs	r3, r3, #8
 80009fa:	f003 0307 	and.w	r3, r3, #7
}
 80009fe:	4618      	mov	r0, r3
 8000a00:	46bd      	mov	sp, r7
 8000a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a06:	4770      	bx	lr
 8000a08:	e000ed00 	.word	0xe000ed00

08000a0c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a0c:	b480      	push	{r7}
 8000a0e:	b083      	sub	sp, #12
 8000a10:	af00      	add	r7, sp, #0
 8000a12:	4603      	mov	r3, r0
 8000a14:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a1a:	2b00      	cmp	r3, #0
 8000a1c:	db0b      	blt.n	8000a36 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000a1e:	79fb      	ldrb	r3, [r7, #7]
 8000a20:	f003 021f 	and.w	r2, r3, #31
 8000a24:	4907      	ldr	r1, [pc, #28]	; (8000a44 <__NVIC_EnableIRQ+0x38>)
 8000a26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a2a:	095b      	lsrs	r3, r3, #5
 8000a2c:	2001      	movs	r0, #1
 8000a2e:	fa00 f202 	lsl.w	r2, r0, r2
 8000a32:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000a36:	bf00      	nop
 8000a38:	370c      	adds	r7, #12
 8000a3a:	46bd      	mov	sp, r7
 8000a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a40:	4770      	bx	lr
 8000a42:	bf00      	nop
 8000a44:	e000e100 	.word	0xe000e100

08000a48 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000a48:	b480      	push	{r7}
 8000a4a:	b083      	sub	sp, #12
 8000a4c:	af00      	add	r7, sp, #0
 8000a4e:	4603      	mov	r3, r0
 8000a50:	6039      	str	r1, [r7, #0]
 8000a52:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a54:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a58:	2b00      	cmp	r3, #0
 8000a5a:	db0a      	blt.n	8000a72 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a5c:	683b      	ldr	r3, [r7, #0]
 8000a5e:	b2da      	uxtb	r2, r3
 8000a60:	490c      	ldr	r1, [pc, #48]	; (8000a94 <__NVIC_SetPriority+0x4c>)
 8000a62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a66:	0112      	lsls	r2, r2, #4
 8000a68:	b2d2      	uxtb	r2, r2
 8000a6a:	440b      	add	r3, r1
 8000a6c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000a70:	e00a      	b.n	8000a88 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a72:	683b      	ldr	r3, [r7, #0]
 8000a74:	b2da      	uxtb	r2, r3
 8000a76:	4908      	ldr	r1, [pc, #32]	; (8000a98 <__NVIC_SetPriority+0x50>)
 8000a78:	79fb      	ldrb	r3, [r7, #7]
 8000a7a:	f003 030f 	and.w	r3, r3, #15
 8000a7e:	3b04      	subs	r3, #4
 8000a80:	0112      	lsls	r2, r2, #4
 8000a82:	b2d2      	uxtb	r2, r2
 8000a84:	440b      	add	r3, r1
 8000a86:	761a      	strb	r2, [r3, #24]
}
 8000a88:	bf00      	nop
 8000a8a:	370c      	adds	r7, #12
 8000a8c:	46bd      	mov	sp, r7
 8000a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a92:	4770      	bx	lr
 8000a94:	e000e100 	.word	0xe000e100
 8000a98:	e000ed00 	.word	0xe000ed00

08000a9c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a9c:	b480      	push	{r7}
 8000a9e:	b089      	sub	sp, #36	; 0x24
 8000aa0:	af00      	add	r7, sp, #0
 8000aa2:	60f8      	str	r0, [r7, #12]
 8000aa4:	60b9      	str	r1, [r7, #8]
 8000aa6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000aa8:	68fb      	ldr	r3, [r7, #12]
 8000aaa:	f003 0307 	and.w	r3, r3, #7
 8000aae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ab0:	69fb      	ldr	r3, [r7, #28]
 8000ab2:	f1c3 0307 	rsb	r3, r3, #7
 8000ab6:	2b04      	cmp	r3, #4
 8000ab8:	bf28      	it	cs
 8000aba:	2304      	movcs	r3, #4
 8000abc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000abe:	69fb      	ldr	r3, [r7, #28]
 8000ac0:	3304      	adds	r3, #4
 8000ac2:	2b06      	cmp	r3, #6
 8000ac4:	d902      	bls.n	8000acc <NVIC_EncodePriority+0x30>
 8000ac6:	69fb      	ldr	r3, [r7, #28]
 8000ac8:	3b03      	subs	r3, #3
 8000aca:	e000      	b.n	8000ace <NVIC_EncodePriority+0x32>
 8000acc:	2300      	movs	r3, #0
 8000ace:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ad0:	f04f 32ff 	mov.w	r2, #4294967295
 8000ad4:	69bb      	ldr	r3, [r7, #24]
 8000ad6:	fa02 f303 	lsl.w	r3, r2, r3
 8000ada:	43da      	mvns	r2, r3
 8000adc:	68bb      	ldr	r3, [r7, #8]
 8000ade:	401a      	ands	r2, r3
 8000ae0:	697b      	ldr	r3, [r7, #20]
 8000ae2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ae4:	f04f 31ff 	mov.w	r1, #4294967295
 8000ae8:	697b      	ldr	r3, [r7, #20]
 8000aea:	fa01 f303 	lsl.w	r3, r1, r3
 8000aee:	43d9      	mvns	r1, r3
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000af4:	4313      	orrs	r3, r2
         );
}
 8000af6:	4618      	mov	r0, r3
 8000af8:	3724      	adds	r7, #36	; 0x24
 8000afa:	46bd      	mov	sp, r7
 8000afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b00:	4770      	bx	lr

08000b02 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b02:	b580      	push	{r7, lr}
 8000b04:	b082      	sub	sp, #8
 8000b06:	af00      	add	r7, sp, #0
 8000b08:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000b0a:	6878      	ldr	r0, [r7, #4]
 8000b0c:	f7ff ff4c 	bl	80009a8 <__NVIC_SetPriorityGrouping>
}
 8000b10:	bf00      	nop
 8000b12:	3708      	adds	r7, #8
 8000b14:	46bd      	mov	sp, r7
 8000b16:	bd80      	pop	{r7, pc}

08000b18 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	b086      	sub	sp, #24
 8000b1c:	af00      	add	r7, sp, #0
 8000b1e:	4603      	mov	r3, r0
 8000b20:	60b9      	str	r1, [r7, #8]
 8000b22:	607a      	str	r2, [r7, #4]
 8000b24:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000b26:	2300      	movs	r3, #0
 8000b28:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000b2a:	f7ff ff61 	bl	80009f0 <__NVIC_GetPriorityGrouping>
 8000b2e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000b30:	687a      	ldr	r2, [r7, #4]
 8000b32:	68b9      	ldr	r1, [r7, #8]
 8000b34:	6978      	ldr	r0, [r7, #20]
 8000b36:	f7ff ffb1 	bl	8000a9c <NVIC_EncodePriority>
 8000b3a:	4602      	mov	r2, r0
 8000b3c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000b40:	4611      	mov	r1, r2
 8000b42:	4618      	mov	r0, r3
 8000b44:	f7ff ff80 	bl	8000a48 <__NVIC_SetPriority>
}
 8000b48:	bf00      	nop
 8000b4a:	3718      	adds	r7, #24
 8000b4c:	46bd      	mov	sp, r7
 8000b4e:	bd80      	pop	{r7, pc}

08000b50 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b50:	b580      	push	{r7, lr}
 8000b52:	b082      	sub	sp, #8
 8000b54:	af00      	add	r7, sp, #0
 8000b56:	4603      	mov	r3, r0
 8000b58:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000b5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b5e:	4618      	mov	r0, r3
 8000b60:	f7ff ff54 	bl	8000a0c <__NVIC_EnableIRQ>
}
 8000b64:	bf00      	nop
 8000b66:	3708      	adds	r7, #8
 8000b68:	46bd      	mov	sp, r7
 8000b6a:	bd80      	pop	{r7, pc}

08000b6c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 8000b72:	af00      	add	r7, sp, #0
 8000b74:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8000b78:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8000b7c:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000b7e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8000b82:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8000b86:	681b      	ldr	r3, [r3, #0]
 8000b88:	2b00      	cmp	r3, #0
 8000b8a:	d102      	bne.n	8000b92 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8000b8c:	2301      	movs	r3, #1
 8000b8e:	f001 b83a 	b.w	8001c06 <HAL_RCC_OscConfig+0x109a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000b92:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8000b96:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8000b9a:	681b      	ldr	r3, [r3, #0]
 8000b9c:	681b      	ldr	r3, [r3, #0]
 8000b9e:	f003 0301 	and.w	r3, r3, #1
 8000ba2:	2b00      	cmp	r3, #0
 8000ba4:	f000 816f 	beq.w	8000e86 <HAL_RCC_OscConfig+0x31a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000ba8:	4bb5      	ldr	r3, [pc, #724]	; (8000e80 <HAL_RCC_OscConfig+0x314>)
 8000baa:	685b      	ldr	r3, [r3, #4]
 8000bac:	f003 030c 	and.w	r3, r3, #12
 8000bb0:	2b04      	cmp	r3, #4
 8000bb2:	d00c      	beq.n	8000bce <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000bb4:	4bb2      	ldr	r3, [pc, #712]	; (8000e80 <HAL_RCC_OscConfig+0x314>)
 8000bb6:	685b      	ldr	r3, [r3, #4]
 8000bb8:	f003 030c 	and.w	r3, r3, #12
 8000bbc:	2b08      	cmp	r3, #8
 8000bbe:	d15c      	bne.n	8000c7a <HAL_RCC_OscConfig+0x10e>
 8000bc0:	4baf      	ldr	r3, [pc, #700]	; (8000e80 <HAL_RCC_OscConfig+0x314>)
 8000bc2:	685b      	ldr	r3, [r3, #4]
 8000bc4:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8000bc8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000bcc:	d155      	bne.n	8000c7a <HAL_RCC_OscConfig+0x10e>
 8000bce:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000bd2:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000bd6:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8000bda:	fa93 f3a3 	rbit	r3, r3
 8000bde:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000be2:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000be6:	fab3 f383 	clz	r3, r3
 8000bea:	b2db      	uxtb	r3, r3
 8000bec:	095b      	lsrs	r3, r3, #5
 8000bee:	b2db      	uxtb	r3, r3
 8000bf0:	f043 0301 	orr.w	r3, r3, #1
 8000bf4:	b2db      	uxtb	r3, r3
 8000bf6:	2b01      	cmp	r3, #1
 8000bf8:	d102      	bne.n	8000c00 <HAL_RCC_OscConfig+0x94>
 8000bfa:	4ba1      	ldr	r3, [pc, #644]	; (8000e80 <HAL_RCC_OscConfig+0x314>)
 8000bfc:	681b      	ldr	r3, [r3, #0]
 8000bfe:	e015      	b.n	8000c2c <HAL_RCC_OscConfig+0xc0>
 8000c00:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000c04:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000c08:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 8000c0c:	fa93 f3a3 	rbit	r3, r3
 8000c10:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 8000c14:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000c18:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8000c1c:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 8000c20:	fa93 f3a3 	rbit	r3, r3
 8000c24:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8000c28:	4b95      	ldr	r3, [pc, #596]	; (8000e80 <HAL_RCC_OscConfig+0x314>)
 8000c2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c2c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000c30:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 8000c34:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 8000c38:	fa92 f2a2 	rbit	r2, r2
 8000c3c:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
  return result;
 8000c40:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8000c44:	fab2 f282 	clz	r2, r2
 8000c48:	b2d2      	uxtb	r2, r2
 8000c4a:	f042 0220 	orr.w	r2, r2, #32
 8000c4e:	b2d2      	uxtb	r2, r2
 8000c50:	f002 021f 	and.w	r2, r2, #31
 8000c54:	2101      	movs	r1, #1
 8000c56:	fa01 f202 	lsl.w	r2, r1, r2
 8000c5a:	4013      	ands	r3, r2
 8000c5c:	2b00      	cmp	r3, #0
 8000c5e:	f000 8111 	beq.w	8000e84 <HAL_RCC_OscConfig+0x318>
 8000c62:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8000c66:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8000c6a:	681b      	ldr	r3, [r3, #0]
 8000c6c:	685b      	ldr	r3, [r3, #4]
 8000c6e:	2b00      	cmp	r3, #0
 8000c70:	f040 8108 	bne.w	8000e84 <HAL_RCC_OscConfig+0x318>
      {
        return HAL_ERROR;
 8000c74:	2301      	movs	r3, #1
 8000c76:	f000 bfc6 	b.w	8001c06 <HAL_RCC_OscConfig+0x109a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000c7a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8000c7e:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8000c82:	681b      	ldr	r3, [r3, #0]
 8000c84:	685b      	ldr	r3, [r3, #4]
 8000c86:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000c8a:	d106      	bne.n	8000c9a <HAL_RCC_OscConfig+0x12e>
 8000c8c:	4b7c      	ldr	r3, [pc, #496]	; (8000e80 <HAL_RCC_OscConfig+0x314>)
 8000c8e:	681b      	ldr	r3, [r3, #0]
 8000c90:	4a7b      	ldr	r2, [pc, #492]	; (8000e80 <HAL_RCC_OscConfig+0x314>)
 8000c92:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000c96:	6013      	str	r3, [r2, #0]
 8000c98:	e036      	b.n	8000d08 <HAL_RCC_OscConfig+0x19c>
 8000c9a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8000c9e:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8000ca2:	681b      	ldr	r3, [r3, #0]
 8000ca4:	685b      	ldr	r3, [r3, #4]
 8000ca6:	2b00      	cmp	r3, #0
 8000ca8:	d10c      	bne.n	8000cc4 <HAL_RCC_OscConfig+0x158>
 8000caa:	4b75      	ldr	r3, [pc, #468]	; (8000e80 <HAL_RCC_OscConfig+0x314>)
 8000cac:	681b      	ldr	r3, [r3, #0]
 8000cae:	4a74      	ldr	r2, [pc, #464]	; (8000e80 <HAL_RCC_OscConfig+0x314>)
 8000cb0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000cb4:	6013      	str	r3, [r2, #0]
 8000cb6:	4b72      	ldr	r3, [pc, #456]	; (8000e80 <HAL_RCC_OscConfig+0x314>)
 8000cb8:	681b      	ldr	r3, [r3, #0]
 8000cba:	4a71      	ldr	r2, [pc, #452]	; (8000e80 <HAL_RCC_OscConfig+0x314>)
 8000cbc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000cc0:	6013      	str	r3, [r2, #0]
 8000cc2:	e021      	b.n	8000d08 <HAL_RCC_OscConfig+0x19c>
 8000cc4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8000cc8:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8000ccc:	681b      	ldr	r3, [r3, #0]
 8000cce:	685b      	ldr	r3, [r3, #4]
 8000cd0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000cd4:	d10c      	bne.n	8000cf0 <HAL_RCC_OscConfig+0x184>
 8000cd6:	4b6a      	ldr	r3, [pc, #424]	; (8000e80 <HAL_RCC_OscConfig+0x314>)
 8000cd8:	681b      	ldr	r3, [r3, #0]
 8000cda:	4a69      	ldr	r2, [pc, #420]	; (8000e80 <HAL_RCC_OscConfig+0x314>)
 8000cdc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000ce0:	6013      	str	r3, [r2, #0]
 8000ce2:	4b67      	ldr	r3, [pc, #412]	; (8000e80 <HAL_RCC_OscConfig+0x314>)
 8000ce4:	681b      	ldr	r3, [r3, #0]
 8000ce6:	4a66      	ldr	r2, [pc, #408]	; (8000e80 <HAL_RCC_OscConfig+0x314>)
 8000ce8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000cec:	6013      	str	r3, [r2, #0]
 8000cee:	e00b      	b.n	8000d08 <HAL_RCC_OscConfig+0x19c>
 8000cf0:	4b63      	ldr	r3, [pc, #396]	; (8000e80 <HAL_RCC_OscConfig+0x314>)
 8000cf2:	681b      	ldr	r3, [r3, #0]
 8000cf4:	4a62      	ldr	r2, [pc, #392]	; (8000e80 <HAL_RCC_OscConfig+0x314>)
 8000cf6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000cfa:	6013      	str	r3, [r2, #0]
 8000cfc:	4b60      	ldr	r3, [pc, #384]	; (8000e80 <HAL_RCC_OscConfig+0x314>)
 8000cfe:	681b      	ldr	r3, [r3, #0]
 8000d00:	4a5f      	ldr	r2, [pc, #380]	; (8000e80 <HAL_RCC_OscConfig+0x314>)
 8000d02:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000d06:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000d08:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8000d0c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8000d10:	681b      	ldr	r3, [r3, #0]
 8000d12:	685b      	ldr	r3, [r3, #4]
 8000d14:	2b00      	cmp	r3, #0
 8000d16:	d059      	beq.n	8000dcc <HAL_RCC_OscConfig+0x260>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000d18:	f7ff fe3a 	bl	8000990 <HAL_GetTick>
 8000d1c:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000d20:	e00a      	b.n	8000d38 <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000d22:	f7ff fe35 	bl	8000990 <HAL_GetTick>
 8000d26:	4602      	mov	r2, r0
 8000d28:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8000d2c:	1ad3      	subs	r3, r2, r3
 8000d2e:	2b64      	cmp	r3, #100	; 0x64
 8000d30:	d902      	bls.n	8000d38 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8000d32:	2303      	movs	r3, #3
 8000d34:	f000 bf67 	b.w	8001c06 <HAL_RCC_OscConfig+0x109a>
 8000d38:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000d3c:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000d40:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 8000d44:	fa93 f3a3 	rbit	r3, r3
 8000d48:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
  return result;
 8000d4c:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000d50:	fab3 f383 	clz	r3, r3
 8000d54:	b2db      	uxtb	r3, r3
 8000d56:	095b      	lsrs	r3, r3, #5
 8000d58:	b2db      	uxtb	r3, r3
 8000d5a:	f043 0301 	orr.w	r3, r3, #1
 8000d5e:	b2db      	uxtb	r3, r3
 8000d60:	2b01      	cmp	r3, #1
 8000d62:	d102      	bne.n	8000d6a <HAL_RCC_OscConfig+0x1fe>
 8000d64:	4b46      	ldr	r3, [pc, #280]	; (8000e80 <HAL_RCC_OscConfig+0x314>)
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	e015      	b.n	8000d96 <HAL_RCC_OscConfig+0x22a>
 8000d6a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000d6e:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000d72:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 8000d76:	fa93 f3a3 	rbit	r3, r3
 8000d7a:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 8000d7e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000d82:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8000d86:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 8000d8a:	fa93 f3a3 	rbit	r3, r3
 8000d8e:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8000d92:	4b3b      	ldr	r3, [pc, #236]	; (8000e80 <HAL_RCC_OscConfig+0x314>)
 8000d94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d96:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000d9a:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
 8000d9e:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 8000da2:	fa92 f2a2 	rbit	r2, r2
 8000da6:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
  return result;
 8000daa:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8000dae:	fab2 f282 	clz	r2, r2
 8000db2:	b2d2      	uxtb	r2, r2
 8000db4:	f042 0220 	orr.w	r2, r2, #32
 8000db8:	b2d2      	uxtb	r2, r2
 8000dba:	f002 021f 	and.w	r2, r2, #31
 8000dbe:	2101      	movs	r1, #1
 8000dc0:	fa01 f202 	lsl.w	r2, r1, r2
 8000dc4:	4013      	ands	r3, r2
 8000dc6:	2b00      	cmp	r3, #0
 8000dc8:	d0ab      	beq.n	8000d22 <HAL_RCC_OscConfig+0x1b6>
 8000dca:	e05c      	b.n	8000e86 <HAL_RCC_OscConfig+0x31a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000dcc:	f7ff fde0 	bl	8000990 <HAL_GetTick>
 8000dd0:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000dd4:	e00a      	b.n	8000dec <HAL_RCC_OscConfig+0x280>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000dd6:	f7ff fddb 	bl	8000990 <HAL_GetTick>
 8000dda:	4602      	mov	r2, r0
 8000ddc:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8000de0:	1ad3      	subs	r3, r2, r3
 8000de2:	2b64      	cmp	r3, #100	; 0x64
 8000de4:	d902      	bls.n	8000dec <HAL_RCC_OscConfig+0x280>
          {
            return HAL_TIMEOUT;
 8000de6:	2303      	movs	r3, #3
 8000de8:	f000 bf0d 	b.w	8001c06 <HAL_RCC_OscConfig+0x109a>
 8000dec:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000df0:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000df4:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 8000df8:	fa93 f3a3 	rbit	r3, r3
 8000dfc:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
  return result;
 8000e00:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000e04:	fab3 f383 	clz	r3, r3
 8000e08:	b2db      	uxtb	r3, r3
 8000e0a:	095b      	lsrs	r3, r3, #5
 8000e0c:	b2db      	uxtb	r3, r3
 8000e0e:	f043 0301 	orr.w	r3, r3, #1
 8000e12:	b2db      	uxtb	r3, r3
 8000e14:	2b01      	cmp	r3, #1
 8000e16:	d102      	bne.n	8000e1e <HAL_RCC_OscConfig+0x2b2>
 8000e18:	4b19      	ldr	r3, [pc, #100]	; (8000e80 <HAL_RCC_OscConfig+0x314>)
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	e015      	b.n	8000e4a <HAL_RCC_OscConfig+0x2de>
 8000e1e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000e22:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000e26:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8000e2a:	fa93 f3a3 	rbit	r3, r3
 8000e2e:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 8000e32:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000e36:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8000e3a:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8000e3e:	fa93 f3a3 	rbit	r3, r3
 8000e42:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8000e46:	4b0e      	ldr	r3, [pc, #56]	; (8000e80 <HAL_RCC_OscConfig+0x314>)
 8000e48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e4a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000e4e:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 8000e52:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 8000e56:	fa92 f2a2 	rbit	r2, r2
 8000e5a:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
  return result;
 8000e5e:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8000e62:	fab2 f282 	clz	r2, r2
 8000e66:	b2d2      	uxtb	r2, r2
 8000e68:	f042 0220 	orr.w	r2, r2, #32
 8000e6c:	b2d2      	uxtb	r2, r2
 8000e6e:	f002 021f 	and.w	r2, r2, #31
 8000e72:	2101      	movs	r1, #1
 8000e74:	fa01 f202 	lsl.w	r2, r1, r2
 8000e78:	4013      	ands	r3, r2
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	d1ab      	bne.n	8000dd6 <HAL_RCC_OscConfig+0x26a>
 8000e7e:	e002      	b.n	8000e86 <HAL_RCC_OscConfig+0x31a>
 8000e80:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000e84:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000e86:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8000e8a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	681b      	ldr	r3, [r3, #0]
 8000e92:	f003 0302 	and.w	r3, r3, #2
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	f000 817f 	beq.w	800119a <HAL_RCC_OscConfig+0x62e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8000e9c:	4ba7      	ldr	r3, [pc, #668]	; (800113c <HAL_RCC_OscConfig+0x5d0>)
 8000e9e:	685b      	ldr	r3, [r3, #4]
 8000ea0:	f003 030c 	and.w	r3, r3, #12
 8000ea4:	2b00      	cmp	r3, #0
 8000ea6:	d00c      	beq.n	8000ec2 <HAL_RCC_OscConfig+0x356>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8000ea8:	4ba4      	ldr	r3, [pc, #656]	; (800113c <HAL_RCC_OscConfig+0x5d0>)
 8000eaa:	685b      	ldr	r3, [r3, #4]
 8000eac:	f003 030c 	and.w	r3, r3, #12
 8000eb0:	2b08      	cmp	r3, #8
 8000eb2:	d173      	bne.n	8000f9c <HAL_RCC_OscConfig+0x430>
 8000eb4:	4ba1      	ldr	r3, [pc, #644]	; (800113c <HAL_RCC_OscConfig+0x5d0>)
 8000eb6:	685b      	ldr	r3, [r3, #4]
 8000eb8:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8000ebc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000ec0:	d16c      	bne.n	8000f9c <HAL_RCC_OscConfig+0x430>
 8000ec2:	2302      	movs	r3, #2
 8000ec4:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000ec8:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8000ecc:	fa93 f3a3 	rbit	r3, r3
 8000ed0:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
  return result;
 8000ed4:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000ed8:	fab3 f383 	clz	r3, r3
 8000edc:	b2db      	uxtb	r3, r3
 8000ede:	095b      	lsrs	r3, r3, #5
 8000ee0:	b2db      	uxtb	r3, r3
 8000ee2:	f043 0301 	orr.w	r3, r3, #1
 8000ee6:	b2db      	uxtb	r3, r3
 8000ee8:	2b01      	cmp	r3, #1
 8000eea:	d102      	bne.n	8000ef2 <HAL_RCC_OscConfig+0x386>
 8000eec:	4b93      	ldr	r3, [pc, #588]	; (800113c <HAL_RCC_OscConfig+0x5d0>)
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	e013      	b.n	8000f1a <HAL_RCC_OscConfig+0x3ae>
 8000ef2:	2302      	movs	r3, #2
 8000ef4:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000ef8:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8000efc:	fa93 f3a3 	rbit	r3, r3
 8000f00:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 8000f04:	2302      	movs	r3, #2
 8000f06:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8000f0a:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8000f0e:	fa93 f3a3 	rbit	r3, r3
 8000f12:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8000f16:	4b89      	ldr	r3, [pc, #548]	; (800113c <HAL_RCC_OscConfig+0x5d0>)
 8000f18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f1a:	2202      	movs	r2, #2
 8000f1c:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 8000f20:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 8000f24:	fa92 f2a2 	rbit	r2, r2
 8000f28:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
  return result;
 8000f2c:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8000f30:	fab2 f282 	clz	r2, r2
 8000f34:	b2d2      	uxtb	r2, r2
 8000f36:	f042 0220 	orr.w	r2, r2, #32
 8000f3a:	b2d2      	uxtb	r2, r2
 8000f3c:	f002 021f 	and.w	r2, r2, #31
 8000f40:	2101      	movs	r1, #1
 8000f42:	fa01 f202 	lsl.w	r2, r1, r2
 8000f46:	4013      	ands	r3, r2
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	d00a      	beq.n	8000f62 <HAL_RCC_OscConfig+0x3f6>
 8000f4c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8000f50:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	68db      	ldr	r3, [r3, #12]
 8000f58:	2b01      	cmp	r3, #1
 8000f5a:	d002      	beq.n	8000f62 <HAL_RCC_OscConfig+0x3f6>
      {
        return HAL_ERROR;
 8000f5c:	2301      	movs	r3, #1
 8000f5e:	f000 be52 	b.w	8001c06 <HAL_RCC_OscConfig+0x109a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000f62:	4b76      	ldr	r3, [pc, #472]	; (800113c <HAL_RCC_OscConfig+0x5d0>)
 8000f64:	681b      	ldr	r3, [r3, #0]
 8000f66:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000f6a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8000f6e:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	691b      	ldr	r3, [r3, #16]
 8000f76:	21f8      	movs	r1, #248	; 0xf8
 8000f78:	f8c7 1174 	str.w	r1, [r7, #372]	; 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f7c:	f8d7 1174 	ldr.w	r1, [r7, #372]	; 0x174
 8000f80:	fa91 f1a1 	rbit	r1, r1
 8000f84:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
  return result;
 8000f88:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8000f8c:	fab1 f181 	clz	r1, r1
 8000f90:	b2c9      	uxtb	r1, r1
 8000f92:	408b      	lsls	r3, r1
 8000f94:	4969      	ldr	r1, [pc, #420]	; (800113c <HAL_RCC_OscConfig+0x5d0>)
 8000f96:	4313      	orrs	r3, r2
 8000f98:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000f9a:	e0fe      	b.n	800119a <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000f9c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8000fa0:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	68db      	ldr	r3, [r3, #12]
 8000fa8:	2b00      	cmp	r3, #0
 8000faa:	f000 8088 	beq.w	80010be <HAL_RCC_OscConfig+0x552>
 8000fae:	2301      	movs	r3, #1
 8000fb0:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000fb4:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8000fb8:	fa93 f3a3 	rbit	r3, r3
 8000fbc:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  return result;
 8000fc0:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000fc4:	fab3 f383 	clz	r3, r3
 8000fc8:	b2db      	uxtb	r3, r3
 8000fca:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8000fce:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8000fd2:	009b      	lsls	r3, r3, #2
 8000fd4:	461a      	mov	r2, r3
 8000fd6:	2301      	movs	r3, #1
 8000fd8:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000fda:	f7ff fcd9 	bl	8000990 <HAL_GetTick>
 8000fde:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000fe2:	e00a      	b.n	8000ffa <HAL_RCC_OscConfig+0x48e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000fe4:	f7ff fcd4 	bl	8000990 <HAL_GetTick>
 8000fe8:	4602      	mov	r2, r0
 8000fea:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8000fee:	1ad3      	subs	r3, r2, r3
 8000ff0:	2b02      	cmp	r3, #2
 8000ff2:	d902      	bls.n	8000ffa <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8000ff4:	2303      	movs	r3, #3
 8000ff6:	f000 be06 	b.w	8001c06 <HAL_RCC_OscConfig+0x109a>
 8000ffa:	2302      	movs	r3, #2
 8000ffc:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001000:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8001004:	fa93 f3a3 	rbit	r3, r3
 8001008:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
  return result;
 800100c:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001010:	fab3 f383 	clz	r3, r3
 8001014:	b2db      	uxtb	r3, r3
 8001016:	095b      	lsrs	r3, r3, #5
 8001018:	b2db      	uxtb	r3, r3
 800101a:	f043 0301 	orr.w	r3, r3, #1
 800101e:	b2db      	uxtb	r3, r3
 8001020:	2b01      	cmp	r3, #1
 8001022:	d102      	bne.n	800102a <HAL_RCC_OscConfig+0x4be>
 8001024:	4b45      	ldr	r3, [pc, #276]	; (800113c <HAL_RCC_OscConfig+0x5d0>)
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	e013      	b.n	8001052 <HAL_RCC_OscConfig+0x4e6>
 800102a:	2302      	movs	r3, #2
 800102c:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001030:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8001034:	fa93 f3a3 	rbit	r3, r3
 8001038:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 800103c:	2302      	movs	r3, #2
 800103e:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8001042:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8001046:	fa93 f3a3 	rbit	r3, r3
 800104a:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 800104e:	4b3b      	ldr	r3, [pc, #236]	; (800113c <HAL_RCC_OscConfig+0x5d0>)
 8001050:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001052:	2202      	movs	r2, #2
 8001054:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 8001058:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 800105c:	fa92 f2a2 	rbit	r2, r2
 8001060:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
  return result;
 8001064:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8001068:	fab2 f282 	clz	r2, r2
 800106c:	b2d2      	uxtb	r2, r2
 800106e:	f042 0220 	orr.w	r2, r2, #32
 8001072:	b2d2      	uxtb	r2, r2
 8001074:	f002 021f 	and.w	r2, r2, #31
 8001078:	2101      	movs	r1, #1
 800107a:	fa01 f202 	lsl.w	r2, r1, r2
 800107e:	4013      	ands	r3, r2
 8001080:	2b00      	cmp	r3, #0
 8001082:	d0af      	beq.n	8000fe4 <HAL_RCC_OscConfig+0x478>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001084:	4b2d      	ldr	r3, [pc, #180]	; (800113c <HAL_RCC_OscConfig+0x5d0>)
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800108c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001090:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	691b      	ldr	r3, [r3, #16]
 8001098:	21f8      	movs	r1, #248	; 0xf8
 800109a:	f8c7 1144 	str.w	r1, [r7, #324]	; 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800109e:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 80010a2:	fa91 f1a1 	rbit	r1, r1
 80010a6:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
  return result;
 80010aa:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 80010ae:	fab1 f181 	clz	r1, r1
 80010b2:	b2c9      	uxtb	r1, r1
 80010b4:	408b      	lsls	r3, r1
 80010b6:	4921      	ldr	r1, [pc, #132]	; (800113c <HAL_RCC_OscConfig+0x5d0>)
 80010b8:	4313      	orrs	r3, r2
 80010ba:	600b      	str	r3, [r1, #0]
 80010bc:	e06d      	b.n	800119a <HAL_RCC_OscConfig+0x62e>
 80010be:	2301      	movs	r3, #1
 80010c0:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80010c4:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 80010c8:	fa93 f3a3 	rbit	r3, r3
 80010cc:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  return result;
 80010d0:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80010d4:	fab3 f383 	clz	r3, r3
 80010d8:	b2db      	uxtb	r3, r3
 80010da:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80010de:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80010e2:	009b      	lsls	r3, r3, #2
 80010e4:	461a      	mov	r2, r3
 80010e6:	2300      	movs	r3, #0
 80010e8:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010ea:	f7ff fc51 	bl	8000990 <HAL_GetTick>
 80010ee:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80010f2:	e00a      	b.n	800110a <HAL_RCC_OscConfig+0x59e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80010f4:	f7ff fc4c 	bl	8000990 <HAL_GetTick>
 80010f8:	4602      	mov	r2, r0
 80010fa:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80010fe:	1ad3      	subs	r3, r2, r3
 8001100:	2b02      	cmp	r3, #2
 8001102:	d902      	bls.n	800110a <HAL_RCC_OscConfig+0x59e>
          {
            return HAL_TIMEOUT;
 8001104:	2303      	movs	r3, #3
 8001106:	f000 bd7e 	b.w	8001c06 <HAL_RCC_OscConfig+0x109a>
 800110a:	2302      	movs	r3, #2
 800110c:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001110:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8001114:	fa93 f3a3 	rbit	r3, r3
 8001118:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  return result;
 800111c:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001120:	fab3 f383 	clz	r3, r3
 8001124:	b2db      	uxtb	r3, r3
 8001126:	095b      	lsrs	r3, r3, #5
 8001128:	b2db      	uxtb	r3, r3
 800112a:	f043 0301 	orr.w	r3, r3, #1
 800112e:	b2db      	uxtb	r3, r3
 8001130:	2b01      	cmp	r3, #1
 8001132:	d105      	bne.n	8001140 <HAL_RCC_OscConfig+0x5d4>
 8001134:	4b01      	ldr	r3, [pc, #4]	; (800113c <HAL_RCC_OscConfig+0x5d0>)
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	e016      	b.n	8001168 <HAL_RCC_OscConfig+0x5fc>
 800113a:	bf00      	nop
 800113c:	40021000 	.word	0x40021000
 8001140:	2302      	movs	r3, #2
 8001142:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001146:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800114a:	fa93 f3a3 	rbit	r3, r3
 800114e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8001152:	2302      	movs	r3, #2
 8001154:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8001158:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800115c:	fa93 f3a3 	rbit	r3, r3
 8001160:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8001164:	4bbf      	ldr	r3, [pc, #764]	; (8001464 <HAL_RCC_OscConfig+0x8f8>)
 8001166:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001168:	2202      	movs	r2, #2
 800116a:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 800116e:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 8001172:	fa92 f2a2 	rbit	r2, r2
 8001176:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
  return result;
 800117a:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 800117e:	fab2 f282 	clz	r2, r2
 8001182:	b2d2      	uxtb	r2, r2
 8001184:	f042 0220 	orr.w	r2, r2, #32
 8001188:	b2d2      	uxtb	r2, r2
 800118a:	f002 021f 	and.w	r2, r2, #31
 800118e:	2101      	movs	r1, #1
 8001190:	fa01 f202 	lsl.w	r2, r1, r2
 8001194:	4013      	ands	r3, r2
 8001196:	2b00      	cmp	r3, #0
 8001198:	d1ac      	bne.n	80010f4 <HAL_RCC_OscConfig+0x588>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800119a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800119e:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	f003 0308 	and.w	r3, r3, #8
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	f000 8113 	beq.w	80013d6 <HAL_RCC_OscConfig+0x86a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80011b0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80011b4:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	695b      	ldr	r3, [r3, #20]
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d07c      	beq.n	80012ba <HAL_RCC_OscConfig+0x74e>
 80011c0:	2301      	movs	r3, #1
 80011c2:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80011c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80011ca:	fa93 f3a3 	rbit	r3, r3
 80011ce:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  return result;
 80011d2:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80011d6:	fab3 f383 	clz	r3, r3
 80011da:	b2db      	uxtb	r3, r3
 80011dc:	461a      	mov	r2, r3
 80011de:	4ba2      	ldr	r3, [pc, #648]	; (8001468 <HAL_RCC_OscConfig+0x8fc>)
 80011e0:	4413      	add	r3, r2
 80011e2:	009b      	lsls	r3, r3, #2
 80011e4:	461a      	mov	r2, r3
 80011e6:	2301      	movs	r3, #1
 80011e8:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80011ea:	f7ff fbd1 	bl	8000990 <HAL_GetTick>
 80011ee:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80011f2:	e00a      	b.n	800120a <HAL_RCC_OscConfig+0x69e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80011f4:	f7ff fbcc 	bl	8000990 <HAL_GetTick>
 80011f8:	4602      	mov	r2, r0
 80011fa:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80011fe:	1ad3      	subs	r3, r2, r3
 8001200:	2b02      	cmp	r3, #2
 8001202:	d902      	bls.n	800120a <HAL_RCC_OscConfig+0x69e>
        {
          return HAL_TIMEOUT;
 8001204:	2303      	movs	r3, #3
 8001206:	f000 bcfe 	b.w	8001c06 <HAL_RCC_OscConfig+0x109a>
 800120a:	2302      	movs	r3, #2
 800120c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001210:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8001214:	fa93 f2a3 	rbit	r2, r3
 8001218:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800121c:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8001220:	601a      	str	r2, [r3, #0]
 8001222:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001226:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800122a:	2202      	movs	r2, #2
 800122c:	601a      	str	r2, [r3, #0]
 800122e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001232:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	fa93 f2a3 	rbit	r2, r3
 800123c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001240:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8001244:	601a      	str	r2, [r3, #0]
 8001246:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800124a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800124e:	2202      	movs	r2, #2
 8001250:	601a      	str	r2, [r3, #0]
 8001252:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001256:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	fa93 f2a3 	rbit	r2, r3
 8001260:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001264:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001268:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800126a:	4b7e      	ldr	r3, [pc, #504]	; (8001464 <HAL_RCC_OscConfig+0x8f8>)
 800126c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800126e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001272:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8001276:	2102      	movs	r1, #2
 8001278:	6019      	str	r1, [r3, #0]
 800127a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800127e:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	fa93 f1a3 	rbit	r1, r3
 8001288:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800128c:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8001290:	6019      	str	r1, [r3, #0]
  return result;
 8001292:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001296:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	fab3 f383 	clz	r3, r3
 80012a0:	b2db      	uxtb	r3, r3
 80012a2:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80012a6:	b2db      	uxtb	r3, r3
 80012a8:	f003 031f 	and.w	r3, r3, #31
 80012ac:	2101      	movs	r1, #1
 80012ae:	fa01 f303 	lsl.w	r3, r1, r3
 80012b2:	4013      	ands	r3, r2
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d09d      	beq.n	80011f4 <HAL_RCC_OscConfig+0x688>
 80012b8:	e08d      	b.n	80013d6 <HAL_RCC_OscConfig+0x86a>
 80012ba:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80012be:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80012c2:	2201      	movs	r2, #1
 80012c4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012c6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80012ca:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	fa93 f2a3 	rbit	r2, r3
 80012d4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80012d8:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80012dc:	601a      	str	r2, [r3, #0]
  return result;
 80012de:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80012e2:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80012e6:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80012e8:	fab3 f383 	clz	r3, r3
 80012ec:	b2db      	uxtb	r3, r3
 80012ee:	461a      	mov	r2, r3
 80012f0:	4b5d      	ldr	r3, [pc, #372]	; (8001468 <HAL_RCC_OscConfig+0x8fc>)
 80012f2:	4413      	add	r3, r2
 80012f4:	009b      	lsls	r3, r3, #2
 80012f6:	461a      	mov	r2, r3
 80012f8:	2300      	movs	r3, #0
 80012fa:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80012fc:	f7ff fb48 	bl	8000990 <HAL_GetTick>
 8001300:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001304:	e00a      	b.n	800131c <HAL_RCC_OscConfig+0x7b0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001306:	f7ff fb43 	bl	8000990 <HAL_GetTick>
 800130a:	4602      	mov	r2, r0
 800130c:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001310:	1ad3      	subs	r3, r2, r3
 8001312:	2b02      	cmp	r3, #2
 8001314:	d902      	bls.n	800131c <HAL_RCC_OscConfig+0x7b0>
        {
          return HAL_TIMEOUT;
 8001316:	2303      	movs	r3, #3
 8001318:	f000 bc75 	b.w	8001c06 <HAL_RCC_OscConfig+0x109a>
 800131c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001320:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8001324:	2202      	movs	r2, #2
 8001326:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001328:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800132c:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	fa93 f2a3 	rbit	r2, r3
 8001336:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800133a:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800133e:	601a      	str	r2, [r3, #0]
 8001340:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001344:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8001348:	2202      	movs	r2, #2
 800134a:	601a      	str	r2, [r3, #0]
 800134c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001350:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	fa93 f2a3 	rbit	r2, r3
 800135a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800135e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8001362:	601a      	str	r2, [r3, #0]
 8001364:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001368:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 800136c:	2202      	movs	r2, #2
 800136e:	601a      	str	r2, [r3, #0]
 8001370:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001374:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	fa93 f2a3 	rbit	r2, r3
 800137e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001382:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8001386:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001388:	4b36      	ldr	r3, [pc, #216]	; (8001464 <HAL_RCC_OscConfig+0x8f8>)
 800138a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800138c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001390:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8001394:	2102      	movs	r1, #2
 8001396:	6019      	str	r1, [r3, #0]
 8001398:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800139c:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	fa93 f1a3 	rbit	r1, r3
 80013a6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80013aa:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80013ae:	6019      	str	r1, [r3, #0]
  return result;
 80013b0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80013b4:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	fab3 f383 	clz	r3, r3
 80013be:	b2db      	uxtb	r3, r3
 80013c0:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80013c4:	b2db      	uxtb	r3, r3
 80013c6:	f003 031f 	and.w	r3, r3, #31
 80013ca:	2101      	movs	r1, #1
 80013cc:	fa01 f303 	lsl.w	r3, r1, r3
 80013d0:	4013      	ands	r3, r2
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d197      	bne.n	8001306 <HAL_RCC_OscConfig+0x79a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80013d6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80013da:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	f003 0304 	and.w	r3, r3, #4
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	f000 81a5 	beq.w	8001736 <HAL_RCC_OscConfig+0xbca>
  {
    FlagStatus       pwrclkchanged = RESET;
 80013ec:	2300      	movs	r3, #0
 80013ee:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80013f2:	4b1c      	ldr	r3, [pc, #112]	; (8001464 <HAL_RCC_OscConfig+0x8f8>)
 80013f4:	69db      	ldr	r3, [r3, #28]
 80013f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d116      	bne.n	800142c <HAL_RCC_OscConfig+0x8c0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80013fe:	4b19      	ldr	r3, [pc, #100]	; (8001464 <HAL_RCC_OscConfig+0x8f8>)
 8001400:	69db      	ldr	r3, [r3, #28]
 8001402:	4a18      	ldr	r2, [pc, #96]	; (8001464 <HAL_RCC_OscConfig+0x8f8>)
 8001404:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001408:	61d3      	str	r3, [r2, #28]
 800140a:	4b16      	ldr	r3, [pc, #88]	; (8001464 <HAL_RCC_OscConfig+0x8f8>)
 800140c:	69db      	ldr	r3, [r3, #28]
 800140e:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8001412:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001416:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800141a:	601a      	str	r2, [r3, #0]
 800141c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001420:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001424:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8001426:	2301      	movs	r3, #1
 8001428:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800142c:	4b0f      	ldr	r3, [pc, #60]	; (800146c <HAL_RCC_OscConfig+0x900>)
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001434:	2b00      	cmp	r3, #0
 8001436:	d121      	bne.n	800147c <HAL_RCC_OscConfig+0x910>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001438:	4b0c      	ldr	r3, [pc, #48]	; (800146c <HAL_RCC_OscConfig+0x900>)
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	4a0b      	ldr	r2, [pc, #44]	; (800146c <HAL_RCC_OscConfig+0x900>)
 800143e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001442:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001444:	f7ff faa4 	bl	8000990 <HAL_GetTick>
 8001448:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800144c:	e010      	b.n	8001470 <HAL_RCC_OscConfig+0x904>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800144e:	f7ff fa9f 	bl	8000990 <HAL_GetTick>
 8001452:	4602      	mov	r2, r0
 8001454:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001458:	1ad3      	subs	r3, r2, r3
 800145a:	2b64      	cmp	r3, #100	; 0x64
 800145c:	d908      	bls.n	8001470 <HAL_RCC_OscConfig+0x904>
        {
          return HAL_TIMEOUT;
 800145e:	2303      	movs	r3, #3
 8001460:	e3d1      	b.n	8001c06 <HAL_RCC_OscConfig+0x109a>
 8001462:	bf00      	nop
 8001464:	40021000 	.word	0x40021000
 8001468:	10908120 	.word	0x10908120
 800146c:	40007000 	.word	0x40007000
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001470:	4b8d      	ldr	r3, [pc, #564]	; (80016a8 <HAL_RCC_OscConfig+0xb3c>)
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001478:	2b00      	cmp	r3, #0
 800147a:	d0e8      	beq.n	800144e <HAL_RCC_OscConfig+0x8e2>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800147c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001480:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	689b      	ldr	r3, [r3, #8]
 8001488:	2b01      	cmp	r3, #1
 800148a:	d106      	bne.n	800149a <HAL_RCC_OscConfig+0x92e>
 800148c:	4b87      	ldr	r3, [pc, #540]	; (80016ac <HAL_RCC_OscConfig+0xb40>)
 800148e:	6a1b      	ldr	r3, [r3, #32]
 8001490:	4a86      	ldr	r2, [pc, #536]	; (80016ac <HAL_RCC_OscConfig+0xb40>)
 8001492:	f043 0301 	orr.w	r3, r3, #1
 8001496:	6213      	str	r3, [r2, #32]
 8001498:	e035      	b.n	8001506 <HAL_RCC_OscConfig+0x99a>
 800149a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800149e:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	689b      	ldr	r3, [r3, #8]
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d10c      	bne.n	80014c4 <HAL_RCC_OscConfig+0x958>
 80014aa:	4b80      	ldr	r3, [pc, #512]	; (80016ac <HAL_RCC_OscConfig+0xb40>)
 80014ac:	6a1b      	ldr	r3, [r3, #32]
 80014ae:	4a7f      	ldr	r2, [pc, #508]	; (80016ac <HAL_RCC_OscConfig+0xb40>)
 80014b0:	f023 0301 	bic.w	r3, r3, #1
 80014b4:	6213      	str	r3, [r2, #32]
 80014b6:	4b7d      	ldr	r3, [pc, #500]	; (80016ac <HAL_RCC_OscConfig+0xb40>)
 80014b8:	6a1b      	ldr	r3, [r3, #32]
 80014ba:	4a7c      	ldr	r2, [pc, #496]	; (80016ac <HAL_RCC_OscConfig+0xb40>)
 80014bc:	f023 0304 	bic.w	r3, r3, #4
 80014c0:	6213      	str	r3, [r2, #32]
 80014c2:	e020      	b.n	8001506 <HAL_RCC_OscConfig+0x99a>
 80014c4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80014c8:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	689b      	ldr	r3, [r3, #8]
 80014d0:	2b05      	cmp	r3, #5
 80014d2:	d10c      	bne.n	80014ee <HAL_RCC_OscConfig+0x982>
 80014d4:	4b75      	ldr	r3, [pc, #468]	; (80016ac <HAL_RCC_OscConfig+0xb40>)
 80014d6:	6a1b      	ldr	r3, [r3, #32]
 80014d8:	4a74      	ldr	r2, [pc, #464]	; (80016ac <HAL_RCC_OscConfig+0xb40>)
 80014da:	f043 0304 	orr.w	r3, r3, #4
 80014de:	6213      	str	r3, [r2, #32]
 80014e0:	4b72      	ldr	r3, [pc, #456]	; (80016ac <HAL_RCC_OscConfig+0xb40>)
 80014e2:	6a1b      	ldr	r3, [r3, #32]
 80014e4:	4a71      	ldr	r2, [pc, #452]	; (80016ac <HAL_RCC_OscConfig+0xb40>)
 80014e6:	f043 0301 	orr.w	r3, r3, #1
 80014ea:	6213      	str	r3, [r2, #32]
 80014ec:	e00b      	b.n	8001506 <HAL_RCC_OscConfig+0x99a>
 80014ee:	4b6f      	ldr	r3, [pc, #444]	; (80016ac <HAL_RCC_OscConfig+0xb40>)
 80014f0:	6a1b      	ldr	r3, [r3, #32]
 80014f2:	4a6e      	ldr	r2, [pc, #440]	; (80016ac <HAL_RCC_OscConfig+0xb40>)
 80014f4:	f023 0301 	bic.w	r3, r3, #1
 80014f8:	6213      	str	r3, [r2, #32]
 80014fa:	4b6c      	ldr	r3, [pc, #432]	; (80016ac <HAL_RCC_OscConfig+0xb40>)
 80014fc:	6a1b      	ldr	r3, [r3, #32]
 80014fe:	4a6b      	ldr	r2, [pc, #428]	; (80016ac <HAL_RCC_OscConfig+0xb40>)
 8001500:	f023 0304 	bic.w	r3, r3, #4
 8001504:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001506:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800150a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	689b      	ldr	r3, [r3, #8]
 8001512:	2b00      	cmp	r3, #0
 8001514:	f000 8081 	beq.w	800161a <HAL_RCC_OscConfig+0xaae>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001518:	f7ff fa3a 	bl	8000990 <HAL_GetTick>
 800151c:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001520:	e00b      	b.n	800153a <HAL_RCC_OscConfig+0x9ce>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001522:	f7ff fa35 	bl	8000990 <HAL_GetTick>
 8001526:	4602      	mov	r2, r0
 8001528:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800152c:	1ad3      	subs	r3, r2, r3
 800152e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001532:	4293      	cmp	r3, r2
 8001534:	d901      	bls.n	800153a <HAL_RCC_OscConfig+0x9ce>
        {
          return HAL_TIMEOUT;
 8001536:	2303      	movs	r3, #3
 8001538:	e365      	b.n	8001c06 <HAL_RCC_OscConfig+0x109a>
 800153a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800153e:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8001542:	2202      	movs	r2, #2
 8001544:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001546:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800154a:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	fa93 f2a3 	rbit	r2, r3
 8001554:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001558:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 800155c:	601a      	str	r2, [r3, #0]
 800155e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001562:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8001566:	2202      	movs	r2, #2
 8001568:	601a      	str	r2, [r3, #0]
 800156a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800156e:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	fa93 f2a3 	rbit	r2, r3
 8001578:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800157c:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8001580:	601a      	str	r2, [r3, #0]
  return result;
 8001582:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001586:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 800158a:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800158c:	fab3 f383 	clz	r3, r3
 8001590:	b2db      	uxtb	r3, r3
 8001592:	095b      	lsrs	r3, r3, #5
 8001594:	b2db      	uxtb	r3, r3
 8001596:	f043 0302 	orr.w	r3, r3, #2
 800159a:	b2db      	uxtb	r3, r3
 800159c:	2b02      	cmp	r3, #2
 800159e:	d102      	bne.n	80015a6 <HAL_RCC_OscConfig+0xa3a>
 80015a0:	4b42      	ldr	r3, [pc, #264]	; (80016ac <HAL_RCC_OscConfig+0xb40>)
 80015a2:	6a1b      	ldr	r3, [r3, #32]
 80015a4:	e013      	b.n	80015ce <HAL_RCC_OscConfig+0xa62>
 80015a6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80015aa:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 80015ae:	2202      	movs	r2, #2
 80015b0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015b2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80015b6:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	fa93 f2a3 	rbit	r2, r3
 80015c0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80015c4:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 80015c8:	601a      	str	r2, [r3, #0]
 80015ca:	4b38      	ldr	r3, [pc, #224]	; (80016ac <HAL_RCC_OscConfig+0xb40>)
 80015cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015ce:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80015d2:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 80015d6:	2102      	movs	r1, #2
 80015d8:	6011      	str	r1, [r2, #0]
 80015da:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80015de:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 80015e2:	6812      	ldr	r2, [r2, #0]
 80015e4:	fa92 f1a2 	rbit	r1, r2
 80015e8:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80015ec:	f5a2 72b0 	sub.w	r2, r2, #352	; 0x160
 80015f0:	6011      	str	r1, [r2, #0]
  return result;
 80015f2:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80015f6:	f5a2 72b0 	sub.w	r2, r2, #352	; 0x160
 80015fa:	6812      	ldr	r2, [r2, #0]
 80015fc:	fab2 f282 	clz	r2, r2
 8001600:	b2d2      	uxtb	r2, r2
 8001602:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001606:	b2d2      	uxtb	r2, r2
 8001608:	f002 021f 	and.w	r2, r2, #31
 800160c:	2101      	movs	r1, #1
 800160e:	fa01 f202 	lsl.w	r2, r1, r2
 8001612:	4013      	ands	r3, r2
 8001614:	2b00      	cmp	r3, #0
 8001616:	d084      	beq.n	8001522 <HAL_RCC_OscConfig+0x9b6>
 8001618:	e083      	b.n	8001722 <HAL_RCC_OscConfig+0xbb6>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800161a:	f7ff f9b9 	bl	8000990 <HAL_GetTick>
 800161e:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001622:	e00b      	b.n	800163c <HAL_RCC_OscConfig+0xad0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001624:	f7ff f9b4 	bl	8000990 <HAL_GetTick>
 8001628:	4602      	mov	r2, r0
 800162a:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800162e:	1ad3      	subs	r3, r2, r3
 8001630:	f241 3288 	movw	r2, #5000	; 0x1388
 8001634:	4293      	cmp	r3, r2
 8001636:	d901      	bls.n	800163c <HAL_RCC_OscConfig+0xad0>
        {
          return HAL_TIMEOUT;
 8001638:	2303      	movs	r3, #3
 800163a:	e2e4      	b.n	8001c06 <HAL_RCC_OscConfig+0x109a>
 800163c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001640:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8001644:	2202      	movs	r2, #2
 8001646:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001648:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800164c:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	fa93 f2a3 	rbit	r2, r3
 8001656:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800165a:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 800165e:	601a      	str	r2, [r3, #0]
 8001660:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001664:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8001668:	2202      	movs	r2, #2
 800166a:	601a      	str	r2, [r3, #0]
 800166c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001670:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	fa93 f2a3 	rbit	r2, r3
 800167a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800167e:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8001682:	601a      	str	r2, [r3, #0]
  return result;
 8001684:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001688:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 800168c:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800168e:	fab3 f383 	clz	r3, r3
 8001692:	b2db      	uxtb	r3, r3
 8001694:	095b      	lsrs	r3, r3, #5
 8001696:	b2db      	uxtb	r3, r3
 8001698:	f043 0302 	orr.w	r3, r3, #2
 800169c:	b2db      	uxtb	r3, r3
 800169e:	2b02      	cmp	r3, #2
 80016a0:	d106      	bne.n	80016b0 <HAL_RCC_OscConfig+0xb44>
 80016a2:	4b02      	ldr	r3, [pc, #8]	; (80016ac <HAL_RCC_OscConfig+0xb40>)
 80016a4:	6a1b      	ldr	r3, [r3, #32]
 80016a6:	e017      	b.n	80016d8 <HAL_RCC_OscConfig+0xb6c>
 80016a8:	40007000 	.word	0x40007000
 80016ac:	40021000 	.word	0x40021000
 80016b0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80016b4:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 80016b8:	2202      	movs	r2, #2
 80016ba:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016bc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80016c0:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	fa93 f2a3 	rbit	r2, r3
 80016ca:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80016ce:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 80016d2:	601a      	str	r2, [r3, #0]
 80016d4:	4bb3      	ldr	r3, [pc, #716]	; (80019a4 <HAL_RCC_OscConfig+0xe38>)
 80016d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016d8:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80016dc:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 80016e0:	2102      	movs	r1, #2
 80016e2:	6011      	str	r1, [r2, #0]
 80016e4:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80016e8:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 80016ec:	6812      	ldr	r2, [r2, #0]
 80016ee:	fa92 f1a2 	rbit	r1, r2
 80016f2:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80016f6:	f5a2 72c0 	sub.w	r2, r2, #384	; 0x180
 80016fa:	6011      	str	r1, [r2, #0]
  return result;
 80016fc:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001700:	f5a2 72c0 	sub.w	r2, r2, #384	; 0x180
 8001704:	6812      	ldr	r2, [r2, #0]
 8001706:	fab2 f282 	clz	r2, r2
 800170a:	b2d2      	uxtb	r2, r2
 800170c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001710:	b2d2      	uxtb	r2, r2
 8001712:	f002 021f 	and.w	r2, r2, #31
 8001716:	2101      	movs	r1, #1
 8001718:	fa01 f202 	lsl.w	r2, r1, r2
 800171c:	4013      	ands	r3, r2
 800171e:	2b00      	cmp	r3, #0
 8001720:	d180      	bne.n	8001624 <HAL_RCC_OscConfig+0xab8>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001722:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 8001726:	2b01      	cmp	r3, #1
 8001728:	d105      	bne.n	8001736 <HAL_RCC_OscConfig+0xbca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800172a:	4b9e      	ldr	r3, [pc, #632]	; (80019a4 <HAL_RCC_OscConfig+0xe38>)
 800172c:	69db      	ldr	r3, [r3, #28]
 800172e:	4a9d      	ldr	r2, [pc, #628]	; (80019a4 <HAL_RCC_OscConfig+0xe38>)
 8001730:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001734:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001736:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800173a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	699b      	ldr	r3, [r3, #24]
 8001742:	2b00      	cmp	r3, #0
 8001744:	f000 825e 	beq.w	8001c04 <HAL_RCC_OscConfig+0x1098>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001748:	4b96      	ldr	r3, [pc, #600]	; (80019a4 <HAL_RCC_OscConfig+0xe38>)
 800174a:	685b      	ldr	r3, [r3, #4]
 800174c:	f003 030c 	and.w	r3, r3, #12
 8001750:	2b08      	cmp	r3, #8
 8001752:	f000 821f 	beq.w	8001b94 <HAL_RCC_OscConfig+0x1028>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001756:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800175a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	699b      	ldr	r3, [r3, #24]
 8001762:	2b02      	cmp	r3, #2
 8001764:	f040 8170 	bne.w	8001a48 <HAL_RCC_OscConfig+0xedc>
 8001768:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800176c:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8001770:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001774:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001776:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800177a:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	fa93 f2a3 	rbit	r2, r3
 8001784:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001788:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 800178c:	601a      	str	r2, [r3, #0]
  return result;
 800178e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001792:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8001796:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001798:	fab3 f383 	clz	r3, r3
 800179c:	b2db      	uxtb	r3, r3
 800179e:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80017a2:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80017a6:	009b      	lsls	r3, r3, #2
 80017a8:	461a      	mov	r2, r3
 80017aa:	2300      	movs	r3, #0
 80017ac:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017ae:	f7ff f8ef 	bl	8000990 <HAL_GetTick>
 80017b2:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80017b6:	e009      	b.n	80017cc <HAL_RCC_OscConfig+0xc60>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80017b8:	f7ff f8ea 	bl	8000990 <HAL_GetTick>
 80017bc:	4602      	mov	r2, r0
 80017be:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80017c2:	1ad3      	subs	r3, r2, r3
 80017c4:	2b02      	cmp	r3, #2
 80017c6:	d901      	bls.n	80017cc <HAL_RCC_OscConfig+0xc60>
          {
            return HAL_TIMEOUT;
 80017c8:	2303      	movs	r3, #3
 80017ca:	e21c      	b.n	8001c06 <HAL_RCC_OscConfig+0x109a>
 80017cc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80017d0:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 80017d4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80017d8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017da:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80017de:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	fa93 f2a3 	rbit	r2, r3
 80017e8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80017ec:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 80017f0:	601a      	str	r2, [r3, #0]
  return result;
 80017f2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80017f6:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 80017fa:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80017fc:	fab3 f383 	clz	r3, r3
 8001800:	b2db      	uxtb	r3, r3
 8001802:	095b      	lsrs	r3, r3, #5
 8001804:	b2db      	uxtb	r3, r3
 8001806:	f043 0301 	orr.w	r3, r3, #1
 800180a:	b2db      	uxtb	r3, r3
 800180c:	2b01      	cmp	r3, #1
 800180e:	d102      	bne.n	8001816 <HAL_RCC_OscConfig+0xcaa>
 8001810:	4b64      	ldr	r3, [pc, #400]	; (80019a4 <HAL_RCC_OscConfig+0xe38>)
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	e027      	b.n	8001866 <HAL_RCC_OscConfig+0xcfa>
 8001816:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800181a:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 800181e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001822:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001824:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001828:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	fa93 f2a3 	rbit	r2, r3
 8001832:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001836:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 800183a:	601a      	str	r2, [r3, #0]
 800183c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001840:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8001844:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001848:	601a      	str	r2, [r3, #0]
 800184a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800184e:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	fa93 f2a3 	rbit	r2, r3
 8001858:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800185c:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 8001860:	601a      	str	r2, [r3, #0]
 8001862:	4b50      	ldr	r3, [pc, #320]	; (80019a4 <HAL_RCC_OscConfig+0xe38>)
 8001864:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001866:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800186a:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 800186e:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001872:	6011      	str	r1, [r2, #0]
 8001874:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001878:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 800187c:	6812      	ldr	r2, [r2, #0]
 800187e:	fa92 f1a2 	rbit	r1, r2
 8001882:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001886:	f5a2 72d4 	sub.w	r2, r2, #424	; 0x1a8
 800188a:	6011      	str	r1, [r2, #0]
  return result;
 800188c:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001890:	f5a2 72d4 	sub.w	r2, r2, #424	; 0x1a8
 8001894:	6812      	ldr	r2, [r2, #0]
 8001896:	fab2 f282 	clz	r2, r2
 800189a:	b2d2      	uxtb	r2, r2
 800189c:	f042 0220 	orr.w	r2, r2, #32
 80018a0:	b2d2      	uxtb	r2, r2
 80018a2:	f002 021f 	and.w	r2, r2, #31
 80018a6:	2101      	movs	r1, #1
 80018a8:	fa01 f202 	lsl.w	r2, r1, r2
 80018ac:	4013      	ands	r3, r2
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d182      	bne.n	80017b8 <HAL_RCC_OscConfig+0xc4c>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80018b2:	4b3c      	ldr	r3, [pc, #240]	; (80019a4 <HAL_RCC_OscConfig+0xe38>)
 80018b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018b6:	f023 020f 	bic.w	r2, r3, #15
 80018ba:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80018be:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018c6:	4937      	ldr	r1, [pc, #220]	; (80019a4 <HAL_RCC_OscConfig+0xe38>)
 80018c8:	4313      	orrs	r3, r2
 80018ca:	62cb      	str	r3, [r1, #44]	; 0x2c
 80018cc:	4b35      	ldr	r3, [pc, #212]	; (80019a4 <HAL_RCC_OscConfig+0xe38>)
 80018ce:	685b      	ldr	r3, [r3, #4]
 80018d0:	f423 1276 	bic.w	r2, r3, #4030464	; 0x3d8000
 80018d4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80018d8:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	6a19      	ldr	r1, [r3, #32]
 80018e0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80018e4:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	69db      	ldr	r3, [r3, #28]
 80018ec:	430b      	orrs	r3, r1
 80018ee:	492d      	ldr	r1, [pc, #180]	; (80019a4 <HAL_RCC_OscConfig+0xe38>)
 80018f0:	4313      	orrs	r3, r2
 80018f2:	604b      	str	r3, [r1, #4]
 80018f4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80018f8:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 80018fc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001900:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001902:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001906:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	fa93 f2a3 	rbit	r2, r3
 8001910:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001914:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8001918:	601a      	str	r2, [r3, #0]
  return result;
 800191a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800191e:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8001922:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001924:	fab3 f383 	clz	r3, r3
 8001928:	b2db      	uxtb	r3, r3
 800192a:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800192e:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001932:	009b      	lsls	r3, r3, #2
 8001934:	461a      	mov	r2, r3
 8001936:	2301      	movs	r3, #1
 8001938:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800193a:	f7ff f829 	bl	8000990 <HAL_GetTick>
 800193e:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001942:	e009      	b.n	8001958 <HAL_RCC_OscConfig+0xdec>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001944:	f7ff f824 	bl	8000990 <HAL_GetTick>
 8001948:	4602      	mov	r2, r0
 800194a:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800194e:	1ad3      	subs	r3, r2, r3
 8001950:	2b02      	cmp	r3, #2
 8001952:	d901      	bls.n	8001958 <HAL_RCC_OscConfig+0xdec>
          {
            return HAL_TIMEOUT;
 8001954:	2303      	movs	r3, #3
 8001956:	e156      	b.n	8001c06 <HAL_RCC_OscConfig+0x109a>
 8001958:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800195c:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8001960:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001964:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001966:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800196a:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	fa93 f2a3 	rbit	r2, r3
 8001974:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001978:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 800197c:	601a      	str	r2, [r3, #0]
  return result;
 800197e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001982:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8001986:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001988:	fab3 f383 	clz	r3, r3
 800198c:	b2db      	uxtb	r3, r3
 800198e:	095b      	lsrs	r3, r3, #5
 8001990:	b2db      	uxtb	r3, r3
 8001992:	f043 0301 	orr.w	r3, r3, #1
 8001996:	b2db      	uxtb	r3, r3
 8001998:	2b01      	cmp	r3, #1
 800199a:	d105      	bne.n	80019a8 <HAL_RCC_OscConfig+0xe3c>
 800199c:	4b01      	ldr	r3, [pc, #4]	; (80019a4 <HAL_RCC_OscConfig+0xe38>)
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	e02a      	b.n	80019f8 <HAL_RCC_OscConfig+0xe8c>
 80019a2:	bf00      	nop
 80019a4:	40021000 	.word	0x40021000
 80019a8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80019ac:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 80019b0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80019b4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019b6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80019ba:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	fa93 f2a3 	rbit	r2, r3
 80019c4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80019c8:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 80019cc:	601a      	str	r2, [r3, #0]
 80019ce:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80019d2:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 80019d6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80019da:	601a      	str	r2, [r3, #0]
 80019dc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80019e0:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	fa93 f2a3 	rbit	r2, r3
 80019ea:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80019ee:	f5a3 73e4 	sub.w	r3, r3, #456	; 0x1c8
 80019f2:	601a      	str	r2, [r3, #0]
 80019f4:	4b86      	ldr	r3, [pc, #536]	; (8001c10 <HAL_RCC_OscConfig+0x10a4>)
 80019f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019f8:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80019fc:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8001a00:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001a04:	6011      	str	r1, [r2, #0]
 8001a06:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001a0a:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8001a0e:	6812      	ldr	r2, [r2, #0]
 8001a10:	fa92 f1a2 	rbit	r1, r2
 8001a14:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001a18:	f5a2 72e8 	sub.w	r2, r2, #464	; 0x1d0
 8001a1c:	6011      	str	r1, [r2, #0]
  return result;
 8001a1e:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001a22:	f5a2 72e8 	sub.w	r2, r2, #464	; 0x1d0
 8001a26:	6812      	ldr	r2, [r2, #0]
 8001a28:	fab2 f282 	clz	r2, r2
 8001a2c:	b2d2      	uxtb	r2, r2
 8001a2e:	f042 0220 	orr.w	r2, r2, #32
 8001a32:	b2d2      	uxtb	r2, r2
 8001a34:	f002 021f 	and.w	r2, r2, #31
 8001a38:	2101      	movs	r1, #1
 8001a3a:	fa01 f202 	lsl.w	r2, r1, r2
 8001a3e:	4013      	ands	r3, r2
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	f43f af7f 	beq.w	8001944 <HAL_RCC_OscConfig+0xdd8>
 8001a46:	e0dd      	b.n	8001c04 <HAL_RCC_OscConfig+0x1098>
 8001a48:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001a4c:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8001a50:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001a54:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a56:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001a5a:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	fa93 f2a3 	rbit	r2, r3
 8001a64:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001a68:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8001a6c:	601a      	str	r2, [r3, #0]
  return result;
 8001a6e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001a72:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8001a76:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a78:	fab3 f383 	clz	r3, r3
 8001a7c:	b2db      	uxtb	r3, r3
 8001a7e:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001a82:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001a86:	009b      	lsls	r3, r3, #2
 8001a88:	461a      	mov	r2, r3
 8001a8a:	2300      	movs	r3, #0
 8001a8c:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a8e:	f7fe ff7f 	bl	8000990 <HAL_GetTick>
 8001a92:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001a96:	e009      	b.n	8001aac <HAL_RCC_OscConfig+0xf40>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001a98:	f7fe ff7a 	bl	8000990 <HAL_GetTick>
 8001a9c:	4602      	mov	r2, r0
 8001a9e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001aa2:	1ad3      	subs	r3, r2, r3
 8001aa4:	2b02      	cmp	r3, #2
 8001aa6:	d901      	bls.n	8001aac <HAL_RCC_OscConfig+0xf40>
          {
            return HAL_TIMEOUT;
 8001aa8:	2303      	movs	r3, #3
 8001aaa:	e0ac      	b.n	8001c06 <HAL_RCC_OscConfig+0x109a>
 8001aac:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001ab0:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8001ab4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001ab8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001aba:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001abe:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	fa93 f2a3 	rbit	r2, r3
 8001ac8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001acc:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8001ad0:	601a      	str	r2, [r3, #0]
  return result;
 8001ad2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001ad6:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8001ada:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001adc:	fab3 f383 	clz	r3, r3
 8001ae0:	b2db      	uxtb	r3, r3
 8001ae2:	095b      	lsrs	r3, r3, #5
 8001ae4:	b2db      	uxtb	r3, r3
 8001ae6:	f043 0301 	orr.w	r3, r3, #1
 8001aea:	b2db      	uxtb	r3, r3
 8001aec:	2b01      	cmp	r3, #1
 8001aee:	d102      	bne.n	8001af6 <HAL_RCC_OscConfig+0xf8a>
 8001af0:	4b47      	ldr	r3, [pc, #284]	; (8001c10 <HAL_RCC_OscConfig+0x10a4>)
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	e027      	b.n	8001b46 <HAL_RCC_OscConfig+0xfda>
 8001af6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001afa:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8001afe:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001b02:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b04:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001b08:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	fa93 f2a3 	rbit	r2, r3
 8001b12:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001b16:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8001b1a:	601a      	str	r2, [r3, #0]
 8001b1c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001b20:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8001b24:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001b28:	601a      	str	r2, [r3, #0]
 8001b2a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001b2e:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	fa93 f2a3 	rbit	r2, r3
 8001b38:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001b3c:	f5a3 73f8 	sub.w	r3, r3, #496	; 0x1f0
 8001b40:	601a      	str	r2, [r3, #0]
 8001b42:	4b33      	ldr	r3, [pc, #204]	; (8001c10 <HAL_RCC_OscConfig+0x10a4>)
 8001b44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b46:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001b4a:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8001b4e:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001b52:	6011      	str	r1, [r2, #0]
 8001b54:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001b58:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8001b5c:	6812      	ldr	r2, [r2, #0]
 8001b5e:	fa92 f1a2 	rbit	r1, r2
 8001b62:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001b66:	f5a2 72fc 	sub.w	r2, r2, #504	; 0x1f8
 8001b6a:	6011      	str	r1, [r2, #0]
  return result;
 8001b6c:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001b70:	f5a2 72fc 	sub.w	r2, r2, #504	; 0x1f8
 8001b74:	6812      	ldr	r2, [r2, #0]
 8001b76:	fab2 f282 	clz	r2, r2
 8001b7a:	b2d2      	uxtb	r2, r2
 8001b7c:	f042 0220 	orr.w	r2, r2, #32
 8001b80:	b2d2      	uxtb	r2, r2
 8001b82:	f002 021f 	and.w	r2, r2, #31
 8001b86:	2101      	movs	r1, #1
 8001b88:	fa01 f202 	lsl.w	r2, r1, r2
 8001b8c:	4013      	ands	r3, r2
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d182      	bne.n	8001a98 <HAL_RCC_OscConfig+0xf2c>
 8001b92:	e037      	b.n	8001c04 <HAL_RCC_OscConfig+0x1098>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001b94:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001b98:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	699b      	ldr	r3, [r3, #24]
 8001ba0:	2b01      	cmp	r3, #1
 8001ba2:	d101      	bne.n	8001ba8 <HAL_RCC_OscConfig+0x103c>
      {
        return HAL_ERROR;
 8001ba4:	2301      	movs	r3, #1
 8001ba6:	e02e      	b.n	8001c06 <HAL_RCC_OscConfig+0x109a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001ba8:	4b19      	ldr	r3, [pc, #100]	; (8001c10 <HAL_RCC_OscConfig+0x10a4>)
 8001baa:	685b      	ldr	r3, [r3, #4]
 8001bac:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 8001bb0:	4b17      	ldr	r3, [pc, #92]	; (8001c10 <HAL_RCC_OscConfig+0x10a4>)
 8001bb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bb4:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001bb8:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8001bbc:	f403 32c0 	and.w	r2, r3, #98304	; 0x18000
 8001bc0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001bc4:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	69db      	ldr	r3, [r3, #28]
 8001bcc:	429a      	cmp	r2, r3
 8001bce:	d117      	bne.n	8001c00 <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8001bd0:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8001bd4:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001bd8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001bdc:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001be4:	429a      	cmp	r2, r3
 8001be6:	d10b      	bne.n	8001c00 <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 8001be8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001bec:	f003 020f 	and.w	r2, r3, #15
 8001bf0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001bf4:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8001bfc:	429a      	cmp	r2, r3
 8001bfe:	d001      	beq.n	8001c04 <HAL_RCC_OscConfig+0x1098>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 8001c00:	2301      	movs	r3, #1
 8001c02:	e000      	b.n	8001c06 <HAL_RCC_OscConfig+0x109a>
        }
      }
    }
  }

  return HAL_OK;
 8001c04:	2300      	movs	r3, #0
}
 8001c06:	4618      	mov	r0, r3
 8001c08:	f507 7702 	add.w	r7, r7, #520	; 0x208
 8001c0c:	46bd      	mov	sp, r7
 8001c0e:	bd80      	pop	{r7, pc}
 8001c10:	40021000 	.word	0x40021000

08001c14 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001c14:	b580      	push	{r7, lr}
 8001c16:	b09e      	sub	sp, #120	; 0x78
 8001c18:	af00      	add	r7, sp, #0
 8001c1a:	6078      	str	r0, [r7, #4]
 8001c1c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001c1e:	2300      	movs	r3, #0
 8001c20:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d101      	bne.n	8001c2c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001c28:	2301      	movs	r3, #1
 8001c2a:	e162      	b.n	8001ef2 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001c2c:	4b90      	ldr	r3, [pc, #576]	; (8001e70 <HAL_RCC_ClockConfig+0x25c>)
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	f003 0307 	and.w	r3, r3, #7
 8001c34:	683a      	ldr	r2, [r7, #0]
 8001c36:	429a      	cmp	r2, r3
 8001c38:	d910      	bls.n	8001c5c <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c3a:	4b8d      	ldr	r3, [pc, #564]	; (8001e70 <HAL_RCC_ClockConfig+0x25c>)
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	f023 0207 	bic.w	r2, r3, #7
 8001c42:	498b      	ldr	r1, [pc, #556]	; (8001e70 <HAL_RCC_ClockConfig+0x25c>)
 8001c44:	683b      	ldr	r3, [r7, #0]
 8001c46:	4313      	orrs	r3, r2
 8001c48:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c4a:	4b89      	ldr	r3, [pc, #548]	; (8001e70 <HAL_RCC_ClockConfig+0x25c>)
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	f003 0307 	and.w	r3, r3, #7
 8001c52:	683a      	ldr	r2, [r7, #0]
 8001c54:	429a      	cmp	r2, r3
 8001c56:	d001      	beq.n	8001c5c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001c58:	2301      	movs	r3, #1
 8001c5a:	e14a      	b.n	8001ef2 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	f003 0302 	and.w	r3, r3, #2
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d008      	beq.n	8001c7a <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001c68:	4b82      	ldr	r3, [pc, #520]	; (8001e74 <HAL_RCC_ClockConfig+0x260>)
 8001c6a:	685b      	ldr	r3, [r3, #4]
 8001c6c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	689b      	ldr	r3, [r3, #8]
 8001c74:	497f      	ldr	r1, [pc, #508]	; (8001e74 <HAL_RCC_ClockConfig+0x260>)
 8001c76:	4313      	orrs	r3, r2
 8001c78:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	f003 0301 	and.w	r3, r3, #1
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	f000 80dc 	beq.w	8001e40 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	685b      	ldr	r3, [r3, #4]
 8001c8c:	2b01      	cmp	r3, #1
 8001c8e:	d13c      	bne.n	8001d0a <HAL_RCC_ClockConfig+0xf6>
 8001c90:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001c94:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c96:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001c98:	fa93 f3a3 	rbit	r3, r3
 8001c9c:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8001c9e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ca0:	fab3 f383 	clz	r3, r3
 8001ca4:	b2db      	uxtb	r3, r3
 8001ca6:	095b      	lsrs	r3, r3, #5
 8001ca8:	b2db      	uxtb	r3, r3
 8001caa:	f043 0301 	orr.w	r3, r3, #1
 8001cae:	b2db      	uxtb	r3, r3
 8001cb0:	2b01      	cmp	r3, #1
 8001cb2:	d102      	bne.n	8001cba <HAL_RCC_ClockConfig+0xa6>
 8001cb4:	4b6f      	ldr	r3, [pc, #444]	; (8001e74 <HAL_RCC_ClockConfig+0x260>)
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	e00f      	b.n	8001cda <HAL_RCC_ClockConfig+0xc6>
 8001cba:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001cbe:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cc0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001cc2:	fa93 f3a3 	rbit	r3, r3
 8001cc6:	667b      	str	r3, [r7, #100]	; 0x64
 8001cc8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001ccc:	663b      	str	r3, [r7, #96]	; 0x60
 8001cce:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001cd0:	fa93 f3a3 	rbit	r3, r3
 8001cd4:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001cd6:	4b67      	ldr	r3, [pc, #412]	; (8001e74 <HAL_RCC_ClockConfig+0x260>)
 8001cd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cda:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001cde:	65ba      	str	r2, [r7, #88]	; 0x58
 8001ce0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001ce2:	fa92 f2a2 	rbit	r2, r2
 8001ce6:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8001ce8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001cea:	fab2 f282 	clz	r2, r2
 8001cee:	b2d2      	uxtb	r2, r2
 8001cf0:	f042 0220 	orr.w	r2, r2, #32
 8001cf4:	b2d2      	uxtb	r2, r2
 8001cf6:	f002 021f 	and.w	r2, r2, #31
 8001cfa:	2101      	movs	r1, #1
 8001cfc:	fa01 f202 	lsl.w	r2, r1, r2
 8001d00:	4013      	ands	r3, r2
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d17b      	bne.n	8001dfe <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001d06:	2301      	movs	r3, #1
 8001d08:	e0f3      	b.n	8001ef2 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	685b      	ldr	r3, [r3, #4]
 8001d0e:	2b02      	cmp	r3, #2
 8001d10:	d13c      	bne.n	8001d8c <HAL_RCC_ClockConfig+0x178>
 8001d12:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001d16:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d18:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001d1a:	fa93 f3a3 	rbit	r3, r3
 8001d1e:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8001d20:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001d22:	fab3 f383 	clz	r3, r3
 8001d26:	b2db      	uxtb	r3, r3
 8001d28:	095b      	lsrs	r3, r3, #5
 8001d2a:	b2db      	uxtb	r3, r3
 8001d2c:	f043 0301 	orr.w	r3, r3, #1
 8001d30:	b2db      	uxtb	r3, r3
 8001d32:	2b01      	cmp	r3, #1
 8001d34:	d102      	bne.n	8001d3c <HAL_RCC_ClockConfig+0x128>
 8001d36:	4b4f      	ldr	r3, [pc, #316]	; (8001e74 <HAL_RCC_ClockConfig+0x260>)
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	e00f      	b.n	8001d5c <HAL_RCC_ClockConfig+0x148>
 8001d3c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001d40:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d42:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001d44:	fa93 f3a3 	rbit	r3, r3
 8001d48:	647b      	str	r3, [r7, #68]	; 0x44
 8001d4a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001d4e:	643b      	str	r3, [r7, #64]	; 0x40
 8001d50:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001d52:	fa93 f3a3 	rbit	r3, r3
 8001d56:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001d58:	4b46      	ldr	r3, [pc, #280]	; (8001e74 <HAL_RCC_ClockConfig+0x260>)
 8001d5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d5c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001d60:	63ba      	str	r2, [r7, #56]	; 0x38
 8001d62:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001d64:	fa92 f2a2 	rbit	r2, r2
 8001d68:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8001d6a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001d6c:	fab2 f282 	clz	r2, r2
 8001d70:	b2d2      	uxtb	r2, r2
 8001d72:	f042 0220 	orr.w	r2, r2, #32
 8001d76:	b2d2      	uxtb	r2, r2
 8001d78:	f002 021f 	and.w	r2, r2, #31
 8001d7c:	2101      	movs	r1, #1
 8001d7e:	fa01 f202 	lsl.w	r2, r1, r2
 8001d82:	4013      	ands	r3, r2
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d13a      	bne.n	8001dfe <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001d88:	2301      	movs	r3, #1
 8001d8a:	e0b2      	b.n	8001ef2 <HAL_RCC_ClockConfig+0x2de>
 8001d8c:	2302      	movs	r3, #2
 8001d8e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d92:	fa93 f3a3 	rbit	r3, r3
 8001d96:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8001d98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d9a:	fab3 f383 	clz	r3, r3
 8001d9e:	b2db      	uxtb	r3, r3
 8001da0:	095b      	lsrs	r3, r3, #5
 8001da2:	b2db      	uxtb	r3, r3
 8001da4:	f043 0301 	orr.w	r3, r3, #1
 8001da8:	b2db      	uxtb	r3, r3
 8001daa:	2b01      	cmp	r3, #1
 8001dac:	d102      	bne.n	8001db4 <HAL_RCC_ClockConfig+0x1a0>
 8001dae:	4b31      	ldr	r3, [pc, #196]	; (8001e74 <HAL_RCC_ClockConfig+0x260>)
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	e00d      	b.n	8001dd0 <HAL_RCC_ClockConfig+0x1bc>
 8001db4:	2302      	movs	r3, #2
 8001db6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001db8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001dba:	fa93 f3a3 	rbit	r3, r3
 8001dbe:	627b      	str	r3, [r7, #36]	; 0x24
 8001dc0:	2302      	movs	r3, #2
 8001dc2:	623b      	str	r3, [r7, #32]
 8001dc4:	6a3b      	ldr	r3, [r7, #32]
 8001dc6:	fa93 f3a3 	rbit	r3, r3
 8001dca:	61fb      	str	r3, [r7, #28]
 8001dcc:	4b29      	ldr	r3, [pc, #164]	; (8001e74 <HAL_RCC_ClockConfig+0x260>)
 8001dce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dd0:	2202      	movs	r2, #2
 8001dd2:	61ba      	str	r2, [r7, #24]
 8001dd4:	69ba      	ldr	r2, [r7, #24]
 8001dd6:	fa92 f2a2 	rbit	r2, r2
 8001dda:	617a      	str	r2, [r7, #20]
  return result;
 8001ddc:	697a      	ldr	r2, [r7, #20]
 8001dde:	fab2 f282 	clz	r2, r2
 8001de2:	b2d2      	uxtb	r2, r2
 8001de4:	f042 0220 	orr.w	r2, r2, #32
 8001de8:	b2d2      	uxtb	r2, r2
 8001dea:	f002 021f 	and.w	r2, r2, #31
 8001dee:	2101      	movs	r1, #1
 8001df0:	fa01 f202 	lsl.w	r2, r1, r2
 8001df4:	4013      	ands	r3, r2
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d101      	bne.n	8001dfe <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001dfa:	2301      	movs	r3, #1
 8001dfc:	e079      	b.n	8001ef2 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001dfe:	4b1d      	ldr	r3, [pc, #116]	; (8001e74 <HAL_RCC_ClockConfig+0x260>)
 8001e00:	685b      	ldr	r3, [r3, #4]
 8001e02:	f023 0203 	bic.w	r2, r3, #3
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	685b      	ldr	r3, [r3, #4]
 8001e0a:	491a      	ldr	r1, [pc, #104]	; (8001e74 <HAL_RCC_ClockConfig+0x260>)
 8001e0c:	4313      	orrs	r3, r2
 8001e0e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001e10:	f7fe fdbe 	bl	8000990 <HAL_GetTick>
 8001e14:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e16:	e00a      	b.n	8001e2e <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e18:	f7fe fdba 	bl	8000990 <HAL_GetTick>
 8001e1c:	4602      	mov	r2, r0
 8001e1e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001e20:	1ad3      	subs	r3, r2, r3
 8001e22:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e26:	4293      	cmp	r3, r2
 8001e28:	d901      	bls.n	8001e2e <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8001e2a:	2303      	movs	r3, #3
 8001e2c:	e061      	b.n	8001ef2 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e2e:	4b11      	ldr	r3, [pc, #68]	; (8001e74 <HAL_RCC_ClockConfig+0x260>)
 8001e30:	685b      	ldr	r3, [r3, #4]
 8001e32:	f003 020c 	and.w	r2, r3, #12
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	685b      	ldr	r3, [r3, #4]
 8001e3a:	009b      	lsls	r3, r3, #2
 8001e3c:	429a      	cmp	r2, r3
 8001e3e:	d1eb      	bne.n	8001e18 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001e40:	4b0b      	ldr	r3, [pc, #44]	; (8001e70 <HAL_RCC_ClockConfig+0x25c>)
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	f003 0307 	and.w	r3, r3, #7
 8001e48:	683a      	ldr	r2, [r7, #0]
 8001e4a:	429a      	cmp	r2, r3
 8001e4c:	d214      	bcs.n	8001e78 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e4e:	4b08      	ldr	r3, [pc, #32]	; (8001e70 <HAL_RCC_ClockConfig+0x25c>)
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	f023 0207 	bic.w	r2, r3, #7
 8001e56:	4906      	ldr	r1, [pc, #24]	; (8001e70 <HAL_RCC_ClockConfig+0x25c>)
 8001e58:	683b      	ldr	r3, [r7, #0]
 8001e5a:	4313      	orrs	r3, r2
 8001e5c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e5e:	4b04      	ldr	r3, [pc, #16]	; (8001e70 <HAL_RCC_ClockConfig+0x25c>)
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	f003 0307 	and.w	r3, r3, #7
 8001e66:	683a      	ldr	r2, [r7, #0]
 8001e68:	429a      	cmp	r2, r3
 8001e6a:	d005      	beq.n	8001e78 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8001e6c:	2301      	movs	r3, #1
 8001e6e:	e040      	b.n	8001ef2 <HAL_RCC_ClockConfig+0x2de>
 8001e70:	40022000 	.word	0x40022000
 8001e74:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	f003 0304 	and.w	r3, r3, #4
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d008      	beq.n	8001e96 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001e84:	4b1d      	ldr	r3, [pc, #116]	; (8001efc <HAL_RCC_ClockConfig+0x2e8>)
 8001e86:	685b      	ldr	r3, [r3, #4]
 8001e88:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	68db      	ldr	r3, [r3, #12]
 8001e90:	491a      	ldr	r1, [pc, #104]	; (8001efc <HAL_RCC_ClockConfig+0x2e8>)
 8001e92:	4313      	orrs	r3, r2
 8001e94:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	f003 0308 	and.w	r3, r3, #8
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d009      	beq.n	8001eb6 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001ea2:	4b16      	ldr	r3, [pc, #88]	; (8001efc <HAL_RCC_ClockConfig+0x2e8>)
 8001ea4:	685b      	ldr	r3, [r3, #4]
 8001ea6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	691b      	ldr	r3, [r3, #16]
 8001eae:	00db      	lsls	r3, r3, #3
 8001eb0:	4912      	ldr	r1, [pc, #72]	; (8001efc <HAL_RCC_ClockConfig+0x2e8>)
 8001eb2:	4313      	orrs	r3, r2
 8001eb4:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8001eb6:	f000 f829 	bl	8001f0c <HAL_RCC_GetSysClockFreq>
 8001eba:	4601      	mov	r1, r0
 8001ebc:	4b0f      	ldr	r3, [pc, #60]	; (8001efc <HAL_RCC_ClockConfig+0x2e8>)
 8001ebe:	685b      	ldr	r3, [r3, #4]
 8001ec0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001ec4:	22f0      	movs	r2, #240	; 0xf0
 8001ec6:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ec8:	693a      	ldr	r2, [r7, #16]
 8001eca:	fa92 f2a2 	rbit	r2, r2
 8001ece:	60fa      	str	r2, [r7, #12]
  return result;
 8001ed0:	68fa      	ldr	r2, [r7, #12]
 8001ed2:	fab2 f282 	clz	r2, r2
 8001ed6:	b2d2      	uxtb	r2, r2
 8001ed8:	40d3      	lsrs	r3, r2
 8001eda:	4a09      	ldr	r2, [pc, #36]	; (8001f00 <HAL_RCC_ClockConfig+0x2ec>)
 8001edc:	5cd3      	ldrb	r3, [r2, r3]
 8001ede:	fa21 f303 	lsr.w	r3, r1, r3
 8001ee2:	4a08      	ldr	r2, [pc, #32]	; (8001f04 <HAL_RCC_ClockConfig+0x2f0>)
 8001ee4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8001ee6:	4b08      	ldr	r3, [pc, #32]	; (8001f08 <HAL_RCC_ClockConfig+0x2f4>)
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	4618      	mov	r0, r3
 8001eec:	f7fe fc5a 	bl	80007a4 <HAL_InitTick>
  
  return HAL_OK;
 8001ef0:	2300      	movs	r3, #0
}
 8001ef2:	4618      	mov	r0, r3
 8001ef4:	3778      	adds	r7, #120	; 0x78
 8001ef6:	46bd      	mov	sp, r7
 8001ef8:	bd80      	pop	{r7, pc}
 8001efa:	bf00      	nop
 8001efc:	40021000 	.word	0x40021000
 8001f00:	08005780 	.word	0x08005780
 8001f04:	20000000 	.word	0x20000000
 8001f08:	20000004 	.word	0x20000004

08001f0c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001f0c:	b480      	push	{r7}
 8001f0e:	b08b      	sub	sp, #44	; 0x2c
 8001f10:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001f12:	2300      	movs	r3, #0
 8001f14:	61fb      	str	r3, [r7, #28]
 8001f16:	2300      	movs	r3, #0
 8001f18:	61bb      	str	r3, [r7, #24]
 8001f1a:	2300      	movs	r3, #0
 8001f1c:	627b      	str	r3, [r7, #36]	; 0x24
 8001f1e:	2300      	movs	r3, #0
 8001f20:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001f22:	2300      	movs	r3, #0
 8001f24:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8001f26:	4b2a      	ldr	r3, [pc, #168]	; (8001fd0 <HAL_RCC_GetSysClockFreq+0xc4>)
 8001f28:	685b      	ldr	r3, [r3, #4]
 8001f2a:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001f2c:	69fb      	ldr	r3, [r7, #28]
 8001f2e:	f003 030c 	and.w	r3, r3, #12
 8001f32:	2b04      	cmp	r3, #4
 8001f34:	d002      	beq.n	8001f3c <HAL_RCC_GetSysClockFreq+0x30>
 8001f36:	2b08      	cmp	r3, #8
 8001f38:	d003      	beq.n	8001f42 <HAL_RCC_GetSysClockFreq+0x36>
 8001f3a:	e03f      	b.n	8001fbc <HAL_RCC_GetSysClockFreq+0xb0>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001f3c:	4b25      	ldr	r3, [pc, #148]	; (8001fd4 <HAL_RCC_GetSysClockFreq+0xc8>)
 8001f3e:	623b      	str	r3, [r7, #32]
      break;
 8001f40:	e03f      	b.n	8001fc2 <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8001f42:	69fb      	ldr	r3, [r7, #28]
 8001f44:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8001f48:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8001f4c:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f4e:	68ba      	ldr	r2, [r7, #8]
 8001f50:	fa92 f2a2 	rbit	r2, r2
 8001f54:	607a      	str	r2, [r7, #4]
  return result;
 8001f56:	687a      	ldr	r2, [r7, #4]
 8001f58:	fab2 f282 	clz	r2, r2
 8001f5c:	b2d2      	uxtb	r2, r2
 8001f5e:	40d3      	lsrs	r3, r2
 8001f60:	4a1d      	ldr	r2, [pc, #116]	; (8001fd8 <HAL_RCC_GetSysClockFreq+0xcc>)
 8001f62:	5cd3      	ldrb	r3, [r2, r3]
 8001f64:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8001f66:	4b1a      	ldr	r3, [pc, #104]	; (8001fd0 <HAL_RCC_GetSysClockFreq+0xc4>)
 8001f68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f6a:	f003 030f 	and.w	r3, r3, #15
 8001f6e:	220f      	movs	r2, #15
 8001f70:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f72:	693a      	ldr	r2, [r7, #16]
 8001f74:	fa92 f2a2 	rbit	r2, r2
 8001f78:	60fa      	str	r2, [r7, #12]
  return result;
 8001f7a:	68fa      	ldr	r2, [r7, #12]
 8001f7c:	fab2 f282 	clz	r2, r2
 8001f80:	b2d2      	uxtb	r2, r2
 8001f82:	40d3      	lsrs	r3, r2
 8001f84:	4a15      	ldr	r2, [pc, #84]	; (8001fdc <HAL_RCC_GetSysClockFreq+0xd0>)
 8001f86:	5cd3      	ldrb	r3, [r2, r3]
 8001f88:	61bb      	str	r3, [r7, #24]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 8001f8a:	69fb      	ldr	r3, [r7, #28]
 8001f8c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d008      	beq.n	8001fa6 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001f94:	4a0f      	ldr	r2, [pc, #60]	; (8001fd4 <HAL_RCC_GetSysClockFreq+0xc8>)
 8001f96:	69bb      	ldr	r3, [r7, #24]
 8001f98:	fbb2 f2f3 	udiv	r2, r2, r3
 8001f9c:	697b      	ldr	r3, [r7, #20]
 8001f9e:	fb02 f303 	mul.w	r3, r2, r3
 8001fa2:	627b      	str	r3, [r7, #36]	; 0x24
 8001fa4:	e007      	b.n	8001fb6 <HAL_RCC_GetSysClockFreq+0xaa>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001fa6:	4a0b      	ldr	r2, [pc, #44]	; (8001fd4 <HAL_RCC_GetSysClockFreq+0xc8>)
 8001fa8:	69bb      	ldr	r3, [r7, #24]
 8001faa:	fbb2 f2f3 	udiv	r2, r2, r3
 8001fae:	697b      	ldr	r3, [r7, #20]
 8001fb0:	fb02 f303 	mul.w	r3, r2, r3
 8001fb4:	627b      	str	r3, [r7, #36]	; 0x24
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8001fb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fb8:	623b      	str	r3, [r7, #32]
      break;
 8001fba:	e002      	b.n	8001fc2 <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001fbc:	4b05      	ldr	r3, [pc, #20]	; (8001fd4 <HAL_RCC_GetSysClockFreq+0xc8>)
 8001fbe:	623b      	str	r3, [r7, #32]
      break;
 8001fc0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001fc2:	6a3b      	ldr	r3, [r7, #32]
}
 8001fc4:	4618      	mov	r0, r3
 8001fc6:	372c      	adds	r7, #44	; 0x2c
 8001fc8:	46bd      	mov	sp, r7
 8001fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fce:	4770      	bx	lr
 8001fd0:	40021000 	.word	0x40021000
 8001fd4:	007a1200 	.word	0x007a1200
 8001fd8:	08005798 	.word	0x08005798
 8001fdc:	080057a8 	.word	0x080057a8

08001fe0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001fe0:	b480      	push	{r7}
 8001fe2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001fe4:	4b03      	ldr	r3, [pc, #12]	; (8001ff4 <HAL_RCC_GetHCLKFreq+0x14>)
 8001fe6:	681b      	ldr	r3, [r3, #0]
}
 8001fe8:	4618      	mov	r0, r3
 8001fea:	46bd      	mov	sp, r7
 8001fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff0:	4770      	bx	lr
 8001ff2:	bf00      	nop
 8001ff4:	20000000 	.word	0x20000000

08001ff8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001ff8:	b580      	push	{r7, lr}
 8001ffa:	b082      	sub	sp, #8
 8001ffc:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8001ffe:	f7ff ffef 	bl	8001fe0 <HAL_RCC_GetHCLKFreq>
 8002002:	4601      	mov	r1, r0
 8002004:	4b0b      	ldr	r3, [pc, #44]	; (8002034 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8002006:	685b      	ldr	r3, [r3, #4]
 8002008:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 800200c:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8002010:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002012:	687a      	ldr	r2, [r7, #4]
 8002014:	fa92 f2a2 	rbit	r2, r2
 8002018:	603a      	str	r2, [r7, #0]
  return result;
 800201a:	683a      	ldr	r2, [r7, #0]
 800201c:	fab2 f282 	clz	r2, r2
 8002020:	b2d2      	uxtb	r2, r2
 8002022:	40d3      	lsrs	r3, r2
 8002024:	4a04      	ldr	r2, [pc, #16]	; (8002038 <HAL_RCC_GetPCLK2Freq+0x40>)
 8002026:	5cd3      	ldrb	r3, [r2, r3]
 8002028:	fa21 f303 	lsr.w	r3, r1, r3
} 
 800202c:	4618      	mov	r0, r3
 800202e:	3708      	adds	r7, #8
 8002030:	46bd      	mov	sp, r7
 8002032:	bd80      	pop	{r7, pc}
 8002034:	40021000 	.word	0x40021000
 8002038:	08005790 	.word	0x08005790

0800203c <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800203c:	b480      	push	{r7}
 800203e:	b083      	sub	sp, #12
 8002040:	af00      	add	r7, sp, #0
 8002042:	6078      	str	r0, [r7, #4]
 8002044:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	220f      	movs	r2, #15
 800204a:	601a      	str	r2, [r3, #0]
  
  /* Get the SYSCLK configuration --------------------------------------------*/ 
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800204c:	4b12      	ldr	r3, [pc, #72]	; (8002098 <HAL_RCC_GetClockConfig+0x5c>)
 800204e:	685b      	ldr	r3, [r3, #4]
 8002050:	f003 0203 	and.w	r2, r3, #3
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	605a      	str	r2, [r3, #4]
  
  /* Get the HCLK configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE); 
 8002058:	4b0f      	ldr	r3, [pc, #60]	; (8002098 <HAL_RCC_GetClockConfig+0x5c>)
 800205a:	685b      	ldr	r3, [r3, #4]
 800205c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	609a      	str	r2, [r3, #8]
  
  /* Get the APB1 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);   
 8002064:	4b0c      	ldr	r3, [pc, #48]	; (8002098 <HAL_RCC_GetClockConfig+0x5c>)
 8002066:	685b      	ldr	r3, [r3, #4]
 8002068:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	60da      	str	r2, [r3, #12]
  
  /* Get the APB2 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8002070:	4b09      	ldr	r3, [pc, #36]	; (8002098 <HAL_RCC_GetClockConfig+0x5c>)
 8002072:	685b      	ldr	r3, [r3, #4]
 8002074:	08db      	lsrs	r3, r3, #3
 8002076:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	611a      	str	r2, [r3, #16]
  
  /* Get the Flash Wait State (Latency) configuration ------------------------*/   
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY); 
 800207e:	4b07      	ldr	r3, [pc, #28]	; (800209c <HAL_RCC_GetClockConfig+0x60>)
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	f003 0207 	and.w	r2, r3, #7
 8002086:	683b      	ldr	r3, [r7, #0]
 8002088:	601a      	str	r2, [r3, #0]
}
 800208a:	bf00      	nop
 800208c:	370c      	adds	r7, #12
 800208e:	46bd      	mov	sp, r7
 8002090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002094:	4770      	bx	lr
 8002096:	bf00      	nop
 8002098:	40021000 	.word	0x40021000
 800209c:	40022000 	.word	0x40022000

080020a0 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80020a0:	b580      	push	{r7, lr}
 80020a2:	b092      	sub	sp, #72	; 0x48
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80020a8:	2300      	movs	r3, #0
 80020aa:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 80020ac:	2300      	movs	r3, #0
 80020ae:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 80020b0:	2300      	movs	r3, #0
 80020b2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80020be:	2b00      	cmp	r3, #0
 80020c0:	f000 80d4 	beq.w	800226c <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80020c4:	4b4e      	ldr	r3, [pc, #312]	; (8002200 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80020c6:	69db      	ldr	r3, [r3, #28]
 80020c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d10e      	bne.n	80020ee <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80020d0:	4b4b      	ldr	r3, [pc, #300]	; (8002200 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80020d2:	69db      	ldr	r3, [r3, #28]
 80020d4:	4a4a      	ldr	r2, [pc, #296]	; (8002200 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80020d6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80020da:	61d3      	str	r3, [r2, #28]
 80020dc:	4b48      	ldr	r3, [pc, #288]	; (8002200 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80020de:	69db      	ldr	r3, [r3, #28]
 80020e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020e4:	60bb      	str	r3, [r7, #8]
 80020e6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80020e8:	2301      	movs	r3, #1
 80020ea:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020ee:	4b45      	ldr	r3, [pc, #276]	; (8002204 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d118      	bne.n	800212c <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80020fa:	4b42      	ldr	r3, [pc, #264]	; (8002204 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	4a41      	ldr	r2, [pc, #260]	; (8002204 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002100:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002104:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002106:	f7fe fc43 	bl	8000990 <HAL_GetTick>
 800210a:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800210c:	e008      	b.n	8002120 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800210e:	f7fe fc3f 	bl	8000990 <HAL_GetTick>
 8002112:	4602      	mov	r2, r0
 8002114:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002116:	1ad3      	subs	r3, r2, r3
 8002118:	2b64      	cmp	r3, #100	; 0x64
 800211a:	d901      	bls.n	8002120 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 800211c:	2303      	movs	r3, #3
 800211e:	e1d6      	b.n	80024ce <HAL_RCCEx_PeriphCLKConfig+0x42e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002120:	4b38      	ldr	r3, [pc, #224]	; (8002204 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002128:	2b00      	cmp	r3, #0
 800212a:	d0f0      	beq.n	800210e <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800212c:	4b34      	ldr	r3, [pc, #208]	; (8002200 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800212e:	6a1b      	ldr	r3, [r3, #32]
 8002130:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002134:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002136:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002138:	2b00      	cmp	r3, #0
 800213a:	f000 8084 	beq.w	8002246 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	685b      	ldr	r3, [r3, #4]
 8002142:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002146:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002148:	429a      	cmp	r2, r3
 800214a:	d07c      	beq.n	8002246 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800214c:	4b2c      	ldr	r3, [pc, #176]	; (8002200 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800214e:	6a1b      	ldr	r3, [r3, #32]
 8002150:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002154:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002156:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800215a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800215c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800215e:	fa93 f3a3 	rbit	r3, r3
 8002162:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002164:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002166:	fab3 f383 	clz	r3, r3
 800216a:	b2db      	uxtb	r3, r3
 800216c:	461a      	mov	r2, r3
 800216e:	4b26      	ldr	r3, [pc, #152]	; (8002208 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002170:	4413      	add	r3, r2
 8002172:	009b      	lsls	r3, r3, #2
 8002174:	461a      	mov	r2, r3
 8002176:	2301      	movs	r3, #1
 8002178:	6013      	str	r3, [r2, #0]
 800217a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800217e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002180:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002182:	fa93 f3a3 	rbit	r3, r3
 8002186:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002188:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 800218a:	fab3 f383 	clz	r3, r3
 800218e:	b2db      	uxtb	r3, r3
 8002190:	461a      	mov	r2, r3
 8002192:	4b1d      	ldr	r3, [pc, #116]	; (8002208 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002194:	4413      	add	r3, r2
 8002196:	009b      	lsls	r3, r3, #2
 8002198:	461a      	mov	r2, r3
 800219a:	2300      	movs	r3, #0
 800219c:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800219e:	4a18      	ldr	r2, [pc, #96]	; (8002200 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80021a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80021a2:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80021a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80021a6:	f003 0301 	and.w	r3, r3, #1
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d04b      	beq.n	8002246 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021ae:	f7fe fbef 	bl	8000990 <HAL_GetTick>
 80021b2:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80021b4:	e00a      	b.n	80021cc <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80021b6:	f7fe fbeb 	bl	8000990 <HAL_GetTick>
 80021ba:	4602      	mov	r2, r0
 80021bc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80021be:	1ad3      	subs	r3, r2, r3
 80021c0:	f241 3288 	movw	r2, #5000	; 0x1388
 80021c4:	4293      	cmp	r3, r2
 80021c6:	d901      	bls.n	80021cc <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 80021c8:	2303      	movs	r3, #3
 80021ca:	e180      	b.n	80024ce <HAL_RCCEx_PeriphCLKConfig+0x42e>
 80021cc:	2302      	movs	r3, #2
 80021ce:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80021d2:	fa93 f3a3 	rbit	r3, r3
 80021d6:	627b      	str	r3, [r7, #36]	; 0x24
 80021d8:	2302      	movs	r3, #2
 80021da:	623b      	str	r3, [r7, #32]
 80021dc:	6a3b      	ldr	r3, [r7, #32]
 80021de:	fa93 f3a3 	rbit	r3, r3
 80021e2:	61fb      	str	r3, [r7, #28]
  return result;
 80021e4:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80021e6:	fab3 f383 	clz	r3, r3
 80021ea:	b2db      	uxtb	r3, r3
 80021ec:	095b      	lsrs	r3, r3, #5
 80021ee:	b2db      	uxtb	r3, r3
 80021f0:	f043 0302 	orr.w	r3, r3, #2
 80021f4:	b2db      	uxtb	r3, r3
 80021f6:	2b02      	cmp	r3, #2
 80021f8:	d108      	bne.n	800220c <HAL_RCCEx_PeriphCLKConfig+0x16c>
 80021fa:	4b01      	ldr	r3, [pc, #4]	; (8002200 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80021fc:	6a1b      	ldr	r3, [r3, #32]
 80021fe:	e00d      	b.n	800221c <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8002200:	40021000 	.word	0x40021000
 8002204:	40007000 	.word	0x40007000
 8002208:	10908100 	.word	0x10908100
 800220c:	2302      	movs	r3, #2
 800220e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002210:	69bb      	ldr	r3, [r7, #24]
 8002212:	fa93 f3a3 	rbit	r3, r3
 8002216:	617b      	str	r3, [r7, #20]
 8002218:	4b9a      	ldr	r3, [pc, #616]	; (8002484 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800221a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800221c:	2202      	movs	r2, #2
 800221e:	613a      	str	r2, [r7, #16]
 8002220:	693a      	ldr	r2, [r7, #16]
 8002222:	fa92 f2a2 	rbit	r2, r2
 8002226:	60fa      	str	r2, [r7, #12]
  return result;
 8002228:	68fa      	ldr	r2, [r7, #12]
 800222a:	fab2 f282 	clz	r2, r2
 800222e:	b2d2      	uxtb	r2, r2
 8002230:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002234:	b2d2      	uxtb	r2, r2
 8002236:	f002 021f 	and.w	r2, r2, #31
 800223a:	2101      	movs	r1, #1
 800223c:	fa01 f202 	lsl.w	r2, r1, r2
 8002240:	4013      	ands	r3, r2
 8002242:	2b00      	cmp	r3, #0
 8002244:	d0b7      	beq.n	80021b6 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8002246:	4b8f      	ldr	r3, [pc, #572]	; (8002484 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002248:	6a1b      	ldr	r3, [r3, #32]
 800224a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	685b      	ldr	r3, [r3, #4]
 8002252:	498c      	ldr	r1, [pc, #560]	; (8002484 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002254:	4313      	orrs	r3, r2
 8002256:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002258:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800225c:	2b01      	cmp	r3, #1
 800225e:	d105      	bne.n	800226c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002260:	4b88      	ldr	r3, [pc, #544]	; (8002484 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002262:	69db      	ldr	r3, [r3, #28]
 8002264:	4a87      	ldr	r2, [pc, #540]	; (8002484 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002266:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800226a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	f003 0301 	and.w	r3, r3, #1
 8002274:	2b00      	cmp	r3, #0
 8002276:	d008      	beq.n	800228a <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002278:	4b82      	ldr	r3, [pc, #520]	; (8002484 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800227a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800227c:	f023 0203 	bic.w	r2, r3, #3
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	689b      	ldr	r3, [r3, #8]
 8002284:	497f      	ldr	r1, [pc, #508]	; (8002484 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002286:	4313      	orrs	r3, r2
 8002288:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	f003 0302 	and.w	r3, r3, #2
 8002292:	2b00      	cmp	r3, #0
 8002294:	d008      	beq.n	80022a8 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002296:	4b7b      	ldr	r3, [pc, #492]	; (8002484 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002298:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800229a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	68db      	ldr	r3, [r3, #12]
 80022a2:	4978      	ldr	r1, [pc, #480]	; (8002484 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80022a4:	4313      	orrs	r3, r2
 80022a6:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	f003 0304 	and.w	r3, r3, #4
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d008      	beq.n	80022c6 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80022b4:	4b73      	ldr	r3, [pc, #460]	; (8002484 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80022b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022b8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	691b      	ldr	r3, [r3, #16]
 80022c0:	4970      	ldr	r1, [pc, #448]	; (8002484 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80022c2:	4313      	orrs	r3, r2
 80022c4:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	f003 0320 	and.w	r3, r3, #32
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d008      	beq.n	80022e4 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80022d2:	4b6c      	ldr	r3, [pc, #432]	; (8002484 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80022d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022d6:	f023 0210 	bic.w	r2, r3, #16
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	69db      	ldr	r3, [r3, #28]
 80022de:	4969      	ldr	r1, [pc, #420]	; (8002484 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80022e0:	4313      	orrs	r3, r2
 80022e2:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d008      	beq.n	8002302 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 80022f0:	4b64      	ldr	r3, [pc, #400]	; (8002484 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80022f2:	685b      	ldr	r3, [r3, #4]
 80022f4:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022fc:	4961      	ldr	r1, [pc, #388]	; (8002484 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80022fe:	4313      	orrs	r3, r2
 8002300:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800230a:	2b00      	cmp	r3, #0
 800230c:	d008      	beq.n	8002320 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800230e:	4b5d      	ldr	r3, [pc, #372]	; (8002484 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002310:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002312:	f023 0220 	bic.w	r2, r3, #32
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	6a1b      	ldr	r3, [r3, #32]
 800231a:	495a      	ldr	r1, [pc, #360]	; (8002484 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800231c:	4313      	orrs	r3, r2
 800231e:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002328:	2b00      	cmp	r3, #0
 800232a:	d008      	beq.n	800233e <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800232c:	4b55      	ldr	r3, [pc, #340]	; (8002484 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800232e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002330:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002338:	4952      	ldr	r1, [pc, #328]	; (8002484 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800233a:	4313      	orrs	r3, r2
 800233c:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	f003 0308 	and.w	r3, r3, #8
 8002346:	2b00      	cmp	r3, #0
 8002348:	d008      	beq.n	800235c <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800234a:	4b4e      	ldr	r3, [pc, #312]	; (8002484 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800234c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800234e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	695b      	ldr	r3, [r3, #20]
 8002356:	494b      	ldr	r1, [pc, #300]	; (8002484 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002358:	4313      	orrs	r3, r2
 800235a:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	f003 0310 	and.w	r3, r3, #16
 8002364:	2b00      	cmp	r3, #0
 8002366:	d008      	beq.n	800237a <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002368:	4b46      	ldr	r3, [pc, #280]	; (8002484 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800236a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800236c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	699b      	ldr	r3, [r3, #24]
 8002374:	4943      	ldr	r1, [pc, #268]	; (8002484 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002376:	4313      	orrs	r3, r2
 8002378:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002382:	2b00      	cmp	r3, #0
 8002384:	d008      	beq.n	8002398 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002386:	4b3f      	ldr	r3, [pc, #252]	; (8002484 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002388:	685b      	ldr	r3, [r3, #4]
 800238a:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002392:	493c      	ldr	r1, [pc, #240]	; (8002484 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002394:	4313      	orrs	r3, r2
 8002396:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d008      	beq.n	80023b6 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80023a4:	4b37      	ldr	r3, [pc, #220]	; (8002484 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80023a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023a8:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023b0:	4934      	ldr	r1, [pc, #208]	; (8002484 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80023b2:	4313      	orrs	r3, r2
 80023b4:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d008      	beq.n	80023d4 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 80023c2:	4b30      	ldr	r3, [pc, #192]	; (8002484 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80023c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023c6:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023ce:	492d      	ldr	r1, [pc, #180]	; (8002484 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80023d0:	4313      	orrs	r3, r2
 80023d2:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d008      	beq.n	80023f2 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80023e0:	4b28      	ldr	r3, [pc, #160]	; (8002484 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80023e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023e4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80023ec:	4925      	ldr	r1, [pc, #148]	; (8002484 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80023ee:	4313      	orrs	r3, r2
 80023f0:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d008      	beq.n	8002410 <HAL_RCCEx_PeriphCLKConfig+0x370>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 80023fe:	4b21      	ldr	r3, [pc, #132]	; (8002484 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002400:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002402:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800240a:	491e      	ldr	r1, [pc, #120]	; (8002484 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800240c:	4313      	orrs	r3, r2
 800240e:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002418:	2b00      	cmp	r3, #0
 800241a:	d008      	beq.n	800242e <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 800241c:	4b19      	ldr	r3, [pc, #100]	; (8002484 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800241e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002420:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002428:	4916      	ldr	r1, [pc, #88]	; (8002484 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800242a:	4313      	orrs	r3, r2
 800242c:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002436:	2b00      	cmp	r3, #0
 8002438:	d008      	beq.n	800244c <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 800243a:	4b12      	ldr	r3, [pc, #72]	; (8002484 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800243c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800243e:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002446:	490f      	ldr	r1, [pc, #60]	; (8002484 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002448:	4313      	orrs	r3, r2
 800244a:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002454:	2b00      	cmp	r3, #0
 8002456:	d008      	beq.n	800246a <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8002458:	4b0a      	ldr	r3, [pc, #40]	; (8002484 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800245a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800245c:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002464:	4907      	ldr	r1, [pc, #28]	; (8002484 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002466:	4313      	orrs	r3, r2
 8002468:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002472:	2b00      	cmp	r3, #0
 8002474:	d00c      	beq.n	8002490 <HAL_RCCEx_PeriphCLKConfig+0x3f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 8002476:	4b03      	ldr	r3, [pc, #12]	; (8002484 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002478:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800247a:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	e002      	b.n	8002488 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 8002482:	bf00      	nop
 8002484:	40021000 	.word	0x40021000
 8002488:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800248a:	4913      	ldr	r1, [pc, #76]	; (80024d8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800248c:	4313      	orrs	r3, r2
 800248e:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002498:	2b00      	cmp	r3, #0
 800249a:	d008      	beq.n	80024ae <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 800249c:	4b0e      	ldr	r3, [pc, #56]	; (80024d8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800249e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024a0:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024a8:	490b      	ldr	r1, [pc, #44]	; (80024d8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80024aa:	4313      	orrs	r3, r2
 80024ac:	630b      	str	r3, [r1, #48]	; 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d008      	beq.n	80024cc <HAL_RCCEx_PeriphCLKConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 80024ba:	4b07      	ldr	r3, [pc, #28]	; (80024d8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80024bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024be:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80024c6:	4904      	ldr	r1, [pc, #16]	; (80024d8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80024c8:	4313      	orrs	r3, r2
 80024ca:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 80024cc:	2300      	movs	r3, #0
}
 80024ce:	4618      	mov	r0, r3
 80024d0:	3748      	adds	r7, #72	; 0x48
 80024d2:	46bd      	mov	sp, r7
 80024d4:	bd80      	pop	{r7, pc}
 80024d6:	bf00      	nop
 80024d8:	40021000 	.word	0x40021000

080024dc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80024dc:	b580      	push	{r7, lr}
 80024de:	b082      	sub	sp, #8
 80024e0:	af00      	add	r7, sp, #0
 80024e2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d101      	bne.n	80024ee <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80024ea:	2301      	movs	r3, #1
 80024ec:	e049      	b.n	8002582 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80024f4:	b2db      	uxtb	r3, r3
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d106      	bne.n	8002508 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	2200      	movs	r2, #0
 80024fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002502:	6878      	ldr	r0, [r7, #4]
 8002504:	f000 f841 	bl	800258a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	2202      	movs	r2, #2
 800250c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681a      	ldr	r2, [r3, #0]
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	3304      	adds	r3, #4
 8002518:	4619      	mov	r1, r3
 800251a:	4610      	mov	r0, r2
 800251c:	f000 f9f8 	bl	8002910 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	2201      	movs	r2, #1
 8002524:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	2201      	movs	r2, #1
 800252c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	2201      	movs	r2, #1
 8002534:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	2201      	movs	r2, #1
 800253c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	2201      	movs	r2, #1
 8002544:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	2201      	movs	r2, #1
 800254c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	2201      	movs	r2, #1
 8002554:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	2201      	movs	r2, #1
 800255c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	2201      	movs	r2, #1
 8002564:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	2201      	movs	r2, #1
 800256c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	2201      	movs	r2, #1
 8002574:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	2201      	movs	r2, #1
 800257c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002580:	2300      	movs	r3, #0
}
 8002582:	4618      	mov	r0, r3
 8002584:	3708      	adds	r7, #8
 8002586:	46bd      	mov	sp, r7
 8002588:	bd80      	pop	{r7, pc}

0800258a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800258a:	b480      	push	{r7}
 800258c:	b083      	sub	sp, #12
 800258e:	af00      	add	r7, sp, #0
 8002590:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8002592:	bf00      	nop
 8002594:	370c      	adds	r7, #12
 8002596:	46bd      	mov	sp, r7
 8002598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800259c:	4770      	bx	lr
	...

080025a0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80025a0:	b480      	push	{r7}
 80025a2:	b085      	sub	sp, #20
 80025a4:	af00      	add	r7, sp, #0
 80025a6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80025ae:	b2db      	uxtb	r3, r3
 80025b0:	2b01      	cmp	r3, #1
 80025b2:	d001      	beq.n	80025b8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80025b4:	2301      	movs	r3, #1
 80025b6:	e04f      	b.n	8002658 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	2202      	movs	r2, #2
 80025bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	68da      	ldr	r2, [r3, #12]
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	f042 0201 	orr.w	r2, r2, #1
 80025ce:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	4a23      	ldr	r2, [pc, #140]	; (8002664 <HAL_TIM_Base_Start_IT+0xc4>)
 80025d6:	4293      	cmp	r3, r2
 80025d8:	d01d      	beq.n	8002616 <HAL_TIM_Base_Start_IT+0x76>
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80025e2:	d018      	beq.n	8002616 <HAL_TIM_Base_Start_IT+0x76>
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	4a1f      	ldr	r2, [pc, #124]	; (8002668 <HAL_TIM_Base_Start_IT+0xc8>)
 80025ea:	4293      	cmp	r3, r2
 80025ec:	d013      	beq.n	8002616 <HAL_TIM_Base_Start_IT+0x76>
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	4a1e      	ldr	r2, [pc, #120]	; (800266c <HAL_TIM_Base_Start_IT+0xcc>)
 80025f4:	4293      	cmp	r3, r2
 80025f6:	d00e      	beq.n	8002616 <HAL_TIM_Base_Start_IT+0x76>
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	4a1c      	ldr	r2, [pc, #112]	; (8002670 <HAL_TIM_Base_Start_IT+0xd0>)
 80025fe:	4293      	cmp	r3, r2
 8002600:	d009      	beq.n	8002616 <HAL_TIM_Base_Start_IT+0x76>
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	4a1b      	ldr	r2, [pc, #108]	; (8002674 <HAL_TIM_Base_Start_IT+0xd4>)
 8002608:	4293      	cmp	r3, r2
 800260a:	d004      	beq.n	8002616 <HAL_TIM_Base_Start_IT+0x76>
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	4a19      	ldr	r2, [pc, #100]	; (8002678 <HAL_TIM_Base_Start_IT+0xd8>)
 8002612:	4293      	cmp	r3, r2
 8002614:	d115      	bne.n	8002642 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	689a      	ldr	r2, [r3, #8]
 800261c:	4b17      	ldr	r3, [pc, #92]	; (800267c <HAL_TIM_Base_Start_IT+0xdc>)
 800261e:	4013      	ands	r3, r2
 8002620:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	2b06      	cmp	r3, #6
 8002626:	d015      	beq.n	8002654 <HAL_TIM_Base_Start_IT+0xb4>
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800262e:	d011      	beq.n	8002654 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	681a      	ldr	r2, [r3, #0]
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	f042 0201 	orr.w	r2, r2, #1
 800263e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002640:	e008      	b.n	8002654 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	681a      	ldr	r2, [r3, #0]
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	f042 0201 	orr.w	r2, r2, #1
 8002650:	601a      	str	r2, [r3, #0]
 8002652:	e000      	b.n	8002656 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002654:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002656:	2300      	movs	r3, #0
}
 8002658:	4618      	mov	r0, r3
 800265a:	3714      	adds	r7, #20
 800265c:	46bd      	mov	sp, r7
 800265e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002662:	4770      	bx	lr
 8002664:	40012c00 	.word	0x40012c00
 8002668:	40000400 	.word	0x40000400
 800266c:	40000800 	.word	0x40000800
 8002670:	40013400 	.word	0x40013400
 8002674:	40014000 	.word	0x40014000
 8002678:	40015000 	.word	0x40015000
 800267c:	00010007 	.word	0x00010007

08002680 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002680:	b580      	push	{r7, lr}
 8002682:	b082      	sub	sp, #8
 8002684:	af00      	add	r7, sp, #0
 8002686:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	691b      	ldr	r3, [r3, #16]
 800268e:	f003 0302 	and.w	r3, r3, #2
 8002692:	2b02      	cmp	r3, #2
 8002694:	d122      	bne.n	80026dc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	68db      	ldr	r3, [r3, #12]
 800269c:	f003 0302 	and.w	r3, r3, #2
 80026a0:	2b02      	cmp	r3, #2
 80026a2:	d11b      	bne.n	80026dc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	f06f 0202 	mvn.w	r2, #2
 80026ac:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	2201      	movs	r2, #1
 80026b2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	699b      	ldr	r3, [r3, #24]
 80026ba:	f003 0303 	and.w	r3, r3, #3
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d003      	beq.n	80026ca <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80026c2:	6878      	ldr	r0, [r7, #4]
 80026c4:	f000 f905 	bl	80028d2 <HAL_TIM_IC_CaptureCallback>
 80026c8:	e005      	b.n	80026d6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80026ca:	6878      	ldr	r0, [r7, #4]
 80026cc:	f000 f8f7 	bl	80028be <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80026d0:	6878      	ldr	r0, [r7, #4]
 80026d2:	f000 f908 	bl	80028e6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	2200      	movs	r2, #0
 80026da:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	691b      	ldr	r3, [r3, #16]
 80026e2:	f003 0304 	and.w	r3, r3, #4
 80026e6:	2b04      	cmp	r3, #4
 80026e8:	d122      	bne.n	8002730 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	68db      	ldr	r3, [r3, #12]
 80026f0:	f003 0304 	and.w	r3, r3, #4
 80026f4:	2b04      	cmp	r3, #4
 80026f6:	d11b      	bne.n	8002730 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	f06f 0204 	mvn.w	r2, #4
 8002700:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	2202      	movs	r2, #2
 8002706:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	699b      	ldr	r3, [r3, #24]
 800270e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002712:	2b00      	cmp	r3, #0
 8002714:	d003      	beq.n	800271e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002716:	6878      	ldr	r0, [r7, #4]
 8002718:	f000 f8db 	bl	80028d2 <HAL_TIM_IC_CaptureCallback>
 800271c:	e005      	b.n	800272a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800271e:	6878      	ldr	r0, [r7, #4]
 8002720:	f000 f8cd 	bl	80028be <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002724:	6878      	ldr	r0, [r7, #4]
 8002726:	f000 f8de 	bl	80028e6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	2200      	movs	r2, #0
 800272e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	691b      	ldr	r3, [r3, #16]
 8002736:	f003 0308 	and.w	r3, r3, #8
 800273a:	2b08      	cmp	r3, #8
 800273c:	d122      	bne.n	8002784 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	68db      	ldr	r3, [r3, #12]
 8002744:	f003 0308 	and.w	r3, r3, #8
 8002748:	2b08      	cmp	r3, #8
 800274a:	d11b      	bne.n	8002784 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	f06f 0208 	mvn.w	r2, #8
 8002754:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	2204      	movs	r2, #4
 800275a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	69db      	ldr	r3, [r3, #28]
 8002762:	f003 0303 	and.w	r3, r3, #3
 8002766:	2b00      	cmp	r3, #0
 8002768:	d003      	beq.n	8002772 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800276a:	6878      	ldr	r0, [r7, #4]
 800276c:	f000 f8b1 	bl	80028d2 <HAL_TIM_IC_CaptureCallback>
 8002770:	e005      	b.n	800277e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002772:	6878      	ldr	r0, [r7, #4]
 8002774:	f000 f8a3 	bl	80028be <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002778:	6878      	ldr	r0, [r7, #4]
 800277a:	f000 f8b4 	bl	80028e6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	2200      	movs	r2, #0
 8002782:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	691b      	ldr	r3, [r3, #16]
 800278a:	f003 0310 	and.w	r3, r3, #16
 800278e:	2b10      	cmp	r3, #16
 8002790:	d122      	bne.n	80027d8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	68db      	ldr	r3, [r3, #12]
 8002798:	f003 0310 	and.w	r3, r3, #16
 800279c:	2b10      	cmp	r3, #16
 800279e:	d11b      	bne.n	80027d8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	f06f 0210 	mvn.w	r2, #16
 80027a8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	2208      	movs	r2, #8
 80027ae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	69db      	ldr	r3, [r3, #28]
 80027b6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d003      	beq.n	80027c6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80027be:	6878      	ldr	r0, [r7, #4]
 80027c0:	f000 f887 	bl	80028d2 <HAL_TIM_IC_CaptureCallback>
 80027c4:	e005      	b.n	80027d2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80027c6:	6878      	ldr	r0, [r7, #4]
 80027c8:	f000 f879 	bl	80028be <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80027cc:	6878      	ldr	r0, [r7, #4]
 80027ce:	f000 f88a 	bl	80028e6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	2200      	movs	r2, #0
 80027d6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	691b      	ldr	r3, [r3, #16]
 80027de:	f003 0301 	and.w	r3, r3, #1
 80027e2:	2b01      	cmp	r3, #1
 80027e4:	d10e      	bne.n	8002804 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	68db      	ldr	r3, [r3, #12]
 80027ec:	f003 0301 	and.w	r3, r3, #1
 80027f0:	2b01      	cmp	r3, #1
 80027f2:	d107      	bne.n	8002804 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	f06f 0201 	mvn.w	r2, #1
 80027fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80027fe:	6878      	ldr	r0, [r7, #4]
 8002800:	f7fd ff96 	bl	8000730 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	691b      	ldr	r3, [r3, #16]
 800280a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800280e:	2b80      	cmp	r3, #128	; 0x80
 8002810:	d10e      	bne.n	8002830 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	68db      	ldr	r3, [r3, #12]
 8002818:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800281c:	2b80      	cmp	r3, #128	; 0x80
 800281e:	d107      	bne.n	8002830 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002828:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800282a:	6878      	ldr	r0, [r7, #4]
 800282c:	f000 f918 	bl	8002a60 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	691b      	ldr	r3, [r3, #16]
 8002836:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800283a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800283e:	d10e      	bne.n	800285e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	68db      	ldr	r3, [r3, #12]
 8002846:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800284a:	2b80      	cmp	r3, #128	; 0x80
 800284c:	d107      	bne.n	800285e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8002856:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8002858:	6878      	ldr	r0, [r7, #4]
 800285a:	f000 f90b 	bl	8002a74 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	691b      	ldr	r3, [r3, #16]
 8002864:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002868:	2b40      	cmp	r3, #64	; 0x40
 800286a:	d10e      	bne.n	800288a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	68db      	ldr	r3, [r3, #12]
 8002872:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002876:	2b40      	cmp	r3, #64	; 0x40
 8002878:	d107      	bne.n	800288a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002882:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002884:	6878      	ldr	r0, [r7, #4]
 8002886:	f000 f838 	bl	80028fa <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	691b      	ldr	r3, [r3, #16]
 8002890:	f003 0320 	and.w	r3, r3, #32
 8002894:	2b20      	cmp	r3, #32
 8002896:	d10e      	bne.n	80028b6 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	68db      	ldr	r3, [r3, #12]
 800289e:	f003 0320 	and.w	r3, r3, #32
 80028a2:	2b20      	cmp	r3, #32
 80028a4:	d107      	bne.n	80028b6 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	f06f 0220 	mvn.w	r2, #32
 80028ae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80028b0:	6878      	ldr	r0, [r7, #4]
 80028b2:	f000 f8cb 	bl	8002a4c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80028b6:	bf00      	nop
 80028b8:	3708      	adds	r7, #8
 80028ba:	46bd      	mov	sp, r7
 80028bc:	bd80      	pop	{r7, pc}

080028be <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80028be:	b480      	push	{r7}
 80028c0:	b083      	sub	sp, #12
 80028c2:	af00      	add	r7, sp, #0
 80028c4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80028c6:	bf00      	nop
 80028c8:	370c      	adds	r7, #12
 80028ca:	46bd      	mov	sp, r7
 80028cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d0:	4770      	bx	lr

080028d2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80028d2:	b480      	push	{r7}
 80028d4:	b083      	sub	sp, #12
 80028d6:	af00      	add	r7, sp, #0
 80028d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80028da:	bf00      	nop
 80028dc:	370c      	adds	r7, #12
 80028de:	46bd      	mov	sp, r7
 80028e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e4:	4770      	bx	lr

080028e6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80028e6:	b480      	push	{r7}
 80028e8:	b083      	sub	sp, #12
 80028ea:	af00      	add	r7, sp, #0
 80028ec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80028ee:	bf00      	nop
 80028f0:	370c      	adds	r7, #12
 80028f2:	46bd      	mov	sp, r7
 80028f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f8:	4770      	bx	lr

080028fa <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80028fa:	b480      	push	{r7}
 80028fc:	b083      	sub	sp, #12
 80028fe:	af00      	add	r7, sp, #0
 8002900:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002902:	bf00      	nop
 8002904:	370c      	adds	r7, #12
 8002906:	46bd      	mov	sp, r7
 8002908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800290c:	4770      	bx	lr
	...

08002910 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002910:	b480      	push	{r7}
 8002912:	b085      	sub	sp, #20
 8002914:	af00      	add	r7, sp, #0
 8002916:	6078      	str	r0, [r7, #4]
 8002918:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	4a42      	ldr	r2, [pc, #264]	; (8002a2c <TIM_Base_SetConfig+0x11c>)
 8002924:	4293      	cmp	r3, r2
 8002926:	d013      	beq.n	8002950 <TIM_Base_SetConfig+0x40>
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800292e:	d00f      	beq.n	8002950 <TIM_Base_SetConfig+0x40>
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	4a3f      	ldr	r2, [pc, #252]	; (8002a30 <TIM_Base_SetConfig+0x120>)
 8002934:	4293      	cmp	r3, r2
 8002936:	d00b      	beq.n	8002950 <TIM_Base_SetConfig+0x40>
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	4a3e      	ldr	r2, [pc, #248]	; (8002a34 <TIM_Base_SetConfig+0x124>)
 800293c:	4293      	cmp	r3, r2
 800293e:	d007      	beq.n	8002950 <TIM_Base_SetConfig+0x40>
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	4a3d      	ldr	r2, [pc, #244]	; (8002a38 <TIM_Base_SetConfig+0x128>)
 8002944:	4293      	cmp	r3, r2
 8002946:	d003      	beq.n	8002950 <TIM_Base_SetConfig+0x40>
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	4a3c      	ldr	r2, [pc, #240]	; (8002a3c <TIM_Base_SetConfig+0x12c>)
 800294c:	4293      	cmp	r3, r2
 800294e:	d108      	bne.n	8002962 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002956:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002958:	683b      	ldr	r3, [r7, #0]
 800295a:	685b      	ldr	r3, [r3, #4]
 800295c:	68fa      	ldr	r2, [r7, #12]
 800295e:	4313      	orrs	r3, r2
 8002960:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	4a31      	ldr	r2, [pc, #196]	; (8002a2c <TIM_Base_SetConfig+0x11c>)
 8002966:	4293      	cmp	r3, r2
 8002968:	d01f      	beq.n	80029aa <TIM_Base_SetConfig+0x9a>
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002970:	d01b      	beq.n	80029aa <TIM_Base_SetConfig+0x9a>
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	4a2e      	ldr	r2, [pc, #184]	; (8002a30 <TIM_Base_SetConfig+0x120>)
 8002976:	4293      	cmp	r3, r2
 8002978:	d017      	beq.n	80029aa <TIM_Base_SetConfig+0x9a>
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	4a2d      	ldr	r2, [pc, #180]	; (8002a34 <TIM_Base_SetConfig+0x124>)
 800297e:	4293      	cmp	r3, r2
 8002980:	d013      	beq.n	80029aa <TIM_Base_SetConfig+0x9a>
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	4a2c      	ldr	r2, [pc, #176]	; (8002a38 <TIM_Base_SetConfig+0x128>)
 8002986:	4293      	cmp	r3, r2
 8002988:	d00f      	beq.n	80029aa <TIM_Base_SetConfig+0x9a>
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	4a2c      	ldr	r2, [pc, #176]	; (8002a40 <TIM_Base_SetConfig+0x130>)
 800298e:	4293      	cmp	r3, r2
 8002990:	d00b      	beq.n	80029aa <TIM_Base_SetConfig+0x9a>
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	4a2b      	ldr	r2, [pc, #172]	; (8002a44 <TIM_Base_SetConfig+0x134>)
 8002996:	4293      	cmp	r3, r2
 8002998:	d007      	beq.n	80029aa <TIM_Base_SetConfig+0x9a>
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	4a2a      	ldr	r2, [pc, #168]	; (8002a48 <TIM_Base_SetConfig+0x138>)
 800299e:	4293      	cmp	r3, r2
 80029a0:	d003      	beq.n	80029aa <TIM_Base_SetConfig+0x9a>
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	4a25      	ldr	r2, [pc, #148]	; (8002a3c <TIM_Base_SetConfig+0x12c>)
 80029a6:	4293      	cmp	r3, r2
 80029a8:	d108      	bne.n	80029bc <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80029b0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80029b2:	683b      	ldr	r3, [r7, #0]
 80029b4:	68db      	ldr	r3, [r3, #12]
 80029b6:	68fa      	ldr	r2, [r7, #12]
 80029b8:	4313      	orrs	r3, r2
 80029ba:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80029c2:	683b      	ldr	r3, [r7, #0]
 80029c4:	695b      	ldr	r3, [r3, #20]
 80029c6:	4313      	orrs	r3, r2
 80029c8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	68fa      	ldr	r2, [r7, #12]
 80029ce:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80029d0:	683b      	ldr	r3, [r7, #0]
 80029d2:	689a      	ldr	r2, [r3, #8]
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80029d8:	683b      	ldr	r3, [r7, #0]
 80029da:	681a      	ldr	r2, [r3, #0]
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	4a12      	ldr	r2, [pc, #72]	; (8002a2c <TIM_Base_SetConfig+0x11c>)
 80029e4:	4293      	cmp	r3, r2
 80029e6:	d013      	beq.n	8002a10 <TIM_Base_SetConfig+0x100>
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	4a13      	ldr	r2, [pc, #76]	; (8002a38 <TIM_Base_SetConfig+0x128>)
 80029ec:	4293      	cmp	r3, r2
 80029ee:	d00f      	beq.n	8002a10 <TIM_Base_SetConfig+0x100>
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	4a13      	ldr	r2, [pc, #76]	; (8002a40 <TIM_Base_SetConfig+0x130>)
 80029f4:	4293      	cmp	r3, r2
 80029f6:	d00b      	beq.n	8002a10 <TIM_Base_SetConfig+0x100>
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	4a12      	ldr	r2, [pc, #72]	; (8002a44 <TIM_Base_SetConfig+0x134>)
 80029fc:	4293      	cmp	r3, r2
 80029fe:	d007      	beq.n	8002a10 <TIM_Base_SetConfig+0x100>
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	4a11      	ldr	r2, [pc, #68]	; (8002a48 <TIM_Base_SetConfig+0x138>)
 8002a04:	4293      	cmp	r3, r2
 8002a06:	d003      	beq.n	8002a10 <TIM_Base_SetConfig+0x100>
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	4a0c      	ldr	r2, [pc, #48]	; (8002a3c <TIM_Base_SetConfig+0x12c>)
 8002a0c:	4293      	cmp	r3, r2
 8002a0e:	d103      	bne.n	8002a18 <TIM_Base_SetConfig+0x108>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002a10:	683b      	ldr	r3, [r7, #0]
 8002a12:	691a      	ldr	r2, [r3, #16]
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	2201      	movs	r2, #1
 8002a1c:	615a      	str	r2, [r3, #20]
}
 8002a1e:	bf00      	nop
 8002a20:	3714      	adds	r7, #20
 8002a22:	46bd      	mov	sp, r7
 8002a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a28:	4770      	bx	lr
 8002a2a:	bf00      	nop
 8002a2c:	40012c00 	.word	0x40012c00
 8002a30:	40000400 	.word	0x40000400
 8002a34:	40000800 	.word	0x40000800
 8002a38:	40013400 	.word	0x40013400
 8002a3c:	40015000 	.word	0x40015000
 8002a40:	40014000 	.word	0x40014000
 8002a44:	40014400 	.word	0x40014400
 8002a48:	40014800 	.word	0x40014800

08002a4c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002a4c:	b480      	push	{r7}
 8002a4e:	b083      	sub	sp, #12
 8002a50:	af00      	add	r7, sp, #0
 8002a52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002a54:	bf00      	nop
 8002a56:	370c      	adds	r7, #12
 8002a58:	46bd      	mov	sp, r7
 8002a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a5e:	4770      	bx	lr

08002a60 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002a60:	b480      	push	{r7}
 8002a62:	b083      	sub	sp, #12
 8002a64:	af00      	add	r7, sp, #0
 8002a66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002a68:	bf00      	nop
 8002a6a:	370c      	adds	r7, #12
 8002a6c:	46bd      	mov	sp, r7
 8002a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a72:	4770      	bx	lr

08002a74 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8002a74:	b480      	push	{r7}
 8002a76:	b083      	sub	sp, #12
 8002a78:	af00      	add	r7, sp, #0
 8002a7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8002a7c:	bf00      	nop
 8002a7e:	370c      	adds	r7, #12
 8002a80:	46bd      	mov	sp, r7
 8002a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a86:	4770      	bx	lr

08002a88 <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8002a88:	b480      	push	{r7}
 8002a8a:	b085      	sub	sp, #20
 8002a8c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002a8e:	f3ef 8305 	mrs	r3, IPSR
 8002a92:	60bb      	str	r3, [r7, #8]
  return(result);
 8002a94:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d10f      	bne.n	8002aba <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002a9a:	f3ef 8310 	mrs	r3, PRIMASK
 8002a9e:	607b      	str	r3, [r7, #4]
  return(result);
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d109      	bne.n	8002aba <osKernelInitialize+0x32>
 8002aa6:	4b11      	ldr	r3, [pc, #68]	; (8002aec <osKernelInitialize+0x64>)
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	2b02      	cmp	r3, #2
 8002aac:	d109      	bne.n	8002ac2 <osKernelInitialize+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8002aae:	f3ef 8311 	mrs	r3, BASEPRI
 8002ab2:	603b      	str	r3, [r7, #0]
  return(result);
 8002ab4:	683b      	ldr	r3, [r7, #0]
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d003      	beq.n	8002ac2 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8002aba:	f06f 0305 	mvn.w	r3, #5
 8002abe:	60fb      	str	r3, [r7, #12]
 8002ac0:	e00c      	b.n	8002adc <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8002ac2:	4b0a      	ldr	r3, [pc, #40]	; (8002aec <osKernelInitialize+0x64>)
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d105      	bne.n	8002ad6 <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 8002aca:	4b08      	ldr	r3, [pc, #32]	; (8002aec <osKernelInitialize+0x64>)
 8002acc:	2201      	movs	r2, #1
 8002ace:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8002ad0:	2300      	movs	r3, #0
 8002ad2:	60fb      	str	r3, [r7, #12]
 8002ad4:	e002      	b.n	8002adc <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8002ad6:	f04f 33ff 	mov.w	r3, #4294967295
 8002ada:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8002adc:	68fb      	ldr	r3, [r7, #12]
}
 8002ade:	4618      	mov	r0, r3
 8002ae0:	3714      	adds	r7, #20
 8002ae2:	46bd      	mov	sp, r7
 8002ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae8:	4770      	bx	lr
 8002aea:	bf00      	nop
 8002aec:	2000014c 	.word	0x2000014c

08002af0 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8002af0:	b580      	push	{r7, lr}
 8002af2:	b084      	sub	sp, #16
 8002af4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002af6:	f3ef 8305 	mrs	r3, IPSR
 8002afa:	60bb      	str	r3, [r7, #8]
  return(result);
 8002afc:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d10f      	bne.n	8002b22 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002b02:	f3ef 8310 	mrs	r3, PRIMASK
 8002b06:	607b      	str	r3, [r7, #4]
  return(result);
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d109      	bne.n	8002b22 <osKernelStart+0x32>
 8002b0e:	4b11      	ldr	r3, [pc, #68]	; (8002b54 <osKernelStart+0x64>)
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	2b02      	cmp	r3, #2
 8002b14:	d109      	bne.n	8002b2a <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8002b16:	f3ef 8311 	mrs	r3, BASEPRI
 8002b1a:	603b      	str	r3, [r7, #0]
  return(result);
 8002b1c:	683b      	ldr	r3, [r7, #0]
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d003      	beq.n	8002b2a <osKernelStart+0x3a>
    stat = osErrorISR;
 8002b22:	f06f 0305 	mvn.w	r3, #5
 8002b26:	60fb      	str	r3, [r7, #12]
 8002b28:	e00e      	b.n	8002b48 <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 8002b2a:	4b0a      	ldr	r3, [pc, #40]	; (8002b54 <osKernelStart+0x64>)
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	2b01      	cmp	r3, #1
 8002b30:	d107      	bne.n	8002b42 <osKernelStart+0x52>
      KernelState = osKernelRunning;
 8002b32:	4b08      	ldr	r3, [pc, #32]	; (8002b54 <osKernelStart+0x64>)
 8002b34:	2202      	movs	r2, #2
 8002b36:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 8002b38:	f000 ffca 	bl	8003ad0 <vTaskStartScheduler>
      stat = osOK;
 8002b3c:	2300      	movs	r3, #0
 8002b3e:	60fb      	str	r3, [r7, #12]
 8002b40:	e002      	b.n	8002b48 <osKernelStart+0x58>
    } else {
      stat = osError;
 8002b42:	f04f 33ff 	mov.w	r3, #4294967295
 8002b46:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8002b48:	68fb      	ldr	r3, [r7, #12]
}
 8002b4a:	4618      	mov	r0, r3
 8002b4c:	3710      	adds	r7, #16
 8002b4e:	46bd      	mov	sp, r7
 8002b50:	bd80      	pop	{r7, pc}
 8002b52:	bf00      	nop
 8002b54:	2000014c 	.word	0x2000014c

08002b58 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8002b58:	b480      	push	{r7}
 8002b5a:	b085      	sub	sp, #20
 8002b5c:	af00      	add	r7, sp, #0
 8002b5e:	60f8      	str	r0, [r7, #12]
 8002b60:	60b9      	str	r1, [r7, #8]
 8002b62:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	4a07      	ldr	r2, [pc, #28]	; (8002b84 <vApplicationGetIdleTaskMemory+0x2c>)
 8002b68:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8002b6a:	68bb      	ldr	r3, [r7, #8]
 8002b6c:	4a06      	ldr	r2, [pc, #24]	; (8002b88 <vApplicationGetIdleTaskMemory+0x30>)
 8002b6e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	2280      	movs	r2, #128	; 0x80
 8002b74:	601a      	str	r2, [r3, #0]
}
 8002b76:	bf00      	nop
 8002b78:	3714      	adds	r7, #20
 8002b7a:	46bd      	mov	sp, r7
 8002b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b80:	4770      	bx	lr
 8002b82:	bf00      	nop
 8002b84:	20000150 	.word	0x20000150
 8002b88:	200001f8 	.word	0x200001f8

08002b8c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8002b8c:	b480      	push	{r7}
 8002b8e:	b085      	sub	sp, #20
 8002b90:	af00      	add	r7, sp, #0
 8002b92:	60f8      	str	r0, [r7, #12]
 8002b94:	60b9      	str	r1, [r7, #8]
 8002b96:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	4a07      	ldr	r2, [pc, #28]	; (8002bb8 <vApplicationGetTimerTaskMemory+0x2c>)
 8002b9c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8002b9e:	68bb      	ldr	r3, [r7, #8]
 8002ba0:	4a06      	ldr	r2, [pc, #24]	; (8002bbc <vApplicationGetTimerTaskMemory+0x30>)
 8002ba2:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002baa:	601a      	str	r2, [r3, #0]
}
 8002bac:	bf00      	nop
 8002bae:	3714      	adds	r7, #20
 8002bb0:	46bd      	mov	sp, r7
 8002bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb6:	4770      	bx	lr
 8002bb8:	200003f8 	.word	0x200003f8
 8002bbc:	200004a0 	.word	0x200004a0

08002bc0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002bc0:	b480      	push	{r7}
 8002bc2:	b083      	sub	sp, #12
 8002bc4:	af00      	add	r7, sp, #0
 8002bc6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	f103 0208 	add.w	r2, r3, #8
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	f04f 32ff 	mov.w	r2, #4294967295
 8002bd8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	f103 0208 	add.w	r2, r3, #8
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	f103 0208 	add.w	r2, r3, #8
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	2200      	movs	r2, #0
 8002bf2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002bf4:	bf00      	nop
 8002bf6:	370c      	adds	r7, #12
 8002bf8:	46bd      	mov	sp, r7
 8002bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bfe:	4770      	bx	lr

08002c00 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002c00:	b480      	push	{r7}
 8002c02:	b083      	sub	sp, #12
 8002c04:	af00      	add	r7, sp, #0
 8002c06:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	2200      	movs	r2, #0
 8002c0c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002c0e:	bf00      	nop
 8002c10:	370c      	adds	r7, #12
 8002c12:	46bd      	mov	sp, r7
 8002c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c18:	4770      	bx	lr

08002c1a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002c1a:	b480      	push	{r7}
 8002c1c:	b085      	sub	sp, #20
 8002c1e:	af00      	add	r7, sp, #0
 8002c20:	6078      	str	r0, [r7, #4]
 8002c22:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	685b      	ldr	r3, [r3, #4]
 8002c28:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8002c2a:	683b      	ldr	r3, [r7, #0]
 8002c2c:	68fa      	ldr	r2, [r7, #12]
 8002c2e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	689a      	ldr	r2, [r3, #8]
 8002c34:	683b      	ldr	r3, [r7, #0]
 8002c36:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	689b      	ldr	r3, [r3, #8]
 8002c3c:	683a      	ldr	r2, [r7, #0]
 8002c3e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	683a      	ldr	r2, [r7, #0]
 8002c44:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8002c46:	683b      	ldr	r3, [r7, #0]
 8002c48:	687a      	ldr	r2, [r7, #4]
 8002c4a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	1c5a      	adds	r2, r3, #1
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	601a      	str	r2, [r3, #0]
}
 8002c56:	bf00      	nop
 8002c58:	3714      	adds	r7, #20
 8002c5a:	46bd      	mov	sp, r7
 8002c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c60:	4770      	bx	lr

08002c62 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002c62:	b480      	push	{r7}
 8002c64:	b085      	sub	sp, #20
 8002c66:	af00      	add	r7, sp, #0
 8002c68:	6078      	str	r0, [r7, #4]
 8002c6a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002c6c:	683b      	ldr	r3, [r7, #0]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8002c72:	68bb      	ldr	r3, [r7, #8]
 8002c74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c78:	d103      	bne.n	8002c82 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	691b      	ldr	r3, [r3, #16]
 8002c7e:	60fb      	str	r3, [r7, #12]
 8002c80:	e00c      	b.n	8002c9c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	3308      	adds	r3, #8
 8002c86:	60fb      	str	r3, [r7, #12]
 8002c88:	e002      	b.n	8002c90 <vListInsert+0x2e>
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	685b      	ldr	r3, [r3, #4]
 8002c8e:	60fb      	str	r3, [r7, #12]
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	685b      	ldr	r3, [r3, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	68ba      	ldr	r2, [r7, #8]
 8002c98:	429a      	cmp	r2, r3
 8002c9a:	d2f6      	bcs.n	8002c8a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	685a      	ldr	r2, [r3, #4]
 8002ca0:	683b      	ldr	r3, [r7, #0]
 8002ca2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002ca4:	683b      	ldr	r3, [r7, #0]
 8002ca6:	685b      	ldr	r3, [r3, #4]
 8002ca8:	683a      	ldr	r2, [r7, #0]
 8002caa:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8002cac:	683b      	ldr	r3, [r7, #0]
 8002cae:	68fa      	ldr	r2, [r7, #12]
 8002cb0:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	683a      	ldr	r2, [r7, #0]
 8002cb6:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8002cb8:	683b      	ldr	r3, [r7, #0]
 8002cba:	687a      	ldr	r2, [r7, #4]
 8002cbc:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	1c5a      	adds	r2, r3, #1
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	601a      	str	r2, [r3, #0]
}
 8002cc8:	bf00      	nop
 8002cca:	3714      	adds	r7, #20
 8002ccc:	46bd      	mov	sp, r7
 8002cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd2:	4770      	bx	lr

08002cd4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002cd4:	b480      	push	{r7}
 8002cd6:	b085      	sub	sp, #20
 8002cd8:	af00      	add	r7, sp, #0
 8002cda:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	691b      	ldr	r3, [r3, #16]
 8002ce0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	685b      	ldr	r3, [r3, #4]
 8002ce6:	687a      	ldr	r2, [r7, #4]
 8002ce8:	6892      	ldr	r2, [r2, #8]
 8002cea:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	689b      	ldr	r3, [r3, #8]
 8002cf0:	687a      	ldr	r2, [r7, #4]
 8002cf2:	6852      	ldr	r2, [r2, #4]
 8002cf4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	685b      	ldr	r3, [r3, #4]
 8002cfa:	687a      	ldr	r2, [r7, #4]
 8002cfc:	429a      	cmp	r2, r3
 8002cfe:	d103      	bne.n	8002d08 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	689a      	ldr	r2, [r3, #8]
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	2200      	movs	r2, #0
 8002d0c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	1e5a      	subs	r2, r3, #1
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	681b      	ldr	r3, [r3, #0]
}
 8002d1c:	4618      	mov	r0, r3
 8002d1e:	3714      	adds	r7, #20
 8002d20:	46bd      	mov	sp, r7
 8002d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d26:	4770      	bx	lr

08002d28 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8002d28:	b580      	push	{r7, lr}
 8002d2a:	b084      	sub	sp, #16
 8002d2c:	af00      	add	r7, sp, #0
 8002d2e:	6078      	str	r0, [r7, #4]
 8002d30:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d10a      	bne.n	8002d52 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8002d3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d40:	f383 8811 	msr	BASEPRI, r3
 8002d44:	f3bf 8f6f 	isb	sy
 8002d48:	f3bf 8f4f 	dsb	sy
 8002d4c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8002d4e:	bf00      	nop
 8002d50:	e7fe      	b.n	8002d50 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8002d52:	f002 f897 	bl	8004e84 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	681a      	ldr	r2, [r3, #0]
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d5e:	68f9      	ldr	r1, [r7, #12]
 8002d60:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002d62:	fb01 f303 	mul.w	r3, r1, r3
 8002d66:	441a      	add	r2, r3
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	2200      	movs	r2, #0
 8002d70:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	681a      	ldr	r2, [r3, #0]
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	681a      	ldr	r2, [r3, #0]
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d82:	3b01      	subs	r3, #1
 8002d84:	68f9      	ldr	r1, [r7, #12]
 8002d86:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002d88:	fb01 f303 	mul.w	r3, r1, r3
 8002d8c:	441a      	add	r2, r3
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	22ff      	movs	r2, #255	; 0xff
 8002d96:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	22ff      	movs	r2, #255	; 0xff
 8002d9e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8002da2:	683b      	ldr	r3, [r7, #0]
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d114      	bne.n	8002dd2 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	691b      	ldr	r3, [r3, #16]
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d01a      	beq.n	8002de6 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	3310      	adds	r3, #16
 8002db4:	4618      	mov	r0, r3
 8002db6:	f001 f929 	bl	800400c <xTaskRemoveFromEventList>
 8002dba:	4603      	mov	r3, r0
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d012      	beq.n	8002de6 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8002dc0:	4b0c      	ldr	r3, [pc, #48]	; (8002df4 <xQueueGenericReset+0xcc>)
 8002dc2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002dc6:	601a      	str	r2, [r3, #0]
 8002dc8:	f3bf 8f4f 	dsb	sy
 8002dcc:	f3bf 8f6f 	isb	sy
 8002dd0:	e009      	b.n	8002de6 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	3310      	adds	r3, #16
 8002dd6:	4618      	mov	r0, r3
 8002dd8:	f7ff fef2 	bl	8002bc0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	3324      	adds	r3, #36	; 0x24
 8002de0:	4618      	mov	r0, r3
 8002de2:	f7ff feed 	bl	8002bc0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8002de6:	f002 f87d 	bl	8004ee4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8002dea:	2301      	movs	r3, #1
}
 8002dec:	4618      	mov	r0, r3
 8002dee:	3710      	adds	r7, #16
 8002df0:	46bd      	mov	sp, r7
 8002df2:	bd80      	pop	{r7, pc}
 8002df4:	e000ed04 	.word	0xe000ed04

08002df8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8002df8:	b580      	push	{r7, lr}
 8002dfa:	b08e      	sub	sp, #56	; 0x38
 8002dfc:	af02      	add	r7, sp, #8
 8002dfe:	60f8      	str	r0, [r7, #12]
 8002e00:	60b9      	str	r1, [r7, #8]
 8002e02:	607a      	str	r2, [r7, #4]
 8002e04:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d10a      	bne.n	8002e22 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8002e0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e10:	f383 8811 	msr	BASEPRI, r3
 8002e14:	f3bf 8f6f 	isb	sy
 8002e18:	f3bf 8f4f 	dsb	sy
 8002e1c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8002e1e:	bf00      	nop
 8002e20:	e7fe      	b.n	8002e20 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8002e22:	683b      	ldr	r3, [r7, #0]
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d10a      	bne.n	8002e3e <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8002e28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e2c:	f383 8811 	msr	BASEPRI, r3
 8002e30:	f3bf 8f6f 	isb	sy
 8002e34:	f3bf 8f4f 	dsb	sy
 8002e38:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002e3a:	bf00      	nop
 8002e3c:	e7fe      	b.n	8002e3c <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d002      	beq.n	8002e4a <xQueueGenericCreateStatic+0x52>
 8002e44:	68bb      	ldr	r3, [r7, #8]
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d001      	beq.n	8002e4e <xQueueGenericCreateStatic+0x56>
 8002e4a:	2301      	movs	r3, #1
 8002e4c:	e000      	b.n	8002e50 <xQueueGenericCreateStatic+0x58>
 8002e4e:	2300      	movs	r3, #0
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d10a      	bne.n	8002e6a <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8002e54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e58:	f383 8811 	msr	BASEPRI, r3
 8002e5c:	f3bf 8f6f 	isb	sy
 8002e60:	f3bf 8f4f 	dsb	sy
 8002e64:	623b      	str	r3, [r7, #32]
}
 8002e66:	bf00      	nop
 8002e68:	e7fe      	b.n	8002e68 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d102      	bne.n	8002e76 <xQueueGenericCreateStatic+0x7e>
 8002e70:	68bb      	ldr	r3, [r7, #8]
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d101      	bne.n	8002e7a <xQueueGenericCreateStatic+0x82>
 8002e76:	2301      	movs	r3, #1
 8002e78:	e000      	b.n	8002e7c <xQueueGenericCreateStatic+0x84>
 8002e7a:	2300      	movs	r3, #0
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d10a      	bne.n	8002e96 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8002e80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e84:	f383 8811 	msr	BASEPRI, r3
 8002e88:	f3bf 8f6f 	isb	sy
 8002e8c:	f3bf 8f4f 	dsb	sy
 8002e90:	61fb      	str	r3, [r7, #28]
}
 8002e92:	bf00      	nop
 8002e94:	e7fe      	b.n	8002e94 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8002e96:	2350      	movs	r3, #80	; 0x50
 8002e98:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8002e9a:	697b      	ldr	r3, [r7, #20]
 8002e9c:	2b50      	cmp	r3, #80	; 0x50
 8002e9e:	d00a      	beq.n	8002eb6 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8002ea0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ea4:	f383 8811 	msr	BASEPRI, r3
 8002ea8:	f3bf 8f6f 	isb	sy
 8002eac:	f3bf 8f4f 	dsb	sy
 8002eb0:	61bb      	str	r3, [r7, #24]
}
 8002eb2:	bf00      	nop
 8002eb4:	e7fe      	b.n	8002eb4 <xQueueGenericCreateStatic+0xbc>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002eb6:	683b      	ldr	r3, [r7, #0]
 8002eb8:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8002eba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d00d      	beq.n	8002edc <xQueueGenericCreateStatic+0xe4>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8002ec0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ec2:	2201      	movs	r2, #1
 8002ec4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002ec8:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8002ecc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ece:	9300      	str	r3, [sp, #0]
 8002ed0:	4613      	mov	r3, r2
 8002ed2:	687a      	ldr	r2, [r7, #4]
 8002ed4:	68b9      	ldr	r1, [r7, #8]
 8002ed6:	68f8      	ldr	r0, [r7, #12]
 8002ed8:	f000 f843 	bl	8002f62 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8002edc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8002ede:	4618      	mov	r0, r3
 8002ee0:	3730      	adds	r7, #48	; 0x30
 8002ee2:	46bd      	mov	sp, r7
 8002ee4:	bd80      	pop	{r7, pc}

08002ee6 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8002ee6:	b580      	push	{r7, lr}
 8002ee8:	b08a      	sub	sp, #40	; 0x28
 8002eea:	af02      	add	r7, sp, #8
 8002eec:	60f8      	str	r0, [r7, #12]
 8002eee:	60b9      	str	r1, [r7, #8]
 8002ef0:	4613      	mov	r3, r2
 8002ef2:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d10a      	bne.n	8002f10 <xQueueGenericCreate+0x2a>
	__asm volatile
 8002efa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002efe:	f383 8811 	msr	BASEPRI, r3
 8002f02:	f3bf 8f6f 	isb	sy
 8002f06:	f3bf 8f4f 	dsb	sy
 8002f0a:	613b      	str	r3, [r7, #16]
}
 8002f0c:	bf00      	nop
 8002f0e:	e7fe      	b.n	8002f0e <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8002f10:	68bb      	ldr	r3, [r7, #8]
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d102      	bne.n	8002f1c <xQueueGenericCreate+0x36>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8002f16:	2300      	movs	r3, #0
 8002f18:	61fb      	str	r3, [r7, #28]
 8002f1a:	e004      	b.n	8002f26 <xQueueGenericCreate+0x40>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	68ba      	ldr	r2, [r7, #8]
 8002f20:	fb02 f303 	mul.w	r3, r2, r3
 8002f24:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8002f26:	69fb      	ldr	r3, [r7, #28]
 8002f28:	3350      	adds	r3, #80	; 0x50
 8002f2a:	4618      	mov	r0, r3
 8002f2c:	f002 f8cc 	bl	80050c8 <pvPortMalloc>
 8002f30:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8002f32:	69bb      	ldr	r3, [r7, #24]
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d00f      	beq.n	8002f58 <xQueueGenericCreate+0x72>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8002f38:	69bb      	ldr	r3, [r7, #24]
 8002f3a:	3350      	adds	r3, #80	; 0x50
 8002f3c:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8002f3e:	69bb      	ldr	r3, [r7, #24]
 8002f40:	2200      	movs	r2, #0
 8002f42:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002f46:	79fa      	ldrb	r2, [r7, #7]
 8002f48:	69bb      	ldr	r3, [r7, #24]
 8002f4a:	9300      	str	r3, [sp, #0]
 8002f4c:	4613      	mov	r3, r2
 8002f4e:	697a      	ldr	r2, [r7, #20]
 8002f50:	68b9      	ldr	r1, [r7, #8]
 8002f52:	68f8      	ldr	r0, [r7, #12]
 8002f54:	f000 f805 	bl	8002f62 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8002f58:	69bb      	ldr	r3, [r7, #24]
	}
 8002f5a:	4618      	mov	r0, r3
 8002f5c:	3720      	adds	r7, #32
 8002f5e:	46bd      	mov	sp, r7
 8002f60:	bd80      	pop	{r7, pc}

08002f62 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8002f62:	b580      	push	{r7, lr}
 8002f64:	b084      	sub	sp, #16
 8002f66:	af00      	add	r7, sp, #0
 8002f68:	60f8      	str	r0, [r7, #12]
 8002f6a:	60b9      	str	r1, [r7, #8]
 8002f6c:	607a      	str	r2, [r7, #4]
 8002f6e:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8002f70:	68bb      	ldr	r3, [r7, #8]
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d103      	bne.n	8002f7e <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8002f76:	69bb      	ldr	r3, [r7, #24]
 8002f78:	69ba      	ldr	r2, [r7, #24]
 8002f7a:	601a      	str	r2, [r3, #0]
 8002f7c:	e002      	b.n	8002f84 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002f7e:	69bb      	ldr	r3, [r7, #24]
 8002f80:	687a      	ldr	r2, [r7, #4]
 8002f82:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8002f84:	69bb      	ldr	r3, [r7, #24]
 8002f86:	68fa      	ldr	r2, [r7, #12]
 8002f88:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8002f8a:	69bb      	ldr	r3, [r7, #24]
 8002f8c:	68ba      	ldr	r2, [r7, #8]
 8002f8e:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002f90:	2101      	movs	r1, #1
 8002f92:	69b8      	ldr	r0, [r7, #24]
 8002f94:	f7ff fec8 	bl	8002d28 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8002f98:	69bb      	ldr	r3, [r7, #24]
 8002f9a:	78fa      	ldrb	r2, [r7, #3]
 8002f9c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8002fa0:	bf00      	nop
 8002fa2:	3710      	adds	r7, #16
 8002fa4:	46bd      	mov	sp, r7
 8002fa6:	bd80      	pop	{r7, pc}

08002fa8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8002fa8:	b580      	push	{r7, lr}
 8002faa:	b08e      	sub	sp, #56	; 0x38
 8002fac:	af00      	add	r7, sp, #0
 8002fae:	60f8      	str	r0, [r7, #12]
 8002fb0:	60b9      	str	r1, [r7, #8]
 8002fb2:	607a      	str	r2, [r7, #4]
 8002fb4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8002fb6:	2300      	movs	r3, #0
 8002fb8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8002fbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d10a      	bne.n	8002fda <xQueueGenericSend+0x32>
	__asm volatile
 8002fc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002fc8:	f383 8811 	msr	BASEPRI, r3
 8002fcc:	f3bf 8f6f 	isb	sy
 8002fd0:	f3bf 8f4f 	dsb	sy
 8002fd4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8002fd6:	bf00      	nop
 8002fd8:	e7fe      	b.n	8002fd8 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002fda:	68bb      	ldr	r3, [r7, #8]
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d103      	bne.n	8002fe8 <xQueueGenericSend+0x40>
 8002fe0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fe2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d101      	bne.n	8002fec <xQueueGenericSend+0x44>
 8002fe8:	2301      	movs	r3, #1
 8002fea:	e000      	b.n	8002fee <xQueueGenericSend+0x46>
 8002fec:	2300      	movs	r3, #0
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d10a      	bne.n	8003008 <xQueueGenericSend+0x60>
	__asm volatile
 8002ff2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ff6:	f383 8811 	msr	BASEPRI, r3
 8002ffa:	f3bf 8f6f 	isb	sy
 8002ffe:	f3bf 8f4f 	dsb	sy
 8003002:	627b      	str	r3, [r7, #36]	; 0x24
}
 8003004:	bf00      	nop
 8003006:	e7fe      	b.n	8003006 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003008:	683b      	ldr	r3, [r7, #0]
 800300a:	2b02      	cmp	r3, #2
 800300c:	d103      	bne.n	8003016 <xQueueGenericSend+0x6e>
 800300e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003010:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003012:	2b01      	cmp	r3, #1
 8003014:	d101      	bne.n	800301a <xQueueGenericSend+0x72>
 8003016:	2301      	movs	r3, #1
 8003018:	e000      	b.n	800301c <xQueueGenericSend+0x74>
 800301a:	2300      	movs	r3, #0
 800301c:	2b00      	cmp	r3, #0
 800301e:	d10a      	bne.n	8003036 <xQueueGenericSend+0x8e>
	__asm volatile
 8003020:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003024:	f383 8811 	msr	BASEPRI, r3
 8003028:	f3bf 8f6f 	isb	sy
 800302c:	f3bf 8f4f 	dsb	sy
 8003030:	623b      	str	r3, [r7, #32]
}
 8003032:	bf00      	nop
 8003034:	e7fe      	b.n	8003034 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003036:	f001 f9b1 	bl	800439c <xTaskGetSchedulerState>
 800303a:	4603      	mov	r3, r0
 800303c:	2b00      	cmp	r3, #0
 800303e:	d102      	bne.n	8003046 <xQueueGenericSend+0x9e>
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	2b00      	cmp	r3, #0
 8003044:	d101      	bne.n	800304a <xQueueGenericSend+0xa2>
 8003046:	2301      	movs	r3, #1
 8003048:	e000      	b.n	800304c <xQueueGenericSend+0xa4>
 800304a:	2300      	movs	r3, #0
 800304c:	2b00      	cmp	r3, #0
 800304e:	d10a      	bne.n	8003066 <xQueueGenericSend+0xbe>
	__asm volatile
 8003050:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003054:	f383 8811 	msr	BASEPRI, r3
 8003058:	f3bf 8f6f 	isb	sy
 800305c:	f3bf 8f4f 	dsb	sy
 8003060:	61fb      	str	r3, [r7, #28]
}
 8003062:	bf00      	nop
 8003064:	e7fe      	b.n	8003064 <xQueueGenericSend+0xbc>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003066:	f001 ff0d 	bl	8004e84 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800306a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800306c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800306e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003070:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003072:	429a      	cmp	r2, r3
 8003074:	d302      	bcc.n	800307c <xQueueGenericSend+0xd4>
 8003076:	683b      	ldr	r3, [r7, #0]
 8003078:	2b02      	cmp	r3, #2
 800307a:	d129      	bne.n	80030d0 <xQueueGenericSend+0x128>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800307c:	683a      	ldr	r2, [r7, #0]
 800307e:	68b9      	ldr	r1, [r7, #8]
 8003080:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003082:	f000 fa07 	bl	8003494 <prvCopyDataToQueue>
 8003086:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003088:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800308a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800308c:	2b00      	cmp	r3, #0
 800308e:	d010      	beq.n	80030b2 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003090:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003092:	3324      	adds	r3, #36	; 0x24
 8003094:	4618      	mov	r0, r3
 8003096:	f000 ffb9 	bl	800400c <xTaskRemoveFromEventList>
 800309a:	4603      	mov	r3, r0
 800309c:	2b00      	cmp	r3, #0
 800309e:	d013      	beq.n	80030c8 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80030a0:	4b3f      	ldr	r3, [pc, #252]	; (80031a0 <xQueueGenericSend+0x1f8>)
 80030a2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80030a6:	601a      	str	r2, [r3, #0]
 80030a8:	f3bf 8f4f 	dsb	sy
 80030ac:	f3bf 8f6f 	isb	sy
 80030b0:	e00a      	b.n	80030c8 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80030b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d007      	beq.n	80030c8 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80030b8:	4b39      	ldr	r3, [pc, #228]	; (80031a0 <xQueueGenericSend+0x1f8>)
 80030ba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80030be:	601a      	str	r2, [r3, #0]
 80030c0:	f3bf 8f4f 	dsb	sy
 80030c4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80030c8:	f001 ff0c 	bl	8004ee4 <vPortExitCritical>
				return pdPASS;
 80030cc:	2301      	movs	r3, #1
 80030ce:	e063      	b.n	8003198 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d103      	bne.n	80030de <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80030d6:	f001 ff05 	bl	8004ee4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80030da:	2300      	movs	r3, #0
 80030dc:	e05c      	b.n	8003198 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 80030de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d106      	bne.n	80030f2 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80030e4:	f107 0314 	add.w	r3, r7, #20
 80030e8:	4618      	mov	r0, r3
 80030ea:	f000 fff3 	bl	80040d4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80030ee:	2301      	movs	r3, #1
 80030f0:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80030f2:	f001 fef7 	bl	8004ee4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80030f6:	f000 fd5b 	bl	8003bb0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80030fa:	f001 fec3 	bl	8004e84 <vPortEnterCritical>
 80030fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003100:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003104:	b25b      	sxtb	r3, r3
 8003106:	f1b3 3fff 	cmp.w	r3, #4294967295
 800310a:	d103      	bne.n	8003114 <xQueueGenericSend+0x16c>
 800310c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800310e:	2200      	movs	r2, #0
 8003110:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003114:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003116:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800311a:	b25b      	sxtb	r3, r3
 800311c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003120:	d103      	bne.n	800312a <xQueueGenericSend+0x182>
 8003122:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003124:	2200      	movs	r2, #0
 8003126:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800312a:	f001 fedb 	bl	8004ee4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800312e:	1d3a      	adds	r2, r7, #4
 8003130:	f107 0314 	add.w	r3, r7, #20
 8003134:	4611      	mov	r1, r2
 8003136:	4618      	mov	r0, r3
 8003138:	f000 ffe2 	bl	8004100 <xTaskCheckForTimeOut>
 800313c:	4603      	mov	r3, r0
 800313e:	2b00      	cmp	r3, #0
 8003140:	d124      	bne.n	800318c <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8003142:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003144:	f000 fa9e 	bl	8003684 <prvIsQueueFull>
 8003148:	4603      	mov	r3, r0
 800314a:	2b00      	cmp	r3, #0
 800314c:	d018      	beq.n	8003180 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800314e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003150:	3310      	adds	r3, #16
 8003152:	687a      	ldr	r2, [r7, #4]
 8003154:	4611      	mov	r1, r2
 8003156:	4618      	mov	r0, r3
 8003158:	f000 ff08 	bl	8003f6c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800315c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800315e:	f000 fa29 	bl	80035b4 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8003162:	f000 fd33 	bl	8003bcc <xTaskResumeAll>
 8003166:	4603      	mov	r3, r0
 8003168:	2b00      	cmp	r3, #0
 800316a:	f47f af7c 	bne.w	8003066 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800316e:	4b0c      	ldr	r3, [pc, #48]	; (80031a0 <xQueueGenericSend+0x1f8>)
 8003170:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003174:	601a      	str	r2, [r3, #0]
 8003176:	f3bf 8f4f 	dsb	sy
 800317a:	f3bf 8f6f 	isb	sy
 800317e:	e772      	b.n	8003066 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8003180:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003182:	f000 fa17 	bl	80035b4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003186:	f000 fd21 	bl	8003bcc <xTaskResumeAll>
 800318a:	e76c      	b.n	8003066 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800318c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800318e:	f000 fa11 	bl	80035b4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003192:	f000 fd1b 	bl	8003bcc <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8003196:	2300      	movs	r3, #0
		}
	}
}
 8003198:	4618      	mov	r0, r3
 800319a:	3738      	adds	r7, #56	; 0x38
 800319c:	46bd      	mov	sp, r7
 800319e:	bd80      	pop	{r7, pc}
 80031a0:	e000ed04 	.word	0xe000ed04

080031a4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80031a4:	b580      	push	{r7, lr}
 80031a6:	b08e      	sub	sp, #56	; 0x38
 80031a8:	af00      	add	r7, sp, #0
 80031aa:	60f8      	str	r0, [r7, #12]
 80031ac:	60b9      	str	r1, [r7, #8]
 80031ae:	607a      	str	r2, [r7, #4]
 80031b0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80031b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d10a      	bne.n	80031d2 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 80031bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031c0:	f383 8811 	msr	BASEPRI, r3
 80031c4:	f3bf 8f6f 	isb	sy
 80031c8:	f3bf 8f4f 	dsb	sy
 80031cc:	627b      	str	r3, [r7, #36]	; 0x24
}
 80031ce:	bf00      	nop
 80031d0:	e7fe      	b.n	80031d0 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80031d2:	68bb      	ldr	r3, [r7, #8]
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d103      	bne.n	80031e0 <xQueueGenericSendFromISR+0x3c>
 80031d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d101      	bne.n	80031e4 <xQueueGenericSendFromISR+0x40>
 80031e0:	2301      	movs	r3, #1
 80031e2:	e000      	b.n	80031e6 <xQueueGenericSendFromISR+0x42>
 80031e4:	2300      	movs	r3, #0
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d10a      	bne.n	8003200 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 80031ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031ee:	f383 8811 	msr	BASEPRI, r3
 80031f2:	f3bf 8f6f 	isb	sy
 80031f6:	f3bf 8f4f 	dsb	sy
 80031fa:	623b      	str	r3, [r7, #32]
}
 80031fc:	bf00      	nop
 80031fe:	e7fe      	b.n	80031fe <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003200:	683b      	ldr	r3, [r7, #0]
 8003202:	2b02      	cmp	r3, #2
 8003204:	d103      	bne.n	800320e <xQueueGenericSendFromISR+0x6a>
 8003206:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003208:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800320a:	2b01      	cmp	r3, #1
 800320c:	d101      	bne.n	8003212 <xQueueGenericSendFromISR+0x6e>
 800320e:	2301      	movs	r3, #1
 8003210:	e000      	b.n	8003214 <xQueueGenericSendFromISR+0x70>
 8003212:	2300      	movs	r3, #0
 8003214:	2b00      	cmp	r3, #0
 8003216:	d10a      	bne.n	800322e <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8003218:	f04f 0350 	mov.w	r3, #80	; 0x50
 800321c:	f383 8811 	msr	BASEPRI, r3
 8003220:	f3bf 8f6f 	isb	sy
 8003224:	f3bf 8f4f 	dsb	sy
 8003228:	61fb      	str	r3, [r7, #28]
}
 800322a:	bf00      	nop
 800322c:	e7fe      	b.n	800322c <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800322e:	f001 ff0b 	bl	8005048 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8003232:	f3ef 8211 	mrs	r2, BASEPRI
 8003236:	f04f 0350 	mov.w	r3, #80	; 0x50
 800323a:	f383 8811 	msr	BASEPRI, r3
 800323e:	f3bf 8f6f 	isb	sy
 8003242:	f3bf 8f4f 	dsb	sy
 8003246:	61ba      	str	r2, [r7, #24]
 8003248:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800324a:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800324c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800324e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003250:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003252:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003254:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003256:	429a      	cmp	r2, r3
 8003258:	d302      	bcc.n	8003260 <xQueueGenericSendFromISR+0xbc>
 800325a:	683b      	ldr	r3, [r7, #0]
 800325c:	2b02      	cmp	r3, #2
 800325e:	d12c      	bne.n	80032ba <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8003260:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003262:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003266:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800326a:	683a      	ldr	r2, [r7, #0]
 800326c:	68b9      	ldr	r1, [r7, #8]
 800326e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003270:	f000 f910 	bl	8003494 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8003274:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8003278:	f1b3 3fff 	cmp.w	r3, #4294967295
 800327c:	d112      	bne.n	80032a4 <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800327e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003280:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003282:	2b00      	cmp	r3, #0
 8003284:	d016      	beq.n	80032b4 <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003286:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003288:	3324      	adds	r3, #36	; 0x24
 800328a:	4618      	mov	r0, r3
 800328c:	f000 febe 	bl	800400c <xTaskRemoveFromEventList>
 8003290:	4603      	mov	r3, r0
 8003292:	2b00      	cmp	r3, #0
 8003294:	d00e      	beq.n	80032b4 <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	2b00      	cmp	r3, #0
 800329a:	d00b      	beq.n	80032b4 <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	2201      	movs	r2, #1
 80032a0:	601a      	str	r2, [r3, #0]
 80032a2:	e007      	b.n	80032b4 <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80032a4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80032a8:	3301      	adds	r3, #1
 80032aa:	b2db      	uxtb	r3, r3
 80032ac:	b25a      	sxtb	r2, r3
 80032ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032b0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80032b4:	2301      	movs	r3, #1
 80032b6:	637b      	str	r3, [r7, #52]	; 0x34
		{
 80032b8:	e001      	b.n	80032be <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80032ba:	2300      	movs	r3, #0
 80032bc:	637b      	str	r3, [r7, #52]	; 0x34
 80032be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032c0:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80032c2:	693b      	ldr	r3, [r7, #16]
 80032c4:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80032c8:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80032ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80032cc:	4618      	mov	r0, r3
 80032ce:	3738      	adds	r7, #56	; 0x38
 80032d0:	46bd      	mov	sp, r7
 80032d2:	bd80      	pop	{r7, pc}

080032d4 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80032d4:	b580      	push	{r7, lr}
 80032d6:	b08c      	sub	sp, #48	; 0x30
 80032d8:	af00      	add	r7, sp, #0
 80032da:	60f8      	str	r0, [r7, #12]
 80032dc:	60b9      	str	r1, [r7, #8]
 80032de:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80032e0:	2300      	movs	r3, #0
 80032e2:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80032e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d10a      	bne.n	8003304 <xQueueReceive+0x30>
	__asm volatile
 80032ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032f2:	f383 8811 	msr	BASEPRI, r3
 80032f6:	f3bf 8f6f 	isb	sy
 80032fa:	f3bf 8f4f 	dsb	sy
 80032fe:	623b      	str	r3, [r7, #32]
}
 8003300:	bf00      	nop
 8003302:	e7fe      	b.n	8003302 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003304:	68bb      	ldr	r3, [r7, #8]
 8003306:	2b00      	cmp	r3, #0
 8003308:	d103      	bne.n	8003312 <xQueueReceive+0x3e>
 800330a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800330c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800330e:	2b00      	cmp	r3, #0
 8003310:	d101      	bne.n	8003316 <xQueueReceive+0x42>
 8003312:	2301      	movs	r3, #1
 8003314:	e000      	b.n	8003318 <xQueueReceive+0x44>
 8003316:	2300      	movs	r3, #0
 8003318:	2b00      	cmp	r3, #0
 800331a:	d10a      	bne.n	8003332 <xQueueReceive+0x5e>
	__asm volatile
 800331c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003320:	f383 8811 	msr	BASEPRI, r3
 8003324:	f3bf 8f6f 	isb	sy
 8003328:	f3bf 8f4f 	dsb	sy
 800332c:	61fb      	str	r3, [r7, #28]
}
 800332e:	bf00      	nop
 8003330:	e7fe      	b.n	8003330 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003332:	f001 f833 	bl	800439c <xTaskGetSchedulerState>
 8003336:	4603      	mov	r3, r0
 8003338:	2b00      	cmp	r3, #0
 800333a:	d102      	bne.n	8003342 <xQueueReceive+0x6e>
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	2b00      	cmp	r3, #0
 8003340:	d101      	bne.n	8003346 <xQueueReceive+0x72>
 8003342:	2301      	movs	r3, #1
 8003344:	e000      	b.n	8003348 <xQueueReceive+0x74>
 8003346:	2300      	movs	r3, #0
 8003348:	2b00      	cmp	r3, #0
 800334a:	d10a      	bne.n	8003362 <xQueueReceive+0x8e>
	__asm volatile
 800334c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003350:	f383 8811 	msr	BASEPRI, r3
 8003354:	f3bf 8f6f 	isb	sy
 8003358:	f3bf 8f4f 	dsb	sy
 800335c:	61bb      	str	r3, [r7, #24]
}
 800335e:	bf00      	nop
 8003360:	e7fe      	b.n	8003360 <xQueueReceive+0x8c>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8003362:	f001 fd8f 	bl	8004e84 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003366:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003368:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800336a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800336c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800336e:	2b00      	cmp	r3, #0
 8003370:	d01f      	beq.n	80033b2 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003372:	68b9      	ldr	r1, [r7, #8]
 8003374:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003376:	f000 f8f7 	bl	8003568 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800337a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800337c:	1e5a      	subs	r2, r3, #1
 800337e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003380:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003382:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003384:	691b      	ldr	r3, [r3, #16]
 8003386:	2b00      	cmp	r3, #0
 8003388:	d00f      	beq.n	80033aa <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800338a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800338c:	3310      	adds	r3, #16
 800338e:	4618      	mov	r0, r3
 8003390:	f000 fe3c 	bl	800400c <xTaskRemoveFromEventList>
 8003394:	4603      	mov	r3, r0
 8003396:	2b00      	cmp	r3, #0
 8003398:	d007      	beq.n	80033aa <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800339a:	4b3d      	ldr	r3, [pc, #244]	; (8003490 <xQueueReceive+0x1bc>)
 800339c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80033a0:	601a      	str	r2, [r3, #0]
 80033a2:	f3bf 8f4f 	dsb	sy
 80033a6:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80033aa:	f001 fd9b 	bl	8004ee4 <vPortExitCritical>
				return pdPASS;
 80033ae:	2301      	movs	r3, #1
 80033b0:	e069      	b.n	8003486 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d103      	bne.n	80033c0 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80033b8:	f001 fd94 	bl	8004ee4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80033bc:	2300      	movs	r3, #0
 80033be:	e062      	b.n	8003486 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 80033c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d106      	bne.n	80033d4 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80033c6:	f107 0310 	add.w	r3, r7, #16
 80033ca:	4618      	mov	r0, r3
 80033cc:	f000 fe82 	bl	80040d4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80033d0:	2301      	movs	r3, #1
 80033d2:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80033d4:	f001 fd86 	bl	8004ee4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80033d8:	f000 fbea 	bl	8003bb0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80033dc:	f001 fd52 	bl	8004e84 <vPortEnterCritical>
 80033e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033e2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80033e6:	b25b      	sxtb	r3, r3
 80033e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033ec:	d103      	bne.n	80033f6 <xQueueReceive+0x122>
 80033ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033f0:	2200      	movs	r2, #0
 80033f2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80033f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033f8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80033fc:	b25b      	sxtb	r3, r3
 80033fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003402:	d103      	bne.n	800340c <xQueueReceive+0x138>
 8003404:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003406:	2200      	movs	r2, #0
 8003408:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800340c:	f001 fd6a 	bl	8004ee4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003410:	1d3a      	adds	r2, r7, #4
 8003412:	f107 0310 	add.w	r3, r7, #16
 8003416:	4611      	mov	r1, r2
 8003418:	4618      	mov	r0, r3
 800341a:	f000 fe71 	bl	8004100 <xTaskCheckForTimeOut>
 800341e:	4603      	mov	r3, r0
 8003420:	2b00      	cmp	r3, #0
 8003422:	d123      	bne.n	800346c <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003424:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003426:	f000 f917 	bl	8003658 <prvIsQueueEmpty>
 800342a:	4603      	mov	r3, r0
 800342c:	2b00      	cmp	r3, #0
 800342e:	d017      	beq.n	8003460 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003430:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003432:	3324      	adds	r3, #36	; 0x24
 8003434:	687a      	ldr	r2, [r7, #4]
 8003436:	4611      	mov	r1, r2
 8003438:	4618      	mov	r0, r3
 800343a:	f000 fd97 	bl	8003f6c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800343e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003440:	f000 f8b8 	bl	80035b4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003444:	f000 fbc2 	bl	8003bcc <xTaskResumeAll>
 8003448:	4603      	mov	r3, r0
 800344a:	2b00      	cmp	r3, #0
 800344c:	d189      	bne.n	8003362 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800344e:	4b10      	ldr	r3, [pc, #64]	; (8003490 <xQueueReceive+0x1bc>)
 8003450:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003454:	601a      	str	r2, [r3, #0]
 8003456:	f3bf 8f4f 	dsb	sy
 800345a:	f3bf 8f6f 	isb	sy
 800345e:	e780      	b.n	8003362 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8003460:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003462:	f000 f8a7 	bl	80035b4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003466:	f000 fbb1 	bl	8003bcc <xTaskResumeAll>
 800346a:	e77a      	b.n	8003362 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800346c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800346e:	f000 f8a1 	bl	80035b4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003472:	f000 fbab 	bl	8003bcc <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003476:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003478:	f000 f8ee 	bl	8003658 <prvIsQueueEmpty>
 800347c:	4603      	mov	r3, r0
 800347e:	2b00      	cmp	r3, #0
 8003480:	f43f af6f 	beq.w	8003362 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8003484:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8003486:	4618      	mov	r0, r3
 8003488:	3730      	adds	r7, #48	; 0x30
 800348a:	46bd      	mov	sp, r7
 800348c:	bd80      	pop	{r7, pc}
 800348e:	bf00      	nop
 8003490:	e000ed04 	.word	0xe000ed04

08003494 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8003494:	b580      	push	{r7, lr}
 8003496:	b086      	sub	sp, #24
 8003498:	af00      	add	r7, sp, #0
 800349a:	60f8      	str	r0, [r7, #12]
 800349c:	60b9      	str	r1, [r7, #8]
 800349e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80034a0:	2300      	movs	r3, #0
 80034a2:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034a8:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d10d      	bne.n	80034ce <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d14d      	bne.n	8003556 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	685b      	ldr	r3, [r3, #4]
 80034be:	4618      	mov	r0, r3
 80034c0:	f000 ff8a 	bl	80043d8 <xTaskPriorityDisinherit>
 80034c4:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	2200      	movs	r2, #0
 80034ca:	605a      	str	r2, [r3, #4]
 80034cc:	e043      	b.n	8003556 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d119      	bne.n	8003508 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	6898      	ldr	r0, [r3, #8]
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034dc:	461a      	mov	r2, r3
 80034de:	68b9      	ldr	r1, [r7, #8]
 80034e0:	f002 f850 	bl	8005584 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	689a      	ldr	r2, [r3, #8]
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034ec:	441a      	add	r2, r3
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	689a      	ldr	r2, [r3, #8]
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	685b      	ldr	r3, [r3, #4]
 80034fa:	429a      	cmp	r2, r3
 80034fc:	d32b      	bcc.n	8003556 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	681a      	ldr	r2, [r3, #0]
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	609a      	str	r2, [r3, #8]
 8003506:	e026      	b.n	8003556 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	68d8      	ldr	r0, [r3, #12]
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003510:	461a      	mov	r2, r3
 8003512:	68b9      	ldr	r1, [r7, #8]
 8003514:	f002 f836 	bl	8005584 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	68da      	ldr	r2, [r3, #12]
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003520:	425b      	negs	r3, r3
 8003522:	441a      	add	r2, r3
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	68da      	ldr	r2, [r3, #12]
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	429a      	cmp	r2, r3
 8003532:	d207      	bcs.n	8003544 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	685a      	ldr	r2, [r3, #4]
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800353c:	425b      	negs	r3, r3
 800353e:	441a      	add	r2, r3
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	2b02      	cmp	r3, #2
 8003548:	d105      	bne.n	8003556 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800354a:	693b      	ldr	r3, [r7, #16]
 800354c:	2b00      	cmp	r3, #0
 800354e:	d002      	beq.n	8003556 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8003550:	693b      	ldr	r3, [r7, #16]
 8003552:	3b01      	subs	r3, #1
 8003554:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8003556:	693b      	ldr	r3, [r7, #16]
 8003558:	1c5a      	adds	r2, r3, #1
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800355e:	697b      	ldr	r3, [r7, #20]
}
 8003560:	4618      	mov	r0, r3
 8003562:	3718      	adds	r7, #24
 8003564:	46bd      	mov	sp, r7
 8003566:	bd80      	pop	{r7, pc}

08003568 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8003568:	b580      	push	{r7, lr}
 800356a:	b082      	sub	sp, #8
 800356c:	af00      	add	r7, sp, #0
 800356e:	6078      	str	r0, [r7, #4]
 8003570:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003576:	2b00      	cmp	r3, #0
 8003578:	d018      	beq.n	80035ac <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	68da      	ldr	r2, [r3, #12]
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003582:	441a      	add	r2, r3
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	68da      	ldr	r2, [r3, #12]
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	685b      	ldr	r3, [r3, #4]
 8003590:	429a      	cmp	r2, r3
 8003592:	d303      	bcc.n	800359c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681a      	ldr	r2, [r3, #0]
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	68d9      	ldr	r1, [r3, #12]
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035a4:	461a      	mov	r2, r3
 80035a6:	6838      	ldr	r0, [r7, #0]
 80035a8:	f001 ffec 	bl	8005584 <memcpy>
	}
}
 80035ac:	bf00      	nop
 80035ae:	3708      	adds	r7, #8
 80035b0:	46bd      	mov	sp, r7
 80035b2:	bd80      	pop	{r7, pc}

080035b4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80035b4:	b580      	push	{r7, lr}
 80035b6:	b084      	sub	sp, #16
 80035b8:	af00      	add	r7, sp, #0
 80035ba:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80035bc:	f001 fc62 	bl	8004e84 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80035c6:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80035c8:	e011      	b.n	80035ee <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d012      	beq.n	80035f8 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	3324      	adds	r3, #36	; 0x24
 80035d6:	4618      	mov	r0, r3
 80035d8:	f000 fd18 	bl	800400c <xTaskRemoveFromEventList>
 80035dc:	4603      	mov	r3, r0
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d001      	beq.n	80035e6 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80035e2:	f000 fdef 	bl	80041c4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80035e6:	7bfb      	ldrb	r3, [r7, #15]
 80035e8:	3b01      	subs	r3, #1
 80035ea:	b2db      	uxtb	r3, r3
 80035ec:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80035ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	dce9      	bgt.n	80035ca <prvUnlockQueue+0x16>
 80035f6:	e000      	b.n	80035fa <prvUnlockQueue+0x46>
					break;
 80035f8:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	22ff      	movs	r2, #255	; 0xff
 80035fe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8003602:	f001 fc6f 	bl	8004ee4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8003606:	f001 fc3d 	bl	8004e84 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003610:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003612:	e011      	b.n	8003638 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	691b      	ldr	r3, [r3, #16]
 8003618:	2b00      	cmp	r3, #0
 800361a:	d012      	beq.n	8003642 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	3310      	adds	r3, #16
 8003620:	4618      	mov	r0, r3
 8003622:	f000 fcf3 	bl	800400c <xTaskRemoveFromEventList>
 8003626:	4603      	mov	r3, r0
 8003628:	2b00      	cmp	r3, #0
 800362a:	d001      	beq.n	8003630 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800362c:	f000 fdca 	bl	80041c4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8003630:	7bbb      	ldrb	r3, [r7, #14]
 8003632:	3b01      	subs	r3, #1
 8003634:	b2db      	uxtb	r3, r3
 8003636:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003638:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800363c:	2b00      	cmp	r3, #0
 800363e:	dce9      	bgt.n	8003614 <prvUnlockQueue+0x60>
 8003640:	e000      	b.n	8003644 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8003642:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	22ff      	movs	r2, #255	; 0xff
 8003648:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800364c:	f001 fc4a 	bl	8004ee4 <vPortExitCritical>
}
 8003650:	bf00      	nop
 8003652:	3710      	adds	r7, #16
 8003654:	46bd      	mov	sp, r7
 8003656:	bd80      	pop	{r7, pc}

08003658 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8003658:	b580      	push	{r7, lr}
 800365a:	b084      	sub	sp, #16
 800365c:	af00      	add	r7, sp, #0
 800365e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003660:	f001 fc10 	bl	8004e84 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003668:	2b00      	cmp	r3, #0
 800366a:	d102      	bne.n	8003672 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800366c:	2301      	movs	r3, #1
 800366e:	60fb      	str	r3, [r7, #12]
 8003670:	e001      	b.n	8003676 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8003672:	2300      	movs	r3, #0
 8003674:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003676:	f001 fc35 	bl	8004ee4 <vPortExitCritical>

	return xReturn;
 800367a:	68fb      	ldr	r3, [r7, #12]
}
 800367c:	4618      	mov	r0, r3
 800367e:	3710      	adds	r7, #16
 8003680:	46bd      	mov	sp, r7
 8003682:	bd80      	pop	{r7, pc}

08003684 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8003684:	b580      	push	{r7, lr}
 8003686:	b084      	sub	sp, #16
 8003688:	af00      	add	r7, sp, #0
 800368a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800368c:	f001 fbfa 	bl	8004e84 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003698:	429a      	cmp	r2, r3
 800369a:	d102      	bne.n	80036a2 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800369c:	2301      	movs	r3, #1
 800369e:	60fb      	str	r3, [r7, #12]
 80036a0:	e001      	b.n	80036a6 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80036a2:	2300      	movs	r3, #0
 80036a4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80036a6:	f001 fc1d 	bl	8004ee4 <vPortExitCritical>

	return xReturn;
 80036aa:	68fb      	ldr	r3, [r7, #12]
}
 80036ac:	4618      	mov	r0, r3
 80036ae:	3710      	adds	r7, #16
 80036b0:	46bd      	mov	sp, r7
 80036b2:	bd80      	pop	{r7, pc}

080036b4 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80036b4:	b480      	push	{r7}
 80036b6:	b085      	sub	sp, #20
 80036b8:	af00      	add	r7, sp, #0
 80036ba:	6078      	str	r0, [r7, #4]
 80036bc:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80036be:	2300      	movs	r3, #0
 80036c0:	60fb      	str	r3, [r7, #12]
 80036c2:	e014      	b.n	80036ee <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80036c4:	4a0f      	ldr	r2, [pc, #60]	; (8003704 <vQueueAddToRegistry+0x50>)
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d10b      	bne.n	80036e8 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80036d0:	490c      	ldr	r1, [pc, #48]	; (8003704 <vQueueAddToRegistry+0x50>)
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	683a      	ldr	r2, [r7, #0]
 80036d6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80036da:	4a0a      	ldr	r2, [pc, #40]	; (8003704 <vQueueAddToRegistry+0x50>)
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	00db      	lsls	r3, r3, #3
 80036e0:	4413      	add	r3, r2
 80036e2:	687a      	ldr	r2, [r7, #4]
 80036e4:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80036e6:	e006      	b.n	80036f6 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	3301      	adds	r3, #1
 80036ec:	60fb      	str	r3, [r7, #12]
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	2b07      	cmp	r3, #7
 80036f2:	d9e7      	bls.n	80036c4 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80036f4:	bf00      	nop
 80036f6:	bf00      	nop
 80036f8:	3714      	adds	r7, #20
 80036fa:	46bd      	mov	sp, r7
 80036fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003700:	4770      	bx	lr
 8003702:	bf00      	nop
 8003704:	200008a0 	.word	0x200008a0

08003708 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003708:	b580      	push	{r7, lr}
 800370a:	b086      	sub	sp, #24
 800370c:	af00      	add	r7, sp, #0
 800370e:	60f8      	str	r0, [r7, #12]
 8003710:	60b9      	str	r1, [r7, #8]
 8003712:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8003718:	f001 fbb4 	bl	8004e84 <vPortEnterCritical>
 800371c:	697b      	ldr	r3, [r7, #20]
 800371e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003722:	b25b      	sxtb	r3, r3
 8003724:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003728:	d103      	bne.n	8003732 <vQueueWaitForMessageRestricted+0x2a>
 800372a:	697b      	ldr	r3, [r7, #20]
 800372c:	2200      	movs	r2, #0
 800372e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003732:	697b      	ldr	r3, [r7, #20]
 8003734:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003738:	b25b      	sxtb	r3, r3
 800373a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800373e:	d103      	bne.n	8003748 <vQueueWaitForMessageRestricted+0x40>
 8003740:	697b      	ldr	r3, [r7, #20]
 8003742:	2200      	movs	r2, #0
 8003744:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003748:	f001 fbcc 	bl	8004ee4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800374c:	697b      	ldr	r3, [r7, #20]
 800374e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003750:	2b00      	cmp	r3, #0
 8003752:	d106      	bne.n	8003762 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8003754:	697b      	ldr	r3, [r7, #20]
 8003756:	3324      	adds	r3, #36	; 0x24
 8003758:	687a      	ldr	r2, [r7, #4]
 800375a:	68b9      	ldr	r1, [r7, #8]
 800375c:	4618      	mov	r0, r3
 800375e:	f000 fc29 	bl	8003fb4 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8003762:	6978      	ldr	r0, [r7, #20]
 8003764:	f7ff ff26 	bl	80035b4 <prvUnlockQueue>
	}
 8003768:	bf00      	nop
 800376a:	3718      	adds	r7, #24
 800376c:	46bd      	mov	sp, r7
 800376e:	bd80      	pop	{r7, pc}

08003770 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8003770:	b580      	push	{r7, lr}
 8003772:	b08e      	sub	sp, #56	; 0x38
 8003774:	af04      	add	r7, sp, #16
 8003776:	60f8      	str	r0, [r7, #12]
 8003778:	60b9      	str	r1, [r7, #8]
 800377a:	607a      	str	r2, [r7, #4]
 800377c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800377e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003780:	2b00      	cmp	r3, #0
 8003782:	d10a      	bne.n	800379a <xTaskCreateStatic+0x2a>
	__asm volatile
 8003784:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003788:	f383 8811 	msr	BASEPRI, r3
 800378c:	f3bf 8f6f 	isb	sy
 8003790:	f3bf 8f4f 	dsb	sy
 8003794:	623b      	str	r3, [r7, #32]
}
 8003796:	bf00      	nop
 8003798:	e7fe      	b.n	8003798 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800379a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800379c:	2b00      	cmp	r3, #0
 800379e:	d10a      	bne.n	80037b6 <xTaskCreateStatic+0x46>
	__asm volatile
 80037a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037a4:	f383 8811 	msr	BASEPRI, r3
 80037a8:	f3bf 8f6f 	isb	sy
 80037ac:	f3bf 8f4f 	dsb	sy
 80037b0:	61fb      	str	r3, [r7, #28]
}
 80037b2:	bf00      	nop
 80037b4:	e7fe      	b.n	80037b4 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80037b6:	23a8      	movs	r3, #168	; 0xa8
 80037b8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80037ba:	693b      	ldr	r3, [r7, #16]
 80037bc:	2ba8      	cmp	r3, #168	; 0xa8
 80037be:	d00a      	beq.n	80037d6 <xTaskCreateStatic+0x66>
	__asm volatile
 80037c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037c4:	f383 8811 	msr	BASEPRI, r3
 80037c8:	f3bf 8f6f 	isb	sy
 80037cc:	f3bf 8f4f 	dsb	sy
 80037d0:	61bb      	str	r3, [r7, #24]
}
 80037d2:	bf00      	nop
 80037d4:	e7fe      	b.n	80037d4 <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80037d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d01e      	beq.n	800381a <xTaskCreateStatic+0xaa>
 80037dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d01b      	beq.n	800381a <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80037e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80037e4:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80037e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037e8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80037ea:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80037ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037ee:	2202      	movs	r2, #2
 80037f0:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80037f4:	2300      	movs	r3, #0
 80037f6:	9303      	str	r3, [sp, #12]
 80037f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037fa:	9302      	str	r3, [sp, #8]
 80037fc:	f107 0314 	add.w	r3, r7, #20
 8003800:	9301      	str	r3, [sp, #4]
 8003802:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003804:	9300      	str	r3, [sp, #0]
 8003806:	683b      	ldr	r3, [r7, #0]
 8003808:	687a      	ldr	r2, [r7, #4]
 800380a:	68b9      	ldr	r1, [r7, #8]
 800380c:	68f8      	ldr	r0, [r7, #12]
 800380e:	f000 f851 	bl	80038b4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003812:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003814:	f000 f8ec 	bl	80039f0 <prvAddNewTaskToReadyList>
 8003818:	e001      	b.n	800381e <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 800381a:	2300      	movs	r3, #0
 800381c:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800381e:	697b      	ldr	r3, [r7, #20]
	}
 8003820:	4618      	mov	r0, r3
 8003822:	3728      	adds	r7, #40	; 0x28
 8003824:	46bd      	mov	sp, r7
 8003826:	bd80      	pop	{r7, pc}

08003828 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8003828:	b580      	push	{r7, lr}
 800382a:	b08c      	sub	sp, #48	; 0x30
 800382c:	af04      	add	r7, sp, #16
 800382e:	60f8      	str	r0, [r7, #12]
 8003830:	60b9      	str	r1, [r7, #8]
 8003832:	603b      	str	r3, [r7, #0]
 8003834:	4613      	mov	r3, r2
 8003836:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003838:	88fb      	ldrh	r3, [r7, #6]
 800383a:	009b      	lsls	r3, r3, #2
 800383c:	4618      	mov	r0, r3
 800383e:	f001 fc43 	bl	80050c8 <pvPortMalloc>
 8003842:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8003844:	697b      	ldr	r3, [r7, #20]
 8003846:	2b00      	cmp	r3, #0
 8003848:	d00e      	beq.n	8003868 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 800384a:	20a8      	movs	r0, #168	; 0xa8
 800384c:	f001 fc3c 	bl	80050c8 <pvPortMalloc>
 8003850:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8003852:	69fb      	ldr	r3, [r7, #28]
 8003854:	2b00      	cmp	r3, #0
 8003856:	d003      	beq.n	8003860 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8003858:	69fb      	ldr	r3, [r7, #28]
 800385a:	697a      	ldr	r2, [r7, #20]
 800385c:	631a      	str	r2, [r3, #48]	; 0x30
 800385e:	e005      	b.n	800386c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8003860:	6978      	ldr	r0, [r7, #20]
 8003862:	f001 fcf5 	bl	8005250 <vPortFree>
 8003866:	e001      	b.n	800386c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8003868:	2300      	movs	r3, #0
 800386a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800386c:	69fb      	ldr	r3, [r7, #28]
 800386e:	2b00      	cmp	r3, #0
 8003870:	d017      	beq.n	80038a2 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8003872:	69fb      	ldr	r3, [r7, #28]
 8003874:	2200      	movs	r2, #0
 8003876:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800387a:	88fa      	ldrh	r2, [r7, #6]
 800387c:	2300      	movs	r3, #0
 800387e:	9303      	str	r3, [sp, #12]
 8003880:	69fb      	ldr	r3, [r7, #28]
 8003882:	9302      	str	r3, [sp, #8]
 8003884:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003886:	9301      	str	r3, [sp, #4]
 8003888:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800388a:	9300      	str	r3, [sp, #0]
 800388c:	683b      	ldr	r3, [r7, #0]
 800388e:	68b9      	ldr	r1, [r7, #8]
 8003890:	68f8      	ldr	r0, [r7, #12]
 8003892:	f000 f80f 	bl	80038b4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003896:	69f8      	ldr	r0, [r7, #28]
 8003898:	f000 f8aa 	bl	80039f0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800389c:	2301      	movs	r3, #1
 800389e:	61bb      	str	r3, [r7, #24]
 80038a0:	e002      	b.n	80038a8 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80038a2:	f04f 33ff 	mov.w	r3, #4294967295
 80038a6:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80038a8:	69bb      	ldr	r3, [r7, #24]
	}
 80038aa:	4618      	mov	r0, r3
 80038ac:	3720      	adds	r7, #32
 80038ae:	46bd      	mov	sp, r7
 80038b0:	bd80      	pop	{r7, pc}
	...

080038b4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80038b4:	b580      	push	{r7, lr}
 80038b6:	b088      	sub	sp, #32
 80038b8:	af00      	add	r7, sp, #0
 80038ba:	60f8      	str	r0, [r7, #12]
 80038bc:	60b9      	str	r1, [r7, #8]
 80038be:	607a      	str	r2, [r7, #4]
 80038c0:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80038c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038c4:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	009b      	lsls	r3, r3, #2
 80038ca:	461a      	mov	r2, r3
 80038cc:	21a5      	movs	r1, #165	; 0xa5
 80038ce:	f001 fdd5 	bl	800547c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 80038d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038d4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80038dc:	3b01      	subs	r3, #1
 80038de:	009b      	lsls	r3, r3, #2
 80038e0:	4413      	add	r3, r2
 80038e2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 80038e4:	69bb      	ldr	r3, [r7, #24]
 80038e6:	f023 0307 	bic.w	r3, r3, #7
 80038ea:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80038ec:	69bb      	ldr	r3, [r7, #24]
 80038ee:	f003 0307 	and.w	r3, r3, #7
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d00a      	beq.n	800390c <prvInitialiseNewTask+0x58>
	__asm volatile
 80038f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038fa:	f383 8811 	msr	BASEPRI, r3
 80038fe:	f3bf 8f6f 	isb	sy
 8003902:	f3bf 8f4f 	dsb	sy
 8003906:	617b      	str	r3, [r7, #20]
}
 8003908:	bf00      	nop
 800390a:	e7fe      	b.n	800390a <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800390c:	2300      	movs	r3, #0
 800390e:	61fb      	str	r3, [r7, #28]
 8003910:	e012      	b.n	8003938 <prvInitialiseNewTask+0x84>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003912:	68ba      	ldr	r2, [r7, #8]
 8003914:	69fb      	ldr	r3, [r7, #28]
 8003916:	4413      	add	r3, r2
 8003918:	7819      	ldrb	r1, [r3, #0]
 800391a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800391c:	69fb      	ldr	r3, [r7, #28]
 800391e:	4413      	add	r3, r2
 8003920:	3334      	adds	r3, #52	; 0x34
 8003922:	460a      	mov	r2, r1
 8003924:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8003926:	68ba      	ldr	r2, [r7, #8]
 8003928:	69fb      	ldr	r3, [r7, #28]
 800392a:	4413      	add	r3, r2
 800392c:	781b      	ldrb	r3, [r3, #0]
 800392e:	2b00      	cmp	r3, #0
 8003930:	d006      	beq.n	8003940 <prvInitialiseNewTask+0x8c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003932:	69fb      	ldr	r3, [r7, #28]
 8003934:	3301      	adds	r3, #1
 8003936:	61fb      	str	r3, [r7, #28]
 8003938:	69fb      	ldr	r3, [r7, #28]
 800393a:	2b0f      	cmp	r3, #15
 800393c:	d9e9      	bls.n	8003912 <prvInitialiseNewTask+0x5e>
 800393e:	e000      	b.n	8003942 <prvInitialiseNewTask+0x8e>
		{
			break;
 8003940:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003942:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003944:	2200      	movs	r2, #0
 8003946:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800394a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800394c:	2b37      	cmp	r3, #55	; 0x37
 800394e:	d901      	bls.n	8003954 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003950:	2337      	movs	r3, #55	; 0x37
 8003952:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8003954:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003956:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003958:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800395a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800395c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800395e:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8003960:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003962:	2200      	movs	r2, #0
 8003964:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003966:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003968:	3304      	adds	r3, #4
 800396a:	4618      	mov	r0, r3
 800396c:	f7ff f948 	bl	8002c00 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003970:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003972:	3318      	adds	r3, #24
 8003974:	4618      	mov	r0, r3
 8003976:	f7ff f943 	bl	8002c00 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800397a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800397c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800397e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003980:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003982:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8003986:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003988:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800398a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800398c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800398e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8003990:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003992:	2200      	movs	r2, #0
 8003994:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003998:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800399a:	2200      	movs	r2, #0
 800399c:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80039a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039a2:	3354      	adds	r3, #84	; 0x54
 80039a4:	224c      	movs	r2, #76	; 0x4c
 80039a6:	2100      	movs	r1, #0
 80039a8:	4618      	mov	r0, r3
 80039aa:	f001 fd67 	bl	800547c <memset>
 80039ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039b0:	4a0c      	ldr	r2, [pc, #48]	; (80039e4 <prvInitialiseNewTask+0x130>)
 80039b2:	659a      	str	r2, [r3, #88]	; 0x58
 80039b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039b6:	4a0c      	ldr	r2, [pc, #48]	; (80039e8 <prvInitialiseNewTask+0x134>)
 80039b8:	65da      	str	r2, [r3, #92]	; 0x5c
 80039ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039bc:	4a0b      	ldr	r2, [pc, #44]	; (80039ec <prvInitialiseNewTask+0x138>)
 80039be:	661a      	str	r2, [r3, #96]	; 0x60
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80039c0:	683a      	ldr	r2, [r7, #0]
 80039c2:	68f9      	ldr	r1, [r7, #12]
 80039c4:	69b8      	ldr	r0, [r7, #24]
 80039c6:	f001 f92f 	bl	8004c28 <pxPortInitialiseStack>
 80039ca:	4602      	mov	r2, r0
 80039cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039ce:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 80039d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d002      	beq.n	80039dc <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80039d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039d8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80039da:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80039dc:	bf00      	nop
 80039de:	3720      	adds	r7, #32
 80039e0:	46bd      	mov	sp, r7
 80039e2:	bd80      	pop	{r7, pc}
 80039e4:	20001b2c 	.word	0x20001b2c
 80039e8:	20001b94 	.word	0x20001b94
 80039ec:	20001bfc 	.word	0x20001bfc

080039f0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80039f0:	b580      	push	{r7, lr}
 80039f2:	b082      	sub	sp, #8
 80039f4:	af00      	add	r7, sp, #0
 80039f6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80039f8:	f001 fa44 	bl	8004e84 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80039fc:	4b2d      	ldr	r3, [pc, #180]	; (8003ab4 <prvAddNewTaskToReadyList+0xc4>)
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	3301      	adds	r3, #1
 8003a02:	4a2c      	ldr	r2, [pc, #176]	; (8003ab4 <prvAddNewTaskToReadyList+0xc4>)
 8003a04:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8003a06:	4b2c      	ldr	r3, [pc, #176]	; (8003ab8 <prvAddNewTaskToReadyList+0xc8>)
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d109      	bne.n	8003a22 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8003a0e:	4a2a      	ldr	r2, [pc, #168]	; (8003ab8 <prvAddNewTaskToReadyList+0xc8>)
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003a14:	4b27      	ldr	r3, [pc, #156]	; (8003ab4 <prvAddNewTaskToReadyList+0xc4>)
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	2b01      	cmp	r3, #1
 8003a1a:	d110      	bne.n	8003a3e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8003a1c:	f000 fbf6 	bl	800420c <prvInitialiseTaskLists>
 8003a20:	e00d      	b.n	8003a3e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8003a22:	4b26      	ldr	r3, [pc, #152]	; (8003abc <prvAddNewTaskToReadyList+0xcc>)
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d109      	bne.n	8003a3e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003a2a:	4b23      	ldr	r3, [pc, #140]	; (8003ab8 <prvAddNewTaskToReadyList+0xc8>)
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a34:	429a      	cmp	r2, r3
 8003a36:	d802      	bhi.n	8003a3e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8003a38:	4a1f      	ldr	r2, [pc, #124]	; (8003ab8 <prvAddNewTaskToReadyList+0xc8>)
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8003a3e:	4b20      	ldr	r3, [pc, #128]	; (8003ac0 <prvAddNewTaskToReadyList+0xd0>)
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	3301      	adds	r3, #1
 8003a44:	4a1e      	ldr	r2, [pc, #120]	; (8003ac0 <prvAddNewTaskToReadyList+0xd0>)
 8003a46:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8003a48:	4b1d      	ldr	r3, [pc, #116]	; (8003ac0 <prvAddNewTaskToReadyList+0xd0>)
 8003a4a:	681a      	ldr	r2, [r3, #0]
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a54:	4b1b      	ldr	r3, [pc, #108]	; (8003ac4 <prvAddNewTaskToReadyList+0xd4>)
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	429a      	cmp	r2, r3
 8003a5a:	d903      	bls.n	8003a64 <prvAddNewTaskToReadyList+0x74>
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a60:	4a18      	ldr	r2, [pc, #96]	; (8003ac4 <prvAddNewTaskToReadyList+0xd4>)
 8003a62:	6013      	str	r3, [r2, #0]
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a68:	4613      	mov	r3, r2
 8003a6a:	009b      	lsls	r3, r3, #2
 8003a6c:	4413      	add	r3, r2
 8003a6e:	009b      	lsls	r3, r3, #2
 8003a70:	4a15      	ldr	r2, [pc, #84]	; (8003ac8 <prvAddNewTaskToReadyList+0xd8>)
 8003a72:	441a      	add	r2, r3
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	3304      	adds	r3, #4
 8003a78:	4619      	mov	r1, r3
 8003a7a:	4610      	mov	r0, r2
 8003a7c:	f7ff f8cd 	bl	8002c1a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8003a80:	f001 fa30 	bl	8004ee4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8003a84:	4b0d      	ldr	r3, [pc, #52]	; (8003abc <prvAddNewTaskToReadyList+0xcc>)
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d00e      	beq.n	8003aaa <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003a8c:	4b0a      	ldr	r3, [pc, #40]	; (8003ab8 <prvAddNewTaskToReadyList+0xc8>)
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a96:	429a      	cmp	r2, r3
 8003a98:	d207      	bcs.n	8003aaa <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8003a9a:	4b0c      	ldr	r3, [pc, #48]	; (8003acc <prvAddNewTaskToReadyList+0xdc>)
 8003a9c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003aa0:	601a      	str	r2, [r3, #0]
 8003aa2:	f3bf 8f4f 	dsb	sy
 8003aa6:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003aaa:	bf00      	nop
 8003aac:	3708      	adds	r7, #8
 8003aae:	46bd      	mov	sp, r7
 8003ab0:	bd80      	pop	{r7, pc}
 8003ab2:	bf00      	nop
 8003ab4:	20000db4 	.word	0x20000db4
 8003ab8:	200008e0 	.word	0x200008e0
 8003abc:	20000dc0 	.word	0x20000dc0
 8003ac0:	20000dd0 	.word	0x20000dd0
 8003ac4:	20000dbc 	.word	0x20000dbc
 8003ac8:	200008e4 	.word	0x200008e4
 8003acc:	e000ed04 	.word	0xe000ed04

08003ad0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003ad0:	b580      	push	{r7, lr}
 8003ad2:	b08a      	sub	sp, #40	; 0x28
 8003ad4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8003ad6:	2300      	movs	r3, #0
 8003ad8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8003ada:	2300      	movs	r3, #0
 8003adc:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8003ade:	463a      	mov	r2, r7
 8003ae0:	1d39      	adds	r1, r7, #4
 8003ae2:	f107 0308 	add.w	r3, r7, #8
 8003ae6:	4618      	mov	r0, r3
 8003ae8:	f7ff f836 	bl	8002b58 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8003aec:	6839      	ldr	r1, [r7, #0]
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	68ba      	ldr	r2, [r7, #8]
 8003af2:	9202      	str	r2, [sp, #8]
 8003af4:	9301      	str	r3, [sp, #4]
 8003af6:	2300      	movs	r3, #0
 8003af8:	9300      	str	r3, [sp, #0]
 8003afa:	2300      	movs	r3, #0
 8003afc:	460a      	mov	r2, r1
 8003afe:	4924      	ldr	r1, [pc, #144]	; (8003b90 <vTaskStartScheduler+0xc0>)
 8003b00:	4824      	ldr	r0, [pc, #144]	; (8003b94 <vTaskStartScheduler+0xc4>)
 8003b02:	f7ff fe35 	bl	8003770 <xTaskCreateStatic>
 8003b06:	4603      	mov	r3, r0
 8003b08:	4a23      	ldr	r2, [pc, #140]	; (8003b98 <vTaskStartScheduler+0xc8>)
 8003b0a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8003b0c:	4b22      	ldr	r3, [pc, #136]	; (8003b98 <vTaskStartScheduler+0xc8>)
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d002      	beq.n	8003b1a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8003b14:	2301      	movs	r3, #1
 8003b16:	617b      	str	r3, [r7, #20]
 8003b18:	e001      	b.n	8003b1e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8003b1a:	2300      	movs	r3, #0
 8003b1c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8003b1e:	697b      	ldr	r3, [r7, #20]
 8003b20:	2b01      	cmp	r3, #1
 8003b22:	d102      	bne.n	8003b2a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8003b24:	f000 fd1a 	bl	800455c <xTimerCreateTimerTask>
 8003b28:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8003b2a:	697b      	ldr	r3, [r7, #20]
 8003b2c:	2b01      	cmp	r3, #1
 8003b2e:	d11b      	bne.n	8003b68 <vTaskStartScheduler+0x98>
	__asm volatile
 8003b30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b34:	f383 8811 	msr	BASEPRI, r3
 8003b38:	f3bf 8f6f 	isb	sy
 8003b3c:	f3bf 8f4f 	dsb	sy
 8003b40:	613b      	str	r3, [r7, #16]
}
 8003b42:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8003b44:	4b15      	ldr	r3, [pc, #84]	; (8003b9c <vTaskStartScheduler+0xcc>)
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	3354      	adds	r3, #84	; 0x54
 8003b4a:	4a15      	ldr	r2, [pc, #84]	; (8003ba0 <vTaskStartScheduler+0xd0>)
 8003b4c:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8003b4e:	4b15      	ldr	r3, [pc, #84]	; (8003ba4 <vTaskStartScheduler+0xd4>)
 8003b50:	f04f 32ff 	mov.w	r2, #4294967295
 8003b54:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8003b56:	4b14      	ldr	r3, [pc, #80]	; (8003ba8 <vTaskStartScheduler+0xd8>)
 8003b58:	2201      	movs	r2, #1
 8003b5a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8003b5c:	4b13      	ldr	r3, [pc, #76]	; (8003bac <vTaskStartScheduler+0xdc>)
 8003b5e:	2200      	movs	r2, #0
 8003b60:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8003b62:	f001 f8ed 	bl	8004d40 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8003b66:	e00e      	b.n	8003b86 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003b68:	697b      	ldr	r3, [r7, #20]
 8003b6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b6e:	d10a      	bne.n	8003b86 <vTaskStartScheduler+0xb6>
	__asm volatile
 8003b70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b74:	f383 8811 	msr	BASEPRI, r3
 8003b78:	f3bf 8f6f 	isb	sy
 8003b7c:	f3bf 8f4f 	dsb	sy
 8003b80:	60fb      	str	r3, [r7, #12]
}
 8003b82:	bf00      	nop
 8003b84:	e7fe      	b.n	8003b84 <vTaskStartScheduler+0xb4>
}
 8003b86:	bf00      	nop
 8003b88:	3718      	adds	r7, #24
 8003b8a:	46bd      	mov	sp, r7
 8003b8c:	bd80      	pop	{r7, pc}
 8003b8e:	bf00      	nop
 8003b90:	08005768 	.word	0x08005768
 8003b94:	080041dd 	.word	0x080041dd
 8003b98:	20000dd8 	.word	0x20000dd8
 8003b9c:	200008e0 	.word	0x200008e0
 8003ba0:	2000005c 	.word	0x2000005c
 8003ba4:	20000dd4 	.word	0x20000dd4
 8003ba8:	20000dc0 	.word	0x20000dc0
 8003bac:	20000db8 	.word	0x20000db8

08003bb0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003bb0:	b480      	push	{r7}
 8003bb2:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8003bb4:	4b04      	ldr	r3, [pc, #16]	; (8003bc8 <vTaskSuspendAll+0x18>)
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	3301      	adds	r3, #1
 8003bba:	4a03      	ldr	r2, [pc, #12]	; (8003bc8 <vTaskSuspendAll+0x18>)
 8003bbc:	6013      	str	r3, [r2, #0]
}
 8003bbe:	bf00      	nop
 8003bc0:	46bd      	mov	sp, r7
 8003bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc6:	4770      	bx	lr
 8003bc8:	20000ddc 	.word	0x20000ddc

08003bcc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003bcc:	b580      	push	{r7, lr}
 8003bce:	b084      	sub	sp, #16
 8003bd0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8003bd2:	2300      	movs	r3, #0
 8003bd4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8003bd6:	2300      	movs	r3, #0
 8003bd8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8003bda:	4b42      	ldr	r3, [pc, #264]	; (8003ce4 <xTaskResumeAll+0x118>)
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d10a      	bne.n	8003bf8 <xTaskResumeAll+0x2c>
	__asm volatile
 8003be2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003be6:	f383 8811 	msr	BASEPRI, r3
 8003bea:	f3bf 8f6f 	isb	sy
 8003bee:	f3bf 8f4f 	dsb	sy
 8003bf2:	603b      	str	r3, [r7, #0]
}
 8003bf4:	bf00      	nop
 8003bf6:	e7fe      	b.n	8003bf6 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8003bf8:	f001 f944 	bl	8004e84 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8003bfc:	4b39      	ldr	r3, [pc, #228]	; (8003ce4 <xTaskResumeAll+0x118>)
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	3b01      	subs	r3, #1
 8003c02:	4a38      	ldr	r2, [pc, #224]	; (8003ce4 <xTaskResumeAll+0x118>)
 8003c04:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003c06:	4b37      	ldr	r3, [pc, #220]	; (8003ce4 <xTaskResumeAll+0x118>)
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d162      	bne.n	8003cd4 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003c0e:	4b36      	ldr	r3, [pc, #216]	; (8003ce8 <xTaskResumeAll+0x11c>)
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d05e      	beq.n	8003cd4 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003c16:	e02f      	b.n	8003c78 <xTaskResumeAll+0xac>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8003c18:	4b34      	ldr	r3, [pc, #208]	; (8003cec <xTaskResumeAll+0x120>)
 8003c1a:	68db      	ldr	r3, [r3, #12]
 8003c1c:	68db      	ldr	r3, [r3, #12]
 8003c1e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	3318      	adds	r3, #24
 8003c24:	4618      	mov	r0, r3
 8003c26:	f7ff f855 	bl	8002cd4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	3304      	adds	r3, #4
 8003c2e:	4618      	mov	r0, r3
 8003c30:	f7ff f850 	bl	8002cd4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c38:	4b2d      	ldr	r3, [pc, #180]	; (8003cf0 <xTaskResumeAll+0x124>)
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	429a      	cmp	r2, r3
 8003c3e:	d903      	bls.n	8003c48 <xTaskResumeAll+0x7c>
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c44:	4a2a      	ldr	r2, [pc, #168]	; (8003cf0 <xTaskResumeAll+0x124>)
 8003c46:	6013      	str	r3, [r2, #0]
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c4c:	4613      	mov	r3, r2
 8003c4e:	009b      	lsls	r3, r3, #2
 8003c50:	4413      	add	r3, r2
 8003c52:	009b      	lsls	r3, r3, #2
 8003c54:	4a27      	ldr	r2, [pc, #156]	; (8003cf4 <xTaskResumeAll+0x128>)
 8003c56:	441a      	add	r2, r3
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	3304      	adds	r3, #4
 8003c5c:	4619      	mov	r1, r3
 8003c5e:	4610      	mov	r0, r2
 8003c60:	f7fe ffdb 	bl	8002c1a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c68:	4b23      	ldr	r3, [pc, #140]	; (8003cf8 <xTaskResumeAll+0x12c>)
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c6e:	429a      	cmp	r2, r3
 8003c70:	d302      	bcc.n	8003c78 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8003c72:	4b22      	ldr	r3, [pc, #136]	; (8003cfc <xTaskResumeAll+0x130>)
 8003c74:	2201      	movs	r2, #1
 8003c76:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003c78:	4b1c      	ldr	r3, [pc, #112]	; (8003cec <xTaskResumeAll+0x120>)
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d1cb      	bne.n	8003c18 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d001      	beq.n	8003c8a <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8003c86:	f000 fb63 	bl	8004350 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8003c8a:	4b1d      	ldr	r3, [pc, #116]	; (8003d00 <xTaskResumeAll+0x134>)
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d010      	beq.n	8003cb8 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8003c96:	f000 f847 	bl	8003d28 <xTaskIncrementTick>
 8003c9a:	4603      	mov	r3, r0
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d002      	beq.n	8003ca6 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8003ca0:	4b16      	ldr	r3, [pc, #88]	; (8003cfc <xTaskResumeAll+0x130>)
 8003ca2:	2201      	movs	r2, #1
 8003ca4:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	3b01      	subs	r3, #1
 8003caa:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d1f1      	bne.n	8003c96 <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 8003cb2:	4b13      	ldr	r3, [pc, #76]	; (8003d00 <xTaskResumeAll+0x134>)
 8003cb4:	2200      	movs	r2, #0
 8003cb6:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8003cb8:	4b10      	ldr	r3, [pc, #64]	; (8003cfc <xTaskResumeAll+0x130>)
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d009      	beq.n	8003cd4 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8003cc0:	2301      	movs	r3, #1
 8003cc2:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8003cc4:	4b0f      	ldr	r3, [pc, #60]	; (8003d04 <xTaskResumeAll+0x138>)
 8003cc6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003cca:	601a      	str	r2, [r3, #0]
 8003ccc:	f3bf 8f4f 	dsb	sy
 8003cd0:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003cd4:	f001 f906 	bl	8004ee4 <vPortExitCritical>

	return xAlreadyYielded;
 8003cd8:	68bb      	ldr	r3, [r7, #8]
}
 8003cda:	4618      	mov	r0, r3
 8003cdc:	3710      	adds	r7, #16
 8003cde:	46bd      	mov	sp, r7
 8003ce0:	bd80      	pop	{r7, pc}
 8003ce2:	bf00      	nop
 8003ce4:	20000ddc 	.word	0x20000ddc
 8003ce8:	20000db4 	.word	0x20000db4
 8003cec:	20000d74 	.word	0x20000d74
 8003cf0:	20000dbc 	.word	0x20000dbc
 8003cf4:	200008e4 	.word	0x200008e4
 8003cf8:	200008e0 	.word	0x200008e0
 8003cfc:	20000dc8 	.word	0x20000dc8
 8003d00:	20000dc4 	.word	0x20000dc4
 8003d04:	e000ed04 	.word	0xe000ed04

08003d08 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8003d08:	b480      	push	{r7}
 8003d0a:	b083      	sub	sp, #12
 8003d0c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8003d0e:	4b05      	ldr	r3, [pc, #20]	; (8003d24 <xTaskGetTickCount+0x1c>)
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8003d14:	687b      	ldr	r3, [r7, #4]
}
 8003d16:	4618      	mov	r0, r3
 8003d18:	370c      	adds	r7, #12
 8003d1a:	46bd      	mov	sp, r7
 8003d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d20:	4770      	bx	lr
 8003d22:	bf00      	nop
 8003d24:	20000db8 	.word	0x20000db8

08003d28 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003d28:	b580      	push	{r7, lr}
 8003d2a:	b086      	sub	sp, #24
 8003d2c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8003d2e:	2300      	movs	r3, #0
 8003d30:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003d32:	4b51      	ldr	r3, [pc, #324]	; (8003e78 <xTaskIncrementTick+0x150>)
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	f040 808e 	bne.w	8003e58 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003d3c:	4b4f      	ldr	r3, [pc, #316]	; (8003e7c <xTaskIncrementTick+0x154>)
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	3301      	adds	r3, #1
 8003d42:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8003d44:	4a4d      	ldr	r2, [pc, #308]	; (8003e7c <xTaskIncrementTick+0x154>)
 8003d46:	693b      	ldr	r3, [r7, #16]
 8003d48:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003d4a:	693b      	ldr	r3, [r7, #16]
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d120      	bne.n	8003d92 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8003d50:	4b4b      	ldr	r3, [pc, #300]	; (8003e80 <xTaskIncrementTick+0x158>)
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d00a      	beq.n	8003d70 <xTaskIncrementTick+0x48>
	__asm volatile
 8003d5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d5e:	f383 8811 	msr	BASEPRI, r3
 8003d62:	f3bf 8f6f 	isb	sy
 8003d66:	f3bf 8f4f 	dsb	sy
 8003d6a:	603b      	str	r3, [r7, #0]
}
 8003d6c:	bf00      	nop
 8003d6e:	e7fe      	b.n	8003d6e <xTaskIncrementTick+0x46>
 8003d70:	4b43      	ldr	r3, [pc, #268]	; (8003e80 <xTaskIncrementTick+0x158>)
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	60fb      	str	r3, [r7, #12]
 8003d76:	4b43      	ldr	r3, [pc, #268]	; (8003e84 <xTaskIncrementTick+0x15c>)
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	4a41      	ldr	r2, [pc, #260]	; (8003e80 <xTaskIncrementTick+0x158>)
 8003d7c:	6013      	str	r3, [r2, #0]
 8003d7e:	4a41      	ldr	r2, [pc, #260]	; (8003e84 <xTaskIncrementTick+0x15c>)
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	6013      	str	r3, [r2, #0]
 8003d84:	4b40      	ldr	r3, [pc, #256]	; (8003e88 <xTaskIncrementTick+0x160>)
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	3301      	adds	r3, #1
 8003d8a:	4a3f      	ldr	r2, [pc, #252]	; (8003e88 <xTaskIncrementTick+0x160>)
 8003d8c:	6013      	str	r3, [r2, #0]
 8003d8e:	f000 fadf 	bl	8004350 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8003d92:	4b3e      	ldr	r3, [pc, #248]	; (8003e8c <xTaskIncrementTick+0x164>)
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	693a      	ldr	r2, [r7, #16]
 8003d98:	429a      	cmp	r2, r3
 8003d9a:	d34e      	bcc.n	8003e3a <xTaskIncrementTick+0x112>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003d9c:	4b38      	ldr	r3, [pc, #224]	; (8003e80 <xTaskIncrementTick+0x158>)
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d101      	bne.n	8003daa <xTaskIncrementTick+0x82>
 8003da6:	2301      	movs	r3, #1
 8003da8:	e000      	b.n	8003dac <xTaskIncrementTick+0x84>
 8003daa:	2300      	movs	r3, #0
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d004      	beq.n	8003dba <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003db0:	4b36      	ldr	r3, [pc, #216]	; (8003e8c <xTaskIncrementTick+0x164>)
 8003db2:	f04f 32ff 	mov.w	r2, #4294967295
 8003db6:	601a      	str	r2, [r3, #0]
					break;
 8003db8:	e03f      	b.n	8003e3a <xTaskIncrementTick+0x112>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003dba:	4b31      	ldr	r3, [pc, #196]	; (8003e80 <xTaskIncrementTick+0x158>)
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	68db      	ldr	r3, [r3, #12]
 8003dc0:	68db      	ldr	r3, [r3, #12]
 8003dc2:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003dc4:	68bb      	ldr	r3, [r7, #8]
 8003dc6:	685b      	ldr	r3, [r3, #4]
 8003dc8:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8003dca:	693a      	ldr	r2, [r7, #16]
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	429a      	cmp	r2, r3
 8003dd0:	d203      	bcs.n	8003dda <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8003dd2:	4a2e      	ldr	r2, [pc, #184]	; (8003e8c <xTaskIncrementTick+0x164>)
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	6013      	str	r3, [r2, #0]
						break;
 8003dd8:	e02f      	b.n	8003e3a <xTaskIncrementTick+0x112>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003dda:	68bb      	ldr	r3, [r7, #8]
 8003ddc:	3304      	adds	r3, #4
 8003dde:	4618      	mov	r0, r3
 8003de0:	f7fe ff78 	bl	8002cd4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003de4:	68bb      	ldr	r3, [r7, #8]
 8003de6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d004      	beq.n	8003df6 <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003dec:	68bb      	ldr	r3, [r7, #8]
 8003dee:	3318      	adds	r3, #24
 8003df0:	4618      	mov	r0, r3
 8003df2:	f7fe ff6f 	bl	8002cd4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8003df6:	68bb      	ldr	r3, [r7, #8]
 8003df8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003dfa:	4b25      	ldr	r3, [pc, #148]	; (8003e90 <xTaskIncrementTick+0x168>)
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	429a      	cmp	r2, r3
 8003e00:	d903      	bls.n	8003e0a <xTaskIncrementTick+0xe2>
 8003e02:	68bb      	ldr	r3, [r7, #8]
 8003e04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e06:	4a22      	ldr	r2, [pc, #136]	; (8003e90 <xTaskIncrementTick+0x168>)
 8003e08:	6013      	str	r3, [r2, #0]
 8003e0a:	68bb      	ldr	r3, [r7, #8]
 8003e0c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e0e:	4613      	mov	r3, r2
 8003e10:	009b      	lsls	r3, r3, #2
 8003e12:	4413      	add	r3, r2
 8003e14:	009b      	lsls	r3, r3, #2
 8003e16:	4a1f      	ldr	r2, [pc, #124]	; (8003e94 <xTaskIncrementTick+0x16c>)
 8003e18:	441a      	add	r2, r3
 8003e1a:	68bb      	ldr	r3, [r7, #8]
 8003e1c:	3304      	adds	r3, #4
 8003e1e:	4619      	mov	r1, r3
 8003e20:	4610      	mov	r0, r2
 8003e22:	f7fe fefa 	bl	8002c1a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003e26:	68bb      	ldr	r3, [r7, #8]
 8003e28:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e2a:	4b1b      	ldr	r3, [pc, #108]	; (8003e98 <xTaskIncrementTick+0x170>)
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e30:	429a      	cmp	r2, r3
 8003e32:	d3b3      	bcc.n	8003d9c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8003e34:	2301      	movs	r3, #1
 8003e36:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003e38:	e7b0      	b.n	8003d9c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003e3a:	4b17      	ldr	r3, [pc, #92]	; (8003e98 <xTaskIncrementTick+0x170>)
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e40:	4914      	ldr	r1, [pc, #80]	; (8003e94 <xTaskIncrementTick+0x16c>)
 8003e42:	4613      	mov	r3, r2
 8003e44:	009b      	lsls	r3, r3, #2
 8003e46:	4413      	add	r3, r2
 8003e48:	009b      	lsls	r3, r3, #2
 8003e4a:	440b      	add	r3, r1
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	2b01      	cmp	r3, #1
 8003e50:	d907      	bls.n	8003e62 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8003e52:	2301      	movs	r3, #1
 8003e54:	617b      	str	r3, [r7, #20]
 8003e56:	e004      	b.n	8003e62 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8003e58:	4b10      	ldr	r3, [pc, #64]	; (8003e9c <xTaskIncrementTick+0x174>)
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	3301      	adds	r3, #1
 8003e5e:	4a0f      	ldr	r2, [pc, #60]	; (8003e9c <xTaskIncrementTick+0x174>)
 8003e60:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8003e62:	4b0f      	ldr	r3, [pc, #60]	; (8003ea0 <xTaskIncrementTick+0x178>)
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d001      	beq.n	8003e6e <xTaskIncrementTick+0x146>
		{
			xSwitchRequired = pdTRUE;
 8003e6a:	2301      	movs	r3, #1
 8003e6c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8003e6e:	697b      	ldr	r3, [r7, #20]
}
 8003e70:	4618      	mov	r0, r3
 8003e72:	3718      	adds	r7, #24
 8003e74:	46bd      	mov	sp, r7
 8003e76:	bd80      	pop	{r7, pc}
 8003e78:	20000ddc 	.word	0x20000ddc
 8003e7c:	20000db8 	.word	0x20000db8
 8003e80:	20000d6c 	.word	0x20000d6c
 8003e84:	20000d70 	.word	0x20000d70
 8003e88:	20000dcc 	.word	0x20000dcc
 8003e8c:	20000dd4 	.word	0x20000dd4
 8003e90:	20000dbc 	.word	0x20000dbc
 8003e94:	200008e4 	.word	0x200008e4
 8003e98:	200008e0 	.word	0x200008e0
 8003e9c:	20000dc4 	.word	0x20000dc4
 8003ea0:	20000dc8 	.word	0x20000dc8

08003ea4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003ea4:	b480      	push	{r7}
 8003ea6:	b085      	sub	sp, #20
 8003ea8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003eaa:	4b2a      	ldr	r3, [pc, #168]	; (8003f54 <vTaskSwitchContext+0xb0>)
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d003      	beq.n	8003eba <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8003eb2:	4b29      	ldr	r3, [pc, #164]	; (8003f58 <vTaskSwitchContext+0xb4>)
 8003eb4:	2201      	movs	r2, #1
 8003eb6:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8003eb8:	e046      	b.n	8003f48 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 8003eba:	4b27      	ldr	r3, [pc, #156]	; (8003f58 <vTaskSwitchContext+0xb4>)
 8003ebc:	2200      	movs	r2, #0
 8003ebe:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8003ec0:	4b26      	ldr	r3, [pc, #152]	; (8003f5c <vTaskSwitchContext+0xb8>)
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	60fb      	str	r3, [r7, #12]
 8003ec6:	e010      	b.n	8003eea <vTaskSwitchContext+0x46>
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d10a      	bne.n	8003ee4 <vTaskSwitchContext+0x40>
	__asm volatile
 8003ece:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ed2:	f383 8811 	msr	BASEPRI, r3
 8003ed6:	f3bf 8f6f 	isb	sy
 8003eda:	f3bf 8f4f 	dsb	sy
 8003ede:	607b      	str	r3, [r7, #4]
}
 8003ee0:	bf00      	nop
 8003ee2:	e7fe      	b.n	8003ee2 <vTaskSwitchContext+0x3e>
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	3b01      	subs	r3, #1
 8003ee8:	60fb      	str	r3, [r7, #12]
 8003eea:	491d      	ldr	r1, [pc, #116]	; (8003f60 <vTaskSwitchContext+0xbc>)
 8003eec:	68fa      	ldr	r2, [r7, #12]
 8003eee:	4613      	mov	r3, r2
 8003ef0:	009b      	lsls	r3, r3, #2
 8003ef2:	4413      	add	r3, r2
 8003ef4:	009b      	lsls	r3, r3, #2
 8003ef6:	440b      	add	r3, r1
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d0e4      	beq.n	8003ec8 <vTaskSwitchContext+0x24>
 8003efe:	68fa      	ldr	r2, [r7, #12]
 8003f00:	4613      	mov	r3, r2
 8003f02:	009b      	lsls	r3, r3, #2
 8003f04:	4413      	add	r3, r2
 8003f06:	009b      	lsls	r3, r3, #2
 8003f08:	4a15      	ldr	r2, [pc, #84]	; (8003f60 <vTaskSwitchContext+0xbc>)
 8003f0a:	4413      	add	r3, r2
 8003f0c:	60bb      	str	r3, [r7, #8]
 8003f0e:	68bb      	ldr	r3, [r7, #8]
 8003f10:	685b      	ldr	r3, [r3, #4]
 8003f12:	685a      	ldr	r2, [r3, #4]
 8003f14:	68bb      	ldr	r3, [r7, #8]
 8003f16:	605a      	str	r2, [r3, #4]
 8003f18:	68bb      	ldr	r3, [r7, #8]
 8003f1a:	685a      	ldr	r2, [r3, #4]
 8003f1c:	68bb      	ldr	r3, [r7, #8]
 8003f1e:	3308      	adds	r3, #8
 8003f20:	429a      	cmp	r2, r3
 8003f22:	d104      	bne.n	8003f2e <vTaskSwitchContext+0x8a>
 8003f24:	68bb      	ldr	r3, [r7, #8]
 8003f26:	685b      	ldr	r3, [r3, #4]
 8003f28:	685a      	ldr	r2, [r3, #4]
 8003f2a:	68bb      	ldr	r3, [r7, #8]
 8003f2c:	605a      	str	r2, [r3, #4]
 8003f2e:	68bb      	ldr	r3, [r7, #8]
 8003f30:	685b      	ldr	r3, [r3, #4]
 8003f32:	68db      	ldr	r3, [r3, #12]
 8003f34:	4a0b      	ldr	r2, [pc, #44]	; (8003f64 <vTaskSwitchContext+0xc0>)
 8003f36:	6013      	str	r3, [r2, #0]
 8003f38:	4a08      	ldr	r2, [pc, #32]	; (8003f5c <vTaskSwitchContext+0xb8>)
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8003f3e:	4b09      	ldr	r3, [pc, #36]	; (8003f64 <vTaskSwitchContext+0xc0>)
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	3354      	adds	r3, #84	; 0x54
 8003f44:	4a08      	ldr	r2, [pc, #32]	; (8003f68 <vTaskSwitchContext+0xc4>)
 8003f46:	6013      	str	r3, [r2, #0]
}
 8003f48:	bf00      	nop
 8003f4a:	3714      	adds	r7, #20
 8003f4c:	46bd      	mov	sp, r7
 8003f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f52:	4770      	bx	lr
 8003f54:	20000ddc 	.word	0x20000ddc
 8003f58:	20000dc8 	.word	0x20000dc8
 8003f5c:	20000dbc 	.word	0x20000dbc
 8003f60:	200008e4 	.word	0x200008e4
 8003f64:	200008e0 	.word	0x200008e0
 8003f68:	2000005c 	.word	0x2000005c

08003f6c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8003f6c:	b580      	push	{r7, lr}
 8003f6e:	b084      	sub	sp, #16
 8003f70:	af00      	add	r7, sp, #0
 8003f72:	6078      	str	r0, [r7, #4]
 8003f74:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d10a      	bne.n	8003f92 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8003f7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f80:	f383 8811 	msr	BASEPRI, r3
 8003f84:	f3bf 8f6f 	isb	sy
 8003f88:	f3bf 8f4f 	dsb	sy
 8003f8c:	60fb      	str	r3, [r7, #12]
}
 8003f8e:	bf00      	nop
 8003f90:	e7fe      	b.n	8003f90 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003f92:	4b07      	ldr	r3, [pc, #28]	; (8003fb0 <vTaskPlaceOnEventList+0x44>)
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	3318      	adds	r3, #24
 8003f98:	4619      	mov	r1, r3
 8003f9a:	6878      	ldr	r0, [r7, #4]
 8003f9c:	f7fe fe61 	bl	8002c62 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003fa0:	2101      	movs	r1, #1
 8003fa2:	6838      	ldr	r0, [r7, #0]
 8003fa4:	f000 fa86 	bl	80044b4 <prvAddCurrentTaskToDelayedList>
}
 8003fa8:	bf00      	nop
 8003faa:	3710      	adds	r7, #16
 8003fac:	46bd      	mov	sp, r7
 8003fae:	bd80      	pop	{r7, pc}
 8003fb0:	200008e0 	.word	0x200008e0

08003fb4 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003fb4:	b580      	push	{r7, lr}
 8003fb6:	b086      	sub	sp, #24
 8003fb8:	af00      	add	r7, sp, #0
 8003fba:	60f8      	str	r0, [r7, #12]
 8003fbc:	60b9      	str	r1, [r7, #8]
 8003fbe:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d10a      	bne.n	8003fdc <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8003fc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fca:	f383 8811 	msr	BASEPRI, r3
 8003fce:	f3bf 8f6f 	isb	sy
 8003fd2:	f3bf 8f4f 	dsb	sy
 8003fd6:	617b      	str	r3, [r7, #20]
}
 8003fd8:	bf00      	nop
 8003fda:	e7fe      	b.n	8003fda <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003fdc:	4b0a      	ldr	r3, [pc, #40]	; (8004008 <vTaskPlaceOnEventListRestricted+0x54>)
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	3318      	adds	r3, #24
 8003fe2:	4619      	mov	r1, r3
 8003fe4:	68f8      	ldr	r0, [r7, #12]
 8003fe6:	f7fe fe18 	bl	8002c1a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d002      	beq.n	8003ff6 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8003ff0:	f04f 33ff 	mov.w	r3, #4294967295
 8003ff4:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8003ff6:	6879      	ldr	r1, [r7, #4]
 8003ff8:	68b8      	ldr	r0, [r7, #8]
 8003ffa:	f000 fa5b 	bl	80044b4 <prvAddCurrentTaskToDelayedList>
	}
 8003ffe:	bf00      	nop
 8004000:	3718      	adds	r7, #24
 8004002:	46bd      	mov	sp, r7
 8004004:	bd80      	pop	{r7, pc}
 8004006:	bf00      	nop
 8004008:	200008e0 	.word	0x200008e0

0800400c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800400c:	b580      	push	{r7, lr}
 800400e:	b086      	sub	sp, #24
 8004010:	af00      	add	r7, sp, #0
 8004012:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	68db      	ldr	r3, [r3, #12]
 8004018:	68db      	ldr	r3, [r3, #12]
 800401a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800401c:	693b      	ldr	r3, [r7, #16]
 800401e:	2b00      	cmp	r3, #0
 8004020:	d10a      	bne.n	8004038 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8004022:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004026:	f383 8811 	msr	BASEPRI, r3
 800402a:	f3bf 8f6f 	isb	sy
 800402e:	f3bf 8f4f 	dsb	sy
 8004032:	60fb      	str	r3, [r7, #12]
}
 8004034:	bf00      	nop
 8004036:	e7fe      	b.n	8004036 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8004038:	693b      	ldr	r3, [r7, #16]
 800403a:	3318      	adds	r3, #24
 800403c:	4618      	mov	r0, r3
 800403e:	f7fe fe49 	bl	8002cd4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004042:	4b1e      	ldr	r3, [pc, #120]	; (80040bc <xTaskRemoveFromEventList+0xb0>)
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	2b00      	cmp	r3, #0
 8004048:	d11d      	bne.n	8004086 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800404a:	693b      	ldr	r3, [r7, #16]
 800404c:	3304      	adds	r3, #4
 800404e:	4618      	mov	r0, r3
 8004050:	f7fe fe40 	bl	8002cd4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8004054:	693b      	ldr	r3, [r7, #16]
 8004056:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004058:	4b19      	ldr	r3, [pc, #100]	; (80040c0 <xTaskRemoveFromEventList+0xb4>)
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	429a      	cmp	r2, r3
 800405e:	d903      	bls.n	8004068 <xTaskRemoveFromEventList+0x5c>
 8004060:	693b      	ldr	r3, [r7, #16]
 8004062:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004064:	4a16      	ldr	r2, [pc, #88]	; (80040c0 <xTaskRemoveFromEventList+0xb4>)
 8004066:	6013      	str	r3, [r2, #0]
 8004068:	693b      	ldr	r3, [r7, #16]
 800406a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800406c:	4613      	mov	r3, r2
 800406e:	009b      	lsls	r3, r3, #2
 8004070:	4413      	add	r3, r2
 8004072:	009b      	lsls	r3, r3, #2
 8004074:	4a13      	ldr	r2, [pc, #76]	; (80040c4 <xTaskRemoveFromEventList+0xb8>)
 8004076:	441a      	add	r2, r3
 8004078:	693b      	ldr	r3, [r7, #16]
 800407a:	3304      	adds	r3, #4
 800407c:	4619      	mov	r1, r3
 800407e:	4610      	mov	r0, r2
 8004080:	f7fe fdcb 	bl	8002c1a <vListInsertEnd>
 8004084:	e005      	b.n	8004092 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8004086:	693b      	ldr	r3, [r7, #16]
 8004088:	3318      	adds	r3, #24
 800408a:	4619      	mov	r1, r3
 800408c:	480e      	ldr	r0, [pc, #56]	; (80040c8 <xTaskRemoveFromEventList+0xbc>)
 800408e:	f7fe fdc4 	bl	8002c1a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004092:	693b      	ldr	r3, [r7, #16]
 8004094:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004096:	4b0d      	ldr	r3, [pc, #52]	; (80040cc <xTaskRemoveFromEventList+0xc0>)
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800409c:	429a      	cmp	r2, r3
 800409e:	d905      	bls.n	80040ac <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80040a0:	2301      	movs	r3, #1
 80040a2:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80040a4:	4b0a      	ldr	r3, [pc, #40]	; (80040d0 <xTaskRemoveFromEventList+0xc4>)
 80040a6:	2201      	movs	r2, #1
 80040a8:	601a      	str	r2, [r3, #0]
 80040aa:	e001      	b.n	80040b0 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 80040ac:	2300      	movs	r3, #0
 80040ae:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 80040b0:	697b      	ldr	r3, [r7, #20]
}
 80040b2:	4618      	mov	r0, r3
 80040b4:	3718      	adds	r7, #24
 80040b6:	46bd      	mov	sp, r7
 80040b8:	bd80      	pop	{r7, pc}
 80040ba:	bf00      	nop
 80040bc:	20000ddc 	.word	0x20000ddc
 80040c0:	20000dbc 	.word	0x20000dbc
 80040c4:	200008e4 	.word	0x200008e4
 80040c8:	20000d74 	.word	0x20000d74
 80040cc:	200008e0 	.word	0x200008e0
 80040d0:	20000dc8 	.word	0x20000dc8

080040d4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80040d4:	b480      	push	{r7}
 80040d6:	b083      	sub	sp, #12
 80040d8:	af00      	add	r7, sp, #0
 80040da:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80040dc:	4b06      	ldr	r3, [pc, #24]	; (80040f8 <vTaskInternalSetTimeOutState+0x24>)
 80040de:	681a      	ldr	r2, [r3, #0]
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80040e4:	4b05      	ldr	r3, [pc, #20]	; (80040fc <vTaskInternalSetTimeOutState+0x28>)
 80040e6:	681a      	ldr	r2, [r3, #0]
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	605a      	str	r2, [r3, #4]
}
 80040ec:	bf00      	nop
 80040ee:	370c      	adds	r7, #12
 80040f0:	46bd      	mov	sp, r7
 80040f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040f6:	4770      	bx	lr
 80040f8:	20000dcc 	.word	0x20000dcc
 80040fc:	20000db8 	.word	0x20000db8

08004100 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8004100:	b580      	push	{r7, lr}
 8004102:	b088      	sub	sp, #32
 8004104:	af00      	add	r7, sp, #0
 8004106:	6078      	str	r0, [r7, #4]
 8004108:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	2b00      	cmp	r3, #0
 800410e:	d10a      	bne.n	8004126 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8004110:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004114:	f383 8811 	msr	BASEPRI, r3
 8004118:	f3bf 8f6f 	isb	sy
 800411c:	f3bf 8f4f 	dsb	sy
 8004120:	613b      	str	r3, [r7, #16]
}
 8004122:	bf00      	nop
 8004124:	e7fe      	b.n	8004124 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8004126:	683b      	ldr	r3, [r7, #0]
 8004128:	2b00      	cmp	r3, #0
 800412a:	d10a      	bne.n	8004142 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800412c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004130:	f383 8811 	msr	BASEPRI, r3
 8004134:	f3bf 8f6f 	isb	sy
 8004138:	f3bf 8f4f 	dsb	sy
 800413c:	60fb      	str	r3, [r7, #12]
}
 800413e:	bf00      	nop
 8004140:	e7fe      	b.n	8004140 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8004142:	f000 fe9f 	bl	8004e84 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8004146:	4b1d      	ldr	r3, [pc, #116]	; (80041bc <xTaskCheckForTimeOut+0xbc>)
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	685b      	ldr	r3, [r3, #4]
 8004150:	69ba      	ldr	r2, [r7, #24]
 8004152:	1ad3      	subs	r3, r2, r3
 8004154:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8004156:	683b      	ldr	r3, [r7, #0]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800415e:	d102      	bne.n	8004166 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8004160:	2300      	movs	r3, #0
 8004162:	61fb      	str	r3, [r7, #28]
 8004164:	e023      	b.n	80041ae <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681a      	ldr	r2, [r3, #0]
 800416a:	4b15      	ldr	r3, [pc, #84]	; (80041c0 <xTaskCheckForTimeOut+0xc0>)
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	429a      	cmp	r2, r3
 8004170:	d007      	beq.n	8004182 <xTaskCheckForTimeOut+0x82>
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	685b      	ldr	r3, [r3, #4]
 8004176:	69ba      	ldr	r2, [r7, #24]
 8004178:	429a      	cmp	r2, r3
 800417a:	d302      	bcc.n	8004182 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800417c:	2301      	movs	r3, #1
 800417e:	61fb      	str	r3, [r7, #28]
 8004180:	e015      	b.n	80041ae <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8004182:	683b      	ldr	r3, [r7, #0]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	697a      	ldr	r2, [r7, #20]
 8004188:	429a      	cmp	r2, r3
 800418a:	d20b      	bcs.n	80041a4 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800418c:	683b      	ldr	r3, [r7, #0]
 800418e:	681a      	ldr	r2, [r3, #0]
 8004190:	697b      	ldr	r3, [r7, #20]
 8004192:	1ad2      	subs	r2, r2, r3
 8004194:	683b      	ldr	r3, [r7, #0]
 8004196:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8004198:	6878      	ldr	r0, [r7, #4]
 800419a:	f7ff ff9b 	bl	80040d4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800419e:	2300      	movs	r3, #0
 80041a0:	61fb      	str	r3, [r7, #28]
 80041a2:	e004      	b.n	80041ae <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 80041a4:	683b      	ldr	r3, [r7, #0]
 80041a6:	2200      	movs	r2, #0
 80041a8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80041aa:	2301      	movs	r3, #1
 80041ac:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80041ae:	f000 fe99 	bl	8004ee4 <vPortExitCritical>

	return xReturn;
 80041b2:	69fb      	ldr	r3, [r7, #28]
}
 80041b4:	4618      	mov	r0, r3
 80041b6:	3720      	adds	r7, #32
 80041b8:	46bd      	mov	sp, r7
 80041ba:	bd80      	pop	{r7, pc}
 80041bc:	20000db8 	.word	0x20000db8
 80041c0:	20000dcc 	.word	0x20000dcc

080041c4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80041c4:	b480      	push	{r7}
 80041c6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80041c8:	4b03      	ldr	r3, [pc, #12]	; (80041d8 <vTaskMissedYield+0x14>)
 80041ca:	2201      	movs	r2, #1
 80041cc:	601a      	str	r2, [r3, #0]
}
 80041ce:	bf00      	nop
 80041d0:	46bd      	mov	sp, r7
 80041d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d6:	4770      	bx	lr
 80041d8:	20000dc8 	.word	0x20000dc8

080041dc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80041dc:	b580      	push	{r7, lr}
 80041de:	b082      	sub	sp, #8
 80041e0:	af00      	add	r7, sp, #0
 80041e2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80041e4:	f000 f852 	bl	800428c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80041e8:	4b06      	ldr	r3, [pc, #24]	; (8004204 <prvIdleTask+0x28>)
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	2b01      	cmp	r3, #1
 80041ee:	d9f9      	bls.n	80041e4 <prvIdleTask+0x8>
			{
				taskYIELD();
 80041f0:	4b05      	ldr	r3, [pc, #20]	; (8004208 <prvIdleTask+0x2c>)
 80041f2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80041f6:	601a      	str	r2, [r3, #0]
 80041f8:	f3bf 8f4f 	dsb	sy
 80041fc:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8004200:	e7f0      	b.n	80041e4 <prvIdleTask+0x8>
 8004202:	bf00      	nop
 8004204:	200008e4 	.word	0x200008e4
 8004208:	e000ed04 	.word	0xe000ed04

0800420c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800420c:	b580      	push	{r7, lr}
 800420e:	b082      	sub	sp, #8
 8004210:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004212:	2300      	movs	r3, #0
 8004214:	607b      	str	r3, [r7, #4]
 8004216:	e00c      	b.n	8004232 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004218:	687a      	ldr	r2, [r7, #4]
 800421a:	4613      	mov	r3, r2
 800421c:	009b      	lsls	r3, r3, #2
 800421e:	4413      	add	r3, r2
 8004220:	009b      	lsls	r3, r3, #2
 8004222:	4a12      	ldr	r2, [pc, #72]	; (800426c <prvInitialiseTaskLists+0x60>)
 8004224:	4413      	add	r3, r2
 8004226:	4618      	mov	r0, r3
 8004228:	f7fe fcca 	bl	8002bc0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	3301      	adds	r3, #1
 8004230:	607b      	str	r3, [r7, #4]
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	2b37      	cmp	r3, #55	; 0x37
 8004236:	d9ef      	bls.n	8004218 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004238:	480d      	ldr	r0, [pc, #52]	; (8004270 <prvInitialiseTaskLists+0x64>)
 800423a:	f7fe fcc1 	bl	8002bc0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800423e:	480d      	ldr	r0, [pc, #52]	; (8004274 <prvInitialiseTaskLists+0x68>)
 8004240:	f7fe fcbe 	bl	8002bc0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004244:	480c      	ldr	r0, [pc, #48]	; (8004278 <prvInitialiseTaskLists+0x6c>)
 8004246:	f7fe fcbb 	bl	8002bc0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800424a:	480c      	ldr	r0, [pc, #48]	; (800427c <prvInitialiseTaskLists+0x70>)
 800424c:	f7fe fcb8 	bl	8002bc0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004250:	480b      	ldr	r0, [pc, #44]	; (8004280 <prvInitialiseTaskLists+0x74>)
 8004252:	f7fe fcb5 	bl	8002bc0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8004256:	4b0b      	ldr	r3, [pc, #44]	; (8004284 <prvInitialiseTaskLists+0x78>)
 8004258:	4a05      	ldr	r2, [pc, #20]	; (8004270 <prvInitialiseTaskLists+0x64>)
 800425a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800425c:	4b0a      	ldr	r3, [pc, #40]	; (8004288 <prvInitialiseTaskLists+0x7c>)
 800425e:	4a05      	ldr	r2, [pc, #20]	; (8004274 <prvInitialiseTaskLists+0x68>)
 8004260:	601a      	str	r2, [r3, #0]
}
 8004262:	bf00      	nop
 8004264:	3708      	adds	r7, #8
 8004266:	46bd      	mov	sp, r7
 8004268:	bd80      	pop	{r7, pc}
 800426a:	bf00      	nop
 800426c:	200008e4 	.word	0x200008e4
 8004270:	20000d44 	.word	0x20000d44
 8004274:	20000d58 	.word	0x20000d58
 8004278:	20000d74 	.word	0x20000d74
 800427c:	20000d88 	.word	0x20000d88
 8004280:	20000da0 	.word	0x20000da0
 8004284:	20000d6c 	.word	0x20000d6c
 8004288:	20000d70 	.word	0x20000d70

0800428c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800428c:	b580      	push	{r7, lr}
 800428e:	b082      	sub	sp, #8
 8004290:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004292:	e019      	b.n	80042c8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8004294:	f000 fdf6 	bl	8004e84 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8004298:	4b10      	ldr	r3, [pc, #64]	; (80042dc <prvCheckTasksWaitingTermination+0x50>)
 800429a:	68db      	ldr	r3, [r3, #12]
 800429c:	68db      	ldr	r3, [r3, #12]
 800429e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	3304      	adds	r3, #4
 80042a4:	4618      	mov	r0, r3
 80042a6:	f7fe fd15 	bl	8002cd4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80042aa:	4b0d      	ldr	r3, [pc, #52]	; (80042e0 <prvCheckTasksWaitingTermination+0x54>)
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	3b01      	subs	r3, #1
 80042b0:	4a0b      	ldr	r2, [pc, #44]	; (80042e0 <prvCheckTasksWaitingTermination+0x54>)
 80042b2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80042b4:	4b0b      	ldr	r3, [pc, #44]	; (80042e4 <prvCheckTasksWaitingTermination+0x58>)
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	3b01      	subs	r3, #1
 80042ba:	4a0a      	ldr	r2, [pc, #40]	; (80042e4 <prvCheckTasksWaitingTermination+0x58>)
 80042bc:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80042be:	f000 fe11 	bl	8004ee4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80042c2:	6878      	ldr	r0, [r7, #4]
 80042c4:	f000 f810 	bl	80042e8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80042c8:	4b06      	ldr	r3, [pc, #24]	; (80042e4 <prvCheckTasksWaitingTermination+0x58>)
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d1e1      	bne.n	8004294 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80042d0:	bf00      	nop
 80042d2:	bf00      	nop
 80042d4:	3708      	adds	r7, #8
 80042d6:	46bd      	mov	sp, r7
 80042d8:	bd80      	pop	{r7, pc}
 80042da:	bf00      	nop
 80042dc:	20000d88 	.word	0x20000d88
 80042e0:	20000db4 	.word	0x20000db4
 80042e4:	20000d9c 	.word	0x20000d9c

080042e8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80042e8:	b580      	push	{r7, lr}
 80042ea:	b084      	sub	sp, #16
 80042ec:	af00      	add	r7, sp, #0
 80042ee:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	3354      	adds	r3, #84	; 0x54
 80042f4:	4618      	mov	r0, r3
 80042f6:	f001 f8c9 	bl	800548c <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 8004300:	2b00      	cmp	r3, #0
 8004302:	d108      	bne.n	8004316 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004308:	4618      	mov	r0, r3
 800430a:	f000 ffa1 	bl	8005250 <vPortFree>
				vPortFree( pxTCB );
 800430e:	6878      	ldr	r0, [r7, #4]
 8004310:	f000 ff9e 	bl	8005250 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8004314:	e018      	b.n	8004348 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 800431c:	2b01      	cmp	r3, #1
 800431e:	d103      	bne.n	8004328 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8004320:	6878      	ldr	r0, [r7, #4]
 8004322:	f000 ff95 	bl	8005250 <vPortFree>
	}
 8004326:	e00f      	b.n	8004348 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 800432e:	2b02      	cmp	r3, #2
 8004330:	d00a      	beq.n	8004348 <prvDeleteTCB+0x60>
	__asm volatile
 8004332:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004336:	f383 8811 	msr	BASEPRI, r3
 800433a:	f3bf 8f6f 	isb	sy
 800433e:	f3bf 8f4f 	dsb	sy
 8004342:	60fb      	str	r3, [r7, #12]
}
 8004344:	bf00      	nop
 8004346:	e7fe      	b.n	8004346 <prvDeleteTCB+0x5e>
	}
 8004348:	bf00      	nop
 800434a:	3710      	adds	r7, #16
 800434c:	46bd      	mov	sp, r7
 800434e:	bd80      	pop	{r7, pc}

08004350 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004350:	b480      	push	{r7}
 8004352:	b083      	sub	sp, #12
 8004354:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004356:	4b0f      	ldr	r3, [pc, #60]	; (8004394 <prvResetNextTaskUnblockTime+0x44>)
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	2b00      	cmp	r3, #0
 800435e:	d101      	bne.n	8004364 <prvResetNextTaskUnblockTime+0x14>
 8004360:	2301      	movs	r3, #1
 8004362:	e000      	b.n	8004366 <prvResetNextTaskUnblockTime+0x16>
 8004364:	2300      	movs	r3, #0
 8004366:	2b00      	cmp	r3, #0
 8004368:	d004      	beq.n	8004374 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800436a:	4b0b      	ldr	r3, [pc, #44]	; (8004398 <prvResetNextTaskUnblockTime+0x48>)
 800436c:	f04f 32ff 	mov.w	r2, #4294967295
 8004370:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004372:	e008      	b.n	8004386 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8004374:	4b07      	ldr	r3, [pc, #28]	; (8004394 <prvResetNextTaskUnblockTime+0x44>)
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	68db      	ldr	r3, [r3, #12]
 800437a:	68db      	ldr	r3, [r3, #12]
 800437c:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	685b      	ldr	r3, [r3, #4]
 8004382:	4a05      	ldr	r2, [pc, #20]	; (8004398 <prvResetNextTaskUnblockTime+0x48>)
 8004384:	6013      	str	r3, [r2, #0]
}
 8004386:	bf00      	nop
 8004388:	370c      	adds	r7, #12
 800438a:	46bd      	mov	sp, r7
 800438c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004390:	4770      	bx	lr
 8004392:	bf00      	nop
 8004394:	20000d6c 	.word	0x20000d6c
 8004398:	20000dd4 	.word	0x20000dd4

0800439c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800439c:	b480      	push	{r7}
 800439e:	b083      	sub	sp, #12
 80043a0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80043a2:	4b0b      	ldr	r3, [pc, #44]	; (80043d0 <xTaskGetSchedulerState+0x34>)
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d102      	bne.n	80043b0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80043aa:	2301      	movs	r3, #1
 80043ac:	607b      	str	r3, [r7, #4]
 80043ae:	e008      	b.n	80043c2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80043b0:	4b08      	ldr	r3, [pc, #32]	; (80043d4 <xTaskGetSchedulerState+0x38>)
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d102      	bne.n	80043be <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80043b8:	2302      	movs	r3, #2
 80043ba:	607b      	str	r3, [r7, #4]
 80043bc:	e001      	b.n	80043c2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80043be:	2300      	movs	r3, #0
 80043c0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80043c2:	687b      	ldr	r3, [r7, #4]
	}
 80043c4:	4618      	mov	r0, r3
 80043c6:	370c      	adds	r7, #12
 80043c8:	46bd      	mov	sp, r7
 80043ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ce:	4770      	bx	lr
 80043d0:	20000dc0 	.word	0x20000dc0
 80043d4:	20000ddc 	.word	0x20000ddc

080043d8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80043d8:	b580      	push	{r7, lr}
 80043da:	b086      	sub	sp, #24
 80043dc:	af00      	add	r7, sp, #0
 80043de:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80043e4:	2300      	movs	r3, #0
 80043e6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d056      	beq.n	800449c <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80043ee:	4b2e      	ldr	r3, [pc, #184]	; (80044a8 <xTaskPriorityDisinherit+0xd0>)
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	693a      	ldr	r2, [r7, #16]
 80043f4:	429a      	cmp	r2, r3
 80043f6:	d00a      	beq.n	800440e <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80043f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043fc:	f383 8811 	msr	BASEPRI, r3
 8004400:	f3bf 8f6f 	isb	sy
 8004404:	f3bf 8f4f 	dsb	sy
 8004408:	60fb      	str	r3, [r7, #12]
}
 800440a:	bf00      	nop
 800440c:	e7fe      	b.n	800440c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800440e:	693b      	ldr	r3, [r7, #16]
 8004410:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004412:	2b00      	cmp	r3, #0
 8004414:	d10a      	bne.n	800442c <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8004416:	f04f 0350 	mov.w	r3, #80	; 0x50
 800441a:	f383 8811 	msr	BASEPRI, r3
 800441e:	f3bf 8f6f 	isb	sy
 8004422:	f3bf 8f4f 	dsb	sy
 8004426:	60bb      	str	r3, [r7, #8]
}
 8004428:	bf00      	nop
 800442a:	e7fe      	b.n	800442a <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800442c:	693b      	ldr	r3, [r7, #16]
 800442e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004430:	1e5a      	subs	r2, r3, #1
 8004432:	693b      	ldr	r3, [r7, #16]
 8004434:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8004436:	693b      	ldr	r3, [r7, #16]
 8004438:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800443a:	693b      	ldr	r3, [r7, #16]
 800443c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800443e:	429a      	cmp	r2, r3
 8004440:	d02c      	beq.n	800449c <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8004442:	693b      	ldr	r3, [r7, #16]
 8004444:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004446:	2b00      	cmp	r3, #0
 8004448:	d128      	bne.n	800449c <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800444a:	693b      	ldr	r3, [r7, #16]
 800444c:	3304      	adds	r3, #4
 800444e:	4618      	mov	r0, r3
 8004450:	f7fe fc40 	bl	8002cd4 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8004454:	693b      	ldr	r3, [r7, #16]
 8004456:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004458:	693b      	ldr	r3, [r7, #16]
 800445a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800445c:	693b      	ldr	r3, [r7, #16]
 800445e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004460:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8004464:	693b      	ldr	r3, [r7, #16]
 8004466:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8004468:	693b      	ldr	r3, [r7, #16]
 800446a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800446c:	4b0f      	ldr	r3, [pc, #60]	; (80044ac <xTaskPriorityDisinherit+0xd4>)
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	429a      	cmp	r2, r3
 8004472:	d903      	bls.n	800447c <xTaskPriorityDisinherit+0xa4>
 8004474:	693b      	ldr	r3, [r7, #16]
 8004476:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004478:	4a0c      	ldr	r2, [pc, #48]	; (80044ac <xTaskPriorityDisinherit+0xd4>)
 800447a:	6013      	str	r3, [r2, #0]
 800447c:	693b      	ldr	r3, [r7, #16]
 800447e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004480:	4613      	mov	r3, r2
 8004482:	009b      	lsls	r3, r3, #2
 8004484:	4413      	add	r3, r2
 8004486:	009b      	lsls	r3, r3, #2
 8004488:	4a09      	ldr	r2, [pc, #36]	; (80044b0 <xTaskPriorityDisinherit+0xd8>)
 800448a:	441a      	add	r2, r3
 800448c:	693b      	ldr	r3, [r7, #16]
 800448e:	3304      	adds	r3, #4
 8004490:	4619      	mov	r1, r3
 8004492:	4610      	mov	r0, r2
 8004494:	f7fe fbc1 	bl	8002c1a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8004498:	2301      	movs	r3, #1
 800449a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800449c:	697b      	ldr	r3, [r7, #20]
	}
 800449e:	4618      	mov	r0, r3
 80044a0:	3718      	adds	r7, #24
 80044a2:	46bd      	mov	sp, r7
 80044a4:	bd80      	pop	{r7, pc}
 80044a6:	bf00      	nop
 80044a8:	200008e0 	.word	0x200008e0
 80044ac:	20000dbc 	.word	0x20000dbc
 80044b0:	200008e4 	.word	0x200008e4

080044b4 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80044b4:	b580      	push	{r7, lr}
 80044b6:	b084      	sub	sp, #16
 80044b8:	af00      	add	r7, sp, #0
 80044ba:	6078      	str	r0, [r7, #4]
 80044bc:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80044be:	4b21      	ldr	r3, [pc, #132]	; (8004544 <prvAddCurrentTaskToDelayedList+0x90>)
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80044c4:	4b20      	ldr	r3, [pc, #128]	; (8004548 <prvAddCurrentTaskToDelayedList+0x94>)
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	3304      	adds	r3, #4
 80044ca:	4618      	mov	r0, r3
 80044cc:	f7fe fc02 	bl	8002cd4 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80044d6:	d10a      	bne.n	80044ee <prvAddCurrentTaskToDelayedList+0x3a>
 80044d8:	683b      	ldr	r3, [r7, #0]
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d007      	beq.n	80044ee <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80044de:	4b1a      	ldr	r3, [pc, #104]	; (8004548 <prvAddCurrentTaskToDelayedList+0x94>)
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	3304      	adds	r3, #4
 80044e4:	4619      	mov	r1, r3
 80044e6:	4819      	ldr	r0, [pc, #100]	; (800454c <prvAddCurrentTaskToDelayedList+0x98>)
 80044e8:	f7fe fb97 	bl	8002c1a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80044ec:	e026      	b.n	800453c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80044ee:	68fa      	ldr	r2, [r7, #12]
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	4413      	add	r3, r2
 80044f4:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80044f6:	4b14      	ldr	r3, [pc, #80]	; (8004548 <prvAddCurrentTaskToDelayedList+0x94>)
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	68ba      	ldr	r2, [r7, #8]
 80044fc:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80044fe:	68ba      	ldr	r2, [r7, #8]
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	429a      	cmp	r2, r3
 8004504:	d209      	bcs.n	800451a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004506:	4b12      	ldr	r3, [pc, #72]	; (8004550 <prvAddCurrentTaskToDelayedList+0x9c>)
 8004508:	681a      	ldr	r2, [r3, #0]
 800450a:	4b0f      	ldr	r3, [pc, #60]	; (8004548 <prvAddCurrentTaskToDelayedList+0x94>)
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	3304      	adds	r3, #4
 8004510:	4619      	mov	r1, r3
 8004512:	4610      	mov	r0, r2
 8004514:	f7fe fba5 	bl	8002c62 <vListInsert>
}
 8004518:	e010      	b.n	800453c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800451a:	4b0e      	ldr	r3, [pc, #56]	; (8004554 <prvAddCurrentTaskToDelayedList+0xa0>)
 800451c:	681a      	ldr	r2, [r3, #0]
 800451e:	4b0a      	ldr	r3, [pc, #40]	; (8004548 <prvAddCurrentTaskToDelayedList+0x94>)
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	3304      	adds	r3, #4
 8004524:	4619      	mov	r1, r3
 8004526:	4610      	mov	r0, r2
 8004528:	f7fe fb9b 	bl	8002c62 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800452c:	4b0a      	ldr	r3, [pc, #40]	; (8004558 <prvAddCurrentTaskToDelayedList+0xa4>)
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	68ba      	ldr	r2, [r7, #8]
 8004532:	429a      	cmp	r2, r3
 8004534:	d202      	bcs.n	800453c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8004536:	4a08      	ldr	r2, [pc, #32]	; (8004558 <prvAddCurrentTaskToDelayedList+0xa4>)
 8004538:	68bb      	ldr	r3, [r7, #8]
 800453a:	6013      	str	r3, [r2, #0]
}
 800453c:	bf00      	nop
 800453e:	3710      	adds	r7, #16
 8004540:	46bd      	mov	sp, r7
 8004542:	bd80      	pop	{r7, pc}
 8004544:	20000db8 	.word	0x20000db8
 8004548:	200008e0 	.word	0x200008e0
 800454c:	20000da0 	.word	0x20000da0
 8004550:	20000d70 	.word	0x20000d70
 8004554:	20000d6c 	.word	0x20000d6c
 8004558:	20000dd4 	.word	0x20000dd4

0800455c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800455c:	b580      	push	{r7, lr}
 800455e:	b08a      	sub	sp, #40	; 0x28
 8004560:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8004562:	2300      	movs	r3, #0
 8004564:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8004566:	f000 fb1f 	bl	8004ba8 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800456a:	4b1c      	ldr	r3, [pc, #112]	; (80045dc <xTimerCreateTimerTask+0x80>)
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	2b00      	cmp	r3, #0
 8004570:	d021      	beq.n	80045b6 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8004572:	2300      	movs	r3, #0
 8004574:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8004576:	2300      	movs	r3, #0
 8004578:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800457a:	1d3a      	adds	r2, r7, #4
 800457c:	f107 0108 	add.w	r1, r7, #8
 8004580:	f107 030c 	add.w	r3, r7, #12
 8004584:	4618      	mov	r0, r3
 8004586:	f7fe fb01 	bl	8002b8c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800458a:	6879      	ldr	r1, [r7, #4]
 800458c:	68bb      	ldr	r3, [r7, #8]
 800458e:	68fa      	ldr	r2, [r7, #12]
 8004590:	9202      	str	r2, [sp, #8]
 8004592:	9301      	str	r3, [sp, #4]
 8004594:	2302      	movs	r3, #2
 8004596:	9300      	str	r3, [sp, #0]
 8004598:	2300      	movs	r3, #0
 800459a:	460a      	mov	r2, r1
 800459c:	4910      	ldr	r1, [pc, #64]	; (80045e0 <xTimerCreateTimerTask+0x84>)
 800459e:	4811      	ldr	r0, [pc, #68]	; (80045e4 <xTimerCreateTimerTask+0x88>)
 80045a0:	f7ff f8e6 	bl	8003770 <xTaskCreateStatic>
 80045a4:	4603      	mov	r3, r0
 80045a6:	4a10      	ldr	r2, [pc, #64]	; (80045e8 <xTimerCreateTimerTask+0x8c>)
 80045a8:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80045aa:	4b0f      	ldr	r3, [pc, #60]	; (80045e8 <xTimerCreateTimerTask+0x8c>)
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d001      	beq.n	80045b6 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80045b2:	2301      	movs	r3, #1
 80045b4:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80045b6:	697b      	ldr	r3, [r7, #20]
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d10a      	bne.n	80045d2 <xTimerCreateTimerTask+0x76>
	__asm volatile
 80045bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045c0:	f383 8811 	msr	BASEPRI, r3
 80045c4:	f3bf 8f6f 	isb	sy
 80045c8:	f3bf 8f4f 	dsb	sy
 80045cc:	613b      	str	r3, [r7, #16]
}
 80045ce:	bf00      	nop
 80045d0:	e7fe      	b.n	80045d0 <xTimerCreateTimerTask+0x74>
	return xReturn;
 80045d2:	697b      	ldr	r3, [r7, #20]
}
 80045d4:	4618      	mov	r0, r3
 80045d6:	3718      	adds	r7, #24
 80045d8:	46bd      	mov	sp, r7
 80045da:	bd80      	pop	{r7, pc}
 80045dc:	20000e10 	.word	0x20000e10
 80045e0:	08005770 	.word	0x08005770
 80045e4:	080047b1 	.word	0x080047b1
 80045e8:	20000e14 	.word	0x20000e14

080045ec <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 80045ec:	b580      	push	{r7, lr}
 80045ee:	b088      	sub	sp, #32
 80045f0:	af02      	add	r7, sp, #8
 80045f2:	60f8      	str	r0, [r7, #12]
 80045f4:	60b9      	str	r1, [r7, #8]
 80045f6:	607a      	str	r2, [r7, #4]
 80045f8:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) );
 80045fa:	2030      	movs	r0, #48	; 0x30
 80045fc:	f000 fd64 	bl	80050c8 <pvPortMalloc>
 8004600:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 8004602:	697b      	ldr	r3, [r7, #20]
 8004604:	2b00      	cmp	r3, #0
 8004606:	d00d      	beq.n	8004624 <xTimerCreate+0x38>
		{
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8004608:	697b      	ldr	r3, [r7, #20]
 800460a:	9301      	str	r3, [sp, #4]
 800460c:	6a3b      	ldr	r3, [r7, #32]
 800460e:	9300      	str	r3, [sp, #0]
 8004610:	683b      	ldr	r3, [r7, #0]
 8004612:	687a      	ldr	r2, [r7, #4]
 8004614:	68b9      	ldr	r1, [r7, #8]
 8004616:	68f8      	ldr	r0, [r7, #12]
 8004618:	f000 f809 	bl	800462e <prvInitialiseNewTimer>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Timers can be created statically or dynamically, so note this
				timer was created dynamically in case the timer is later
				deleted. */
				pxNewTimer->ucStaticallyAllocated = pdFALSE;
 800461c:	697b      	ldr	r3, [r7, #20]
 800461e:	2200      	movs	r2, #0
 8004620:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */
		}

		return pxNewTimer;
 8004624:	697b      	ldr	r3, [r7, #20]
	}
 8004626:	4618      	mov	r0, r3
 8004628:	3718      	adds	r7, #24
 800462a:	46bd      	mov	sp, r7
 800462c:	bd80      	pop	{r7, pc}

0800462e <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 800462e:	b580      	push	{r7, lr}
 8004630:	b086      	sub	sp, #24
 8004632:	af00      	add	r7, sp, #0
 8004634:	60f8      	str	r0, [r7, #12]
 8004636:	60b9      	str	r1, [r7, #8]
 8004638:	607a      	str	r2, [r7, #4]
 800463a:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 800463c:	68bb      	ldr	r3, [r7, #8]
 800463e:	2b00      	cmp	r3, #0
 8004640:	d10a      	bne.n	8004658 <prvInitialiseNewTimer+0x2a>
	__asm volatile
 8004642:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004646:	f383 8811 	msr	BASEPRI, r3
 800464a:	f3bf 8f6f 	isb	sy
 800464e:	f3bf 8f4f 	dsb	sy
 8004652:	617b      	str	r3, [r7, #20]
}
 8004654:	bf00      	nop
 8004656:	e7fe      	b.n	8004656 <prvInitialiseNewTimer+0x28>

	if( pxNewTimer != NULL )
 8004658:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800465a:	2b00      	cmp	r3, #0
 800465c:	d015      	beq.n	800468a <prvInitialiseNewTimer+0x5c>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 800465e:	f000 faa3 	bl	8004ba8 <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 8004662:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004664:	68fa      	ldr	r2, [r7, #12]
 8004666:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 8004668:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800466a:	68ba      	ldr	r2, [r7, #8]
 800466c:	619a      	str	r2, [r3, #24]
		pxNewTimer->uxAutoReload = uxAutoReload;
 800466e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004670:	687a      	ldr	r2, [r7, #4]
 8004672:	61da      	str	r2, [r3, #28]
		pxNewTimer->pvTimerID = pvTimerID;
 8004674:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004676:	683a      	ldr	r2, [r7, #0]
 8004678:	621a      	str	r2, [r3, #32]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 800467a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800467c:	6a3a      	ldr	r2, [r7, #32]
 800467e:	625a      	str	r2, [r3, #36]	; 0x24
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 8004680:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004682:	3304      	adds	r3, #4
 8004684:	4618      	mov	r0, r3
 8004686:	f7fe fabb 	bl	8002c00 <vListInitialiseItem>
		traceTIMER_CREATE( pxNewTimer );
	}
}
 800468a:	bf00      	nop
 800468c:	3718      	adds	r7, #24
 800468e:	46bd      	mov	sp, r7
 8004690:	bd80      	pop	{r7, pc}
	...

08004694 <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8004694:	b580      	push	{r7, lr}
 8004696:	b08a      	sub	sp, #40	; 0x28
 8004698:	af00      	add	r7, sp, #0
 800469a:	60f8      	str	r0, [r7, #12]
 800469c:	60b9      	str	r1, [r7, #8]
 800469e:	607a      	str	r2, [r7, #4]
 80046a0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80046a2:	2300      	movs	r3, #0
 80046a4:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d10a      	bne.n	80046c2 <xTimerGenericCommand+0x2e>
	__asm volatile
 80046ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046b0:	f383 8811 	msr	BASEPRI, r3
 80046b4:	f3bf 8f6f 	isb	sy
 80046b8:	f3bf 8f4f 	dsb	sy
 80046bc:	623b      	str	r3, [r7, #32]
}
 80046be:	bf00      	nop
 80046c0:	e7fe      	b.n	80046c0 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80046c2:	4b1a      	ldr	r3, [pc, #104]	; (800472c <xTimerGenericCommand+0x98>)
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d02a      	beq.n	8004720 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80046ca:	68bb      	ldr	r3, [r7, #8]
 80046cc:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80046d6:	68bb      	ldr	r3, [r7, #8]
 80046d8:	2b05      	cmp	r3, #5
 80046da:	dc18      	bgt.n	800470e <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80046dc:	f7ff fe5e 	bl	800439c <xTaskGetSchedulerState>
 80046e0:	4603      	mov	r3, r0
 80046e2:	2b02      	cmp	r3, #2
 80046e4:	d109      	bne.n	80046fa <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80046e6:	4b11      	ldr	r3, [pc, #68]	; (800472c <xTimerGenericCommand+0x98>)
 80046e8:	6818      	ldr	r0, [r3, #0]
 80046ea:	f107 0110 	add.w	r1, r7, #16
 80046ee:	2300      	movs	r3, #0
 80046f0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80046f2:	f7fe fc59 	bl	8002fa8 <xQueueGenericSend>
 80046f6:	6278      	str	r0, [r7, #36]	; 0x24
 80046f8:	e012      	b.n	8004720 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80046fa:	4b0c      	ldr	r3, [pc, #48]	; (800472c <xTimerGenericCommand+0x98>)
 80046fc:	6818      	ldr	r0, [r3, #0]
 80046fe:	f107 0110 	add.w	r1, r7, #16
 8004702:	2300      	movs	r3, #0
 8004704:	2200      	movs	r2, #0
 8004706:	f7fe fc4f 	bl	8002fa8 <xQueueGenericSend>
 800470a:	6278      	str	r0, [r7, #36]	; 0x24
 800470c:	e008      	b.n	8004720 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800470e:	4b07      	ldr	r3, [pc, #28]	; (800472c <xTimerGenericCommand+0x98>)
 8004710:	6818      	ldr	r0, [r3, #0]
 8004712:	f107 0110 	add.w	r1, r7, #16
 8004716:	2300      	movs	r3, #0
 8004718:	683a      	ldr	r2, [r7, #0]
 800471a:	f7fe fd43 	bl	80031a4 <xQueueGenericSendFromISR>
 800471e:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8004720:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004722:	4618      	mov	r0, r3
 8004724:	3728      	adds	r7, #40	; 0x28
 8004726:	46bd      	mov	sp, r7
 8004728:	bd80      	pop	{r7, pc}
 800472a:	bf00      	nop
 800472c:	20000e10 	.word	0x20000e10

08004730 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8004730:	b580      	push	{r7, lr}
 8004732:	b088      	sub	sp, #32
 8004734:	af02      	add	r7, sp, #8
 8004736:	6078      	str	r0, [r7, #4]
 8004738:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800473a:	4b1c      	ldr	r3, [pc, #112]	; (80047ac <prvProcessExpiredTimer+0x7c>)
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	68db      	ldr	r3, [r3, #12]
 8004740:	68db      	ldr	r3, [r3, #12]
 8004742:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004744:	697b      	ldr	r3, [r7, #20]
 8004746:	3304      	adds	r3, #4
 8004748:	4618      	mov	r0, r3
 800474a:	f7fe fac3 	bl	8002cd4 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800474e:	697b      	ldr	r3, [r7, #20]
 8004750:	69db      	ldr	r3, [r3, #28]
 8004752:	2b01      	cmp	r3, #1
 8004754:	d122      	bne.n	800479c <prvProcessExpiredTimer+0x6c>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8004756:	697b      	ldr	r3, [r7, #20]
 8004758:	699a      	ldr	r2, [r3, #24]
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	18d1      	adds	r1, r2, r3
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	683a      	ldr	r2, [r7, #0]
 8004762:	6978      	ldr	r0, [r7, #20]
 8004764:	f000 f8c8 	bl	80048f8 <prvInsertTimerInActiveList>
 8004768:	4603      	mov	r3, r0
 800476a:	2b00      	cmp	r3, #0
 800476c:	d016      	beq.n	800479c <prvProcessExpiredTimer+0x6c>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800476e:	2300      	movs	r3, #0
 8004770:	9300      	str	r3, [sp, #0]
 8004772:	2300      	movs	r3, #0
 8004774:	687a      	ldr	r2, [r7, #4]
 8004776:	2100      	movs	r1, #0
 8004778:	6978      	ldr	r0, [r7, #20]
 800477a:	f7ff ff8b 	bl	8004694 <xTimerGenericCommand>
 800477e:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8004780:	693b      	ldr	r3, [r7, #16]
 8004782:	2b00      	cmp	r3, #0
 8004784:	d10a      	bne.n	800479c <prvProcessExpiredTimer+0x6c>
	__asm volatile
 8004786:	f04f 0350 	mov.w	r3, #80	; 0x50
 800478a:	f383 8811 	msr	BASEPRI, r3
 800478e:	f3bf 8f6f 	isb	sy
 8004792:	f3bf 8f4f 	dsb	sy
 8004796:	60fb      	str	r3, [r7, #12]
}
 8004798:	bf00      	nop
 800479a:	e7fe      	b.n	800479a <prvProcessExpiredTimer+0x6a>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800479c:	697b      	ldr	r3, [r7, #20]
 800479e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047a0:	6978      	ldr	r0, [r7, #20]
 80047a2:	4798      	blx	r3
}
 80047a4:	bf00      	nop
 80047a6:	3718      	adds	r7, #24
 80047a8:	46bd      	mov	sp, r7
 80047aa:	bd80      	pop	{r7, pc}
 80047ac:	20000e08 	.word	0x20000e08

080047b0 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 80047b0:	b580      	push	{r7, lr}
 80047b2:	b084      	sub	sp, #16
 80047b4:	af00      	add	r7, sp, #0
 80047b6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80047b8:	f107 0308 	add.w	r3, r7, #8
 80047bc:	4618      	mov	r0, r3
 80047be:	f000 f857 	bl	8004870 <prvGetNextExpireTime>
 80047c2:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80047c4:	68bb      	ldr	r3, [r7, #8]
 80047c6:	4619      	mov	r1, r3
 80047c8:	68f8      	ldr	r0, [r7, #12]
 80047ca:	f000 f803 	bl	80047d4 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80047ce:	f000 f8d5 	bl	800497c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80047d2:	e7f1      	b.n	80047b8 <prvTimerTask+0x8>

080047d4 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80047d4:	b580      	push	{r7, lr}
 80047d6:	b084      	sub	sp, #16
 80047d8:	af00      	add	r7, sp, #0
 80047da:	6078      	str	r0, [r7, #4]
 80047dc:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80047de:	f7ff f9e7 	bl	8003bb0 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80047e2:	f107 0308 	add.w	r3, r7, #8
 80047e6:	4618      	mov	r0, r3
 80047e8:	f000 f866 	bl	80048b8 <prvSampleTimeNow>
 80047ec:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80047ee:	68bb      	ldr	r3, [r7, #8]
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d130      	bne.n	8004856 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80047f4:	683b      	ldr	r3, [r7, #0]
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d10a      	bne.n	8004810 <prvProcessTimerOrBlockTask+0x3c>
 80047fa:	687a      	ldr	r2, [r7, #4]
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	429a      	cmp	r2, r3
 8004800:	d806      	bhi.n	8004810 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8004802:	f7ff f9e3 	bl	8003bcc <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8004806:	68f9      	ldr	r1, [r7, #12]
 8004808:	6878      	ldr	r0, [r7, #4]
 800480a:	f7ff ff91 	bl	8004730 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800480e:	e024      	b.n	800485a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8004810:	683b      	ldr	r3, [r7, #0]
 8004812:	2b00      	cmp	r3, #0
 8004814:	d008      	beq.n	8004828 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8004816:	4b13      	ldr	r3, [pc, #76]	; (8004864 <prvProcessTimerOrBlockTask+0x90>)
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	2b00      	cmp	r3, #0
 800481e:	bf0c      	ite	eq
 8004820:	2301      	moveq	r3, #1
 8004822:	2300      	movne	r3, #0
 8004824:	b2db      	uxtb	r3, r3
 8004826:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8004828:	4b0f      	ldr	r3, [pc, #60]	; (8004868 <prvProcessTimerOrBlockTask+0x94>)
 800482a:	6818      	ldr	r0, [r3, #0]
 800482c:	687a      	ldr	r2, [r7, #4]
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	1ad3      	subs	r3, r2, r3
 8004832:	683a      	ldr	r2, [r7, #0]
 8004834:	4619      	mov	r1, r3
 8004836:	f7fe ff67 	bl	8003708 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800483a:	f7ff f9c7 	bl	8003bcc <xTaskResumeAll>
 800483e:	4603      	mov	r3, r0
 8004840:	2b00      	cmp	r3, #0
 8004842:	d10a      	bne.n	800485a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8004844:	4b09      	ldr	r3, [pc, #36]	; (800486c <prvProcessTimerOrBlockTask+0x98>)
 8004846:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800484a:	601a      	str	r2, [r3, #0]
 800484c:	f3bf 8f4f 	dsb	sy
 8004850:	f3bf 8f6f 	isb	sy
}
 8004854:	e001      	b.n	800485a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8004856:	f7ff f9b9 	bl	8003bcc <xTaskResumeAll>
}
 800485a:	bf00      	nop
 800485c:	3710      	adds	r7, #16
 800485e:	46bd      	mov	sp, r7
 8004860:	bd80      	pop	{r7, pc}
 8004862:	bf00      	nop
 8004864:	20000e0c 	.word	0x20000e0c
 8004868:	20000e10 	.word	0x20000e10
 800486c:	e000ed04 	.word	0xe000ed04

08004870 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8004870:	b480      	push	{r7}
 8004872:	b085      	sub	sp, #20
 8004874:	af00      	add	r7, sp, #0
 8004876:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8004878:	4b0e      	ldr	r3, [pc, #56]	; (80048b4 <prvGetNextExpireTime+0x44>)
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	2b00      	cmp	r3, #0
 8004880:	bf0c      	ite	eq
 8004882:	2301      	moveq	r3, #1
 8004884:	2300      	movne	r3, #0
 8004886:	b2db      	uxtb	r3, r3
 8004888:	461a      	mov	r2, r3
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	2b00      	cmp	r3, #0
 8004894:	d105      	bne.n	80048a2 <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004896:	4b07      	ldr	r3, [pc, #28]	; (80048b4 <prvGetNextExpireTime+0x44>)
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	68db      	ldr	r3, [r3, #12]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	60fb      	str	r3, [r7, #12]
 80048a0:	e001      	b.n	80048a6 <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80048a2:	2300      	movs	r3, #0
 80048a4:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80048a6:	68fb      	ldr	r3, [r7, #12]
}
 80048a8:	4618      	mov	r0, r3
 80048aa:	3714      	adds	r7, #20
 80048ac:	46bd      	mov	sp, r7
 80048ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048b2:	4770      	bx	lr
 80048b4:	20000e08 	.word	0x20000e08

080048b8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80048b8:	b580      	push	{r7, lr}
 80048ba:	b084      	sub	sp, #16
 80048bc:	af00      	add	r7, sp, #0
 80048be:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80048c0:	f7ff fa22 	bl	8003d08 <xTaskGetTickCount>
 80048c4:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80048c6:	4b0b      	ldr	r3, [pc, #44]	; (80048f4 <prvSampleTimeNow+0x3c>)
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	68fa      	ldr	r2, [r7, #12]
 80048cc:	429a      	cmp	r2, r3
 80048ce:	d205      	bcs.n	80048dc <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80048d0:	f000 f908 	bl	8004ae4 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	2201      	movs	r2, #1
 80048d8:	601a      	str	r2, [r3, #0]
 80048da:	e002      	b.n	80048e2 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	2200      	movs	r2, #0
 80048e0:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80048e2:	4a04      	ldr	r2, [pc, #16]	; (80048f4 <prvSampleTimeNow+0x3c>)
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80048e8:	68fb      	ldr	r3, [r7, #12]
}
 80048ea:	4618      	mov	r0, r3
 80048ec:	3710      	adds	r7, #16
 80048ee:	46bd      	mov	sp, r7
 80048f0:	bd80      	pop	{r7, pc}
 80048f2:	bf00      	nop
 80048f4:	20000e18 	.word	0x20000e18

080048f8 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80048f8:	b580      	push	{r7, lr}
 80048fa:	b086      	sub	sp, #24
 80048fc:	af00      	add	r7, sp, #0
 80048fe:	60f8      	str	r0, [r7, #12]
 8004900:	60b9      	str	r1, [r7, #8]
 8004902:	607a      	str	r2, [r7, #4]
 8004904:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8004906:	2300      	movs	r3, #0
 8004908:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	68ba      	ldr	r2, [r7, #8]
 800490e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	68fa      	ldr	r2, [r7, #12]
 8004914:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8004916:	68ba      	ldr	r2, [r7, #8]
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	429a      	cmp	r2, r3
 800491c:	d812      	bhi.n	8004944 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800491e:	687a      	ldr	r2, [r7, #4]
 8004920:	683b      	ldr	r3, [r7, #0]
 8004922:	1ad2      	subs	r2, r2, r3
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	699b      	ldr	r3, [r3, #24]
 8004928:	429a      	cmp	r2, r3
 800492a:	d302      	bcc.n	8004932 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800492c:	2301      	movs	r3, #1
 800492e:	617b      	str	r3, [r7, #20]
 8004930:	e01b      	b.n	800496a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8004932:	4b10      	ldr	r3, [pc, #64]	; (8004974 <prvInsertTimerInActiveList+0x7c>)
 8004934:	681a      	ldr	r2, [r3, #0]
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	3304      	adds	r3, #4
 800493a:	4619      	mov	r1, r3
 800493c:	4610      	mov	r0, r2
 800493e:	f7fe f990 	bl	8002c62 <vListInsert>
 8004942:	e012      	b.n	800496a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8004944:	687a      	ldr	r2, [r7, #4]
 8004946:	683b      	ldr	r3, [r7, #0]
 8004948:	429a      	cmp	r2, r3
 800494a:	d206      	bcs.n	800495a <prvInsertTimerInActiveList+0x62>
 800494c:	68ba      	ldr	r2, [r7, #8]
 800494e:	683b      	ldr	r3, [r7, #0]
 8004950:	429a      	cmp	r2, r3
 8004952:	d302      	bcc.n	800495a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8004954:	2301      	movs	r3, #1
 8004956:	617b      	str	r3, [r7, #20]
 8004958:	e007      	b.n	800496a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800495a:	4b07      	ldr	r3, [pc, #28]	; (8004978 <prvInsertTimerInActiveList+0x80>)
 800495c:	681a      	ldr	r2, [r3, #0]
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	3304      	adds	r3, #4
 8004962:	4619      	mov	r1, r3
 8004964:	4610      	mov	r0, r2
 8004966:	f7fe f97c 	bl	8002c62 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800496a:	697b      	ldr	r3, [r7, #20]
}
 800496c:	4618      	mov	r0, r3
 800496e:	3718      	adds	r7, #24
 8004970:	46bd      	mov	sp, r7
 8004972:	bd80      	pop	{r7, pc}
 8004974:	20000e0c 	.word	0x20000e0c
 8004978:	20000e08 	.word	0x20000e08

0800497c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800497c:	b580      	push	{r7, lr}
 800497e:	b08e      	sub	sp, #56	; 0x38
 8004980:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004982:	e09d      	b.n	8004ac0 <prvProcessReceivedCommands+0x144>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	2b00      	cmp	r3, #0
 8004988:	da18      	bge.n	80049bc <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800498a:	1d3b      	adds	r3, r7, #4
 800498c:	3304      	adds	r3, #4
 800498e:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8004990:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004992:	2b00      	cmp	r3, #0
 8004994:	d10a      	bne.n	80049ac <prvProcessReceivedCommands+0x30>
	__asm volatile
 8004996:	f04f 0350 	mov.w	r3, #80	; 0x50
 800499a:	f383 8811 	msr	BASEPRI, r3
 800499e:	f3bf 8f6f 	isb	sy
 80049a2:	f3bf 8f4f 	dsb	sy
 80049a6:	61fb      	str	r3, [r7, #28]
}
 80049a8:	bf00      	nop
 80049aa:	e7fe      	b.n	80049aa <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80049ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80049b2:	6850      	ldr	r0, [r2, #4]
 80049b4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80049b6:	6892      	ldr	r2, [r2, #8]
 80049b8:	4611      	mov	r1, r2
 80049ba:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	2b00      	cmp	r3, #0
 80049c0:	db7e      	blt.n	8004ac0 <prvProcessReceivedCommands+0x144>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80049c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049c8:	695b      	ldr	r3, [r3, #20]
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d004      	beq.n	80049d8 <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80049ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049d0:	3304      	adds	r3, #4
 80049d2:	4618      	mov	r0, r3
 80049d4:	f7fe f97e 	bl	8002cd4 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80049d8:	463b      	mov	r3, r7
 80049da:	4618      	mov	r0, r3
 80049dc:	f7ff ff6c 	bl	80048b8 <prvSampleTimeNow>
 80049e0:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	2b09      	cmp	r3, #9
 80049e6:	d86a      	bhi.n	8004abe <prvProcessReceivedCommands+0x142>
 80049e8:	a201      	add	r2, pc, #4	; (adr r2, 80049f0 <prvProcessReceivedCommands+0x74>)
 80049ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049ee:	bf00      	nop
 80049f0:	08004a19 	.word	0x08004a19
 80049f4:	08004a19 	.word	0x08004a19
 80049f8:	08004a19 	.word	0x08004a19
 80049fc:	08004ac1 	.word	0x08004ac1
 8004a00:	08004a75 	.word	0x08004a75
 8004a04:	08004aad 	.word	0x08004aad
 8004a08:	08004a19 	.word	0x08004a19
 8004a0c:	08004a19 	.word	0x08004a19
 8004a10:	08004ac1 	.word	0x08004ac1
 8004a14:	08004a75 	.word	0x08004a75
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8004a18:	68ba      	ldr	r2, [r7, #8]
 8004a1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a1c:	699b      	ldr	r3, [r3, #24]
 8004a1e:	18d1      	adds	r1, r2, r3
 8004a20:	68bb      	ldr	r3, [r7, #8]
 8004a22:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004a24:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004a26:	f7ff ff67 	bl	80048f8 <prvInsertTimerInActiveList>
 8004a2a:	4603      	mov	r3, r0
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d047      	beq.n	8004ac0 <prvProcessReceivedCommands+0x144>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004a30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a34:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004a36:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8004a38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a3a:	69db      	ldr	r3, [r3, #28]
 8004a3c:	2b01      	cmp	r3, #1
 8004a3e:	d13f      	bne.n	8004ac0 <prvProcessReceivedCommands+0x144>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8004a40:	68ba      	ldr	r2, [r7, #8]
 8004a42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a44:	699b      	ldr	r3, [r3, #24]
 8004a46:	441a      	add	r2, r3
 8004a48:	2300      	movs	r3, #0
 8004a4a:	9300      	str	r3, [sp, #0]
 8004a4c:	2300      	movs	r3, #0
 8004a4e:	2100      	movs	r1, #0
 8004a50:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004a52:	f7ff fe1f 	bl	8004694 <xTimerGenericCommand>
 8004a56:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8004a58:	6a3b      	ldr	r3, [r7, #32]
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d130      	bne.n	8004ac0 <prvProcessReceivedCommands+0x144>
	__asm volatile
 8004a5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a62:	f383 8811 	msr	BASEPRI, r3
 8004a66:	f3bf 8f6f 	isb	sy
 8004a6a:	f3bf 8f4f 	dsb	sy
 8004a6e:	61bb      	str	r3, [r7, #24]
}
 8004a70:	bf00      	nop
 8004a72:	e7fe      	b.n	8004a72 <prvProcessReceivedCommands+0xf6>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8004a74:	68ba      	ldr	r2, [r7, #8]
 8004a76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a78:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8004a7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a7c:	699b      	ldr	r3, [r3, #24]
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d10a      	bne.n	8004a98 <prvProcessReceivedCommands+0x11c>
	__asm volatile
 8004a82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a86:	f383 8811 	msr	BASEPRI, r3
 8004a8a:	f3bf 8f6f 	isb	sy
 8004a8e:	f3bf 8f4f 	dsb	sy
 8004a92:	617b      	str	r3, [r7, #20]
}
 8004a94:	bf00      	nop
 8004a96:	e7fe      	b.n	8004a96 <prvProcessReceivedCommands+0x11a>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8004a98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a9a:	699a      	ldr	r2, [r3, #24]
 8004a9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a9e:	18d1      	adds	r1, r2, r3
 8004aa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004aa2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004aa4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004aa6:	f7ff ff27 	bl	80048f8 <prvInsertTimerInActiveList>
					break;
 8004aaa:	e009      	b.n	8004ac0 <prvProcessReceivedCommands+0x144>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8004aac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004aae:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d104      	bne.n	8004ac0 <prvProcessReceivedCommands+0x144>
						{
							vPortFree( pxTimer );
 8004ab6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004ab8:	f000 fbca 	bl	8005250 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8004abc:	e000      	b.n	8004ac0 <prvProcessReceivedCommands+0x144>

				default	:
					/* Don't expect to get here. */
					break;
 8004abe:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004ac0:	4b07      	ldr	r3, [pc, #28]	; (8004ae0 <prvProcessReceivedCommands+0x164>)
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	1d39      	adds	r1, r7, #4
 8004ac6:	2200      	movs	r2, #0
 8004ac8:	4618      	mov	r0, r3
 8004aca:	f7fe fc03 	bl	80032d4 <xQueueReceive>
 8004ace:	4603      	mov	r3, r0
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	f47f af57 	bne.w	8004984 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8004ad6:	bf00      	nop
 8004ad8:	bf00      	nop
 8004ada:	3730      	adds	r7, #48	; 0x30
 8004adc:	46bd      	mov	sp, r7
 8004ade:	bd80      	pop	{r7, pc}
 8004ae0:	20000e10 	.word	0x20000e10

08004ae4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8004ae4:	b580      	push	{r7, lr}
 8004ae6:	b088      	sub	sp, #32
 8004ae8:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004aea:	e045      	b.n	8004b78 <prvSwitchTimerLists+0x94>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004aec:	4b2c      	ldr	r3, [pc, #176]	; (8004ba0 <prvSwitchTimerLists+0xbc>)
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	68db      	ldr	r3, [r3, #12]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004af6:	4b2a      	ldr	r3, [pc, #168]	; (8004ba0 <prvSwitchTimerLists+0xbc>)
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	68db      	ldr	r3, [r3, #12]
 8004afc:	68db      	ldr	r3, [r3, #12]
 8004afe:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	3304      	adds	r3, #4
 8004b04:	4618      	mov	r0, r3
 8004b06:	f7fe f8e5 	bl	8002cd4 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b0e:	68f8      	ldr	r0, [r7, #12]
 8004b10:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	69db      	ldr	r3, [r3, #28]
 8004b16:	2b01      	cmp	r3, #1
 8004b18:	d12e      	bne.n	8004b78 <prvSwitchTimerLists+0x94>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	699b      	ldr	r3, [r3, #24]
 8004b1e:	693a      	ldr	r2, [r7, #16]
 8004b20:	4413      	add	r3, r2
 8004b22:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8004b24:	68ba      	ldr	r2, [r7, #8]
 8004b26:	693b      	ldr	r3, [r7, #16]
 8004b28:	429a      	cmp	r2, r3
 8004b2a:	d90e      	bls.n	8004b4a <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	68ba      	ldr	r2, [r7, #8]
 8004b30:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	68fa      	ldr	r2, [r7, #12]
 8004b36:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004b38:	4b19      	ldr	r3, [pc, #100]	; (8004ba0 <prvSwitchTimerLists+0xbc>)
 8004b3a:	681a      	ldr	r2, [r3, #0]
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	3304      	adds	r3, #4
 8004b40:	4619      	mov	r1, r3
 8004b42:	4610      	mov	r0, r2
 8004b44:	f7fe f88d 	bl	8002c62 <vListInsert>
 8004b48:	e016      	b.n	8004b78 <prvSwitchTimerLists+0x94>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004b4a:	2300      	movs	r3, #0
 8004b4c:	9300      	str	r3, [sp, #0]
 8004b4e:	2300      	movs	r3, #0
 8004b50:	693a      	ldr	r2, [r7, #16]
 8004b52:	2100      	movs	r1, #0
 8004b54:	68f8      	ldr	r0, [r7, #12]
 8004b56:	f7ff fd9d 	bl	8004694 <xTimerGenericCommand>
 8004b5a:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d10a      	bne.n	8004b78 <prvSwitchTimerLists+0x94>
	__asm volatile
 8004b62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b66:	f383 8811 	msr	BASEPRI, r3
 8004b6a:	f3bf 8f6f 	isb	sy
 8004b6e:	f3bf 8f4f 	dsb	sy
 8004b72:	603b      	str	r3, [r7, #0]
}
 8004b74:	bf00      	nop
 8004b76:	e7fe      	b.n	8004b76 <prvSwitchTimerLists+0x92>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004b78:	4b09      	ldr	r3, [pc, #36]	; (8004ba0 <prvSwitchTimerLists+0xbc>)
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d1b4      	bne.n	8004aec <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8004b82:	4b07      	ldr	r3, [pc, #28]	; (8004ba0 <prvSwitchTimerLists+0xbc>)
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8004b88:	4b06      	ldr	r3, [pc, #24]	; (8004ba4 <prvSwitchTimerLists+0xc0>)
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	4a04      	ldr	r2, [pc, #16]	; (8004ba0 <prvSwitchTimerLists+0xbc>)
 8004b8e:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8004b90:	4a04      	ldr	r2, [pc, #16]	; (8004ba4 <prvSwitchTimerLists+0xc0>)
 8004b92:	697b      	ldr	r3, [r7, #20]
 8004b94:	6013      	str	r3, [r2, #0]
}
 8004b96:	bf00      	nop
 8004b98:	3718      	adds	r7, #24
 8004b9a:	46bd      	mov	sp, r7
 8004b9c:	bd80      	pop	{r7, pc}
 8004b9e:	bf00      	nop
 8004ba0:	20000e08 	.word	0x20000e08
 8004ba4:	20000e0c 	.word	0x20000e0c

08004ba8 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8004ba8:	b580      	push	{r7, lr}
 8004baa:	b082      	sub	sp, #8
 8004bac:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8004bae:	f000 f969 	bl	8004e84 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8004bb2:	4b15      	ldr	r3, [pc, #84]	; (8004c08 <prvCheckForValidListAndQueue+0x60>)
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d120      	bne.n	8004bfc <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8004bba:	4814      	ldr	r0, [pc, #80]	; (8004c0c <prvCheckForValidListAndQueue+0x64>)
 8004bbc:	f7fe f800 	bl	8002bc0 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8004bc0:	4813      	ldr	r0, [pc, #76]	; (8004c10 <prvCheckForValidListAndQueue+0x68>)
 8004bc2:	f7fd fffd 	bl	8002bc0 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8004bc6:	4b13      	ldr	r3, [pc, #76]	; (8004c14 <prvCheckForValidListAndQueue+0x6c>)
 8004bc8:	4a10      	ldr	r2, [pc, #64]	; (8004c0c <prvCheckForValidListAndQueue+0x64>)
 8004bca:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8004bcc:	4b12      	ldr	r3, [pc, #72]	; (8004c18 <prvCheckForValidListAndQueue+0x70>)
 8004bce:	4a10      	ldr	r2, [pc, #64]	; (8004c10 <prvCheckForValidListAndQueue+0x68>)
 8004bd0:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8004bd2:	2300      	movs	r3, #0
 8004bd4:	9300      	str	r3, [sp, #0]
 8004bd6:	4b11      	ldr	r3, [pc, #68]	; (8004c1c <prvCheckForValidListAndQueue+0x74>)
 8004bd8:	4a11      	ldr	r2, [pc, #68]	; (8004c20 <prvCheckForValidListAndQueue+0x78>)
 8004bda:	2110      	movs	r1, #16
 8004bdc:	200a      	movs	r0, #10
 8004bde:	f7fe f90b 	bl	8002df8 <xQueueGenericCreateStatic>
 8004be2:	4603      	mov	r3, r0
 8004be4:	4a08      	ldr	r2, [pc, #32]	; (8004c08 <prvCheckForValidListAndQueue+0x60>)
 8004be6:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8004be8:	4b07      	ldr	r3, [pc, #28]	; (8004c08 <prvCheckForValidListAndQueue+0x60>)
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d005      	beq.n	8004bfc <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8004bf0:	4b05      	ldr	r3, [pc, #20]	; (8004c08 <prvCheckForValidListAndQueue+0x60>)
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	490b      	ldr	r1, [pc, #44]	; (8004c24 <prvCheckForValidListAndQueue+0x7c>)
 8004bf6:	4618      	mov	r0, r3
 8004bf8:	f7fe fd5c 	bl	80036b4 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004bfc:	f000 f972 	bl	8004ee4 <vPortExitCritical>
}
 8004c00:	bf00      	nop
 8004c02:	46bd      	mov	sp, r7
 8004c04:	bd80      	pop	{r7, pc}
 8004c06:	bf00      	nop
 8004c08:	20000e10 	.word	0x20000e10
 8004c0c:	20000de0 	.word	0x20000de0
 8004c10:	20000df4 	.word	0x20000df4
 8004c14:	20000e08 	.word	0x20000e08
 8004c18:	20000e0c 	.word	0x20000e0c
 8004c1c:	20000ebc 	.word	0x20000ebc
 8004c20:	20000e1c 	.word	0x20000e1c
 8004c24:	08005778 	.word	0x08005778

08004c28 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8004c28:	b480      	push	{r7}
 8004c2a:	b085      	sub	sp, #20
 8004c2c:	af00      	add	r7, sp, #0
 8004c2e:	60f8      	str	r0, [r7, #12]
 8004c30:	60b9      	str	r1, [r7, #8]
 8004c32:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	3b04      	subs	r3, #4
 8004c38:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004c40:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	3b04      	subs	r3, #4
 8004c46:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004c48:	68bb      	ldr	r3, [r7, #8]
 8004c4a:	f023 0201 	bic.w	r2, r3, #1
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	3b04      	subs	r3, #4
 8004c56:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004c58:	4a0c      	ldr	r2, [pc, #48]	; (8004c8c <pxPortInitialiseStack+0x64>)
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	3b14      	subs	r3, #20
 8004c62:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004c64:	687a      	ldr	r2, [r7, #4]
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	3b04      	subs	r3, #4
 8004c6e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	f06f 0202 	mvn.w	r2, #2
 8004c76:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	3b20      	subs	r3, #32
 8004c7c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8004c7e:	68fb      	ldr	r3, [r7, #12]
}
 8004c80:	4618      	mov	r0, r3
 8004c82:	3714      	adds	r7, #20
 8004c84:	46bd      	mov	sp, r7
 8004c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c8a:	4770      	bx	lr
 8004c8c:	08004c91 	.word	0x08004c91

08004c90 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004c90:	b480      	push	{r7}
 8004c92:	b085      	sub	sp, #20
 8004c94:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8004c96:	2300      	movs	r3, #0
 8004c98:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8004c9a:	4b12      	ldr	r3, [pc, #72]	; (8004ce4 <prvTaskExitError+0x54>)
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ca2:	d00a      	beq.n	8004cba <prvTaskExitError+0x2a>
	__asm volatile
 8004ca4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ca8:	f383 8811 	msr	BASEPRI, r3
 8004cac:	f3bf 8f6f 	isb	sy
 8004cb0:	f3bf 8f4f 	dsb	sy
 8004cb4:	60fb      	str	r3, [r7, #12]
}
 8004cb6:	bf00      	nop
 8004cb8:	e7fe      	b.n	8004cb8 <prvTaskExitError+0x28>
	__asm volatile
 8004cba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cbe:	f383 8811 	msr	BASEPRI, r3
 8004cc2:	f3bf 8f6f 	isb	sy
 8004cc6:	f3bf 8f4f 	dsb	sy
 8004cca:	60bb      	str	r3, [r7, #8]
}
 8004ccc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8004cce:	bf00      	nop
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d0fc      	beq.n	8004cd0 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8004cd6:	bf00      	nop
 8004cd8:	bf00      	nop
 8004cda:	3714      	adds	r7, #20
 8004cdc:	46bd      	mov	sp, r7
 8004cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ce2:	4770      	bx	lr
 8004ce4:	2000000c 	.word	0x2000000c
	...

08004cf0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004cf0:	4b07      	ldr	r3, [pc, #28]	; (8004d10 <pxCurrentTCBConst2>)
 8004cf2:	6819      	ldr	r1, [r3, #0]
 8004cf4:	6808      	ldr	r0, [r1, #0]
 8004cf6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004cfa:	f380 8809 	msr	PSP, r0
 8004cfe:	f3bf 8f6f 	isb	sy
 8004d02:	f04f 0000 	mov.w	r0, #0
 8004d06:	f380 8811 	msr	BASEPRI, r0
 8004d0a:	4770      	bx	lr
 8004d0c:	f3af 8000 	nop.w

08004d10 <pxCurrentTCBConst2>:
 8004d10:	200008e0 	.word	0x200008e0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004d14:	bf00      	nop
 8004d16:	bf00      	nop

08004d18 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8004d18:	4808      	ldr	r0, [pc, #32]	; (8004d3c <prvPortStartFirstTask+0x24>)
 8004d1a:	6800      	ldr	r0, [r0, #0]
 8004d1c:	6800      	ldr	r0, [r0, #0]
 8004d1e:	f380 8808 	msr	MSP, r0
 8004d22:	f04f 0000 	mov.w	r0, #0
 8004d26:	f380 8814 	msr	CONTROL, r0
 8004d2a:	b662      	cpsie	i
 8004d2c:	b661      	cpsie	f
 8004d2e:	f3bf 8f4f 	dsb	sy
 8004d32:	f3bf 8f6f 	isb	sy
 8004d36:	df00      	svc	0
 8004d38:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8004d3a:	bf00      	nop
 8004d3c:	e000ed08 	.word	0xe000ed08

08004d40 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004d40:	b580      	push	{r7, lr}
 8004d42:	b086      	sub	sp, #24
 8004d44:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8004d46:	4b46      	ldr	r3, [pc, #280]	; (8004e60 <xPortStartScheduler+0x120>)
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	4a46      	ldr	r2, [pc, #280]	; (8004e64 <xPortStartScheduler+0x124>)
 8004d4c:	4293      	cmp	r3, r2
 8004d4e:	d10a      	bne.n	8004d66 <xPortStartScheduler+0x26>
	__asm volatile
 8004d50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d54:	f383 8811 	msr	BASEPRI, r3
 8004d58:	f3bf 8f6f 	isb	sy
 8004d5c:	f3bf 8f4f 	dsb	sy
 8004d60:	613b      	str	r3, [r7, #16]
}
 8004d62:	bf00      	nop
 8004d64:	e7fe      	b.n	8004d64 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8004d66:	4b3e      	ldr	r3, [pc, #248]	; (8004e60 <xPortStartScheduler+0x120>)
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	4a3f      	ldr	r2, [pc, #252]	; (8004e68 <xPortStartScheduler+0x128>)
 8004d6c:	4293      	cmp	r3, r2
 8004d6e:	d10a      	bne.n	8004d86 <xPortStartScheduler+0x46>
	__asm volatile
 8004d70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d74:	f383 8811 	msr	BASEPRI, r3
 8004d78:	f3bf 8f6f 	isb	sy
 8004d7c:	f3bf 8f4f 	dsb	sy
 8004d80:	60fb      	str	r3, [r7, #12]
}
 8004d82:	bf00      	nop
 8004d84:	e7fe      	b.n	8004d84 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8004d86:	4b39      	ldr	r3, [pc, #228]	; (8004e6c <xPortStartScheduler+0x12c>)
 8004d88:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004d8a:	697b      	ldr	r3, [r7, #20]
 8004d8c:	781b      	ldrb	r3, [r3, #0]
 8004d8e:	b2db      	uxtb	r3, r3
 8004d90:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004d92:	697b      	ldr	r3, [r7, #20]
 8004d94:	22ff      	movs	r2, #255	; 0xff
 8004d96:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004d98:	697b      	ldr	r3, [r7, #20]
 8004d9a:	781b      	ldrb	r3, [r3, #0]
 8004d9c:	b2db      	uxtb	r3, r3
 8004d9e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004da0:	78fb      	ldrb	r3, [r7, #3]
 8004da2:	b2db      	uxtb	r3, r3
 8004da4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004da8:	b2da      	uxtb	r2, r3
 8004daa:	4b31      	ldr	r3, [pc, #196]	; (8004e70 <xPortStartScheduler+0x130>)
 8004dac:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004dae:	4b31      	ldr	r3, [pc, #196]	; (8004e74 <xPortStartScheduler+0x134>)
 8004db0:	2207      	movs	r2, #7
 8004db2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004db4:	e009      	b.n	8004dca <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8004db6:	4b2f      	ldr	r3, [pc, #188]	; (8004e74 <xPortStartScheduler+0x134>)
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	3b01      	subs	r3, #1
 8004dbc:	4a2d      	ldr	r2, [pc, #180]	; (8004e74 <xPortStartScheduler+0x134>)
 8004dbe:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004dc0:	78fb      	ldrb	r3, [r7, #3]
 8004dc2:	b2db      	uxtb	r3, r3
 8004dc4:	005b      	lsls	r3, r3, #1
 8004dc6:	b2db      	uxtb	r3, r3
 8004dc8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004dca:	78fb      	ldrb	r3, [r7, #3]
 8004dcc:	b2db      	uxtb	r3, r3
 8004dce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004dd2:	2b80      	cmp	r3, #128	; 0x80
 8004dd4:	d0ef      	beq.n	8004db6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8004dd6:	4b27      	ldr	r3, [pc, #156]	; (8004e74 <xPortStartScheduler+0x134>)
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	f1c3 0307 	rsb	r3, r3, #7
 8004dde:	2b04      	cmp	r3, #4
 8004de0:	d00a      	beq.n	8004df8 <xPortStartScheduler+0xb8>
	__asm volatile
 8004de2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004de6:	f383 8811 	msr	BASEPRI, r3
 8004dea:	f3bf 8f6f 	isb	sy
 8004dee:	f3bf 8f4f 	dsb	sy
 8004df2:	60bb      	str	r3, [r7, #8]
}
 8004df4:	bf00      	nop
 8004df6:	e7fe      	b.n	8004df6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004df8:	4b1e      	ldr	r3, [pc, #120]	; (8004e74 <xPortStartScheduler+0x134>)
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	021b      	lsls	r3, r3, #8
 8004dfe:	4a1d      	ldr	r2, [pc, #116]	; (8004e74 <xPortStartScheduler+0x134>)
 8004e00:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004e02:	4b1c      	ldr	r3, [pc, #112]	; (8004e74 <xPortStartScheduler+0x134>)
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004e0a:	4a1a      	ldr	r2, [pc, #104]	; (8004e74 <xPortStartScheduler+0x134>)
 8004e0c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	b2da      	uxtb	r2, r3
 8004e12:	697b      	ldr	r3, [r7, #20]
 8004e14:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8004e16:	4b18      	ldr	r3, [pc, #96]	; (8004e78 <xPortStartScheduler+0x138>)
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	4a17      	ldr	r2, [pc, #92]	; (8004e78 <xPortStartScheduler+0x138>)
 8004e1c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004e20:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8004e22:	4b15      	ldr	r3, [pc, #84]	; (8004e78 <xPortStartScheduler+0x138>)
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	4a14      	ldr	r2, [pc, #80]	; (8004e78 <xPortStartScheduler+0x138>)
 8004e28:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8004e2c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8004e2e:	f000 f8dd 	bl	8004fec <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8004e32:	4b12      	ldr	r3, [pc, #72]	; (8004e7c <xPortStartScheduler+0x13c>)
 8004e34:	2200      	movs	r2, #0
 8004e36:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8004e38:	f000 f8fc 	bl	8005034 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8004e3c:	4b10      	ldr	r3, [pc, #64]	; (8004e80 <xPortStartScheduler+0x140>)
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	4a0f      	ldr	r2, [pc, #60]	; (8004e80 <xPortStartScheduler+0x140>)
 8004e42:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8004e46:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8004e48:	f7ff ff66 	bl	8004d18 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8004e4c:	f7ff f82a 	bl	8003ea4 <vTaskSwitchContext>
	prvTaskExitError();
 8004e50:	f7ff ff1e 	bl	8004c90 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8004e54:	2300      	movs	r3, #0
}
 8004e56:	4618      	mov	r0, r3
 8004e58:	3718      	adds	r7, #24
 8004e5a:	46bd      	mov	sp, r7
 8004e5c:	bd80      	pop	{r7, pc}
 8004e5e:	bf00      	nop
 8004e60:	e000ed00 	.word	0xe000ed00
 8004e64:	410fc271 	.word	0x410fc271
 8004e68:	410fc270 	.word	0x410fc270
 8004e6c:	e000e400 	.word	0xe000e400
 8004e70:	20000f0c 	.word	0x20000f0c
 8004e74:	20000f10 	.word	0x20000f10
 8004e78:	e000ed20 	.word	0xe000ed20
 8004e7c:	2000000c 	.word	0x2000000c
 8004e80:	e000ef34 	.word	0xe000ef34

08004e84 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004e84:	b480      	push	{r7}
 8004e86:	b083      	sub	sp, #12
 8004e88:	af00      	add	r7, sp, #0
	__asm volatile
 8004e8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e8e:	f383 8811 	msr	BASEPRI, r3
 8004e92:	f3bf 8f6f 	isb	sy
 8004e96:	f3bf 8f4f 	dsb	sy
 8004e9a:	607b      	str	r3, [r7, #4]
}
 8004e9c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8004e9e:	4b0f      	ldr	r3, [pc, #60]	; (8004edc <vPortEnterCritical+0x58>)
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	3301      	adds	r3, #1
 8004ea4:	4a0d      	ldr	r2, [pc, #52]	; (8004edc <vPortEnterCritical+0x58>)
 8004ea6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8004ea8:	4b0c      	ldr	r3, [pc, #48]	; (8004edc <vPortEnterCritical+0x58>)
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	2b01      	cmp	r3, #1
 8004eae:	d10f      	bne.n	8004ed0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004eb0:	4b0b      	ldr	r3, [pc, #44]	; (8004ee0 <vPortEnterCritical+0x5c>)
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	b2db      	uxtb	r3, r3
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d00a      	beq.n	8004ed0 <vPortEnterCritical+0x4c>
	__asm volatile
 8004eba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ebe:	f383 8811 	msr	BASEPRI, r3
 8004ec2:	f3bf 8f6f 	isb	sy
 8004ec6:	f3bf 8f4f 	dsb	sy
 8004eca:	603b      	str	r3, [r7, #0]
}
 8004ecc:	bf00      	nop
 8004ece:	e7fe      	b.n	8004ece <vPortEnterCritical+0x4a>
	}
}
 8004ed0:	bf00      	nop
 8004ed2:	370c      	adds	r7, #12
 8004ed4:	46bd      	mov	sp, r7
 8004ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eda:	4770      	bx	lr
 8004edc:	2000000c 	.word	0x2000000c
 8004ee0:	e000ed04 	.word	0xe000ed04

08004ee4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004ee4:	b480      	push	{r7}
 8004ee6:	b083      	sub	sp, #12
 8004ee8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8004eea:	4b12      	ldr	r3, [pc, #72]	; (8004f34 <vPortExitCritical+0x50>)
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d10a      	bne.n	8004f08 <vPortExitCritical+0x24>
	__asm volatile
 8004ef2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ef6:	f383 8811 	msr	BASEPRI, r3
 8004efa:	f3bf 8f6f 	isb	sy
 8004efe:	f3bf 8f4f 	dsb	sy
 8004f02:	607b      	str	r3, [r7, #4]
}
 8004f04:	bf00      	nop
 8004f06:	e7fe      	b.n	8004f06 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8004f08:	4b0a      	ldr	r3, [pc, #40]	; (8004f34 <vPortExitCritical+0x50>)
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	3b01      	subs	r3, #1
 8004f0e:	4a09      	ldr	r2, [pc, #36]	; (8004f34 <vPortExitCritical+0x50>)
 8004f10:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8004f12:	4b08      	ldr	r3, [pc, #32]	; (8004f34 <vPortExitCritical+0x50>)
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d105      	bne.n	8004f26 <vPortExitCritical+0x42>
 8004f1a:	2300      	movs	r3, #0
 8004f1c:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004f1e:	683b      	ldr	r3, [r7, #0]
 8004f20:	f383 8811 	msr	BASEPRI, r3
}
 8004f24:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8004f26:	bf00      	nop
 8004f28:	370c      	adds	r7, #12
 8004f2a:	46bd      	mov	sp, r7
 8004f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f30:	4770      	bx	lr
 8004f32:	bf00      	nop
 8004f34:	2000000c 	.word	0x2000000c
	...

08004f40 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004f40:	f3ef 8009 	mrs	r0, PSP
 8004f44:	f3bf 8f6f 	isb	sy
 8004f48:	4b15      	ldr	r3, [pc, #84]	; (8004fa0 <pxCurrentTCBConst>)
 8004f4a:	681a      	ldr	r2, [r3, #0]
 8004f4c:	f01e 0f10 	tst.w	lr, #16
 8004f50:	bf08      	it	eq
 8004f52:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004f56:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004f5a:	6010      	str	r0, [r2, #0]
 8004f5c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004f60:	f04f 0050 	mov.w	r0, #80	; 0x50
 8004f64:	f380 8811 	msr	BASEPRI, r0
 8004f68:	f3bf 8f4f 	dsb	sy
 8004f6c:	f3bf 8f6f 	isb	sy
 8004f70:	f7fe ff98 	bl	8003ea4 <vTaskSwitchContext>
 8004f74:	f04f 0000 	mov.w	r0, #0
 8004f78:	f380 8811 	msr	BASEPRI, r0
 8004f7c:	bc09      	pop	{r0, r3}
 8004f7e:	6819      	ldr	r1, [r3, #0]
 8004f80:	6808      	ldr	r0, [r1, #0]
 8004f82:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004f86:	f01e 0f10 	tst.w	lr, #16
 8004f8a:	bf08      	it	eq
 8004f8c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004f90:	f380 8809 	msr	PSP, r0
 8004f94:	f3bf 8f6f 	isb	sy
 8004f98:	4770      	bx	lr
 8004f9a:	bf00      	nop
 8004f9c:	f3af 8000 	nop.w

08004fa0 <pxCurrentTCBConst>:
 8004fa0:	200008e0 	.word	0x200008e0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8004fa4:	bf00      	nop
 8004fa6:	bf00      	nop

08004fa8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004fa8:	b580      	push	{r7, lr}
 8004faa:	b082      	sub	sp, #8
 8004fac:	af00      	add	r7, sp, #0
	__asm volatile
 8004fae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fb2:	f383 8811 	msr	BASEPRI, r3
 8004fb6:	f3bf 8f6f 	isb	sy
 8004fba:	f3bf 8f4f 	dsb	sy
 8004fbe:	607b      	str	r3, [r7, #4]
}
 8004fc0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004fc2:	f7fe feb1 	bl	8003d28 <xTaskIncrementTick>
 8004fc6:	4603      	mov	r3, r0
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d003      	beq.n	8004fd4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8004fcc:	4b06      	ldr	r3, [pc, #24]	; (8004fe8 <SysTick_Handler+0x40>)
 8004fce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004fd2:	601a      	str	r2, [r3, #0]
 8004fd4:	2300      	movs	r3, #0
 8004fd6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004fd8:	683b      	ldr	r3, [r7, #0]
 8004fda:	f383 8811 	msr	BASEPRI, r3
}
 8004fde:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8004fe0:	bf00      	nop
 8004fe2:	3708      	adds	r7, #8
 8004fe4:	46bd      	mov	sp, r7
 8004fe6:	bd80      	pop	{r7, pc}
 8004fe8:	e000ed04 	.word	0xe000ed04

08004fec <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8004fec:	b480      	push	{r7}
 8004fee:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004ff0:	4b0b      	ldr	r3, [pc, #44]	; (8005020 <vPortSetupTimerInterrupt+0x34>)
 8004ff2:	2200      	movs	r2, #0
 8004ff4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004ff6:	4b0b      	ldr	r3, [pc, #44]	; (8005024 <vPortSetupTimerInterrupt+0x38>)
 8004ff8:	2200      	movs	r2, #0
 8004ffa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8004ffc:	4b0a      	ldr	r3, [pc, #40]	; (8005028 <vPortSetupTimerInterrupt+0x3c>)
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	4a0a      	ldr	r2, [pc, #40]	; (800502c <vPortSetupTimerInterrupt+0x40>)
 8005002:	fba2 2303 	umull	r2, r3, r2, r3
 8005006:	099b      	lsrs	r3, r3, #6
 8005008:	4a09      	ldr	r2, [pc, #36]	; (8005030 <vPortSetupTimerInterrupt+0x44>)
 800500a:	3b01      	subs	r3, #1
 800500c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800500e:	4b04      	ldr	r3, [pc, #16]	; (8005020 <vPortSetupTimerInterrupt+0x34>)
 8005010:	2207      	movs	r2, #7
 8005012:	601a      	str	r2, [r3, #0]
}
 8005014:	bf00      	nop
 8005016:	46bd      	mov	sp, r7
 8005018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800501c:	4770      	bx	lr
 800501e:	bf00      	nop
 8005020:	e000e010 	.word	0xe000e010
 8005024:	e000e018 	.word	0xe000e018
 8005028:	20000000 	.word	0x20000000
 800502c:	10624dd3 	.word	0x10624dd3
 8005030:	e000e014 	.word	0xe000e014

08005034 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8005034:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8005044 <vPortEnableVFP+0x10>
 8005038:	6801      	ldr	r1, [r0, #0]
 800503a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800503e:	6001      	str	r1, [r0, #0]
 8005040:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8005042:	bf00      	nop
 8005044:	e000ed88 	.word	0xe000ed88

08005048 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8005048:	b480      	push	{r7}
 800504a:	b085      	sub	sp, #20
 800504c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800504e:	f3ef 8305 	mrs	r3, IPSR
 8005052:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	2b0f      	cmp	r3, #15
 8005058:	d914      	bls.n	8005084 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800505a:	4a17      	ldr	r2, [pc, #92]	; (80050b8 <vPortValidateInterruptPriority+0x70>)
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	4413      	add	r3, r2
 8005060:	781b      	ldrb	r3, [r3, #0]
 8005062:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8005064:	4b15      	ldr	r3, [pc, #84]	; (80050bc <vPortValidateInterruptPriority+0x74>)
 8005066:	781b      	ldrb	r3, [r3, #0]
 8005068:	7afa      	ldrb	r2, [r7, #11]
 800506a:	429a      	cmp	r2, r3
 800506c:	d20a      	bcs.n	8005084 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800506e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005072:	f383 8811 	msr	BASEPRI, r3
 8005076:	f3bf 8f6f 	isb	sy
 800507a:	f3bf 8f4f 	dsb	sy
 800507e:	607b      	str	r3, [r7, #4]
}
 8005080:	bf00      	nop
 8005082:	e7fe      	b.n	8005082 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8005084:	4b0e      	ldr	r3, [pc, #56]	; (80050c0 <vPortValidateInterruptPriority+0x78>)
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800508c:	4b0d      	ldr	r3, [pc, #52]	; (80050c4 <vPortValidateInterruptPriority+0x7c>)
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	429a      	cmp	r2, r3
 8005092:	d90a      	bls.n	80050aa <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8005094:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005098:	f383 8811 	msr	BASEPRI, r3
 800509c:	f3bf 8f6f 	isb	sy
 80050a0:	f3bf 8f4f 	dsb	sy
 80050a4:	603b      	str	r3, [r7, #0]
}
 80050a6:	bf00      	nop
 80050a8:	e7fe      	b.n	80050a8 <vPortValidateInterruptPriority+0x60>
	}
 80050aa:	bf00      	nop
 80050ac:	3714      	adds	r7, #20
 80050ae:	46bd      	mov	sp, r7
 80050b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050b4:	4770      	bx	lr
 80050b6:	bf00      	nop
 80050b8:	e000e3f0 	.word	0xe000e3f0
 80050bc:	20000f0c 	.word	0x20000f0c
 80050c0:	e000ed0c 	.word	0xe000ed0c
 80050c4:	20000f10 	.word	0x20000f10

080050c8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80050c8:	b580      	push	{r7, lr}
 80050ca:	b08a      	sub	sp, #40	; 0x28
 80050cc:	af00      	add	r7, sp, #0
 80050ce:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80050d0:	2300      	movs	r3, #0
 80050d2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80050d4:	f7fe fd6c 	bl	8003bb0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80050d8:	4b58      	ldr	r3, [pc, #352]	; (800523c <pvPortMalloc+0x174>)
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d101      	bne.n	80050e4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80050e0:	f000 f910 	bl	8005304 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80050e4:	4b56      	ldr	r3, [pc, #344]	; (8005240 <pvPortMalloc+0x178>)
 80050e6:	681a      	ldr	r2, [r3, #0]
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	4013      	ands	r3, r2
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	f040 808e 	bne.w	800520e <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	d01d      	beq.n	8005134 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80050f8:	2208      	movs	r2, #8
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	4413      	add	r3, r2
 80050fe:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	f003 0307 	and.w	r3, r3, #7
 8005106:	2b00      	cmp	r3, #0
 8005108:	d014      	beq.n	8005134 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	f023 0307 	bic.w	r3, r3, #7
 8005110:	3308      	adds	r3, #8
 8005112:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	f003 0307 	and.w	r3, r3, #7
 800511a:	2b00      	cmp	r3, #0
 800511c:	d00a      	beq.n	8005134 <pvPortMalloc+0x6c>
	__asm volatile
 800511e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005122:	f383 8811 	msr	BASEPRI, r3
 8005126:	f3bf 8f6f 	isb	sy
 800512a:	f3bf 8f4f 	dsb	sy
 800512e:	617b      	str	r3, [r7, #20]
}
 8005130:	bf00      	nop
 8005132:	e7fe      	b.n	8005132 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	2b00      	cmp	r3, #0
 8005138:	d069      	beq.n	800520e <pvPortMalloc+0x146>
 800513a:	4b42      	ldr	r3, [pc, #264]	; (8005244 <pvPortMalloc+0x17c>)
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	687a      	ldr	r2, [r7, #4]
 8005140:	429a      	cmp	r2, r3
 8005142:	d864      	bhi.n	800520e <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8005144:	4b40      	ldr	r3, [pc, #256]	; (8005248 <pvPortMalloc+0x180>)
 8005146:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8005148:	4b3f      	ldr	r3, [pc, #252]	; (8005248 <pvPortMalloc+0x180>)
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800514e:	e004      	b.n	800515a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8005150:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005152:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8005154:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800515a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800515c:	685b      	ldr	r3, [r3, #4]
 800515e:	687a      	ldr	r2, [r7, #4]
 8005160:	429a      	cmp	r2, r3
 8005162:	d903      	bls.n	800516c <pvPortMalloc+0xa4>
 8005164:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	2b00      	cmp	r3, #0
 800516a:	d1f1      	bne.n	8005150 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800516c:	4b33      	ldr	r3, [pc, #204]	; (800523c <pvPortMalloc+0x174>)
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005172:	429a      	cmp	r2, r3
 8005174:	d04b      	beq.n	800520e <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005176:	6a3b      	ldr	r3, [r7, #32]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	2208      	movs	r2, #8
 800517c:	4413      	add	r3, r2
 800517e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005180:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005182:	681a      	ldr	r2, [r3, #0]
 8005184:	6a3b      	ldr	r3, [r7, #32]
 8005186:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005188:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800518a:	685a      	ldr	r2, [r3, #4]
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	1ad2      	subs	r2, r2, r3
 8005190:	2308      	movs	r3, #8
 8005192:	005b      	lsls	r3, r3, #1
 8005194:	429a      	cmp	r2, r3
 8005196:	d91f      	bls.n	80051d8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005198:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	4413      	add	r3, r2
 800519e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80051a0:	69bb      	ldr	r3, [r7, #24]
 80051a2:	f003 0307 	and.w	r3, r3, #7
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d00a      	beq.n	80051c0 <pvPortMalloc+0xf8>
	__asm volatile
 80051aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051ae:	f383 8811 	msr	BASEPRI, r3
 80051b2:	f3bf 8f6f 	isb	sy
 80051b6:	f3bf 8f4f 	dsb	sy
 80051ba:	613b      	str	r3, [r7, #16]
}
 80051bc:	bf00      	nop
 80051be:	e7fe      	b.n	80051be <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80051c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051c2:	685a      	ldr	r2, [r3, #4]
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	1ad2      	subs	r2, r2, r3
 80051c8:	69bb      	ldr	r3, [r7, #24]
 80051ca:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80051cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051ce:	687a      	ldr	r2, [r7, #4]
 80051d0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80051d2:	69b8      	ldr	r0, [r7, #24]
 80051d4:	f000 f8f8 	bl	80053c8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80051d8:	4b1a      	ldr	r3, [pc, #104]	; (8005244 <pvPortMalloc+0x17c>)
 80051da:	681a      	ldr	r2, [r3, #0]
 80051dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051de:	685b      	ldr	r3, [r3, #4]
 80051e0:	1ad3      	subs	r3, r2, r3
 80051e2:	4a18      	ldr	r2, [pc, #96]	; (8005244 <pvPortMalloc+0x17c>)
 80051e4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80051e6:	4b17      	ldr	r3, [pc, #92]	; (8005244 <pvPortMalloc+0x17c>)
 80051e8:	681a      	ldr	r2, [r3, #0]
 80051ea:	4b18      	ldr	r3, [pc, #96]	; (800524c <pvPortMalloc+0x184>)
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	429a      	cmp	r2, r3
 80051f0:	d203      	bcs.n	80051fa <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80051f2:	4b14      	ldr	r3, [pc, #80]	; (8005244 <pvPortMalloc+0x17c>)
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	4a15      	ldr	r2, [pc, #84]	; (800524c <pvPortMalloc+0x184>)
 80051f8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80051fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051fc:	685a      	ldr	r2, [r3, #4]
 80051fe:	4b10      	ldr	r3, [pc, #64]	; (8005240 <pvPortMalloc+0x178>)
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	431a      	orrs	r2, r3
 8005204:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005206:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8005208:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800520a:	2200      	movs	r2, #0
 800520c:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800520e:	f7fe fcdd 	bl	8003bcc <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8005212:	69fb      	ldr	r3, [r7, #28]
 8005214:	f003 0307 	and.w	r3, r3, #7
 8005218:	2b00      	cmp	r3, #0
 800521a:	d00a      	beq.n	8005232 <pvPortMalloc+0x16a>
	__asm volatile
 800521c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005220:	f383 8811 	msr	BASEPRI, r3
 8005224:	f3bf 8f6f 	isb	sy
 8005228:	f3bf 8f4f 	dsb	sy
 800522c:	60fb      	str	r3, [r7, #12]
}
 800522e:	bf00      	nop
 8005230:	e7fe      	b.n	8005230 <pvPortMalloc+0x168>
	return pvReturn;
 8005232:	69fb      	ldr	r3, [r7, #28]
}
 8005234:	4618      	mov	r0, r3
 8005236:	3728      	adds	r7, #40	; 0x28
 8005238:	46bd      	mov	sp, r7
 800523a:	bd80      	pop	{r7, pc}
 800523c:	20001b1c 	.word	0x20001b1c
 8005240:	20001b28 	.word	0x20001b28
 8005244:	20001b20 	.word	0x20001b20
 8005248:	20001b14 	.word	0x20001b14
 800524c:	20001b24 	.word	0x20001b24

08005250 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005250:	b580      	push	{r7, lr}
 8005252:	b086      	sub	sp, #24
 8005254:	af00      	add	r7, sp, #0
 8005256:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	2b00      	cmp	r3, #0
 8005260:	d048      	beq.n	80052f4 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8005262:	2308      	movs	r3, #8
 8005264:	425b      	negs	r3, r3
 8005266:	697a      	ldr	r2, [r7, #20]
 8005268:	4413      	add	r3, r2
 800526a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800526c:	697b      	ldr	r3, [r7, #20]
 800526e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005270:	693b      	ldr	r3, [r7, #16]
 8005272:	685a      	ldr	r2, [r3, #4]
 8005274:	4b21      	ldr	r3, [pc, #132]	; (80052fc <vPortFree+0xac>)
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	4013      	ands	r3, r2
 800527a:	2b00      	cmp	r3, #0
 800527c:	d10a      	bne.n	8005294 <vPortFree+0x44>
	__asm volatile
 800527e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005282:	f383 8811 	msr	BASEPRI, r3
 8005286:	f3bf 8f6f 	isb	sy
 800528a:	f3bf 8f4f 	dsb	sy
 800528e:	60fb      	str	r3, [r7, #12]
}
 8005290:	bf00      	nop
 8005292:	e7fe      	b.n	8005292 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005294:	693b      	ldr	r3, [r7, #16]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	2b00      	cmp	r3, #0
 800529a:	d00a      	beq.n	80052b2 <vPortFree+0x62>
	__asm volatile
 800529c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052a0:	f383 8811 	msr	BASEPRI, r3
 80052a4:	f3bf 8f6f 	isb	sy
 80052a8:	f3bf 8f4f 	dsb	sy
 80052ac:	60bb      	str	r3, [r7, #8]
}
 80052ae:	bf00      	nop
 80052b0:	e7fe      	b.n	80052b0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80052b2:	693b      	ldr	r3, [r7, #16]
 80052b4:	685a      	ldr	r2, [r3, #4]
 80052b6:	4b11      	ldr	r3, [pc, #68]	; (80052fc <vPortFree+0xac>)
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	4013      	ands	r3, r2
 80052bc:	2b00      	cmp	r3, #0
 80052be:	d019      	beq.n	80052f4 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80052c0:	693b      	ldr	r3, [r7, #16]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d115      	bne.n	80052f4 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80052c8:	693b      	ldr	r3, [r7, #16]
 80052ca:	685a      	ldr	r2, [r3, #4]
 80052cc:	4b0b      	ldr	r3, [pc, #44]	; (80052fc <vPortFree+0xac>)
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	43db      	mvns	r3, r3
 80052d2:	401a      	ands	r2, r3
 80052d4:	693b      	ldr	r3, [r7, #16]
 80052d6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80052d8:	f7fe fc6a 	bl	8003bb0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80052dc:	693b      	ldr	r3, [r7, #16]
 80052de:	685a      	ldr	r2, [r3, #4]
 80052e0:	4b07      	ldr	r3, [pc, #28]	; (8005300 <vPortFree+0xb0>)
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	4413      	add	r3, r2
 80052e6:	4a06      	ldr	r2, [pc, #24]	; (8005300 <vPortFree+0xb0>)
 80052e8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80052ea:	6938      	ldr	r0, [r7, #16]
 80052ec:	f000 f86c 	bl	80053c8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80052f0:	f7fe fc6c 	bl	8003bcc <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80052f4:	bf00      	nop
 80052f6:	3718      	adds	r7, #24
 80052f8:	46bd      	mov	sp, r7
 80052fa:	bd80      	pop	{r7, pc}
 80052fc:	20001b28 	.word	0x20001b28
 8005300:	20001b20 	.word	0x20001b20

08005304 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005304:	b480      	push	{r7}
 8005306:	b085      	sub	sp, #20
 8005308:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800530a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800530e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005310:	4b27      	ldr	r3, [pc, #156]	; (80053b0 <prvHeapInit+0xac>)
 8005312:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	f003 0307 	and.w	r3, r3, #7
 800531a:	2b00      	cmp	r3, #0
 800531c:	d00c      	beq.n	8005338 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	3307      	adds	r3, #7
 8005322:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	f023 0307 	bic.w	r3, r3, #7
 800532a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800532c:	68ba      	ldr	r2, [r7, #8]
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	1ad3      	subs	r3, r2, r3
 8005332:	4a1f      	ldr	r2, [pc, #124]	; (80053b0 <prvHeapInit+0xac>)
 8005334:	4413      	add	r3, r2
 8005336:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800533c:	4a1d      	ldr	r2, [pc, #116]	; (80053b4 <prvHeapInit+0xb0>)
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8005342:	4b1c      	ldr	r3, [pc, #112]	; (80053b4 <prvHeapInit+0xb0>)
 8005344:	2200      	movs	r2, #0
 8005346:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	68ba      	ldr	r2, [r7, #8]
 800534c:	4413      	add	r3, r2
 800534e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005350:	2208      	movs	r2, #8
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	1a9b      	subs	r3, r3, r2
 8005356:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	f023 0307 	bic.w	r3, r3, #7
 800535e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	4a15      	ldr	r2, [pc, #84]	; (80053b8 <prvHeapInit+0xb4>)
 8005364:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8005366:	4b14      	ldr	r3, [pc, #80]	; (80053b8 <prvHeapInit+0xb4>)
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	2200      	movs	r2, #0
 800536c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800536e:	4b12      	ldr	r3, [pc, #72]	; (80053b8 <prvHeapInit+0xb4>)
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	2200      	movs	r2, #0
 8005374:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800537a:	683b      	ldr	r3, [r7, #0]
 800537c:	68fa      	ldr	r2, [r7, #12]
 800537e:	1ad2      	subs	r2, r2, r3
 8005380:	683b      	ldr	r3, [r7, #0]
 8005382:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005384:	4b0c      	ldr	r3, [pc, #48]	; (80053b8 <prvHeapInit+0xb4>)
 8005386:	681a      	ldr	r2, [r3, #0]
 8005388:	683b      	ldr	r3, [r7, #0]
 800538a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800538c:	683b      	ldr	r3, [r7, #0]
 800538e:	685b      	ldr	r3, [r3, #4]
 8005390:	4a0a      	ldr	r2, [pc, #40]	; (80053bc <prvHeapInit+0xb8>)
 8005392:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005394:	683b      	ldr	r3, [r7, #0]
 8005396:	685b      	ldr	r3, [r3, #4]
 8005398:	4a09      	ldr	r2, [pc, #36]	; (80053c0 <prvHeapInit+0xbc>)
 800539a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800539c:	4b09      	ldr	r3, [pc, #36]	; (80053c4 <prvHeapInit+0xc0>)
 800539e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80053a2:	601a      	str	r2, [r3, #0]
}
 80053a4:	bf00      	nop
 80053a6:	3714      	adds	r7, #20
 80053a8:	46bd      	mov	sp, r7
 80053aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ae:	4770      	bx	lr
 80053b0:	20000f14 	.word	0x20000f14
 80053b4:	20001b14 	.word	0x20001b14
 80053b8:	20001b1c 	.word	0x20001b1c
 80053bc:	20001b24 	.word	0x20001b24
 80053c0:	20001b20 	.word	0x20001b20
 80053c4:	20001b28 	.word	0x20001b28

080053c8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80053c8:	b480      	push	{r7}
 80053ca:	b085      	sub	sp, #20
 80053cc:	af00      	add	r7, sp, #0
 80053ce:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80053d0:	4b28      	ldr	r3, [pc, #160]	; (8005474 <prvInsertBlockIntoFreeList+0xac>)
 80053d2:	60fb      	str	r3, [r7, #12]
 80053d4:	e002      	b.n	80053dc <prvInsertBlockIntoFreeList+0x14>
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	60fb      	str	r3, [r7, #12]
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	687a      	ldr	r2, [r7, #4]
 80053e2:	429a      	cmp	r2, r3
 80053e4:	d8f7      	bhi.n	80053d6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	685b      	ldr	r3, [r3, #4]
 80053ee:	68ba      	ldr	r2, [r7, #8]
 80053f0:	4413      	add	r3, r2
 80053f2:	687a      	ldr	r2, [r7, #4]
 80053f4:	429a      	cmp	r2, r3
 80053f6:	d108      	bne.n	800540a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	685a      	ldr	r2, [r3, #4]
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	685b      	ldr	r3, [r3, #4]
 8005400:	441a      	add	r2, r3
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	685b      	ldr	r3, [r3, #4]
 8005412:	68ba      	ldr	r2, [r7, #8]
 8005414:	441a      	add	r2, r3
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	429a      	cmp	r2, r3
 800541c:	d118      	bne.n	8005450 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	681a      	ldr	r2, [r3, #0]
 8005422:	4b15      	ldr	r3, [pc, #84]	; (8005478 <prvInsertBlockIntoFreeList+0xb0>)
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	429a      	cmp	r2, r3
 8005428:	d00d      	beq.n	8005446 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	685a      	ldr	r2, [r3, #4]
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	685b      	ldr	r3, [r3, #4]
 8005434:	441a      	add	r2, r3
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	681a      	ldr	r2, [r3, #0]
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	601a      	str	r2, [r3, #0]
 8005444:	e008      	b.n	8005458 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005446:	4b0c      	ldr	r3, [pc, #48]	; (8005478 <prvInsertBlockIntoFreeList+0xb0>)
 8005448:	681a      	ldr	r2, [r3, #0]
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	601a      	str	r2, [r3, #0]
 800544e:	e003      	b.n	8005458 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	681a      	ldr	r2, [r3, #0]
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005458:	68fa      	ldr	r2, [r7, #12]
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	429a      	cmp	r2, r3
 800545e:	d002      	beq.n	8005466 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	687a      	ldr	r2, [r7, #4]
 8005464:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005466:	bf00      	nop
 8005468:	3714      	adds	r7, #20
 800546a:	46bd      	mov	sp, r7
 800546c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005470:	4770      	bx	lr
 8005472:	bf00      	nop
 8005474:	20001b14 	.word	0x20001b14
 8005478:	20001b1c 	.word	0x20001b1c

0800547c <memset>:
 800547c:	4402      	add	r2, r0
 800547e:	4603      	mov	r3, r0
 8005480:	4293      	cmp	r3, r2
 8005482:	d100      	bne.n	8005486 <memset+0xa>
 8005484:	4770      	bx	lr
 8005486:	f803 1b01 	strb.w	r1, [r3], #1
 800548a:	e7f9      	b.n	8005480 <memset+0x4>

0800548c <_reclaim_reent>:
 800548c:	4b29      	ldr	r3, [pc, #164]	; (8005534 <_reclaim_reent+0xa8>)
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	4283      	cmp	r3, r0
 8005492:	b570      	push	{r4, r5, r6, lr}
 8005494:	4604      	mov	r4, r0
 8005496:	d04b      	beq.n	8005530 <_reclaim_reent+0xa4>
 8005498:	69c3      	ldr	r3, [r0, #28]
 800549a:	b143      	cbz	r3, 80054ae <_reclaim_reent+0x22>
 800549c:	68db      	ldr	r3, [r3, #12]
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d144      	bne.n	800552c <_reclaim_reent+0xa0>
 80054a2:	69e3      	ldr	r3, [r4, #28]
 80054a4:	6819      	ldr	r1, [r3, #0]
 80054a6:	b111      	cbz	r1, 80054ae <_reclaim_reent+0x22>
 80054a8:	4620      	mov	r0, r4
 80054aa:	f000 f879 	bl	80055a0 <_free_r>
 80054ae:	6961      	ldr	r1, [r4, #20]
 80054b0:	b111      	cbz	r1, 80054b8 <_reclaim_reent+0x2c>
 80054b2:	4620      	mov	r0, r4
 80054b4:	f000 f874 	bl	80055a0 <_free_r>
 80054b8:	69e1      	ldr	r1, [r4, #28]
 80054ba:	b111      	cbz	r1, 80054c2 <_reclaim_reent+0x36>
 80054bc:	4620      	mov	r0, r4
 80054be:	f000 f86f 	bl	80055a0 <_free_r>
 80054c2:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80054c4:	b111      	cbz	r1, 80054cc <_reclaim_reent+0x40>
 80054c6:	4620      	mov	r0, r4
 80054c8:	f000 f86a 	bl	80055a0 <_free_r>
 80054cc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80054ce:	b111      	cbz	r1, 80054d6 <_reclaim_reent+0x4a>
 80054d0:	4620      	mov	r0, r4
 80054d2:	f000 f865 	bl	80055a0 <_free_r>
 80054d6:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80054d8:	b111      	cbz	r1, 80054e0 <_reclaim_reent+0x54>
 80054da:	4620      	mov	r0, r4
 80054dc:	f000 f860 	bl	80055a0 <_free_r>
 80054e0:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80054e2:	b111      	cbz	r1, 80054ea <_reclaim_reent+0x5e>
 80054e4:	4620      	mov	r0, r4
 80054e6:	f000 f85b 	bl	80055a0 <_free_r>
 80054ea:	6c61      	ldr	r1, [r4, #68]	; 0x44
 80054ec:	b111      	cbz	r1, 80054f4 <_reclaim_reent+0x68>
 80054ee:	4620      	mov	r0, r4
 80054f0:	f000 f856 	bl	80055a0 <_free_r>
 80054f4:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 80054f6:	b111      	cbz	r1, 80054fe <_reclaim_reent+0x72>
 80054f8:	4620      	mov	r0, r4
 80054fa:	f000 f851 	bl	80055a0 <_free_r>
 80054fe:	6a23      	ldr	r3, [r4, #32]
 8005500:	b1b3      	cbz	r3, 8005530 <_reclaim_reent+0xa4>
 8005502:	4620      	mov	r0, r4
 8005504:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8005508:	4718      	bx	r3
 800550a:	5949      	ldr	r1, [r1, r5]
 800550c:	b941      	cbnz	r1, 8005520 <_reclaim_reent+0x94>
 800550e:	3504      	adds	r5, #4
 8005510:	69e3      	ldr	r3, [r4, #28]
 8005512:	2d80      	cmp	r5, #128	; 0x80
 8005514:	68d9      	ldr	r1, [r3, #12]
 8005516:	d1f8      	bne.n	800550a <_reclaim_reent+0x7e>
 8005518:	4620      	mov	r0, r4
 800551a:	f000 f841 	bl	80055a0 <_free_r>
 800551e:	e7c0      	b.n	80054a2 <_reclaim_reent+0x16>
 8005520:	680e      	ldr	r6, [r1, #0]
 8005522:	4620      	mov	r0, r4
 8005524:	f000 f83c 	bl	80055a0 <_free_r>
 8005528:	4631      	mov	r1, r6
 800552a:	e7ef      	b.n	800550c <_reclaim_reent+0x80>
 800552c:	2500      	movs	r5, #0
 800552e:	e7ef      	b.n	8005510 <_reclaim_reent+0x84>
 8005530:	bd70      	pop	{r4, r5, r6, pc}
 8005532:	bf00      	nop
 8005534:	2000005c 	.word	0x2000005c

08005538 <__libc_init_array>:
 8005538:	b570      	push	{r4, r5, r6, lr}
 800553a:	4d0d      	ldr	r5, [pc, #52]	; (8005570 <__libc_init_array+0x38>)
 800553c:	4c0d      	ldr	r4, [pc, #52]	; (8005574 <__libc_init_array+0x3c>)
 800553e:	1b64      	subs	r4, r4, r5
 8005540:	10a4      	asrs	r4, r4, #2
 8005542:	2600      	movs	r6, #0
 8005544:	42a6      	cmp	r6, r4
 8005546:	d109      	bne.n	800555c <__libc_init_array+0x24>
 8005548:	4d0b      	ldr	r5, [pc, #44]	; (8005578 <__libc_init_array+0x40>)
 800554a:	4c0c      	ldr	r4, [pc, #48]	; (800557c <__libc_init_array+0x44>)
 800554c:	f000 f880 	bl	8005650 <_init>
 8005550:	1b64      	subs	r4, r4, r5
 8005552:	10a4      	asrs	r4, r4, #2
 8005554:	2600      	movs	r6, #0
 8005556:	42a6      	cmp	r6, r4
 8005558:	d105      	bne.n	8005566 <__libc_init_array+0x2e>
 800555a:	bd70      	pop	{r4, r5, r6, pc}
 800555c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005560:	4798      	blx	r3
 8005562:	3601      	adds	r6, #1
 8005564:	e7ee      	b.n	8005544 <__libc_init_array+0xc>
 8005566:	f855 3b04 	ldr.w	r3, [r5], #4
 800556a:	4798      	blx	r3
 800556c:	3601      	adds	r6, #1
 800556e:	e7f2      	b.n	8005556 <__libc_init_array+0x1e>
 8005570:	080057b8 	.word	0x080057b8
 8005574:	080057b8 	.word	0x080057b8
 8005578:	080057b8 	.word	0x080057b8
 800557c:	080057bc 	.word	0x080057bc

08005580 <__retarget_lock_acquire_recursive>:
 8005580:	4770      	bx	lr

08005582 <__retarget_lock_release_recursive>:
 8005582:	4770      	bx	lr

08005584 <memcpy>:
 8005584:	440a      	add	r2, r1
 8005586:	4291      	cmp	r1, r2
 8005588:	f100 33ff 	add.w	r3, r0, #4294967295
 800558c:	d100      	bne.n	8005590 <memcpy+0xc>
 800558e:	4770      	bx	lr
 8005590:	b510      	push	{r4, lr}
 8005592:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005596:	f803 4f01 	strb.w	r4, [r3, #1]!
 800559a:	4291      	cmp	r1, r2
 800559c:	d1f9      	bne.n	8005592 <memcpy+0xe>
 800559e:	bd10      	pop	{r4, pc}

080055a0 <_free_r>:
 80055a0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80055a2:	2900      	cmp	r1, #0
 80055a4:	d044      	beq.n	8005630 <_free_r+0x90>
 80055a6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80055aa:	9001      	str	r0, [sp, #4]
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	f1a1 0404 	sub.w	r4, r1, #4
 80055b2:	bfb8      	it	lt
 80055b4:	18e4      	addlt	r4, r4, r3
 80055b6:	f000 f83f 	bl	8005638 <__malloc_lock>
 80055ba:	4a1e      	ldr	r2, [pc, #120]	; (8005634 <_free_r+0x94>)
 80055bc:	9801      	ldr	r0, [sp, #4]
 80055be:	6813      	ldr	r3, [r2, #0]
 80055c0:	b933      	cbnz	r3, 80055d0 <_free_r+0x30>
 80055c2:	6063      	str	r3, [r4, #4]
 80055c4:	6014      	str	r4, [r2, #0]
 80055c6:	b003      	add	sp, #12
 80055c8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80055cc:	f000 b83a 	b.w	8005644 <__malloc_unlock>
 80055d0:	42a3      	cmp	r3, r4
 80055d2:	d908      	bls.n	80055e6 <_free_r+0x46>
 80055d4:	6825      	ldr	r5, [r4, #0]
 80055d6:	1961      	adds	r1, r4, r5
 80055d8:	428b      	cmp	r3, r1
 80055da:	bf01      	itttt	eq
 80055dc:	6819      	ldreq	r1, [r3, #0]
 80055de:	685b      	ldreq	r3, [r3, #4]
 80055e0:	1949      	addeq	r1, r1, r5
 80055e2:	6021      	streq	r1, [r4, #0]
 80055e4:	e7ed      	b.n	80055c2 <_free_r+0x22>
 80055e6:	461a      	mov	r2, r3
 80055e8:	685b      	ldr	r3, [r3, #4]
 80055ea:	b10b      	cbz	r3, 80055f0 <_free_r+0x50>
 80055ec:	42a3      	cmp	r3, r4
 80055ee:	d9fa      	bls.n	80055e6 <_free_r+0x46>
 80055f0:	6811      	ldr	r1, [r2, #0]
 80055f2:	1855      	adds	r5, r2, r1
 80055f4:	42a5      	cmp	r5, r4
 80055f6:	d10b      	bne.n	8005610 <_free_r+0x70>
 80055f8:	6824      	ldr	r4, [r4, #0]
 80055fa:	4421      	add	r1, r4
 80055fc:	1854      	adds	r4, r2, r1
 80055fe:	42a3      	cmp	r3, r4
 8005600:	6011      	str	r1, [r2, #0]
 8005602:	d1e0      	bne.n	80055c6 <_free_r+0x26>
 8005604:	681c      	ldr	r4, [r3, #0]
 8005606:	685b      	ldr	r3, [r3, #4]
 8005608:	6053      	str	r3, [r2, #4]
 800560a:	440c      	add	r4, r1
 800560c:	6014      	str	r4, [r2, #0]
 800560e:	e7da      	b.n	80055c6 <_free_r+0x26>
 8005610:	d902      	bls.n	8005618 <_free_r+0x78>
 8005612:	230c      	movs	r3, #12
 8005614:	6003      	str	r3, [r0, #0]
 8005616:	e7d6      	b.n	80055c6 <_free_r+0x26>
 8005618:	6825      	ldr	r5, [r4, #0]
 800561a:	1961      	adds	r1, r4, r5
 800561c:	428b      	cmp	r3, r1
 800561e:	bf04      	itt	eq
 8005620:	6819      	ldreq	r1, [r3, #0]
 8005622:	685b      	ldreq	r3, [r3, #4]
 8005624:	6063      	str	r3, [r4, #4]
 8005626:	bf04      	itt	eq
 8005628:	1949      	addeq	r1, r1, r5
 800562a:	6021      	streq	r1, [r4, #0]
 800562c:	6054      	str	r4, [r2, #4]
 800562e:	e7ca      	b.n	80055c6 <_free_r+0x26>
 8005630:	b003      	add	sp, #12
 8005632:	bd30      	pop	{r4, r5, pc}
 8005634:	20001c68 	.word	0x20001c68

08005638 <__malloc_lock>:
 8005638:	4801      	ldr	r0, [pc, #4]	; (8005640 <__malloc_lock+0x8>)
 800563a:	f7ff bfa1 	b.w	8005580 <__retarget_lock_acquire_recursive>
 800563e:	bf00      	nop
 8005640:	20001c64 	.word	0x20001c64

08005644 <__malloc_unlock>:
 8005644:	4801      	ldr	r0, [pc, #4]	; (800564c <__malloc_unlock+0x8>)
 8005646:	f7ff bf9c 	b.w	8005582 <__retarget_lock_release_recursive>
 800564a:	bf00      	nop
 800564c:	20001c64 	.word	0x20001c64

08005650 <_init>:
 8005650:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005652:	bf00      	nop
 8005654:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005656:	bc08      	pop	{r3}
 8005658:	469e      	mov	lr, r3
 800565a:	4770      	bx	lr

0800565c <_fini>:
 800565c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800565e:	bf00      	nop
 8005660:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005662:	bc08      	pop	{r3}
 8005664:	469e      	mov	lr, r3
 8005666:	4770      	bx	lr
