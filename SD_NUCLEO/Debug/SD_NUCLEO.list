
SD_NUCLEO.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007e7c  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002e8  0800801c  0800801c  0001801c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008304  08008304  00020088  2**0
                  CONTENTS
  4 .ARM          00000000  08008304  08008304  00020088  2**0
                  CONTENTS
  5 .preinit_array 00000000  08008304  08008304  00020088  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008304  08008304  00018304  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008308  08008308  00018308  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000088  20000000  0800830c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020088  2**0
                  CONTENTS
 10 .bss          00000260  20000088  20000088  00020088  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200002e8  200002e8  00020088  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020088  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000fc65  00000000  00000000  000200b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000027ec  00000000  00000000  0002fd1d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000c28  00000000  00000000  00032510  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000b00  00000000  00000000  00033138  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00021ea5  00000000  00000000  00033c38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00012e2c  00000000  00000000  00055add  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c435d  00000000  00000000  00068909  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0012cc66  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000033d0  00000000  00000000  0012ccb8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000088 	.word	0x20000088
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08008004 	.word	0x08008004

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000008c 	.word	0x2000008c
 80001dc:	08008004 	.word	0x08008004

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000290:	b580      	push	{r7, lr}
 8000292:	b08a      	sub	sp, #40	; 0x28
 8000294:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000296:	f107 0314 	add.w	r3, r7, #20
 800029a:	2200      	movs	r2, #0
 800029c:	601a      	str	r2, [r3, #0]
 800029e:	605a      	str	r2, [r3, #4]
 80002a0:	609a      	str	r2, [r3, #8]
 80002a2:	60da      	str	r2, [r3, #12]
 80002a4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80002a6:	4b35      	ldr	r3, [pc, #212]	; (800037c <MX_GPIO_Init+0xec>)
 80002a8:	695b      	ldr	r3, [r3, #20]
 80002aa:	4a34      	ldr	r2, [pc, #208]	; (800037c <MX_GPIO_Init+0xec>)
 80002ac:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80002b0:	6153      	str	r3, [r2, #20]
 80002b2:	4b32      	ldr	r3, [pc, #200]	; (800037c <MX_GPIO_Init+0xec>)
 80002b4:	695b      	ldr	r3, [r3, #20]
 80002b6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80002ba:	613b      	str	r3, [r7, #16]
 80002bc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80002be:	4b2f      	ldr	r3, [pc, #188]	; (800037c <MX_GPIO_Init+0xec>)
 80002c0:	695b      	ldr	r3, [r3, #20]
 80002c2:	4a2e      	ldr	r2, [pc, #184]	; (800037c <MX_GPIO_Init+0xec>)
 80002c4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80002c8:	6153      	str	r3, [r2, #20]
 80002ca:	4b2c      	ldr	r3, [pc, #176]	; (800037c <MX_GPIO_Init+0xec>)
 80002cc:	695b      	ldr	r3, [r3, #20]
 80002ce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80002d2:	60fb      	str	r3, [r7, #12]
 80002d4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80002d6:	4b29      	ldr	r3, [pc, #164]	; (800037c <MX_GPIO_Init+0xec>)
 80002d8:	695b      	ldr	r3, [r3, #20]
 80002da:	4a28      	ldr	r2, [pc, #160]	; (800037c <MX_GPIO_Init+0xec>)
 80002dc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80002e0:	6153      	str	r3, [r2, #20]
 80002e2:	4b26      	ldr	r3, [pc, #152]	; (800037c <MX_GPIO_Init+0xec>)
 80002e4:	695b      	ldr	r3, [r3, #20]
 80002e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80002ea:	60bb      	str	r3, [r7, #8]
 80002ec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80002ee:	4b23      	ldr	r3, [pc, #140]	; (800037c <MX_GPIO_Init+0xec>)
 80002f0:	695b      	ldr	r3, [r3, #20]
 80002f2:	4a22      	ldr	r2, [pc, #136]	; (800037c <MX_GPIO_Init+0xec>)
 80002f4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80002f8:	6153      	str	r3, [r2, #20]
 80002fa:	4b20      	ldr	r3, [pc, #128]	; (800037c <MX_GPIO_Init+0xec>)
 80002fc:	695b      	ldr	r3, [r3, #20]
 80002fe:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000302:	607b      	str	r3, [r7, #4]
 8000304:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000306:	2200      	movs	r2, #0
 8000308:	2120      	movs	r1, #32
 800030a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800030e:	f000 fe7b 	bl	8001008 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_RESET);
 8000312:	2200      	movs	r2, #0
 8000314:	2102      	movs	r1, #2
 8000316:	481a      	ldr	r0, [pc, #104]	; (8000380 <MX_GPIO_Init+0xf0>)
 8000318:	f000 fe76 	bl	8001008 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 800031c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000320:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000322:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000326:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000328:	2300      	movs	r3, #0
 800032a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800032c:	f107 0314 	add.w	r3, r7, #20
 8000330:	4619      	mov	r1, r3
 8000332:	4814      	ldr	r0, [pc, #80]	; (8000384 <MX_GPIO_Init+0xf4>)
 8000334:	f000 fcde 	bl	8000cf4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000338:	2320      	movs	r3, #32
 800033a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800033c:	2301      	movs	r3, #1
 800033e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000340:	2300      	movs	r3, #0
 8000342:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000344:	2300      	movs	r3, #0
 8000346:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000348:	f107 0314 	add.w	r3, r7, #20
 800034c:	4619      	mov	r1, r3
 800034e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000352:	f000 fccf 	bl	8000cf4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SD_CS_Pin;
 8000356:	2302      	movs	r3, #2
 8000358:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800035a:	2301      	movs	r3, #1
 800035c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800035e:	2300      	movs	r3, #0
 8000360:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000362:	2300      	movs	r3, #0
 8000364:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SD_CS_GPIO_Port, &GPIO_InitStruct);
 8000366:	f107 0314 	add.w	r3, r7, #20
 800036a:	4619      	mov	r1, r3
 800036c:	4804      	ldr	r0, [pc, #16]	; (8000380 <MX_GPIO_Init+0xf0>)
 800036e:	f000 fcc1 	bl	8000cf4 <HAL_GPIO_Init>

}
 8000372:	bf00      	nop
 8000374:	3728      	adds	r7, #40	; 0x28
 8000376:	46bd      	mov	sp, r7
 8000378:	bd80      	pop	{r7, pc}
 800037a:	bf00      	nop
 800037c:	40021000 	.word	0x40021000
 8000380:	48000400 	.word	0x48000400
 8000384:	48000800 	.word	0x48000800

08000388 <myprintf>:
void myprintf(const char *fmt, ...);
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void myprintf(const char *fmt, ...) {
 8000388:	b40f      	push	{r0, r1, r2, r3}
 800038a:	b580      	push	{r7, lr}
 800038c:	b082      	sub	sp, #8
 800038e:	af00      	add	r7, sp, #0
  static char buffer[256];
  va_list args;
  va_start(args, fmt);
 8000390:	f107 0314 	add.w	r3, r7, #20
 8000394:	603b      	str	r3, [r7, #0]
  vsnprintf(buffer, sizeof(buffer), fmt, args);
 8000396:	683b      	ldr	r3, [r7, #0]
 8000398:	693a      	ldr	r2, [r7, #16]
 800039a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800039e:	480b      	ldr	r0, [pc, #44]	; (80003cc <myprintf+0x44>)
 80003a0:	f007 f9d4 	bl	800774c <vsniprintf>
  va_end(args);

  int len = strlen(buffer);
 80003a4:	4809      	ldr	r0, [pc, #36]	; (80003cc <myprintf+0x44>)
 80003a6:	f7ff ff1b 	bl	80001e0 <strlen>
 80003aa:	4603      	mov	r3, r0
 80003ac:	607b      	str	r3, [r7, #4]
  HAL_UART_Transmit(&huart2, (uint8_t*)buffer, len, -1);
 80003ae:	687b      	ldr	r3, [r7, #4]
 80003b0:	b29a      	uxth	r2, r3
 80003b2:	f04f 33ff 	mov.w	r3, #4294967295
 80003b6:	4905      	ldr	r1, [pc, #20]	; (80003cc <myprintf+0x44>)
 80003b8:	4805      	ldr	r0, [pc, #20]	; (80003d0 <myprintf+0x48>)
 80003ba:	f003 f8f3 	bl	80035a4 <HAL_UART_Transmit>

}
 80003be:	bf00      	nop
 80003c0:	3708      	adds	r7, #8
 80003c2:	46bd      	mov	sp, r7
 80003c4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80003c8:	b004      	add	sp, #16
 80003ca:	4770      	bx	lr
 80003cc:	200000a4 	.word	0x200000a4
 80003d0:	2000020c 	.word	0x2000020c

080003d4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80003d4:	b5b0      	push	{r4, r5, r7, lr}
 80003d6:	f5ad 6d93 	sub.w	sp, sp, #1176	; 0x498
 80003da:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80003dc:	f000 fb1a 	bl	8000a14 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80003e0:	f000 f90c 	bl	80005fc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80003e4:	f7ff ff54 	bl	8000290 <MX_GPIO_Init>
  MX_SPI2_Init();
 80003e8:	f000 f960 	bl	80006ac <MX_SPI2_Init>
  MX_USART2_UART_Init();
 80003ec:	f000 fa76 	bl	80008dc <MX_USART2_UART_Init>
  MX_FATFS_Init();
 80003f0:	f003 fd4c 	bl	8003e8c <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */

  myprintf("\r\n~ SD card demo by kiwih ~\r\n\r\n");
 80003f4:	4872      	ldr	r0, [pc, #456]	; (80005c0 <main+0x1ec>)
 80003f6:	f7ff ffc7 	bl	8000388 <myprintf>

  HAL_Delay(1000); //a short delay is important to let the SD card settle
 80003fa:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80003fe:	f000 fb6f 	bl	8000ae0 <HAL_Delay>
  FATFS FatFs; 	//Fatfs handle
  FIL fil; 		//File handle
  FRESULT fres; //Result after operations

  //Open the file system
  fres = f_mount(&FatFs, "", 1); //1=mount now
 8000402:	f507 7316 	add.w	r3, r7, #600	; 0x258
 8000406:	2201      	movs	r2, #1
 8000408:	496e      	ldr	r1, [pc, #440]	; (80005c4 <main+0x1f0>)
 800040a:	4618      	mov	r0, r3
 800040c:	f006 f91e 	bl	800664c <f_mount>
 8000410:	4603      	mov	r3, r0
 8000412:	f887 3497 	strb.w	r3, [r7, #1175]	; 0x497
  if (fres != FR_OK) {
 8000416:	f897 3497 	ldrb.w	r3, [r7, #1175]	; 0x497
 800041a:	2b00      	cmp	r3, #0
 800041c:	d006      	beq.n	800042c <main+0x58>
	myprintf("f_mount error (%i)\r\n", fres);
 800041e:	f897 3497 	ldrb.w	r3, [r7, #1175]	; 0x497
 8000422:	4619      	mov	r1, r3
 8000424:	4868      	ldr	r0, [pc, #416]	; (80005c8 <main+0x1f4>)
 8000426:	f7ff ffaf 	bl	8000388 <myprintf>
	while(1);
 800042a:	e7fe      	b.n	800042a <main+0x56>
  //Let's get some statistics from the SD card
  DWORD free_clusters, free_sectors, total_sectors;

  FATFS* getFreeFs;

  fres = f_getfree("", &free_clusters, &getFreeFs);
 800042c:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8000430:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000434:	4619      	mov	r1, r3
 8000436:	4863      	ldr	r0, [pc, #396]	; (80005c4 <main+0x1f0>)
 8000438:	f006 ffc3 	bl	80073c2 <f_getfree>
 800043c:	4603      	mov	r3, r0
 800043e:	f887 3497 	strb.w	r3, [r7, #1175]	; 0x497
  if (fres != FR_OK) {
 8000442:	f897 3497 	ldrb.w	r3, [r7, #1175]	; 0x497
 8000446:	2b00      	cmp	r3, #0
 8000448:	d006      	beq.n	8000458 <main+0x84>
	myprintf("f_getfree error (%i)\r\n", fres);
 800044a:	f897 3497 	ldrb.w	r3, [r7, #1175]	; 0x497
 800044e:	4619      	mov	r1, r3
 8000450:	485e      	ldr	r0, [pc, #376]	; (80005cc <main+0x1f8>)
 8000452:	f7ff ff99 	bl	8000388 <myprintf>
	while(1);
 8000456:	e7fe      	b.n	8000456 <main+0x82>
  }

  //Formula comes from ChaN's documentation
  total_sectors = (getFreeFs->n_fatent - 2) * getFreeFs->csize;
 8000458:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 800045c:	f2a3 4374 	subw	r3, r3, #1140	; 0x474
 8000460:	681b      	ldr	r3, [r3, #0]
 8000462:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8000466:	3b02      	subs	r3, #2
 8000468:	f507 6293 	add.w	r2, r7, #1176	; 0x498
 800046c:	f2a2 4274 	subw	r2, r2, #1140	; 0x474
 8000470:	6812      	ldr	r2, [r2, #0]
 8000472:	f892 2202 	ldrb.w	r2, [r2, #514]	; 0x202
 8000476:	fb02 f303 	mul.w	r3, r2, r3
 800047a:	f8c7 3490 	str.w	r3, [r7, #1168]	; 0x490
  free_sectors = free_clusters * getFreeFs->csize;
 800047e:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 8000482:	f2a3 4374 	subw	r3, r3, #1140	; 0x474
 8000486:	681b      	ldr	r3, [r3, #0]
 8000488:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 800048c:	461a      	mov	r2, r3
 800048e:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 8000492:	f5a3 638e 	sub.w	r3, r3, #1136	; 0x470
 8000496:	681b      	ldr	r3, [r3, #0]
 8000498:	fb02 f303 	mul.w	r3, r2, r3
 800049c:	f8c7 348c 	str.w	r3, [r7, #1164]	; 0x48c

  myprintf("SD card stats:\r\n%10lu KiB total drive space.\r\n%10lu KiB available.\r\n", total_sectors / 2, free_sectors / 2);
 80004a0:	f8d7 3490 	ldr.w	r3, [r7, #1168]	; 0x490
 80004a4:	0859      	lsrs	r1, r3, #1
 80004a6:	f8d7 348c 	ldr.w	r3, [r7, #1164]	; 0x48c
 80004aa:	085b      	lsrs	r3, r3, #1
 80004ac:	461a      	mov	r2, r3
 80004ae:	4848      	ldr	r0, [pc, #288]	; (80005d0 <main+0x1fc>)
 80004b0:	f7ff ff6a 	bl	8000388 <myprintf>

  //Now let's try to open file "test.txt"
  fres = f_open(&fil, "test.txt", FA_READ);
 80004b4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80004b8:	2201      	movs	r2, #1
 80004ba:	4946      	ldr	r1, [pc, #280]	; (80005d4 <main+0x200>)
 80004bc:	4618      	mov	r0, r3
 80004be:	f006 f90d 	bl	80066dc <f_open>
 80004c2:	4603      	mov	r3, r0
 80004c4:	f887 3497 	strb.w	r3, [r7, #1175]	; 0x497
  if (fres != FR_OK) {
 80004c8:	f897 3497 	ldrb.w	r3, [r7, #1175]	; 0x497
 80004cc:	2b00      	cmp	r3, #0
 80004ce:	d003      	beq.n	80004d8 <main+0x104>
	myprintf("f_open error (%i)\r\n");
 80004d0:	4841      	ldr	r0, [pc, #260]	; (80005d8 <main+0x204>)
 80004d2:	f7ff ff59 	bl	8000388 <myprintf>
	while(1);
 80004d6:	e7fe      	b.n	80004d6 <main+0x102>
  }
  myprintf("I was able to open 'test.txt' for reading!\r\n");
 80004d8:	4840      	ldr	r0, [pc, #256]	; (80005dc <main+0x208>)
 80004da:	f7ff ff55 	bl	8000388 <myprintf>
  //Read 30 bytes from "test.txt" on the SD card
  BYTE readBuf[30];

  //We can either use f_read OR f_gets to get data out of files
  //f_gets is a wrapper on f_read that does some string formatting for us
  TCHAR* rres = f_gets((TCHAR*)readBuf, 30, &fil);
 80004de:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 80004e2:	1d3b      	adds	r3, r7, #4
 80004e4:	211e      	movs	r1, #30
 80004e6:	4618      	mov	r0, r3
 80004e8:	f007 f838 	bl	800755c <f_gets>
 80004ec:	f8c7 0488 	str.w	r0, [r7, #1160]	; 0x488
  if(rres != 0) {
 80004f0:	f8d7 3488 	ldr.w	r3, [r7, #1160]	; 0x488
 80004f4:	2b00      	cmp	r3, #0
 80004f6:	d005      	beq.n	8000504 <main+0x130>
	myprintf("Read string from 'test.txt' contents: %s\r\n", readBuf);
 80004f8:	1d3b      	adds	r3, r7, #4
 80004fa:	4619      	mov	r1, r3
 80004fc:	4838      	ldr	r0, [pc, #224]	; (80005e0 <main+0x20c>)
 80004fe:	f7ff ff43 	bl	8000388 <myprintf>
 8000502:	e005      	b.n	8000510 <main+0x13c>
  } else {
	myprintf("f_gets error (%i)\r\n", fres);
 8000504:	f897 3497 	ldrb.w	r3, [r7, #1175]	; 0x497
 8000508:	4619      	mov	r1, r3
 800050a:	4836      	ldr	r0, [pc, #216]	; (80005e4 <main+0x210>)
 800050c:	f7ff ff3c 	bl	8000388 <myprintf>
  }

  //Be a tidy kiwi - don't forget to close your file!
  f_close(&fil);
 8000510:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000514:	4618      	mov	r0, r3
 8000516:	f006 ff2c 	bl	8007372 <f_close>

  //Now let's try and write a file "write.txt"
  fres = f_open(&fil, "write.txt", FA_WRITE | FA_OPEN_ALWAYS | FA_CREATE_ALWAYS);
 800051a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800051e:	221a      	movs	r2, #26
 8000520:	4931      	ldr	r1, [pc, #196]	; (80005e8 <main+0x214>)
 8000522:	4618      	mov	r0, r3
 8000524:	f006 f8da 	bl	80066dc <f_open>
 8000528:	4603      	mov	r3, r0
 800052a:	f887 3497 	strb.w	r3, [r7, #1175]	; 0x497
  if(fres == FR_OK) {
 800052e:	f897 3497 	ldrb.w	r3, [r7, #1175]	; 0x497
 8000532:	2b00      	cmp	r3, #0
 8000534:	d103      	bne.n	800053e <main+0x16a>
	myprintf("I was able to open 'write.txt' for writing\r\n");
 8000536:	482d      	ldr	r0, [pc, #180]	; (80005ec <main+0x218>)
 8000538:	f7ff ff26 	bl	8000388 <myprintf>
 800053c:	e005      	b.n	800054a <main+0x176>
  } else {
	myprintf("f_open error (%i)\r\n", fres);
 800053e:	f897 3497 	ldrb.w	r3, [r7, #1175]	; 0x497
 8000542:	4619      	mov	r1, r3
 8000544:	4824      	ldr	r0, [pc, #144]	; (80005d8 <main+0x204>)
 8000546:	f7ff ff1f 	bl	8000388 <myprintf>
  }

  //Copy in a string
  strncpy((char*)readBuf, "a new file is made!", 19);
 800054a:	1d3b      	adds	r3, r7, #4
 800054c:	4a28      	ldr	r2, [pc, #160]	; (80005f0 <main+0x21c>)
 800054e:	461c      	mov	r4, r3
 8000550:	4615      	mov	r5, r2
 8000552:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000554:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000556:	682b      	ldr	r3, [r5, #0]
 8000558:	461a      	mov	r2, r3
 800055a:	8022      	strh	r2, [r4, #0]
 800055c:	3402      	adds	r4, #2
 800055e:	0c1b      	lsrs	r3, r3, #16
 8000560:	7023      	strb	r3, [r4, #0]
  UINT bytesWrote;
  fres = f_write(&fil, readBuf, 19, &bytesWrote);
 8000562:	463b      	mov	r3, r7
 8000564:	1d39      	adds	r1, r7, #4
 8000566:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 800056a:	2213      	movs	r2, #19
 800056c:	f006 fc9a 	bl	8006ea4 <f_write>
 8000570:	4603      	mov	r3, r0
 8000572:	f887 3497 	strb.w	r3, [r7, #1175]	; 0x497
  if(fres == FR_OK) {
 8000576:	f897 3497 	ldrb.w	r3, [r7, #1175]	; 0x497
 800057a:	2b00      	cmp	r3, #0
 800057c:	d109      	bne.n	8000592 <main+0x1be>
	myprintf("Wrote %i bytes to 'write.txt'!\r\n", bytesWrote);
 800057e:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 8000582:	f5a3 6393 	sub.w	r3, r3, #1176	; 0x498
 8000586:	681b      	ldr	r3, [r3, #0]
 8000588:	4619      	mov	r1, r3
 800058a:	481a      	ldr	r0, [pc, #104]	; (80005f4 <main+0x220>)
 800058c:	f7ff fefc 	bl	8000388 <myprintf>
 8000590:	e002      	b.n	8000598 <main+0x1c4>
  } else {
	myprintf("f_write error (%i)\r\n");
 8000592:	4819      	ldr	r0, [pc, #100]	; (80005f8 <main+0x224>)
 8000594:	f7ff fef8 	bl	8000388 <myprintf>
  }

  //Be a tidy kiwi - don't forget to close your file!
  f_close(&fil);
 8000598:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800059c:	4618      	mov	r0, r3
 800059e:	f006 fee8 	bl	8007372 <f_close>

  //We're done, so de-mount the drive
  f_mount(NULL, "", 0);
 80005a2:	2200      	movs	r2, #0
 80005a4:	4907      	ldr	r1, [pc, #28]	; (80005c4 <main+0x1f0>)
 80005a6:	2000      	movs	r0, #0
 80005a8:	f006 f850 	bl	800664c <f_mount>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 80005ac:	2120      	movs	r1, #32
 80005ae:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005b2:	f000 fd41 	bl	8001038 <HAL_GPIO_TogglePin>
	  	  HAL_Delay(1000);
 80005b6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80005ba:	f000 fa91 	bl	8000ae0 <HAL_Delay>
	  HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 80005be:	e7f5      	b.n	80005ac <main+0x1d8>
 80005c0:	0800801c 	.word	0x0800801c
 80005c4:	0800803c 	.word	0x0800803c
 80005c8:	08008040 	.word	0x08008040
 80005cc:	08008058 	.word	0x08008058
 80005d0:	08008070 	.word	0x08008070
 80005d4:	080080b8 	.word	0x080080b8
 80005d8:	080080c4 	.word	0x080080c4
 80005dc:	080080d8 	.word	0x080080d8
 80005e0:	08008108 	.word	0x08008108
 80005e4:	08008134 	.word	0x08008134
 80005e8:	08008148 	.word	0x08008148
 80005ec:	08008154 	.word	0x08008154
 80005f0:	08008184 	.word	0x08008184
 80005f4:	08008198 	.word	0x08008198
 80005f8:	080081bc 	.word	0x080081bc

080005fc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005fc:	b580      	push	{r7, lr}
 80005fe:	b0a6      	sub	sp, #152	; 0x98
 8000600:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000602:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000606:	2228      	movs	r2, #40	; 0x28
 8000608:	2100      	movs	r1, #0
 800060a:	4618      	mov	r0, r3
 800060c:	f007 f86a 	bl	80076e4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000610:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000614:	2200      	movs	r2, #0
 8000616:	601a      	str	r2, [r3, #0]
 8000618:	605a      	str	r2, [r3, #4]
 800061a:	609a      	str	r2, [r3, #8]
 800061c:	60da      	str	r2, [r3, #12]
 800061e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000620:	1d3b      	adds	r3, r7, #4
 8000622:	2258      	movs	r2, #88	; 0x58
 8000624:	2100      	movs	r1, #0
 8000626:	4618      	mov	r0, r3
 8000628:	f007 f85c 	bl	80076e4 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800062c:	2302      	movs	r3, #2
 800062e:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000630:	2301      	movs	r3, #1
 8000632:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000634:	2310      	movs	r3, #16
 8000636:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800063a:	2300      	movs	r3, #0
 800063c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000640:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000644:	4618      	mov	r0, r3
 8000646:	f000 fd11 	bl	800106c <HAL_RCC_OscConfig>
 800064a:	4603      	mov	r3, r0
 800064c:	2b00      	cmp	r3, #0
 800064e:	d001      	beq.n	8000654 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000650:	f000 f827 	bl	80006a2 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000654:	230f      	movs	r3, #15
 8000656:	65fb      	str	r3, [r7, #92]	; 0x5c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000658:	2300      	movs	r3, #0
 800065a:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800065c:	2300      	movs	r3, #0
 800065e:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000660:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000664:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000666:	2300      	movs	r3, #0
 8000668:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800066a:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800066e:	2100      	movs	r1, #0
 8000670:	4618      	mov	r0, r3
 8000672:	f001 fd4f 	bl	8002114 <HAL_RCC_ClockConfig>
 8000676:	4603      	mov	r3, r0
 8000678:	2b00      	cmp	r3, #0
 800067a:	d001      	beq.n	8000680 <SystemClock_Config+0x84>
  {
    Error_Handler();
 800067c:	f000 f811 	bl	80006a2 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000680:	2302      	movs	r3, #2
 8000682:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000684:	2300      	movs	r3, #0
 8000686:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000688:	1d3b      	adds	r3, r7, #4
 800068a:	4618      	mov	r0, r3
 800068c:	f001 ff78 	bl	8002580 <HAL_RCCEx_PeriphCLKConfig>
 8000690:	4603      	mov	r3, r0
 8000692:	2b00      	cmp	r3, #0
 8000694:	d001      	beq.n	800069a <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000696:	f000 f804 	bl	80006a2 <Error_Handler>
  }
}
 800069a:	bf00      	nop
 800069c:	3798      	adds	r7, #152	; 0x98
 800069e:	46bd      	mov	sp, r7
 80006a0:	bd80      	pop	{r7, pc}

080006a2 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80006a2:	b480      	push	{r7}
 80006a4:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80006a6:	b672      	cpsid	i
}
 80006a8:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80006aa:	e7fe      	b.n	80006aa <Error_Handler+0x8>

080006ac <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 80006ac:	b580      	push	{r7, lr}
 80006ae:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 80006b0:	4b1b      	ldr	r3, [pc, #108]	; (8000720 <MX_SPI2_Init+0x74>)
 80006b2:	4a1c      	ldr	r2, [pc, #112]	; (8000724 <MX_SPI2_Init+0x78>)
 80006b4:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80006b6:	4b1a      	ldr	r3, [pc, #104]	; (8000720 <MX_SPI2_Init+0x74>)
 80006b8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80006bc:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80006be:	4b18      	ldr	r3, [pc, #96]	; (8000720 <MX_SPI2_Init+0x74>)
 80006c0:	2200      	movs	r2, #0
 80006c2:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80006c4:	4b16      	ldr	r3, [pc, #88]	; (8000720 <MX_SPI2_Init+0x74>)
 80006c6:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80006ca:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80006cc:	4b14      	ldr	r3, [pc, #80]	; (8000720 <MX_SPI2_Init+0x74>)
 80006ce:	2200      	movs	r2, #0
 80006d0:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80006d2:	4b13      	ldr	r3, [pc, #76]	; (8000720 <MX_SPI2_Init+0x74>)
 80006d4:	2200      	movs	r2, #0
 80006d6:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80006d8:	4b11      	ldr	r3, [pc, #68]	; (8000720 <MX_SPI2_Init+0x74>)
 80006da:	f44f 7200 	mov.w	r2, #512	; 0x200
 80006de:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 80006e0:	4b0f      	ldr	r3, [pc, #60]	; (8000720 <MX_SPI2_Init+0x74>)
 80006e2:	2230      	movs	r2, #48	; 0x30
 80006e4:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80006e6:	4b0e      	ldr	r3, [pc, #56]	; (8000720 <MX_SPI2_Init+0x74>)
 80006e8:	2200      	movs	r2, #0
 80006ea:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80006ec:	4b0c      	ldr	r3, [pc, #48]	; (8000720 <MX_SPI2_Init+0x74>)
 80006ee:	2200      	movs	r2, #0
 80006f0:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80006f2:	4b0b      	ldr	r3, [pc, #44]	; (8000720 <MX_SPI2_Init+0x74>)
 80006f4:	2200      	movs	r2, #0
 80006f6:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 80006f8:	4b09      	ldr	r3, [pc, #36]	; (8000720 <MX_SPI2_Init+0x74>)
 80006fa:	2207      	movs	r2, #7
 80006fc:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80006fe:	4b08      	ldr	r3, [pc, #32]	; (8000720 <MX_SPI2_Init+0x74>)
 8000700:	2200      	movs	r2, #0
 8000702:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000704:	4b06      	ldr	r3, [pc, #24]	; (8000720 <MX_SPI2_Init+0x74>)
 8000706:	2208      	movs	r2, #8
 8000708:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800070a:	4805      	ldr	r0, [pc, #20]	; (8000720 <MX_SPI2_Init+0x74>)
 800070c:	f002 f956 	bl	80029bc <HAL_SPI_Init>
 8000710:	4603      	mov	r3, r0
 8000712:	2b00      	cmp	r3, #0
 8000714:	d001      	beq.n	800071a <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8000716:	f7ff ffc4 	bl	80006a2 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800071a:	bf00      	nop
 800071c:	bd80      	pop	{r7, pc}
 800071e:	bf00      	nop
 8000720:	200001a4 	.word	0x200001a4
 8000724:	40003800 	.word	0x40003800

08000728 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000728:	b580      	push	{r7, lr}
 800072a:	b08a      	sub	sp, #40	; 0x28
 800072c:	af00      	add	r7, sp, #0
 800072e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000730:	f107 0314 	add.w	r3, r7, #20
 8000734:	2200      	movs	r2, #0
 8000736:	601a      	str	r2, [r3, #0]
 8000738:	605a      	str	r2, [r3, #4]
 800073a:	609a      	str	r2, [r3, #8]
 800073c:	60da      	str	r2, [r3, #12]
 800073e:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI2)
 8000740:	687b      	ldr	r3, [r7, #4]
 8000742:	681b      	ldr	r3, [r3, #0]
 8000744:	4a17      	ldr	r2, [pc, #92]	; (80007a4 <HAL_SPI_MspInit+0x7c>)
 8000746:	4293      	cmp	r3, r2
 8000748:	d128      	bne.n	800079c <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800074a:	4b17      	ldr	r3, [pc, #92]	; (80007a8 <HAL_SPI_MspInit+0x80>)
 800074c:	69db      	ldr	r3, [r3, #28]
 800074e:	4a16      	ldr	r2, [pc, #88]	; (80007a8 <HAL_SPI_MspInit+0x80>)
 8000750:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000754:	61d3      	str	r3, [r2, #28]
 8000756:	4b14      	ldr	r3, [pc, #80]	; (80007a8 <HAL_SPI_MspInit+0x80>)
 8000758:	69db      	ldr	r3, [r3, #28]
 800075a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800075e:	613b      	str	r3, [r7, #16]
 8000760:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000762:	4b11      	ldr	r3, [pc, #68]	; (80007a8 <HAL_SPI_MspInit+0x80>)
 8000764:	695b      	ldr	r3, [r3, #20]
 8000766:	4a10      	ldr	r2, [pc, #64]	; (80007a8 <HAL_SPI_MspInit+0x80>)
 8000768:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800076c:	6153      	str	r3, [r2, #20]
 800076e:	4b0e      	ldr	r3, [pc, #56]	; (80007a8 <HAL_SPI_MspInit+0x80>)
 8000770:	695b      	ldr	r3, [r3, #20]
 8000772:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000776:	60fb      	str	r3, [r7, #12]
 8000778:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 800077a:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 800077e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000780:	2302      	movs	r3, #2
 8000782:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000784:	2300      	movs	r3, #0
 8000786:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000788:	2303      	movs	r3, #3
 800078a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800078c:	2305      	movs	r3, #5
 800078e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000790:	f107 0314 	add.w	r3, r7, #20
 8000794:	4619      	mov	r1, r3
 8000796:	4805      	ldr	r0, [pc, #20]	; (80007ac <HAL_SPI_MspInit+0x84>)
 8000798:	f000 faac 	bl	8000cf4 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 800079c:	bf00      	nop
 800079e:	3728      	adds	r7, #40	; 0x28
 80007a0:	46bd      	mov	sp, r7
 80007a2:	bd80      	pop	{r7, pc}
 80007a4:	40003800 	.word	0x40003800
 80007a8:	40021000 	.word	0x40021000
 80007ac:	48000400 	.word	0x48000400

080007b0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007b0:	b580      	push	{r7, lr}
 80007b2:	b082      	sub	sp, #8
 80007b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007b6:	4b0f      	ldr	r3, [pc, #60]	; (80007f4 <HAL_MspInit+0x44>)
 80007b8:	699b      	ldr	r3, [r3, #24]
 80007ba:	4a0e      	ldr	r2, [pc, #56]	; (80007f4 <HAL_MspInit+0x44>)
 80007bc:	f043 0301 	orr.w	r3, r3, #1
 80007c0:	6193      	str	r3, [r2, #24]
 80007c2:	4b0c      	ldr	r3, [pc, #48]	; (80007f4 <HAL_MspInit+0x44>)
 80007c4:	699b      	ldr	r3, [r3, #24]
 80007c6:	f003 0301 	and.w	r3, r3, #1
 80007ca:	607b      	str	r3, [r7, #4]
 80007cc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80007ce:	4b09      	ldr	r3, [pc, #36]	; (80007f4 <HAL_MspInit+0x44>)
 80007d0:	69db      	ldr	r3, [r3, #28]
 80007d2:	4a08      	ldr	r2, [pc, #32]	; (80007f4 <HAL_MspInit+0x44>)
 80007d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007d8:	61d3      	str	r3, [r2, #28]
 80007da:	4b06      	ldr	r3, [pc, #24]	; (80007f4 <HAL_MspInit+0x44>)
 80007dc:	69db      	ldr	r3, [r3, #28]
 80007de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007e2:	603b      	str	r3, [r7, #0]
 80007e4:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80007e6:	2007      	movs	r0, #7
 80007e8:	f000 fa50 	bl	8000c8c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007ec:	bf00      	nop
 80007ee:	3708      	adds	r7, #8
 80007f0:	46bd      	mov	sp, r7
 80007f2:	bd80      	pop	{r7, pc}
 80007f4:	40021000 	.word	0x40021000

080007f8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80007f8:	b480      	push	{r7}
 80007fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80007fc:	e7fe      	b.n	80007fc <NMI_Handler+0x4>

080007fe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80007fe:	b480      	push	{r7}
 8000800:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000802:	e7fe      	b.n	8000802 <HardFault_Handler+0x4>

08000804 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000804:	b480      	push	{r7}
 8000806:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000808:	e7fe      	b.n	8000808 <MemManage_Handler+0x4>

0800080a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800080a:	b480      	push	{r7}
 800080c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800080e:	e7fe      	b.n	800080e <BusFault_Handler+0x4>

08000810 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000810:	b480      	push	{r7}
 8000812:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000814:	e7fe      	b.n	8000814 <UsageFault_Handler+0x4>

08000816 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000816:	b480      	push	{r7}
 8000818:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800081a:	bf00      	nop
 800081c:	46bd      	mov	sp, r7
 800081e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000822:	4770      	bx	lr

08000824 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000824:	b480      	push	{r7}
 8000826:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000828:	bf00      	nop
 800082a:	46bd      	mov	sp, r7
 800082c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000830:	4770      	bx	lr

08000832 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000832:	b480      	push	{r7}
 8000834:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000836:	bf00      	nop
 8000838:	46bd      	mov	sp, r7
 800083a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800083e:	4770      	bx	lr

08000840 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000840:	b580      	push	{r7, lr}
 8000842:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000844:	f000 f92c 	bl	8000aa0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000848:	bf00      	nop
 800084a:	bd80      	pop	{r7, pc}

0800084c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800084c:	b580      	push	{r7, lr}
 800084e:	b086      	sub	sp, #24
 8000850:	af00      	add	r7, sp, #0
 8000852:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000854:	4a14      	ldr	r2, [pc, #80]	; (80008a8 <_sbrk+0x5c>)
 8000856:	4b15      	ldr	r3, [pc, #84]	; (80008ac <_sbrk+0x60>)
 8000858:	1ad3      	subs	r3, r2, r3
 800085a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800085c:	697b      	ldr	r3, [r7, #20]
 800085e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000860:	4b13      	ldr	r3, [pc, #76]	; (80008b0 <_sbrk+0x64>)
 8000862:	681b      	ldr	r3, [r3, #0]
 8000864:	2b00      	cmp	r3, #0
 8000866:	d102      	bne.n	800086e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000868:	4b11      	ldr	r3, [pc, #68]	; (80008b0 <_sbrk+0x64>)
 800086a:	4a12      	ldr	r2, [pc, #72]	; (80008b4 <_sbrk+0x68>)
 800086c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800086e:	4b10      	ldr	r3, [pc, #64]	; (80008b0 <_sbrk+0x64>)
 8000870:	681a      	ldr	r2, [r3, #0]
 8000872:	687b      	ldr	r3, [r7, #4]
 8000874:	4413      	add	r3, r2
 8000876:	693a      	ldr	r2, [r7, #16]
 8000878:	429a      	cmp	r2, r3
 800087a:	d207      	bcs.n	800088c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800087c:	f006 ff08 	bl	8007690 <__errno>
 8000880:	4603      	mov	r3, r0
 8000882:	220c      	movs	r2, #12
 8000884:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000886:	f04f 33ff 	mov.w	r3, #4294967295
 800088a:	e009      	b.n	80008a0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800088c:	4b08      	ldr	r3, [pc, #32]	; (80008b0 <_sbrk+0x64>)
 800088e:	681b      	ldr	r3, [r3, #0]
 8000890:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000892:	4b07      	ldr	r3, [pc, #28]	; (80008b0 <_sbrk+0x64>)
 8000894:	681a      	ldr	r2, [r3, #0]
 8000896:	687b      	ldr	r3, [r7, #4]
 8000898:	4413      	add	r3, r2
 800089a:	4a05      	ldr	r2, [pc, #20]	; (80008b0 <_sbrk+0x64>)
 800089c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800089e:	68fb      	ldr	r3, [r7, #12]
}
 80008a0:	4618      	mov	r0, r3
 80008a2:	3718      	adds	r7, #24
 80008a4:	46bd      	mov	sp, r7
 80008a6:	bd80      	pop	{r7, pc}
 80008a8:	20010000 	.word	0x20010000
 80008ac:	00000400 	.word	0x00000400
 80008b0:	20000208 	.word	0x20000208
 80008b4:	200002e8 	.word	0x200002e8

080008b8 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80008b8:	b480      	push	{r7}
 80008ba:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80008bc:	4b06      	ldr	r3, [pc, #24]	; (80008d8 <SystemInit+0x20>)
 80008be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80008c2:	4a05      	ldr	r2, [pc, #20]	; (80008d8 <SystemInit+0x20>)
 80008c4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80008c8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80008cc:	bf00      	nop
 80008ce:	46bd      	mov	sp, r7
 80008d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008d4:	4770      	bx	lr
 80008d6:	bf00      	nop
 80008d8:	e000ed00 	.word	0xe000ed00

080008dc <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80008dc:	b580      	push	{r7, lr}
 80008de:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80008e0:	4b14      	ldr	r3, [pc, #80]	; (8000934 <MX_USART2_UART_Init+0x58>)
 80008e2:	4a15      	ldr	r2, [pc, #84]	; (8000938 <MX_USART2_UART_Init+0x5c>)
 80008e4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 80008e6:	4b13      	ldr	r3, [pc, #76]	; (8000934 <MX_USART2_UART_Init+0x58>)
 80008e8:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 80008ec:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80008ee:	4b11      	ldr	r3, [pc, #68]	; (8000934 <MX_USART2_UART_Init+0x58>)
 80008f0:	2200      	movs	r2, #0
 80008f2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80008f4:	4b0f      	ldr	r3, [pc, #60]	; (8000934 <MX_USART2_UART_Init+0x58>)
 80008f6:	2200      	movs	r2, #0
 80008f8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80008fa:	4b0e      	ldr	r3, [pc, #56]	; (8000934 <MX_USART2_UART_Init+0x58>)
 80008fc:	2200      	movs	r2, #0
 80008fe:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000900:	4b0c      	ldr	r3, [pc, #48]	; (8000934 <MX_USART2_UART_Init+0x58>)
 8000902:	220c      	movs	r2, #12
 8000904:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000906:	4b0b      	ldr	r3, [pc, #44]	; (8000934 <MX_USART2_UART_Init+0x58>)
 8000908:	2200      	movs	r2, #0
 800090a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800090c:	4b09      	ldr	r3, [pc, #36]	; (8000934 <MX_USART2_UART_Init+0x58>)
 800090e:	2200      	movs	r2, #0
 8000910:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000912:	4b08      	ldr	r3, [pc, #32]	; (8000934 <MX_USART2_UART_Init+0x58>)
 8000914:	2200      	movs	r2, #0
 8000916:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000918:	4b06      	ldr	r3, [pc, #24]	; (8000934 <MX_USART2_UART_Init+0x58>)
 800091a:	2200      	movs	r2, #0
 800091c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800091e:	4805      	ldr	r0, [pc, #20]	; (8000934 <MX_USART2_UART_Init+0x58>)
 8000920:	f002 fdf2 	bl	8003508 <HAL_UART_Init>
 8000924:	4603      	mov	r3, r0
 8000926:	2b00      	cmp	r3, #0
 8000928:	d001      	beq.n	800092e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800092a:	f7ff feba 	bl	80006a2 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800092e:	bf00      	nop
 8000930:	bd80      	pop	{r7, pc}
 8000932:	bf00      	nop
 8000934:	2000020c 	.word	0x2000020c
 8000938:	40004400 	.word	0x40004400

0800093c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800093c:	b580      	push	{r7, lr}
 800093e:	b08a      	sub	sp, #40	; 0x28
 8000940:	af00      	add	r7, sp, #0
 8000942:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000944:	f107 0314 	add.w	r3, r7, #20
 8000948:	2200      	movs	r2, #0
 800094a:	601a      	str	r2, [r3, #0]
 800094c:	605a      	str	r2, [r3, #4]
 800094e:	609a      	str	r2, [r3, #8]
 8000950:	60da      	str	r2, [r3, #12]
 8000952:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	681b      	ldr	r3, [r3, #0]
 8000958:	4a17      	ldr	r2, [pc, #92]	; (80009b8 <HAL_UART_MspInit+0x7c>)
 800095a:	4293      	cmp	r3, r2
 800095c:	d128      	bne.n	80009b0 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800095e:	4b17      	ldr	r3, [pc, #92]	; (80009bc <HAL_UART_MspInit+0x80>)
 8000960:	69db      	ldr	r3, [r3, #28]
 8000962:	4a16      	ldr	r2, [pc, #88]	; (80009bc <HAL_UART_MspInit+0x80>)
 8000964:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000968:	61d3      	str	r3, [r2, #28]
 800096a:	4b14      	ldr	r3, [pc, #80]	; (80009bc <HAL_UART_MspInit+0x80>)
 800096c:	69db      	ldr	r3, [r3, #28]
 800096e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000972:	613b      	str	r3, [r7, #16]
 8000974:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000976:	4b11      	ldr	r3, [pc, #68]	; (80009bc <HAL_UART_MspInit+0x80>)
 8000978:	695b      	ldr	r3, [r3, #20]
 800097a:	4a10      	ldr	r2, [pc, #64]	; (80009bc <HAL_UART_MspInit+0x80>)
 800097c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000980:	6153      	str	r3, [r2, #20]
 8000982:	4b0e      	ldr	r3, [pc, #56]	; (80009bc <HAL_UART_MspInit+0x80>)
 8000984:	695b      	ldr	r3, [r3, #20]
 8000986:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800098a:	60fb      	str	r3, [r7, #12]
 800098c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800098e:	230c      	movs	r3, #12
 8000990:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000992:	2302      	movs	r3, #2
 8000994:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000996:	2300      	movs	r3, #0
 8000998:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800099a:	2300      	movs	r3, #0
 800099c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800099e:	2307      	movs	r3, #7
 80009a0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009a2:	f107 0314 	add.w	r3, r7, #20
 80009a6:	4619      	mov	r1, r3
 80009a8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80009ac:	f000 f9a2 	bl	8000cf4 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80009b0:	bf00      	nop
 80009b2:	3728      	adds	r7, #40	; 0x28
 80009b4:	46bd      	mov	sp, r7
 80009b6:	bd80      	pop	{r7, pc}
 80009b8:	40004400 	.word	0x40004400
 80009bc:	40021000 	.word	0x40021000

080009c0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80009c0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80009f8 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 80009c4:	f7ff ff78 	bl	80008b8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80009c8:	480c      	ldr	r0, [pc, #48]	; (80009fc <LoopForever+0x6>)
  ldr r1, =_edata
 80009ca:	490d      	ldr	r1, [pc, #52]	; (8000a00 <LoopForever+0xa>)
  ldr r2, =_sidata
 80009cc:	4a0d      	ldr	r2, [pc, #52]	; (8000a04 <LoopForever+0xe>)
  movs r3, #0
 80009ce:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80009d0:	e002      	b.n	80009d8 <LoopCopyDataInit>

080009d2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80009d2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80009d4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80009d6:	3304      	adds	r3, #4

080009d8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80009d8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80009da:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80009dc:	d3f9      	bcc.n	80009d2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80009de:	4a0a      	ldr	r2, [pc, #40]	; (8000a08 <LoopForever+0x12>)
  ldr r4, =_ebss
 80009e0:	4c0a      	ldr	r4, [pc, #40]	; (8000a0c <LoopForever+0x16>)
  movs r3, #0
 80009e2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80009e4:	e001      	b.n	80009ea <LoopFillZerobss>

080009e6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80009e6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80009e8:	3204      	adds	r2, #4

080009ea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80009ea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80009ec:	d3fb      	bcc.n	80009e6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80009ee:	f006 fe55 	bl	800769c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80009f2:	f7ff fcef 	bl	80003d4 <main>

080009f6 <LoopForever>:

LoopForever:
    b LoopForever
 80009f6:	e7fe      	b.n	80009f6 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80009f8:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 80009fc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a00:	20000088 	.word	0x20000088
  ldr r2, =_sidata
 8000a04:	0800830c 	.word	0x0800830c
  ldr r2, =_sbss
 8000a08:	20000088 	.word	0x20000088
  ldr r4, =_ebss
 8000a0c:	200002e8 	.word	0x200002e8

08000a10 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000a10:	e7fe      	b.n	8000a10 <ADC1_2_IRQHandler>
	...

08000a14 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a14:	b580      	push	{r7, lr}
 8000a16:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a18:	4b08      	ldr	r3, [pc, #32]	; (8000a3c <HAL_Init+0x28>)
 8000a1a:	681b      	ldr	r3, [r3, #0]
 8000a1c:	4a07      	ldr	r2, [pc, #28]	; (8000a3c <HAL_Init+0x28>)
 8000a1e:	f043 0310 	orr.w	r3, r3, #16
 8000a22:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a24:	2003      	movs	r0, #3
 8000a26:	f000 f931 	bl	8000c8c <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000a2a:	2000      	movs	r0, #0
 8000a2c:	f000 f808 	bl	8000a40 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000a30:	f7ff febe 	bl	80007b0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000a34:	2300      	movs	r3, #0
}
 8000a36:	4618      	mov	r0, r3
 8000a38:	bd80      	pop	{r7, pc}
 8000a3a:	bf00      	nop
 8000a3c:	40022000 	.word	0x40022000

08000a40 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a40:	b580      	push	{r7, lr}
 8000a42:	b082      	sub	sp, #8
 8000a44:	af00      	add	r7, sp, #0
 8000a46:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000a48:	4b12      	ldr	r3, [pc, #72]	; (8000a94 <HAL_InitTick+0x54>)
 8000a4a:	681a      	ldr	r2, [r3, #0]
 8000a4c:	4b12      	ldr	r3, [pc, #72]	; (8000a98 <HAL_InitTick+0x58>)
 8000a4e:	781b      	ldrb	r3, [r3, #0]
 8000a50:	4619      	mov	r1, r3
 8000a52:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a56:	fbb3 f3f1 	udiv	r3, r3, r1
 8000a5a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a5e:	4618      	mov	r0, r3
 8000a60:	f000 f93b 	bl	8000cda <HAL_SYSTICK_Config>
 8000a64:	4603      	mov	r3, r0
 8000a66:	2b00      	cmp	r3, #0
 8000a68:	d001      	beq.n	8000a6e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000a6a:	2301      	movs	r3, #1
 8000a6c:	e00e      	b.n	8000a8c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a6e:	687b      	ldr	r3, [r7, #4]
 8000a70:	2b0f      	cmp	r3, #15
 8000a72:	d80a      	bhi.n	8000a8a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a74:	2200      	movs	r2, #0
 8000a76:	6879      	ldr	r1, [r7, #4]
 8000a78:	f04f 30ff 	mov.w	r0, #4294967295
 8000a7c:	f000 f911 	bl	8000ca2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000a80:	4a06      	ldr	r2, [pc, #24]	; (8000a9c <HAL_InitTick+0x5c>)
 8000a82:	687b      	ldr	r3, [r7, #4]
 8000a84:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8000a86:	2300      	movs	r3, #0
 8000a88:	e000      	b.n	8000a8c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000a8a:	2301      	movs	r3, #1
}
 8000a8c:	4618      	mov	r0, r3
 8000a8e:	3708      	adds	r7, #8
 8000a90:	46bd      	mov	sp, r7
 8000a92:	bd80      	pop	{r7, pc}
 8000a94:	20000000 	.word	0x20000000
 8000a98:	20000008 	.word	0x20000008
 8000a9c:	20000004 	.word	0x20000004

08000aa0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000aa0:	b480      	push	{r7}
 8000aa2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000aa4:	4b06      	ldr	r3, [pc, #24]	; (8000ac0 <HAL_IncTick+0x20>)
 8000aa6:	781b      	ldrb	r3, [r3, #0]
 8000aa8:	461a      	mov	r2, r3
 8000aaa:	4b06      	ldr	r3, [pc, #24]	; (8000ac4 <HAL_IncTick+0x24>)
 8000aac:	681b      	ldr	r3, [r3, #0]
 8000aae:	4413      	add	r3, r2
 8000ab0:	4a04      	ldr	r2, [pc, #16]	; (8000ac4 <HAL_IncTick+0x24>)
 8000ab2:	6013      	str	r3, [r2, #0]
}
 8000ab4:	bf00      	nop
 8000ab6:	46bd      	mov	sp, r7
 8000ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000abc:	4770      	bx	lr
 8000abe:	bf00      	nop
 8000ac0:	20000008 	.word	0x20000008
 8000ac4:	20000294 	.word	0x20000294

08000ac8 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ac8:	b480      	push	{r7}
 8000aca:	af00      	add	r7, sp, #0
  return uwTick;  
 8000acc:	4b03      	ldr	r3, [pc, #12]	; (8000adc <HAL_GetTick+0x14>)
 8000ace:	681b      	ldr	r3, [r3, #0]
}
 8000ad0:	4618      	mov	r0, r3
 8000ad2:	46bd      	mov	sp, r7
 8000ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad8:	4770      	bx	lr
 8000ada:	bf00      	nop
 8000adc:	20000294 	.word	0x20000294

08000ae0 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	b084      	sub	sp, #16
 8000ae4:	af00      	add	r7, sp, #0
 8000ae6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000ae8:	f7ff ffee 	bl	8000ac8 <HAL_GetTick>
 8000aec:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000af2:	68fb      	ldr	r3, [r7, #12]
 8000af4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000af8:	d005      	beq.n	8000b06 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000afa:	4b0a      	ldr	r3, [pc, #40]	; (8000b24 <HAL_Delay+0x44>)
 8000afc:	781b      	ldrb	r3, [r3, #0]
 8000afe:	461a      	mov	r2, r3
 8000b00:	68fb      	ldr	r3, [r7, #12]
 8000b02:	4413      	add	r3, r2
 8000b04:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000b06:	bf00      	nop
 8000b08:	f7ff ffde 	bl	8000ac8 <HAL_GetTick>
 8000b0c:	4602      	mov	r2, r0
 8000b0e:	68bb      	ldr	r3, [r7, #8]
 8000b10:	1ad3      	subs	r3, r2, r3
 8000b12:	68fa      	ldr	r2, [r7, #12]
 8000b14:	429a      	cmp	r2, r3
 8000b16:	d8f7      	bhi.n	8000b08 <HAL_Delay+0x28>
  {
  }
}
 8000b18:	bf00      	nop
 8000b1a:	bf00      	nop
 8000b1c:	3710      	adds	r7, #16
 8000b1e:	46bd      	mov	sp, r7
 8000b20:	bd80      	pop	{r7, pc}
 8000b22:	bf00      	nop
 8000b24:	20000008 	.word	0x20000008

08000b28 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b28:	b480      	push	{r7}
 8000b2a:	b085      	sub	sp, #20
 8000b2c:	af00      	add	r7, sp, #0
 8000b2e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	f003 0307 	and.w	r3, r3, #7
 8000b36:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b38:	4b0c      	ldr	r3, [pc, #48]	; (8000b6c <__NVIC_SetPriorityGrouping+0x44>)
 8000b3a:	68db      	ldr	r3, [r3, #12]
 8000b3c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b3e:	68ba      	ldr	r2, [r7, #8]
 8000b40:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000b44:	4013      	ands	r3, r2
 8000b46:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000b48:	68fb      	ldr	r3, [r7, #12]
 8000b4a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b4c:	68bb      	ldr	r3, [r7, #8]
 8000b4e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000b50:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000b54:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b58:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b5a:	4a04      	ldr	r2, [pc, #16]	; (8000b6c <__NVIC_SetPriorityGrouping+0x44>)
 8000b5c:	68bb      	ldr	r3, [r7, #8]
 8000b5e:	60d3      	str	r3, [r2, #12]
}
 8000b60:	bf00      	nop
 8000b62:	3714      	adds	r7, #20
 8000b64:	46bd      	mov	sp, r7
 8000b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b6a:	4770      	bx	lr
 8000b6c:	e000ed00 	.word	0xe000ed00

08000b70 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000b70:	b480      	push	{r7}
 8000b72:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b74:	4b04      	ldr	r3, [pc, #16]	; (8000b88 <__NVIC_GetPriorityGrouping+0x18>)
 8000b76:	68db      	ldr	r3, [r3, #12]
 8000b78:	0a1b      	lsrs	r3, r3, #8
 8000b7a:	f003 0307 	and.w	r3, r3, #7
}
 8000b7e:	4618      	mov	r0, r3
 8000b80:	46bd      	mov	sp, r7
 8000b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b86:	4770      	bx	lr
 8000b88:	e000ed00 	.word	0xe000ed00

08000b8c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b8c:	b480      	push	{r7}
 8000b8e:	b083      	sub	sp, #12
 8000b90:	af00      	add	r7, sp, #0
 8000b92:	4603      	mov	r3, r0
 8000b94:	6039      	str	r1, [r7, #0]
 8000b96:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b98:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b9c:	2b00      	cmp	r3, #0
 8000b9e:	db0a      	blt.n	8000bb6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ba0:	683b      	ldr	r3, [r7, #0]
 8000ba2:	b2da      	uxtb	r2, r3
 8000ba4:	490c      	ldr	r1, [pc, #48]	; (8000bd8 <__NVIC_SetPriority+0x4c>)
 8000ba6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000baa:	0112      	lsls	r2, r2, #4
 8000bac:	b2d2      	uxtb	r2, r2
 8000bae:	440b      	add	r3, r1
 8000bb0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000bb4:	e00a      	b.n	8000bcc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bb6:	683b      	ldr	r3, [r7, #0]
 8000bb8:	b2da      	uxtb	r2, r3
 8000bba:	4908      	ldr	r1, [pc, #32]	; (8000bdc <__NVIC_SetPriority+0x50>)
 8000bbc:	79fb      	ldrb	r3, [r7, #7]
 8000bbe:	f003 030f 	and.w	r3, r3, #15
 8000bc2:	3b04      	subs	r3, #4
 8000bc4:	0112      	lsls	r2, r2, #4
 8000bc6:	b2d2      	uxtb	r2, r2
 8000bc8:	440b      	add	r3, r1
 8000bca:	761a      	strb	r2, [r3, #24]
}
 8000bcc:	bf00      	nop
 8000bce:	370c      	adds	r7, #12
 8000bd0:	46bd      	mov	sp, r7
 8000bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd6:	4770      	bx	lr
 8000bd8:	e000e100 	.word	0xe000e100
 8000bdc:	e000ed00 	.word	0xe000ed00

08000be0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000be0:	b480      	push	{r7}
 8000be2:	b089      	sub	sp, #36	; 0x24
 8000be4:	af00      	add	r7, sp, #0
 8000be6:	60f8      	str	r0, [r7, #12]
 8000be8:	60b9      	str	r1, [r7, #8]
 8000bea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000bec:	68fb      	ldr	r3, [r7, #12]
 8000bee:	f003 0307 	and.w	r3, r3, #7
 8000bf2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000bf4:	69fb      	ldr	r3, [r7, #28]
 8000bf6:	f1c3 0307 	rsb	r3, r3, #7
 8000bfa:	2b04      	cmp	r3, #4
 8000bfc:	bf28      	it	cs
 8000bfe:	2304      	movcs	r3, #4
 8000c00:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c02:	69fb      	ldr	r3, [r7, #28]
 8000c04:	3304      	adds	r3, #4
 8000c06:	2b06      	cmp	r3, #6
 8000c08:	d902      	bls.n	8000c10 <NVIC_EncodePriority+0x30>
 8000c0a:	69fb      	ldr	r3, [r7, #28]
 8000c0c:	3b03      	subs	r3, #3
 8000c0e:	e000      	b.n	8000c12 <NVIC_EncodePriority+0x32>
 8000c10:	2300      	movs	r3, #0
 8000c12:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c14:	f04f 32ff 	mov.w	r2, #4294967295
 8000c18:	69bb      	ldr	r3, [r7, #24]
 8000c1a:	fa02 f303 	lsl.w	r3, r2, r3
 8000c1e:	43da      	mvns	r2, r3
 8000c20:	68bb      	ldr	r3, [r7, #8]
 8000c22:	401a      	ands	r2, r3
 8000c24:	697b      	ldr	r3, [r7, #20]
 8000c26:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c28:	f04f 31ff 	mov.w	r1, #4294967295
 8000c2c:	697b      	ldr	r3, [r7, #20]
 8000c2e:	fa01 f303 	lsl.w	r3, r1, r3
 8000c32:	43d9      	mvns	r1, r3
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c38:	4313      	orrs	r3, r2
         );
}
 8000c3a:	4618      	mov	r0, r3
 8000c3c:	3724      	adds	r7, #36	; 0x24
 8000c3e:	46bd      	mov	sp, r7
 8000c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c44:	4770      	bx	lr
	...

08000c48 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	b082      	sub	sp, #8
 8000c4c:	af00      	add	r7, sp, #0
 8000c4e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	3b01      	subs	r3, #1
 8000c54:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000c58:	d301      	bcc.n	8000c5e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000c5a:	2301      	movs	r3, #1
 8000c5c:	e00f      	b.n	8000c7e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c5e:	4a0a      	ldr	r2, [pc, #40]	; (8000c88 <SysTick_Config+0x40>)
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	3b01      	subs	r3, #1
 8000c64:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000c66:	210f      	movs	r1, #15
 8000c68:	f04f 30ff 	mov.w	r0, #4294967295
 8000c6c:	f7ff ff8e 	bl	8000b8c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c70:	4b05      	ldr	r3, [pc, #20]	; (8000c88 <SysTick_Config+0x40>)
 8000c72:	2200      	movs	r2, #0
 8000c74:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c76:	4b04      	ldr	r3, [pc, #16]	; (8000c88 <SysTick_Config+0x40>)
 8000c78:	2207      	movs	r2, #7
 8000c7a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000c7c:	2300      	movs	r3, #0
}
 8000c7e:	4618      	mov	r0, r3
 8000c80:	3708      	adds	r7, #8
 8000c82:	46bd      	mov	sp, r7
 8000c84:	bd80      	pop	{r7, pc}
 8000c86:	bf00      	nop
 8000c88:	e000e010 	.word	0xe000e010

08000c8c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	b082      	sub	sp, #8
 8000c90:	af00      	add	r7, sp, #0
 8000c92:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000c94:	6878      	ldr	r0, [r7, #4]
 8000c96:	f7ff ff47 	bl	8000b28 <__NVIC_SetPriorityGrouping>
}
 8000c9a:	bf00      	nop
 8000c9c:	3708      	adds	r7, #8
 8000c9e:	46bd      	mov	sp, r7
 8000ca0:	bd80      	pop	{r7, pc}

08000ca2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ca2:	b580      	push	{r7, lr}
 8000ca4:	b086      	sub	sp, #24
 8000ca6:	af00      	add	r7, sp, #0
 8000ca8:	4603      	mov	r3, r0
 8000caa:	60b9      	str	r1, [r7, #8]
 8000cac:	607a      	str	r2, [r7, #4]
 8000cae:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000cb0:	2300      	movs	r3, #0
 8000cb2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000cb4:	f7ff ff5c 	bl	8000b70 <__NVIC_GetPriorityGrouping>
 8000cb8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000cba:	687a      	ldr	r2, [r7, #4]
 8000cbc:	68b9      	ldr	r1, [r7, #8]
 8000cbe:	6978      	ldr	r0, [r7, #20]
 8000cc0:	f7ff ff8e 	bl	8000be0 <NVIC_EncodePriority>
 8000cc4:	4602      	mov	r2, r0
 8000cc6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000cca:	4611      	mov	r1, r2
 8000ccc:	4618      	mov	r0, r3
 8000cce:	f7ff ff5d 	bl	8000b8c <__NVIC_SetPriority>
}
 8000cd2:	bf00      	nop
 8000cd4:	3718      	adds	r7, #24
 8000cd6:	46bd      	mov	sp, r7
 8000cd8:	bd80      	pop	{r7, pc}

08000cda <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000cda:	b580      	push	{r7, lr}
 8000cdc:	b082      	sub	sp, #8
 8000cde:	af00      	add	r7, sp, #0
 8000ce0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000ce2:	6878      	ldr	r0, [r7, #4]
 8000ce4:	f7ff ffb0 	bl	8000c48 <SysTick_Config>
 8000ce8:	4603      	mov	r3, r0
}
 8000cea:	4618      	mov	r0, r3
 8000cec:	3708      	adds	r7, #8
 8000cee:	46bd      	mov	sp, r7
 8000cf0:	bd80      	pop	{r7, pc}
	...

08000cf4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000cf4:	b480      	push	{r7}
 8000cf6:	b087      	sub	sp, #28
 8000cf8:	af00      	add	r7, sp, #0
 8000cfa:	6078      	str	r0, [r7, #4]
 8000cfc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000cfe:	2300      	movs	r3, #0
 8000d00:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000d02:	e160      	b.n	8000fc6 <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000d04:	683b      	ldr	r3, [r7, #0]
 8000d06:	681a      	ldr	r2, [r3, #0]
 8000d08:	2101      	movs	r1, #1
 8000d0a:	697b      	ldr	r3, [r7, #20]
 8000d0c:	fa01 f303 	lsl.w	r3, r1, r3
 8000d10:	4013      	ands	r3, r2
 8000d12:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000d14:	68fb      	ldr	r3, [r7, #12]
 8000d16:	2b00      	cmp	r3, #0
 8000d18:	f000 8152 	beq.w	8000fc0 <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000d1c:	683b      	ldr	r3, [r7, #0]
 8000d1e:	685b      	ldr	r3, [r3, #4]
 8000d20:	f003 0303 	and.w	r3, r3, #3
 8000d24:	2b01      	cmp	r3, #1
 8000d26:	d005      	beq.n	8000d34 <HAL_GPIO_Init+0x40>
 8000d28:	683b      	ldr	r3, [r7, #0]
 8000d2a:	685b      	ldr	r3, [r3, #4]
 8000d2c:	f003 0303 	and.w	r3, r3, #3
 8000d30:	2b02      	cmp	r3, #2
 8000d32:	d130      	bne.n	8000d96 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	689b      	ldr	r3, [r3, #8]
 8000d38:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000d3a:	697b      	ldr	r3, [r7, #20]
 8000d3c:	005b      	lsls	r3, r3, #1
 8000d3e:	2203      	movs	r2, #3
 8000d40:	fa02 f303 	lsl.w	r3, r2, r3
 8000d44:	43db      	mvns	r3, r3
 8000d46:	693a      	ldr	r2, [r7, #16]
 8000d48:	4013      	ands	r3, r2
 8000d4a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000d4c:	683b      	ldr	r3, [r7, #0]
 8000d4e:	68da      	ldr	r2, [r3, #12]
 8000d50:	697b      	ldr	r3, [r7, #20]
 8000d52:	005b      	lsls	r3, r3, #1
 8000d54:	fa02 f303 	lsl.w	r3, r2, r3
 8000d58:	693a      	ldr	r2, [r7, #16]
 8000d5a:	4313      	orrs	r3, r2
 8000d5c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	693a      	ldr	r2, [r7, #16]
 8000d62:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	685b      	ldr	r3, [r3, #4]
 8000d68:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000d6a:	2201      	movs	r2, #1
 8000d6c:	697b      	ldr	r3, [r7, #20]
 8000d6e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d72:	43db      	mvns	r3, r3
 8000d74:	693a      	ldr	r2, [r7, #16]
 8000d76:	4013      	ands	r3, r2
 8000d78:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000d7a:	683b      	ldr	r3, [r7, #0]
 8000d7c:	685b      	ldr	r3, [r3, #4]
 8000d7e:	091b      	lsrs	r3, r3, #4
 8000d80:	f003 0201 	and.w	r2, r3, #1
 8000d84:	697b      	ldr	r3, [r7, #20]
 8000d86:	fa02 f303 	lsl.w	r3, r2, r3
 8000d8a:	693a      	ldr	r2, [r7, #16]
 8000d8c:	4313      	orrs	r3, r2
 8000d8e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	693a      	ldr	r2, [r7, #16]
 8000d94:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000d96:	683b      	ldr	r3, [r7, #0]
 8000d98:	685b      	ldr	r3, [r3, #4]
 8000d9a:	f003 0303 	and.w	r3, r3, #3
 8000d9e:	2b03      	cmp	r3, #3
 8000da0:	d017      	beq.n	8000dd2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	68db      	ldr	r3, [r3, #12]
 8000da6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000da8:	697b      	ldr	r3, [r7, #20]
 8000daa:	005b      	lsls	r3, r3, #1
 8000dac:	2203      	movs	r2, #3
 8000dae:	fa02 f303 	lsl.w	r3, r2, r3
 8000db2:	43db      	mvns	r3, r3
 8000db4:	693a      	ldr	r2, [r7, #16]
 8000db6:	4013      	ands	r3, r2
 8000db8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000dba:	683b      	ldr	r3, [r7, #0]
 8000dbc:	689a      	ldr	r2, [r3, #8]
 8000dbe:	697b      	ldr	r3, [r7, #20]
 8000dc0:	005b      	lsls	r3, r3, #1
 8000dc2:	fa02 f303 	lsl.w	r3, r2, r3
 8000dc6:	693a      	ldr	r2, [r7, #16]
 8000dc8:	4313      	orrs	r3, r2
 8000dca:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	693a      	ldr	r2, [r7, #16]
 8000dd0:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000dd2:	683b      	ldr	r3, [r7, #0]
 8000dd4:	685b      	ldr	r3, [r3, #4]
 8000dd6:	f003 0303 	and.w	r3, r3, #3
 8000dda:	2b02      	cmp	r3, #2
 8000ddc:	d123      	bne.n	8000e26 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000dde:	697b      	ldr	r3, [r7, #20]
 8000de0:	08da      	lsrs	r2, r3, #3
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	3208      	adds	r2, #8
 8000de6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000dea:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000dec:	697b      	ldr	r3, [r7, #20]
 8000dee:	f003 0307 	and.w	r3, r3, #7
 8000df2:	009b      	lsls	r3, r3, #2
 8000df4:	220f      	movs	r2, #15
 8000df6:	fa02 f303 	lsl.w	r3, r2, r3
 8000dfa:	43db      	mvns	r3, r3
 8000dfc:	693a      	ldr	r2, [r7, #16]
 8000dfe:	4013      	ands	r3, r2
 8000e00:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000e02:	683b      	ldr	r3, [r7, #0]
 8000e04:	691a      	ldr	r2, [r3, #16]
 8000e06:	697b      	ldr	r3, [r7, #20]
 8000e08:	f003 0307 	and.w	r3, r3, #7
 8000e0c:	009b      	lsls	r3, r3, #2
 8000e0e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e12:	693a      	ldr	r2, [r7, #16]
 8000e14:	4313      	orrs	r3, r2
 8000e16:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000e18:	697b      	ldr	r3, [r7, #20]
 8000e1a:	08da      	lsrs	r2, r3, #3
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	3208      	adds	r2, #8
 8000e20:	6939      	ldr	r1, [r7, #16]
 8000e22:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	681b      	ldr	r3, [r3, #0]
 8000e2a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000e2c:	697b      	ldr	r3, [r7, #20]
 8000e2e:	005b      	lsls	r3, r3, #1
 8000e30:	2203      	movs	r2, #3
 8000e32:	fa02 f303 	lsl.w	r3, r2, r3
 8000e36:	43db      	mvns	r3, r3
 8000e38:	693a      	ldr	r2, [r7, #16]
 8000e3a:	4013      	ands	r3, r2
 8000e3c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000e3e:	683b      	ldr	r3, [r7, #0]
 8000e40:	685b      	ldr	r3, [r3, #4]
 8000e42:	f003 0203 	and.w	r2, r3, #3
 8000e46:	697b      	ldr	r3, [r7, #20]
 8000e48:	005b      	lsls	r3, r3, #1
 8000e4a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e4e:	693a      	ldr	r2, [r7, #16]
 8000e50:	4313      	orrs	r3, r2
 8000e52:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	693a      	ldr	r2, [r7, #16]
 8000e58:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000e5a:	683b      	ldr	r3, [r7, #0]
 8000e5c:	685b      	ldr	r3, [r3, #4]
 8000e5e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	f000 80ac 	beq.w	8000fc0 <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e68:	4b5e      	ldr	r3, [pc, #376]	; (8000fe4 <HAL_GPIO_Init+0x2f0>)
 8000e6a:	699b      	ldr	r3, [r3, #24]
 8000e6c:	4a5d      	ldr	r2, [pc, #372]	; (8000fe4 <HAL_GPIO_Init+0x2f0>)
 8000e6e:	f043 0301 	orr.w	r3, r3, #1
 8000e72:	6193      	str	r3, [r2, #24]
 8000e74:	4b5b      	ldr	r3, [pc, #364]	; (8000fe4 <HAL_GPIO_Init+0x2f0>)
 8000e76:	699b      	ldr	r3, [r3, #24]
 8000e78:	f003 0301 	and.w	r3, r3, #1
 8000e7c:	60bb      	str	r3, [r7, #8]
 8000e7e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000e80:	4a59      	ldr	r2, [pc, #356]	; (8000fe8 <HAL_GPIO_Init+0x2f4>)
 8000e82:	697b      	ldr	r3, [r7, #20]
 8000e84:	089b      	lsrs	r3, r3, #2
 8000e86:	3302      	adds	r3, #2
 8000e88:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e8c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000e8e:	697b      	ldr	r3, [r7, #20]
 8000e90:	f003 0303 	and.w	r3, r3, #3
 8000e94:	009b      	lsls	r3, r3, #2
 8000e96:	220f      	movs	r2, #15
 8000e98:	fa02 f303 	lsl.w	r3, r2, r3
 8000e9c:	43db      	mvns	r3, r3
 8000e9e:	693a      	ldr	r2, [r7, #16]
 8000ea0:	4013      	ands	r3, r2
 8000ea2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000eaa:	d025      	beq.n	8000ef8 <HAL_GPIO_Init+0x204>
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	4a4f      	ldr	r2, [pc, #316]	; (8000fec <HAL_GPIO_Init+0x2f8>)
 8000eb0:	4293      	cmp	r3, r2
 8000eb2:	d01f      	beq.n	8000ef4 <HAL_GPIO_Init+0x200>
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	4a4e      	ldr	r2, [pc, #312]	; (8000ff0 <HAL_GPIO_Init+0x2fc>)
 8000eb8:	4293      	cmp	r3, r2
 8000eba:	d019      	beq.n	8000ef0 <HAL_GPIO_Init+0x1fc>
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	4a4d      	ldr	r2, [pc, #308]	; (8000ff4 <HAL_GPIO_Init+0x300>)
 8000ec0:	4293      	cmp	r3, r2
 8000ec2:	d013      	beq.n	8000eec <HAL_GPIO_Init+0x1f8>
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	4a4c      	ldr	r2, [pc, #304]	; (8000ff8 <HAL_GPIO_Init+0x304>)
 8000ec8:	4293      	cmp	r3, r2
 8000eca:	d00d      	beq.n	8000ee8 <HAL_GPIO_Init+0x1f4>
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	4a4b      	ldr	r2, [pc, #300]	; (8000ffc <HAL_GPIO_Init+0x308>)
 8000ed0:	4293      	cmp	r3, r2
 8000ed2:	d007      	beq.n	8000ee4 <HAL_GPIO_Init+0x1f0>
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	4a4a      	ldr	r2, [pc, #296]	; (8001000 <HAL_GPIO_Init+0x30c>)
 8000ed8:	4293      	cmp	r3, r2
 8000eda:	d101      	bne.n	8000ee0 <HAL_GPIO_Init+0x1ec>
 8000edc:	2306      	movs	r3, #6
 8000ede:	e00c      	b.n	8000efa <HAL_GPIO_Init+0x206>
 8000ee0:	2307      	movs	r3, #7
 8000ee2:	e00a      	b.n	8000efa <HAL_GPIO_Init+0x206>
 8000ee4:	2305      	movs	r3, #5
 8000ee6:	e008      	b.n	8000efa <HAL_GPIO_Init+0x206>
 8000ee8:	2304      	movs	r3, #4
 8000eea:	e006      	b.n	8000efa <HAL_GPIO_Init+0x206>
 8000eec:	2303      	movs	r3, #3
 8000eee:	e004      	b.n	8000efa <HAL_GPIO_Init+0x206>
 8000ef0:	2302      	movs	r3, #2
 8000ef2:	e002      	b.n	8000efa <HAL_GPIO_Init+0x206>
 8000ef4:	2301      	movs	r3, #1
 8000ef6:	e000      	b.n	8000efa <HAL_GPIO_Init+0x206>
 8000ef8:	2300      	movs	r3, #0
 8000efa:	697a      	ldr	r2, [r7, #20]
 8000efc:	f002 0203 	and.w	r2, r2, #3
 8000f00:	0092      	lsls	r2, r2, #2
 8000f02:	4093      	lsls	r3, r2
 8000f04:	693a      	ldr	r2, [r7, #16]
 8000f06:	4313      	orrs	r3, r2
 8000f08:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000f0a:	4937      	ldr	r1, [pc, #220]	; (8000fe8 <HAL_GPIO_Init+0x2f4>)
 8000f0c:	697b      	ldr	r3, [r7, #20]
 8000f0e:	089b      	lsrs	r3, r3, #2
 8000f10:	3302      	adds	r3, #2
 8000f12:	693a      	ldr	r2, [r7, #16]
 8000f14:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000f18:	4b3a      	ldr	r3, [pc, #232]	; (8001004 <HAL_GPIO_Init+0x310>)
 8000f1a:	689b      	ldr	r3, [r3, #8]
 8000f1c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f1e:	68fb      	ldr	r3, [r7, #12]
 8000f20:	43db      	mvns	r3, r3
 8000f22:	693a      	ldr	r2, [r7, #16]
 8000f24:	4013      	ands	r3, r2
 8000f26:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000f28:	683b      	ldr	r3, [r7, #0]
 8000f2a:	685b      	ldr	r3, [r3, #4]
 8000f2c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000f30:	2b00      	cmp	r3, #0
 8000f32:	d003      	beq.n	8000f3c <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 8000f34:	693a      	ldr	r2, [r7, #16]
 8000f36:	68fb      	ldr	r3, [r7, #12]
 8000f38:	4313      	orrs	r3, r2
 8000f3a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000f3c:	4a31      	ldr	r2, [pc, #196]	; (8001004 <HAL_GPIO_Init+0x310>)
 8000f3e:	693b      	ldr	r3, [r7, #16]
 8000f40:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000f42:	4b30      	ldr	r3, [pc, #192]	; (8001004 <HAL_GPIO_Init+0x310>)
 8000f44:	68db      	ldr	r3, [r3, #12]
 8000f46:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f48:	68fb      	ldr	r3, [r7, #12]
 8000f4a:	43db      	mvns	r3, r3
 8000f4c:	693a      	ldr	r2, [r7, #16]
 8000f4e:	4013      	ands	r3, r2
 8000f50:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000f52:	683b      	ldr	r3, [r7, #0]
 8000f54:	685b      	ldr	r3, [r3, #4]
 8000f56:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	d003      	beq.n	8000f66 <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 8000f5e:	693a      	ldr	r2, [r7, #16]
 8000f60:	68fb      	ldr	r3, [r7, #12]
 8000f62:	4313      	orrs	r3, r2
 8000f64:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000f66:	4a27      	ldr	r2, [pc, #156]	; (8001004 <HAL_GPIO_Init+0x310>)
 8000f68:	693b      	ldr	r3, [r7, #16]
 8000f6a:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000f6c:	4b25      	ldr	r3, [pc, #148]	; (8001004 <HAL_GPIO_Init+0x310>)
 8000f6e:	685b      	ldr	r3, [r3, #4]
 8000f70:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f72:	68fb      	ldr	r3, [r7, #12]
 8000f74:	43db      	mvns	r3, r3
 8000f76:	693a      	ldr	r2, [r7, #16]
 8000f78:	4013      	ands	r3, r2
 8000f7a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000f7c:	683b      	ldr	r3, [r7, #0]
 8000f7e:	685b      	ldr	r3, [r3, #4]
 8000f80:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	d003      	beq.n	8000f90 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8000f88:	693a      	ldr	r2, [r7, #16]
 8000f8a:	68fb      	ldr	r3, [r7, #12]
 8000f8c:	4313      	orrs	r3, r2
 8000f8e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000f90:	4a1c      	ldr	r2, [pc, #112]	; (8001004 <HAL_GPIO_Init+0x310>)
 8000f92:	693b      	ldr	r3, [r7, #16]
 8000f94:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000f96:	4b1b      	ldr	r3, [pc, #108]	; (8001004 <HAL_GPIO_Init+0x310>)
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f9c:	68fb      	ldr	r3, [r7, #12]
 8000f9e:	43db      	mvns	r3, r3
 8000fa0:	693a      	ldr	r2, [r7, #16]
 8000fa2:	4013      	ands	r3, r2
 8000fa4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000fa6:	683b      	ldr	r3, [r7, #0]
 8000fa8:	685b      	ldr	r3, [r3, #4]
 8000faa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d003      	beq.n	8000fba <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 8000fb2:	693a      	ldr	r2, [r7, #16]
 8000fb4:	68fb      	ldr	r3, [r7, #12]
 8000fb6:	4313      	orrs	r3, r2
 8000fb8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000fba:	4a12      	ldr	r2, [pc, #72]	; (8001004 <HAL_GPIO_Init+0x310>)
 8000fbc:	693b      	ldr	r3, [r7, #16]
 8000fbe:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8000fc0:	697b      	ldr	r3, [r7, #20]
 8000fc2:	3301      	adds	r3, #1
 8000fc4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000fc6:	683b      	ldr	r3, [r7, #0]
 8000fc8:	681a      	ldr	r2, [r3, #0]
 8000fca:	697b      	ldr	r3, [r7, #20]
 8000fcc:	fa22 f303 	lsr.w	r3, r2, r3
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	f47f ae97 	bne.w	8000d04 <HAL_GPIO_Init+0x10>
  }
}
 8000fd6:	bf00      	nop
 8000fd8:	bf00      	nop
 8000fda:	371c      	adds	r7, #28
 8000fdc:	46bd      	mov	sp, r7
 8000fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe2:	4770      	bx	lr
 8000fe4:	40021000 	.word	0x40021000
 8000fe8:	40010000 	.word	0x40010000
 8000fec:	48000400 	.word	0x48000400
 8000ff0:	48000800 	.word	0x48000800
 8000ff4:	48000c00 	.word	0x48000c00
 8000ff8:	48001000 	.word	0x48001000
 8000ffc:	48001400 	.word	0x48001400
 8001000:	48001800 	.word	0x48001800
 8001004:	40010400 	.word	0x40010400

08001008 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001008:	b480      	push	{r7}
 800100a:	b083      	sub	sp, #12
 800100c:	af00      	add	r7, sp, #0
 800100e:	6078      	str	r0, [r7, #4]
 8001010:	460b      	mov	r3, r1
 8001012:	807b      	strh	r3, [r7, #2]
 8001014:	4613      	mov	r3, r2
 8001016:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001018:	787b      	ldrb	r3, [r7, #1]
 800101a:	2b00      	cmp	r3, #0
 800101c:	d003      	beq.n	8001026 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800101e:	887a      	ldrh	r2, [r7, #2]
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001024:	e002      	b.n	800102c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001026:	887a      	ldrh	r2, [r7, #2]
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800102c:	bf00      	nop
 800102e:	370c      	adds	r7, #12
 8001030:	46bd      	mov	sp, r7
 8001032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001036:	4770      	bx	lr

08001038 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F3 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001038:	b480      	push	{r7}
 800103a:	b085      	sub	sp, #20
 800103c:	af00      	add	r7, sp, #0
 800103e:	6078      	str	r0, [r7, #4]
 8001040:	460b      	mov	r3, r1
 8001042:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	695b      	ldr	r3, [r3, #20]
 8001048:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800104a:	887a      	ldrh	r2, [r7, #2]
 800104c:	68fb      	ldr	r3, [r7, #12]
 800104e:	4013      	ands	r3, r2
 8001050:	041a      	lsls	r2, r3, #16
 8001052:	68fb      	ldr	r3, [r7, #12]
 8001054:	43d9      	mvns	r1, r3
 8001056:	887b      	ldrh	r3, [r7, #2]
 8001058:	400b      	ands	r3, r1
 800105a:	431a      	orrs	r2, r3
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	619a      	str	r2, [r3, #24]
}
 8001060:	bf00      	nop
 8001062:	3714      	adds	r7, #20
 8001064:	46bd      	mov	sp, r7
 8001066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800106a:	4770      	bx	lr

0800106c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800106c:	b580      	push	{r7, lr}
 800106e:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 8001072:	af00      	add	r7, sp, #0
 8001074:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001078:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800107c:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800107e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001082:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	2b00      	cmp	r3, #0
 800108a:	d102      	bne.n	8001092 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 800108c:	2301      	movs	r3, #1
 800108e:	f001 b83a 	b.w	8002106 <HAL_RCC_OscConfig+0x109a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001092:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001096:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	f003 0301 	and.w	r3, r3, #1
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	f000 816f 	beq.w	8001386 <HAL_RCC_OscConfig+0x31a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80010a8:	4bb5      	ldr	r3, [pc, #724]	; (8001380 <HAL_RCC_OscConfig+0x314>)
 80010aa:	685b      	ldr	r3, [r3, #4]
 80010ac:	f003 030c 	and.w	r3, r3, #12
 80010b0:	2b04      	cmp	r3, #4
 80010b2:	d00c      	beq.n	80010ce <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80010b4:	4bb2      	ldr	r3, [pc, #712]	; (8001380 <HAL_RCC_OscConfig+0x314>)
 80010b6:	685b      	ldr	r3, [r3, #4]
 80010b8:	f003 030c 	and.w	r3, r3, #12
 80010bc:	2b08      	cmp	r3, #8
 80010be:	d15c      	bne.n	800117a <HAL_RCC_OscConfig+0x10e>
 80010c0:	4baf      	ldr	r3, [pc, #700]	; (8001380 <HAL_RCC_OscConfig+0x314>)
 80010c2:	685b      	ldr	r3, [r3, #4]
 80010c4:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 80010c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80010cc:	d155      	bne.n	800117a <HAL_RCC_OscConfig+0x10e>
 80010ce:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80010d2:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80010d6:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80010da:	fa93 f3a3 	rbit	r3, r3
 80010de:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80010e2:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80010e6:	fab3 f383 	clz	r3, r3
 80010ea:	b2db      	uxtb	r3, r3
 80010ec:	095b      	lsrs	r3, r3, #5
 80010ee:	b2db      	uxtb	r3, r3
 80010f0:	f043 0301 	orr.w	r3, r3, #1
 80010f4:	b2db      	uxtb	r3, r3
 80010f6:	2b01      	cmp	r3, #1
 80010f8:	d102      	bne.n	8001100 <HAL_RCC_OscConfig+0x94>
 80010fa:	4ba1      	ldr	r3, [pc, #644]	; (8001380 <HAL_RCC_OscConfig+0x314>)
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	e015      	b.n	800112c <HAL_RCC_OscConfig+0xc0>
 8001100:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001104:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001108:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 800110c:	fa93 f3a3 	rbit	r3, r3
 8001110:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 8001114:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001118:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 800111c:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 8001120:	fa93 f3a3 	rbit	r3, r3
 8001124:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8001128:	4b95      	ldr	r3, [pc, #596]	; (8001380 <HAL_RCC_OscConfig+0x314>)
 800112a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800112c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001130:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 8001134:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 8001138:	fa92 f2a2 	rbit	r2, r2
 800113c:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
  return result;
 8001140:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8001144:	fab2 f282 	clz	r2, r2
 8001148:	b2d2      	uxtb	r2, r2
 800114a:	f042 0220 	orr.w	r2, r2, #32
 800114e:	b2d2      	uxtb	r2, r2
 8001150:	f002 021f 	and.w	r2, r2, #31
 8001154:	2101      	movs	r1, #1
 8001156:	fa01 f202 	lsl.w	r2, r1, r2
 800115a:	4013      	ands	r3, r2
 800115c:	2b00      	cmp	r3, #0
 800115e:	f000 8111 	beq.w	8001384 <HAL_RCC_OscConfig+0x318>
 8001162:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001166:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	685b      	ldr	r3, [r3, #4]
 800116e:	2b00      	cmp	r3, #0
 8001170:	f040 8108 	bne.w	8001384 <HAL_RCC_OscConfig+0x318>
      {
        return HAL_ERROR;
 8001174:	2301      	movs	r3, #1
 8001176:	f000 bfc6 	b.w	8002106 <HAL_RCC_OscConfig+0x109a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800117a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800117e:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	685b      	ldr	r3, [r3, #4]
 8001186:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800118a:	d106      	bne.n	800119a <HAL_RCC_OscConfig+0x12e>
 800118c:	4b7c      	ldr	r3, [pc, #496]	; (8001380 <HAL_RCC_OscConfig+0x314>)
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	4a7b      	ldr	r2, [pc, #492]	; (8001380 <HAL_RCC_OscConfig+0x314>)
 8001192:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001196:	6013      	str	r3, [r2, #0]
 8001198:	e036      	b.n	8001208 <HAL_RCC_OscConfig+0x19c>
 800119a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800119e:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	685b      	ldr	r3, [r3, #4]
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d10c      	bne.n	80011c4 <HAL_RCC_OscConfig+0x158>
 80011aa:	4b75      	ldr	r3, [pc, #468]	; (8001380 <HAL_RCC_OscConfig+0x314>)
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	4a74      	ldr	r2, [pc, #464]	; (8001380 <HAL_RCC_OscConfig+0x314>)
 80011b0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80011b4:	6013      	str	r3, [r2, #0]
 80011b6:	4b72      	ldr	r3, [pc, #456]	; (8001380 <HAL_RCC_OscConfig+0x314>)
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	4a71      	ldr	r2, [pc, #452]	; (8001380 <HAL_RCC_OscConfig+0x314>)
 80011bc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80011c0:	6013      	str	r3, [r2, #0]
 80011c2:	e021      	b.n	8001208 <HAL_RCC_OscConfig+0x19c>
 80011c4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80011c8:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	685b      	ldr	r3, [r3, #4]
 80011d0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80011d4:	d10c      	bne.n	80011f0 <HAL_RCC_OscConfig+0x184>
 80011d6:	4b6a      	ldr	r3, [pc, #424]	; (8001380 <HAL_RCC_OscConfig+0x314>)
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	4a69      	ldr	r2, [pc, #420]	; (8001380 <HAL_RCC_OscConfig+0x314>)
 80011dc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80011e0:	6013      	str	r3, [r2, #0]
 80011e2:	4b67      	ldr	r3, [pc, #412]	; (8001380 <HAL_RCC_OscConfig+0x314>)
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	4a66      	ldr	r2, [pc, #408]	; (8001380 <HAL_RCC_OscConfig+0x314>)
 80011e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80011ec:	6013      	str	r3, [r2, #0]
 80011ee:	e00b      	b.n	8001208 <HAL_RCC_OscConfig+0x19c>
 80011f0:	4b63      	ldr	r3, [pc, #396]	; (8001380 <HAL_RCC_OscConfig+0x314>)
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	4a62      	ldr	r2, [pc, #392]	; (8001380 <HAL_RCC_OscConfig+0x314>)
 80011f6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80011fa:	6013      	str	r3, [r2, #0]
 80011fc:	4b60      	ldr	r3, [pc, #384]	; (8001380 <HAL_RCC_OscConfig+0x314>)
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	4a5f      	ldr	r2, [pc, #380]	; (8001380 <HAL_RCC_OscConfig+0x314>)
 8001202:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001206:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001208:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800120c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	685b      	ldr	r3, [r3, #4]
 8001214:	2b00      	cmp	r3, #0
 8001216:	d059      	beq.n	80012cc <HAL_RCC_OscConfig+0x260>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001218:	f7ff fc56 	bl	8000ac8 <HAL_GetTick>
 800121c:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001220:	e00a      	b.n	8001238 <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001222:	f7ff fc51 	bl	8000ac8 <HAL_GetTick>
 8001226:	4602      	mov	r2, r0
 8001228:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800122c:	1ad3      	subs	r3, r2, r3
 800122e:	2b64      	cmp	r3, #100	; 0x64
 8001230:	d902      	bls.n	8001238 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8001232:	2303      	movs	r3, #3
 8001234:	f000 bf67 	b.w	8002106 <HAL_RCC_OscConfig+0x109a>
 8001238:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800123c:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001240:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 8001244:	fa93 f3a3 	rbit	r3, r3
 8001248:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
  return result;
 800124c:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001250:	fab3 f383 	clz	r3, r3
 8001254:	b2db      	uxtb	r3, r3
 8001256:	095b      	lsrs	r3, r3, #5
 8001258:	b2db      	uxtb	r3, r3
 800125a:	f043 0301 	orr.w	r3, r3, #1
 800125e:	b2db      	uxtb	r3, r3
 8001260:	2b01      	cmp	r3, #1
 8001262:	d102      	bne.n	800126a <HAL_RCC_OscConfig+0x1fe>
 8001264:	4b46      	ldr	r3, [pc, #280]	; (8001380 <HAL_RCC_OscConfig+0x314>)
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	e015      	b.n	8001296 <HAL_RCC_OscConfig+0x22a>
 800126a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800126e:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001272:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 8001276:	fa93 f3a3 	rbit	r3, r3
 800127a:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 800127e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001282:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8001286:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 800128a:	fa93 f3a3 	rbit	r3, r3
 800128e:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8001292:	4b3b      	ldr	r3, [pc, #236]	; (8001380 <HAL_RCC_OscConfig+0x314>)
 8001294:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001296:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800129a:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
 800129e:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 80012a2:	fa92 f2a2 	rbit	r2, r2
 80012a6:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
  return result;
 80012aa:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 80012ae:	fab2 f282 	clz	r2, r2
 80012b2:	b2d2      	uxtb	r2, r2
 80012b4:	f042 0220 	orr.w	r2, r2, #32
 80012b8:	b2d2      	uxtb	r2, r2
 80012ba:	f002 021f 	and.w	r2, r2, #31
 80012be:	2101      	movs	r1, #1
 80012c0:	fa01 f202 	lsl.w	r2, r1, r2
 80012c4:	4013      	ands	r3, r2
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d0ab      	beq.n	8001222 <HAL_RCC_OscConfig+0x1b6>
 80012ca:	e05c      	b.n	8001386 <HAL_RCC_OscConfig+0x31a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012cc:	f7ff fbfc 	bl	8000ac8 <HAL_GetTick>
 80012d0:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80012d4:	e00a      	b.n	80012ec <HAL_RCC_OscConfig+0x280>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80012d6:	f7ff fbf7 	bl	8000ac8 <HAL_GetTick>
 80012da:	4602      	mov	r2, r0
 80012dc:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80012e0:	1ad3      	subs	r3, r2, r3
 80012e2:	2b64      	cmp	r3, #100	; 0x64
 80012e4:	d902      	bls.n	80012ec <HAL_RCC_OscConfig+0x280>
          {
            return HAL_TIMEOUT;
 80012e6:	2303      	movs	r3, #3
 80012e8:	f000 bf0d 	b.w	8002106 <HAL_RCC_OscConfig+0x109a>
 80012ec:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80012f0:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012f4:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 80012f8:	fa93 f3a3 	rbit	r3, r3
 80012fc:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
  return result;
 8001300:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001304:	fab3 f383 	clz	r3, r3
 8001308:	b2db      	uxtb	r3, r3
 800130a:	095b      	lsrs	r3, r3, #5
 800130c:	b2db      	uxtb	r3, r3
 800130e:	f043 0301 	orr.w	r3, r3, #1
 8001312:	b2db      	uxtb	r3, r3
 8001314:	2b01      	cmp	r3, #1
 8001316:	d102      	bne.n	800131e <HAL_RCC_OscConfig+0x2b2>
 8001318:	4b19      	ldr	r3, [pc, #100]	; (8001380 <HAL_RCC_OscConfig+0x314>)
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	e015      	b.n	800134a <HAL_RCC_OscConfig+0x2de>
 800131e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001322:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001326:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 800132a:	fa93 f3a3 	rbit	r3, r3
 800132e:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 8001332:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001336:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 800133a:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 800133e:	fa93 f3a3 	rbit	r3, r3
 8001342:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8001346:	4b0e      	ldr	r3, [pc, #56]	; (8001380 <HAL_RCC_OscConfig+0x314>)
 8001348:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800134a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800134e:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 8001352:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 8001356:	fa92 f2a2 	rbit	r2, r2
 800135a:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
  return result;
 800135e:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8001362:	fab2 f282 	clz	r2, r2
 8001366:	b2d2      	uxtb	r2, r2
 8001368:	f042 0220 	orr.w	r2, r2, #32
 800136c:	b2d2      	uxtb	r2, r2
 800136e:	f002 021f 	and.w	r2, r2, #31
 8001372:	2101      	movs	r1, #1
 8001374:	fa01 f202 	lsl.w	r2, r1, r2
 8001378:	4013      	ands	r3, r2
 800137a:	2b00      	cmp	r3, #0
 800137c:	d1ab      	bne.n	80012d6 <HAL_RCC_OscConfig+0x26a>
 800137e:	e002      	b.n	8001386 <HAL_RCC_OscConfig+0x31a>
 8001380:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001384:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001386:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800138a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	f003 0302 	and.w	r3, r3, #2
 8001396:	2b00      	cmp	r3, #0
 8001398:	f000 817f 	beq.w	800169a <HAL_RCC_OscConfig+0x62e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800139c:	4ba7      	ldr	r3, [pc, #668]	; (800163c <HAL_RCC_OscConfig+0x5d0>)
 800139e:	685b      	ldr	r3, [r3, #4]
 80013a0:	f003 030c 	and.w	r3, r3, #12
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d00c      	beq.n	80013c2 <HAL_RCC_OscConfig+0x356>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80013a8:	4ba4      	ldr	r3, [pc, #656]	; (800163c <HAL_RCC_OscConfig+0x5d0>)
 80013aa:	685b      	ldr	r3, [r3, #4]
 80013ac:	f003 030c 	and.w	r3, r3, #12
 80013b0:	2b08      	cmp	r3, #8
 80013b2:	d173      	bne.n	800149c <HAL_RCC_OscConfig+0x430>
 80013b4:	4ba1      	ldr	r3, [pc, #644]	; (800163c <HAL_RCC_OscConfig+0x5d0>)
 80013b6:	685b      	ldr	r3, [r3, #4]
 80013b8:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 80013bc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80013c0:	d16c      	bne.n	800149c <HAL_RCC_OscConfig+0x430>
 80013c2:	2302      	movs	r3, #2
 80013c4:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80013c8:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 80013cc:	fa93 f3a3 	rbit	r3, r3
 80013d0:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
  return result;
 80013d4:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80013d8:	fab3 f383 	clz	r3, r3
 80013dc:	b2db      	uxtb	r3, r3
 80013de:	095b      	lsrs	r3, r3, #5
 80013e0:	b2db      	uxtb	r3, r3
 80013e2:	f043 0301 	orr.w	r3, r3, #1
 80013e6:	b2db      	uxtb	r3, r3
 80013e8:	2b01      	cmp	r3, #1
 80013ea:	d102      	bne.n	80013f2 <HAL_RCC_OscConfig+0x386>
 80013ec:	4b93      	ldr	r3, [pc, #588]	; (800163c <HAL_RCC_OscConfig+0x5d0>)
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	e013      	b.n	800141a <HAL_RCC_OscConfig+0x3ae>
 80013f2:	2302      	movs	r3, #2
 80013f4:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80013f8:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 80013fc:	fa93 f3a3 	rbit	r3, r3
 8001400:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 8001404:	2302      	movs	r3, #2
 8001406:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 800140a:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 800140e:	fa93 f3a3 	rbit	r3, r3
 8001412:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8001416:	4b89      	ldr	r3, [pc, #548]	; (800163c <HAL_RCC_OscConfig+0x5d0>)
 8001418:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800141a:	2202      	movs	r2, #2
 800141c:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 8001420:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 8001424:	fa92 f2a2 	rbit	r2, r2
 8001428:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
  return result;
 800142c:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8001430:	fab2 f282 	clz	r2, r2
 8001434:	b2d2      	uxtb	r2, r2
 8001436:	f042 0220 	orr.w	r2, r2, #32
 800143a:	b2d2      	uxtb	r2, r2
 800143c:	f002 021f 	and.w	r2, r2, #31
 8001440:	2101      	movs	r1, #1
 8001442:	fa01 f202 	lsl.w	r2, r1, r2
 8001446:	4013      	ands	r3, r2
 8001448:	2b00      	cmp	r3, #0
 800144a:	d00a      	beq.n	8001462 <HAL_RCC_OscConfig+0x3f6>
 800144c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001450:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	68db      	ldr	r3, [r3, #12]
 8001458:	2b01      	cmp	r3, #1
 800145a:	d002      	beq.n	8001462 <HAL_RCC_OscConfig+0x3f6>
      {
        return HAL_ERROR;
 800145c:	2301      	movs	r3, #1
 800145e:	f000 be52 	b.w	8002106 <HAL_RCC_OscConfig+0x109a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001462:	4b76      	ldr	r3, [pc, #472]	; (800163c <HAL_RCC_OscConfig+0x5d0>)
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800146a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800146e:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	691b      	ldr	r3, [r3, #16]
 8001476:	21f8      	movs	r1, #248	; 0xf8
 8001478:	f8c7 1174 	str.w	r1, [r7, #372]	; 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800147c:	f8d7 1174 	ldr.w	r1, [r7, #372]	; 0x174
 8001480:	fa91 f1a1 	rbit	r1, r1
 8001484:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
  return result;
 8001488:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 800148c:	fab1 f181 	clz	r1, r1
 8001490:	b2c9      	uxtb	r1, r1
 8001492:	408b      	lsls	r3, r1
 8001494:	4969      	ldr	r1, [pc, #420]	; (800163c <HAL_RCC_OscConfig+0x5d0>)
 8001496:	4313      	orrs	r3, r2
 8001498:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800149a:	e0fe      	b.n	800169a <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800149c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80014a0:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	68db      	ldr	r3, [r3, #12]
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	f000 8088 	beq.w	80015be <HAL_RCC_OscConfig+0x552>
 80014ae:	2301      	movs	r3, #1
 80014b0:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014b4:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 80014b8:	fa93 f3a3 	rbit	r3, r3
 80014bc:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  return result;
 80014c0:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80014c4:	fab3 f383 	clz	r3, r3
 80014c8:	b2db      	uxtb	r3, r3
 80014ca:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80014ce:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80014d2:	009b      	lsls	r3, r3, #2
 80014d4:	461a      	mov	r2, r3
 80014d6:	2301      	movs	r3, #1
 80014d8:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014da:	f7ff faf5 	bl	8000ac8 <HAL_GetTick>
 80014de:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80014e2:	e00a      	b.n	80014fa <HAL_RCC_OscConfig+0x48e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80014e4:	f7ff faf0 	bl	8000ac8 <HAL_GetTick>
 80014e8:	4602      	mov	r2, r0
 80014ea:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80014ee:	1ad3      	subs	r3, r2, r3
 80014f0:	2b02      	cmp	r3, #2
 80014f2:	d902      	bls.n	80014fa <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 80014f4:	2303      	movs	r3, #3
 80014f6:	f000 be06 	b.w	8002106 <HAL_RCC_OscConfig+0x109a>
 80014fa:	2302      	movs	r3, #2
 80014fc:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001500:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8001504:	fa93 f3a3 	rbit	r3, r3
 8001508:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
  return result;
 800150c:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001510:	fab3 f383 	clz	r3, r3
 8001514:	b2db      	uxtb	r3, r3
 8001516:	095b      	lsrs	r3, r3, #5
 8001518:	b2db      	uxtb	r3, r3
 800151a:	f043 0301 	orr.w	r3, r3, #1
 800151e:	b2db      	uxtb	r3, r3
 8001520:	2b01      	cmp	r3, #1
 8001522:	d102      	bne.n	800152a <HAL_RCC_OscConfig+0x4be>
 8001524:	4b45      	ldr	r3, [pc, #276]	; (800163c <HAL_RCC_OscConfig+0x5d0>)
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	e013      	b.n	8001552 <HAL_RCC_OscConfig+0x4e6>
 800152a:	2302      	movs	r3, #2
 800152c:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001530:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8001534:	fa93 f3a3 	rbit	r3, r3
 8001538:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 800153c:	2302      	movs	r3, #2
 800153e:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8001542:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8001546:	fa93 f3a3 	rbit	r3, r3
 800154a:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 800154e:	4b3b      	ldr	r3, [pc, #236]	; (800163c <HAL_RCC_OscConfig+0x5d0>)
 8001550:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001552:	2202      	movs	r2, #2
 8001554:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 8001558:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 800155c:	fa92 f2a2 	rbit	r2, r2
 8001560:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
  return result;
 8001564:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8001568:	fab2 f282 	clz	r2, r2
 800156c:	b2d2      	uxtb	r2, r2
 800156e:	f042 0220 	orr.w	r2, r2, #32
 8001572:	b2d2      	uxtb	r2, r2
 8001574:	f002 021f 	and.w	r2, r2, #31
 8001578:	2101      	movs	r1, #1
 800157a:	fa01 f202 	lsl.w	r2, r1, r2
 800157e:	4013      	ands	r3, r2
 8001580:	2b00      	cmp	r3, #0
 8001582:	d0af      	beq.n	80014e4 <HAL_RCC_OscConfig+0x478>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001584:	4b2d      	ldr	r3, [pc, #180]	; (800163c <HAL_RCC_OscConfig+0x5d0>)
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800158c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001590:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	691b      	ldr	r3, [r3, #16]
 8001598:	21f8      	movs	r1, #248	; 0xf8
 800159a:	f8c7 1144 	str.w	r1, [r7, #324]	; 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800159e:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 80015a2:	fa91 f1a1 	rbit	r1, r1
 80015a6:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
  return result;
 80015aa:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 80015ae:	fab1 f181 	clz	r1, r1
 80015b2:	b2c9      	uxtb	r1, r1
 80015b4:	408b      	lsls	r3, r1
 80015b6:	4921      	ldr	r1, [pc, #132]	; (800163c <HAL_RCC_OscConfig+0x5d0>)
 80015b8:	4313      	orrs	r3, r2
 80015ba:	600b      	str	r3, [r1, #0]
 80015bc:	e06d      	b.n	800169a <HAL_RCC_OscConfig+0x62e>
 80015be:	2301      	movs	r3, #1
 80015c0:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015c4:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 80015c8:	fa93 f3a3 	rbit	r3, r3
 80015cc:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  return result;
 80015d0:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80015d4:	fab3 f383 	clz	r3, r3
 80015d8:	b2db      	uxtb	r3, r3
 80015da:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80015de:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80015e2:	009b      	lsls	r3, r3, #2
 80015e4:	461a      	mov	r2, r3
 80015e6:	2300      	movs	r3, #0
 80015e8:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015ea:	f7ff fa6d 	bl	8000ac8 <HAL_GetTick>
 80015ee:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80015f2:	e00a      	b.n	800160a <HAL_RCC_OscConfig+0x59e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80015f4:	f7ff fa68 	bl	8000ac8 <HAL_GetTick>
 80015f8:	4602      	mov	r2, r0
 80015fa:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80015fe:	1ad3      	subs	r3, r2, r3
 8001600:	2b02      	cmp	r3, #2
 8001602:	d902      	bls.n	800160a <HAL_RCC_OscConfig+0x59e>
          {
            return HAL_TIMEOUT;
 8001604:	2303      	movs	r3, #3
 8001606:	f000 bd7e 	b.w	8002106 <HAL_RCC_OscConfig+0x109a>
 800160a:	2302      	movs	r3, #2
 800160c:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001610:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8001614:	fa93 f3a3 	rbit	r3, r3
 8001618:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  return result;
 800161c:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001620:	fab3 f383 	clz	r3, r3
 8001624:	b2db      	uxtb	r3, r3
 8001626:	095b      	lsrs	r3, r3, #5
 8001628:	b2db      	uxtb	r3, r3
 800162a:	f043 0301 	orr.w	r3, r3, #1
 800162e:	b2db      	uxtb	r3, r3
 8001630:	2b01      	cmp	r3, #1
 8001632:	d105      	bne.n	8001640 <HAL_RCC_OscConfig+0x5d4>
 8001634:	4b01      	ldr	r3, [pc, #4]	; (800163c <HAL_RCC_OscConfig+0x5d0>)
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	e016      	b.n	8001668 <HAL_RCC_OscConfig+0x5fc>
 800163a:	bf00      	nop
 800163c:	40021000 	.word	0x40021000
 8001640:	2302      	movs	r3, #2
 8001642:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001646:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800164a:	fa93 f3a3 	rbit	r3, r3
 800164e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8001652:	2302      	movs	r3, #2
 8001654:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8001658:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800165c:	fa93 f3a3 	rbit	r3, r3
 8001660:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8001664:	4bbf      	ldr	r3, [pc, #764]	; (8001964 <HAL_RCC_OscConfig+0x8f8>)
 8001666:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001668:	2202      	movs	r2, #2
 800166a:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 800166e:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 8001672:	fa92 f2a2 	rbit	r2, r2
 8001676:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
  return result;
 800167a:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 800167e:	fab2 f282 	clz	r2, r2
 8001682:	b2d2      	uxtb	r2, r2
 8001684:	f042 0220 	orr.w	r2, r2, #32
 8001688:	b2d2      	uxtb	r2, r2
 800168a:	f002 021f 	and.w	r2, r2, #31
 800168e:	2101      	movs	r1, #1
 8001690:	fa01 f202 	lsl.w	r2, r1, r2
 8001694:	4013      	ands	r3, r2
 8001696:	2b00      	cmp	r3, #0
 8001698:	d1ac      	bne.n	80015f4 <HAL_RCC_OscConfig+0x588>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800169a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800169e:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	f003 0308 	and.w	r3, r3, #8
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	f000 8113 	beq.w	80018d6 <HAL_RCC_OscConfig+0x86a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80016b0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80016b4:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	695b      	ldr	r3, [r3, #20]
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d07c      	beq.n	80017ba <HAL_RCC_OscConfig+0x74e>
 80016c0:	2301      	movs	r3, #1
 80016c2:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80016ca:	fa93 f3a3 	rbit	r3, r3
 80016ce:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  return result;
 80016d2:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80016d6:	fab3 f383 	clz	r3, r3
 80016da:	b2db      	uxtb	r3, r3
 80016dc:	461a      	mov	r2, r3
 80016de:	4ba2      	ldr	r3, [pc, #648]	; (8001968 <HAL_RCC_OscConfig+0x8fc>)
 80016e0:	4413      	add	r3, r2
 80016e2:	009b      	lsls	r3, r3, #2
 80016e4:	461a      	mov	r2, r3
 80016e6:	2301      	movs	r3, #1
 80016e8:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80016ea:	f7ff f9ed 	bl	8000ac8 <HAL_GetTick>
 80016ee:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80016f2:	e00a      	b.n	800170a <HAL_RCC_OscConfig+0x69e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80016f4:	f7ff f9e8 	bl	8000ac8 <HAL_GetTick>
 80016f8:	4602      	mov	r2, r0
 80016fa:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80016fe:	1ad3      	subs	r3, r2, r3
 8001700:	2b02      	cmp	r3, #2
 8001702:	d902      	bls.n	800170a <HAL_RCC_OscConfig+0x69e>
        {
          return HAL_TIMEOUT;
 8001704:	2303      	movs	r3, #3
 8001706:	f000 bcfe 	b.w	8002106 <HAL_RCC_OscConfig+0x109a>
 800170a:	2302      	movs	r3, #2
 800170c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001710:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8001714:	fa93 f2a3 	rbit	r2, r3
 8001718:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800171c:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8001720:	601a      	str	r2, [r3, #0]
 8001722:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001726:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800172a:	2202      	movs	r2, #2
 800172c:	601a      	str	r2, [r3, #0]
 800172e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001732:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	fa93 f2a3 	rbit	r2, r3
 800173c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001740:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8001744:	601a      	str	r2, [r3, #0]
 8001746:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800174a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800174e:	2202      	movs	r2, #2
 8001750:	601a      	str	r2, [r3, #0]
 8001752:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001756:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	fa93 f2a3 	rbit	r2, r3
 8001760:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001764:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001768:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800176a:	4b7e      	ldr	r3, [pc, #504]	; (8001964 <HAL_RCC_OscConfig+0x8f8>)
 800176c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800176e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001772:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8001776:	2102      	movs	r1, #2
 8001778:	6019      	str	r1, [r3, #0]
 800177a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800177e:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	fa93 f1a3 	rbit	r1, r3
 8001788:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800178c:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8001790:	6019      	str	r1, [r3, #0]
  return result;
 8001792:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001796:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	fab3 f383 	clz	r3, r3
 80017a0:	b2db      	uxtb	r3, r3
 80017a2:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80017a6:	b2db      	uxtb	r3, r3
 80017a8:	f003 031f 	and.w	r3, r3, #31
 80017ac:	2101      	movs	r1, #1
 80017ae:	fa01 f303 	lsl.w	r3, r1, r3
 80017b2:	4013      	ands	r3, r2
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d09d      	beq.n	80016f4 <HAL_RCC_OscConfig+0x688>
 80017b8:	e08d      	b.n	80018d6 <HAL_RCC_OscConfig+0x86a>
 80017ba:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80017be:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80017c2:	2201      	movs	r2, #1
 80017c4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017c6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80017ca:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	fa93 f2a3 	rbit	r2, r3
 80017d4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80017d8:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80017dc:	601a      	str	r2, [r3, #0]
  return result;
 80017de:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80017e2:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80017e6:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80017e8:	fab3 f383 	clz	r3, r3
 80017ec:	b2db      	uxtb	r3, r3
 80017ee:	461a      	mov	r2, r3
 80017f0:	4b5d      	ldr	r3, [pc, #372]	; (8001968 <HAL_RCC_OscConfig+0x8fc>)
 80017f2:	4413      	add	r3, r2
 80017f4:	009b      	lsls	r3, r3, #2
 80017f6:	461a      	mov	r2, r3
 80017f8:	2300      	movs	r3, #0
 80017fa:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80017fc:	f7ff f964 	bl	8000ac8 <HAL_GetTick>
 8001800:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001804:	e00a      	b.n	800181c <HAL_RCC_OscConfig+0x7b0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001806:	f7ff f95f 	bl	8000ac8 <HAL_GetTick>
 800180a:	4602      	mov	r2, r0
 800180c:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001810:	1ad3      	subs	r3, r2, r3
 8001812:	2b02      	cmp	r3, #2
 8001814:	d902      	bls.n	800181c <HAL_RCC_OscConfig+0x7b0>
        {
          return HAL_TIMEOUT;
 8001816:	2303      	movs	r3, #3
 8001818:	f000 bc75 	b.w	8002106 <HAL_RCC_OscConfig+0x109a>
 800181c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001820:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8001824:	2202      	movs	r2, #2
 8001826:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001828:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800182c:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	fa93 f2a3 	rbit	r2, r3
 8001836:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800183a:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800183e:	601a      	str	r2, [r3, #0]
 8001840:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001844:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8001848:	2202      	movs	r2, #2
 800184a:	601a      	str	r2, [r3, #0]
 800184c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001850:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	fa93 f2a3 	rbit	r2, r3
 800185a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800185e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8001862:	601a      	str	r2, [r3, #0]
 8001864:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001868:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 800186c:	2202      	movs	r2, #2
 800186e:	601a      	str	r2, [r3, #0]
 8001870:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001874:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	fa93 f2a3 	rbit	r2, r3
 800187e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001882:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8001886:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001888:	4b36      	ldr	r3, [pc, #216]	; (8001964 <HAL_RCC_OscConfig+0x8f8>)
 800188a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800188c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001890:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8001894:	2102      	movs	r1, #2
 8001896:	6019      	str	r1, [r3, #0]
 8001898:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800189c:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	fa93 f1a3 	rbit	r1, r3
 80018a6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80018aa:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80018ae:	6019      	str	r1, [r3, #0]
  return result;
 80018b0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80018b4:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	fab3 f383 	clz	r3, r3
 80018be:	b2db      	uxtb	r3, r3
 80018c0:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80018c4:	b2db      	uxtb	r3, r3
 80018c6:	f003 031f 	and.w	r3, r3, #31
 80018ca:	2101      	movs	r1, #1
 80018cc:	fa01 f303 	lsl.w	r3, r1, r3
 80018d0:	4013      	ands	r3, r2
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d197      	bne.n	8001806 <HAL_RCC_OscConfig+0x79a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80018d6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80018da:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	f003 0304 	and.w	r3, r3, #4
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	f000 81a5 	beq.w	8001c36 <HAL_RCC_OscConfig+0xbca>
  {
    FlagStatus       pwrclkchanged = RESET;
 80018ec:	2300      	movs	r3, #0
 80018ee:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80018f2:	4b1c      	ldr	r3, [pc, #112]	; (8001964 <HAL_RCC_OscConfig+0x8f8>)
 80018f4:	69db      	ldr	r3, [r3, #28]
 80018f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d116      	bne.n	800192c <HAL_RCC_OscConfig+0x8c0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80018fe:	4b19      	ldr	r3, [pc, #100]	; (8001964 <HAL_RCC_OscConfig+0x8f8>)
 8001900:	69db      	ldr	r3, [r3, #28]
 8001902:	4a18      	ldr	r2, [pc, #96]	; (8001964 <HAL_RCC_OscConfig+0x8f8>)
 8001904:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001908:	61d3      	str	r3, [r2, #28]
 800190a:	4b16      	ldr	r3, [pc, #88]	; (8001964 <HAL_RCC_OscConfig+0x8f8>)
 800190c:	69db      	ldr	r3, [r3, #28]
 800190e:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8001912:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001916:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800191a:	601a      	str	r2, [r3, #0]
 800191c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001920:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001924:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8001926:	2301      	movs	r3, #1
 8001928:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800192c:	4b0f      	ldr	r3, [pc, #60]	; (800196c <HAL_RCC_OscConfig+0x900>)
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001934:	2b00      	cmp	r3, #0
 8001936:	d121      	bne.n	800197c <HAL_RCC_OscConfig+0x910>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001938:	4b0c      	ldr	r3, [pc, #48]	; (800196c <HAL_RCC_OscConfig+0x900>)
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	4a0b      	ldr	r2, [pc, #44]	; (800196c <HAL_RCC_OscConfig+0x900>)
 800193e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001942:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001944:	f7ff f8c0 	bl	8000ac8 <HAL_GetTick>
 8001948:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800194c:	e010      	b.n	8001970 <HAL_RCC_OscConfig+0x904>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800194e:	f7ff f8bb 	bl	8000ac8 <HAL_GetTick>
 8001952:	4602      	mov	r2, r0
 8001954:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001958:	1ad3      	subs	r3, r2, r3
 800195a:	2b64      	cmp	r3, #100	; 0x64
 800195c:	d908      	bls.n	8001970 <HAL_RCC_OscConfig+0x904>
        {
          return HAL_TIMEOUT;
 800195e:	2303      	movs	r3, #3
 8001960:	e3d1      	b.n	8002106 <HAL_RCC_OscConfig+0x109a>
 8001962:	bf00      	nop
 8001964:	40021000 	.word	0x40021000
 8001968:	10908120 	.word	0x10908120
 800196c:	40007000 	.word	0x40007000
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001970:	4b8d      	ldr	r3, [pc, #564]	; (8001ba8 <HAL_RCC_OscConfig+0xb3c>)
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001978:	2b00      	cmp	r3, #0
 800197a:	d0e8      	beq.n	800194e <HAL_RCC_OscConfig+0x8e2>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800197c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001980:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	689b      	ldr	r3, [r3, #8]
 8001988:	2b01      	cmp	r3, #1
 800198a:	d106      	bne.n	800199a <HAL_RCC_OscConfig+0x92e>
 800198c:	4b87      	ldr	r3, [pc, #540]	; (8001bac <HAL_RCC_OscConfig+0xb40>)
 800198e:	6a1b      	ldr	r3, [r3, #32]
 8001990:	4a86      	ldr	r2, [pc, #536]	; (8001bac <HAL_RCC_OscConfig+0xb40>)
 8001992:	f043 0301 	orr.w	r3, r3, #1
 8001996:	6213      	str	r3, [r2, #32]
 8001998:	e035      	b.n	8001a06 <HAL_RCC_OscConfig+0x99a>
 800199a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800199e:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	689b      	ldr	r3, [r3, #8]
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d10c      	bne.n	80019c4 <HAL_RCC_OscConfig+0x958>
 80019aa:	4b80      	ldr	r3, [pc, #512]	; (8001bac <HAL_RCC_OscConfig+0xb40>)
 80019ac:	6a1b      	ldr	r3, [r3, #32]
 80019ae:	4a7f      	ldr	r2, [pc, #508]	; (8001bac <HAL_RCC_OscConfig+0xb40>)
 80019b0:	f023 0301 	bic.w	r3, r3, #1
 80019b4:	6213      	str	r3, [r2, #32]
 80019b6:	4b7d      	ldr	r3, [pc, #500]	; (8001bac <HAL_RCC_OscConfig+0xb40>)
 80019b8:	6a1b      	ldr	r3, [r3, #32]
 80019ba:	4a7c      	ldr	r2, [pc, #496]	; (8001bac <HAL_RCC_OscConfig+0xb40>)
 80019bc:	f023 0304 	bic.w	r3, r3, #4
 80019c0:	6213      	str	r3, [r2, #32]
 80019c2:	e020      	b.n	8001a06 <HAL_RCC_OscConfig+0x99a>
 80019c4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80019c8:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	689b      	ldr	r3, [r3, #8]
 80019d0:	2b05      	cmp	r3, #5
 80019d2:	d10c      	bne.n	80019ee <HAL_RCC_OscConfig+0x982>
 80019d4:	4b75      	ldr	r3, [pc, #468]	; (8001bac <HAL_RCC_OscConfig+0xb40>)
 80019d6:	6a1b      	ldr	r3, [r3, #32]
 80019d8:	4a74      	ldr	r2, [pc, #464]	; (8001bac <HAL_RCC_OscConfig+0xb40>)
 80019da:	f043 0304 	orr.w	r3, r3, #4
 80019de:	6213      	str	r3, [r2, #32]
 80019e0:	4b72      	ldr	r3, [pc, #456]	; (8001bac <HAL_RCC_OscConfig+0xb40>)
 80019e2:	6a1b      	ldr	r3, [r3, #32]
 80019e4:	4a71      	ldr	r2, [pc, #452]	; (8001bac <HAL_RCC_OscConfig+0xb40>)
 80019e6:	f043 0301 	orr.w	r3, r3, #1
 80019ea:	6213      	str	r3, [r2, #32]
 80019ec:	e00b      	b.n	8001a06 <HAL_RCC_OscConfig+0x99a>
 80019ee:	4b6f      	ldr	r3, [pc, #444]	; (8001bac <HAL_RCC_OscConfig+0xb40>)
 80019f0:	6a1b      	ldr	r3, [r3, #32]
 80019f2:	4a6e      	ldr	r2, [pc, #440]	; (8001bac <HAL_RCC_OscConfig+0xb40>)
 80019f4:	f023 0301 	bic.w	r3, r3, #1
 80019f8:	6213      	str	r3, [r2, #32]
 80019fa:	4b6c      	ldr	r3, [pc, #432]	; (8001bac <HAL_RCC_OscConfig+0xb40>)
 80019fc:	6a1b      	ldr	r3, [r3, #32]
 80019fe:	4a6b      	ldr	r2, [pc, #428]	; (8001bac <HAL_RCC_OscConfig+0xb40>)
 8001a00:	f023 0304 	bic.w	r3, r3, #4
 8001a04:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001a06:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001a0a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	689b      	ldr	r3, [r3, #8]
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	f000 8081 	beq.w	8001b1a <HAL_RCC_OscConfig+0xaae>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a18:	f7ff f856 	bl	8000ac8 <HAL_GetTick>
 8001a1c:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a20:	e00b      	b.n	8001a3a <HAL_RCC_OscConfig+0x9ce>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001a22:	f7ff f851 	bl	8000ac8 <HAL_GetTick>
 8001a26:	4602      	mov	r2, r0
 8001a28:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001a2c:	1ad3      	subs	r3, r2, r3
 8001a2e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a32:	4293      	cmp	r3, r2
 8001a34:	d901      	bls.n	8001a3a <HAL_RCC_OscConfig+0x9ce>
        {
          return HAL_TIMEOUT;
 8001a36:	2303      	movs	r3, #3
 8001a38:	e365      	b.n	8002106 <HAL_RCC_OscConfig+0x109a>
 8001a3a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001a3e:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8001a42:	2202      	movs	r2, #2
 8001a44:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a46:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001a4a:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	fa93 f2a3 	rbit	r2, r3
 8001a54:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001a58:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8001a5c:	601a      	str	r2, [r3, #0]
 8001a5e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001a62:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8001a66:	2202      	movs	r2, #2
 8001a68:	601a      	str	r2, [r3, #0]
 8001a6a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001a6e:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	fa93 f2a3 	rbit	r2, r3
 8001a78:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001a7c:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8001a80:	601a      	str	r2, [r3, #0]
  return result;
 8001a82:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001a86:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8001a8a:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a8c:	fab3 f383 	clz	r3, r3
 8001a90:	b2db      	uxtb	r3, r3
 8001a92:	095b      	lsrs	r3, r3, #5
 8001a94:	b2db      	uxtb	r3, r3
 8001a96:	f043 0302 	orr.w	r3, r3, #2
 8001a9a:	b2db      	uxtb	r3, r3
 8001a9c:	2b02      	cmp	r3, #2
 8001a9e:	d102      	bne.n	8001aa6 <HAL_RCC_OscConfig+0xa3a>
 8001aa0:	4b42      	ldr	r3, [pc, #264]	; (8001bac <HAL_RCC_OscConfig+0xb40>)
 8001aa2:	6a1b      	ldr	r3, [r3, #32]
 8001aa4:	e013      	b.n	8001ace <HAL_RCC_OscConfig+0xa62>
 8001aa6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001aaa:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8001aae:	2202      	movs	r2, #2
 8001ab0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ab2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001ab6:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	fa93 f2a3 	rbit	r2, r3
 8001ac0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001ac4:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 8001ac8:	601a      	str	r2, [r3, #0]
 8001aca:	4b38      	ldr	r3, [pc, #224]	; (8001bac <HAL_RCC_OscConfig+0xb40>)
 8001acc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ace:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001ad2:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8001ad6:	2102      	movs	r1, #2
 8001ad8:	6011      	str	r1, [r2, #0]
 8001ada:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001ade:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8001ae2:	6812      	ldr	r2, [r2, #0]
 8001ae4:	fa92 f1a2 	rbit	r1, r2
 8001ae8:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001aec:	f5a2 72b0 	sub.w	r2, r2, #352	; 0x160
 8001af0:	6011      	str	r1, [r2, #0]
  return result;
 8001af2:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001af6:	f5a2 72b0 	sub.w	r2, r2, #352	; 0x160
 8001afa:	6812      	ldr	r2, [r2, #0]
 8001afc:	fab2 f282 	clz	r2, r2
 8001b00:	b2d2      	uxtb	r2, r2
 8001b02:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001b06:	b2d2      	uxtb	r2, r2
 8001b08:	f002 021f 	and.w	r2, r2, #31
 8001b0c:	2101      	movs	r1, #1
 8001b0e:	fa01 f202 	lsl.w	r2, r1, r2
 8001b12:	4013      	ands	r3, r2
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d084      	beq.n	8001a22 <HAL_RCC_OscConfig+0x9b6>
 8001b18:	e083      	b.n	8001c22 <HAL_RCC_OscConfig+0xbb6>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b1a:	f7fe ffd5 	bl	8000ac8 <HAL_GetTick>
 8001b1e:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001b22:	e00b      	b.n	8001b3c <HAL_RCC_OscConfig+0xad0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001b24:	f7fe ffd0 	bl	8000ac8 <HAL_GetTick>
 8001b28:	4602      	mov	r2, r0
 8001b2a:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001b2e:	1ad3      	subs	r3, r2, r3
 8001b30:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b34:	4293      	cmp	r3, r2
 8001b36:	d901      	bls.n	8001b3c <HAL_RCC_OscConfig+0xad0>
        {
          return HAL_TIMEOUT;
 8001b38:	2303      	movs	r3, #3
 8001b3a:	e2e4      	b.n	8002106 <HAL_RCC_OscConfig+0x109a>
 8001b3c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001b40:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8001b44:	2202      	movs	r2, #2
 8001b46:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b48:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001b4c:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	fa93 f2a3 	rbit	r2, r3
 8001b56:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001b5a:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8001b5e:	601a      	str	r2, [r3, #0]
 8001b60:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001b64:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8001b68:	2202      	movs	r2, #2
 8001b6a:	601a      	str	r2, [r3, #0]
 8001b6c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001b70:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	fa93 f2a3 	rbit	r2, r3
 8001b7a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001b7e:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8001b82:	601a      	str	r2, [r3, #0]
  return result;
 8001b84:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001b88:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8001b8c:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001b8e:	fab3 f383 	clz	r3, r3
 8001b92:	b2db      	uxtb	r3, r3
 8001b94:	095b      	lsrs	r3, r3, #5
 8001b96:	b2db      	uxtb	r3, r3
 8001b98:	f043 0302 	orr.w	r3, r3, #2
 8001b9c:	b2db      	uxtb	r3, r3
 8001b9e:	2b02      	cmp	r3, #2
 8001ba0:	d106      	bne.n	8001bb0 <HAL_RCC_OscConfig+0xb44>
 8001ba2:	4b02      	ldr	r3, [pc, #8]	; (8001bac <HAL_RCC_OscConfig+0xb40>)
 8001ba4:	6a1b      	ldr	r3, [r3, #32]
 8001ba6:	e017      	b.n	8001bd8 <HAL_RCC_OscConfig+0xb6c>
 8001ba8:	40007000 	.word	0x40007000
 8001bac:	40021000 	.word	0x40021000
 8001bb0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001bb4:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8001bb8:	2202      	movs	r2, #2
 8001bba:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bbc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001bc0:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	fa93 f2a3 	rbit	r2, r3
 8001bca:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001bce:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 8001bd2:	601a      	str	r2, [r3, #0]
 8001bd4:	4bb3      	ldr	r3, [pc, #716]	; (8001ea4 <HAL_RCC_OscConfig+0xe38>)
 8001bd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bd8:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001bdc:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8001be0:	2102      	movs	r1, #2
 8001be2:	6011      	str	r1, [r2, #0]
 8001be4:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001be8:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8001bec:	6812      	ldr	r2, [r2, #0]
 8001bee:	fa92 f1a2 	rbit	r1, r2
 8001bf2:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001bf6:	f5a2 72c0 	sub.w	r2, r2, #384	; 0x180
 8001bfa:	6011      	str	r1, [r2, #0]
  return result;
 8001bfc:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001c00:	f5a2 72c0 	sub.w	r2, r2, #384	; 0x180
 8001c04:	6812      	ldr	r2, [r2, #0]
 8001c06:	fab2 f282 	clz	r2, r2
 8001c0a:	b2d2      	uxtb	r2, r2
 8001c0c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001c10:	b2d2      	uxtb	r2, r2
 8001c12:	f002 021f 	and.w	r2, r2, #31
 8001c16:	2101      	movs	r1, #1
 8001c18:	fa01 f202 	lsl.w	r2, r1, r2
 8001c1c:	4013      	ands	r3, r2
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d180      	bne.n	8001b24 <HAL_RCC_OscConfig+0xab8>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001c22:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 8001c26:	2b01      	cmp	r3, #1
 8001c28:	d105      	bne.n	8001c36 <HAL_RCC_OscConfig+0xbca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001c2a:	4b9e      	ldr	r3, [pc, #632]	; (8001ea4 <HAL_RCC_OscConfig+0xe38>)
 8001c2c:	69db      	ldr	r3, [r3, #28]
 8001c2e:	4a9d      	ldr	r2, [pc, #628]	; (8001ea4 <HAL_RCC_OscConfig+0xe38>)
 8001c30:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001c34:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001c36:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001c3a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	699b      	ldr	r3, [r3, #24]
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	f000 825e 	beq.w	8002104 <HAL_RCC_OscConfig+0x1098>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001c48:	4b96      	ldr	r3, [pc, #600]	; (8001ea4 <HAL_RCC_OscConfig+0xe38>)
 8001c4a:	685b      	ldr	r3, [r3, #4]
 8001c4c:	f003 030c 	and.w	r3, r3, #12
 8001c50:	2b08      	cmp	r3, #8
 8001c52:	f000 821f 	beq.w	8002094 <HAL_RCC_OscConfig+0x1028>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001c56:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001c5a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	699b      	ldr	r3, [r3, #24]
 8001c62:	2b02      	cmp	r3, #2
 8001c64:	f040 8170 	bne.w	8001f48 <HAL_RCC_OscConfig+0xedc>
 8001c68:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001c6c:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8001c70:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001c74:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c76:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001c7a:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	fa93 f2a3 	rbit	r2, r3
 8001c84:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001c88:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8001c8c:	601a      	str	r2, [r3, #0]
  return result;
 8001c8e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001c92:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8001c96:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c98:	fab3 f383 	clz	r3, r3
 8001c9c:	b2db      	uxtb	r3, r3
 8001c9e:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001ca2:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001ca6:	009b      	lsls	r3, r3, #2
 8001ca8:	461a      	mov	r2, r3
 8001caa:	2300      	movs	r3, #0
 8001cac:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cae:	f7fe ff0b 	bl	8000ac8 <HAL_GetTick>
 8001cb2:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001cb6:	e009      	b.n	8001ccc <HAL_RCC_OscConfig+0xc60>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001cb8:	f7fe ff06 	bl	8000ac8 <HAL_GetTick>
 8001cbc:	4602      	mov	r2, r0
 8001cbe:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001cc2:	1ad3      	subs	r3, r2, r3
 8001cc4:	2b02      	cmp	r3, #2
 8001cc6:	d901      	bls.n	8001ccc <HAL_RCC_OscConfig+0xc60>
          {
            return HAL_TIMEOUT;
 8001cc8:	2303      	movs	r3, #3
 8001cca:	e21c      	b.n	8002106 <HAL_RCC_OscConfig+0x109a>
 8001ccc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001cd0:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8001cd4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001cd8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cda:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001cde:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	fa93 f2a3 	rbit	r2, r3
 8001ce8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001cec:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8001cf0:	601a      	str	r2, [r3, #0]
  return result;
 8001cf2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001cf6:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8001cfa:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001cfc:	fab3 f383 	clz	r3, r3
 8001d00:	b2db      	uxtb	r3, r3
 8001d02:	095b      	lsrs	r3, r3, #5
 8001d04:	b2db      	uxtb	r3, r3
 8001d06:	f043 0301 	orr.w	r3, r3, #1
 8001d0a:	b2db      	uxtb	r3, r3
 8001d0c:	2b01      	cmp	r3, #1
 8001d0e:	d102      	bne.n	8001d16 <HAL_RCC_OscConfig+0xcaa>
 8001d10:	4b64      	ldr	r3, [pc, #400]	; (8001ea4 <HAL_RCC_OscConfig+0xe38>)
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	e027      	b.n	8001d66 <HAL_RCC_OscConfig+0xcfa>
 8001d16:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001d1a:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8001d1e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001d22:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d24:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001d28:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	fa93 f2a3 	rbit	r2, r3
 8001d32:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001d36:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8001d3a:	601a      	str	r2, [r3, #0]
 8001d3c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001d40:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8001d44:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001d48:	601a      	str	r2, [r3, #0]
 8001d4a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001d4e:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	fa93 f2a3 	rbit	r2, r3
 8001d58:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001d5c:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 8001d60:	601a      	str	r2, [r3, #0]
 8001d62:	4b50      	ldr	r3, [pc, #320]	; (8001ea4 <HAL_RCC_OscConfig+0xe38>)
 8001d64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d66:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001d6a:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8001d6e:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001d72:	6011      	str	r1, [r2, #0]
 8001d74:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001d78:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8001d7c:	6812      	ldr	r2, [r2, #0]
 8001d7e:	fa92 f1a2 	rbit	r1, r2
 8001d82:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001d86:	f5a2 72d4 	sub.w	r2, r2, #424	; 0x1a8
 8001d8a:	6011      	str	r1, [r2, #0]
  return result;
 8001d8c:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001d90:	f5a2 72d4 	sub.w	r2, r2, #424	; 0x1a8
 8001d94:	6812      	ldr	r2, [r2, #0]
 8001d96:	fab2 f282 	clz	r2, r2
 8001d9a:	b2d2      	uxtb	r2, r2
 8001d9c:	f042 0220 	orr.w	r2, r2, #32
 8001da0:	b2d2      	uxtb	r2, r2
 8001da2:	f002 021f 	and.w	r2, r2, #31
 8001da6:	2101      	movs	r1, #1
 8001da8:	fa01 f202 	lsl.w	r2, r1, r2
 8001dac:	4013      	ands	r3, r2
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d182      	bne.n	8001cb8 <HAL_RCC_OscConfig+0xc4c>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001db2:	4b3c      	ldr	r3, [pc, #240]	; (8001ea4 <HAL_RCC_OscConfig+0xe38>)
 8001db4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001db6:	f023 020f 	bic.w	r2, r3, #15
 8001dba:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001dbe:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dc6:	4937      	ldr	r1, [pc, #220]	; (8001ea4 <HAL_RCC_OscConfig+0xe38>)
 8001dc8:	4313      	orrs	r3, r2
 8001dca:	62cb      	str	r3, [r1, #44]	; 0x2c
 8001dcc:	4b35      	ldr	r3, [pc, #212]	; (8001ea4 <HAL_RCC_OscConfig+0xe38>)
 8001dce:	685b      	ldr	r3, [r3, #4]
 8001dd0:	f423 1276 	bic.w	r2, r3, #4030464	; 0x3d8000
 8001dd4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001dd8:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	6a19      	ldr	r1, [r3, #32]
 8001de0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001de4:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	69db      	ldr	r3, [r3, #28]
 8001dec:	430b      	orrs	r3, r1
 8001dee:	492d      	ldr	r1, [pc, #180]	; (8001ea4 <HAL_RCC_OscConfig+0xe38>)
 8001df0:	4313      	orrs	r3, r2
 8001df2:	604b      	str	r3, [r1, #4]
 8001df4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001df8:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8001dfc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001e00:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e02:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001e06:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	fa93 f2a3 	rbit	r2, r3
 8001e10:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001e14:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8001e18:	601a      	str	r2, [r3, #0]
  return result;
 8001e1a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001e1e:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8001e22:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001e24:	fab3 f383 	clz	r3, r3
 8001e28:	b2db      	uxtb	r3, r3
 8001e2a:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001e2e:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001e32:	009b      	lsls	r3, r3, #2
 8001e34:	461a      	mov	r2, r3
 8001e36:	2301      	movs	r3, #1
 8001e38:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e3a:	f7fe fe45 	bl	8000ac8 <HAL_GetTick>
 8001e3e:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001e42:	e009      	b.n	8001e58 <HAL_RCC_OscConfig+0xdec>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001e44:	f7fe fe40 	bl	8000ac8 <HAL_GetTick>
 8001e48:	4602      	mov	r2, r0
 8001e4a:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001e4e:	1ad3      	subs	r3, r2, r3
 8001e50:	2b02      	cmp	r3, #2
 8001e52:	d901      	bls.n	8001e58 <HAL_RCC_OscConfig+0xdec>
          {
            return HAL_TIMEOUT;
 8001e54:	2303      	movs	r3, #3
 8001e56:	e156      	b.n	8002106 <HAL_RCC_OscConfig+0x109a>
 8001e58:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001e5c:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8001e60:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001e64:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e66:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001e6a:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	fa93 f2a3 	rbit	r2, r3
 8001e74:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001e78:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8001e7c:	601a      	str	r2, [r3, #0]
  return result;
 8001e7e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001e82:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8001e86:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001e88:	fab3 f383 	clz	r3, r3
 8001e8c:	b2db      	uxtb	r3, r3
 8001e8e:	095b      	lsrs	r3, r3, #5
 8001e90:	b2db      	uxtb	r3, r3
 8001e92:	f043 0301 	orr.w	r3, r3, #1
 8001e96:	b2db      	uxtb	r3, r3
 8001e98:	2b01      	cmp	r3, #1
 8001e9a:	d105      	bne.n	8001ea8 <HAL_RCC_OscConfig+0xe3c>
 8001e9c:	4b01      	ldr	r3, [pc, #4]	; (8001ea4 <HAL_RCC_OscConfig+0xe38>)
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	e02a      	b.n	8001ef8 <HAL_RCC_OscConfig+0xe8c>
 8001ea2:	bf00      	nop
 8001ea4:	40021000 	.word	0x40021000
 8001ea8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001eac:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8001eb0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001eb4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001eb6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001eba:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	fa93 f2a3 	rbit	r2, r3
 8001ec4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001ec8:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8001ecc:	601a      	str	r2, [r3, #0]
 8001ece:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001ed2:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8001ed6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001eda:	601a      	str	r2, [r3, #0]
 8001edc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001ee0:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	fa93 f2a3 	rbit	r2, r3
 8001eea:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001eee:	f5a3 73e4 	sub.w	r3, r3, #456	; 0x1c8
 8001ef2:	601a      	str	r2, [r3, #0]
 8001ef4:	4b86      	ldr	r3, [pc, #536]	; (8002110 <HAL_RCC_OscConfig+0x10a4>)
 8001ef6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ef8:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001efc:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8001f00:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001f04:	6011      	str	r1, [r2, #0]
 8001f06:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001f0a:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8001f0e:	6812      	ldr	r2, [r2, #0]
 8001f10:	fa92 f1a2 	rbit	r1, r2
 8001f14:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001f18:	f5a2 72e8 	sub.w	r2, r2, #464	; 0x1d0
 8001f1c:	6011      	str	r1, [r2, #0]
  return result;
 8001f1e:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001f22:	f5a2 72e8 	sub.w	r2, r2, #464	; 0x1d0
 8001f26:	6812      	ldr	r2, [r2, #0]
 8001f28:	fab2 f282 	clz	r2, r2
 8001f2c:	b2d2      	uxtb	r2, r2
 8001f2e:	f042 0220 	orr.w	r2, r2, #32
 8001f32:	b2d2      	uxtb	r2, r2
 8001f34:	f002 021f 	and.w	r2, r2, #31
 8001f38:	2101      	movs	r1, #1
 8001f3a:	fa01 f202 	lsl.w	r2, r1, r2
 8001f3e:	4013      	ands	r3, r2
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	f43f af7f 	beq.w	8001e44 <HAL_RCC_OscConfig+0xdd8>
 8001f46:	e0dd      	b.n	8002104 <HAL_RCC_OscConfig+0x1098>
 8001f48:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001f4c:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8001f50:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001f54:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f56:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001f5a:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	fa93 f2a3 	rbit	r2, r3
 8001f64:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001f68:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8001f6c:	601a      	str	r2, [r3, #0]
  return result;
 8001f6e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001f72:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8001f76:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f78:	fab3 f383 	clz	r3, r3
 8001f7c:	b2db      	uxtb	r3, r3
 8001f7e:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001f82:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001f86:	009b      	lsls	r3, r3, #2
 8001f88:	461a      	mov	r2, r3
 8001f8a:	2300      	movs	r3, #0
 8001f8c:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f8e:	f7fe fd9b 	bl	8000ac8 <HAL_GetTick>
 8001f92:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f96:	e009      	b.n	8001fac <HAL_RCC_OscConfig+0xf40>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001f98:	f7fe fd96 	bl	8000ac8 <HAL_GetTick>
 8001f9c:	4602      	mov	r2, r0
 8001f9e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001fa2:	1ad3      	subs	r3, r2, r3
 8001fa4:	2b02      	cmp	r3, #2
 8001fa6:	d901      	bls.n	8001fac <HAL_RCC_OscConfig+0xf40>
          {
            return HAL_TIMEOUT;
 8001fa8:	2303      	movs	r3, #3
 8001faa:	e0ac      	b.n	8002106 <HAL_RCC_OscConfig+0x109a>
 8001fac:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001fb0:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8001fb4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001fb8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fba:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001fbe:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	fa93 f2a3 	rbit	r2, r3
 8001fc8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001fcc:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8001fd0:	601a      	str	r2, [r3, #0]
  return result;
 8001fd2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001fd6:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8001fda:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001fdc:	fab3 f383 	clz	r3, r3
 8001fe0:	b2db      	uxtb	r3, r3
 8001fe2:	095b      	lsrs	r3, r3, #5
 8001fe4:	b2db      	uxtb	r3, r3
 8001fe6:	f043 0301 	orr.w	r3, r3, #1
 8001fea:	b2db      	uxtb	r3, r3
 8001fec:	2b01      	cmp	r3, #1
 8001fee:	d102      	bne.n	8001ff6 <HAL_RCC_OscConfig+0xf8a>
 8001ff0:	4b47      	ldr	r3, [pc, #284]	; (8002110 <HAL_RCC_OscConfig+0x10a4>)
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	e027      	b.n	8002046 <HAL_RCC_OscConfig+0xfda>
 8001ff6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001ffa:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8001ffe:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002002:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002004:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002008:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	fa93 f2a3 	rbit	r2, r3
 8002012:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002016:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 800201a:	601a      	str	r2, [r3, #0]
 800201c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002020:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8002024:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002028:	601a      	str	r2, [r3, #0]
 800202a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800202e:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	fa93 f2a3 	rbit	r2, r3
 8002038:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800203c:	f5a3 73f8 	sub.w	r3, r3, #496	; 0x1f0
 8002040:	601a      	str	r2, [r3, #0]
 8002042:	4b33      	ldr	r3, [pc, #204]	; (8002110 <HAL_RCC_OscConfig+0x10a4>)
 8002044:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002046:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800204a:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 800204e:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002052:	6011      	str	r1, [r2, #0]
 8002054:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002058:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 800205c:	6812      	ldr	r2, [r2, #0]
 800205e:	fa92 f1a2 	rbit	r1, r2
 8002062:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002066:	f5a2 72fc 	sub.w	r2, r2, #504	; 0x1f8
 800206a:	6011      	str	r1, [r2, #0]
  return result;
 800206c:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002070:	f5a2 72fc 	sub.w	r2, r2, #504	; 0x1f8
 8002074:	6812      	ldr	r2, [r2, #0]
 8002076:	fab2 f282 	clz	r2, r2
 800207a:	b2d2      	uxtb	r2, r2
 800207c:	f042 0220 	orr.w	r2, r2, #32
 8002080:	b2d2      	uxtb	r2, r2
 8002082:	f002 021f 	and.w	r2, r2, #31
 8002086:	2101      	movs	r1, #1
 8002088:	fa01 f202 	lsl.w	r2, r1, r2
 800208c:	4013      	ands	r3, r2
 800208e:	2b00      	cmp	r3, #0
 8002090:	d182      	bne.n	8001f98 <HAL_RCC_OscConfig+0xf2c>
 8002092:	e037      	b.n	8002104 <HAL_RCC_OscConfig+0x1098>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002094:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002098:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	699b      	ldr	r3, [r3, #24]
 80020a0:	2b01      	cmp	r3, #1
 80020a2:	d101      	bne.n	80020a8 <HAL_RCC_OscConfig+0x103c>
      {
        return HAL_ERROR;
 80020a4:	2301      	movs	r3, #1
 80020a6:	e02e      	b.n	8002106 <HAL_RCC_OscConfig+0x109a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80020a8:	4b19      	ldr	r3, [pc, #100]	; (8002110 <HAL_RCC_OscConfig+0x10a4>)
 80020aa:	685b      	ldr	r3, [r3, #4]
 80020ac:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 80020b0:	4b17      	ldr	r3, [pc, #92]	; (8002110 <HAL_RCC_OscConfig+0x10a4>)
 80020b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020b4:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80020b8:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80020bc:	f403 32c0 	and.w	r2, r3, #98304	; 0x18000
 80020c0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80020c4:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	69db      	ldr	r3, [r3, #28]
 80020cc:	429a      	cmp	r2, r3
 80020ce:	d117      	bne.n	8002100 <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 80020d0:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80020d4:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80020d8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80020dc:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80020e4:	429a      	cmp	r2, r3
 80020e6:	d10b      	bne.n	8002100 <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 80020e8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80020ec:	f003 020f 	and.w	r2, r3, #15
 80020f0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80020f4:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 80020fc:	429a      	cmp	r2, r3
 80020fe:	d001      	beq.n	8002104 <HAL_RCC_OscConfig+0x1098>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 8002100:	2301      	movs	r3, #1
 8002102:	e000      	b.n	8002106 <HAL_RCC_OscConfig+0x109a>
        }
      }
    }
  }

  return HAL_OK;
 8002104:	2300      	movs	r3, #0
}
 8002106:	4618      	mov	r0, r3
 8002108:	f507 7702 	add.w	r7, r7, #520	; 0x208
 800210c:	46bd      	mov	sp, r7
 800210e:	bd80      	pop	{r7, pc}
 8002110:	40021000 	.word	0x40021000

08002114 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002114:	b580      	push	{r7, lr}
 8002116:	b09e      	sub	sp, #120	; 0x78
 8002118:	af00      	add	r7, sp, #0
 800211a:	6078      	str	r0, [r7, #4]
 800211c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800211e:	2300      	movs	r3, #0
 8002120:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	2b00      	cmp	r3, #0
 8002126:	d101      	bne.n	800212c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002128:	2301      	movs	r3, #1
 800212a:	e162      	b.n	80023f2 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800212c:	4b90      	ldr	r3, [pc, #576]	; (8002370 <HAL_RCC_ClockConfig+0x25c>)
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	f003 0307 	and.w	r3, r3, #7
 8002134:	683a      	ldr	r2, [r7, #0]
 8002136:	429a      	cmp	r2, r3
 8002138:	d910      	bls.n	800215c <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800213a:	4b8d      	ldr	r3, [pc, #564]	; (8002370 <HAL_RCC_ClockConfig+0x25c>)
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	f023 0207 	bic.w	r2, r3, #7
 8002142:	498b      	ldr	r1, [pc, #556]	; (8002370 <HAL_RCC_ClockConfig+0x25c>)
 8002144:	683b      	ldr	r3, [r7, #0]
 8002146:	4313      	orrs	r3, r2
 8002148:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800214a:	4b89      	ldr	r3, [pc, #548]	; (8002370 <HAL_RCC_ClockConfig+0x25c>)
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	f003 0307 	and.w	r3, r3, #7
 8002152:	683a      	ldr	r2, [r7, #0]
 8002154:	429a      	cmp	r2, r3
 8002156:	d001      	beq.n	800215c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002158:	2301      	movs	r3, #1
 800215a:	e14a      	b.n	80023f2 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	f003 0302 	and.w	r3, r3, #2
 8002164:	2b00      	cmp	r3, #0
 8002166:	d008      	beq.n	800217a <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002168:	4b82      	ldr	r3, [pc, #520]	; (8002374 <HAL_RCC_ClockConfig+0x260>)
 800216a:	685b      	ldr	r3, [r3, #4]
 800216c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	689b      	ldr	r3, [r3, #8]
 8002174:	497f      	ldr	r1, [pc, #508]	; (8002374 <HAL_RCC_ClockConfig+0x260>)
 8002176:	4313      	orrs	r3, r2
 8002178:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	f003 0301 	and.w	r3, r3, #1
 8002182:	2b00      	cmp	r3, #0
 8002184:	f000 80dc 	beq.w	8002340 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	685b      	ldr	r3, [r3, #4]
 800218c:	2b01      	cmp	r3, #1
 800218e:	d13c      	bne.n	800220a <HAL_RCC_ClockConfig+0xf6>
 8002190:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002194:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002196:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002198:	fa93 f3a3 	rbit	r3, r3
 800219c:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 800219e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021a0:	fab3 f383 	clz	r3, r3
 80021a4:	b2db      	uxtb	r3, r3
 80021a6:	095b      	lsrs	r3, r3, #5
 80021a8:	b2db      	uxtb	r3, r3
 80021aa:	f043 0301 	orr.w	r3, r3, #1
 80021ae:	b2db      	uxtb	r3, r3
 80021b0:	2b01      	cmp	r3, #1
 80021b2:	d102      	bne.n	80021ba <HAL_RCC_ClockConfig+0xa6>
 80021b4:	4b6f      	ldr	r3, [pc, #444]	; (8002374 <HAL_RCC_ClockConfig+0x260>)
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	e00f      	b.n	80021da <HAL_RCC_ClockConfig+0xc6>
 80021ba:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80021be:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021c0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80021c2:	fa93 f3a3 	rbit	r3, r3
 80021c6:	667b      	str	r3, [r7, #100]	; 0x64
 80021c8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80021cc:	663b      	str	r3, [r7, #96]	; 0x60
 80021ce:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80021d0:	fa93 f3a3 	rbit	r3, r3
 80021d4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80021d6:	4b67      	ldr	r3, [pc, #412]	; (8002374 <HAL_RCC_ClockConfig+0x260>)
 80021d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021da:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80021de:	65ba      	str	r2, [r7, #88]	; 0x58
 80021e0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80021e2:	fa92 f2a2 	rbit	r2, r2
 80021e6:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 80021e8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80021ea:	fab2 f282 	clz	r2, r2
 80021ee:	b2d2      	uxtb	r2, r2
 80021f0:	f042 0220 	orr.w	r2, r2, #32
 80021f4:	b2d2      	uxtb	r2, r2
 80021f6:	f002 021f 	and.w	r2, r2, #31
 80021fa:	2101      	movs	r1, #1
 80021fc:	fa01 f202 	lsl.w	r2, r1, r2
 8002200:	4013      	ands	r3, r2
 8002202:	2b00      	cmp	r3, #0
 8002204:	d17b      	bne.n	80022fe <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002206:	2301      	movs	r3, #1
 8002208:	e0f3      	b.n	80023f2 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	685b      	ldr	r3, [r3, #4]
 800220e:	2b02      	cmp	r3, #2
 8002210:	d13c      	bne.n	800228c <HAL_RCC_ClockConfig+0x178>
 8002212:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002216:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002218:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800221a:	fa93 f3a3 	rbit	r3, r3
 800221e:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002220:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002222:	fab3 f383 	clz	r3, r3
 8002226:	b2db      	uxtb	r3, r3
 8002228:	095b      	lsrs	r3, r3, #5
 800222a:	b2db      	uxtb	r3, r3
 800222c:	f043 0301 	orr.w	r3, r3, #1
 8002230:	b2db      	uxtb	r3, r3
 8002232:	2b01      	cmp	r3, #1
 8002234:	d102      	bne.n	800223c <HAL_RCC_ClockConfig+0x128>
 8002236:	4b4f      	ldr	r3, [pc, #316]	; (8002374 <HAL_RCC_ClockConfig+0x260>)
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	e00f      	b.n	800225c <HAL_RCC_ClockConfig+0x148>
 800223c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002240:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002242:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002244:	fa93 f3a3 	rbit	r3, r3
 8002248:	647b      	str	r3, [r7, #68]	; 0x44
 800224a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800224e:	643b      	str	r3, [r7, #64]	; 0x40
 8002250:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002252:	fa93 f3a3 	rbit	r3, r3
 8002256:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002258:	4b46      	ldr	r3, [pc, #280]	; (8002374 <HAL_RCC_ClockConfig+0x260>)
 800225a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800225c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002260:	63ba      	str	r2, [r7, #56]	; 0x38
 8002262:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002264:	fa92 f2a2 	rbit	r2, r2
 8002268:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 800226a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800226c:	fab2 f282 	clz	r2, r2
 8002270:	b2d2      	uxtb	r2, r2
 8002272:	f042 0220 	orr.w	r2, r2, #32
 8002276:	b2d2      	uxtb	r2, r2
 8002278:	f002 021f 	and.w	r2, r2, #31
 800227c:	2101      	movs	r1, #1
 800227e:	fa01 f202 	lsl.w	r2, r1, r2
 8002282:	4013      	ands	r3, r2
 8002284:	2b00      	cmp	r3, #0
 8002286:	d13a      	bne.n	80022fe <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002288:	2301      	movs	r3, #1
 800228a:	e0b2      	b.n	80023f2 <HAL_RCC_ClockConfig+0x2de>
 800228c:	2302      	movs	r3, #2
 800228e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002290:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002292:	fa93 f3a3 	rbit	r3, r3
 8002296:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002298:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800229a:	fab3 f383 	clz	r3, r3
 800229e:	b2db      	uxtb	r3, r3
 80022a0:	095b      	lsrs	r3, r3, #5
 80022a2:	b2db      	uxtb	r3, r3
 80022a4:	f043 0301 	orr.w	r3, r3, #1
 80022a8:	b2db      	uxtb	r3, r3
 80022aa:	2b01      	cmp	r3, #1
 80022ac:	d102      	bne.n	80022b4 <HAL_RCC_ClockConfig+0x1a0>
 80022ae:	4b31      	ldr	r3, [pc, #196]	; (8002374 <HAL_RCC_ClockConfig+0x260>)
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	e00d      	b.n	80022d0 <HAL_RCC_ClockConfig+0x1bc>
 80022b4:	2302      	movs	r3, #2
 80022b6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022ba:	fa93 f3a3 	rbit	r3, r3
 80022be:	627b      	str	r3, [r7, #36]	; 0x24
 80022c0:	2302      	movs	r3, #2
 80022c2:	623b      	str	r3, [r7, #32]
 80022c4:	6a3b      	ldr	r3, [r7, #32]
 80022c6:	fa93 f3a3 	rbit	r3, r3
 80022ca:	61fb      	str	r3, [r7, #28]
 80022cc:	4b29      	ldr	r3, [pc, #164]	; (8002374 <HAL_RCC_ClockConfig+0x260>)
 80022ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022d0:	2202      	movs	r2, #2
 80022d2:	61ba      	str	r2, [r7, #24]
 80022d4:	69ba      	ldr	r2, [r7, #24]
 80022d6:	fa92 f2a2 	rbit	r2, r2
 80022da:	617a      	str	r2, [r7, #20]
  return result;
 80022dc:	697a      	ldr	r2, [r7, #20]
 80022de:	fab2 f282 	clz	r2, r2
 80022e2:	b2d2      	uxtb	r2, r2
 80022e4:	f042 0220 	orr.w	r2, r2, #32
 80022e8:	b2d2      	uxtb	r2, r2
 80022ea:	f002 021f 	and.w	r2, r2, #31
 80022ee:	2101      	movs	r1, #1
 80022f0:	fa01 f202 	lsl.w	r2, r1, r2
 80022f4:	4013      	ands	r3, r2
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d101      	bne.n	80022fe <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80022fa:	2301      	movs	r3, #1
 80022fc:	e079      	b.n	80023f2 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80022fe:	4b1d      	ldr	r3, [pc, #116]	; (8002374 <HAL_RCC_ClockConfig+0x260>)
 8002300:	685b      	ldr	r3, [r3, #4]
 8002302:	f023 0203 	bic.w	r2, r3, #3
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	685b      	ldr	r3, [r3, #4]
 800230a:	491a      	ldr	r1, [pc, #104]	; (8002374 <HAL_RCC_ClockConfig+0x260>)
 800230c:	4313      	orrs	r3, r2
 800230e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002310:	f7fe fbda 	bl	8000ac8 <HAL_GetTick>
 8002314:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002316:	e00a      	b.n	800232e <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002318:	f7fe fbd6 	bl	8000ac8 <HAL_GetTick>
 800231c:	4602      	mov	r2, r0
 800231e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002320:	1ad3      	subs	r3, r2, r3
 8002322:	f241 3288 	movw	r2, #5000	; 0x1388
 8002326:	4293      	cmp	r3, r2
 8002328:	d901      	bls.n	800232e <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 800232a:	2303      	movs	r3, #3
 800232c:	e061      	b.n	80023f2 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800232e:	4b11      	ldr	r3, [pc, #68]	; (8002374 <HAL_RCC_ClockConfig+0x260>)
 8002330:	685b      	ldr	r3, [r3, #4]
 8002332:	f003 020c 	and.w	r2, r3, #12
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	685b      	ldr	r3, [r3, #4]
 800233a:	009b      	lsls	r3, r3, #2
 800233c:	429a      	cmp	r2, r3
 800233e:	d1eb      	bne.n	8002318 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002340:	4b0b      	ldr	r3, [pc, #44]	; (8002370 <HAL_RCC_ClockConfig+0x25c>)
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	f003 0307 	and.w	r3, r3, #7
 8002348:	683a      	ldr	r2, [r7, #0]
 800234a:	429a      	cmp	r2, r3
 800234c:	d214      	bcs.n	8002378 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800234e:	4b08      	ldr	r3, [pc, #32]	; (8002370 <HAL_RCC_ClockConfig+0x25c>)
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	f023 0207 	bic.w	r2, r3, #7
 8002356:	4906      	ldr	r1, [pc, #24]	; (8002370 <HAL_RCC_ClockConfig+0x25c>)
 8002358:	683b      	ldr	r3, [r7, #0]
 800235a:	4313      	orrs	r3, r2
 800235c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800235e:	4b04      	ldr	r3, [pc, #16]	; (8002370 <HAL_RCC_ClockConfig+0x25c>)
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	f003 0307 	and.w	r3, r3, #7
 8002366:	683a      	ldr	r2, [r7, #0]
 8002368:	429a      	cmp	r2, r3
 800236a:	d005      	beq.n	8002378 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 800236c:	2301      	movs	r3, #1
 800236e:	e040      	b.n	80023f2 <HAL_RCC_ClockConfig+0x2de>
 8002370:	40022000 	.word	0x40022000
 8002374:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	f003 0304 	and.w	r3, r3, #4
 8002380:	2b00      	cmp	r3, #0
 8002382:	d008      	beq.n	8002396 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002384:	4b1d      	ldr	r3, [pc, #116]	; (80023fc <HAL_RCC_ClockConfig+0x2e8>)
 8002386:	685b      	ldr	r3, [r3, #4]
 8002388:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	68db      	ldr	r3, [r3, #12]
 8002390:	491a      	ldr	r1, [pc, #104]	; (80023fc <HAL_RCC_ClockConfig+0x2e8>)
 8002392:	4313      	orrs	r3, r2
 8002394:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	f003 0308 	and.w	r3, r3, #8
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d009      	beq.n	80023b6 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80023a2:	4b16      	ldr	r3, [pc, #88]	; (80023fc <HAL_RCC_ClockConfig+0x2e8>)
 80023a4:	685b      	ldr	r3, [r3, #4]
 80023a6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	691b      	ldr	r3, [r3, #16]
 80023ae:	00db      	lsls	r3, r3, #3
 80023b0:	4912      	ldr	r1, [pc, #72]	; (80023fc <HAL_RCC_ClockConfig+0x2e8>)
 80023b2:	4313      	orrs	r3, r2
 80023b4:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80023b6:	f000 f829 	bl	800240c <HAL_RCC_GetSysClockFreq>
 80023ba:	4601      	mov	r1, r0
 80023bc:	4b0f      	ldr	r3, [pc, #60]	; (80023fc <HAL_RCC_ClockConfig+0x2e8>)
 80023be:	685b      	ldr	r3, [r3, #4]
 80023c0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80023c4:	22f0      	movs	r2, #240	; 0xf0
 80023c6:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023c8:	693a      	ldr	r2, [r7, #16]
 80023ca:	fa92 f2a2 	rbit	r2, r2
 80023ce:	60fa      	str	r2, [r7, #12]
  return result;
 80023d0:	68fa      	ldr	r2, [r7, #12]
 80023d2:	fab2 f282 	clz	r2, r2
 80023d6:	b2d2      	uxtb	r2, r2
 80023d8:	40d3      	lsrs	r3, r2
 80023da:	4a09      	ldr	r2, [pc, #36]	; (8002400 <HAL_RCC_ClockConfig+0x2ec>)
 80023dc:	5cd3      	ldrb	r3, [r2, r3]
 80023de:	fa21 f303 	lsr.w	r3, r1, r3
 80023e2:	4a08      	ldr	r2, [pc, #32]	; (8002404 <HAL_RCC_ClockConfig+0x2f0>)
 80023e4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 80023e6:	4b08      	ldr	r3, [pc, #32]	; (8002408 <HAL_RCC_ClockConfig+0x2f4>)
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	4618      	mov	r0, r3
 80023ec:	f7fe fb28 	bl	8000a40 <HAL_InitTick>
  
  return HAL_OK;
 80023f0:	2300      	movs	r3, #0
}
 80023f2:	4618      	mov	r0, r3
 80023f4:	3778      	adds	r7, #120	; 0x78
 80023f6:	46bd      	mov	sp, r7
 80023f8:	bd80      	pop	{r7, pc}
 80023fa:	bf00      	nop
 80023fc:	40021000 	.word	0x40021000
 8002400:	08008218 	.word	0x08008218
 8002404:	20000000 	.word	0x20000000
 8002408:	20000004 	.word	0x20000004

0800240c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800240c:	b480      	push	{r7}
 800240e:	b08b      	sub	sp, #44	; 0x2c
 8002410:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002412:	2300      	movs	r3, #0
 8002414:	61fb      	str	r3, [r7, #28]
 8002416:	2300      	movs	r3, #0
 8002418:	61bb      	str	r3, [r7, #24]
 800241a:	2300      	movs	r3, #0
 800241c:	627b      	str	r3, [r7, #36]	; 0x24
 800241e:	2300      	movs	r3, #0
 8002420:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002422:	2300      	movs	r3, #0
 8002424:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8002426:	4b2a      	ldr	r3, [pc, #168]	; (80024d0 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002428:	685b      	ldr	r3, [r3, #4]
 800242a:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800242c:	69fb      	ldr	r3, [r7, #28]
 800242e:	f003 030c 	and.w	r3, r3, #12
 8002432:	2b04      	cmp	r3, #4
 8002434:	d002      	beq.n	800243c <HAL_RCC_GetSysClockFreq+0x30>
 8002436:	2b08      	cmp	r3, #8
 8002438:	d003      	beq.n	8002442 <HAL_RCC_GetSysClockFreq+0x36>
 800243a:	e03f      	b.n	80024bc <HAL_RCC_GetSysClockFreq+0xb0>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800243c:	4b25      	ldr	r3, [pc, #148]	; (80024d4 <HAL_RCC_GetSysClockFreq+0xc8>)
 800243e:	623b      	str	r3, [r7, #32]
      break;
 8002440:	e03f      	b.n	80024c2 <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8002442:	69fb      	ldr	r3, [r7, #28]
 8002444:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8002448:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 800244c:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800244e:	68ba      	ldr	r2, [r7, #8]
 8002450:	fa92 f2a2 	rbit	r2, r2
 8002454:	607a      	str	r2, [r7, #4]
  return result;
 8002456:	687a      	ldr	r2, [r7, #4]
 8002458:	fab2 f282 	clz	r2, r2
 800245c:	b2d2      	uxtb	r2, r2
 800245e:	40d3      	lsrs	r3, r2
 8002460:	4a1d      	ldr	r2, [pc, #116]	; (80024d8 <HAL_RCC_GetSysClockFreq+0xcc>)
 8002462:	5cd3      	ldrb	r3, [r2, r3]
 8002464:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8002466:	4b1a      	ldr	r3, [pc, #104]	; (80024d0 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002468:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800246a:	f003 030f 	and.w	r3, r3, #15
 800246e:	220f      	movs	r2, #15
 8002470:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002472:	693a      	ldr	r2, [r7, #16]
 8002474:	fa92 f2a2 	rbit	r2, r2
 8002478:	60fa      	str	r2, [r7, #12]
  return result;
 800247a:	68fa      	ldr	r2, [r7, #12]
 800247c:	fab2 f282 	clz	r2, r2
 8002480:	b2d2      	uxtb	r2, r2
 8002482:	40d3      	lsrs	r3, r2
 8002484:	4a15      	ldr	r2, [pc, #84]	; (80024dc <HAL_RCC_GetSysClockFreq+0xd0>)
 8002486:	5cd3      	ldrb	r3, [r2, r3]
 8002488:	61bb      	str	r3, [r7, #24]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 800248a:	69fb      	ldr	r3, [r7, #28]
 800248c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002490:	2b00      	cmp	r3, #0
 8002492:	d008      	beq.n	80024a6 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002494:	4a0f      	ldr	r2, [pc, #60]	; (80024d4 <HAL_RCC_GetSysClockFreq+0xc8>)
 8002496:	69bb      	ldr	r3, [r7, #24]
 8002498:	fbb2 f2f3 	udiv	r2, r2, r3
 800249c:	697b      	ldr	r3, [r7, #20]
 800249e:	fb02 f303 	mul.w	r3, r2, r3
 80024a2:	627b      	str	r3, [r7, #36]	; 0x24
 80024a4:	e007      	b.n	80024b6 <HAL_RCC_GetSysClockFreq+0xaa>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80024a6:	4a0b      	ldr	r2, [pc, #44]	; (80024d4 <HAL_RCC_GetSysClockFreq+0xc8>)
 80024a8:	69bb      	ldr	r3, [r7, #24]
 80024aa:	fbb2 f2f3 	udiv	r2, r2, r3
 80024ae:	697b      	ldr	r3, [r7, #20]
 80024b0:	fb02 f303 	mul.w	r3, r2, r3
 80024b4:	627b      	str	r3, [r7, #36]	; 0x24
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 80024b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024b8:	623b      	str	r3, [r7, #32]
      break;
 80024ba:	e002      	b.n	80024c2 <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80024bc:	4b05      	ldr	r3, [pc, #20]	; (80024d4 <HAL_RCC_GetSysClockFreq+0xc8>)
 80024be:	623b      	str	r3, [r7, #32]
      break;
 80024c0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80024c2:	6a3b      	ldr	r3, [r7, #32]
}
 80024c4:	4618      	mov	r0, r3
 80024c6:	372c      	adds	r7, #44	; 0x2c
 80024c8:	46bd      	mov	sp, r7
 80024ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ce:	4770      	bx	lr
 80024d0:	40021000 	.word	0x40021000
 80024d4:	007a1200 	.word	0x007a1200
 80024d8:	08008230 	.word	0x08008230
 80024dc:	08008240 	.word	0x08008240

080024e0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80024e0:	b480      	push	{r7}
 80024e2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80024e4:	4b03      	ldr	r3, [pc, #12]	; (80024f4 <HAL_RCC_GetHCLKFreq+0x14>)
 80024e6:	681b      	ldr	r3, [r3, #0]
}
 80024e8:	4618      	mov	r0, r3
 80024ea:	46bd      	mov	sp, r7
 80024ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f0:	4770      	bx	lr
 80024f2:	bf00      	nop
 80024f4:	20000000 	.word	0x20000000

080024f8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80024f8:	b580      	push	{r7, lr}
 80024fa:	b082      	sub	sp, #8
 80024fc:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 80024fe:	f7ff ffef 	bl	80024e0 <HAL_RCC_GetHCLKFreq>
 8002502:	4601      	mov	r1, r0
 8002504:	4b0b      	ldr	r3, [pc, #44]	; (8002534 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8002506:	685b      	ldr	r3, [r3, #4]
 8002508:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800250c:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8002510:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002512:	687a      	ldr	r2, [r7, #4]
 8002514:	fa92 f2a2 	rbit	r2, r2
 8002518:	603a      	str	r2, [r7, #0]
  return result;
 800251a:	683a      	ldr	r2, [r7, #0]
 800251c:	fab2 f282 	clz	r2, r2
 8002520:	b2d2      	uxtb	r2, r2
 8002522:	40d3      	lsrs	r3, r2
 8002524:	4a04      	ldr	r2, [pc, #16]	; (8002538 <HAL_RCC_GetPCLK1Freq+0x40>)
 8002526:	5cd3      	ldrb	r3, [r2, r3]
 8002528:	fa21 f303 	lsr.w	r3, r1, r3
}    
 800252c:	4618      	mov	r0, r3
 800252e:	3708      	adds	r7, #8
 8002530:	46bd      	mov	sp, r7
 8002532:	bd80      	pop	{r7, pc}
 8002534:	40021000 	.word	0x40021000
 8002538:	08008228 	.word	0x08008228

0800253c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800253c:	b580      	push	{r7, lr}
 800253e:	b082      	sub	sp, #8
 8002540:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8002542:	f7ff ffcd 	bl	80024e0 <HAL_RCC_GetHCLKFreq>
 8002546:	4601      	mov	r1, r0
 8002548:	4b0b      	ldr	r3, [pc, #44]	; (8002578 <HAL_RCC_GetPCLK2Freq+0x3c>)
 800254a:	685b      	ldr	r3, [r3, #4]
 800254c:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8002550:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8002554:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002556:	687a      	ldr	r2, [r7, #4]
 8002558:	fa92 f2a2 	rbit	r2, r2
 800255c:	603a      	str	r2, [r7, #0]
  return result;
 800255e:	683a      	ldr	r2, [r7, #0]
 8002560:	fab2 f282 	clz	r2, r2
 8002564:	b2d2      	uxtb	r2, r2
 8002566:	40d3      	lsrs	r3, r2
 8002568:	4a04      	ldr	r2, [pc, #16]	; (800257c <HAL_RCC_GetPCLK2Freq+0x40>)
 800256a:	5cd3      	ldrb	r3, [r2, r3]
 800256c:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8002570:	4618      	mov	r0, r3
 8002572:	3708      	adds	r7, #8
 8002574:	46bd      	mov	sp, r7
 8002576:	bd80      	pop	{r7, pc}
 8002578:	40021000 	.word	0x40021000
 800257c:	08008228 	.word	0x08008228

08002580 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002580:	b580      	push	{r7, lr}
 8002582:	b092      	sub	sp, #72	; 0x48
 8002584:	af00      	add	r7, sp, #0
 8002586:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002588:	2300      	movs	r3, #0
 800258a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 800258c:	2300      	movs	r3, #0
 800258e:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8002590:	2300      	movs	r3, #0
 8002592:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800259e:	2b00      	cmp	r3, #0
 80025a0:	f000 80d4 	beq.w	800274c <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80025a4:	4b4e      	ldr	r3, [pc, #312]	; (80026e0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80025a6:	69db      	ldr	r3, [r3, #28]
 80025a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d10e      	bne.n	80025ce <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80025b0:	4b4b      	ldr	r3, [pc, #300]	; (80026e0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80025b2:	69db      	ldr	r3, [r3, #28]
 80025b4:	4a4a      	ldr	r2, [pc, #296]	; (80026e0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80025b6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80025ba:	61d3      	str	r3, [r2, #28]
 80025bc:	4b48      	ldr	r3, [pc, #288]	; (80026e0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80025be:	69db      	ldr	r3, [r3, #28]
 80025c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025c4:	60bb      	str	r3, [r7, #8]
 80025c6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80025c8:	2301      	movs	r3, #1
 80025ca:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025ce:	4b45      	ldr	r3, [pc, #276]	; (80026e4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d118      	bne.n	800260c <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80025da:	4b42      	ldr	r3, [pc, #264]	; (80026e4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	4a41      	ldr	r2, [pc, #260]	; (80026e4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80025e0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80025e4:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80025e6:	f7fe fa6f 	bl	8000ac8 <HAL_GetTick>
 80025ea:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025ec:	e008      	b.n	8002600 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80025ee:	f7fe fa6b 	bl	8000ac8 <HAL_GetTick>
 80025f2:	4602      	mov	r2, r0
 80025f4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80025f6:	1ad3      	subs	r3, r2, r3
 80025f8:	2b64      	cmp	r3, #100	; 0x64
 80025fa:	d901      	bls.n	8002600 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 80025fc:	2303      	movs	r3, #3
 80025fe:	e1d6      	b.n	80029ae <HAL_RCCEx_PeriphCLKConfig+0x42e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002600:	4b38      	ldr	r3, [pc, #224]	; (80026e4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002608:	2b00      	cmp	r3, #0
 800260a:	d0f0      	beq.n	80025ee <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800260c:	4b34      	ldr	r3, [pc, #208]	; (80026e0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800260e:	6a1b      	ldr	r3, [r3, #32]
 8002610:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002614:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002616:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002618:	2b00      	cmp	r3, #0
 800261a:	f000 8084 	beq.w	8002726 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	685b      	ldr	r3, [r3, #4]
 8002622:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002626:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002628:	429a      	cmp	r2, r3
 800262a:	d07c      	beq.n	8002726 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800262c:	4b2c      	ldr	r3, [pc, #176]	; (80026e0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800262e:	6a1b      	ldr	r3, [r3, #32]
 8002630:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002634:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002636:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800263a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800263c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800263e:	fa93 f3a3 	rbit	r3, r3
 8002642:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002644:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002646:	fab3 f383 	clz	r3, r3
 800264a:	b2db      	uxtb	r3, r3
 800264c:	461a      	mov	r2, r3
 800264e:	4b26      	ldr	r3, [pc, #152]	; (80026e8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002650:	4413      	add	r3, r2
 8002652:	009b      	lsls	r3, r3, #2
 8002654:	461a      	mov	r2, r3
 8002656:	2301      	movs	r3, #1
 8002658:	6013      	str	r3, [r2, #0]
 800265a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800265e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002660:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002662:	fa93 f3a3 	rbit	r3, r3
 8002666:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002668:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 800266a:	fab3 f383 	clz	r3, r3
 800266e:	b2db      	uxtb	r3, r3
 8002670:	461a      	mov	r2, r3
 8002672:	4b1d      	ldr	r3, [pc, #116]	; (80026e8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002674:	4413      	add	r3, r2
 8002676:	009b      	lsls	r3, r3, #2
 8002678:	461a      	mov	r2, r3
 800267a:	2300      	movs	r3, #0
 800267c:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800267e:	4a18      	ldr	r2, [pc, #96]	; (80026e0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002680:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002682:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002684:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002686:	f003 0301 	and.w	r3, r3, #1
 800268a:	2b00      	cmp	r3, #0
 800268c:	d04b      	beq.n	8002726 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800268e:	f7fe fa1b 	bl	8000ac8 <HAL_GetTick>
 8002692:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002694:	e00a      	b.n	80026ac <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002696:	f7fe fa17 	bl	8000ac8 <HAL_GetTick>
 800269a:	4602      	mov	r2, r0
 800269c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800269e:	1ad3      	subs	r3, r2, r3
 80026a0:	f241 3288 	movw	r2, #5000	; 0x1388
 80026a4:	4293      	cmp	r3, r2
 80026a6:	d901      	bls.n	80026ac <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 80026a8:	2303      	movs	r3, #3
 80026aa:	e180      	b.n	80029ae <HAL_RCCEx_PeriphCLKConfig+0x42e>
 80026ac:	2302      	movs	r3, #2
 80026ae:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026b2:	fa93 f3a3 	rbit	r3, r3
 80026b6:	627b      	str	r3, [r7, #36]	; 0x24
 80026b8:	2302      	movs	r3, #2
 80026ba:	623b      	str	r3, [r7, #32]
 80026bc:	6a3b      	ldr	r3, [r7, #32]
 80026be:	fa93 f3a3 	rbit	r3, r3
 80026c2:	61fb      	str	r3, [r7, #28]
  return result;
 80026c4:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80026c6:	fab3 f383 	clz	r3, r3
 80026ca:	b2db      	uxtb	r3, r3
 80026cc:	095b      	lsrs	r3, r3, #5
 80026ce:	b2db      	uxtb	r3, r3
 80026d0:	f043 0302 	orr.w	r3, r3, #2
 80026d4:	b2db      	uxtb	r3, r3
 80026d6:	2b02      	cmp	r3, #2
 80026d8:	d108      	bne.n	80026ec <HAL_RCCEx_PeriphCLKConfig+0x16c>
 80026da:	4b01      	ldr	r3, [pc, #4]	; (80026e0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80026dc:	6a1b      	ldr	r3, [r3, #32]
 80026de:	e00d      	b.n	80026fc <HAL_RCCEx_PeriphCLKConfig+0x17c>
 80026e0:	40021000 	.word	0x40021000
 80026e4:	40007000 	.word	0x40007000
 80026e8:	10908100 	.word	0x10908100
 80026ec:	2302      	movs	r3, #2
 80026ee:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026f0:	69bb      	ldr	r3, [r7, #24]
 80026f2:	fa93 f3a3 	rbit	r3, r3
 80026f6:	617b      	str	r3, [r7, #20]
 80026f8:	4b9a      	ldr	r3, [pc, #616]	; (8002964 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80026fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026fc:	2202      	movs	r2, #2
 80026fe:	613a      	str	r2, [r7, #16]
 8002700:	693a      	ldr	r2, [r7, #16]
 8002702:	fa92 f2a2 	rbit	r2, r2
 8002706:	60fa      	str	r2, [r7, #12]
  return result;
 8002708:	68fa      	ldr	r2, [r7, #12]
 800270a:	fab2 f282 	clz	r2, r2
 800270e:	b2d2      	uxtb	r2, r2
 8002710:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002714:	b2d2      	uxtb	r2, r2
 8002716:	f002 021f 	and.w	r2, r2, #31
 800271a:	2101      	movs	r1, #1
 800271c:	fa01 f202 	lsl.w	r2, r1, r2
 8002720:	4013      	ands	r3, r2
 8002722:	2b00      	cmp	r3, #0
 8002724:	d0b7      	beq.n	8002696 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8002726:	4b8f      	ldr	r3, [pc, #572]	; (8002964 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002728:	6a1b      	ldr	r3, [r3, #32]
 800272a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	685b      	ldr	r3, [r3, #4]
 8002732:	498c      	ldr	r1, [pc, #560]	; (8002964 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002734:	4313      	orrs	r3, r2
 8002736:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002738:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800273c:	2b01      	cmp	r3, #1
 800273e:	d105      	bne.n	800274c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002740:	4b88      	ldr	r3, [pc, #544]	; (8002964 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002742:	69db      	ldr	r3, [r3, #28]
 8002744:	4a87      	ldr	r2, [pc, #540]	; (8002964 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002746:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800274a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	f003 0301 	and.w	r3, r3, #1
 8002754:	2b00      	cmp	r3, #0
 8002756:	d008      	beq.n	800276a <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002758:	4b82      	ldr	r3, [pc, #520]	; (8002964 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800275a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800275c:	f023 0203 	bic.w	r2, r3, #3
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	689b      	ldr	r3, [r3, #8]
 8002764:	497f      	ldr	r1, [pc, #508]	; (8002964 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002766:	4313      	orrs	r3, r2
 8002768:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	f003 0302 	and.w	r3, r3, #2
 8002772:	2b00      	cmp	r3, #0
 8002774:	d008      	beq.n	8002788 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002776:	4b7b      	ldr	r3, [pc, #492]	; (8002964 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002778:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800277a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	68db      	ldr	r3, [r3, #12]
 8002782:	4978      	ldr	r1, [pc, #480]	; (8002964 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002784:	4313      	orrs	r3, r2
 8002786:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	f003 0304 	and.w	r3, r3, #4
 8002790:	2b00      	cmp	r3, #0
 8002792:	d008      	beq.n	80027a6 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002794:	4b73      	ldr	r3, [pc, #460]	; (8002964 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002796:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002798:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	691b      	ldr	r3, [r3, #16]
 80027a0:	4970      	ldr	r1, [pc, #448]	; (8002964 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80027a2:	4313      	orrs	r3, r2
 80027a4:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	f003 0320 	and.w	r3, r3, #32
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d008      	beq.n	80027c4 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80027b2:	4b6c      	ldr	r3, [pc, #432]	; (8002964 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80027b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027b6:	f023 0210 	bic.w	r2, r3, #16
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	69db      	ldr	r3, [r3, #28]
 80027be:	4969      	ldr	r1, [pc, #420]	; (8002964 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80027c0:	4313      	orrs	r3, r2
 80027c2:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d008      	beq.n	80027e2 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 80027d0:	4b64      	ldr	r3, [pc, #400]	; (8002964 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80027d2:	685b      	ldr	r3, [r3, #4]
 80027d4:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027dc:	4961      	ldr	r1, [pc, #388]	; (8002964 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80027de:	4313      	orrs	r3, r2
 80027e0:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d008      	beq.n	8002800 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80027ee:	4b5d      	ldr	r3, [pc, #372]	; (8002964 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80027f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027f2:	f023 0220 	bic.w	r2, r3, #32
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	6a1b      	ldr	r3, [r3, #32]
 80027fa:	495a      	ldr	r1, [pc, #360]	; (8002964 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80027fc:	4313      	orrs	r3, r2
 80027fe:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002808:	2b00      	cmp	r3, #0
 800280a:	d008      	beq.n	800281e <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800280c:	4b55      	ldr	r3, [pc, #340]	; (8002964 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800280e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002810:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002818:	4952      	ldr	r1, [pc, #328]	; (8002964 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800281a:	4313      	orrs	r3, r2
 800281c:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	f003 0308 	and.w	r3, r3, #8
 8002826:	2b00      	cmp	r3, #0
 8002828:	d008      	beq.n	800283c <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800282a:	4b4e      	ldr	r3, [pc, #312]	; (8002964 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800282c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800282e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	695b      	ldr	r3, [r3, #20]
 8002836:	494b      	ldr	r1, [pc, #300]	; (8002964 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002838:	4313      	orrs	r3, r2
 800283a:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	f003 0310 	and.w	r3, r3, #16
 8002844:	2b00      	cmp	r3, #0
 8002846:	d008      	beq.n	800285a <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002848:	4b46      	ldr	r3, [pc, #280]	; (8002964 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800284a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800284c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	699b      	ldr	r3, [r3, #24]
 8002854:	4943      	ldr	r1, [pc, #268]	; (8002964 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002856:	4313      	orrs	r3, r2
 8002858:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002862:	2b00      	cmp	r3, #0
 8002864:	d008      	beq.n	8002878 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002866:	4b3f      	ldr	r3, [pc, #252]	; (8002964 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002868:	685b      	ldr	r3, [r3, #4]
 800286a:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002872:	493c      	ldr	r1, [pc, #240]	; (8002964 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002874:	4313      	orrs	r3, r2
 8002876:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002880:	2b00      	cmp	r3, #0
 8002882:	d008      	beq.n	8002896 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002884:	4b37      	ldr	r3, [pc, #220]	; (8002964 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002886:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002888:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002890:	4934      	ldr	r1, [pc, #208]	; (8002964 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002892:	4313      	orrs	r3, r2
 8002894:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d008      	beq.n	80028b4 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 80028a2:	4b30      	ldr	r3, [pc, #192]	; (8002964 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80028a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028a6:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028ae:	492d      	ldr	r1, [pc, #180]	; (8002964 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80028b0:	4313      	orrs	r3, r2
 80028b2:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d008      	beq.n	80028d2 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80028c0:	4b28      	ldr	r3, [pc, #160]	; (8002964 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80028c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028c4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80028cc:	4925      	ldr	r1, [pc, #148]	; (8002964 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80028ce:	4313      	orrs	r3, r2
 80028d0:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d008      	beq.n	80028f0 <HAL_RCCEx_PeriphCLKConfig+0x370>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 80028de:	4b21      	ldr	r3, [pc, #132]	; (8002964 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80028e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028e2:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028ea:	491e      	ldr	r1, [pc, #120]	; (8002964 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80028ec:	4313      	orrs	r3, r2
 80028ee:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d008      	beq.n	800290e <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 80028fc:	4b19      	ldr	r3, [pc, #100]	; (8002964 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80028fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002900:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002908:	4916      	ldr	r1, [pc, #88]	; (8002964 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800290a:	4313      	orrs	r3, r2
 800290c:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002916:	2b00      	cmp	r3, #0
 8002918:	d008      	beq.n	800292c <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 800291a:	4b12      	ldr	r3, [pc, #72]	; (8002964 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800291c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800291e:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002926:	490f      	ldr	r1, [pc, #60]	; (8002964 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002928:	4313      	orrs	r3, r2
 800292a:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002934:	2b00      	cmp	r3, #0
 8002936:	d008      	beq.n	800294a <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8002938:	4b0a      	ldr	r3, [pc, #40]	; (8002964 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800293a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800293c:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002944:	4907      	ldr	r1, [pc, #28]	; (8002964 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002946:	4313      	orrs	r3, r2
 8002948:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002952:	2b00      	cmp	r3, #0
 8002954:	d00c      	beq.n	8002970 <HAL_RCCEx_PeriphCLKConfig+0x3f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 8002956:	4b03      	ldr	r3, [pc, #12]	; (8002964 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002958:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800295a:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	e002      	b.n	8002968 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 8002962:	bf00      	nop
 8002964:	40021000 	.word	0x40021000
 8002968:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800296a:	4913      	ldr	r1, [pc, #76]	; (80029b8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800296c:	4313      	orrs	r3, r2
 800296e:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002978:	2b00      	cmp	r3, #0
 800297a:	d008      	beq.n	800298e <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 800297c:	4b0e      	ldr	r3, [pc, #56]	; (80029b8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800297e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002980:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002988:	490b      	ldr	r1, [pc, #44]	; (80029b8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800298a:	4313      	orrs	r3, r2
 800298c:	630b      	str	r3, [r1, #48]	; 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002996:	2b00      	cmp	r3, #0
 8002998:	d008      	beq.n	80029ac <HAL_RCCEx_PeriphCLKConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 800299a:	4b07      	ldr	r3, [pc, #28]	; (80029b8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800299c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800299e:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80029a6:	4904      	ldr	r1, [pc, #16]	; (80029b8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80029a8:	4313      	orrs	r3, r2
 80029aa:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 80029ac:	2300      	movs	r3, #0
}
 80029ae:	4618      	mov	r0, r3
 80029b0:	3748      	adds	r7, #72	; 0x48
 80029b2:	46bd      	mov	sp, r7
 80029b4:	bd80      	pop	{r7, pc}
 80029b6:	bf00      	nop
 80029b8:	40021000 	.word	0x40021000

080029bc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80029bc:	b580      	push	{r7, lr}
 80029be:	b084      	sub	sp, #16
 80029c0:	af00      	add	r7, sp, #0
 80029c2:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d101      	bne.n	80029ce <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80029ca:	2301      	movs	r3, #1
 80029cc:	e09d      	b.n	8002b0a <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d108      	bne.n	80029e8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	685b      	ldr	r3, [r3, #4]
 80029da:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80029de:	d009      	beq.n	80029f4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	2200      	movs	r2, #0
 80029e4:	61da      	str	r2, [r3, #28]
 80029e6:	e005      	b.n	80029f4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	2200      	movs	r2, #0
 80029ec:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	2200      	movs	r2, #0
 80029f2:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	2200      	movs	r2, #0
 80029f8:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002a00:	b2db      	uxtb	r3, r3
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d106      	bne.n	8002a14 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	2200      	movs	r2, #0
 8002a0a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002a0e:	6878      	ldr	r0, [r7, #4]
 8002a10:	f7fd fe8a 	bl	8000728 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	2202      	movs	r2, #2
 8002a18:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	681a      	ldr	r2, [r3, #0]
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002a2a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	68db      	ldr	r3, [r3, #12]
 8002a30:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002a34:	d902      	bls.n	8002a3c <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8002a36:	2300      	movs	r3, #0
 8002a38:	60fb      	str	r3, [r7, #12]
 8002a3a:	e002      	b.n	8002a42 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8002a3c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002a40:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	68db      	ldr	r3, [r3, #12]
 8002a46:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8002a4a:	d007      	beq.n	8002a5c <HAL_SPI_Init+0xa0>
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	68db      	ldr	r3, [r3, #12]
 8002a50:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002a54:	d002      	beq.n	8002a5c <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	2200      	movs	r2, #0
 8002a5a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	685b      	ldr	r3, [r3, #4]
 8002a60:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	689b      	ldr	r3, [r3, #8]
 8002a68:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8002a6c:	431a      	orrs	r2, r3
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	691b      	ldr	r3, [r3, #16]
 8002a72:	f003 0302 	and.w	r3, r3, #2
 8002a76:	431a      	orrs	r2, r3
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	695b      	ldr	r3, [r3, #20]
 8002a7c:	f003 0301 	and.w	r3, r3, #1
 8002a80:	431a      	orrs	r2, r3
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	699b      	ldr	r3, [r3, #24]
 8002a86:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002a8a:	431a      	orrs	r2, r3
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	69db      	ldr	r3, [r3, #28]
 8002a90:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002a94:	431a      	orrs	r2, r3
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	6a1b      	ldr	r3, [r3, #32]
 8002a9a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a9e:	ea42 0103 	orr.w	r1, r2, r3
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002aa6:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	430a      	orrs	r2, r1
 8002ab0:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	699b      	ldr	r3, [r3, #24]
 8002ab6:	0c1b      	lsrs	r3, r3, #16
 8002ab8:	f003 0204 	and.w	r2, r3, #4
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ac0:	f003 0310 	and.w	r3, r3, #16
 8002ac4:	431a      	orrs	r2, r3
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002aca:	f003 0308 	and.w	r3, r3, #8
 8002ace:	431a      	orrs	r2, r3
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	68db      	ldr	r3, [r3, #12]
 8002ad4:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8002ad8:	ea42 0103 	orr.w	r1, r2, r3
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	430a      	orrs	r2, r1
 8002ae8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	69da      	ldr	r2, [r3, #28]
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002af8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	2200      	movs	r2, #0
 8002afe:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	2201      	movs	r2, #1
 8002b04:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8002b08:	2300      	movs	r3, #0
}
 8002b0a:	4618      	mov	r0, r3
 8002b0c:	3710      	adds	r7, #16
 8002b0e:	46bd      	mov	sp, r7
 8002b10:	bd80      	pop	{r7, pc}

08002b12 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002b12:	b580      	push	{r7, lr}
 8002b14:	b088      	sub	sp, #32
 8002b16:	af00      	add	r7, sp, #0
 8002b18:	60f8      	str	r0, [r7, #12]
 8002b1a:	60b9      	str	r1, [r7, #8]
 8002b1c:	603b      	str	r3, [r7, #0]
 8002b1e:	4613      	mov	r3, r2
 8002b20:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002b22:	2300      	movs	r3, #0
 8002b24:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8002b2c:	2b01      	cmp	r3, #1
 8002b2e:	d101      	bne.n	8002b34 <HAL_SPI_Transmit+0x22>
 8002b30:	2302      	movs	r3, #2
 8002b32:	e15f      	b.n	8002df4 <HAL_SPI_Transmit+0x2e2>
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	2201      	movs	r2, #1
 8002b38:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002b3c:	f7fd ffc4 	bl	8000ac8 <HAL_GetTick>
 8002b40:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8002b42:	88fb      	ldrh	r3, [r7, #6]
 8002b44:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002b4c:	b2db      	uxtb	r3, r3
 8002b4e:	2b01      	cmp	r3, #1
 8002b50:	d002      	beq.n	8002b58 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8002b52:	2302      	movs	r3, #2
 8002b54:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002b56:	e148      	b.n	8002dea <HAL_SPI_Transmit+0x2d8>
  }

  if ((pData == NULL) || (Size == 0U))
 8002b58:	68bb      	ldr	r3, [r7, #8]
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d002      	beq.n	8002b64 <HAL_SPI_Transmit+0x52>
 8002b5e:	88fb      	ldrh	r3, [r7, #6]
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d102      	bne.n	8002b6a <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8002b64:	2301      	movs	r3, #1
 8002b66:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002b68:	e13f      	b.n	8002dea <HAL_SPI_Transmit+0x2d8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	2203      	movs	r2, #3
 8002b6e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	2200      	movs	r2, #0
 8002b76:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	68ba      	ldr	r2, [r7, #8]
 8002b7c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	88fa      	ldrh	r2, [r7, #6]
 8002b82:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	88fa      	ldrh	r2, [r7, #6]
 8002b88:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	2200      	movs	r2, #0
 8002b8e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	2200      	movs	r2, #0
 8002b94:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	2200      	movs	r2, #0
 8002b9c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	2200      	movs	r2, #0
 8002ba4:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	2200      	movs	r2, #0
 8002baa:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	689b      	ldr	r3, [r3, #8]
 8002bb0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002bb4:	d10f      	bne.n	8002bd6 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	681a      	ldr	r2, [r3, #0]
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002bc4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	681a      	ldr	r2, [r3, #0]
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002bd4:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002be0:	2b40      	cmp	r3, #64	; 0x40
 8002be2:	d007      	beq.n	8002bf4 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	681a      	ldr	r2, [r3, #0]
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002bf2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	68db      	ldr	r3, [r3, #12]
 8002bf8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002bfc:	d94f      	bls.n	8002c9e <HAL_SPI_Transmit+0x18c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	685b      	ldr	r3, [r3, #4]
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d002      	beq.n	8002c0c <HAL_SPI_Transmit+0xfa>
 8002c06:	8afb      	ldrh	r3, [r7, #22]
 8002c08:	2b01      	cmp	r3, #1
 8002c0a:	d142      	bne.n	8002c92 <HAL_SPI_Transmit+0x180>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c10:	881a      	ldrh	r2, [r3, #0]
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c1c:	1c9a      	adds	r2, r3, #2
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002c26:	b29b      	uxth	r3, r3
 8002c28:	3b01      	subs	r3, #1
 8002c2a:	b29a      	uxth	r2, r3
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002c30:	e02f      	b.n	8002c92 <HAL_SPI_Transmit+0x180>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	689b      	ldr	r3, [r3, #8]
 8002c38:	f003 0302 	and.w	r3, r3, #2
 8002c3c:	2b02      	cmp	r3, #2
 8002c3e:	d112      	bne.n	8002c66 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c44:	881a      	ldrh	r2, [r3, #0]
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c50:	1c9a      	adds	r2, r3, #2
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002c5a:	b29b      	uxth	r3, r3
 8002c5c:	3b01      	subs	r3, #1
 8002c5e:	b29a      	uxth	r2, r3
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002c64:	e015      	b.n	8002c92 <HAL_SPI_Transmit+0x180>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002c66:	f7fd ff2f 	bl	8000ac8 <HAL_GetTick>
 8002c6a:	4602      	mov	r2, r0
 8002c6c:	69bb      	ldr	r3, [r7, #24]
 8002c6e:	1ad3      	subs	r3, r2, r3
 8002c70:	683a      	ldr	r2, [r7, #0]
 8002c72:	429a      	cmp	r2, r3
 8002c74:	d803      	bhi.n	8002c7e <HAL_SPI_Transmit+0x16c>
 8002c76:	683b      	ldr	r3, [r7, #0]
 8002c78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c7c:	d102      	bne.n	8002c84 <HAL_SPI_Transmit+0x172>
 8002c7e:	683b      	ldr	r3, [r7, #0]
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d106      	bne.n	8002c92 <HAL_SPI_Transmit+0x180>
        {
          errorcode = HAL_TIMEOUT;
 8002c84:	2303      	movs	r3, #3
 8002c86:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	2201      	movs	r2, #1
 8002c8c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 8002c90:	e0ab      	b.n	8002dea <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002c96:	b29b      	uxth	r3, r3
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d1ca      	bne.n	8002c32 <HAL_SPI_Transmit+0x120>
 8002c9c:	e080      	b.n	8002da0 <HAL_SPI_Transmit+0x28e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	685b      	ldr	r3, [r3, #4]
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d002      	beq.n	8002cac <HAL_SPI_Transmit+0x19a>
 8002ca6:	8afb      	ldrh	r3, [r7, #22]
 8002ca8:	2b01      	cmp	r3, #1
 8002caa:	d174      	bne.n	8002d96 <HAL_SPI_Transmit+0x284>
    {
      if (hspi->TxXferCount > 1U)
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002cb0:	b29b      	uxth	r3, r3
 8002cb2:	2b01      	cmp	r3, #1
 8002cb4:	d912      	bls.n	8002cdc <HAL_SPI_Transmit+0x1ca>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cba:	881a      	ldrh	r2, [r3, #0]
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cc6:	1c9a      	adds	r2, r3, #2
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002cd0:	b29b      	uxth	r3, r3
 8002cd2:	3b02      	subs	r3, #2
 8002cd4:	b29a      	uxth	r2, r3
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002cda:	e05c      	b.n	8002d96 <HAL_SPI_Transmit+0x284>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	330c      	adds	r3, #12
 8002ce6:	7812      	ldrb	r2, [r2, #0]
 8002ce8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cee:	1c5a      	adds	r2, r3, #1
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002cf8:	b29b      	uxth	r3, r3
 8002cfa:	3b01      	subs	r3, #1
 8002cfc:	b29a      	uxth	r2, r3
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8002d02:	e048      	b.n	8002d96 <HAL_SPI_Transmit+0x284>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	689b      	ldr	r3, [r3, #8]
 8002d0a:	f003 0302 	and.w	r3, r3, #2
 8002d0e:	2b02      	cmp	r3, #2
 8002d10:	d12b      	bne.n	8002d6a <HAL_SPI_Transmit+0x258>
      {
        if (hspi->TxXferCount > 1U)
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002d16:	b29b      	uxth	r3, r3
 8002d18:	2b01      	cmp	r3, #1
 8002d1a:	d912      	bls.n	8002d42 <HAL_SPI_Transmit+0x230>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d20:	881a      	ldrh	r2, [r3, #0]
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d2c:	1c9a      	adds	r2, r3, #2
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002d36:	b29b      	uxth	r3, r3
 8002d38:	3b02      	subs	r3, #2
 8002d3a:	b29a      	uxth	r2, r3
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002d40:	e029      	b.n	8002d96 <HAL_SPI_Transmit+0x284>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	330c      	adds	r3, #12
 8002d4c:	7812      	ldrb	r2, [r2, #0]
 8002d4e:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d54:	1c5a      	adds	r2, r3, #1
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002d5e:	b29b      	uxth	r3, r3
 8002d60:	3b01      	subs	r3, #1
 8002d62:	b29a      	uxth	r2, r3
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002d68:	e015      	b.n	8002d96 <HAL_SPI_Transmit+0x284>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002d6a:	f7fd fead 	bl	8000ac8 <HAL_GetTick>
 8002d6e:	4602      	mov	r2, r0
 8002d70:	69bb      	ldr	r3, [r7, #24]
 8002d72:	1ad3      	subs	r3, r2, r3
 8002d74:	683a      	ldr	r2, [r7, #0]
 8002d76:	429a      	cmp	r2, r3
 8002d78:	d803      	bhi.n	8002d82 <HAL_SPI_Transmit+0x270>
 8002d7a:	683b      	ldr	r3, [r7, #0]
 8002d7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d80:	d102      	bne.n	8002d88 <HAL_SPI_Transmit+0x276>
 8002d82:	683b      	ldr	r3, [r7, #0]
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d106      	bne.n	8002d96 <HAL_SPI_Transmit+0x284>
        {
          errorcode = HAL_TIMEOUT;
 8002d88:	2303      	movs	r3, #3
 8002d8a:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	2201      	movs	r2, #1
 8002d90:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 8002d94:	e029      	b.n	8002dea <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002d9a:	b29b      	uxth	r3, r3
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d1b1      	bne.n	8002d04 <HAL_SPI_Transmit+0x1f2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002da0:	69ba      	ldr	r2, [r7, #24]
 8002da2:	6839      	ldr	r1, [r7, #0]
 8002da4:	68f8      	ldr	r0, [r7, #12]
 8002da6:	f000 fb69 	bl	800347c <SPI_EndRxTxTransaction>
 8002daa:	4603      	mov	r3, r0
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d002      	beq.n	8002db6 <HAL_SPI_Transmit+0x2a4>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	2220      	movs	r2, #32
 8002db4:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	689b      	ldr	r3, [r3, #8]
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d10a      	bne.n	8002dd4 <HAL_SPI_Transmit+0x2c2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002dbe:	2300      	movs	r3, #0
 8002dc0:	613b      	str	r3, [r7, #16]
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	68db      	ldr	r3, [r3, #12]
 8002dc8:	613b      	str	r3, [r7, #16]
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	689b      	ldr	r3, [r3, #8]
 8002dd0:	613b      	str	r3, [r7, #16]
 8002dd2:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d002      	beq.n	8002de2 <HAL_SPI_Transmit+0x2d0>
  {
    errorcode = HAL_ERROR;
 8002ddc:	2301      	movs	r3, #1
 8002dde:	77fb      	strb	r3, [r7, #31]
 8002de0:	e003      	b.n	8002dea <HAL_SPI_Transmit+0x2d8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	2201      	movs	r2, #1
 8002de6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	2200      	movs	r2, #0
 8002dee:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8002df2:	7ffb      	ldrb	r3, [r7, #31]
}
 8002df4:	4618      	mov	r0, r3
 8002df6:	3720      	adds	r7, #32
 8002df8:	46bd      	mov	sp, r7
 8002dfa:	bd80      	pop	{r7, pc}

08002dfc <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8002dfc:	b580      	push	{r7, lr}
 8002dfe:	b08a      	sub	sp, #40	; 0x28
 8002e00:	af00      	add	r7, sp, #0
 8002e02:	60f8      	str	r0, [r7, #12]
 8002e04:	60b9      	str	r1, [r7, #8]
 8002e06:	607a      	str	r2, [r7, #4]
 8002e08:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8002e0a:	2301      	movs	r3, #1
 8002e0c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8002e0e:	2300      	movs	r3, #0
 8002e10:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8002e1a:	2b01      	cmp	r3, #1
 8002e1c:	d101      	bne.n	8002e22 <HAL_SPI_TransmitReceive+0x26>
 8002e1e:	2302      	movs	r3, #2
 8002e20:	e20a      	b.n	8003238 <HAL_SPI_TransmitReceive+0x43c>
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	2201      	movs	r2, #1
 8002e26:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002e2a:	f7fd fe4d 	bl	8000ac8 <HAL_GetTick>
 8002e2e:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002e36:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	685b      	ldr	r3, [r3, #4]
 8002e3c:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8002e3e:	887b      	ldrh	r3, [r7, #2]
 8002e40:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8002e42:	887b      	ldrh	r3, [r7, #2]
 8002e44:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002e46:	7efb      	ldrb	r3, [r7, #27]
 8002e48:	2b01      	cmp	r3, #1
 8002e4a:	d00e      	beq.n	8002e6a <HAL_SPI_TransmitReceive+0x6e>
 8002e4c:	697b      	ldr	r3, [r7, #20]
 8002e4e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002e52:	d106      	bne.n	8002e62 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	689b      	ldr	r3, [r3, #8]
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d102      	bne.n	8002e62 <HAL_SPI_TransmitReceive+0x66>
 8002e5c:	7efb      	ldrb	r3, [r7, #27]
 8002e5e:	2b04      	cmp	r3, #4
 8002e60:	d003      	beq.n	8002e6a <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8002e62:	2302      	movs	r3, #2
 8002e64:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8002e68:	e1e0      	b.n	800322c <HAL_SPI_TransmitReceive+0x430>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002e6a:	68bb      	ldr	r3, [r7, #8]
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d005      	beq.n	8002e7c <HAL_SPI_TransmitReceive+0x80>
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d002      	beq.n	8002e7c <HAL_SPI_TransmitReceive+0x80>
 8002e76:	887b      	ldrh	r3, [r7, #2]
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d103      	bne.n	8002e84 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8002e7c:	2301      	movs	r3, #1
 8002e7e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8002e82:	e1d3      	b.n	800322c <HAL_SPI_TransmitReceive+0x430>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002e8a:	b2db      	uxtb	r3, r3
 8002e8c:	2b04      	cmp	r3, #4
 8002e8e:	d003      	beq.n	8002e98 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	2205      	movs	r2, #5
 8002e94:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	2200      	movs	r2, #0
 8002e9c:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	687a      	ldr	r2, [r7, #4]
 8002ea2:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	887a      	ldrh	r2, [r7, #2]
 8002ea8:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	887a      	ldrh	r2, [r7, #2]
 8002eb0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	68ba      	ldr	r2, [r7, #8]
 8002eb8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	887a      	ldrh	r2, [r7, #2]
 8002ebe:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	887a      	ldrh	r2, [r7, #2]
 8002ec4:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	2200      	movs	r2, #0
 8002eca:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	2200      	movs	r2, #0
 8002ed0:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	68db      	ldr	r3, [r3, #12]
 8002ed6:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002eda:	d802      	bhi.n	8002ee2 <HAL_SPI_TransmitReceive+0xe6>
 8002edc:	8a3b      	ldrh	r3, [r7, #16]
 8002ede:	2b01      	cmp	r3, #1
 8002ee0:	d908      	bls.n	8002ef4 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	685a      	ldr	r2, [r3, #4]
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002ef0:	605a      	str	r2, [r3, #4]
 8002ef2:	e007      	b.n	8002f04 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	685a      	ldr	r2, [r3, #4]
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002f02:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f0e:	2b40      	cmp	r3, #64	; 0x40
 8002f10:	d007      	beq.n	8002f22 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	681a      	ldr	r2, [r3, #0]
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002f20:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	68db      	ldr	r3, [r3, #12]
 8002f26:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002f2a:	f240 8081 	bls.w	8003030 <HAL_SPI_TransmitReceive+0x234>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	685b      	ldr	r3, [r3, #4]
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d002      	beq.n	8002f3c <HAL_SPI_TransmitReceive+0x140>
 8002f36:	8a7b      	ldrh	r3, [r7, #18]
 8002f38:	2b01      	cmp	r3, #1
 8002f3a:	d16d      	bne.n	8003018 <HAL_SPI_TransmitReceive+0x21c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f40:	881a      	ldrh	r2, [r3, #0]
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f4c:	1c9a      	adds	r2, r3, #2
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002f56:	b29b      	uxth	r3, r3
 8002f58:	3b01      	subs	r3, #1
 8002f5a:	b29a      	uxth	r2, r3
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002f60:	e05a      	b.n	8003018 <HAL_SPI_TransmitReceive+0x21c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	689b      	ldr	r3, [r3, #8]
 8002f68:	f003 0302 	and.w	r3, r3, #2
 8002f6c:	2b02      	cmp	r3, #2
 8002f6e:	d11b      	bne.n	8002fa8 <HAL_SPI_TransmitReceive+0x1ac>
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002f74:	b29b      	uxth	r3, r3
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d016      	beq.n	8002fa8 <HAL_SPI_TransmitReceive+0x1ac>
 8002f7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f7c:	2b01      	cmp	r3, #1
 8002f7e:	d113      	bne.n	8002fa8 <HAL_SPI_TransmitReceive+0x1ac>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f84:	881a      	ldrh	r2, [r3, #0]
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f90:	1c9a      	adds	r2, r3, #2
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002f9a:	b29b      	uxth	r3, r3
 8002f9c:	3b01      	subs	r3, #1
 8002f9e:	b29a      	uxth	r2, r3
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002fa4:	2300      	movs	r3, #0
 8002fa6:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	689b      	ldr	r3, [r3, #8]
 8002fae:	f003 0301 	and.w	r3, r3, #1
 8002fb2:	2b01      	cmp	r3, #1
 8002fb4:	d11c      	bne.n	8002ff0 <HAL_SPI_TransmitReceive+0x1f4>
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002fbc:	b29b      	uxth	r3, r3
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d016      	beq.n	8002ff0 <HAL_SPI_TransmitReceive+0x1f4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	68da      	ldr	r2, [r3, #12]
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fcc:	b292      	uxth	r2, r2
 8002fce:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fd4:	1c9a      	adds	r2, r3, #2
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002fe0:	b29b      	uxth	r3, r3
 8002fe2:	3b01      	subs	r3, #1
 8002fe4:	b29a      	uxth	r2, r3
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002fec:	2301      	movs	r3, #1
 8002fee:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8002ff0:	f7fd fd6a 	bl	8000ac8 <HAL_GetTick>
 8002ff4:	4602      	mov	r2, r0
 8002ff6:	69fb      	ldr	r3, [r7, #28]
 8002ff8:	1ad3      	subs	r3, r2, r3
 8002ffa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002ffc:	429a      	cmp	r2, r3
 8002ffe:	d80b      	bhi.n	8003018 <HAL_SPI_TransmitReceive+0x21c>
 8003000:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003002:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003006:	d007      	beq.n	8003018 <HAL_SPI_TransmitReceive+0x21c>
      {
        errorcode = HAL_TIMEOUT;
 8003008:	2303      	movs	r3, #3
 800300a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        hspi->State = HAL_SPI_STATE_READY;
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	2201      	movs	r2, #1
 8003012:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        goto error;
 8003016:	e109      	b.n	800322c <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800301c:	b29b      	uxth	r3, r3
 800301e:	2b00      	cmp	r3, #0
 8003020:	d19f      	bne.n	8002f62 <HAL_SPI_TransmitReceive+0x166>
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003028:	b29b      	uxth	r3, r3
 800302a:	2b00      	cmp	r3, #0
 800302c:	d199      	bne.n	8002f62 <HAL_SPI_TransmitReceive+0x166>
 800302e:	e0e3      	b.n	80031f8 <HAL_SPI_TransmitReceive+0x3fc>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	685b      	ldr	r3, [r3, #4]
 8003034:	2b00      	cmp	r3, #0
 8003036:	d003      	beq.n	8003040 <HAL_SPI_TransmitReceive+0x244>
 8003038:	8a7b      	ldrh	r3, [r7, #18]
 800303a:	2b01      	cmp	r3, #1
 800303c:	f040 80cf 	bne.w	80031de <HAL_SPI_TransmitReceive+0x3e2>
    {
      if (hspi->TxXferCount > 1U)
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003044:	b29b      	uxth	r3, r3
 8003046:	2b01      	cmp	r3, #1
 8003048:	d912      	bls.n	8003070 <HAL_SPI_TransmitReceive+0x274>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800304e:	881a      	ldrh	r2, [r3, #0]
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800305a:	1c9a      	adds	r2, r3, #2
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003064:	b29b      	uxth	r3, r3
 8003066:	3b02      	subs	r3, #2
 8003068:	b29a      	uxth	r2, r3
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	87da      	strh	r2, [r3, #62]	; 0x3e
 800306e:	e0b6      	b.n	80031de <HAL_SPI_TransmitReceive+0x3e2>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	330c      	adds	r3, #12
 800307a:	7812      	ldrb	r2, [r2, #0]
 800307c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003082:	1c5a      	adds	r2, r3, #1
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800308c:	b29b      	uxth	r3, r3
 800308e:	3b01      	subs	r3, #1
 8003090:	b29a      	uxth	r2, r3
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003096:	e0a2      	b.n	80031de <HAL_SPI_TransmitReceive+0x3e2>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	689b      	ldr	r3, [r3, #8]
 800309e:	f003 0302 	and.w	r3, r3, #2
 80030a2:	2b02      	cmp	r3, #2
 80030a4:	d134      	bne.n	8003110 <HAL_SPI_TransmitReceive+0x314>
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80030aa:	b29b      	uxth	r3, r3
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d02f      	beq.n	8003110 <HAL_SPI_TransmitReceive+0x314>
 80030b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030b2:	2b01      	cmp	r3, #1
 80030b4:	d12c      	bne.n	8003110 <HAL_SPI_TransmitReceive+0x314>
      {
        if (hspi->TxXferCount > 1U)
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80030ba:	b29b      	uxth	r3, r3
 80030bc:	2b01      	cmp	r3, #1
 80030be:	d912      	bls.n	80030e6 <HAL_SPI_TransmitReceive+0x2ea>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030c4:	881a      	ldrh	r2, [r3, #0]
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030d0:	1c9a      	adds	r2, r3, #2
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80030da:	b29b      	uxth	r3, r3
 80030dc:	3b02      	subs	r3, #2
 80030de:	b29a      	uxth	r2, r3
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	87da      	strh	r2, [r3, #62]	; 0x3e
 80030e4:	e012      	b.n	800310c <HAL_SPI_TransmitReceive+0x310>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	330c      	adds	r3, #12
 80030f0:	7812      	ldrb	r2, [r2, #0]
 80030f2:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030f8:	1c5a      	adds	r2, r3, #1
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003102:	b29b      	uxth	r3, r3
 8003104:	3b01      	subs	r3, #1
 8003106:	b29a      	uxth	r2, r3
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800310c:	2300      	movs	r3, #0
 800310e:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	689b      	ldr	r3, [r3, #8]
 8003116:	f003 0301 	and.w	r3, r3, #1
 800311a:	2b01      	cmp	r3, #1
 800311c:	d148      	bne.n	80031b0 <HAL_SPI_TransmitReceive+0x3b4>
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003124:	b29b      	uxth	r3, r3
 8003126:	2b00      	cmp	r3, #0
 8003128:	d042      	beq.n	80031b0 <HAL_SPI_TransmitReceive+0x3b4>
      {
        if (hspi->RxXferCount > 1U)
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003130:	b29b      	uxth	r3, r3
 8003132:	2b01      	cmp	r3, #1
 8003134:	d923      	bls.n	800317e <HAL_SPI_TransmitReceive+0x382>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	68da      	ldr	r2, [r3, #12]
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003140:	b292      	uxth	r2, r2
 8003142:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003148:	1c9a      	adds	r2, r3, #2
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003154:	b29b      	uxth	r3, r3
 8003156:	3b02      	subs	r3, #2
 8003158:	b29a      	uxth	r2, r3
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003166:	b29b      	uxth	r3, r3
 8003168:	2b01      	cmp	r3, #1
 800316a:	d81f      	bhi.n	80031ac <HAL_SPI_TransmitReceive+0x3b0>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	685a      	ldr	r2, [r3, #4]
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800317a:	605a      	str	r2, [r3, #4]
 800317c:	e016      	b.n	80031ac <HAL_SPI_TransmitReceive+0x3b0>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	f103 020c 	add.w	r2, r3, #12
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800318a:	7812      	ldrb	r2, [r2, #0]
 800318c:	b2d2      	uxtb	r2, r2
 800318e:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003194:	1c5a      	adds	r2, r3, #1
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80031a0:	b29b      	uxth	r3, r3
 80031a2:	3b01      	subs	r3, #1
 80031a4:	b29a      	uxth	r2, r3
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80031ac:	2301      	movs	r3, #1
 80031ae:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80031b0:	f7fd fc8a 	bl	8000ac8 <HAL_GetTick>
 80031b4:	4602      	mov	r2, r0
 80031b6:	69fb      	ldr	r3, [r7, #28]
 80031b8:	1ad3      	subs	r3, r2, r3
 80031ba:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80031bc:	429a      	cmp	r2, r3
 80031be:	d803      	bhi.n	80031c8 <HAL_SPI_TransmitReceive+0x3cc>
 80031c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031c6:	d102      	bne.n	80031ce <HAL_SPI_TransmitReceive+0x3d2>
 80031c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d107      	bne.n	80031de <HAL_SPI_TransmitReceive+0x3e2>
      {
        errorcode = HAL_TIMEOUT;
 80031ce:	2303      	movs	r3, #3
 80031d0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        hspi->State = HAL_SPI_STATE_READY;
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	2201      	movs	r2, #1
 80031d8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        goto error;
 80031dc:	e026      	b.n	800322c <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80031e2:	b29b      	uxth	r3, r3
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	f47f af57 	bne.w	8003098 <HAL_SPI_TransmitReceive+0x29c>
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80031f0:	b29b      	uxth	r3, r3
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	f47f af50 	bne.w	8003098 <HAL_SPI_TransmitReceive+0x29c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80031f8:	69fa      	ldr	r2, [r7, #28]
 80031fa:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80031fc:	68f8      	ldr	r0, [r7, #12]
 80031fe:	f000 f93d 	bl	800347c <SPI_EndRxTxTransaction>
 8003202:	4603      	mov	r3, r0
 8003204:	2b00      	cmp	r3, #0
 8003206:	d005      	beq.n	8003214 <HAL_SPI_TransmitReceive+0x418>
  {
    errorcode = HAL_ERROR;
 8003208:	2301      	movs	r3, #1
 800320a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	2220      	movs	r2, #32
 8003212:	661a      	str	r2, [r3, #96]	; 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003218:	2b00      	cmp	r3, #0
 800321a:	d003      	beq.n	8003224 <HAL_SPI_TransmitReceive+0x428>
  {
    errorcode = HAL_ERROR;
 800321c:	2301      	movs	r3, #1
 800321e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003222:	e003      	b.n	800322c <HAL_SPI_TransmitReceive+0x430>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	2201      	movs	r2, #1
 8003228:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }
  
error :
  __HAL_UNLOCK(hspi);
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	2200      	movs	r2, #0
 8003230:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8003234:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8003238:	4618      	mov	r0, r3
 800323a:	3728      	adds	r7, #40	; 0x28
 800323c:	46bd      	mov	sp, r7
 800323e:	bd80      	pop	{r7, pc}

08003240 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003240:	b580      	push	{r7, lr}
 8003242:	b088      	sub	sp, #32
 8003244:	af00      	add	r7, sp, #0
 8003246:	60f8      	str	r0, [r7, #12]
 8003248:	60b9      	str	r1, [r7, #8]
 800324a:	603b      	str	r3, [r7, #0]
 800324c:	4613      	mov	r3, r2
 800324e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003250:	f7fd fc3a 	bl	8000ac8 <HAL_GetTick>
 8003254:	4602      	mov	r2, r0
 8003256:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003258:	1a9b      	subs	r3, r3, r2
 800325a:	683a      	ldr	r2, [r7, #0]
 800325c:	4413      	add	r3, r2
 800325e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003260:	f7fd fc32 	bl	8000ac8 <HAL_GetTick>
 8003264:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003266:	4b39      	ldr	r3, [pc, #228]	; (800334c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	015b      	lsls	r3, r3, #5
 800326c:	0d1b      	lsrs	r3, r3, #20
 800326e:	69fa      	ldr	r2, [r7, #28]
 8003270:	fb02 f303 	mul.w	r3, r2, r3
 8003274:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003276:	e054      	b.n	8003322 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003278:	683b      	ldr	r3, [r7, #0]
 800327a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800327e:	d050      	beq.n	8003322 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003280:	f7fd fc22 	bl	8000ac8 <HAL_GetTick>
 8003284:	4602      	mov	r2, r0
 8003286:	69bb      	ldr	r3, [r7, #24]
 8003288:	1ad3      	subs	r3, r2, r3
 800328a:	69fa      	ldr	r2, [r7, #28]
 800328c:	429a      	cmp	r2, r3
 800328e:	d902      	bls.n	8003296 <SPI_WaitFlagStateUntilTimeout+0x56>
 8003290:	69fb      	ldr	r3, [r7, #28]
 8003292:	2b00      	cmp	r3, #0
 8003294:	d13d      	bne.n	8003312 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	685a      	ldr	r2, [r3, #4]
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80032a4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	685b      	ldr	r3, [r3, #4]
 80032aa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80032ae:	d111      	bne.n	80032d4 <SPI_WaitFlagStateUntilTimeout+0x94>
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	689b      	ldr	r3, [r3, #8]
 80032b4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80032b8:	d004      	beq.n	80032c4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	689b      	ldr	r3, [r3, #8]
 80032be:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80032c2:	d107      	bne.n	80032d4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	681a      	ldr	r2, [r3, #0]
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80032d2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032d8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80032dc:	d10f      	bne.n	80032fe <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	681a      	ldr	r2, [r3, #0]
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80032ec:	601a      	str	r2, [r3, #0]
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	681a      	ldr	r2, [r3, #0]
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80032fc:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	2201      	movs	r2, #1
 8003302:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	2200      	movs	r2, #0
 800330a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800330e:	2303      	movs	r3, #3
 8003310:	e017      	b.n	8003342 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003312:	697b      	ldr	r3, [r7, #20]
 8003314:	2b00      	cmp	r3, #0
 8003316:	d101      	bne.n	800331c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003318:	2300      	movs	r3, #0
 800331a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800331c:	697b      	ldr	r3, [r7, #20]
 800331e:	3b01      	subs	r3, #1
 8003320:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	689a      	ldr	r2, [r3, #8]
 8003328:	68bb      	ldr	r3, [r7, #8]
 800332a:	4013      	ands	r3, r2
 800332c:	68ba      	ldr	r2, [r7, #8]
 800332e:	429a      	cmp	r2, r3
 8003330:	bf0c      	ite	eq
 8003332:	2301      	moveq	r3, #1
 8003334:	2300      	movne	r3, #0
 8003336:	b2db      	uxtb	r3, r3
 8003338:	461a      	mov	r2, r3
 800333a:	79fb      	ldrb	r3, [r7, #7]
 800333c:	429a      	cmp	r2, r3
 800333e:	d19b      	bne.n	8003278 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003340:	2300      	movs	r3, #0
}
 8003342:	4618      	mov	r0, r3
 8003344:	3720      	adds	r7, #32
 8003346:	46bd      	mov	sp, r7
 8003348:	bd80      	pop	{r7, pc}
 800334a:	bf00      	nop
 800334c:	20000000 	.word	0x20000000

08003350 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003350:	b580      	push	{r7, lr}
 8003352:	b08a      	sub	sp, #40	; 0x28
 8003354:	af00      	add	r7, sp, #0
 8003356:	60f8      	str	r0, [r7, #12]
 8003358:	60b9      	str	r1, [r7, #8]
 800335a:	607a      	str	r2, [r7, #4]
 800335c:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800335e:	2300      	movs	r3, #0
 8003360:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8003362:	f7fd fbb1 	bl	8000ac8 <HAL_GetTick>
 8003366:	4602      	mov	r2, r0
 8003368:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800336a:	1a9b      	subs	r3, r3, r2
 800336c:	683a      	ldr	r2, [r7, #0]
 800336e:	4413      	add	r3, r2
 8003370:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8003372:	f7fd fba9 	bl	8000ac8 <HAL_GetTick>
 8003376:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	330c      	adds	r3, #12
 800337e:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8003380:	4b3d      	ldr	r3, [pc, #244]	; (8003478 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8003382:	681a      	ldr	r2, [r3, #0]
 8003384:	4613      	mov	r3, r2
 8003386:	009b      	lsls	r3, r3, #2
 8003388:	4413      	add	r3, r2
 800338a:	00da      	lsls	r2, r3, #3
 800338c:	1ad3      	subs	r3, r2, r3
 800338e:	0d1b      	lsrs	r3, r3, #20
 8003390:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003392:	fb02 f303 	mul.w	r3, r2, r3
 8003396:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8003398:	e060      	b.n	800345c <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800339a:	68bb      	ldr	r3, [r7, #8]
 800339c:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80033a0:	d107      	bne.n	80033b2 <SPI_WaitFifoStateUntilTimeout+0x62>
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d104      	bne.n	80033b2 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 80033a8:	69fb      	ldr	r3, [r7, #28]
 80033aa:	781b      	ldrb	r3, [r3, #0]
 80033ac:	b2db      	uxtb	r3, r3
 80033ae:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80033b0:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 80033b2:	683b      	ldr	r3, [r7, #0]
 80033b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033b8:	d050      	beq.n	800345c <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80033ba:	f7fd fb85 	bl	8000ac8 <HAL_GetTick>
 80033be:	4602      	mov	r2, r0
 80033c0:	6a3b      	ldr	r3, [r7, #32]
 80033c2:	1ad3      	subs	r3, r2, r3
 80033c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80033c6:	429a      	cmp	r2, r3
 80033c8:	d902      	bls.n	80033d0 <SPI_WaitFifoStateUntilTimeout+0x80>
 80033ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d13d      	bne.n	800344c <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	685a      	ldr	r2, [r3, #4]
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80033de:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	685b      	ldr	r3, [r3, #4]
 80033e4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80033e8:	d111      	bne.n	800340e <SPI_WaitFifoStateUntilTimeout+0xbe>
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	689b      	ldr	r3, [r3, #8]
 80033ee:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80033f2:	d004      	beq.n	80033fe <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	689b      	ldr	r3, [r3, #8]
 80033f8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80033fc:	d107      	bne.n	800340e <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	681a      	ldr	r2, [r3, #0]
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800340c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003412:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003416:	d10f      	bne.n	8003438 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	681a      	ldr	r2, [r3, #0]
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003426:	601a      	str	r2, [r3, #0]
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	681a      	ldr	r2, [r3, #0]
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003436:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	2201      	movs	r2, #1
 800343c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	2200      	movs	r2, #0
 8003444:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8003448:	2303      	movs	r3, #3
 800344a:	e010      	b.n	800346e <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800344c:	69bb      	ldr	r3, [r7, #24]
 800344e:	2b00      	cmp	r3, #0
 8003450:	d101      	bne.n	8003456 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8003452:	2300      	movs	r3, #0
 8003454:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8003456:	69bb      	ldr	r3, [r7, #24]
 8003458:	3b01      	subs	r3, #1
 800345a:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	689a      	ldr	r2, [r3, #8]
 8003462:	68bb      	ldr	r3, [r7, #8]
 8003464:	4013      	ands	r3, r2
 8003466:	687a      	ldr	r2, [r7, #4]
 8003468:	429a      	cmp	r2, r3
 800346a:	d196      	bne.n	800339a <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 800346c:	2300      	movs	r3, #0
}
 800346e:	4618      	mov	r0, r3
 8003470:	3728      	adds	r7, #40	; 0x28
 8003472:	46bd      	mov	sp, r7
 8003474:	bd80      	pop	{r7, pc}
 8003476:	bf00      	nop
 8003478:	20000000 	.word	0x20000000

0800347c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800347c:	b580      	push	{r7, lr}
 800347e:	b086      	sub	sp, #24
 8003480:	af02      	add	r7, sp, #8
 8003482:	60f8      	str	r0, [r7, #12]
 8003484:	60b9      	str	r1, [r7, #8]
 8003486:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	9300      	str	r3, [sp, #0]
 800348c:	68bb      	ldr	r3, [r7, #8]
 800348e:	2200      	movs	r2, #0
 8003490:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8003494:	68f8      	ldr	r0, [r7, #12]
 8003496:	f7ff ff5b 	bl	8003350 <SPI_WaitFifoStateUntilTimeout>
 800349a:	4603      	mov	r3, r0
 800349c:	2b00      	cmp	r3, #0
 800349e:	d007      	beq.n	80034b0 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80034a4:	f043 0220 	orr.w	r2, r3, #32
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80034ac:	2303      	movs	r3, #3
 80034ae:	e027      	b.n	8003500 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	9300      	str	r3, [sp, #0]
 80034b4:	68bb      	ldr	r3, [r7, #8]
 80034b6:	2200      	movs	r2, #0
 80034b8:	2180      	movs	r1, #128	; 0x80
 80034ba:	68f8      	ldr	r0, [r7, #12]
 80034bc:	f7ff fec0 	bl	8003240 <SPI_WaitFlagStateUntilTimeout>
 80034c0:	4603      	mov	r3, r0
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d007      	beq.n	80034d6 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80034ca:	f043 0220 	orr.w	r2, r3, #32
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80034d2:	2303      	movs	r3, #3
 80034d4:	e014      	b.n	8003500 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	9300      	str	r3, [sp, #0]
 80034da:	68bb      	ldr	r3, [r7, #8]
 80034dc:	2200      	movs	r2, #0
 80034de:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80034e2:	68f8      	ldr	r0, [r7, #12]
 80034e4:	f7ff ff34 	bl	8003350 <SPI_WaitFifoStateUntilTimeout>
 80034e8:	4603      	mov	r3, r0
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d007      	beq.n	80034fe <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80034f2:	f043 0220 	orr.w	r2, r3, #32
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80034fa:	2303      	movs	r3, #3
 80034fc:	e000      	b.n	8003500 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80034fe:	2300      	movs	r3, #0
}
 8003500:	4618      	mov	r0, r3
 8003502:	3710      	adds	r7, #16
 8003504:	46bd      	mov	sp, r7
 8003506:	bd80      	pop	{r7, pc}

08003508 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003508:	b580      	push	{r7, lr}
 800350a:	b082      	sub	sp, #8
 800350c:	af00      	add	r7, sp, #0
 800350e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	2b00      	cmp	r3, #0
 8003514:	d101      	bne.n	800351a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003516:	2301      	movs	r3, #1
 8003518:	e040      	b.n	800359c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800351e:	2b00      	cmp	r3, #0
 8003520:	d106      	bne.n	8003530 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	2200      	movs	r2, #0
 8003526:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800352a:	6878      	ldr	r0, [r7, #4]
 800352c:	f7fd fa06 	bl	800093c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	2224      	movs	r2, #36	; 0x24
 8003534:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	681a      	ldr	r2, [r3, #0]
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	f022 0201 	bic.w	r2, r2, #1
 8003544:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003546:	6878      	ldr	r0, [r7, #4]
 8003548:	f000 f8b6 	bl	80036b8 <UART_SetConfig>
 800354c:	4603      	mov	r3, r0
 800354e:	2b01      	cmp	r3, #1
 8003550:	d101      	bne.n	8003556 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8003552:	2301      	movs	r3, #1
 8003554:	e022      	b.n	800359c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800355a:	2b00      	cmp	r3, #0
 800355c:	d002      	beq.n	8003564 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800355e:	6878      	ldr	r0, [r7, #4]
 8003560:	f000 fa7e 	bl	8003a60 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	685a      	ldr	r2, [r3, #4]
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003572:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	689a      	ldr	r2, [r3, #8]
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003582:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	681a      	ldr	r2, [r3, #0]
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	f042 0201 	orr.w	r2, r2, #1
 8003592:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003594:	6878      	ldr	r0, [r7, #4]
 8003596:	f000 fb05 	bl	8003ba4 <UART_CheckIdleState>
 800359a:	4603      	mov	r3, r0
}
 800359c:	4618      	mov	r0, r3
 800359e:	3708      	adds	r7, #8
 80035a0:	46bd      	mov	sp, r7
 80035a2:	bd80      	pop	{r7, pc}

080035a4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80035a4:	b580      	push	{r7, lr}
 80035a6:	b08a      	sub	sp, #40	; 0x28
 80035a8:	af02      	add	r7, sp, #8
 80035aa:	60f8      	str	r0, [r7, #12]
 80035ac:	60b9      	str	r1, [r7, #8]
 80035ae:	603b      	str	r3, [r7, #0]
 80035b0:	4613      	mov	r3, r2
 80035b2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80035b8:	2b20      	cmp	r3, #32
 80035ba:	d178      	bne.n	80036ae <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 80035bc:	68bb      	ldr	r3, [r7, #8]
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d002      	beq.n	80035c8 <HAL_UART_Transmit+0x24>
 80035c2:	88fb      	ldrh	r3, [r7, #6]
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d101      	bne.n	80035cc <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80035c8:	2301      	movs	r3, #1
 80035ca:	e071      	b.n	80036b0 <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	2200      	movs	r2, #0
 80035d0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	2221      	movs	r2, #33	; 0x21
 80035d8:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80035da:	f7fd fa75 	bl	8000ac8 <HAL_GetTick>
 80035de:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	88fa      	ldrh	r2, [r7, #6]
 80035e4:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	88fa      	ldrh	r2, [r7, #6]
 80035ec:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	689b      	ldr	r3, [r3, #8]
 80035f4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80035f8:	d108      	bne.n	800360c <HAL_UART_Transmit+0x68>
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	691b      	ldr	r3, [r3, #16]
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d104      	bne.n	800360c <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8003602:	2300      	movs	r3, #0
 8003604:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003606:	68bb      	ldr	r3, [r7, #8]
 8003608:	61bb      	str	r3, [r7, #24]
 800360a:	e003      	b.n	8003614 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 800360c:	68bb      	ldr	r3, [r7, #8]
 800360e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003610:	2300      	movs	r3, #0
 8003612:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003614:	e030      	b.n	8003678 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003616:	683b      	ldr	r3, [r7, #0]
 8003618:	9300      	str	r3, [sp, #0]
 800361a:	697b      	ldr	r3, [r7, #20]
 800361c:	2200      	movs	r2, #0
 800361e:	2180      	movs	r1, #128	; 0x80
 8003620:	68f8      	ldr	r0, [r7, #12]
 8003622:	f000 fb67 	bl	8003cf4 <UART_WaitOnFlagUntilTimeout>
 8003626:	4603      	mov	r3, r0
 8003628:	2b00      	cmp	r3, #0
 800362a:	d004      	beq.n	8003636 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	2220      	movs	r2, #32
 8003630:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8003632:	2303      	movs	r3, #3
 8003634:	e03c      	b.n	80036b0 <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 8003636:	69fb      	ldr	r3, [r7, #28]
 8003638:	2b00      	cmp	r3, #0
 800363a:	d10b      	bne.n	8003654 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800363c:	69bb      	ldr	r3, [r7, #24]
 800363e:	881a      	ldrh	r2, [r3, #0]
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003648:	b292      	uxth	r2, r2
 800364a:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800364c:	69bb      	ldr	r3, [r7, #24]
 800364e:	3302      	adds	r3, #2
 8003650:	61bb      	str	r3, [r7, #24]
 8003652:	e008      	b.n	8003666 <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003654:	69fb      	ldr	r3, [r7, #28]
 8003656:	781a      	ldrb	r2, [r3, #0]
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	b292      	uxth	r2, r2
 800365e:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003660:	69fb      	ldr	r3, [r7, #28]
 8003662:	3301      	adds	r3, #1
 8003664:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800366c:	b29b      	uxth	r3, r3
 800366e:	3b01      	subs	r3, #1
 8003670:	b29a      	uxth	r2, r3
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800367e:	b29b      	uxth	r3, r3
 8003680:	2b00      	cmp	r3, #0
 8003682:	d1c8      	bne.n	8003616 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003684:	683b      	ldr	r3, [r7, #0]
 8003686:	9300      	str	r3, [sp, #0]
 8003688:	697b      	ldr	r3, [r7, #20]
 800368a:	2200      	movs	r2, #0
 800368c:	2140      	movs	r1, #64	; 0x40
 800368e:	68f8      	ldr	r0, [r7, #12]
 8003690:	f000 fb30 	bl	8003cf4 <UART_WaitOnFlagUntilTimeout>
 8003694:	4603      	mov	r3, r0
 8003696:	2b00      	cmp	r3, #0
 8003698:	d004      	beq.n	80036a4 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	2220      	movs	r2, #32
 800369e:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 80036a0:	2303      	movs	r3, #3
 80036a2:	e005      	b.n	80036b0 <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	2220      	movs	r2, #32
 80036a8:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 80036aa:	2300      	movs	r3, #0
 80036ac:	e000      	b.n	80036b0 <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 80036ae:	2302      	movs	r3, #2
  }
}
 80036b0:	4618      	mov	r0, r3
 80036b2:	3720      	adds	r7, #32
 80036b4:	46bd      	mov	sp, r7
 80036b6:	bd80      	pop	{r7, pc}

080036b8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80036b8:	b580      	push	{r7, lr}
 80036ba:	b088      	sub	sp, #32
 80036bc:	af00      	add	r7, sp, #0
 80036be:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80036c0:	2300      	movs	r3, #0
 80036c2:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	689a      	ldr	r2, [r3, #8]
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	691b      	ldr	r3, [r3, #16]
 80036cc:	431a      	orrs	r2, r3
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	695b      	ldr	r3, [r3, #20]
 80036d2:	431a      	orrs	r2, r3
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	69db      	ldr	r3, [r3, #28]
 80036d8:	4313      	orrs	r3, r2
 80036da:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	681a      	ldr	r2, [r3, #0]
 80036e2:	4b92      	ldr	r3, [pc, #584]	; (800392c <UART_SetConfig+0x274>)
 80036e4:	4013      	ands	r3, r2
 80036e6:	687a      	ldr	r2, [r7, #4]
 80036e8:	6812      	ldr	r2, [r2, #0]
 80036ea:	6979      	ldr	r1, [r7, #20]
 80036ec:	430b      	orrs	r3, r1
 80036ee:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	685b      	ldr	r3, [r3, #4]
 80036f6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	68da      	ldr	r2, [r3, #12]
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	430a      	orrs	r2, r1
 8003704:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	699b      	ldr	r3, [r3, #24]
 800370a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	6a1b      	ldr	r3, [r3, #32]
 8003710:	697a      	ldr	r2, [r7, #20]
 8003712:	4313      	orrs	r3, r2
 8003714:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	689b      	ldr	r3, [r3, #8]
 800371c:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	697a      	ldr	r2, [r7, #20]
 8003726:	430a      	orrs	r2, r1
 8003728:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	4a80      	ldr	r2, [pc, #512]	; (8003930 <UART_SetConfig+0x278>)
 8003730:	4293      	cmp	r3, r2
 8003732:	d120      	bne.n	8003776 <UART_SetConfig+0xbe>
 8003734:	4b7f      	ldr	r3, [pc, #508]	; (8003934 <UART_SetConfig+0x27c>)
 8003736:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003738:	f003 0303 	and.w	r3, r3, #3
 800373c:	2b03      	cmp	r3, #3
 800373e:	d817      	bhi.n	8003770 <UART_SetConfig+0xb8>
 8003740:	a201      	add	r2, pc, #4	; (adr r2, 8003748 <UART_SetConfig+0x90>)
 8003742:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003746:	bf00      	nop
 8003748:	08003759 	.word	0x08003759
 800374c:	08003765 	.word	0x08003765
 8003750:	0800376b 	.word	0x0800376b
 8003754:	0800375f 	.word	0x0800375f
 8003758:	2301      	movs	r3, #1
 800375a:	77fb      	strb	r3, [r7, #31]
 800375c:	e0b5      	b.n	80038ca <UART_SetConfig+0x212>
 800375e:	2302      	movs	r3, #2
 8003760:	77fb      	strb	r3, [r7, #31]
 8003762:	e0b2      	b.n	80038ca <UART_SetConfig+0x212>
 8003764:	2304      	movs	r3, #4
 8003766:	77fb      	strb	r3, [r7, #31]
 8003768:	e0af      	b.n	80038ca <UART_SetConfig+0x212>
 800376a:	2308      	movs	r3, #8
 800376c:	77fb      	strb	r3, [r7, #31]
 800376e:	e0ac      	b.n	80038ca <UART_SetConfig+0x212>
 8003770:	2310      	movs	r3, #16
 8003772:	77fb      	strb	r3, [r7, #31]
 8003774:	e0a9      	b.n	80038ca <UART_SetConfig+0x212>
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	4a6f      	ldr	r2, [pc, #444]	; (8003938 <UART_SetConfig+0x280>)
 800377c:	4293      	cmp	r3, r2
 800377e:	d124      	bne.n	80037ca <UART_SetConfig+0x112>
 8003780:	4b6c      	ldr	r3, [pc, #432]	; (8003934 <UART_SetConfig+0x27c>)
 8003782:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003784:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003788:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800378c:	d011      	beq.n	80037b2 <UART_SetConfig+0xfa>
 800378e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003792:	d817      	bhi.n	80037c4 <UART_SetConfig+0x10c>
 8003794:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003798:	d011      	beq.n	80037be <UART_SetConfig+0x106>
 800379a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800379e:	d811      	bhi.n	80037c4 <UART_SetConfig+0x10c>
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d003      	beq.n	80037ac <UART_SetConfig+0xf4>
 80037a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80037a8:	d006      	beq.n	80037b8 <UART_SetConfig+0x100>
 80037aa:	e00b      	b.n	80037c4 <UART_SetConfig+0x10c>
 80037ac:	2300      	movs	r3, #0
 80037ae:	77fb      	strb	r3, [r7, #31]
 80037b0:	e08b      	b.n	80038ca <UART_SetConfig+0x212>
 80037b2:	2302      	movs	r3, #2
 80037b4:	77fb      	strb	r3, [r7, #31]
 80037b6:	e088      	b.n	80038ca <UART_SetConfig+0x212>
 80037b8:	2304      	movs	r3, #4
 80037ba:	77fb      	strb	r3, [r7, #31]
 80037bc:	e085      	b.n	80038ca <UART_SetConfig+0x212>
 80037be:	2308      	movs	r3, #8
 80037c0:	77fb      	strb	r3, [r7, #31]
 80037c2:	e082      	b.n	80038ca <UART_SetConfig+0x212>
 80037c4:	2310      	movs	r3, #16
 80037c6:	77fb      	strb	r3, [r7, #31]
 80037c8:	e07f      	b.n	80038ca <UART_SetConfig+0x212>
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	4a5b      	ldr	r2, [pc, #364]	; (800393c <UART_SetConfig+0x284>)
 80037d0:	4293      	cmp	r3, r2
 80037d2:	d124      	bne.n	800381e <UART_SetConfig+0x166>
 80037d4:	4b57      	ldr	r3, [pc, #348]	; (8003934 <UART_SetConfig+0x27c>)
 80037d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037d8:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 80037dc:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80037e0:	d011      	beq.n	8003806 <UART_SetConfig+0x14e>
 80037e2:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80037e6:	d817      	bhi.n	8003818 <UART_SetConfig+0x160>
 80037e8:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80037ec:	d011      	beq.n	8003812 <UART_SetConfig+0x15a>
 80037ee:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80037f2:	d811      	bhi.n	8003818 <UART_SetConfig+0x160>
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d003      	beq.n	8003800 <UART_SetConfig+0x148>
 80037f8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80037fc:	d006      	beq.n	800380c <UART_SetConfig+0x154>
 80037fe:	e00b      	b.n	8003818 <UART_SetConfig+0x160>
 8003800:	2300      	movs	r3, #0
 8003802:	77fb      	strb	r3, [r7, #31]
 8003804:	e061      	b.n	80038ca <UART_SetConfig+0x212>
 8003806:	2302      	movs	r3, #2
 8003808:	77fb      	strb	r3, [r7, #31]
 800380a:	e05e      	b.n	80038ca <UART_SetConfig+0x212>
 800380c:	2304      	movs	r3, #4
 800380e:	77fb      	strb	r3, [r7, #31]
 8003810:	e05b      	b.n	80038ca <UART_SetConfig+0x212>
 8003812:	2308      	movs	r3, #8
 8003814:	77fb      	strb	r3, [r7, #31]
 8003816:	e058      	b.n	80038ca <UART_SetConfig+0x212>
 8003818:	2310      	movs	r3, #16
 800381a:	77fb      	strb	r3, [r7, #31]
 800381c:	e055      	b.n	80038ca <UART_SetConfig+0x212>
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	4a47      	ldr	r2, [pc, #284]	; (8003940 <UART_SetConfig+0x288>)
 8003824:	4293      	cmp	r3, r2
 8003826:	d124      	bne.n	8003872 <UART_SetConfig+0x1ba>
 8003828:	4b42      	ldr	r3, [pc, #264]	; (8003934 <UART_SetConfig+0x27c>)
 800382a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800382c:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8003830:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003834:	d011      	beq.n	800385a <UART_SetConfig+0x1a2>
 8003836:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800383a:	d817      	bhi.n	800386c <UART_SetConfig+0x1b4>
 800383c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003840:	d011      	beq.n	8003866 <UART_SetConfig+0x1ae>
 8003842:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003846:	d811      	bhi.n	800386c <UART_SetConfig+0x1b4>
 8003848:	2b00      	cmp	r3, #0
 800384a:	d003      	beq.n	8003854 <UART_SetConfig+0x19c>
 800384c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003850:	d006      	beq.n	8003860 <UART_SetConfig+0x1a8>
 8003852:	e00b      	b.n	800386c <UART_SetConfig+0x1b4>
 8003854:	2300      	movs	r3, #0
 8003856:	77fb      	strb	r3, [r7, #31]
 8003858:	e037      	b.n	80038ca <UART_SetConfig+0x212>
 800385a:	2302      	movs	r3, #2
 800385c:	77fb      	strb	r3, [r7, #31]
 800385e:	e034      	b.n	80038ca <UART_SetConfig+0x212>
 8003860:	2304      	movs	r3, #4
 8003862:	77fb      	strb	r3, [r7, #31]
 8003864:	e031      	b.n	80038ca <UART_SetConfig+0x212>
 8003866:	2308      	movs	r3, #8
 8003868:	77fb      	strb	r3, [r7, #31]
 800386a:	e02e      	b.n	80038ca <UART_SetConfig+0x212>
 800386c:	2310      	movs	r3, #16
 800386e:	77fb      	strb	r3, [r7, #31]
 8003870:	e02b      	b.n	80038ca <UART_SetConfig+0x212>
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	4a33      	ldr	r2, [pc, #204]	; (8003944 <UART_SetConfig+0x28c>)
 8003878:	4293      	cmp	r3, r2
 800387a:	d124      	bne.n	80038c6 <UART_SetConfig+0x20e>
 800387c:	4b2d      	ldr	r3, [pc, #180]	; (8003934 <UART_SetConfig+0x27c>)
 800387e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003880:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8003884:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003888:	d011      	beq.n	80038ae <UART_SetConfig+0x1f6>
 800388a:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800388e:	d817      	bhi.n	80038c0 <UART_SetConfig+0x208>
 8003890:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003894:	d011      	beq.n	80038ba <UART_SetConfig+0x202>
 8003896:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800389a:	d811      	bhi.n	80038c0 <UART_SetConfig+0x208>
 800389c:	2b00      	cmp	r3, #0
 800389e:	d003      	beq.n	80038a8 <UART_SetConfig+0x1f0>
 80038a0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80038a4:	d006      	beq.n	80038b4 <UART_SetConfig+0x1fc>
 80038a6:	e00b      	b.n	80038c0 <UART_SetConfig+0x208>
 80038a8:	2300      	movs	r3, #0
 80038aa:	77fb      	strb	r3, [r7, #31]
 80038ac:	e00d      	b.n	80038ca <UART_SetConfig+0x212>
 80038ae:	2302      	movs	r3, #2
 80038b0:	77fb      	strb	r3, [r7, #31]
 80038b2:	e00a      	b.n	80038ca <UART_SetConfig+0x212>
 80038b4:	2304      	movs	r3, #4
 80038b6:	77fb      	strb	r3, [r7, #31]
 80038b8:	e007      	b.n	80038ca <UART_SetConfig+0x212>
 80038ba:	2308      	movs	r3, #8
 80038bc:	77fb      	strb	r3, [r7, #31]
 80038be:	e004      	b.n	80038ca <UART_SetConfig+0x212>
 80038c0:	2310      	movs	r3, #16
 80038c2:	77fb      	strb	r3, [r7, #31]
 80038c4:	e001      	b.n	80038ca <UART_SetConfig+0x212>
 80038c6:	2310      	movs	r3, #16
 80038c8:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	69db      	ldr	r3, [r3, #28]
 80038ce:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80038d2:	d16b      	bne.n	80039ac <UART_SetConfig+0x2f4>
  {
    switch (clocksource)
 80038d4:	7ffb      	ldrb	r3, [r7, #31]
 80038d6:	2b08      	cmp	r3, #8
 80038d8:	d838      	bhi.n	800394c <UART_SetConfig+0x294>
 80038da:	a201      	add	r2, pc, #4	; (adr r2, 80038e0 <UART_SetConfig+0x228>)
 80038dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038e0:	08003905 	.word	0x08003905
 80038e4:	0800390d 	.word	0x0800390d
 80038e8:	08003915 	.word	0x08003915
 80038ec:	0800394d 	.word	0x0800394d
 80038f0:	0800391b 	.word	0x0800391b
 80038f4:	0800394d 	.word	0x0800394d
 80038f8:	0800394d 	.word	0x0800394d
 80038fc:	0800394d 	.word	0x0800394d
 8003900:	08003923 	.word	0x08003923
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003904:	f7fe fdf8 	bl	80024f8 <HAL_RCC_GetPCLK1Freq>
 8003908:	61b8      	str	r0, [r7, #24]
        break;
 800390a:	e024      	b.n	8003956 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800390c:	f7fe fe16 	bl	800253c <HAL_RCC_GetPCLK2Freq>
 8003910:	61b8      	str	r0, [r7, #24]
        break;
 8003912:	e020      	b.n	8003956 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003914:	4b0c      	ldr	r3, [pc, #48]	; (8003948 <UART_SetConfig+0x290>)
 8003916:	61bb      	str	r3, [r7, #24]
        break;
 8003918:	e01d      	b.n	8003956 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800391a:	f7fe fd77 	bl	800240c <HAL_RCC_GetSysClockFreq>
 800391e:	61b8      	str	r0, [r7, #24]
        break;
 8003920:	e019      	b.n	8003956 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003922:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003926:	61bb      	str	r3, [r7, #24]
        break;
 8003928:	e015      	b.n	8003956 <UART_SetConfig+0x29e>
 800392a:	bf00      	nop
 800392c:	efff69f3 	.word	0xefff69f3
 8003930:	40013800 	.word	0x40013800
 8003934:	40021000 	.word	0x40021000
 8003938:	40004400 	.word	0x40004400
 800393c:	40004800 	.word	0x40004800
 8003940:	40004c00 	.word	0x40004c00
 8003944:	40005000 	.word	0x40005000
 8003948:	007a1200 	.word	0x007a1200
      default:
        pclk = 0U;
 800394c:	2300      	movs	r3, #0
 800394e:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003950:	2301      	movs	r3, #1
 8003952:	77bb      	strb	r3, [r7, #30]
        break;
 8003954:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003956:	69bb      	ldr	r3, [r7, #24]
 8003958:	2b00      	cmp	r3, #0
 800395a:	d073      	beq.n	8003a44 <UART_SetConfig+0x38c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800395c:	69bb      	ldr	r3, [r7, #24]
 800395e:	005a      	lsls	r2, r3, #1
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	685b      	ldr	r3, [r3, #4]
 8003964:	085b      	lsrs	r3, r3, #1
 8003966:	441a      	add	r2, r3
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	685b      	ldr	r3, [r3, #4]
 800396c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003970:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003972:	693b      	ldr	r3, [r7, #16]
 8003974:	2b0f      	cmp	r3, #15
 8003976:	d916      	bls.n	80039a6 <UART_SetConfig+0x2ee>
 8003978:	693b      	ldr	r3, [r7, #16]
 800397a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800397e:	d212      	bcs.n	80039a6 <UART_SetConfig+0x2ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003980:	693b      	ldr	r3, [r7, #16]
 8003982:	b29b      	uxth	r3, r3
 8003984:	f023 030f 	bic.w	r3, r3, #15
 8003988:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800398a:	693b      	ldr	r3, [r7, #16]
 800398c:	085b      	lsrs	r3, r3, #1
 800398e:	b29b      	uxth	r3, r3
 8003990:	f003 0307 	and.w	r3, r3, #7
 8003994:	b29a      	uxth	r2, r3
 8003996:	89fb      	ldrh	r3, [r7, #14]
 8003998:	4313      	orrs	r3, r2
 800399a:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	89fa      	ldrh	r2, [r7, #14]
 80039a2:	60da      	str	r2, [r3, #12]
 80039a4:	e04e      	b.n	8003a44 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 80039a6:	2301      	movs	r3, #1
 80039a8:	77bb      	strb	r3, [r7, #30]
 80039aa:	e04b      	b.n	8003a44 <UART_SetConfig+0x38c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80039ac:	7ffb      	ldrb	r3, [r7, #31]
 80039ae:	2b08      	cmp	r3, #8
 80039b0:	d827      	bhi.n	8003a02 <UART_SetConfig+0x34a>
 80039b2:	a201      	add	r2, pc, #4	; (adr r2, 80039b8 <UART_SetConfig+0x300>)
 80039b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039b8:	080039dd 	.word	0x080039dd
 80039bc:	080039e5 	.word	0x080039e5
 80039c0:	080039ed 	.word	0x080039ed
 80039c4:	08003a03 	.word	0x08003a03
 80039c8:	080039f3 	.word	0x080039f3
 80039cc:	08003a03 	.word	0x08003a03
 80039d0:	08003a03 	.word	0x08003a03
 80039d4:	08003a03 	.word	0x08003a03
 80039d8:	080039fb 	.word	0x080039fb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80039dc:	f7fe fd8c 	bl	80024f8 <HAL_RCC_GetPCLK1Freq>
 80039e0:	61b8      	str	r0, [r7, #24]
        break;
 80039e2:	e013      	b.n	8003a0c <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80039e4:	f7fe fdaa 	bl	800253c <HAL_RCC_GetPCLK2Freq>
 80039e8:	61b8      	str	r0, [r7, #24]
        break;
 80039ea:	e00f      	b.n	8003a0c <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80039ec:	4b1b      	ldr	r3, [pc, #108]	; (8003a5c <UART_SetConfig+0x3a4>)
 80039ee:	61bb      	str	r3, [r7, #24]
        break;
 80039f0:	e00c      	b.n	8003a0c <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80039f2:	f7fe fd0b 	bl	800240c <HAL_RCC_GetSysClockFreq>
 80039f6:	61b8      	str	r0, [r7, #24]
        break;
 80039f8:	e008      	b.n	8003a0c <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80039fa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80039fe:	61bb      	str	r3, [r7, #24]
        break;
 8003a00:	e004      	b.n	8003a0c <UART_SetConfig+0x354>
      default:
        pclk = 0U;
 8003a02:	2300      	movs	r3, #0
 8003a04:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003a06:	2301      	movs	r3, #1
 8003a08:	77bb      	strb	r3, [r7, #30]
        break;
 8003a0a:	bf00      	nop
    }

    if (pclk != 0U)
 8003a0c:	69bb      	ldr	r3, [r7, #24]
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d018      	beq.n	8003a44 <UART_SetConfig+0x38c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	685b      	ldr	r3, [r3, #4]
 8003a16:	085a      	lsrs	r2, r3, #1
 8003a18:	69bb      	ldr	r3, [r7, #24]
 8003a1a:	441a      	add	r2, r3
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	685b      	ldr	r3, [r3, #4]
 8003a20:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a24:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003a26:	693b      	ldr	r3, [r7, #16]
 8003a28:	2b0f      	cmp	r3, #15
 8003a2a:	d909      	bls.n	8003a40 <UART_SetConfig+0x388>
 8003a2c:	693b      	ldr	r3, [r7, #16]
 8003a2e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003a32:	d205      	bcs.n	8003a40 <UART_SetConfig+0x388>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003a34:	693b      	ldr	r3, [r7, #16]
 8003a36:	b29a      	uxth	r2, r3
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	60da      	str	r2, [r3, #12]
 8003a3e:	e001      	b.n	8003a44 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 8003a40:	2301      	movs	r3, #1
 8003a42:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	2200      	movs	r2, #0
 8003a48:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	2200      	movs	r2, #0
 8003a4e:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8003a50:	7fbb      	ldrb	r3, [r7, #30]
}
 8003a52:	4618      	mov	r0, r3
 8003a54:	3720      	adds	r7, #32
 8003a56:	46bd      	mov	sp, r7
 8003a58:	bd80      	pop	{r7, pc}
 8003a5a:	bf00      	nop
 8003a5c:	007a1200 	.word	0x007a1200

08003a60 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003a60:	b480      	push	{r7}
 8003a62:	b083      	sub	sp, #12
 8003a64:	af00      	add	r7, sp, #0
 8003a66:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a6c:	f003 0301 	and.w	r3, r3, #1
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d00a      	beq.n	8003a8a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	685b      	ldr	r3, [r3, #4]
 8003a7a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	430a      	orrs	r2, r1
 8003a88:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a8e:	f003 0302 	and.w	r3, r3, #2
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d00a      	beq.n	8003aac <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	685b      	ldr	r3, [r3, #4]
 8003a9c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	430a      	orrs	r2, r1
 8003aaa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ab0:	f003 0304 	and.w	r3, r3, #4
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d00a      	beq.n	8003ace <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	685b      	ldr	r3, [r3, #4]
 8003abe:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	430a      	orrs	r2, r1
 8003acc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ad2:	f003 0308 	and.w	r3, r3, #8
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d00a      	beq.n	8003af0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	685b      	ldr	r3, [r3, #4]
 8003ae0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	430a      	orrs	r2, r1
 8003aee:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003af4:	f003 0310 	and.w	r3, r3, #16
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d00a      	beq.n	8003b12 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	689b      	ldr	r3, [r3, #8]
 8003b02:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	430a      	orrs	r2, r1
 8003b10:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b16:	f003 0320 	and.w	r3, r3, #32
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d00a      	beq.n	8003b34 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	689b      	ldr	r3, [r3, #8]
 8003b24:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	430a      	orrs	r2, r1
 8003b32:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b38:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d01a      	beq.n	8003b76 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	685b      	ldr	r3, [r3, #4]
 8003b46:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	430a      	orrs	r2, r1
 8003b54:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b5a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003b5e:	d10a      	bne.n	8003b76 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	685b      	ldr	r3, [r3, #4]
 8003b66:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	430a      	orrs	r2, r1
 8003b74:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b7a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d00a      	beq.n	8003b98 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	685b      	ldr	r3, [r3, #4]
 8003b88:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	430a      	orrs	r2, r1
 8003b96:	605a      	str	r2, [r3, #4]
  }
}
 8003b98:	bf00      	nop
 8003b9a:	370c      	adds	r7, #12
 8003b9c:	46bd      	mov	sp, r7
 8003b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ba2:	4770      	bx	lr

08003ba4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003ba4:	b580      	push	{r7, lr}
 8003ba6:	b098      	sub	sp, #96	; 0x60
 8003ba8:	af02      	add	r7, sp, #8
 8003baa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	2200      	movs	r2, #0
 8003bb0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003bb4:	f7fc ff88 	bl	8000ac8 <HAL_GetTick>
 8003bb8:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	f003 0308 	and.w	r3, r3, #8
 8003bc4:	2b08      	cmp	r3, #8
 8003bc6:	d12e      	bne.n	8003c26 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003bc8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003bcc:	9300      	str	r3, [sp, #0]
 8003bce:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003bd0:	2200      	movs	r2, #0
 8003bd2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003bd6:	6878      	ldr	r0, [r7, #4]
 8003bd8:	f000 f88c 	bl	8003cf4 <UART_WaitOnFlagUntilTimeout>
 8003bdc:	4603      	mov	r3, r0
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d021      	beq.n	8003c26 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003be8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003bea:	e853 3f00 	ldrex	r3, [r3]
 8003bee:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003bf0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003bf2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003bf6:	653b      	str	r3, [r7, #80]	; 0x50
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	461a      	mov	r2, r3
 8003bfe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003c00:	647b      	str	r3, [r7, #68]	; 0x44
 8003c02:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c04:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003c06:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003c08:	e841 2300 	strex	r3, r2, [r1]
 8003c0c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003c0e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d1e6      	bne.n	8003be2 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	2220      	movs	r2, #32
 8003c18:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	2200      	movs	r2, #0
 8003c1e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003c22:	2303      	movs	r3, #3
 8003c24:	e062      	b.n	8003cec <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	f003 0304 	and.w	r3, r3, #4
 8003c30:	2b04      	cmp	r3, #4
 8003c32:	d149      	bne.n	8003cc8 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003c34:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003c38:	9300      	str	r3, [sp, #0]
 8003c3a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003c3c:	2200      	movs	r2, #0
 8003c3e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003c42:	6878      	ldr	r0, [r7, #4]
 8003c44:	f000 f856 	bl	8003cf4 <UART_WaitOnFlagUntilTimeout>
 8003c48:	4603      	mov	r3, r0
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d03c      	beq.n	8003cc8 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c56:	e853 3f00 	ldrex	r3, [r3]
 8003c5a:	623b      	str	r3, [r7, #32]
   return(result);
 8003c5c:	6a3b      	ldr	r3, [r7, #32]
 8003c5e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003c62:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	461a      	mov	r2, r3
 8003c6a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003c6c:	633b      	str	r3, [r7, #48]	; 0x30
 8003c6e:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c70:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003c72:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003c74:	e841 2300 	strex	r3, r2, [r1]
 8003c78:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003c7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d1e6      	bne.n	8003c4e <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	3308      	adds	r3, #8
 8003c86:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c88:	693b      	ldr	r3, [r7, #16]
 8003c8a:	e853 3f00 	ldrex	r3, [r3]
 8003c8e:	60fb      	str	r3, [r7, #12]
   return(result);
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	f023 0301 	bic.w	r3, r3, #1
 8003c96:	64bb      	str	r3, [r7, #72]	; 0x48
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	3308      	adds	r3, #8
 8003c9e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003ca0:	61fa      	str	r2, [r7, #28]
 8003ca2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ca4:	69b9      	ldr	r1, [r7, #24]
 8003ca6:	69fa      	ldr	r2, [r7, #28]
 8003ca8:	e841 2300 	strex	r3, r2, [r1]
 8003cac:	617b      	str	r3, [r7, #20]
   return(result);
 8003cae:	697b      	ldr	r3, [r7, #20]
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d1e5      	bne.n	8003c80 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	2220      	movs	r2, #32
 8003cb8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	2200      	movs	r2, #0
 8003cc0:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003cc4:	2303      	movs	r3, #3
 8003cc6:	e011      	b.n	8003cec <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	2220      	movs	r2, #32
 8003ccc:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	2220      	movs	r2, #32
 8003cd2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	2200      	movs	r2, #0
 8003cda:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	2200      	movs	r2, #0
 8003ce0:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	2200      	movs	r2, #0
 8003ce6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8003cea:	2300      	movs	r3, #0
}
 8003cec:	4618      	mov	r0, r3
 8003cee:	3758      	adds	r7, #88	; 0x58
 8003cf0:	46bd      	mov	sp, r7
 8003cf2:	bd80      	pop	{r7, pc}

08003cf4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003cf4:	b580      	push	{r7, lr}
 8003cf6:	b084      	sub	sp, #16
 8003cf8:	af00      	add	r7, sp, #0
 8003cfa:	60f8      	str	r0, [r7, #12]
 8003cfc:	60b9      	str	r1, [r7, #8]
 8003cfe:	603b      	str	r3, [r7, #0]
 8003d00:	4613      	mov	r3, r2
 8003d02:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003d04:	e049      	b.n	8003d9a <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003d06:	69bb      	ldr	r3, [r7, #24]
 8003d08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d0c:	d045      	beq.n	8003d9a <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003d0e:	f7fc fedb 	bl	8000ac8 <HAL_GetTick>
 8003d12:	4602      	mov	r2, r0
 8003d14:	683b      	ldr	r3, [r7, #0]
 8003d16:	1ad3      	subs	r3, r2, r3
 8003d18:	69ba      	ldr	r2, [r7, #24]
 8003d1a:	429a      	cmp	r2, r3
 8003d1c:	d302      	bcc.n	8003d24 <UART_WaitOnFlagUntilTimeout+0x30>
 8003d1e:	69bb      	ldr	r3, [r7, #24]
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d101      	bne.n	8003d28 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003d24:	2303      	movs	r3, #3
 8003d26:	e048      	b.n	8003dba <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	f003 0304 	and.w	r3, r3, #4
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d031      	beq.n	8003d9a <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	69db      	ldr	r3, [r3, #28]
 8003d3c:	f003 0308 	and.w	r3, r3, #8
 8003d40:	2b08      	cmp	r3, #8
 8003d42:	d110      	bne.n	8003d66 <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	2208      	movs	r2, #8
 8003d4a:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8003d4c:	68f8      	ldr	r0, [r7, #12]
 8003d4e:	f000 f838 	bl	8003dc2 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	2208      	movs	r2, #8
 8003d56:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	2200      	movs	r2, #0
 8003d5e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

           return HAL_ERROR;
 8003d62:	2301      	movs	r3, #1
 8003d64:	e029      	b.n	8003dba <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	69db      	ldr	r3, [r3, #28]
 8003d6c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003d70:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003d74:	d111      	bne.n	8003d9a <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003d7e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003d80:	68f8      	ldr	r0, [r7, #12]
 8003d82:	f000 f81e 	bl	8003dc2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	2220      	movs	r2, #32
 8003d8a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	2200      	movs	r2, #0
 8003d92:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8003d96:	2303      	movs	r3, #3
 8003d98:	e00f      	b.n	8003dba <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	69da      	ldr	r2, [r3, #28]
 8003da0:	68bb      	ldr	r3, [r7, #8]
 8003da2:	4013      	ands	r3, r2
 8003da4:	68ba      	ldr	r2, [r7, #8]
 8003da6:	429a      	cmp	r2, r3
 8003da8:	bf0c      	ite	eq
 8003daa:	2301      	moveq	r3, #1
 8003dac:	2300      	movne	r3, #0
 8003dae:	b2db      	uxtb	r3, r3
 8003db0:	461a      	mov	r2, r3
 8003db2:	79fb      	ldrb	r3, [r7, #7]
 8003db4:	429a      	cmp	r2, r3
 8003db6:	d0a6      	beq.n	8003d06 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003db8:	2300      	movs	r3, #0
}
 8003dba:	4618      	mov	r0, r3
 8003dbc:	3710      	adds	r7, #16
 8003dbe:	46bd      	mov	sp, r7
 8003dc0:	bd80      	pop	{r7, pc}

08003dc2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003dc2:	b480      	push	{r7}
 8003dc4:	b095      	sub	sp, #84	; 0x54
 8003dc6:	af00      	add	r7, sp, #0
 8003dc8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003dd0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003dd2:	e853 3f00 	ldrex	r3, [r3]
 8003dd6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003dd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003dda:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003dde:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	461a      	mov	r2, r3
 8003de6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003de8:	643b      	str	r3, [r7, #64]	; 0x40
 8003dea:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003dec:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003dee:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003df0:	e841 2300 	strex	r3, r2, [r1]
 8003df4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003df6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d1e6      	bne.n	8003dca <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	3308      	adds	r3, #8
 8003e02:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e04:	6a3b      	ldr	r3, [r7, #32]
 8003e06:	e853 3f00 	ldrex	r3, [r3]
 8003e0a:	61fb      	str	r3, [r7, #28]
   return(result);
 8003e0c:	69fb      	ldr	r3, [r7, #28]
 8003e0e:	f023 0301 	bic.w	r3, r3, #1
 8003e12:	64bb      	str	r3, [r7, #72]	; 0x48
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	3308      	adds	r3, #8
 8003e1a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003e1c:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003e1e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e20:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003e22:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003e24:	e841 2300 	strex	r3, r2, [r1]
 8003e28:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003e2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d1e5      	bne.n	8003dfc <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003e34:	2b01      	cmp	r3, #1
 8003e36:	d118      	bne.n	8003e6a <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	e853 3f00 	ldrex	r3, [r3]
 8003e44:	60bb      	str	r3, [r7, #8]
   return(result);
 8003e46:	68bb      	ldr	r3, [r7, #8]
 8003e48:	f023 0310 	bic.w	r3, r3, #16
 8003e4c:	647b      	str	r3, [r7, #68]	; 0x44
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	461a      	mov	r2, r3
 8003e54:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003e56:	61bb      	str	r3, [r7, #24]
 8003e58:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e5a:	6979      	ldr	r1, [r7, #20]
 8003e5c:	69ba      	ldr	r2, [r7, #24]
 8003e5e:	e841 2300 	strex	r3, r2, [r1]
 8003e62:	613b      	str	r3, [r7, #16]
   return(result);
 8003e64:	693b      	ldr	r3, [r7, #16]
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d1e6      	bne.n	8003e38 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	2220      	movs	r2, #32
 8003e6e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	2200      	movs	r2, #0
 8003e76:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	2200      	movs	r2, #0
 8003e7c:	669a      	str	r2, [r3, #104]	; 0x68
}
 8003e7e:	bf00      	nop
 8003e80:	3754      	adds	r7, #84	; 0x54
 8003e82:	46bd      	mov	sp, r7
 8003e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e88:	4770      	bx	lr
	...

08003e8c <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8003e8c:	b580      	push	{r7, lr}
 8003e8e:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8003e90:	4904      	ldr	r1, [pc, #16]	; (8003ea4 <MX_FATFS_Init+0x18>)
 8003e92:	4805      	ldr	r0, [pc, #20]	; (8003ea8 <MX_FATFS_Init+0x1c>)
 8003e94:	f003 fbec 	bl	8007670 <FATFS_LinkDriver>
 8003e98:	4603      	mov	r3, r0
 8003e9a:	461a      	mov	r2, r3
 8003e9c:	4b03      	ldr	r3, [pc, #12]	; (8003eac <MX_FATFS_Init+0x20>)
 8003e9e:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8003ea0:	bf00      	nop
 8003ea2:	bd80      	pop	{r7, pc}
 8003ea4:	2000029c 	.word	0x2000029c
 8003ea8:	2000000c 	.word	0x2000000c
 8003eac:	20000298 	.word	0x20000298

08003eb0 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8003eb0:	b480      	push	{r7}
 8003eb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8003eb4:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8003eb6:	4618      	mov	r0, r3
 8003eb8:	46bd      	mov	sp, r7
 8003eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ebe:	4770      	bx	lr

08003ec0 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8003ec0:	b580      	push	{r7, lr}
 8003ec2:	b082      	sub	sp, #8
 8003ec4:	af00      	add	r7, sp, #0
 8003ec6:	4603      	mov	r3, r0
 8003ec8:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
	return USER_SPI_initialize(pdrv);
 8003eca:	79fb      	ldrb	r3, [r7, #7]
 8003ecc:	4618      	mov	r0, r3
 8003ece:	f000 f9d3 	bl	8004278 <USER_SPI_initialize>
 8003ed2:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 8003ed4:	4618      	mov	r0, r3
 8003ed6:	3708      	adds	r7, #8
 8003ed8:	46bd      	mov	sp, r7
 8003eda:	bd80      	pop	{r7, pc}

08003edc <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8003edc:	b580      	push	{r7, lr}
 8003ede:	b082      	sub	sp, #8
 8003ee0:	af00      	add	r7, sp, #0
 8003ee2:	4603      	mov	r3, r0
 8003ee4:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
	return USER_SPI_status(pdrv);
 8003ee6:	79fb      	ldrb	r3, [r7, #7]
 8003ee8:	4618      	mov	r0, r3
 8003eea:	f000 fab1 	bl	8004450 <USER_SPI_status>
 8003eee:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 8003ef0:	4618      	mov	r0, r3
 8003ef2:	3708      	adds	r7, #8
 8003ef4:	46bd      	mov	sp, r7
 8003ef6:	bd80      	pop	{r7, pc}

08003ef8 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8003ef8:	b580      	push	{r7, lr}
 8003efa:	b084      	sub	sp, #16
 8003efc:	af00      	add	r7, sp, #0
 8003efe:	60b9      	str	r1, [r7, #8]
 8003f00:	607a      	str	r2, [r7, #4]
 8003f02:	603b      	str	r3, [r7, #0]
 8003f04:	4603      	mov	r3, r0
 8003f06:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
	return USER_SPI_read(pdrv, buff, sector, count);
 8003f08:	7bf8      	ldrb	r0, [r7, #15]
 8003f0a:	683b      	ldr	r3, [r7, #0]
 8003f0c:	687a      	ldr	r2, [r7, #4]
 8003f0e:	68b9      	ldr	r1, [r7, #8]
 8003f10:	f000 fab4 	bl	800447c <USER_SPI_read>
 8003f14:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 8003f16:	4618      	mov	r0, r3
 8003f18:	3710      	adds	r7, #16
 8003f1a:	46bd      	mov	sp, r7
 8003f1c:	bd80      	pop	{r7, pc}

08003f1e <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 8003f1e:	b580      	push	{r7, lr}
 8003f20:	b084      	sub	sp, #16
 8003f22:	af00      	add	r7, sp, #0
 8003f24:	60b9      	str	r1, [r7, #8]
 8003f26:	607a      	str	r2, [r7, #4]
 8003f28:	603b      	str	r3, [r7, #0]
 8003f2a:	4603      	mov	r3, r0
 8003f2c:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
	return USER_SPI_write(pdrv, buff, sector, count);
 8003f2e:	7bf8      	ldrb	r0, [r7, #15]
 8003f30:	683b      	ldr	r3, [r7, #0]
 8003f32:	687a      	ldr	r2, [r7, #4]
 8003f34:	68b9      	ldr	r1, [r7, #8]
 8003f36:	f000 fb07 	bl	8004548 <USER_SPI_write>
 8003f3a:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 8003f3c:	4618      	mov	r0, r3
 8003f3e:	3710      	adds	r7, #16
 8003f40:	46bd      	mov	sp, r7
 8003f42:	bd80      	pop	{r7, pc}

08003f44 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8003f44:	b580      	push	{r7, lr}
 8003f46:	b082      	sub	sp, #8
 8003f48:	af00      	add	r7, sp, #0
 8003f4a:	4603      	mov	r3, r0
 8003f4c:	603a      	str	r2, [r7, #0]
 8003f4e:	71fb      	strb	r3, [r7, #7]
 8003f50:	460b      	mov	r3, r1
 8003f52:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
	return USER_SPI_ioctl(pdrv, cmd, buff);
 8003f54:	79b9      	ldrb	r1, [r7, #6]
 8003f56:	79fb      	ldrb	r3, [r7, #7]
 8003f58:	683a      	ldr	r2, [r7, #0]
 8003f5a:	4618      	mov	r0, r3
 8003f5c:	f000 fb70 	bl	8004640 <USER_SPI_ioctl>
 8003f60:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 8003f62:	4618      	mov	r0, r3
 8003f64:	3708      	adds	r7, #8
 8003f66:	46bd      	mov	sp, r7
 8003f68:	bd80      	pop	{r7, pc}
	...

08003f6c <SPI_Timer_On>:
BYTE CardType;			/* Card type flags */

uint32_t spiTimerTickStart;
uint32_t spiTimerTickDelay;

void SPI_Timer_On(uint32_t waitTicks) {
 8003f6c:	b580      	push	{r7, lr}
 8003f6e:	b082      	sub	sp, #8
 8003f70:	af00      	add	r7, sp, #0
 8003f72:	6078      	str	r0, [r7, #4]
    spiTimerTickStart = HAL_GetTick();
 8003f74:	f7fc fda8 	bl	8000ac8 <HAL_GetTick>
 8003f78:	4603      	mov	r3, r0
 8003f7a:	4a04      	ldr	r2, [pc, #16]	; (8003f8c <SPI_Timer_On+0x20>)
 8003f7c:	6013      	str	r3, [r2, #0]
    spiTimerTickDelay = waitTicks;
 8003f7e:	4a04      	ldr	r2, [pc, #16]	; (8003f90 <SPI_Timer_On+0x24>)
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	6013      	str	r3, [r2, #0]
}
 8003f84:	bf00      	nop
 8003f86:	3708      	adds	r7, #8
 8003f88:	46bd      	mov	sp, r7
 8003f8a:	bd80      	pop	{r7, pc}
 8003f8c:	200002a4 	.word	0x200002a4
 8003f90:	200002a8 	.word	0x200002a8

08003f94 <SPI_Timer_Status>:

uint8_t SPI_Timer_Status() {
 8003f94:	b580      	push	{r7, lr}
 8003f96:	af00      	add	r7, sp, #0
    return ((HAL_GetTick() - spiTimerTickStart) < spiTimerTickDelay);
 8003f98:	f7fc fd96 	bl	8000ac8 <HAL_GetTick>
 8003f9c:	4602      	mov	r2, r0
 8003f9e:	4b06      	ldr	r3, [pc, #24]	; (8003fb8 <SPI_Timer_Status+0x24>)
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	1ad2      	subs	r2, r2, r3
 8003fa4:	4b05      	ldr	r3, [pc, #20]	; (8003fbc <SPI_Timer_Status+0x28>)
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	429a      	cmp	r2, r3
 8003faa:	bf34      	ite	cc
 8003fac:	2301      	movcc	r3, #1
 8003fae:	2300      	movcs	r3, #0
 8003fb0:	b2db      	uxtb	r3, r3
}
 8003fb2:	4618      	mov	r0, r3
 8003fb4:	bd80      	pop	{r7, pc}
 8003fb6:	bf00      	nop
 8003fb8:	200002a4 	.word	0x200002a4
 8003fbc:	200002a8 	.word	0x200002a8

08003fc0 <xchg_spi>:
/* Exchange a byte */
static
BYTE xchg_spi (
	BYTE dat	/* Data to send */
)
{
 8003fc0:	b580      	push	{r7, lr}
 8003fc2:	b086      	sub	sp, #24
 8003fc4:	af02      	add	r7, sp, #8
 8003fc6:	4603      	mov	r3, r0
 8003fc8:	71fb      	strb	r3, [r7, #7]
	BYTE rxDat;
    HAL_SPI_TransmitReceive(&SD_SPI_HANDLE, &dat, &rxDat, 1, 50);
 8003fca:	f107 020f 	add.w	r2, r7, #15
 8003fce:	1df9      	adds	r1, r7, #7
 8003fd0:	2332      	movs	r3, #50	; 0x32
 8003fd2:	9300      	str	r3, [sp, #0]
 8003fd4:	2301      	movs	r3, #1
 8003fd6:	4804      	ldr	r0, [pc, #16]	; (8003fe8 <xchg_spi+0x28>)
 8003fd8:	f7fe ff10 	bl	8002dfc <HAL_SPI_TransmitReceive>
    return rxDat;
 8003fdc:	7bfb      	ldrb	r3, [r7, #15]
}
 8003fde:	4618      	mov	r0, r3
 8003fe0:	3710      	adds	r7, #16
 8003fe2:	46bd      	mov	sp, r7
 8003fe4:	bd80      	pop	{r7, pc}
 8003fe6:	bf00      	nop
 8003fe8:	200001a4 	.word	0x200001a4

08003fec <rcvr_spi_multi>:
static
void rcvr_spi_multi (
	BYTE *buff,		/* Pointer to data buffer */
	UINT btr		/* Number of bytes to receive (even number) */
)
{
 8003fec:	b590      	push	{r4, r7, lr}
 8003fee:	b085      	sub	sp, #20
 8003ff0:	af00      	add	r7, sp, #0
 8003ff2:	6078      	str	r0, [r7, #4]
 8003ff4:	6039      	str	r1, [r7, #0]
	for(UINT i=0; i<btr; i++) {
 8003ff6:	2300      	movs	r3, #0
 8003ff8:	60fb      	str	r3, [r7, #12]
 8003ffa:	e00a      	b.n	8004012 <rcvr_spi_multi+0x26>
		*(buff+i) = xchg_spi(0xFF);
 8003ffc:	687a      	ldr	r2, [r7, #4]
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	18d4      	adds	r4, r2, r3
 8004002:	20ff      	movs	r0, #255	; 0xff
 8004004:	f7ff ffdc 	bl	8003fc0 <xchg_spi>
 8004008:	4603      	mov	r3, r0
 800400a:	7023      	strb	r3, [r4, #0]
	for(UINT i=0; i<btr; i++) {
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	3301      	adds	r3, #1
 8004010:	60fb      	str	r3, [r7, #12]
 8004012:	68fa      	ldr	r2, [r7, #12]
 8004014:	683b      	ldr	r3, [r7, #0]
 8004016:	429a      	cmp	r2, r3
 8004018:	d3f0      	bcc.n	8003ffc <rcvr_spi_multi+0x10>
	}
}
 800401a:	bf00      	nop
 800401c:	bf00      	nop
 800401e:	3714      	adds	r7, #20
 8004020:	46bd      	mov	sp, r7
 8004022:	bd90      	pop	{r4, r7, pc}

08004024 <xmit_spi_multi>:
static
void xmit_spi_multi (
	const BYTE *buff,	/* Pointer to the data */
	UINT btx			/* Number of bytes to send (even number) */
)
{
 8004024:	b580      	push	{r7, lr}
 8004026:	b082      	sub	sp, #8
 8004028:	af00      	add	r7, sp, #0
 800402a:	6078      	str	r0, [r7, #4]
 800402c:	6039      	str	r1, [r7, #0]
	HAL_SPI_Transmit(&SD_SPI_HANDLE, buff, btx, HAL_MAX_DELAY);
 800402e:	683b      	ldr	r3, [r7, #0]
 8004030:	b29a      	uxth	r2, r3
 8004032:	f04f 33ff 	mov.w	r3, #4294967295
 8004036:	6879      	ldr	r1, [r7, #4]
 8004038:	4803      	ldr	r0, [pc, #12]	; (8004048 <xmit_spi_multi+0x24>)
 800403a:	f7fe fd6a 	bl	8002b12 <HAL_SPI_Transmit>
}
 800403e:	bf00      	nop
 8004040:	3708      	adds	r7, #8
 8004042:	46bd      	mov	sp, r7
 8004044:	bd80      	pop	{r7, pc}
 8004046:	bf00      	nop
 8004048:	200001a4 	.word	0x200001a4

0800404c <wait_ready>:

static
int wait_ready (	/* 1:Ready, 0:Timeout */
	UINT wt			/* Timeout [ms] */
)
{
 800404c:	b580      	push	{r7, lr}
 800404e:	b086      	sub	sp, #24
 8004050:	af00      	add	r7, sp, #0
 8004052:	6078      	str	r0, [r7, #4]
	//wait_ready needs its own timer, unfortunately, so it can't use the
	//spi_timer functions
	uint32_t waitSpiTimerTickStart;
	uint32_t waitSpiTimerTickDelay;

	waitSpiTimerTickStart = HAL_GetTick();
 8004054:	f7fc fd38 	bl	8000ac8 <HAL_GetTick>
 8004058:	6178      	str	r0, [r7, #20]
	waitSpiTimerTickDelay = (uint32_t)wt;
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	613b      	str	r3, [r7, #16]
	do {
		d = xchg_spi(0xFF);
 800405e:	20ff      	movs	r0, #255	; 0xff
 8004060:	f7ff ffae 	bl	8003fc0 <xchg_spi>
 8004064:	4603      	mov	r3, r0
 8004066:	73fb      	strb	r3, [r7, #15]
		/* This loop takes a time. Insert rot_rdq() here for multitask envilonment. */
	} while (d != 0xFF && ((HAL_GetTick() - waitSpiTimerTickStart) < waitSpiTimerTickDelay));	/* Wait for card goes ready or timeout */
 8004068:	7bfb      	ldrb	r3, [r7, #15]
 800406a:	2bff      	cmp	r3, #255	; 0xff
 800406c:	d007      	beq.n	800407e <wait_ready+0x32>
 800406e:	f7fc fd2b 	bl	8000ac8 <HAL_GetTick>
 8004072:	4602      	mov	r2, r0
 8004074:	697b      	ldr	r3, [r7, #20]
 8004076:	1ad3      	subs	r3, r2, r3
 8004078:	693a      	ldr	r2, [r7, #16]
 800407a:	429a      	cmp	r2, r3
 800407c:	d8ef      	bhi.n	800405e <wait_ready+0x12>

	return (d == 0xFF) ? 1 : 0;
 800407e:	7bfb      	ldrb	r3, [r7, #15]
 8004080:	2bff      	cmp	r3, #255	; 0xff
 8004082:	bf0c      	ite	eq
 8004084:	2301      	moveq	r3, #1
 8004086:	2300      	movne	r3, #0
 8004088:	b2db      	uxtb	r3, r3
}
 800408a:	4618      	mov	r0, r3
 800408c:	3718      	adds	r7, #24
 800408e:	46bd      	mov	sp, r7
 8004090:	bd80      	pop	{r7, pc}
	...

08004094 <despiselect>:
/* Despiselect card and release SPI                                         */
/*-----------------------------------------------------------------------*/

static
void despiselect (void)
{
 8004094:	b580      	push	{r7, lr}
 8004096:	af00      	add	r7, sp, #0
	CS_HIGH();		/* Set CS# high */
 8004098:	2201      	movs	r2, #1
 800409a:	2102      	movs	r1, #2
 800409c:	4803      	ldr	r0, [pc, #12]	; (80040ac <despiselect+0x18>)
 800409e:	f7fc ffb3 	bl	8001008 <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO hi-z for multiple slave SPI) */
 80040a2:	20ff      	movs	r0, #255	; 0xff
 80040a4:	f7ff ff8c 	bl	8003fc0 <xchg_spi>

}
 80040a8:	bf00      	nop
 80040aa:	bd80      	pop	{r7, pc}
 80040ac:	48000400 	.word	0x48000400

080040b0 <spiselect>:
/* Select card and wait for ready                                        */
/*-----------------------------------------------------------------------*/

static
int spiselect (void)	/* 1:OK, 0:Timeout */
{
 80040b0:	b580      	push	{r7, lr}
 80040b2:	af00      	add	r7, sp, #0
	CS_LOW();		/* Set CS# low */
 80040b4:	2200      	movs	r2, #0
 80040b6:	2102      	movs	r1, #2
 80040b8:	4809      	ldr	r0, [pc, #36]	; (80040e0 <spiselect+0x30>)
 80040ba:	f7fc ffa5 	bl	8001008 <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO enabled) */
 80040be:	20ff      	movs	r0, #255	; 0xff
 80040c0:	f7ff ff7e 	bl	8003fc0 <xchg_spi>
	if (wait_ready(500)) return 1;	/* Wait for card ready */
 80040c4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80040c8:	f7ff ffc0 	bl	800404c <wait_ready>
 80040cc:	4603      	mov	r3, r0
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d001      	beq.n	80040d6 <spiselect+0x26>
 80040d2:	2301      	movs	r3, #1
 80040d4:	e002      	b.n	80040dc <spiselect+0x2c>

	despiselect();
 80040d6:	f7ff ffdd 	bl	8004094 <despiselect>
	return 0;	/* Timeout */
 80040da:	2300      	movs	r3, #0
}
 80040dc:	4618      	mov	r0, r3
 80040de:	bd80      	pop	{r7, pc}
 80040e0:	48000400 	.word	0x48000400

080040e4 <rcvr_datablock>:
static
int rcvr_datablock (	/* 1:OK, 0:Error */
	BYTE *buff,			/* Data buffer */
	UINT btr			/* Data block length (byte) */
)
{
 80040e4:	b580      	push	{r7, lr}
 80040e6:	b084      	sub	sp, #16
 80040e8:	af00      	add	r7, sp, #0
 80040ea:	6078      	str	r0, [r7, #4]
 80040ec:	6039      	str	r1, [r7, #0]
	BYTE token;


	SPI_Timer_On(200);
 80040ee:	20c8      	movs	r0, #200	; 0xc8
 80040f0:	f7ff ff3c 	bl	8003f6c <SPI_Timer_On>
	do {							/* Wait for DataStart token in timeout of 200ms */
		token = xchg_spi(0xFF);
 80040f4:	20ff      	movs	r0, #255	; 0xff
 80040f6:	f7ff ff63 	bl	8003fc0 <xchg_spi>
 80040fa:	4603      	mov	r3, r0
 80040fc:	73fb      	strb	r3, [r7, #15]
		/* This loop will take a time. Insert rot_rdq() here for multitask envilonment. */
	} while ((token == 0xFF) && SPI_Timer_Status());
 80040fe:	7bfb      	ldrb	r3, [r7, #15]
 8004100:	2bff      	cmp	r3, #255	; 0xff
 8004102:	d104      	bne.n	800410e <rcvr_datablock+0x2a>
 8004104:	f7ff ff46 	bl	8003f94 <SPI_Timer_Status>
 8004108:	4603      	mov	r3, r0
 800410a:	2b00      	cmp	r3, #0
 800410c:	d1f2      	bne.n	80040f4 <rcvr_datablock+0x10>
	if(token != 0xFE) return 0;		/* Function fails if invalid DataStart token or timeout */
 800410e:	7bfb      	ldrb	r3, [r7, #15]
 8004110:	2bfe      	cmp	r3, #254	; 0xfe
 8004112:	d001      	beq.n	8004118 <rcvr_datablock+0x34>
 8004114:	2300      	movs	r3, #0
 8004116:	e00a      	b.n	800412e <rcvr_datablock+0x4a>

	rcvr_spi_multi(buff, btr);		/* Store trailing data to the buffer */
 8004118:	6839      	ldr	r1, [r7, #0]
 800411a:	6878      	ldr	r0, [r7, #4]
 800411c:	f7ff ff66 	bl	8003fec <rcvr_spi_multi>
	xchg_spi(0xFF); xchg_spi(0xFF);			/* Discard CRC */
 8004120:	20ff      	movs	r0, #255	; 0xff
 8004122:	f7ff ff4d 	bl	8003fc0 <xchg_spi>
 8004126:	20ff      	movs	r0, #255	; 0xff
 8004128:	f7ff ff4a 	bl	8003fc0 <xchg_spi>

	return 1;						/* Function succeeded */
 800412c:	2301      	movs	r3, #1
}
 800412e:	4618      	mov	r0, r3
 8004130:	3710      	adds	r7, #16
 8004132:	46bd      	mov	sp, r7
 8004134:	bd80      	pop	{r7, pc}

08004136 <xmit_datablock>:
static
int xmit_datablock (	/* 1:OK, 0:Failed */
	const BYTE *buff,	/* Ponter to 512 byte data to be sent */
	BYTE token			/* Token */
)
{
 8004136:	b580      	push	{r7, lr}
 8004138:	b084      	sub	sp, #16
 800413a:	af00      	add	r7, sp, #0
 800413c:	6078      	str	r0, [r7, #4]
 800413e:	460b      	mov	r3, r1
 8004140:	70fb      	strb	r3, [r7, #3]
	BYTE resp;


	if (!wait_ready(500)) return 0;		/* Wait for card ready */
 8004142:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8004146:	f7ff ff81 	bl	800404c <wait_ready>
 800414a:	4603      	mov	r3, r0
 800414c:	2b00      	cmp	r3, #0
 800414e:	d101      	bne.n	8004154 <xmit_datablock+0x1e>
 8004150:	2300      	movs	r3, #0
 8004152:	e01e      	b.n	8004192 <xmit_datablock+0x5c>

	xchg_spi(token);					/* Send token */
 8004154:	78fb      	ldrb	r3, [r7, #3]
 8004156:	4618      	mov	r0, r3
 8004158:	f7ff ff32 	bl	8003fc0 <xchg_spi>
	if (token != 0xFD) {				/* Send data if token is other than StopTran */
 800415c:	78fb      	ldrb	r3, [r7, #3]
 800415e:	2bfd      	cmp	r3, #253	; 0xfd
 8004160:	d016      	beq.n	8004190 <xmit_datablock+0x5a>
		xmit_spi_multi(buff, 512);		/* Data */
 8004162:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004166:	6878      	ldr	r0, [r7, #4]
 8004168:	f7ff ff5c 	bl	8004024 <xmit_spi_multi>
		xchg_spi(0xFF); xchg_spi(0xFF);	/* Dummy CRC */
 800416c:	20ff      	movs	r0, #255	; 0xff
 800416e:	f7ff ff27 	bl	8003fc0 <xchg_spi>
 8004172:	20ff      	movs	r0, #255	; 0xff
 8004174:	f7ff ff24 	bl	8003fc0 <xchg_spi>

		resp = xchg_spi(0xFF);				/* Receive data resp */
 8004178:	20ff      	movs	r0, #255	; 0xff
 800417a:	f7ff ff21 	bl	8003fc0 <xchg_spi>
 800417e:	4603      	mov	r3, r0
 8004180:	73fb      	strb	r3, [r7, #15]
		if ((resp & 0x1F) != 0x05) return 0;	/* Function fails if the data packet was not accepted */
 8004182:	7bfb      	ldrb	r3, [r7, #15]
 8004184:	f003 031f 	and.w	r3, r3, #31
 8004188:	2b05      	cmp	r3, #5
 800418a:	d001      	beq.n	8004190 <xmit_datablock+0x5a>
 800418c:	2300      	movs	r3, #0
 800418e:	e000      	b.n	8004192 <xmit_datablock+0x5c>
	}
	return 1;
 8004190:	2301      	movs	r3, #1
}
 8004192:	4618      	mov	r0, r3
 8004194:	3710      	adds	r7, #16
 8004196:	46bd      	mov	sp, r7
 8004198:	bd80      	pop	{r7, pc}

0800419a <send_cmd>:
static
BYTE send_cmd (		/* Return value: R1 resp (bit7==1:Failed to send) */
	BYTE cmd,		/* Command index */
	DWORD arg		/* Argument */
)
{
 800419a:	b580      	push	{r7, lr}
 800419c:	b084      	sub	sp, #16
 800419e:	af00      	add	r7, sp, #0
 80041a0:	4603      	mov	r3, r0
 80041a2:	6039      	str	r1, [r7, #0]
 80041a4:	71fb      	strb	r3, [r7, #7]
	BYTE n, res;


	if (cmd & 0x80) {	/* Send a CMD55 prior to ACMD<n> */
 80041a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	da0e      	bge.n	80041cc <send_cmd+0x32>
		cmd &= 0x7F;
 80041ae:	79fb      	ldrb	r3, [r7, #7]
 80041b0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80041b4:	71fb      	strb	r3, [r7, #7]
		res = send_cmd(CMD55, 0);
 80041b6:	2100      	movs	r1, #0
 80041b8:	2037      	movs	r0, #55	; 0x37
 80041ba:	f7ff ffee 	bl	800419a <send_cmd>
 80041be:	4603      	mov	r3, r0
 80041c0:	73bb      	strb	r3, [r7, #14]
		if (res > 1) return res;
 80041c2:	7bbb      	ldrb	r3, [r7, #14]
 80041c4:	2b01      	cmp	r3, #1
 80041c6:	d901      	bls.n	80041cc <send_cmd+0x32>
 80041c8:	7bbb      	ldrb	r3, [r7, #14]
 80041ca:	e051      	b.n	8004270 <send_cmd+0xd6>
	}

	/* Select the card and wait for ready except to stop multiple block read */
	if (cmd != CMD12) {
 80041cc:	79fb      	ldrb	r3, [r7, #7]
 80041ce:	2b0c      	cmp	r3, #12
 80041d0:	d008      	beq.n	80041e4 <send_cmd+0x4a>
		despiselect();
 80041d2:	f7ff ff5f 	bl	8004094 <despiselect>
		if (!spiselect()) return 0xFF;
 80041d6:	f7ff ff6b 	bl	80040b0 <spiselect>
 80041da:	4603      	mov	r3, r0
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d101      	bne.n	80041e4 <send_cmd+0x4a>
 80041e0:	23ff      	movs	r3, #255	; 0xff
 80041e2:	e045      	b.n	8004270 <send_cmd+0xd6>
	}

	/* Send command packet */
	xchg_spi(0x40 | cmd);				/* Start + command index */
 80041e4:	79fb      	ldrb	r3, [r7, #7]
 80041e6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80041ea:	b2db      	uxtb	r3, r3
 80041ec:	4618      	mov	r0, r3
 80041ee:	f7ff fee7 	bl	8003fc0 <xchg_spi>
	xchg_spi((BYTE)(arg >> 24));		/* Argument[31..24] */
 80041f2:	683b      	ldr	r3, [r7, #0]
 80041f4:	0e1b      	lsrs	r3, r3, #24
 80041f6:	b2db      	uxtb	r3, r3
 80041f8:	4618      	mov	r0, r3
 80041fa:	f7ff fee1 	bl	8003fc0 <xchg_spi>
	xchg_spi((BYTE)(arg >> 16));		/* Argument[23..16] */
 80041fe:	683b      	ldr	r3, [r7, #0]
 8004200:	0c1b      	lsrs	r3, r3, #16
 8004202:	b2db      	uxtb	r3, r3
 8004204:	4618      	mov	r0, r3
 8004206:	f7ff fedb 	bl	8003fc0 <xchg_spi>
	xchg_spi((BYTE)(arg >> 8));			/* Argument[15..8] */
 800420a:	683b      	ldr	r3, [r7, #0]
 800420c:	0a1b      	lsrs	r3, r3, #8
 800420e:	b2db      	uxtb	r3, r3
 8004210:	4618      	mov	r0, r3
 8004212:	f7ff fed5 	bl	8003fc0 <xchg_spi>
	xchg_spi((BYTE)arg);				/* Argument[7..0] */
 8004216:	683b      	ldr	r3, [r7, #0]
 8004218:	b2db      	uxtb	r3, r3
 800421a:	4618      	mov	r0, r3
 800421c:	f7ff fed0 	bl	8003fc0 <xchg_spi>
	n = 0x01;							/* Dummy CRC + Stop */
 8004220:	2301      	movs	r3, #1
 8004222:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) */
 8004224:	79fb      	ldrb	r3, [r7, #7]
 8004226:	2b00      	cmp	r3, #0
 8004228:	d101      	bne.n	800422e <send_cmd+0x94>
 800422a:	2395      	movs	r3, #149	; 0x95
 800422c:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD8) n = 0x87;			/* Valid CRC for CMD8(0x1AA) */
 800422e:	79fb      	ldrb	r3, [r7, #7]
 8004230:	2b08      	cmp	r3, #8
 8004232:	d101      	bne.n	8004238 <send_cmd+0x9e>
 8004234:	2387      	movs	r3, #135	; 0x87
 8004236:	73fb      	strb	r3, [r7, #15]
	xchg_spi(n);
 8004238:	7bfb      	ldrb	r3, [r7, #15]
 800423a:	4618      	mov	r0, r3
 800423c:	f7ff fec0 	bl	8003fc0 <xchg_spi>

	/* Receive command resp */
	if (cmd == CMD12) xchg_spi(0xFF);	/* Diacard following one byte when CMD12 */
 8004240:	79fb      	ldrb	r3, [r7, #7]
 8004242:	2b0c      	cmp	r3, #12
 8004244:	d102      	bne.n	800424c <send_cmd+0xb2>
 8004246:	20ff      	movs	r0, #255	; 0xff
 8004248:	f7ff feba 	bl	8003fc0 <xchg_spi>
	n = 10;								/* Wait for response (10 bytes max) */
 800424c:	230a      	movs	r3, #10
 800424e:	73fb      	strb	r3, [r7, #15]
	do {
		res = xchg_spi(0xFF);
 8004250:	20ff      	movs	r0, #255	; 0xff
 8004252:	f7ff feb5 	bl	8003fc0 <xchg_spi>
 8004256:	4603      	mov	r3, r0
 8004258:	73bb      	strb	r3, [r7, #14]
	} while ((res & 0x80) && --n);
 800425a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800425e:	2b00      	cmp	r3, #0
 8004260:	da05      	bge.n	800426e <send_cmd+0xd4>
 8004262:	7bfb      	ldrb	r3, [r7, #15]
 8004264:	3b01      	subs	r3, #1
 8004266:	73fb      	strb	r3, [r7, #15]
 8004268:	7bfb      	ldrb	r3, [r7, #15]
 800426a:	2b00      	cmp	r3, #0
 800426c:	d1f0      	bne.n	8004250 <send_cmd+0xb6>

	return res;							/* Return received response */
 800426e:	7bbb      	ldrb	r3, [r7, #14]
}
 8004270:	4618      	mov	r0, r3
 8004272:	3710      	adds	r7, #16
 8004274:	46bd      	mov	sp, r7
 8004276:	bd80      	pop	{r7, pc}

08004278 <USER_SPI_initialize>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_initialize (
	BYTE drv		/* Physical drive number (0) */
)
{
 8004278:	b590      	push	{r4, r7, lr}
 800427a:	b085      	sub	sp, #20
 800427c:	af00      	add	r7, sp, #0
 800427e:	4603      	mov	r3, r0
 8004280:	71fb      	strb	r3, [r7, #7]
	BYTE n, cmd, ty, ocr[4];

	if (drv != 0) return STA_NOINIT;		/* Supports only drive 0 */
 8004282:	79fb      	ldrb	r3, [r7, #7]
 8004284:	2b00      	cmp	r3, #0
 8004286:	d001      	beq.n	800428c <USER_SPI_initialize+0x14>
 8004288:	2301      	movs	r3, #1
 800428a:	e0d6      	b.n	800443a <USER_SPI_initialize+0x1c2>
	//assume SPI already init init_spi();	/* Initialize SPI */

	if (Stat & STA_NODISK) return Stat;	/* Is card existing in the soket? */
 800428c:	4b6d      	ldr	r3, [pc, #436]	; (8004444 <USER_SPI_initialize+0x1cc>)
 800428e:	781b      	ldrb	r3, [r3, #0]
 8004290:	b2db      	uxtb	r3, r3
 8004292:	f003 0302 	and.w	r3, r3, #2
 8004296:	2b00      	cmp	r3, #0
 8004298:	d003      	beq.n	80042a2 <USER_SPI_initialize+0x2a>
 800429a:	4b6a      	ldr	r3, [pc, #424]	; (8004444 <USER_SPI_initialize+0x1cc>)
 800429c:	781b      	ldrb	r3, [r3, #0]
 800429e:	b2db      	uxtb	r3, r3
 80042a0:	e0cb      	b.n	800443a <USER_SPI_initialize+0x1c2>

	FCLK_SLOW();
 80042a2:	4b69      	ldr	r3, [pc, #420]	; (8004448 <USER_SPI_initialize+0x1d0>)
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 80042ac:	4b66      	ldr	r3, [pc, #408]	; (8004448 <USER_SPI_initialize+0x1d0>)
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	f042 0230 	orr.w	r2, r2, #48	; 0x30
 80042b4:	601a      	str	r2, [r3, #0]
	for (n = 10; n; n--) xchg_spi(0xFF);	/* Send 80 dummy clocks */
 80042b6:	230a      	movs	r3, #10
 80042b8:	73fb      	strb	r3, [r7, #15]
 80042ba:	e005      	b.n	80042c8 <USER_SPI_initialize+0x50>
 80042bc:	20ff      	movs	r0, #255	; 0xff
 80042be:	f7ff fe7f 	bl	8003fc0 <xchg_spi>
 80042c2:	7bfb      	ldrb	r3, [r7, #15]
 80042c4:	3b01      	subs	r3, #1
 80042c6:	73fb      	strb	r3, [r7, #15]
 80042c8:	7bfb      	ldrb	r3, [r7, #15]
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d1f6      	bne.n	80042bc <USER_SPI_initialize+0x44>

	ty = 0;
 80042ce:	2300      	movs	r3, #0
 80042d0:	737b      	strb	r3, [r7, #13]
	if (send_cmd(CMD0, 0) == 1) {			/* Put the card SPI/Idle state */
 80042d2:	2100      	movs	r1, #0
 80042d4:	2000      	movs	r0, #0
 80042d6:	f7ff ff60 	bl	800419a <send_cmd>
 80042da:	4603      	mov	r3, r0
 80042dc:	2b01      	cmp	r3, #1
 80042de:	f040 808b 	bne.w	80043f8 <USER_SPI_initialize+0x180>
		SPI_Timer_On(1000);					/* Initialization timeout = 1 sec */
 80042e2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80042e6:	f7ff fe41 	bl	8003f6c <SPI_Timer_On>
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDv2? */
 80042ea:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80042ee:	2008      	movs	r0, #8
 80042f0:	f7ff ff53 	bl	800419a <send_cmd>
 80042f4:	4603      	mov	r3, r0
 80042f6:	2b01      	cmp	r3, #1
 80042f8:	d151      	bne.n	800439e <USER_SPI_initialize+0x126>
			for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);	/* Get 32 bit return value of R7 resp */
 80042fa:	2300      	movs	r3, #0
 80042fc:	73fb      	strb	r3, [r7, #15]
 80042fe:	e00d      	b.n	800431c <USER_SPI_initialize+0xa4>
 8004300:	7bfc      	ldrb	r4, [r7, #15]
 8004302:	20ff      	movs	r0, #255	; 0xff
 8004304:	f7ff fe5c 	bl	8003fc0 <xchg_spi>
 8004308:	4603      	mov	r3, r0
 800430a:	461a      	mov	r2, r3
 800430c:	f104 0310 	add.w	r3, r4, #16
 8004310:	443b      	add	r3, r7
 8004312:	f803 2c08 	strb.w	r2, [r3, #-8]
 8004316:	7bfb      	ldrb	r3, [r7, #15]
 8004318:	3301      	adds	r3, #1
 800431a:	73fb      	strb	r3, [r7, #15]
 800431c:	7bfb      	ldrb	r3, [r7, #15]
 800431e:	2b03      	cmp	r3, #3
 8004320:	d9ee      	bls.n	8004300 <USER_SPI_initialize+0x88>
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) {				/* Is the card supports vcc of 2.7-3.6V? */
 8004322:	7abb      	ldrb	r3, [r7, #10]
 8004324:	2b01      	cmp	r3, #1
 8004326:	d167      	bne.n	80043f8 <USER_SPI_initialize+0x180>
 8004328:	7afb      	ldrb	r3, [r7, #11]
 800432a:	2baa      	cmp	r3, #170	; 0xaa
 800432c:	d164      	bne.n	80043f8 <USER_SPI_initialize+0x180>
				while (SPI_Timer_Status() && send_cmd(ACMD41, 1UL << 30)) ;	/* Wait for end of initialization with ACMD41(HCS) */
 800432e:	bf00      	nop
 8004330:	f7ff fe30 	bl	8003f94 <SPI_Timer_Status>
 8004334:	4603      	mov	r3, r0
 8004336:	2b00      	cmp	r3, #0
 8004338:	d007      	beq.n	800434a <USER_SPI_initialize+0xd2>
 800433a:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800433e:	20a9      	movs	r0, #169	; 0xa9
 8004340:	f7ff ff2b 	bl	800419a <send_cmd>
 8004344:	4603      	mov	r3, r0
 8004346:	2b00      	cmp	r3, #0
 8004348:	d1f2      	bne.n	8004330 <USER_SPI_initialize+0xb8>
				if (SPI_Timer_Status() && send_cmd(CMD58, 0) == 0) {		/* Check CCS bit in the OCR */
 800434a:	f7ff fe23 	bl	8003f94 <SPI_Timer_Status>
 800434e:	4603      	mov	r3, r0
 8004350:	2b00      	cmp	r3, #0
 8004352:	d051      	beq.n	80043f8 <USER_SPI_initialize+0x180>
 8004354:	2100      	movs	r1, #0
 8004356:	203a      	movs	r0, #58	; 0x3a
 8004358:	f7ff ff1f 	bl	800419a <send_cmd>
 800435c:	4603      	mov	r3, r0
 800435e:	2b00      	cmp	r3, #0
 8004360:	d14a      	bne.n	80043f8 <USER_SPI_initialize+0x180>
					for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);
 8004362:	2300      	movs	r3, #0
 8004364:	73fb      	strb	r3, [r7, #15]
 8004366:	e00d      	b.n	8004384 <USER_SPI_initialize+0x10c>
 8004368:	7bfc      	ldrb	r4, [r7, #15]
 800436a:	20ff      	movs	r0, #255	; 0xff
 800436c:	f7ff fe28 	bl	8003fc0 <xchg_spi>
 8004370:	4603      	mov	r3, r0
 8004372:	461a      	mov	r2, r3
 8004374:	f104 0310 	add.w	r3, r4, #16
 8004378:	443b      	add	r3, r7
 800437a:	f803 2c08 	strb.w	r2, [r3, #-8]
 800437e:	7bfb      	ldrb	r3, [r7, #15]
 8004380:	3301      	adds	r3, #1
 8004382:	73fb      	strb	r3, [r7, #15]
 8004384:	7bfb      	ldrb	r3, [r7, #15]
 8004386:	2b03      	cmp	r3, #3
 8004388:	d9ee      	bls.n	8004368 <USER_SPI_initialize+0xf0>
					ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* Card id SDv2 */
 800438a:	7a3b      	ldrb	r3, [r7, #8]
 800438c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004390:	2b00      	cmp	r3, #0
 8004392:	d001      	beq.n	8004398 <USER_SPI_initialize+0x120>
 8004394:	230c      	movs	r3, #12
 8004396:	e000      	b.n	800439a <USER_SPI_initialize+0x122>
 8004398:	2304      	movs	r3, #4
 800439a:	737b      	strb	r3, [r7, #13]
 800439c:	e02c      	b.n	80043f8 <USER_SPI_initialize+0x180>
				}
			}
		} else {	/* Not SDv2 card */
			if (send_cmd(ACMD41, 0) <= 1) 	{	/* SDv1 or MMC? */
 800439e:	2100      	movs	r1, #0
 80043a0:	20a9      	movs	r0, #169	; 0xa9
 80043a2:	f7ff fefa 	bl	800419a <send_cmd>
 80043a6:	4603      	mov	r3, r0
 80043a8:	2b01      	cmp	r3, #1
 80043aa:	d804      	bhi.n	80043b6 <USER_SPI_initialize+0x13e>
				ty = CT_SD1; cmd = ACMD41;	/* SDv1 (ACMD41(0)) */
 80043ac:	2302      	movs	r3, #2
 80043ae:	737b      	strb	r3, [r7, #13]
 80043b0:	23a9      	movs	r3, #169	; 0xa9
 80043b2:	73bb      	strb	r3, [r7, #14]
 80043b4:	e003      	b.n	80043be <USER_SPI_initialize+0x146>
			} else {
				ty = CT_MMC; cmd = CMD1;	/* MMCv3 (CMD1(0)) */
 80043b6:	2301      	movs	r3, #1
 80043b8:	737b      	strb	r3, [r7, #13]
 80043ba:	2301      	movs	r3, #1
 80043bc:	73bb      	strb	r3, [r7, #14]
			}
			while (SPI_Timer_Status() && send_cmd(cmd, 0)) ;		/* Wait for end of initialization */
 80043be:	bf00      	nop
 80043c0:	f7ff fde8 	bl	8003f94 <SPI_Timer_Status>
 80043c4:	4603      	mov	r3, r0
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d007      	beq.n	80043da <USER_SPI_initialize+0x162>
 80043ca:	7bbb      	ldrb	r3, [r7, #14]
 80043cc:	2100      	movs	r1, #0
 80043ce:	4618      	mov	r0, r3
 80043d0:	f7ff fee3 	bl	800419a <send_cmd>
 80043d4:	4603      	mov	r3, r0
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d1f2      	bne.n	80043c0 <USER_SPI_initialize+0x148>
			if (!SPI_Timer_Status() || send_cmd(CMD16, 512) != 0)	/* Set block length: 512 */
 80043da:	f7ff fddb 	bl	8003f94 <SPI_Timer_Status>
 80043de:	4603      	mov	r3, r0
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d007      	beq.n	80043f4 <USER_SPI_initialize+0x17c>
 80043e4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80043e8:	2010      	movs	r0, #16
 80043ea:	f7ff fed6 	bl	800419a <send_cmd>
 80043ee:	4603      	mov	r3, r0
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d001      	beq.n	80043f8 <USER_SPI_initialize+0x180>
				ty = 0;
 80043f4:	2300      	movs	r3, #0
 80043f6:	737b      	strb	r3, [r7, #13]
		}
	}
	CardType = ty;	/* Card type */
 80043f8:	4a14      	ldr	r2, [pc, #80]	; (800444c <USER_SPI_initialize+0x1d4>)
 80043fa:	7b7b      	ldrb	r3, [r7, #13]
 80043fc:	7013      	strb	r3, [r2, #0]
	despiselect();
 80043fe:	f7ff fe49 	bl	8004094 <despiselect>

	if (ty) {			/* OK */
 8004402:	7b7b      	ldrb	r3, [r7, #13]
 8004404:	2b00      	cmp	r3, #0
 8004406:	d012      	beq.n	800442e <USER_SPI_initialize+0x1b6>
		FCLK_FAST();			/* Set fast clock */
 8004408:	4b0f      	ldr	r3, [pc, #60]	; (8004448 <USER_SPI_initialize+0x1d0>)
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8004412:	4b0d      	ldr	r3, [pc, #52]	; (8004448 <USER_SPI_initialize+0x1d0>)
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	f042 0210 	orr.w	r2, r2, #16
 800441a:	601a      	str	r2, [r3, #0]
		Stat &= ~STA_NOINIT;	/* Clear STA_NOINIT flag */
 800441c:	4b09      	ldr	r3, [pc, #36]	; (8004444 <USER_SPI_initialize+0x1cc>)
 800441e:	781b      	ldrb	r3, [r3, #0]
 8004420:	b2db      	uxtb	r3, r3
 8004422:	f023 0301 	bic.w	r3, r3, #1
 8004426:	b2da      	uxtb	r2, r3
 8004428:	4b06      	ldr	r3, [pc, #24]	; (8004444 <USER_SPI_initialize+0x1cc>)
 800442a:	701a      	strb	r2, [r3, #0]
 800442c:	e002      	b.n	8004434 <USER_SPI_initialize+0x1bc>
	} else {			/* Failed */
		Stat = STA_NOINIT;
 800442e:	4b05      	ldr	r3, [pc, #20]	; (8004444 <USER_SPI_initialize+0x1cc>)
 8004430:	2201      	movs	r2, #1
 8004432:	701a      	strb	r2, [r3, #0]
	}

	return Stat;
 8004434:	4b03      	ldr	r3, [pc, #12]	; (8004444 <USER_SPI_initialize+0x1cc>)
 8004436:	781b      	ldrb	r3, [r3, #0]
 8004438:	b2db      	uxtb	r3, r3
}
 800443a:	4618      	mov	r0, r3
 800443c:	3714      	adds	r7, #20
 800443e:	46bd      	mov	sp, r7
 8004440:	bd90      	pop	{r4, r7, pc}
 8004442:	bf00      	nop
 8004444:	20000020 	.word	0x20000020
 8004448:	200001a4 	.word	0x200001a4
 800444c:	200002a0 	.word	0x200002a0

08004450 <USER_SPI_status>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_status (
	BYTE drv		/* Physical drive number (0) */
)
{
 8004450:	b480      	push	{r7}
 8004452:	b083      	sub	sp, #12
 8004454:	af00      	add	r7, sp, #0
 8004456:	4603      	mov	r3, r0
 8004458:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;		/* Supports only drive 0 */
 800445a:	79fb      	ldrb	r3, [r7, #7]
 800445c:	2b00      	cmp	r3, #0
 800445e:	d001      	beq.n	8004464 <USER_SPI_status+0x14>
 8004460:	2301      	movs	r3, #1
 8004462:	e002      	b.n	800446a <USER_SPI_status+0x1a>

	return Stat;	/* Return disk status */
 8004464:	4b04      	ldr	r3, [pc, #16]	; (8004478 <USER_SPI_status+0x28>)
 8004466:	781b      	ldrb	r3, [r3, #0]
 8004468:	b2db      	uxtb	r3, r3
}
 800446a:	4618      	mov	r0, r3
 800446c:	370c      	adds	r7, #12
 800446e:	46bd      	mov	sp, r7
 8004470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004474:	4770      	bx	lr
 8004476:	bf00      	nop
 8004478:	20000020 	.word	0x20000020

0800447c <USER_SPI_read>:
	BYTE drv,		/* Physical drive number (0) */
	BYTE *buff,		/* Pointer to the data buffer to store read data */
	DWORD sector,	/* Start sector number (LBA) */
	UINT count		/* Number of sectors to read (1..128) */
)
{
 800447c:	b580      	push	{r7, lr}
 800447e:	b084      	sub	sp, #16
 8004480:	af00      	add	r7, sp, #0
 8004482:	60b9      	str	r1, [r7, #8]
 8004484:	607a      	str	r2, [r7, #4]
 8004486:	603b      	str	r3, [r7, #0]
 8004488:	4603      	mov	r3, r0
 800448a:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 800448c:	7bfb      	ldrb	r3, [r7, #15]
 800448e:	2b00      	cmp	r3, #0
 8004490:	d102      	bne.n	8004498 <USER_SPI_read+0x1c>
 8004492:	683b      	ldr	r3, [r7, #0]
 8004494:	2b00      	cmp	r3, #0
 8004496:	d101      	bne.n	800449c <USER_SPI_read+0x20>
 8004498:	2304      	movs	r3, #4
 800449a:	e04d      	b.n	8004538 <USER_SPI_read+0xbc>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 800449c:	4b28      	ldr	r3, [pc, #160]	; (8004540 <USER_SPI_read+0xc4>)
 800449e:	781b      	ldrb	r3, [r3, #0]
 80044a0:	b2db      	uxtb	r3, r3
 80044a2:	f003 0301 	and.w	r3, r3, #1
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d001      	beq.n	80044ae <USER_SPI_read+0x32>
 80044aa:	2303      	movs	r3, #3
 80044ac:	e044      	b.n	8004538 <USER_SPI_read+0xbc>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ot BA conversion (byte addressing cards) */
 80044ae:	4b25      	ldr	r3, [pc, #148]	; (8004544 <USER_SPI_read+0xc8>)
 80044b0:	781b      	ldrb	r3, [r3, #0]
 80044b2:	f003 0308 	and.w	r3, r3, #8
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d102      	bne.n	80044c0 <USER_SPI_read+0x44>
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	025b      	lsls	r3, r3, #9
 80044be:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector read */
 80044c0:	683b      	ldr	r3, [r7, #0]
 80044c2:	2b01      	cmp	r3, #1
 80044c4:	d111      	bne.n	80044ea <USER_SPI_read+0x6e>
		if ((send_cmd(CMD17, sector) == 0)	/* READ_SINGLE_BLOCK */
 80044c6:	6879      	ldr	r1, [r7, #4]
 80044c8:	2011      	movs	r0, #17
 80044ca:	f7ff fe66 	bl	800419a <send_cmd>
 80044ce:	4603      	mov	r3, r0
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d129      	bne.n	8004528 <USER_SPI_read+0xac>
			&& rcvr_datablock(buff, 512)) {
 80044d4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80044d8:	68b8      	ldr	r0, [r7, #8]
 80044da:	f7ff fe03 	bl	80040e4 <rcvr_datablock>
 80044de:	4603      	mov	r3, r0
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d021      	beq.n	8004528 <USER_SPI_read+0xac>
			count = 0;
 80044e4:	2300      	movs	r3, #0
 80044e6:	603b      	str	r3, [r7, #0]
 80044e8:	e01e      	b.n	8004528 <USER_SPI_read+0xac>
		}
	}
	else {				/* Multiple sector read */
		if (send_cmd(CMD18, sector) == 0) {	/* READ_MULTIPLE_BLOCK */
 80044ea:	6879      	ldr	r1, [r7, #4]
 80044ec:	2012      	movs	r0, #18
 80044ee:	f7ff fe54 	bl	800419a <send_cmd>
 80044f2:	4603      	mov	r3, r0
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d117      	bne.n	8004528 <USER_SPI_read+0xac>
			do {
				if (!rcvr_datablock(buff, 512)) break;
 80044f8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80044fc:	68b8      	ldr	r0, [r7, #8]
 80044fe:	f7ff fdf1 	bl	80040e4 <rcvr_datablock>
 8004502:	4603      	mov	r3, r0
 8004504:	2b00      	cmp	r3, #0
 8004506:	d00a      	beq.n	800451e <USER_SPI_read+0xa2>
				buff += 512;
 8004508:	68bb      	ldr	r3, [r7, #8]
 800450a:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800450e:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8004510:	683b      	ldr	r3, [r7, #0]
 8004512:	3b01      	subs	r3, #1
 8004514:	603b      	str	r3, [r7, #0]
 8004516:	683b      	ldr	r3, [r7, #0]
 8004518:	2b00      	cmp	r3, #0
 800451a:	d1ed      	bne.n	80044f8 <USER_SPI_read+0x7c>
 800451c:	e000      	b.n	8004520 <USER_SPI_read+0xa4>
				if (!rcvr_datablock(buff, 512)) break;
 800451e:	bf00      	nop
			send_cmd(CMD12, 0);				/* STOP_TRANSMISSION */
 8004520:	2100      	movs	r1, #0
 8004522:	200c      	movs	r0, #12
 8004524:	f7ff fe39 	bl	800419a <send_cmd>
		}
	}
	despiselect();
 8004528:	f7ff fdb4 	bl	8004094 <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 800452c:	683b      	ldr	r3, [r7, #0]
 800452e:	2b00      	cmp	r3, #0
 8004530:	bf14      	ite	ne
 8004532:	2301      	movne	r3, #1
 8004534:	2300      	moveq	r3, #0
 8004536:	b2db      	uxtb	r3, r3
}
 8004538:	4618      	mov	r0, r3
 800453a:	3710      	adds	r7, #16
 800453c:	46bd      	mov	sp, r7
 800453e:	bd80      	pop	{r7, pc}
 8004540:	20000020 	.word	0x20000020
 8004544:	200002a0 	.word	0x200002a0

08004548 <USER_SPI_write>:
	BYTE drv,			/* Physical drive number (0) */
	const BYTE *buff,	/* Ponter to the data to write */
	DWORD sector,		/* Start sector number (LBA) */
	UINT count			/* Number of sectors to write (1..128) */
)
{
 8004548:	b580      	push	{r7, lr}
 800454a:	b084      	sub	sp, #16
 800454c:	af00      	add	r7, sp, #0
 800454e:	60b9      	str	r1, [r7, #8]
 8004550:	607a      	str	r2, [r7, #4]
 8004552:	603b      	str	r3, [r7, #0]
 8004554:	4603      	mov	r3, r0
 8004556:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 8004558:	7bfb      	ldrb	r3, [r7, #15]
 800455a:	2b00      	cmp	r3, #0
 800455c:	d102      	bne.n	8004564 <USER_SPI_write+0x1c>
 800455e:	683b      	ldr	r3, [r7, #0]
 8004560:	2b00      	cmp	r3, #0
 8004562:	d101      	bne.n	8004568 <USER_SPI_write+0x20>
 8004564:	2304      	movs	r3, #4
 8004566:	e063      	b.n	8004630 <USER_SPI_write+0xe8>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check drive status */
 8004568:	4b33      	ldr	r3, [pc, #204]	; (8004638 <USER_SPI_write+0xf0>)
 800456a:	781b      	ldrb	r3, [r3, #0]
 800456c:	b2db      	uxtb	r3, r3
 800456e:	f003 0301 	and.w	r3, r3, #1
 8004572:	2b00      	cmp	r3, #0
 8004574:	d001      	beq.n	800457a <USER_SPI_write+0x32>
 8004576:	2303      	movs	r3, #3
 8004578:	e05a      	b.n	8004630 <USER_SPI_write+0xe8>
	if (Stat & STA_PROTECT) return RES_WRPRT;	/* Check write protect */
 800457a:	4b2f      	ldr	r3, [pc, #188]	; (8004638 <USER_SPI_write+0xf0>)
 800457c:	781b      	ldrb	r3, [r3, #0]
 800457e:	b2db      	uxtb	r3, r3
 8004580:	f003 0304 	and.w	r3, r3, #4
 8004584:	2b00      	cmp	r3, #0
 8004586:	d001      	beq.n	800458c <USER_SPI_write+0x44>
 8004588:	2302      	movs	r3, #2
 800458a:	e051      	b.n	8004630 <USER_SPI_write+0xe8>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ==> BA conversion (byte addressing cards) */
 800458c:	4b2b      	ldr	r3, [pc, #172]	; (800463c <USER_SPI_write+0xf4>)
 800458e:	781b      	ldrb	r3, [r3, #0]
 8004590:	f003 0308 	and.w	r3, r3, #8
 8004594:	2b00      	cmp	r3, #0
 8004596:	d102      	bne.n	800459e <USER_SPI_write+0x56>
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	025b      	lsls	r3, r3, #9
 800459c:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector write */
 800459e:	683b      	ldr	r3, [r7, #0]
 80045a0:	2b01      	cmp	r3, #1
 80045a2:	d110      	bne.n	80045c6 <USER_SPI_write+0x7e>
		if ((send_cmd(CMD24, sector) == 0)	/* WRITE_BLOCK */
 80045a4:	6879      	ldr	r1, [r7, #4]
 80045a6:	2018      	movs	r0, #24
 80045a8:	f7ff fdf7 	bl	800419a <send_cmd>
 80045ac:	4603      	mov	r3, r0
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d136      	bne.n	8004620 <USER_SPI_write+0xd8>
			&& xmit_datablock(buff, 0xFE)) {
 80045b2:	21fe      	movs	r1, #254	; 0xfe
 80045b4:	68b8      	ldr	r0, [r7, #8]
 80045b6:	f7ff fdbe 	bl	8004136 <xmit_datablock>
 80045ba:	4603      	mov	r3, r0
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d02f      	beq.n	8004620 <USER_SPI_write+0xd8>
			count = 0;
 80045c0:	2300      	movs	r3, #0
 80045c2:	603b      	str	r3, [r7, #0]
 80045c4:	e02c      	b.n	8004620 <USER_SPI_write+0xd8>
		}
	}
	else {				/* Multiple sector write */
		if (CardType & CT_SDC) send_cmd(ACMD23, count);	/* Predefine number of sectors */
 80045c6:	4b1d      	ldr	r3, [pc, #116]	; (800463c <USER_SPI_write+0xf4>)
 80045c8:	781b      	ldrb	r3, [r3, #0]
 80045ca:	f003 0306 	and.w	r3, r3, #6
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d003      	beq.n	80045da <USER_SPI_write+0x92>
 80045d2:	6839      	ldr	r1, [r7, #0]
 80045d4:	2097      	movs	r0, #151	; 0x97
 80045d6:	f7ff fde0 	bl	800419a <send_cmd>
		if (send_cmd(CMD25, sector) == 0) {	/* WRITE_MULTIPLE_BLOCK */
 80045da:	6879      	ldr	r1, [r7, #4]
 80045dc:	2019      	movs	r0, #25
 80045de:	f7ff fddc 	bl	800419a <send_cmd>
 80045e2:	4603      	mov	r3, r0
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d11b      	bne.n	8004620 <USER_SPI_write+0xd8>
			do {
				if (!xmit_datablock(buff, 0xFC)) break;
 80045e8:	21fc      	movs	r1, #252	; 0xfc
 80045ea:	68b8      	ldr	r0, [r7, #8]
 80045ec:	f7ff fda3 	bl	8004136 <xmit_datablock>
 80045f0:	4603      	mov	r3, r0
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d00a      	beq.n	800460c <USER_SPI_write+0xc4>
				buff += 512;
 80045f6:	68bb      	ldr	r3, [r7, #8]
 80045f8:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80045fc:	60bb      	str	r3, [r7, #8]
			} while (--count);
 80045fe:	683b      	ldr	r3, [r7, #0]
 8004600:	3b01      	subs	r3, #1
 8004602:	603b      	str	r3, [r7, #0]
 8004604:	683b      	ldr	r3, [r7, #0]
 8004606:	2b00      	cmp	r3, #0
 8004608:	d1ee      	bne.n	80045e8 <USER_SPI_write+0xa0>
 800460a:	e000      	b.n	800460e <USER_SPI_write+0xc6>
				if (!xmit_datablock(buff, 0xFC)) break;
 800460c:	bf00      	nop
			if (!xmit_datablock(0, 0xFD)) count = 1;	/* STOP_TRAN token */
 800460e:	21fd      	movs	r1, #253	; 0xfd
 8004610:	2000      	movs	r0, #0
 8004612:	f7ff fd90 	bl	8004136 <xmit_datablock>
 8004616:	4603      	mov	r3, r0
 8004618:	2b00      	cmp	r3, #0
 800461a:	d101      	bne.n	8004620 <USER_SPI_write+0xd8>
 800461c:	2301      	movs	r3, #1
 800461e:	603b      	str	r3, [r7, #0]
		}
	}
	despiselect();
 8004620:	f7ff fd38 	bl	8004094 <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 8004624:	683b      	ldr	r3, [r7, #0]
 8004626:	2b00      	cmp	r3, #0
 8004628:	bf14      	ite	ne
 800462a:	2301      	movne	r3, #1
 800462c:	2300      	moveq	r3, #0
 800462e:	b2db      	uxtb	r3, r3
}
 8004630:	4618      	mov	r0, r3
 8004632:	3710      	adds	r7, #16
 8004634:	46bd      	mov	sp, r7
 8004636:	bd80      	pop	{r7, pc}
 8004638:	20000020 	.word	0x20000020
 800463c:	200002a0 	.word	0x200002a0

08004640 <USER_SPI_ioctl>:
inline DRESULT USER_SPI_ioctl (
	BYTE drv,		/* Physical drive number (0) */
	BYTE cmd,		/* Control command code */
	void *buff		/* Pointer to the conrtol data */
)
{
 8004640:	b580      	push	{r7, lr}
 8004642:	b08c      	sub	sp, #48	; 0x30
 8004644:	af00      	add	r7, sp, #0
 8004646:	4603      	mov	r3, r0
 8004648:	603a      	str	r2, [r7, #0]
 800464a:	71fb      	strb	r3, [r7, #7]
 800464c:	460b      	mov	r3, r1
 800464e:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	BYTE n, csd[16];
	DWORD *dp, st, ed, csize;


	if (drv) return RES_PARERR;					/* Check parameter */
 8004650:	79fb      	ldrb	r3, [r7, #7]
 8004652:	2b00      	cmp	r3, #0
 8004654:	d001      	beq.n	800465a <USER_SPI_ioctl+0x1a>
 8004656:	2304      	movs	r3, #4
 8004658:	e15a      	b.n	8004910 <USER_SPI_ioctl+0x2d0>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 800465a:	4baf      	ldr	r3, [pc, #700]	; (8004918 <USER_SPI_ioctl+0x2d8>)
 800465c:	781b      	ldrb	r3, [r3, #0]
 800465e:	b2db      	uxtb	r3, r3
 8004660:	f003 0301 	and.w	r3, r3, #1
 8004664:	2b00      	cmp	r3, #0
 8004666:	d001      	beq.n	800466c <USER_SPI_ioctl+0x2c>
 8004668:	2303      	movs	r3, #3
 800466a:	e151      	b.n	8004910 <USER_SPI_ioctl+0x2d0>

	res = RES_ERROR;
 800466c:	2301      	movs	r3, #1
 800466e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	switch (cmd) {
 8004672:	79bb      	ldrb	r3, [r7, #6]
 8004674:	2b04      	cmp	r3, #4
 8004676:	f200 8136 	bhi.w	80048e6 <USER_SPI_ioctl+0x2a6>
 800467a:	a201      	add	r2, pc, #4	; (adr r2, 8004680 <USER_SPI_ioctl+0x40>)
 800467c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004680:	08004695 	.word	0x08004695
 8004684:	080046a9 	.word	0x080046a9
 8004688:	080048e7 	.word	0x080048e7
 800468c:	08004755 	.word	0x08004755
 8004690:	0800484b 	.word	0x0800484b
	case CTRL_SYNC :		/* Wait for end of internal write process of the drive */
		if (spiselect()) res = RES_OK;
 8004694:	f7ff fd0c 	bl	80040b0 <spiselect>
 8004698:	4603      	mov	r3, r0
 800469a:	2b00      	cmp	r3, #0
 800469c:	f000 8127 	beq.w	80048ee <USER_SPI_ioctl+0x2ae>
 80046a0:	2300      	movs	r3, #0
 80046a2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		break;
 80046a6:	e122      	b.n	80048ee <USER_SPI_ioctl+0x2ae>

	case GET_SECTOR_COUNT :	/* Get drive capacity in unit of sector (DWORD) */
		if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {
 80046a8:	2100      	movs	r1, #0
 80046aa:	2009      	movs	r0, #9
 80046ac:	f7ff fd75 	bl	800419a <send_cmd>
 80046b0:	4603      	mov	r3, r0
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	f040 811d 	bne.w	80048f2 <USER_SPI_ioctl+0x2b2>
 80046b8:	f107 030c 	add.w	r3, r7, #12
 80046bc:	2110      	movs	r1, #16
 80046be:	4618      	mov	r0, r3
 80046c0:	f7ff fd10 	bl	80040e4 <rcvr_datablock>
 80046c4:	4603      	mov	r3, r0
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	f000 8113 	beq.w	80048f2 <USER_SPI_ioctl+0x2b2>
			if ((csd[0] >> 6) == 1) {	/* SDC ver 2.00 */
 80046cc:	7b3b      	ldrb	r3, [r7, #12]
 80046ce:	099b      	lsrs	r3, r3, #6
 80046d0:	b2db      	uxtb	r3, r3
 80046d2:	2b01      	cmp	r3, #1
 80046d4:	d111      	bne.n	80046fa <USER_SPI_ioctl+0xba>
				csize = csd[9] + ((WORD)csd[8] << 8) + ((DWORD)(csd[7] & 63) << 16) + 1;
 80046d6:	7d7b      	ldrb	r3, [r7, #21]
 80046d8:	461a      	mov	r2, r3
 80046da:	7d3b      	ldrb	r3, [r7, #20]
 80046dc:	021b      	lsls	r3, r3, #8
 80046de:	4413      	add	r3, r2
 80046e0:	461a      	mov	r2, r3
 80046e2:	7cfb      	ldrb	r3, [r7, #19]
 80046e4:	041b      	lsls	r3, r3, #16
 80046e6:	f403 137c 	and.w	r3, r3, #4128768	; 0x3f0000
 80046ea:	4413      	add	r3, r2
 80046ec:	3301      	adds	r3, #1
 80046ee:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << 10;
 80046f0:	69fb      	ldr	r3, [r7, #28]
 80046f2:	029a      	lsls	r2, r3, #10
 80046f4:	683b      	ldr	r3, [r7, #0]
 80046f6:	601a      	str	r2, [r3, #0]
 80046f8:	e028      	b.n	800474c <USER_SPI_ioctl+0x10c>
			} else {					/* SDC ver 1.XX or MMC ver 3 */
				n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 80046fa:	7c7b      	ldrb	r3, [r7, #17]
 80046fc:	f003 030f 	and.w	r3, r3, #15
 8004700:	b2da      	uxtb	r2, r3
 8004702:	7dbb      	ldrb	r3, [r7, #22]
 8004704:	09db      	lsrs	r3, r3, #7
 8004706:	b2db      	uxtb	r3, r3
 8004708:	4413      	add	r3, r2
 800470a:	b2da      	uxtb	r2, r3
 800470c:	7d7b      	ldrb	r3, [r7, #21]
 800470e:	005b      	lsls	r3, r3, #1
 8004710:	b2db      	uxtb	r3, r3
 8004712:	f003 0306 	and.w	r3, r3, #6
 8004716:	b2db      	uxtb	r3, r3
 8004718:	4413      	add	r3, r2
 800471a:	b2db      	uxtb	r3, r3
 800471c:	3302      	adds	r3, #2
 800471e:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
				csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
 8004722:	7d3b      	ldrb	r3, [r7, #20]
 8004724:	099b      	lsrs	r3, r3, #6
 8004726:	b2db      	uxtb	r3, r3
 8004728:	461a      	mov	r2, r3
 800472a:	7cfb      	ldrb	r3, [r7, #19]
 800472c:	009b      	lsls	r3, r3, #2
 800472e:	441a      	add	r2, r3
 8004730:	7cbb      	ldrb	r3, [r7, #18]
 8004732:	029b      	lsls	r3, r3, #10
 8004734:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004738:	4413      	add	r3, r2
 800473a:	3301      	adds	r3, #1
 800473c:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << (n - 9);
 800473e:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8004742:	3b09      	subs	r3, #9
 8004744:	69fa      	ldr	r2, [r7, #28]
 8004746:	409a      	lsls	r2, r3
 8004748:	683b      	ldr	r3, [r7, #0]
 800474a:	601a      	str	r2, [r3, #0]
			}
			res = RES_OK;
 800474c:	2300      	movs	r3, #0
 800474e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		}
		break;
 8004752:	e0ce      	b.n	80048f2 <USER_SPI_ioctl+0x2b2>

	case GET_BLOCK_SIZE :	/* Get erase block size in unit of sector (DWORD) */
		if (CardType & CT_SD2) {	/* SDC ver 2.00 */
 8004754:	4b71      	ldr	r3, [pc, #452]	; (800491c <USER_SPI_ioctl+0x2dc>)
 8004756:	781b      	ldrb	r3, [r3, #0]
 8004758:	f003 0304 	and.w	r3, r3, #4
 800475c:	2b00      	cmp	r3, #0
 800475e:	d031      	beq.n	80047c4 <USER_SPI_ioctl+0x184>
			if (send_cmd(ACMD13, 0) == 0) {	/* Read SD status */
 8004760:	2100      	movs	r1, #0
 8004762:	208d      	movs	r0, #141	; 0x8d
 8004764:	f7ff fd19 	bl	800419a <send_cmd>
 8004768:	4603      	mov	r3, r0
 800476a:	2b00      	cmp	r3, #0
 800476c:	f040 80c3 	bne.w	80048f6 <USER_SPI_ioctl+0x2b6>
				xchg_spi(0xFF);
 8004770:	20ff      	movs	r0, #255	; 0xff
 8004772:	f7ff fc25 	bl	8003fc0 <xchg_spi>
				if (rcvr_datablock(csd, 16)) {				/* Read partial block */
 8004776:	f107 030c 	add.w	r3, r7, #12
 800477a:	2110      	movs	r1, #16
 800477c:	4618      	mov	r0, r3
 800477e:	f7ff fcb1 	bl	80040e4 <rcvr_datablock>
 8004782:	4603      	mov	r3, r0
 8004784:	2b00      	cmp	r3, #0
 8004786:	f000 80b6 	beq.w	80048f6 <USER_SPI_ioctl+0x2b6>
					for (n = 64 - 16; n; n--) xchg_spi(0xFF);	/* Purge trailing data */
 800478a:	2330      	movs	r3, #48	; 0x30
 800478c:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 8004790:	e007      	b.n	80047a2 <USER_SPI_ioctl+0x162>
 8004792:	20ff      	movs	r0, #255	; 0xff
 8004794:	f7ff fc14 	bl	8003fc0 <xchg_spi>
 8004798:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800479c:	3b01      	subs	r3, #1
 800479e:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 80047a2:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d1f3      	bne.n	8004792 <USER_SPI_ioctl+0x152>
					*(DWORD*)buff = 16UL << (csd[10] >> 4);
 80047aa:	7dbb      	ldrb	r3, [r7, #22]
 80047ac:	091b      	lsrs	r3, r3, #4
 80047ae:	b2db      	uxtb	r3, r3
 80047b0:	461a      	mov	r2, r3
 80047b2:	2310      	movs	r3, #16
 80047b4:	fa03 f202 	lsl.w	r2, r3, r2
 80047b8:	683b      	ldr	r3, [r7, #0]
 80047ba:	601a      	str	r2, [r3, #0]
					res = RES_OK;
 80047bc:	2300      	movs	r3, #0
 80047be:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
				}
				res = RES_OK;
			}
		}
		break;
 80047c2:	e098      	b.n	80048f6 <USER_SPI_ioctl+0x2b6>
			if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {	/* Read CSD */
 80047c4:	2100      	movs	r1, #0
 80047c6:	2009      	movs	r0, #9
 80047c8:	f7ff fce7 	bl	800419a <send_cmd>
 80047cc:	4603      	mov	r3, r0
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	f040 8091 	bne.w	80048f6 <USER_SPI_ioctl+0x2b6>
 80047d4:	f107 030c 	add.w	r3, r7, #12
 80047d8:	2110      	movs	r1, #16
 80047da:	4618      	mov	r0, r3
 80047dc:	f7ff fc82 	bl	80040e4 <rcvr_datablock>
 80047e0:	4603      	mov	r3, r0
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	f000 8087 	beq.w	80048f6 <USER_SPI_ioctl+0x2b6>
				if (CardType & CT_SD1) {	/* SDC ver 1.XX */
 80047e8:	4b4c      	ldr	r3, [pc, #304]	; (800491c <USER_SPI_ioctl+0x2dc>)
 80047ea:	781b      	ldrb	r3, [r3, #0]
 80047ec:	f003 0302 	and.w	r3, r3, #2
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d012      	beq.n	800481a <USER_SPI_ioctl+0x1da>
					*(DWORD*)buff = (((csd[10] & 63) << 1) + ((WORD)(csd[11] & 128) >> 7) + 1) << ((csd[13] >> 6) - 1);
 80047f4:	7dbb      	ldrb	r3, [r7, #22]
 80047f6:	005b      	lsls	r3, r3, #1
 80047f8:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 80047fc:	7dfa      	ldrb	r2, [r7, #23]
 80047fe:	09d2      	lsrs	r2, r2, #7
 8004800:	b2d2      	uxtb	r2, r2
 8004802:	4413      	add	r3, r2
 8004804:	1c5a      	adds	r2, r3, #1
 8004806:	7e7b      	ldrb	r3, [r7, #25]
 8004808:	099b      	lsrs	r3, r3, #6
 800480a:	b2db      	uxtb	r3, r3
 800480c:	3b01      	subs	r3, #1
 800480e:	fa02 f303 	lsl.w	r3, r2, r3
 8004812:	461a      	mov	r2, r3
 8004814:	683b      	ldr	r3, [r7, #0]
 8004816:	601a      	str	r2, [r3, #0]
 8004818:	e013      	b.n	8004842 <USER_SPI_ioctl+0x202>
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
 800481a:	7dbb      	ldrb	r3, [r7, #22]
 800481c:	109b      	asrs	r3, r3, #2
 800481e:	b29b      	uxth	r3, r3
 8004820:	f003 031f 	and.w	r3, r3, #31
 8004824:	3301      	adds	r3, #1
 8004826:	7dfa      	ldrb	r2, [r7, #23]
 8004828:	00d2      	lsls	r2, r2, #3
 800482a:	f002 0218 	and.w	r2, r2, #24
 800482e:	7df9      	ldrb	r1, [r7, #23]
 8004830:	0949      	lsrs	r1, r1, #5
 8004832:	b2c9      	uxtb	r1, r1
 8004834:	440a      	add	r2, r1
 8004836:	3201      	adds	r2, #1
 8004838:	fb02 f303 	mul.w	r3, r2, r3
 800483c:	461a      	mov	r2, r3
 800483e:	683b      	ldr	r3, [r7, #0]
 8004840:	601a      	str	r2, [r3, #0]
				res = RES_OK;
 8004842:	2300      	movs	r3, #0
 8004844:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		break;
 8004848:	e055      	b.n	80048f6 <USER_SPI_ioctl+0x2b6>

	case CTRL_TRIM :	/* Erase a block of sectors (used when _USE_ERASE == 1) */
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 800484a:	4b34      	ldr	r3, [pc, #208]	; (800491c <USER_SPI_ioctl+0x2dc>)
 800484c:	781b      	ldrb	r3, [r3, #0]
 800484e:	f003 0306 	and.w	r3, r3, #6
 8004852:	2b00      	cmp	r3, #0
 8004854:	d051      	beq.n	80048fa <USER_SPI_ioctl+0x2ba>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 8004856:	f107 020c 	add.w	r2, r7, #12
 800485a:	79fb      	ldrb	r3, [r7, #7]
 800485c:	210b      	movs	r1, #11
 800485e:	4618      	mov	r0, r3
 8004860:	f7ff feee 	bl	8004640 <USER_SPI_ioctl>
 8004864:	4603      	mov	r3, r0
 8004866:	2b00      	cmp	r3, #0
 8004868:	d149      	bne.n	80048fe <USER_SPI_ioctl+0x2be>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 800486a:	7b3b      	ldrb	r3, [r7, #12]
 800486c:	099b      	lsrs	r3, r3, #6
 800486e:	b2db      	uxtb	r3, r3
 8004870:	2b00      	cmp	r3, #0
 8004872:	d104      	bne.n	800487e <USER_SPI_ioctl+0x23e>
 8004874:	7dbb      	ldrb	r3, [r7, #22]
 8004876:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800487a:	2b00      	cmp	r3, #0
 800487c:	d041      	beq.n	8004902 <USER_SPI_ioctl+0x2c2>
		dp = buff; st = dp[0]; ed = dp[1];				/* Load sector block */
 800487e:	683b      	ldr	r3, [r7, #0]
 8004880:	623b      	str	r3, [r7, #32]
 8004882:	6a3b      	ldr	r3, [r7, #32]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	62bb      	str	r3, [r7, #40]	; 0x28
 8004888:	6a3b      	ldr	r3, [r7, #32]
 800488a:	685b      	ldr	r3, [r3, #4]
 800488c:	627b      	str	r3, [r7, #36]	; 0x24
		if (!(CardType & CT_BLOCK)) {
 800488e:	4b23      	ldr	r3, [pc, #140]	; (800491c <USER_SPI_ioctl+0x2dc>)
 8004890:	781b      	ldrb	r3, [r3, #0]
 8004892:	f003 0308 	and.w	r3, r3, #8
 8004896:	2b00      	cmp	r3, #0
 8004898:	d105      	bne.n	80048a6 <USER_SPI_ioctl+0x266>
			st *= 512; ed *= 512;
 800489a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800489c:	025b      	lsls	r3, r3, #9
 800489e:	62bb      	str	r3, [r7, #40]	; 0x28
 80048a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048a2:	025b      	lsls	r3, r3, #9
 80048a4:	627b      	str	r3, [r7, #36]	; 0x24
		}
		if (send_cmd(CMD32, st) == 0 && send_cmd(CMD33, ed) == 0 && send_cmd(CMD38, 0) == 0 && wait_ready(30000)) {	/* Erase sector block */
 80048a6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80048a8:	2020      	movs	r0, #32
 80048aa:	f7ff fc76 	bl	800419a <send_cmd>
 80048ae:	4603      	mov	r3, r0
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d128      	bne.n	8004906 <USER_SPI_ioctl+0x2c6>
 80048b4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80048b6:	2021      	movs	r0, #33	; 0x21
 80048b8:	f7ff fc6f 	bl	800419a <send_cmd>
 80048bc:	4603      	mov	r3, r0
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d121      	bne.n	8004906 <USER_SPI_ioctl+0x2c6>
 80048c2:	2100      	movs	r1, #0
 80048c4:	2026      	movs	r0, #38	; 0x26
 80048c6:	f7ff fc68 	bl	800419a <send_cmd>
 80048ca:	4603      	mov	r3, r0
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d11a      	bne.n	8004906 <USER_SPI_ioctl+0x2c6>
 80048d0:	f247 5030 	movw	r0, #30000	; 0x7530
 80048d4:	f7ff fbba 	bl	800404c <wait_ready>
 80048d8:	4603      	mov	r3, r0
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d013      	beq.n	8004906 <USER_SPI_ioctl+0x2c6>
			res = RES_OK;	/* FatFs does not check result of this command */
 80048de:	2300      	movs	r3, #0
 80048e0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		}
		break;
 80048e4:	e00f      	b.n	8004906 <USER_SPI_ioctl+0x2c6>

	default:
		res = RES_PARERR;
 80048e6:	2304      	movs	r3, #4
 80048e8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80048ec:	e00c      	b.n	8004908 <USER_SPI_ioctl+0x2c8>
		break;
 80048ee:	bf00      	nop
 80048f0:	e00a      	b.n	8004908 <USER_SPI_ioctl+0x2c8>
		break;
 80048f2:	bf00      	nop
 80048f4:	e008      	b.n	8004908 <USER_SPI_ioctl+0x2c8>
		break;
 80048f6:	bf00      	nop
 80048f8:	e006      	b.n	8004908 <USER_SPI_ioctl+0x2c8>
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 80048fa:	bf00      	nop
 80048fc:	e004      	b.n	8004908 <USER_SPI_ioctl+0x2c8>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 80048fe:	bf00      	nop
 8004900:	e002      	b.n	8004908 <USER_SPI_ioctl+0x2c8>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 8004902:	bf00      	nop
 8004904:	e000      	b.n	8004908 <USER_SPI_ioctl+0x2c8>
		break;
 8004906:	bf00      	nop
	}

	despiselect();
 8004908:	f7ff fbc4 	bl	8004094 <despiselect>

	return res;
 800490c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8004910:	4618      	mov	r0, r3
 8004912:	3730      	adds	r7, #48	; 0x30
 8004914:	46bd      	mov	sp, r7
 8004916:	bd80      	pop	{r7, pc}
 8004918:	20000020 	.word	0x20000020
 800491c:	200002a0 	.word	0x200002a0

08004920 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive nmuber to identify the drive */
)
{
 8004920:	b580      	push	{r7, lr}
 8004922:	b084      	sub	sp, #16
 8004924:	af00      	add	r7, sp, #0
 8004926:	4603      	mov	r3, r0
 8004928:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;
  
  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800492a:	79fb      	ldrb	r3, [r7, #7]
 800492c:	4a08      	ldr	r2, [pc, #32]	; (8004950 <disk_status+0x30>)
 800492e:	009b      	lsls	r3, r3, #2
 8004930:	4413      	add	r3, r2
 8004932:	685b      	ldr	r3, [r3, #4]
 8004934:	685b      	ldr	r3, [r3, #4]
 8004936:	79fa      	ldrb	r2, [r7, #7]
 8004938:	4905      	ldr	r1, [pc, #20]	; (8004950 <disk_status+0x30>)
 800493a:	440a      	add	r2, r1
 800493c:	7a12      	ldrb	r2, [r2, #8]
 800493e:	4610      	mov	r0, r2
 8004940:	4798      	blx	r3
 8004942:	4603      	mov	r3, r0
 8004944:	73fb      	strb	r3, [r7, #15]
  return stat;
 8004946:	7bfb      	ldrb	r3, [r7, #15]
}
 8004948:	4618      	mov	r0, r3
 800494a:	3710      	adds	r7, #16
 800494c:	46bd      	mov	sp, r7
 800494e:	bd80      	pop	{r7, pc}
 8004950:	200002cc 	.word	0x200002cc

08004954 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8004954:	b580      	push	{r7, lr}
 8004956:	b084      	sub	sp, #16
 8004958:	af00      	add	r7, sp, #0
 800495a:	4603      	mov	r3, r0
 800495c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800495e:	2300      	movs	r3, #0
 8004960:	73fb      	strb	r3, [r7, #15]
  
  if(disk.is_initialized[pdrv] == 0)
 8004962:	79fb      	ldrb	r3, [r7, #7]
 8004964:	4a0d      	ldr	r2, [pc, #52]	; (800499c <disk_initialize+0x48>)
 8004966:	5cd3      	ldrb	r3, [r2, r3]
 8004968:	2b00      	cmp	r3, #0
 800496a:	d111      	bne.n	8004990 <disk_initialize+0x3c>
  { 
    disk.is_initialized[pdrv] = 1;
 800496c:	79fb      	ldrb	r3, [r7, #7]
 800496e:	4a0b      	ldr	r2, [pc, #44]	; (800499c <disk_initialize+0x48>)
 8004970:	2101      	movs	r1, #1
 8004972:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8004974:	79fb      	ldrb	r3, [r7, #7]
 8004976:	4a09      	ldr	r2, [pc, #36]	; (800499c <disk_initialize+0x48>)
 8004978:	009b      	lsls	r3, r3, #2
 800497a:	4413      	add	r3, r2
 800497c:	685b      	ldr	r3, [r3, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	79fa      	ldrb	r2, [r7, #7]
 8004982:	4906      	ldr	r1, [pc, #24]	; (800499c <disk_initialize+0x48>)
 8004984:	440a      	add	r2, r1
 8004986:	7a12      	ldrb	r2, [r2, #8]
 8004988:	4610      	mov	r0, r2
 800498a:	4798      	blx	r3
 800498c:	4603      	mov	r3, r0
 800498e:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8004990:	7bfb      	ldrb	r3, [r7, #15]
}
 8004992:	4618      	mov	r0, r3
 8004994:	3710      	adds	r7, #16
 8004996:	46bd      	mov	sp, r7
 8004998:	bd80      	pop	{r7, pc}
 800499a:	bf00      	nop
 800499c:	200002cc 	.word	0x200002cc

080049a0 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 80049a0:	b590      	push	{r4, r7, lr}
 80049a2:	b087      	sub	sp, #28
 80049a4:	af00      	add	r7, sp, #0
 80049a6:	60b9      	str	r1, [r7, #8]
 80049a8:	607a      	str	r2, [r7, #4]
 80049aa:	603b      	str	r3, [r7, #0]
 80049ac:	4603      	mov	r3, r0
 80049ae:	73fb      	strb	r3, [r7, #15]
  DRESULT res;
 
  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 80049b0:	7bfb      	ldrb	r3, [r7, #15]
 80049b2:	4a0a      	ldr	r2, [pc, #40]	; (80049dc <disk_read+0x3c>)
 80049b4:	009b      	lsls	r3, r3, #2
 80049b6:	4413      	add	r3, r2
 80049b8:	685b      	ldr	r3, [r3, #4]
 80049ba:	689c      	ldr	r4, [r3, #8]
 80049bc:	7bfb      	ldrb	r3, [r7, #15]
 80049be:	4a07      	ldr	r2, [pc, #28]	; (80049dc <disk_read+0x3c>)
 80049c0:	4413      	add	r3, r2
 80049c2:	7a18      	ldrb	r0, [r3, #8]
 80049c4:	683b      	ldr	r3, [r7, #0]
 80049c6:	687a      	ldr	r2, [r7, #4]
 80049c8:	68b9      	ldr	r1, [r7, #8]
 80049ca:	47a0      	blx	r4
 80049cc:	4603      	mov	r3, r0
 80049ce:	75fb      	strb	r3, [r7, #23]
  return res;
 80049d0:	7dfb      	ldrb	r3, [r7, #23]
}
 80049d2:	4618      	mov	r0, r3
 80049d4:	371c      	adds	r7, #28
 80049d6:	46bd      	mov	sp, r7
 80049d8:	bd90      	pop	{r4, r7, pc}
 80049da:	bf00      	nop
 80049dc:	200002cc 	.word	0x200002cc

080049e0 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 80049e0:	b590      	push	{r4, r7, lr}
 80049e2:	b087      	sub	sp, #28
 80049e4:	af00      	add	r7, sp, #0
 80049e6:	60b9      	str	r1, [r7, #8]
 80049e8:	607a      	str	r2, [r7, #4]
 80049ea:	603b      	str	r3, [r7, #0]
 80049ec:	4603      	mov	r3, r0
 80049ee:	73fb      	strb	r3, [r7, #15]
  DRESULT res;
  
  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 80049f0:	7bfb      	ldrb	r3, [r7, #15]
 80049f2:	4a0a      	ldr	r2, [pc, #40]	; (8004a1c <disk_write+0x3c>)
 80049f4:	009b      	lsls	r3, r3, #2
 80049f6:	4413      	add	r3, r2
 80049f8:	685b      	ldr	r3, [r3, #4]
 80049fa:	68dc      	ldr	r4, [r3, #12]
 80049fc:	7bfb      	ldrb	r3, [r7, #15]
 80049fe:	4a07      	ldr	r2, [pc, #28]	; (8004a1c <disk_write+0x3c>)
 8004a00:	4413      	add	r3, r2
 8004a02:	7a18      	ldrb	r0, [r3, #8]
 8004a04:	683b      	ldr	r3, [r7, #0]
 8004a06:	687a      	ldr	r2, [r7, #4]
 8004a08:	68b9      	ldr	r1, [r7, #8]
 8004a0a:	47a0      	blx	r4
 8004a0c:	4603      	mov	r3, r0
 8004a0e:	75fb      	strb	r3, [r7, #23]
  return res;
 8004a10:	7dfb      	ldrb	r3, [r7, #23]
}
 8004a12:	4618      	mov	r0, r3
 8004a14:	371c      	adds	r7, #28
 8004a16:	46bd      	mov	sp, r7
 8004a18:	bd90      	pop	{r4, r7, pc}
 8004a1a:	bf00      	nop
 8004a1c:	200002cc 	.word	0x200002cc

08004a20 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8004a20:	b580      	push	{r7, lr}
 8004a22:	b084      	sub	sp, #16
 8004a24:	af00      	add	r7, sp, #0
 8004a26:	4603      	mov	r3, r0
 8004a28:	603a      	str	r2, [r7, #0]
 8004a2a:	71fb      	strb	r3, [r7, #7]
 8004a2c:	460b      	mov	r3, r1
 8004a2e:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8004a30:	79fb      	ldrb	r3, [r7, #7]
 8004a32:	4a09      	ldr	r2, [pc, #36]	; (8004a58 <disk_ioctl+0x38>)
 8004a34:	009b      	lsls	r3, r3, #2
 8004a36:	4413      	add	r3, r2
 8004a38:	685b      	ldr	r3, [r3, #4]
 8004a3a:	691b      	ldr	r3, [r3, #16]
 8004a3c:	79fa      	ldrb	r2, [r7, #7]
 8004a3e:	4906      	ldr	r1, [pc, #24]	; (8004a58 <disk_ioctl+0x38>)
 8004a40:	440a      	add	r2, r1
 8004a42:	7a10      	ldrb	r0, [r2, #8]
 8004a44:	79b9      	ldrb	r1, [r7, #6]
 8004a46:	683a      	ldr	r2, [r7, #0]
 8004a48:	4798      	blx	r3
 8004a4a:	4603      	mov	r3, r0
 8004a4c:	73fb      	strb	r3, [r7, #15]
  return res;
 8004a4e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a50:	4618      	mov	r0, r3
 8004a52:	3710      	adds	r7, #16
 8004a54:	46bd      	mov	sp, r7
 8004a56:	bd80      	pop	{r7, pc}
 8004a58:	200002cc 	.word	0x200002cc

08004a5c <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8004a5c:	b480      	push	{r7}
 8004a5e:	b087      	sub	sp, #28
 8004a60:	af00      	add	r7, sp, #0
 8004a62:	60f8      	str	r0, [r7, #12]
 8004a64:	60b9      	str	r1, [r7, #8]
 8004a66:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8004a6c:	68bb      	ldr	r3, [r7, #8]
 8004a6e:	613b      	str	r3, [r7, #16]
		*(int*)d = *(int*)s;
		d += sizeof (int); s += sizeof (int);
		cnt -= sizeof (int);
	}
#endif
	while (cnt--)
 8004a70:	e007      	b.n	8004a82 <mem_cpy+0x26>
		*d++ = *s++;
 8004a72:	693a      	ldr	r2, [r7, #16]
 8004a74:	1c53      	adds	r3, r2, #1
 8004a76:	613b      	str	r3, [r7, #16]
 8004a78:	697b      	ldr	r3, [r7, #20]
 8004a7a:	1c59      	adds	r1, r3, #1
 8004a7c:	6179      	str	r1, [r7, #20]
 8004a7e:	7812      	ldrb	r2, [r2, #0]
 8004a80:	701a      	strb	r2, [r3, #0]
	while (cnt--)
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	1e5a      	subs	r2, r3, #1
 8004a86:	607a      	str	r2, [r7, #4]
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d1f2      	bne.n	8004a72 <mem_cpy+0x16>
}
 8004a8c:	bf00      	nop
 8004a8e:	bf00      	nop
 8004a90:	371c      	adds	r7, #28
 8004a92:	46bd      	mov	sp, r7
 8004a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a98:	4770      	bx	lr

08004a9a <mem_set>:

/* Fill memory */
static
void mem_set (void* dst, int val, UINT cnt) {
 8004a9a:	b480      	push	{r7}
 8004a9c:	b087      	sub	sp, #28
 8004a9e:	af00      	add	r7, sp, #0
 8004aa0:	60f8      	str	r0, [r7, #12]
 8004aa2:	60b9      	str	r1, [r7, #8]
 8004aa4:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	617b      	str	r3, [r7, #20]

	while (cnt--)
 8004aaa:	e005      	b.n	8004ab8 <mem_set+0x1e>
		*d++ = (BYTE)val;
 8004aac:	697b      	ldr	r3, [r7, #20]
 8004aae:	1c5a      	adds	r2, r3, #1
 8004ab0:	617a      	str	r2, [r7, #20]
 8004ab2:	68ba      	ldr	r2, [r7, #8]
 8004ab4:	b2d2      	uxtb	r2, r2
 8004ab6:	701a      	strb	r2, [r3, #0]
	while (cnt--)
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	1e5a      	subs	r2, r3, #1
 8004abc:	607a      	str	r2, [r7, #4]
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d1f4      	bne.n	8004aac <mem_set+0x12>
}
 8004ac2:	bf00      	nop
 8004ac4:	bf00      	nop
 8004ac6:	371c      	adds	r7, #28
 8004ac8:	46bd      	mov	sp, r7
 8004aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ace:	4770      	bx	lr

08004ad0 <mem_cmp>:

/* Compare memory to memory */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {
 8004ad0:	b480      	push	{r7}
 8004ad2:	b089      	sub	sp, #36	; 0x24
 8004ad4:	af00      	add	r7, sp, #0
 8004ad6:	60f8      	str	r0, [r7, #12]
 8004ad8:	60b9      	str	r1, [r7, #8]
 8004ada:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	61fb      	str	r3, [r7, #28]
 8004ae0:	68bb      	ldr	r3, [r7, #8]
 8004ae2:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8004ae4:	2300      	movs	r3, #0
 8004ae6:	617b      	str	r3, [r7, #20]

	while (cnt-- && (r = *d++ - *s++) == 0) ;
 8004ae8:	bf00      	nop
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	1e5a      	subs	r2, r3, #1
 8004aee:	607a      	str	r2, [r7, #4]
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d00d      	beq.n	8004b10 <mem_cmp+0x40>
 8004af4:	69fb      	ldr	r3, [r7, #28]
 8004af6:	1c5a      	adds	r2, r3, #1
 8004af8:	61fa      	str	r2, [r7, #28]
 8004afa:	781b      	ldrb	r3, [r3, #0]
 8004afc:	4619      	mov	r1, r3
 8004afe:	69bb      	ldr	r3, [r7, #24]
 8004b00:	1c5a      	adds	r2, r3, #1
 8004b02:	61ba      	str	r2, [r7, #24]
 8004b04:	781b      	ldrb	r3, [r3, #0]
 8004b06:	1acb      	subs	r3, r1, r3
 8004b08:	617b      	str	r3, [r7, #20]
 8004b0a:	697b      	ldr	r3, [r7, #20]
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d0ec      	beq.n	8004aea <mem_cmp+0x1a>
	return r;
 8004b10:	697b      	ldr	r3, [r7, #20]
}
 8004b12:	4618      	mov	r0, r3
 8004b14:	3724      	adds	r7, #36	; 0x24
 8004b16:	46bd      	mov	sp, r7
 8004b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b1c:	4770      	bx	lr

08004b1e <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {
 8004b1e:	b480      	push	{r7}
 8004b20:	b083      	sub	sp, #12
 8004b22:	af00      	add	r7, sp, #0
 8004b24:	6078      	str	r0, [r7, #4]
 8004b26:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8004b28:	e002      	b.n	8004b30 <chk_chr+0x12>
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	3301      	adds	r3, #1
 8004b2e:	607b      	str	r3, [r7, #4]
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	781b      	ldrb	r3, [r3, #0]
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d005      	beq.n	8004b44 <chk_chr+0x26>
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	781b      	ldrb	r3, [r3, #0]
 8004b3c:	461a      	mov	r2, r3
 8004b3e:	683b      	ldr	r3, [r7, #0]
 8004b40:	4293      	cmp	r3, r2
 8004b42:	d1f2      	bne.n	8004b2a <chk_chr+0xc>
	return *str;
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	781b      	ldrb	r3, [r3, #0]
}
 8004b48:	4618      	mov	r0, r3
 8004b4a:	370c      	adds	r7, #12
 8004b4c:	46bd      	mov	sp, r7
 8004b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b52:	4770      	bx	lr

08004b54 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8004b54:	b480      	push	{r7}
 8004b56:	b085      	sub	sp, #20
 8004b58:	af00      	add	r7, sp, #0
 8004b5a:	6078      	str	r0, [r7, #4]
 8004b5c:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8004b5e:	2300      	movs	r3, #0
 8004b60:	60bb      	str	r3, [r7, #8]
 8004b62:	68bb      	ldr	r3, [r7, #8]
 8004b64:	60fb      	str	r3, [r7, #12]
 8004b66:	e038      	b.n	8004bda <chk_lock+0x86>
		if (Files[i].fs) {	/* Existing entry */
 8004b68:	4930      	ldr	r1, [pc, #192]	; (8004c2c <chk_lock+0xd8>)
 8004b6a:	68fa      	ldr	r2, [r7, #12]
 8004b6c:	4613      	mov	r3, r2
 8004b6e:	005b      	lsls	r3, r3, #1
 8004b70:	4413      	add	r3, r2
 8004b72:	009b      	lsls	r3, r3, #2
 8004b74:	440b      	add	r3, r1
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d029      	beq.n	8004bd0 <chk_lock+0x7c>
			if (Files[i].fs == dp->fs &&	 	/* Check if the object matched with an open object */
 8004b7c:	492b      	ldr	r1, [pc, #172]	; (8004c2c <chk_lock+0xd8>)
 8004b7e:	68fa      	ldr	r2, [r7, #12]
 8004b80:	4613      	mov	r3, r2
 8004b82:	005b      	lsls	r3, r3, #1
 8004b84:	4413      	add	r3, r2
 8004b86:	009b      	lsls	r3, r3, #2
 8004b88:	440b      	add	r3, r1
 8004b8a:	681a      	ldr	r2, [r3, #0]
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8004b92:	429a      	cmp	r2, r3
 8004b94:	d11e      	bne.n	8004bd4 <chk_lock+0x80>
				Files[i].clu == dp->sclust &&
 8004b96:	4925      	ldr	r1, [pc, #148]	; (8004c2c <chk_lock+0xd8>)
 8004b98:	68fa      	ldr	r2, [r7, #12]
 8004b9a:	4613      	mov	r3, r2
 8004b9c:	005b      	lsls	r3, r3, #1
 8004b9e:	4413      	add	r3, r2
 8004ba0:	009b      	lsls	r3, r3, #2
 8004ba2:	440b      	add	r3, r1
 8004ba4:	3304      	adds	r3, #4
 8004ba6:	681a      	ldr	r2, [r3, #0]
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
			if (Files[i].fs == dp->fs &&	 	/* Check if the object matched with an open object */
 8004bae:	429a      	cmp	r2, r3
 8004bb0:	d110      	bne.n	8004bd4 <chk_lock+0x80>
				Files[i].idx == dp->index) break;
 8004bb2:	491e      	ldr	r1, [pc, #120]	; (8004c2c <chk_lock+0xd8>)
 8004bb4:	68fa      	ldr	r2, [r7, #12]
 8004bb6:	4613      	mov	r3, r2
 8004bb8:	005b      	lsls	r3, r3, #1
 8004bba:	4413      	add	r3, r2
 8004bbc:	009b      	lsls	r3, r3, #2
 8004bbe:	440b      	add	r3, r1
 8004bc0:	3308      	adds	r3, #8
 8004bc2:	881a      	ldrh	r2, [r3, #0]
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	f8b3 3206 	ldrh.w	r3, [r3, #518]	; 0x206
				Files[i].clu == dp->sclust &&
 8004bca:	429a      	cmp	r2, r3
 8004bcc:	d102      	bne.n	8004bd4 <chk_lock+0x80>
				Files[i].idx == dp->index) break;
 8004bce:	e007      	b.n	8004be0 <chk_lock+0x8c>
		} else {			/* Blank entry */
			be = 1;
 8004bd0:	2301      	movs	r3, #1
 8004bd2:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	3301      	adds	r3, #1
 8004bd8:	60fb      	str	r3, [r7, #12]
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	2b01      	cmp	r3, #1
 8004bde:	d9c3      	bls.n	8004b68 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK)	/* The object is not opened */
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	2b02      	cmp	r3, #2
 8004be4:	d109      	bne.n	8004bfa <chk_lock+0xa6>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8004be6:	68bb      	ldr	r3, [r7, #8]
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d102      	bne.n	8004bf2 <chk_lock+0x9e>
 8004bec:	683b      	ldr	r3, [r7, #0]
 8004bee:	2b02      	cmp	r3, #2
 8004bf0:	d101      	bne.n	8004bf6 <chk_lock+0xa2>
 8004bf2:	2300      	movs	r3, #0
 8004bf4:	e013      	b.n	8004c1e <chk_lock+0xca>
 8004bf6:	2312      	movs	r3, #18
 8004bf8:	e011      	b.n	8004c1e <chk_lock+0xca>

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8004bfa:	683b      	ldr	r3, [r7, #0]
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d10b      	bne.n	8004c18 <chk_lock+0xc4>
 8004c00:	490a      	ldr	r1, [pc, #40]	; (8004c2c <chk_lock+0xd8>)
 8004c02:	68fa      	ldr	r2, [r7, #12]
 8004c04:	4613      	mov	r3, r2
 8004c06:	005b      	lsls	r3, r3, #1
 8004c08:	4413      	add	r3, r2
 8004c0a:	009b      	lsls	r3, r3, #2
 8004c0c:	440b      	add	r3, r1
 8004c0e:	330a      	adds	r3, #10
 8004c10:	881b      	ldrh	r3, [r3, #0]
 8004c12:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004c16:	d101      	bne.n	8004c1c <chk_lock+0xc8>
 8004c18:	2310      	movs	r3, #16
 8004c1a:	e000      	b.n	8004c1e <chk_lock+0xca>
 8004c1c:	2300      	movs	r3, #0
}
 8004c1e:	4618      	mov	r0, r3
 8004c20:	3714      	adds	r7, #20
 8004c22:	46bd      	mov	sp, r7
 8004c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c28:	4770      	bx	lr
 8004c2a:	bf00      	nop
 8004c2c:	200002b4 	.word	0x200002b4

08004c30 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8004c30:	b480      	push	{r7}
 8004c32:	b083      	sub	sp, #12
 8004c34:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8004c36:	2300      	movs	r3, #0
 8004c38:	607b      	str	r3, [r7, #4]
 8004c3a:	e002      	b.n	8004c42 <enq_lock+0x12>
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	3301      	adds	r3, #1
 8004c40:	607b      	str	r3, [r7, #4]
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	2b01      	cmp	r3, #1
 8004c46:	d809      	bhi.n	8004c5c <enq_lock+0x2c>
 8004c48:	490a      	ldr	r1, [pc, #40]	; (8004c74 <enq_lock+0x44>)
 8004c4a:	687a      	ldr	r2, [r7, #4]
 8004c4c:	4613      	mov	r3, r2
 8004c4e:	005b      	lsls	r3, r3, #1
 8004c50:	4413      	add	r3, r2
 8004c52:	009b      	lsls	r3, r3, #2
 8004c54:	440b      	add	r3, r1
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d1ef      	bne.n	8004c3c <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	2b02      	cmp	r3, #2
 8004c60:	bf14      	ite	ne
 8004c62:	2301      	movne	r3, #1
 8004c64:	2300      	moveq	r3, #0
 8004c66:	b2db      	uxtb	r3, r3
}
 8004c68:	4618      	mov	r0, r3
 8004c6a:	370c      	adds	r7, #12
 8004c6c:	46bd      	mov	sp, r7
 8004c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c72:	4770      	bx	lr
 8004c74:	200002b4 	.word	0x200002b4

08004c78 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8004c78:	b480      	push	{r7}
 8004c7a:	b085      	sub	sp, #20
 8004c7c:	af00      	add	r7, sp, #0
 8004c7e:	6078      	str	r0, [r7, #4]
 8004c80:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8004c82:	2300      	movs	r3, #0
 8004c84:	60fb      	str	r3, [r7, #12]
 8004c86:	e02b      	b.n	8004ce0 <inc_lock+0x68>
		if (Files[i].fs == dp->fs &&
 8004c88:	4956      	ldr	r1, [pc, #344]	; (8004de4 <inc_lock+0x16c>)
 8004c8a:	68fa      	ldr	r2, [r7, #12]
 8004c8c:	4613      	mov	r3, r2
 8004c8e:	005b      	lsls	r3, r3, #1
 8004c90:	4413      	add	r3, r2
 8004c92:	009b      	lsls	r3, r3, #2
 8004c94:	440b      	add	r3, r1
 8004c96:	681a      	ldr	r2, [r3, #0]
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8004c9e:	429a      	cmp	r2, r3
 8004ca0:	d11b      	bne.n	8004cda <inc_lock+0x62>
			Files[i].clu == dp->sclust &&
 8004ca2:	4950      	ldr	r1, [pc, #320]	; (8004de4 <inc_lock+0x16c>)
 8004ca4:	68fa      	ldr	r2, [r7, #12]
 8004ca6:	4613      	mov	r3, r2
 8004ca8:	005b      	lsls	r3, r3, #1
 8004caa:	4413      	add	r3, r2
 8004cac:	009b      	lsls	r3, r3, #2
 8004cae:	440b      	add	r3, r1
 8004cb0:	3304      	adds	r3, #4
 8004cb2:	681a      	ldr	r2, [r3, #0]
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
		if (Files[i].fs == dp->fs &&
 8004cba:	429a      	cmp	r2, r3
 8004cbc:	d10d      	bne.n	8004cda <inc_lock+0x62>
			Files[i].idx == dp->index) break;
 8004cbe:	4949      	ldr	r1, [pc, #292]	; (8004de4 <inc_lock+0x16c>)
 8004cc0:	68fa      	ldr	r2, [r7, #12]
 8004cc2:	4613      	mov	r3, r2
 8004cc4:	005b      	lsls	r3, r3, #1
 8004cc6:	4413      	add	r3, r2
 8004cc8:	009b      	lsls	r3, r3, #2
 8004cca:	440b      	add	r3, r1
 8004ccc:	3308      	adds	r3, #8
 8004cce:	881a      	ldrh	r2, [r3, #0]
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	f8b3 3206 	ldrh.w	r3, [r3, #518]	; 0x206
			Files[i].clu == dp->sclust &&
 8004cd6:	429a      	cmp	r2, r3
 8004cd8:	d006      	beq.n	8004ce8 <inc_lock+0x70>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	3301      	adds	r3, #1
 8004cde:	60fb      	str	r3, [r7, #12]
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	2b01      	cmp	r3, #1
 8004ce4:	d9d0      	bls.n	8004c88 <inc_lock+0x10>
 8004ce6:	e000      	b.n	8004cea <inc_lock+0x72>
			Files[i].idx == dp->index) break;
 8004ce8:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	2b02      	cmp	r3, #2
 8004cee:	d145      	bne.n	8004d7c <inc_lock+0x104>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8004cf0:	2300      	movs	r3, #0
 8004cf2:	60fb      	str	r3, [r7, #12]
 8004cf4:	e002      	b.n	8004cfc <inc_lock+0x84>
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	3301      	adds	r3, #1
 8004cfa:	60fb      	str	r3, [r7, #12]
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	2b01      	cmp	r3, #1
 8004d00:	d809      	bhi.n	8004d16 <inc_lock+0x9e>
 8004d02:	4938      	ldr	r1, [pc, #224]	; (8004de4 <inc_lock+0x16c>)
 8004d04:	68fa      	ldr	r2, [r7, #12]
 8004d06:	4613      	mov	r3, r2
 8004d08:	005b      	lsls	r3, r3, #1
 8004d0a:	4413      	add	r3, r2
 8004d0c:	009b      	lsls	r3, r3, #2
 8004d0e:	440b      	add	r3, r1
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d1ef      	bne.n	8004cf6 <inc_lock+0x7e>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	2b02      	cmp	r3, #2
 8004d1a:	d101      	bne.n	8004d20 <inc_lock+0xa8>
 8004d1c:	2300      	movs	r3, #0
 8004d1e:	e05a      	b.n	8004dd6 <inc_lock+0x15e>
		Files[i].fs = dp->fs;
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	f8d3 1200 	ldr.w	r1, [r3, #512]	; 0x200
 8004d26:	482f      	ldr	r0, [pc, #188]	; (8004de4 <inc_lock+0x16c>)
 8004d28:	68fa      	ldr	r2, [r7, #12]
 8004d2a:	4613      	mov	r3, r2
 8004d2c:	005b      	lsls	r3, r3, #1
 8004d2e:	4413      	add	r3, r2
 8004d30:	009b      	lsls	r3, r3, #2
 8004d32:	4403      	add	r3, r0
 8004d34:	6019      	str	r1, [r3, #0]
		Files[i].clu = dp->sclust;
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	f8d3 1208 	ldr.w	r1, [r3, #520]	; 0x208
 8004d3c:	4829      	ldr	r0, [pc, #164]	; (8004de4 <inc_lock+0x16c>)
 8004d3e:	68fa      	ldr	r2, [r7, #12]
 8004d40:	4613      	mov	r3, r2
 8004d42:	005b      	lsls	r3, r3, #1
 8004d44:	4413      	add	r3, r2
 8004d46:	009b      	lsls	r3, r3, #2
 8004d48:	4403      	add	r3, r0
 8004d4a:	3304      	adds	r3, #4
 8004d4c:	6019      	str	r1, [r3, #0]
		Files[i].idx = dp->index;
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	f8b3 0206 	ldrh.w	r0, [r3, #518]	; 0x206
 8004d54:	4923      	ldr	r1, [pc, #140]	; (8004de4 <inc_lock+0x16c>)
 8004d56:	68fa      	ldr	r2, [r7, #12]
 8004d58:	4613      	mov	r3, r2
 8004d5a:	005b      	lsls	r3, r3, #1
 8004d5c:	4413      	add	r3, r2
 8004d5e:	009b      	lsls	r3, r3, #2
 8004d60:	440b      	add	r3, r1
 8004d62:	3308      	adds	r3, #8
 8004d64:	4602      	mov	r2, r0
 8004d66:	801a      	strh	r2, [r3, #0]
		Files[i].ctr = 0;
 8004d68:	491e      	ldr	r1, [pc, #120]	; (8004de4 <inc_lock+0x16c>)
 8004d6a:	68fa      	ldr	r2, [r7, #12]
 8004d6c:	4613      	mov	r3, r2
 8004d6e:	005b      	lsls	r3, r3, #1
 8004d70:	4413      	add	r3, r2
 8004d72:	009b      	lsls	r3, r3, #2
 8004d74:	440b      	add	r3, r1
 8004d76:	330a      	adds	r3, #10
 8004d78:	2200      	movs	r2, #0
 8004d7a:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8004d7c:	683b      	ldr	r3, [r7, #0]
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d00c      	beq.n	8004d9c <inc_lock+0x124>
 8004d82:	4918      	ldr	r1, [pc, #96]	; (8004de4 <inc_lock+0x16c>)
 8004d84:	68fa      	ldr	r2, [r7, #12]
 8004d86:	4613      	mov	r3, r2
 8004d88:	005b      	lsls	r3, r3, #1
 8004d8a:	4413      	add	r3, r2
 8004d8c:	009b      	lsls	r3, r3, #2
 8004d8e:	440b      	add	r3, r1
 8004d90:	330a      	adds	r3, #10
 8004d92:	881b      	ldrh	r3, [r3, #0]
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d001      	beq.n	8004d9c <inc_lock+0x124>
 8004d98:	2300      	movs	r3, #0
 8004d9a:	e01c      	b.n	8004dd6 <inc_lock+0x15e>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8004d9c:	683b      	ldr	r3, [r7, #0]
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d10b      	bne.n	8004dba <inc_lock+0x142>
 8004da2:	4910      	ldr	r1, [pc, #64]	; (8004de4 <inc_lock+0x16c>)
 8004da4:	68fa      	ldr	r2, [r7, #12]
 8004da6:	4613      	mov	r3, r2
 8004da8:	005b      	lsls	r3, r3, #1
 8004daa:	4413      	add	r3, r2
 8004dac:	009b      	lsls	r3, r3, #2
 8004dae:	440b      	add	r3, r1
 8004db0:	330a      	adds	r3, #10
 8004db2:	881b      	ldrh	r3, [r3, #0]
 8004db4:	3301      	adds	r3, #1
 8004db6:	b299      	uxth	r1, r3
 8004db8:	e001      	b.n	8004dbe <inc_lock+0x146>
 8004dba:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004dbe:	4809      	ldr	r0, [pc, #36]	; (8004de4 <inc_lock+0x16c>)
 8004dc0:	68fa      	ldr	r2, [r7, #12]
 8004dc2:	4613      	mov	r3, r2
 8004dc4:	005b      	lsls	r3, r3, #1
 8004dc6:	4413      	add	r3, r2
 8004dc8:	009b      	lsls	r3, r3, #2
 8004dca:	4403      	add	r3, r0
 8004dcc:	330a      	adds	r3, #10
 8004dce:	460a      	mov	r2, r1
 8004dd0:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	3301      	adds	r3, #1
}
 8004dd6:	4618      	mov	r0, r3
 8004dd8:	3714      	adds	r7, #20
 8004dda:	46bd      	mov	sp, r7
 8004ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004de0:	4770      	bx	lr
 8004de2:	bf00      	nop
 8004de4:	200002b4 	.word	0x200002b4

08004de8 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8004de8:	b480      	push	{r7}
 8004dea:	b085      	sub	sp, #20
 8004dec:	af00      	add	r7, sp, #0
 8004dee:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	3b01      	subs	r3, #1
 8004df4:	607b      	str	r3, [r7, #4]
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	2b01      	cmp	r3, #1
 8004dfa:	d82e      	bhi.n	8004e5a <dec_lock+0x72>
		n = Files[i].ctr;
 8004dfc:	491b      	ldr	r1, [pc, #108]	; (8004e6c <dec_lock+0x84>)
 8004dfe:	687a      	ldr	r2, [r7, #4]
 8004e00:	4613      	mov	r3, r2
 8004e02:	005b      	lsls	r3, r3, #1
 8004e04:	4413      	add	r3, r2
 8004e06:	009b      	lsls	r3, r3, #2
 8004e08:	440b      	add	r3, r1
 8004e0a:	330a      	adds	r3, #10
 8004e0c:	881b      	ldrh	r3, [r3, #0]
 8004e0e:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8004e10:	89fb      	ldrh	r3, [r7, #14]
 8004e12:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004e16:	d101      	bne.n	8004e1c <dec_lock+0x34>
 8004e18:	2300      	movs	r3, #0
 8004e1a:	81fb      	strh	r3, [r7, #14]
		if (n) n--;					/* Decrement read mode open count */
 8004e1c:	89fb      	ldrh	r3, [r7, #14]
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d002      	beq.n	8004e28 <dec_lock+0x40>
 8004e22:	89fb      	ldrh	r3, [r7, #14]
 8004e24:	3b01      	subs	r3, #1
 8004e26:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8004e28:	4910      	ldr	r1, [pc, #64]	; (8004e6c <dec_lock+0x84>)
 8004e2a:	687a      	ldr	r2, [r7, #4]
 8004e2c:	4613      	mov	r3, r2
 8004e2e:	005b      	lsls	r3, r3, #1
 8004e30:	4413      	add	r3, r2
 8004e32:	009b      	lsls	r3, r3, #2
 8004e34:	440b      	add	r3, r1
 8004e36:	330a      	adds	r3, #10
 8004e38:	89fa      	ldrh	r2, [r7, #14]
 8004e3a:	801a      	strh	r2, [r3, #0]
		if (!n) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8004e3c:	89fb      	ldrh	r3, [r7, #14]
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d108      	bne.n	8004e54 <dec_lock+0x6c>
 8004e42:	490a      	ldr	r1, [pc, #40]	; (8004e6c <dec_lock+0x84>)
 8004e44:	687a      	ldr	r2, [r7, #4]
 8004e46:	4613      	mov	r3, r2
 8004e48:	005b      	lsls	r3, r3, #1
 8004e4a:	4413      	add	r3, r2
 8004e4c:	009b      	lsls	r3, r3, #2
 8004e4e:	440b      	add	r3, r1
 8004e50:	2200      	movs	r2, #0
 8004e52:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8004e54:	2300      	movs	r3, #0
 8004e56:	737b      	strb	r3, [r7, #13]
 8004e58:	e001      	b.n	8004e5e <dec_lock+0x76>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8004e5a:	2302      	movs	r3, #2
 8004e5c:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8004e5e:	7b7b      	ldrb	r3, [r7, #13]
}
 8004e60:	4618      	mov	r0, r3
 8004e62:	3714      	adds	r7, #20
 8004e64:	46bd      	mov	sp, r7
 8004e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e6a:	4770      	bx	lr
 8004e6c:	200002b4 	.word	0x200002b4

08004e70 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8004e70:	b480      	push	{r7}
 8004e72:	b085      	sub	sp, #20
 8004e74:	af00      	add	r7, sp, #0
 8004e76:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8004e78:	2300      	movs	r3, #0
 8004e7a:	60fb      	str	r3, [r7, #12]
 8004e7c:	e016      	b.n	8004eac <clear_lock+0x3c>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8004e7e:	4910      	ldr	r1, [pc, #64]	; (8004ec0 <clear_lock+0x50>)
 8004e80:	68fa      	ldr	r2, [r7, #12]
 8004e82:	4613      	mov	r3, r2
 8004e84:	005b      	lsls	r3, r3, #1
 8004e86:	4413      	add	r3, r2
 8004e88:	009b      	lsls	r3, r3, #2
 8004e8a:	440b      	add	r3, r1
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	687a      	ldr	r2, [r7, #4]
 8004e90:	429a      	cmp	r2, r3
 8004e92:	d108      	bne.n	8004ea6 <clear_lock+0x36>
 8004e94:	490a      	ldr	r1, [pc, #40]	; (8004ec0 <clear_lock+0x50>)
 8004e96:	68fa      	ldr	r2, [r7, #12]
 8004e98:	4613      	mov	r3, r2
 8004e9a:	005b      	lsls	r3, r3, #1
 8004e9c:	4413      	add	r3, r2
 8004e9e:	009b      	lsls	r3, r3, #2
 8004ea0:	440b      	add	r3, r1
 8004ea2:	2200      	movs	r2, #0
 8004ea4:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	3301      	adds	r3, #1
 8004eaa:	60fb      	str	r3, [r7, #12]
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	2b01      	cmp	r3, #1
 8004eb0:	d9e5      	bls.n	8004e7e <clear_lock+0xe>
	}
}
 8004eb2:	bf00      	nop
 8004eb4:	bf00      	nop
 8004eb6:	3714      	adds	r7, #20
 8004eb8:	46bd      	mov	sp, r7
 8004eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ebe:	4770      	bx	lr
 8004ec0:	200002b4 	.word	0x200002b4

08004ec4 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (
	FATFS* fs		/* File system object */
)
{
 8004ec4:	b580      	push	{r7, lr}
 8004ec6:	b086      	sub	sp, #24
 8004ec8:	af00      	add	r7, sp, #0
 8004eca:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8004ecc:	2300      	movs	r3, #0
 8004ece:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	f893 3204 	ldrb.w	r3, [r3, #516]	; 0x204
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d038      	beq.n	8004f4c <sync_window+0x88>
		wsect = fs->winsect;	/* Current sector number */
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	f8d3 322c 	ldr.w	r3, [r3, #556]	; 0x22c
 8004ee0:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win.d8, wsect, 1) != RES_OK) {
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 8004ee8:	6879      	ldr	r1, [r7, #4]
 8004eea:	2301      	movs	r3, #1
 8004eec:	697a      	ldr	r2, [r7, #20]
 8004eee:	f7ff fd77 	bl	80049e0 <disk_write>
 8004ef2:	4603      	mov	r3, r0
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d002      	beq.n	8004efe <sync_window+0x3a>
			res = FR_DISK_ERR;
 8004ef8:	2301      	movs	r3, #1
 8004efa:	73fb      	strb	r3, [r7, #15]
 8004efc:	e026      	b.n	8004f4c <sync_window+0x88>
		} else {
			fs->wflag = 0;
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	2200      	movs	r2, #0
 8004f02:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 8004f0c:	697a      	ldr	r2, [r7, #20]
 8004f0e:	1ad2      	subs	r2, r2, r3
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8004f16:	429a      	cmp	r2, r3
 8004f18:	d218      	bcs.n	8004f4c <sync_window+0x88>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	f893 3203 	ldrb.w	r3, [r3, #515]	; 0x203
 8004f20:	613b      	str	r3, [r7, #16]
 8004f22:	e010      	b.n	8004f46 <sync_window+0x82>
					wsect += fs->fsize;
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8004f2a:	697a      	ldr	r2, [r7, #20]
 8004f2c:	4413      	add	r3, r2
 8004f2e:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win.d8, wsect, 1);
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 8004f36:	6879      	ldr	r1, [r7, #4]
 8004f38:	2301      	movs	r3, #1
 8004f3a:	697a      	ldr	r2, [r7, #20]
 8004f3c:	f7ff fd50 	bl	80049e0 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8004f40:	693b      	ldr	r3, [r7, #16]
 8004f42:	3b01      	subs	r3, #1
 8004f44:	613b      	str	r3, [r7, #16]
 8004f46:	693b      	ldr	r3, [r7, #16]
 8004f48:	2b01      	cmp	r3, #1
 8004f4a:	d8eb      	bhi.n	8004f24 <sync_window+0x60>
				}
			}
		}
	}
	return res;
 8004f4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f4e:	4618      	mov	r0, r3
 8004f50:	3718      	adds	r7, #24
 8004f52:	46bd      	mov	sp, r7
 8004f54:	bd80      	pop	{r7, pc}

08004f56 <move_window>:
static
FRESULT move_window (
	FATFS* fs,		/* File system object */
	DWORD sector	/* Sector number to make appearance in the fs->win[].d8 */
)
{
 8004f56:	b580      	push	{r7, lr}
 8004f58:	b084      	sub	sp, #16
 8004f5a:	af00      	add	r7, sp, #0
 8004f5c:	6078      	str	r0, [r7, #4]
 8004f5e:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8004f60:	2300      	movs	r3, #0
 8004f62:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	f8d3 322c 	ldr.w	r3, [r3, #556]	; 0x22c
 8004f6a:	683a      	ldr	r2, [r7, #0]
 8004f6c:	429a      	cmp	r2, r3
 8004f6e:	d01b      	beq.n	8004fa8 <move_window+0x52>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8004f70:	6878      	ldr	r0, [r7, #4]
 8004f72:	f7ff ffa7 	bl	8004ec4 <sync_window>
 8004f76:	4603      	mov	r3, r0
 8004f78:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8004f7a:	7bfb      	ldrb	r3, [r7, #15]
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d113      	bne.n	8004fa8 <move_window+0x52>
			if (disk_read(fs->drv, fs->win.d8, sector, 1) != RES_OK) {
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 8004f86:	6879      	ldr	r1, [r7, #4]
 8004f88:	2301      	movs	r3, #1
 8004f8a:	683a      	ldr	r2, [r7, #0]
 8004f8c:	f7ff fd08 	bl	80049a0 <disk_read>
 8004f90:	4603      	mov	r3, r0
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d004      	beq.n	8004fa0 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8004f96:	f04f 33ff 	mov.w	r3, #4294967295
 8004f9a:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8004f9c:	2301      	movs	r3, #1
 8004f9e:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	683a      	ldr	r2, [r7, #0]
 8004fa4:	f8c3 222c 	str.w	r2, [r3, #556]	; 0x22c
		}
	}
	return res;
 8004fa8:	7bfb      	ldrb	r3, [r7, #15]
}
 8004faa:	4618      	mov	r0, r3
 8004fac:	3710      	adds	r7, #16
 8004fae:	46bd      	mov	sp, r7
 8004fb0:	bd80      	pop	{r7, pc}

08004fb2 <sync_fs>:
#if !_FS_READONLY
static
FRESULT sync_fs (	/* FR_OK: successful, FR_DISK_ERR: failed */
	FATFS* fs		/* File system object */
)
{
 8004fb2:	b580      	push	{r7, lr}
 8004fb4:	b084      	sub	sp, #16
 8004fb6:	af00      	add	r7, sp, #0
 8004fb8:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8004fba:	6878      	ldr	r0, [r7, #4]
 8004fbc:	f7ff ff82 	bl	8004ec4 <sync_window>
 8004fc0:	4603      	mov	r3, r0
 8004fc2:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8004fc4:	7bfb      	ldrb	r3, [r7, #15]
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	f040 809b 	bne.w	8005102 <sync_fs+0x150>
		/* Update FSINFO sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8004fd2:	2b03      	cmp	r3, #3
 8004fd4:	f040 8088 	bne.w	80050e8 <sync_fs+0x136>
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	f893 3205 	ldrb.w	r3, [r3, #517]	; 0x205
 8004fde:	2b01      	cmp	r3, #1
 8004fe0:	f040 8082 	bne.w	80050e8 <sync_fs+0x136>
			/* Create FSINFO structure */
			mem_set(fs->win.d8, 0, SS(fs));
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004fea:	2100      	movs	r1, #0
 8004fec:	4618      	mov	r0, r3
 8004fee:	f7ff fd54 	bl	8004a9a <mem_set>
			ST_WORD(fs->win.d8 + BS_55AA, 0xAA55);
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	2255      	movs	r2, #85	; 0x55
 8004ff6:	f883 21fe 	strb.w	r2, [r3, #510]	; 0x1fe
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	22aa      	movs	r2, #170	; 0xaa
 8004ffe:	f883 21ff 	strb.w	r2, [r3, #511]	; 0x1ff
			ST_DWORD(fs->win.d8 + FSI_LeadSig, 0x41615252);
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	2252      	movs	r2, #82	; 0x52
 8005006:	701a      	strb	r2, [r3, #0]
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	2252      	movs	r2, #82	; 0x52
 800500c:	705a      	strb	r2, [r3, #1]
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	2261      	movs	r2, #97	; 0x61
 8005012:	709a      	strb	r2, [r3, #2]
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	2241      	movs	r2, #65	; 0x41
 8005018:	70da      	strb	r2, [r3, #3]
			ST_DWORD(fs->win.d8 + FSI_StrucSig, 0x61417272);
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	2272      	movs	r2, #114	; 0x72
 800501e:	f883 21e4 	strb.w	r2, [r3, #484]	; 0x1e4
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	2272      	movs	r2, #114	; 0x72
 8005026:	f883 21e5 	strb.w	r2, [r3, #485]	; 0x1e5
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	2241      	movs	r2, #65	; 0x41
 800502e:	f883 21e6 	strb.w	r2, [r3, #486]	; 0x1e6
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	2261      	movs	r2, #97	; 0x61
 8005036:	f883 21e7 	strb.w	r2, [r3, #487]	; 0x1e7
			ST_DWORD(fs->win.d8 + FSI_Free_Count, fs->free_clust);
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8005040:	b2da      	uxtb	r2, r3
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	f883 21e8 	strb.w	r2, [r3, #488]	; 0x1e8
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800504e:	b29b      	uxth	r3, r3
 8005050:	0a1b      	lsrs	r3, r3, #8
 8005052:	b29b      	uxth	r3, r3
 8005054:	b2da      	uxtb	r2, r3
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	f883 21e9 	strb.w	r2, [r3, #489]	; 0x1e9
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8005062:	0c1b      	lsrs	r3, r3, #16
 8005064:	b2da      	uxtb	r2, r3
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	f883 21ea 	strb.w	r2, [r3, #490]	; 0x1ea
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8005072:	0e1b      	lsrs	r3, r3, #24
 8005074:	b2da      	uxtb	r2, r3
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	f883 21eb 	strb.w	r2, [r3, #491]	; 0x1eb
			ST_DWORD(fs->win.d8 + FSI_Nxt_Free, fs->last_clust);
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8005082:	b2da      	uxtb	r2, r3
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	f883 21ec 	strb.w	r2, [r3, #492]	; 0x1ec
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8005090:	b29b      	uxth	r3, r3
 8005092:	0a1b      	lsrs	r3, r3, #8
 8005094:	b29b      	uxth	r3, r3
 8005096:	b2da      	uxtb	r2, r3
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	f883 21ed 	strb.w	r2, [r3, #493]	; 0x1ed
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 80050a4:	0c1b      	lsrs	r3, r3, #16
 80050a6:	b2da      	uxtb	r2, r3
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	f883 21ee 	strb.w	r2, [r3, #494]	; 0x1ee
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 80050b4:	0e1b      	lsrs	r3, r3, #24
 80050b6:	b2da      	uxtb	r2, r3
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	f883 21ef 	strb.w	r2, [r3, #495]	; 0x1ef
			/* Write it into the FSINFO sector */
			fs->winsect = fs->volbase + 1;
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 80050c4:	1c5a      	adds	r2, r3, #1
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	f8c3 222c 	str.w	r2, [r3, #556]	; 0x22c
			disk_write(fs->drv, fs->win.d8, fs->winsect, 1);
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 80050d2:	6879      	ldr	r1, [r7, #4]
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	f8d3 222c 	ldr.w	r2, [r3, #556]	; 0x22c
 80050da:	2301      	movs	r3, #1
 80050dc:	f7ff fc80 	bl	80049e0 <disk_write>
			fs->fsi_flag = 0;
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	2200      	movs	r2, #0
 80050e4:	f883 2205 	strb.w	r2, [r3, #517]	; 0x205
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK)
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 80050ee:	2200      	movs	r2, #0
 80050f0:	2100      	movs	r1, #0
 80050f2:	4618      	mov	r0, r3
 80050f4:	f7ff fc94 	bl	8004a20 <disk_ioctl>
 80050f8:	4603      	mov	r3, r0
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d001      	beq.n	8005102 <sync_fs+0x150>
			res = FR_DISK_ERR;
 80050fe:	2301      	movs	r3, #1
 8005100:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8005102:	7bfb      	ldrb	r3, [r7, #15]
}
 8005104:	4618      	mov	r0, r3
 8005106:	3710      	adds	r7, #16
 8005108:	46bd      	mov	sp, r7
 800510a:	bd80      	pop	{r7, pc}

0800510c <clust2sect>:

DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800510c:	b480      	push	{r7}
 800510e:	b083      	sub	sp, #12
 8005110:	af00      	add	r7, sp, #0
 8005112:	6078      	str	r0, [r7, #4]
 8005114:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8005116:	683b      	ldr	r3, [r7, #0]
 8005118:	3b02      	subs	r3, #2
 800511a:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8005122:	3b02      	subs	r3, #2
 8005124:	683a      	ldr	r2, [r7, #0]
 8005126:	429a      	cmp	r2, r3
 8005128:	d301      	bcc.n	800512e <clust2sect+0x22>
 800512a:	2300      	movs	r3, #0
 800512c:	e00a      	b.n	8005144 <clust2sect+0x38>
	return clst * fs->csize + fs->database;
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 8005134:	461a      	mov	r2, r3
 8005136:	683b      	ldr	r3, [r7, #0]
 8005138:	fb03 f202 	mul.w	r2, r3, r2
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	f8d3 3228 	ldr.w	r3, [r3, #552]	; 0x228
 8005142:	4413      	add	r3, r2
}
 8005144:	4618      	mov	r0, r3
 8005146:	370c      	adds	r7, #12
 8005148:	46bd      	mov	sp, r7
 800514a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800514e:	4770      	bx	lr

08005150 <get_fat>:

DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x0FFFFFFF:Cluster status */
	FATFS* fs,	/* File system object */
	DWORD clst	/* FAT index number (cluster number) to get the value */
)
{
 8005150:	b580      	push	{r7, lr}
 8005152:	b086      	sub	sp, #24
 8005154:	af00      	add	r7, sp, #0
 8005156:	6078      	str	r0, [r7, #4]
 8005158:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	BYTE *p;
	DWORD val;


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 800515a:	683b      	ldr	r3, [r7, #0]
 800515c:	2b01      	cmp	r3, #1
 800515e:	d905      	bls.n	800516c <get_fat+0x1c>
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8005166:	683a      	ldr	r2, [r7, #0]
 8005168:	429a      	cmp	r2, r3
 800516a:	d302      	bcc.n	8005172 <get_fat+0x22>
		val = 1;	/* Internal error */
 800516c:	2301      	movs	r3, #1
 800516e:	617b      	str	r3, [r7, #20]
 8005170:	e0a3      	b.n	80052ba <get_fat+0x16a>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8005172:	f04f 33ff 	mov.w	r3, #4294967295
 8005176:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800517e:	2b03      	cmp	r3, #3
 8005180:	d068      	beq.n	8005254 <get_fat+0x104>
 8005182:	2b03      	cmp	r3, #3
 8005184:	f300 808f 	bgt.w	80052a6 <get_fat+0x156>
 8005188:	2b01      	cmp	r3, #1
 800518a:	d002      	beq.n	8005192 <get_fat+0x42>
 800518c:	2b02      	cmp	r3, #2
 800518e:	d040      	beq.n	8005212 <get_fat+0xc2>
 8005190:	e089      	b.n	80052a6 <get_fat+0x156>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8005192:	683b      	ldr	r3, [r7, #0]
 8005194:	60fb      	str	r3, [r7, #12]
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	085b      	lsrs	r3, r3, #1
 800519a:	68fa      	ldr	r2, [r7, #12]
 800519c:	4413      	add	r3, r2
 800519e:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	f8d3 2220 	ldr.w	r2, [r3, #544]	; 0x220
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	0a5b      	lsrs	r3, r3, #9
 80051aa:	4413      	add	r3, r2
 80051ac:	4619      	mov	r1, r3
 80051ae:	6878      	ldr	r0, [r7, #4]
 80051b0:	f7ff fed1 	bl	8004f56 <move_window>
 80051b4:	4603      	mov	r3, r0
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d178      	bne.n	80052ac <get_fat+0x15c>
			wc = fs->win.d8[bc++ % SS(fs)];
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	1c5a      	adds	r2, r3, #1
 80051be:	60fa      	str	r2, [r7, #12]
 80051c0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80051c4:	687a      	ldr	r2, [r7, #4]
 80051c6:	5cd3      	ldrb	r3, [r2, r3]
 80051c8:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	f8d3 2220 	ldr.w	r2, [r3, #544]	; 0x220
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	0a5b      	lsrs	r3, r3, #9
 80051d4:	4413      	add	r3, r2
 80051d6:	4619      	mov	r1, r3
 80051d8:	6878      	ldr	r0, [r7, #4]
 80051da:	f7ff febc 	bl	8004f56 <move_window>
 80051de:	4603      	mov	r3, r0
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	d165      	bne.n	80052b0 <get_fat+0x160>
			wc |= fs->win.d8[bc % SS(fs)] << 8;
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80051ea:	687a      	ldr	r2, [r7, #4]
 80051ec:	5cd3      	ldrb	r3, [r2, r3]
 80051ee:	021b      	lsls	r3, r3, #8
 80051f0:	461a      	mov	r2, r3
 80051f2:	68bb      	ldr	r3, [r7, #8]
 80051f4:	4313      	orrs	r3, r2
 80051f6:	60bb      	str	r3, [r7, #8]
			val = clst & 1 ? wc >> 4 : (wc & 0xFFF);
 80051f8:	683b      	ldr	r3, [r7, #0]
 80051fa:	f003 0301 	and.w	r3, r3, #1
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d002      	beq.n	8005208 <get_fat+0xb8>
 8005202:	68bb      	ldr	r3, [r7, #8]
 8005204:	091b      	lsrs	r3, r3, #4
 8005206:	e002      	b.n	800520e <get_fat+0xbe>
 8005208:	68bb      	ldr	r3, [r7, #8]
 800520a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800520e:	617b      	str	r3, [r7, #20]
			break;
 8005210:	e053      	b.n	80052ba <get_fat+0x16a>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	f8d3 2220 	ldr.w	r2, [r3, #544]	; 0x220
 8005218:	683b      	ldr	r3, [r7, #0]
 800521a:	0a1b      	lsrs	r3, r3, #8
 800521c:	4413      	add	r3, r2
 800521e:	4619      	mov	r1, r3
 8005220:	6878      	ldr	r0, [r7, #4]
 8005222:	f7ff fe98 	bl	8004f56 <move_window>
 8005226:	4603      	mov	r3, r0
 8005228:	2b00      	cmp	r3, #0
 800522a:	d143      	bne.n	80052b4 <get_fat+0x164>
			p = &fs->win.d8[clst * 2 % SS(fs)];
 800522c:	683b      	ldr	r3, [r7, #0]
 800522e:	005b      	lsls	r3, r3, #1
 8005230:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8005234:	687a      	ldr	r2, [r7, #4]
 8005236:	4413      	add	r3, r2
 8005238:	613b      	str	r3, [r7, #16]
			val = LD_WORD(p);
 800523a:	693b      	ldr	r3, [r7, #16]
 800523c:	3301      	adds	r3, #1
 800523e:	781b      	ldrb	r3, [r3, #0]
 8005240:	021b      	lsls	r3, r3, #8
 8005242:	b21a      	sxth	r2, r3
 8005244:	693b      	ldr	r3, [r7, #16]
 8005246:	781b      	ldrb	r3, [r3, #0]
 8005248:	b21b      	sxth	r3, r3
 800524a:	4313      	orrs	r3, r2
 800524c:	b21b      	sxth	r3, r3
 800524e:	b29b      	uxth	r3, r3
 8005250:	617b      	str	r3, [r7, #20]
			break;
 8005252:	e032      	b.n	80052ba <get_fat+0x16a>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	f8d3 2220 	ldr.w	r2, [r3, #544]	; 0x220
 800525a:	683b      	ldr	r3, [r7, #0]
 800525c:	09db      	lsrs	r3, r3, #7
 800525e:	4413      	add	r3, r2
 8005260:	4619      	mov	r1, r3
 8005262:	6878      	ldr	r0, [r7, #4]
 8005264:	f7ff fe77 	bl	8004f56 <move_window>
 8005268:	4603      	mov	r3, r0
 800526a:	2b00      	cmp	r3, #0
 800526c:	d124      	bne.n	80052b8 <get_fat+0x168>
			p = &fs->win.d8[clst * 4 % SS(fs)];
 800526e:	683b      	ldr	r3, [r7, #0]
 8005270:	009b      	lsls	r3, r3, #2
 8005272:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8005276:	687a      	ldr	r2, [r7, #4]
 8005278:	4413      	add	r3, r2
 800527a:	613b      	str	r3, [r7, #16]
			val = LD_DWORD(p) & 0x0FFFFFFF;
 800527c:	693b      	ldr	r3, [r7, #16]
 800527e:	3303      	adds	r3, #3
 8005280:	781b      	ldrb	r3, [r3, #0]
 8005282:	061a      	lsls	r2, r3, #24
 8005284:	693b      	ldr	r3, [r7, #16]
 8005286:	3302      	adds	r3, #2
 8005288:	781b      	ldrb	r3, [r3, #0]
 800528a:	041b      	lsls	r3, r3, #16
 800528c:	4313      	orrs	r3, r2
 800528e:	693a      	ldr	r2, [r7, #16]
 8005290:	3201      	adds	r2, #1
 8005292:	7812      	ldrb	r2, [r2, #0]
 8005294:	0212      	lsls	r2, r2, #8
 8005296:	4313      	orrs	r3, r2
 8005298:	693a      	ldr	r2, [r7, #16]
 800529a:	7812      	ldrb	r2, [r2, #0]
 800529c:	4313      	orrs	r3, r2
 800529e:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80052a2:	617b      	str	r3, [r7, #20]
			break;
 80052a4:	e009      	b.n	80052ba <get_fat+0x16a>

		default:
			val = 1;	/* Internal error */
 80052a6:	2301      	movs	r3, #1
 80052a8:	617b      	str	r3, [r7, #20]
 80052aa:	e006      	b.n	80052ba <get_fat+0x16a>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80052ac:	bf00      	nop
 80052ae:	e004      	b.n	80052ba <get_fat+0x16a>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80052b0:	bf00      	nop
 80052b2:	e002      	b.n	80052ba <get_fat+0x16a>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80052b4:	bf00      	nop
 80052b6:	e000      	b.n	80052ba <get_fat+0x16a>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80052b8:	bf00      	nop
		}
	}

	return val;
 80052ba:	697b      	ldr	r3, [r7, #20]
}
 80052bc:	4618      	mov	r0, r3
 80052be:	3718      	adds	r7, #24
 80052c0:	46bd      	mov	sp, r7
 80052c2:	bd80      	pop	{r7, pc}

080052c4 <put_fat>:
FRESULT put_fat (
	FATFS* fs,	/* File system object */
	DWORD clst,	/* FAT index number (cluster number) to be changed */
	DWORD val	/* New value to be set to the entry */
)
{
 80052c4:	b580      	push	{r7, lr}
 80052c6:	b088      	sub	sp, #32
 80052c8:	af00      	add	r7, sp, #0
 80052ca:	60f8      	str	r0, [r7, #12]
 80052cc:	60b9      	str	r1, [r7, #8]
 80052ce:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res;


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 80052d0:	68bb      	ldr	r3, [r7, #8]
 80052d2:	2b01      	cmp	r3, #1
 80052d4:	d905      	bls.n	80052e2 <put_fat+0x1e>
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80052dc:	68ba      	ldr	r2, [r7, #8]
 80052de:	429a      	cmp	r2, r3
 80052e0:	d302      	bcc.n	80052e8 <put_fat+0x24>
		res = FR_INT_ERR;
 80052e2:	2302      	movs	r3, #2
 80052e4:	77fb      	strb	r3, [r7, #31]
 80052e6:	e0f6      	b.n	80054d6 <put_fat+0x212>

	} else {
		switch (fs->fs_type) {
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80052ee:	2b03      	cmp	r3, #3
 80052f0:	f000 809e 	beq.w	8005430 <put_fat+0x16c>
 80052f4:	2b03      	cmp	r3, #3
 80052f6:	f300 80e4 	bgt.w	80054c2 <put_fat+0x1fe>
 80052fa:	2b01      	cmp	r3, #1
 80052fc:	d002      	beq.n	8005304 <put_fat+0x40>
 80052fe:	2b02      	cmp	r3, #2
 8005300:	d06f      	beq.n	80053e2 <put_fat+0x11e>
 8005302:	e0de      	b.n	80054c2 <put_fat+0x1fe>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8005304:	68bb      	ldr	r3, [r7, #8]
 8005306:	617b      	str	r3, [r7, #20]
 8005308:	697b      	ldr	r3, [r7, #20]
 800530a:	085b      	lsrs	r3, r3, #1
 800530c:	697a      	ldr	r2, [r7, #20]
 800530e:	4413      	add	r3, r2
 8005310:	617b      	str	r3, [r7, #20]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	f8d3 2220 	ldr.w	r2, [r3, #544]	; 0x220
 8005318:	697b      	ldr	r3, [r7, #20]
 800531a:	0a5b      	lsrs	r3, r3, #9
 800531c:	4413      	add	r3, r2
 800531e:	4619      	mov	r1, r3
 8005320:	68f8      	ldr	r0, [r7, #12]
 8005322:	f7ff fe18 	bl	8004f56 <move_window>
 8005326:	4603      	mov	r3, r0
 8005328:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800532a:	7ffb      	ldrb	r3, [r7, #31]
 800532c:	2b00      	cmp	r3, #0
 800532e:	f040 80cb 	bne.w	80054c8 <put_fat+0x204>
			p = &fs->win.d8[bc++ % SS(fs)];
 8005332:	697b      	ldr	r3, [r7, #20]
 8005334:	1c5a      	adds	r2, r3, #1
 8005336:	617a      	str	r2, [r7, #20]
 8005338:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800533c:	68fa      	ldr	r2, [r7, #12]
 800533e:	4413      	add	r3, r2
 8005340:	61bb      	str	r3, [r7, #24]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8005342:	68bb      	ldr	r3, [r7, #8]
 8005344:	f003 0301 	and.w	r3, r3, #1
 8005348:	2b00      	cmp	r3, #0
 800534a:	d00d      	beq.n	8005368 <put_fat+0xa4>
 800534c:	69bb      	ldr	r3, [r7, #24]
 800534e:	781b      	ldrb	r3, [r3, #0]
 8005350:	b25b      	sxtb	r3, r3
 8005352:	f003 030f 	and.w	r3, r3, #15
 8005356:	b25a      	sxtb	r2, r3
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	b2db      	uxtb	r3, r3
 800535c:	011b      	lsls	r3, r3, #4
 800535e:	b25b      	sxtb	r3, r3
 8005360:	4313      	orrs	r3, r2
 8005362:	b25b      	sxtb	r3, r3
 8005364:	b2db      	uxtb	r3, r3
 8005366:	e001      	b.n	800536c <put_fat+0xa8>
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	b2db      	uxtb	r3, r3
 800536c:	69ba      	ldr	r2, [r7, #24]
 800536e:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	2201      	movs	r2, #1
 8005374:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	f8d3 2220 	ldr.w	r2, [r3, #544]	; 0x220
 800537e:	697b      	ldr	r3, [r7, #20]
 8005380:	0a5b      	lsrs	r3, r3, #9
 8005382:	4413      	add	r3, r2
 8005384:	4619      	mov	r1, r3
 8005386:	68f8      	ldr	r0, [r7, #12]
 8005388:	f7ff fde5 	bl	8004f56 <move_window>
 800538c:	4603      	mov	r3, r0
 800538e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8005390:	7ffb      	ldrb	r3, [r7, #31]
 8005392:	2b00      	cmp	r3, #0
 8005394:	f040 809a 	bne.w	80054cc <put_fat+0x208>
			p = &fs->win.d8[bc % SS(fs)];
 8005398:	697b      	ldr	r3, [r7, #20]
 800539a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800539e:	68fa      	ldr	r2, [r7, #12]
 80053a0:	4413      	add	r3, r2
 80053a2:	61bb      	str	r3, [r7, #24]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 80053a4:	68bb      	ldr	r3, [r7, #8]
 80053a6:	f003 0301 	and.w	r3, r3, #1
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d003      	beq.n	80053b6 <put_fat+0xf2>
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	091b      	lsrs	r3, r3, #4
 80053b2:	b2db      	uxtb	r3, r3
 80053b4:	e00e      	b.n	80053d4 <put_fat+0x110>
 80053b6:	69bb      	ldr	r3, [r7, #24]
 80053b8:	781b      	ldrb	r3, [r3, #0]
 80053ba:	b25b      	sxtb	r3, r3
 80053bc:	f023 030f 	bic.w	r3, r3, #15
 80053c0:	b25a      	sxtb	r2, r3
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	0a1b      	lsrs	r3, r3, #8
 80053c6:	b25b      	sxtb	r3, r3
 80053c8:	f003 030f 	and.w	r3, r3, #15
 80053cc:	b25b      	sxtb	r3, r3
 80053ce:	4313      	orrs	r3, r2
 80053d0:	b25b      	sxtb	r3, r3
 80053d2:	b2db      	uxtb	r3, r3
 80053d4:	69ba      	ldr	r2, [r7, #24]
 80053d6:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	2201      	movs	r2, #1
 80053dc:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
			break;
 80053e0:	e079      	b.n	80054d6 <put_fat+0x212>

		case FS_FAT16 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	f8d3 2220 	ldr.w	r2, [r3, #544]	; 0x220
 80053e8:	68bb      	ldr	r3, [r7, #8]
 80053ea:	0a1b      	lsrs	r3, r3, #8
 80053ec:	4413      	add	r3, r2
 80053ee:	4619      	mov	r1, r3
 80053f0:	68f8      	ldr	r0, [r7, #12]
 80053f2:	f7ff fdb0 	bl	8004f56 <move_window>
 80053f6:	4603      	mov	r3, r0
 80053f8:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80053fa:	7ffb      	ldrb	r3, [r7, #31]
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	d167      	bne.n	80054d0 <put_fat+0x20c>
			p = &fs->win.d8[clst * 2 % SS(fs)];
 8005400:	68bb      	ldr	r3, [r7, #8]
 8005402:	005b      	lsls	r3, r3, #1
 8005404:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8005408:	68fa      	ldr	r2, [r7, #12]
 800540a:	4413      	add	r3, r2
 800540c:	61bb      	str	r3, [r7, #24]
			ST_WORD(p, (WORD)val);
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	b2da      	uxtb	r2, r3
 8005412:	69bb      	ldr	r3, [r7, #24]
 8005414:	701a      	strb	r2, [r3, #0]
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	b29b      	uxth	r3, r3
 800541a:	0a1b      	lsrs	r3, r3, #8
 800541c:	b29a      	uxth	r2, r3
 800541e:	69bb      	ldr	r3, [r7, #24]
 8005420:	3301      	adds	r3, #1
 8005422:	b2d2      	uxtb	r2, r2
 8005424:	701a      	strb	r2, [r3, #0]
			fs->wflag = 1;
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	2201      	movs	r2, #1
 800542a:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
			break;
 800542e:	e052      	b.n	80054d6 <put_fat+0x212>

		case FS_FAT32 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	f8d3 2220 	ldr.w	r2, [r3, #544]	; 0x220
 8005436:	68bb      	ldr	r3, [r7, #8]
 8005438:	09db      	lsrs	r3, r3, #7
 800543a:	4413      	add	r3, r2
 800543c:	4619      	mov	r1, r3
 800543e:	68f8      	ldr	r0, [r7, #12]
 8005440:	f7ff fd89 	bl	8004f56 <move_window>
 8005444:	4603      	mov	r3, r0
 8005446:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8005448:	7ffb      	ldrb	r3, [r7, #31]
 800544a:	2b00      	cmp	r3, #0
 800544c:	d142      	bne.n	80054d4 <put_fat+0x210>
			p = &fs->win.d8[clst * 4 % SS(fs)];
 800544e:	68bb      	ldr	r3, [r7, #8]
 8005450:	009b      	lsls	r3, r3, #2
 8005452:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8005456:	68fa      	ldr	r2, [r7, #12]
 8005458:	4413      	add	r3, r2
 800545a:	61bb      	str	r3, [r7, #24]
			val |= LD_DWORD(p) & 0xF0000000;
 800545c:	69bb      	ldr	r3, [r7, #24]
 800545e:	3303      	adds	r3, #3
 8005460:	781b      	ldrb	r3, [r3, #0]
 8005462:	061a      	lsls	r2, r3, #24
 8005464:	69bb      	ldr	r3, [r7, #24]
 8005466:	3302      	adds	r3, #2
 8005468:	781b      	ldrb	r3, [r3, #0]
 800546a:	041b      	lsls	r3, r3, #16
 800546c:	4313      	orrs	r3, r2
 800546e:	69ba      	ldr	r2, [r7, #24]
 8005470:	3201      	adds	r2, #1
 8005472:	7812      	ldrb	r2, [r2, #0]
 8005474:	0212      	lsls	r2, r2, #8
 8005476:	4313      	orrs	r3, r2
 8005478:	69ba      	ldr	r2, [r7, #24]
 800547a:	7812      	ldrb	r2, [r2, #0]
 800547c:	4313      	orrs	r3, r2
 800547e:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8005482:	687a      	ldr	r2, [r7, #4]
 8005484:	4313      	orrs	r3, r2
 8005486:	607b      	str	r3, [r7, #4]
			ST_DWORD(p, val);
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	b2da      	uxtb	r2, r3
 800548c:	69bb      	ldr	r3, [r7, #24]
 800548e:	701a      	strb	r2, [r3, #0]
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	b29b      	uxth	r3, r3
 8005494:	0a1b      	lsrs	r3, r3, #8
 8005496:	b29a      	uxth	r2, r3
 8005498:	69bb      	ldr	r3, [r7, #24]
 800549a:	3301      	adds	r3, #1
 800549c:	b2d2      	uxtb	r2, r2
 800549e:	701a      	strb	r2, [r3, #0]
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	0c1a      	lsrs	r2, r3, #16
 80054a4:	69bb      	ldr	r3, [r7, #24]
 80054a6:	3302      	adds	r3, #2
 80054a8:	b2d2      	uxtb	r2, r2
 80054aa:	701a      	strb	r2, [r3, #0]
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	0e1a      	lsrs	r2, r3, #24
 80054b0:	69bb      	ldr	r3, [r7, #24]
 80054b2:	3303      	adds	r3, #3
 80054b4:	b2d2      	uxtb	r2, r2
 80054b6:	701a      	strb	r2, [r3, #0]
			fs->wflag = 1;
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	2201      	movs	r2, #1
 80054bc:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
			break;
 80054c0:	e009      	b.n	80054d6 <put_fat+0x212>

		default :
			res = FR_INT_ERR;
 80054c2:	2302      	movs	r3, #2
 80054c4:	77fb      	strb	r3, [r7, #31]
 80054c6:	e006      	b.n	80054d6 <put_fat+0x212>
			if (res != FR_OK) break;
 80054c8:	bf00      	nop
 80054ca:	e004      	b.n	80054d6 <put_fat+0x212>
			if (res != FR_OK) break;
 80054cc:	bf00      	nop
 80054ce:	e002      	b.n	80054d6 <put_fat+0x212>
			if (res != FR_OK) break;
 80054d0:	bf00      	nop
 80054d2:	e000      	b.n	80054d6 <put_fat+0x212>
			if (res != FR_OK) break;
 80054d4:	bf00      	nop
		}
	}

	return res;
 80054d6:	7ffb      	ldrb	r3, [r7, #31]
}
 80054d8:	4618      	mov	r0, r3
 80054da:	3720      	adds	r7, #32
 80054dc:	46bd      	mov	sp, r7
 80054de:	bd80      	pop	{r7, pc}

080054e0 <remove_chain>:
static
FRESULT remove_chain (
	FATFS* fs,			/* File system object */
	DWORD clst			/* Cluster# to remove a chain from */
)
{
 80054e0:	b580      	push	{r7, lr}
 80054e2:	b084      	sub	sp, #16
 80054e4:	af00      	add	r7, sp, #0
 80054e6:	6078      	str	r0, [r7, #4]
 80054e8:	6039      	str	r1, [r7, #0]
	DWORD nxt;
#if _USE_TRIM
	DWORD scl = clst, ecl = clst, rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 80054ea:	683b      	ldr	r3, [r7, #0]
 80054ec:	2b01      	cmp	r3, #1
 80054ee:	d905      	bls.n	80054fc <remove_chain+0x1c>
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80054f6:	683a      	ldr	r2, [r7, #0]
 80054f8:	429a      	cmp	r2, r3
 80054fa:	d302      	bcc.n	8005502 <remove_chain+0x22>
		res = FR_INT_ERR;
 80054fc:	2302      	movs	r3, #2
 80054fe:	73fb      	strb	r3, [r7, #15]
 8005500:	e043      	b.n	800558a <remove_chain+0xaa>

	} else {
		res = FR_OK;
 8005502:	2300      	movs	r3, #0
 8005504:	73fb      	strb	r3, [r7, #15]
		while (clst < fs->n_fatent) {			/* Not a last link? */
 8005506:	e036      	b.n	8005576 <remove_chain+0x96>
			nxt = get_fat(fs, clst);			/* Get cluster status */
 8005508:	6839      	ldr	r1, [r7, #0]
 800550a:	6878      	ldr	r0, [r7, #4]
 800550c:	f7ff fe20 	bl	8005150 <get_fat>
 8005510:	60b8      	str	r0, [r7, #8]
			if (nxt == 0) break;				/* Empty cluster? */
 8005512:	68bb      	ldr	r3, [r7, #8]
 8005514:	2b00      	cmp	r3, #0
 8005516:	d035      	beq.n	8005584 <remove_chain+0xa4>
			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
 8005518:	68bb      	ldr	r3, [r7, #8]
 800551a:	2b01      	cmp	r3, #1
 800551c:	d102      	bne.n	8005524 <remove_chain+0x44>
 800551e:	2302      	movs	r3, #2
 8005520:	73fb      	strb	r3, [r7, #15]
 8005522:	e032      	b.n	800558a <remove_chain+0xaa>
			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
 8005524:	68bb      	ldr	r3, [r7, #8]
 8005526:	f1b3 3fff 	cmp.w	r3, #4294967295
 800552a:	d102      	bne.n	8005532 <remove_chain+0x52>
 800552c:	2301      	movs	r3, #1
 800552e:	73fb      	strb	r3, [r7, #15]
 8005530:	e02b      	b.n	800558a <remove_chain+0xaa>
			res = put_fat(fs, clst, 0);			/* Mark the cluster "empty" */
 8005532:	2200      	movs	r2, #0
 8005534:	6839      	ldr	r1, [r7, #0]
 8005536:	6878      	ldr	r0, [r7, #4]
 8005538:	f7ff fec4 	bl	80052c4 <put_fat>
 800553c:	4603      	mov	r3, r0
 800553e:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 8005540:	7bfb      	ldrb	r3, [r7, #15]
 8005542:	2b00      	cmp	r3, #0
 8005544:	d120      	bne.n	8005588 <remove_chain+0xa8>
			if (fs->free_clust != 0xFFFFFFFF) {	/* Update FSINFO */
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800554c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005550:	d00f      	beq.n	8005572 <remove_chain+0x92>
				fs->free_clust++;
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8005558:	1c5a      	adds	r2, r3, #1
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
				fs->fsi_flag |= 1;
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	f893 3205 	ldrb.w	r3, [r3, #517]	; 0x205
 8005566:	f043 0301 	orr.w	r3, r3, #1
 800556a:	b2da      	uxtb	r2, r3
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	f883 2205 	strb.w	r2, [r3, #517]	; 0x205
				rt[1] = clust2sect(fs, ecl) + fs->csize - 1;	/* End sector */
				disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Erase the block */
				scl = ecl = nxt;
			}
#endif
			clst = nxt;	/* Next cluster */
 8005572:	68bb      	ldr	r3, [r7, #8]
 8005574:	603b      	str	r3, [r7, #0]
		while (clst < fs->n_fatent) {			/* Not a last link? */
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800557c:	683a      	ldr	r2, [r7, #0]
 800557e:	429a      	cmp	r2, r3
 8005580:	d3c2      	bcc.n	8005508 <remove_chain+0x28>
 8005582:	e002      	b.n	800558a <remove_chain+0xaa>
			if (nxt == 0) break;				/* Empty cluster? */
 8005584:	bf00      	nop
 8005586:	e000      	b.n	800558a <remove_chain+0xaa>
			if (res != FR_OK) break;
 8005588:	bf00      	nop
		}
	}

	return res;
 800558a:	7bfb      	ldrb	r3, [r7, #15]
}
 800558c:	4618      	mov	r0, r3
 800558e:	3710      	adds	r7, #16
 8005590:	46bd      	mov	sp, r7
 8005592:	bd80      	pop	{r7, pc}

08005594 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	FATFS* fs,			/* File system object */
	DWORD clst			/* Cluster# to stretch. 0 means create a new chain. */
)
{
 8005594:	b580      	push	{r7, lr}
 8005596:	b086      	sub	sp, #24
 8005598:	af00      	add	r7, sp, #0
 800559a:	6078      	str	r0, [r7, #4]
 800559c:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;


	if (clst == 0) {		/* Create a new chain */
 800559e:	683b      	ldr	r3, [r7, #0]
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	d10f      	bne.n	80055c4 <create_chain+0x30>
		scl = fs->last_clust;			/* Get suggested start point */
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 80055aa:	613b      	str	r3, [r7, #16]
		if (!scl || scl >= fs->n_fatent) scl = 1;
 80055ac:	693b      	ldr	r3, [r7, #16]
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d005      	beq.n	80055be <create_chain+0x2a>
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80055b8:	693a      	ldr	r2, [r7, #16]
 80055ba:	429a      	cmp	r2, r3
 80055bc:	d31c      	bcc.n	80055f8 <create_chain+0x64>
 80055be:	2301      	movs	r3, #1
 80055c0:	613b      	str	r3, [r7, #16]
 80055c2:	e019      	b.n	80055f8 <create_chain+0x64>
	}
	else {					/* Stretch the current chain */
		cs = get_fat(fs, clst);			/* Check the cluster status */
 80055c4:	6839      	ldr	r1, [r7, #0]
 80055c6:	6878      	ldr	r0, [r7, #4]
 80055c8:	f7ff fdc2 	bl	8005150 <get_fat>
 80055cc:	60b8      	str	r0, [r7, #8]
		if (cs < 2) return 1;			/* Invalid value */
 80055ce:	68bb      	ldr	r3, [r7, #8]
 80055d0:	2b01      	cmp	r3, #1
 80055d2:	d801      	bhi.n	80055d8 <create_chain+0x44>
 80055d4:	2301      	movs	r3, #1
 80055d6:	e076      	b.n	80056c6 <create_chain+0x132>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 80055d8:	68bb      	ldr	r3, [r7, #8]
 80055da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80055de:	d101      	bne.n	80055e4 <create_chain+0x50>
 80055e0:	68bb      	ldr	r3, [r7, #8]
 80055e2:	e070      	b.n	80056c6 <create_chain+0x132>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80055ea:	68ba      	ldr	r2, [r7, #8]
 80055ec:	429a      	cmp	r2, r3
 80055ee:	d201      	bcs.n	80055f4 <create_chain+0x60>
 80055f0:	68bb      	ldr	r3, [r7, #8]
 80055f2:	e068      	b.n	80056c6 <create_chain+0x132>
		scl = clst;
 80055f4:	683b      	ldr	r3, [r7, #0]
 80055f6:	613b      	str	r3, [r7, #16]
	}

	ncl = scl;				/* Start cluster */
 80055f8:	693b      	ldr	r3, [r7, #16]
 80055fa:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl++;							/* Next cluster */
 80055fc:	697b      	ldr	r3, [r7, #20]
 80055fe:	3301      	adds	r3, #1
 8005600:	617b      	str	r3, [r7, #20]
		if (ncl >= fs->n_fatent) {		/* Check wrap around */
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8005608:	697a      	ldr	r2, [r7, #20]
 800560a:	429a      	cmp	r2, r3
 800560c:	d307      	bcc.n	800561e <create_chain+0x8a>
			ncl = 2;
 800560e:	2302      	movs	r3, #2
 8005610:	617b      	str	r3, [r7, #20]
			if (ncl > scl) return 0;	/* No free cluster */
 8005612:	697a      	ldr	r2, [r7, #20]
 8005614:	693b      	ldr	r3, [r7, #16]
 8005616:	429a      	cmp	r2, r3
 8005618:	d901      	bls.n	800561e <create_chain+0x8a>
 800561a:	2300      	movs	r3, #0
 800561c:	e053      	b.n	80056c6 <create_chain+0x132>
		}
		cs = get_fat(fs, ncl);			/* Get the cluster status */
 800561e:	6979      	ldr	r1, [r7, #20]
 8005620:	6878      	ldr	r0, [r7, #4]
 8005622:	f7ff fd95 	bl	8005150 <get_fat>
 8005626:	60b8      	str	r0, [r7, #8]
		if (cs == 0) break;				/* Found a free cluster */
 8005628:	68bb      	ldr	r3, [r7, #8]
 800562a:	2b00      	cmp	r3, #0
 800562c:	d00e      	beq.n	800564c <create_chain+0xb8>
		if (cs == 0xFFFFFFFF || cs == 1)/* An error occurred */
 800562e:	68bb      	ldr	r3, [r7, #8]
 8005630:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005634:	d002      	beq.n	800563c <create_chain+0xa8>
 8005636:	68bb      	ldr	r3, [r7, #8]
 8005638:	2b01      	cmp	r3, #1
 800563a:	d101      	bne.n	8005640 <create_chain+0xac>
			return cs;
 800563c:	68bb      	ldr	r3, [r7, #8]
 800563e:	e042      	b.n	80056c6 <create_chain+0x132>
		if (ncl == scl) return 0;		/* No free cluster */
 8005640:	697a      	ldr	r2, [r7, #20]
 8005642:	693b      	ldr	r3, [r7, #16]
 8005644:	429a      	cmp	r2, r3
 8005646:	d1d9      	bne.n	80055fc <create_chain+0x68>
 8005648:	2300      	movs	r3, #0
 800564a:	e03c      	b.n	80056c6 <create_chain+0x132>
		if (cs == 0) break;				/* Found a free cluster */
 800564c:	bf00      	nop
	}

	res = put_fat(fs, ncl, 0x0FFFFFFF);	/* Mark the new cluster "last link" */
 800564e:	f06f 4270 	mvn.w	r2, #4026531840	; 0xf0000000
 8005652:	6979      	ldr	r1, [r7, #20]
 8005654:	6878      	ldr	r0, [r7, #4]
 8005656:	f7ff fe35 	bl	80052c4 <put_fat>
 800565a:	4603      	mov	r3, r0
 800565c:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK && clst != 0) {
 800565e:	7bfb      	ldrb	r3, [r7, #15]
 8005660:	2b00      	cmp	r3, #0
 8005662:	d109      	bne.n	8005678 <create_chain+0xe4>
 8005664:	683b      	ldr	r3, [r7, #0]
 8005666:	2b00      	cmp	r3, #0
 8005668:	d006      	beq.n	8005678 <create_chain+0xe4>
		res = put_fat(fs, clst, ncl);	/* Link it to the previous one if needed */
 800566a:	697a      	ldr	r2, [r7, #20]
 800566c:	6839      	ldr	r1, [r7, #0]
 800566e:	6878      	ldr	r0, [r7, #4]
 8005670:	f7ff fe28 	bl	80052c4 <put_fat>
 8005674:	4603      	mov	r3, r0
 8005676:	73fb      	strb	r3, [r7, #15]
	}
	if (res == FR_OK) {
 8005678:	7bfb      	ldrb	r3, [r7, #15]
 800567a:	2b00      	cmp	r3, #0
 800567c:	d11a      	bne.n	80056b4 <create_chain+0x120>
		fs->last_clust = ncl;			/* Update FSINFO */
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	697a      	ldr	r2, [r7, #20]
 8005682:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
		if (fs->free_clust != 0xFFFFFFFF) {
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800568c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005690:	d018      	beq.n	80056c4 <create_chain+0x130>
			fs->free_clust--;
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8005698:	1e5a      	subs	r2, r3, #1
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
			fs->fsi_flag |= 1;
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	f893 3205 	ldrb.w	r3, [r3, #517]	; 0x205
 80056a6:	f043 0301 	orr.w	r3, r3, #1
 80056aa:	b2da      	uxtb	r2, r3
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	f883 2205 	strb.w	r2, [r3, #517]	; 0x205
 80056b2:	e007      	b.n	80056c4 <create_chain+0x130>
		}
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;
 80056b4:	7bfb      	ldrb	r3, [r7, #15]
 80056b6:	2b01      	cmp	r3, #1
 80056b8:	d102      	bne.n	80056c0 <create_chain+0x12c>
 80056ba:	f04f 33ff 	mov.w	r3, #4294967295
 80056be:	e000      	b.n	80056c2 <create_chain+0x12e>
 80056c0:	2301      	movs	r3, #1
 80056c2:	617b      	str	r3, [r7, #20]
	}

	return ncl;		/* Return new cluster number or error code */
 80056c4:	697b      	ldr	r3, [r7, #20]
}
 80056c6:	4618      	mov	r0, r3
 80056c8:	3718      	adds	r7, #24
 80056ca:	46bd      	mov	sp, r7
 80056cc:	bd80      	pop	{r7, pc}

080056ce <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	DWORD ofs		/* File offset to be converted to cluster# */
)
{
 80056ce:	b480      	push	{r7}
 80056d0:	b087      	sub	sp, #28
 80056d2:	af00      	add	r7, sp, #0
 80056d4:	6078      	str	r0, [r7, #4]
 80056d6:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	f8d3 3224 	ldr.w	r3, [r3, #548]	; 0x224
 80056de:	3304      	adds	r3, #4
 80056e0:	613b      	str	r3, [r7, #16]
	cl = ofs / SS(fp->fs) / fp->fs->csize;	/* Cluster order from top of the file */
 80056e2:	683b      	ldr	r3, [r7, #0]
 80056e4:	0a5b      	lsrs	r3, r3, #9
 80056e6:	687a      	ldr	r2, [r7, #4]
 80056e8:	f8d2 2200 	ldr.w	r2, [r2, #512]	; 0x200
 80056ec:	f892 2202 	ldrb.w	r2, [r2, #514]	; 0x202
 80056f0:	fbb3 f3f2 	udiv	r3, r3, r2
 80056f4:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80056f6:	693b      	ldr	r3, [r7, #16]
 80056f8:	1d1a      	adds	r2, r3, #4
 80056fa:	613a      	str	r2, [r7, #16]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	60fb      	str	r3, [r7, #12]
		if (!ncl) return 0;		/* End of table? (error) */
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	2b00      	cmp	r3, #0
 8005704:	d101      	bne.n	800570a <clmt_clust+0x3c>
 8005706:	2300      	movs	r3, #0
 8005708:	e010      	b.n	800572c <clmt_clust+0x5e>
		if (cl < ncl) break;	/* In this fragment? */
 800570a:	697a      	ldr	r2, [r7, #20]
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	429a      	cmp	r2, r3
 8005710:	d307      	bcc.n	8005722 <clmt_clust+0x54>
		cl -= ncl; tbl++;		/* Next fragment */
 8005712:	697a      	ldr	r2, [r7, #20]
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	1ad3      	subs	r3, r2, r3
 8005718:	617b      	str	r3, [r7, #20]
 800571a:	693b      	ldr	r3, [r7, #16]
 800571c:	3304      	adds	r3, #4
 800571e:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8005720:	e7e9      	b.n	80056f6 <clmt_clust+0x28>
		if (cl < ncl) break;	/* In this fragment? */
 8005722:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8005724:	693b      	ldr	r3, [r7, #16]
 8005726:	681a      	ldr	r2, [r3, #0]
 8005728:	697b      	ldr	r3, [r7, #20]
 800572a:	4413      	add	r3, r2
}
 800572c:	4618      	mov	r0, r3
 800572e:	371c      	adds	r7, #28
 8005730:	46bd      	mov	sp, r7
 8005732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005736:	4770      	bx	lr

08005738 <dir_sdi>:
static
FRESULT dir_sdi (
	DIR* dp,		/* Pointer to directory object */
	UINT idx		/* Index of directory table */
)
{
 8005738:	b580      	push	{r7, lr}
 800573a:	b086      	sub	sp, #24
 800573c:	af00      	add	r7, sp, #0
 800573e:	6078      	str	r0, [r7, #4]
 8005740:	6039      	str	r1, [r7, #0]
	DWORD clst, sect;
	UINT ic;


	dp->index = (WORD)idx;	/* Current index */
 8005742:	683b      	ldr	r3, [r7, #0]
 8005744:	b29a      	uxth	r2, r3
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	f8a3 2206 	strh.w	r2, [r3, #518]	; 0x206
	clst = dp->sclust;		/* Table start cluster (0:root) */
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 8005752:	617b      	str	r3, [r7, #20]
	if (clst == 1 || clst >= dp->fs->n_fatent)	/* Check start cluster range */
 8005754:	697b      	ldr	r3, [r7, #20]
 8005756:	2b01      	cmp	r3, #1
 8005758:	d007      	beq.n	800576a <dir_sdi+0x32>
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8005760:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8005764:	697a      	ldr	r2, [r7, #20]
 8005766:	429a      	cmp	r2, r3
 8005768:	d301      	bcc.n	800576e <dir_sdi+0x36>
		return FR_INT_ERR;
 800576a:	2302      	movs	r3, #2
 800576c:	e074      	b.n	8005858 <dir_sdi+0x120>
	if (!clst && dp->fs->fs_type == FS_FAT32)	/* Replace cluster# 0 with root cluster# if in FAT32 */
 800576e:	697b      	ldr	r3, [r7, #20]
 8005770:	2b00      	cmp	r3, #0
 8005772:	d10c      	bne.n	800578e <dir_sdi+0x56>
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800577a:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800577e:	2b03      	cmp	r3, #3
 8005780:	d105      	bne.n	800578e <dir_sdi+0x56>
		clst = dp->fs->dirbase;
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8005788:	f8d3 3224 	ldr.w	r3, [r3, #548]	; 0x224
 800578c:	617b      	str	r3, [r7, #20]

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800578e:	697b      	ldr	r3, [r7, #20]
 8005790:	2b00      	cmp	r3, #0
 8005792:	d111      	bne.n	80057b8 <dir_sdi+0x80>
		if (idx >= dp->fs->n_rootdir)	/* Is index out of range? */
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800579a:	f8b3 3208 	ldrh.w	r3, [r3, #520]	; 0x208
 800579e:	461a      	mov	r2, r3
 80057a0:	683b      	ldr	r3, [r7, #0]
 80057a2:	4293      	cmp	r3, r2
 80057a4:	d301      	bcc.n	80057aa <dir_sdi+0x72>
			return FR_INT_ERR;
 80057a6:	2302      	movs	r3, #2
 80057a8:	e056      	b.n	8005858 <dir_sdi+0x120>
		sect = dp->fs->dirbase;
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80057b0:	f8d3 3224 	ldr.w	r3, [r3, #548]	; 0x224
 80057b4:	613b      	str	r3, [r7, #16]
 80057b6:	e032      	b.n	800581e <dir_sdi+0xe6>
	}
	else {				/* Dynamic table (root-directory in FAT32 or sub-directory) */
		ic = SS(dp->fs) / SZ_DIRE * dp->fs->csize;	/* Entries per cluster */
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80057be:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 80057c2:	011b      	lsls	r3, r3, #4
 80057c4:	60fb      	str	r3, [r7, #12]
		while (idx >= ic) {	/* Follow cluster chain */
 80057c6:	e01e      	b.n	8005806 <dir_sdi+0xce>
			clst = get_fat(dp->fs, clst);				/* Get next cluster */
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80057ce:	6979      	ldr	r1, [r7, #20]
 80057d0:	4618      	mov	r0, r3
 80057d2:	f7ff fcbd 	bl	8005150 <get_fat>
 80057d6:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80057d8:	697b      	ldr	r3, [r7, #20]
 80057da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80057de:	d101      	bne.n	80057e4 <dir_sdi+0xac>
 80057e0:	2301      	movs	r3, #1
 80057e2:	e039      	b.n	8005858 <dir_sdi+0x120>
			if (clst < 2 || clst >= dp->fs->n_fatent)	/* Reached to end of table or internal error */
 80057e4:	697b      	ldr	r3, [r7, #20]
 80057e6:	2b01      	cmp	r3, #1
 80057e8:	d907      	bls.n	80057fa <dir_sdi+0xc2>
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80057f0:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80057f4:	697a      	ldr	r2, [r7, #20]
 80057f6:	429a      	cmp	r2, r3
 80057f8:	d301      	bcc.n	80057fe <dir_sdi+0xc6>
				return FR_INT_ERR;
 80057fa:	2302      	movs	r3, #2
 80057fc:	e02c      	b.n	8005858 <dir_sdi+0x120>
			idx -= ic;
 80057fe:	683a      	ldr	r2, [r7, #0]
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	1ad3      	subs	r3, r2, r3
 8005804:	603b      	str	r3, [r7, #0]
		while (idx >= ic) {	/* Follow cluster chain */
 8005806:	683a      	ldr	r2, [r7, #0]
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	429a      	cmp	r2, r3
 800580c:	d2dc      	bcs.n	80057c8 <dir_sdi+0x90>
		}
		sect = clust2sect(dp->fs, clst);
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8005814:	6979      	ldr	r1, [r7, #20]
 8005816:	4618      	mov	r0, r3
 8005818:	f7ff fc78 	bl	800510c <clust2sect>
 800581c:	6138      	str	r0, [r7, #16]
	}
	dp->clust = clst;	/* Current cluster# */
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	697a      	ldr	r2, [r7, #20]
 8005822:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
	if (!sect) return FR_INT_ERR;
 8005826:	693b      	ldr	r3, [r7, #16]
 8005828:	2b00      	cmp	r3, #0
 800582a:	d101      	bne.n	8005830 <dir_sdi+0xf8>
 800582c:	2302      	movs	r3, #2
 800582e:	e013      	b.n	8005858 <dir_sdi+0x120>
	dp->sect = sect + idx / (SS(dp->fs) / SZ_DIRE);					/* Sector# of the directory entry */
 8005830:	683b      	ldr	r3, [r7, #0]
 8005832:	091a      	lsrs	r2, r3, #4
 8005834:	693b      	ldr	r3, [r7, #16]
 8005836:	441a      	add	r2, r3
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
	dp->dir = dp->fs->win.d8 + (idx % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Ptr to the entry in the sector */
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8005844:	461a      	mov	r2, r3
 8005846:	683b      	ldr	r3, [r7, #0]
 8005848:	f003 030f 	and.w	r3, r3, #15
 800584c:	015b      	lsls	r3, r3, #5
 800584e:	441a      	add	r2, r3
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

	return FR_OK;
 8005856:	2300      	movs	r3, #0
}
 8005858:	4618      	mov	r0, r3
 800585a:	3718      	adds	r7, #24
 800585c:	46bd      	mov	sp, r7
 800585e:	bd80      	pop	{r7, pc}

08005860 <dir_next>:
static
FRESULT dir_next (	/* FR_OK:Succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8005860:	b590      	push	{r4, r7, lr}
 8005862:	b087      	sub	sp, #28
 8005864:	af00      	add	r7, sp, #0
 8005866:	6078      	str	r0, [r7, #4]
 8005868:	6039      	str	r1, [r7, #0]
#if !_FS_READONLY
	UINT c;
#endif


	i = dp->index + 1;
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	f8b3 3206 	ldrh.w	r3, [r3, #518]	; 0x206
 8005870:	3301      	adds	r3, #1
 8005872:	60fb      	str	r3, [r7, #12]
	if (!(i & 0xFFFF) || !dp->sect)	/* Report EOT when index has reached 65535 */
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	b29b      	uxth	r3, r3
 8005878:	2b00      	cmp	r3, #0
 800587a:	d004      	beq.n	8005886 <dir_next+0x26>
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8005882:	2b00      	cmp	r3, #0
 8005884:	d101      	bne.n	800588a <dir_next+0x2a>
		return FR_NO_FILE;
 8005886:	2304      	movs	r3, #4
 8005888:	e0dd      	b.n	8005a46 <dir_next+0x1e6>

	if (!(i % (SS(dp->fs) / SZ_DIRE))) {	/* Sector changed? */
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	f003 030f 	and.w	r3, r3, #15
 8005890:	2b00      	cmp	r3, #0
 8005892:	f040 80c6 	bne.w	8005a22 <dir_next+0x1c2>
		dp->sect++;					/* Next sector */
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800589c:	1c5a      	adds	r2, r3, #1
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

		if (!dp->clust) {		/* Static table */
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d10b      	bne.n	80058c6 <dir_next+0x66>
			if (i >= dp->fs->n_rootdir)	/* Report EOT if it reached end of static table */
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80058b4:	f8b3 3208 	ldrh.w	r3, [r3, #520]	; 0x208
 80058b8:	461a      	mov	r2, r3
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	4293      	cmp	r3, r2
 80058be:	f0c0 80b0 	bcc.w	8005a22 <dir_next+0x1c2>
				return FR_NO_FILE;
 80058c2:	2304      	movs	r3, #4
 80058c4:	e0bf      	b.n	8005a46 <dir_next+0x1e6>
		}
		else {					/* Dynamic table */
			if (((i / (SS(dp->fs) / SZ_DIRE)) & (dp->fs->csize - 1)) == 0) {	/* Cluster changed? */
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	091b      	lsrs	r3, r3, #4
 80058ca:	687a      	ldr	r2, [r7, #4]
 80058cc:	f8d2 2200 	ldr.w	r2, [r2, #512]	; 0x200
 80058d0:	f892 2202 	ldrb.w	r2, [r2, #514]	; 0x202
 80058d4:	3a01      	subs	r2, #1
 80058d6:	4013      	ands	r3, r2
 80058d8:	2b00      	cmp	r3, #0
 80058da:	f040 80a2 	bne.w	8005a22 <dir_next+0x1c2>
				clst = get_fat(dp->fs, dp->clust);				/* Get next cluster */
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 80058ea:	4619      	mov	r1, r3
 80058ec:	4610      	mov	r0, r2
 80058ee:	f7ff fc2f 	bl	8005150 <get_fat>
 80058f2:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;
 80058f4:	697b      	ldr	r3, [r7, #20]
 80058f6:	2b01      	cmp	r3, #1
 80058f8:	d801      	bhi.n	80058fe <dir_next+0x9e>
 80058fa:	2302      	movs	r3, #2
 80058fc:	e0a3      	b.n	8005a46 <dir_next+0x1e6>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 80058fe:	697b      	ldr	r3, [r7, #20]
 8005900:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005904:	d101      	bne.n	800590a <dir_next+0xaa>
 8005906:	2301      	movs	r3, #1
 8005908:	e09d      	b.n	8005a46 <dir_next+0x1e6>
				if (clst >= dp->fs->n_fatent) {					/* If it reached end of dynamic table, */
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8005910:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8005914:	697a      	ldr	r2, [r7, #20]
 8005916:	429a      	cmp	r2, r3
 8005918:	d374      	bcc.n	8005a04 <dir_next+0x1a4>
#if !_FS_READONLY
					if (!stretch) return FR_NO_FILE;			/* If do not stretch, report EOT */
 800591a:	683b      	ldr	r3, [r7, #0]
 800591c:	2b00      	cmp	r3, #0
 800591e:	d101      	bne.n	8005924 <dir_next+0xc4>
 8005920:	2304      	movs	r3, #4
 8005922:	e090      	b.n	8005a46 <dir_next+0x1e6>
					clst = create_chain(dp->fs, dp->clust);		/* Stretch cluster chain */
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8005930:	4619      	mov	r1, r3
 8005932:	4610      	mov	r0, r2
 8005934:	f7ff fe2e 	bl	8005594 <create_chain>
 8005938:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800593a:	697b      	ldr	r3, [r7, #20]
 800593c:	2b00      	cmp	r3, #0
 800593e:	d101      	bne.n	8005944 <dir_next+0xe4>
 8005940:	2307      	movs	r3, #7
 8005942:	e080      	b.n	8005a46 <dir_next+0x1e6>
					if (clst == 1) return FR_INT_ERR;
 8005944:	697b      	ldr	r3, [r7, #20]
 8005946:	2b01      	cmp	r3, #1
 8005948:	d101      	bne.n	800594e <dir_next+0xee>
 800594a:	2302      	movs	r3, #2
 800594c:	e07b      	b.n	8005a46 <dir_next+0x1e6>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 800594e:	697b      	ldr	r3, [r7, #20]
 8005950:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005954:	d101      	bne.n	800595a <dir_next+0xfa>
 8005956:	2301      	movs	r3, #1
 8005958:	e075      	b.n	8005a46 <dir_next+0x1e6>
					/* Clean-up stretched table */
					if (sync_window(dp->fs)) return FR_DISK_ERR;/* Flush disk access window */
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8005960:	4618      	mov	r0, r3
 8005962:	f7ff faaf 	bl	8004ec4 <sync_window>
 8005966:	4603      	mov	r3, r0
 8005968:	2b00      	cmp	r3, #0
 800596a:	d001      	beq.n	8005970 <dir_next+0x110>
 800596c:	2301      	movs	r3, #1
 800596e:	e06a      	b.n	8005a46 <dir_next+0x1e6>
					mem_set(dp->fs->win.d8, 0, SS(dp->fs));		/* Clear window buffer */
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8005976:	f44f 7200 	mov.w	r2, #512	; 0x200
 800597a:	2100      	movs	r1, #0
 800597c:	4618      	mov	r0, r3
 800597e:	f7ff f88c 	bl	8004a9a <mem_set>
					dp->fs->winsect = clust2sect(dp->fs, clst);	/* Cluster start sector */
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	f8d3 4200 	ldr.w	r4, [r3, #512]	; 0x200
 800598e:	6979      	ldr	r1, [r7, #20]
 8005990:	4610      	mov	r0, r2
 8005992:	f7ff fbbb 	bl	800510c <clust2sect>
 8005996:	4603      	mov	r3, r0
 8005998:	f8c4 322c 	str.w	r3, [r4, #556]	; 0x22c
					for (c = 0; c < dp->fs->csize; c++) {		/* Fill the new cluster with 0 */
 800599c:	2300      	movs	r3, #0
 800599e:	613b      	str	r3, [r7, #16]
 80059a0:	e01b      	b.n	80059da <dir_next+0x17a>
						dp->fs->wflag = 1;
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80059a8:	2201      	movs	r2, #1
 80059aa:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
						if (sync_window(dp->fs)) return FR_DISK_ERR;
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80059b4:	4618      	mov	r0, r3
 80059b6:	f7ff fa85 	bl	8004ec4 <sync_window>
 80059ba:	4603      	mov	r3, r0
 80059bc:	2b00      	cmp	r3, #0
 80059be:	d001      	beq.n	80059c4 <dir_next+0x164>
 80059c0:	2301      	movs	r3, #1
 80059c2:	e040      	b.n	8005a46 <dir_next+0x1e6>
						dp->fs->winsect++;
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80059ca:	f8d3 222c 	ldr.w	r2, [r3, #556]	; 0x22c
 80059ce:	3201      	adds	r2, #1
 80059d0:	f8c3 222c 	str.w	r2, [r3, #556]	; 0x22c
					for (c = 0; c < dp->fs->csize; c++) {		/* Fill the new cluster with 0 */
 80059d4:	693b      	ldr	r3, [r7, #16]
 80059d6:	3301      	adds	r3, #1
 80059d8:	613b      	str	r3, [r7, #16]
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80059e0:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 80059e4:	461a      	mov	r2, r3
 80059e6:	693b      	ldr	r3, [r7, #16]
 80059e8:	4293      	cmp	r3, r2
 80059ea:	d3da      	bcc.n	80059a2 <dir_next+0x142>
					}
					dp->fs->winsect -= c;						/* Rewind window offset */
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80059f2:	f8d3 122c 	ldr.w	r1, [r3, #556]	; 0x22c
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80059fc:	693a      	ldr	r2, [r7, #16]
 80059fe:	1a8a      	subs	r2, r1, r2
 8005a00:	f8c3 222c 	str.w	r2, [r3, #556]	; 0x22c
#else
					if (!stretch) return FR_NO_FILE;			/* If do not stretch, report EOT (this is to suppress warning) */
					return FR_NO_FILE;							/* Report EOT */
#endif
				}
				dp->clust = clst;				/* Initialize data for new cluster */
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	697a      	ldr	r2, [r7, #20]
 8005a08:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
				dp->sect = clust2sect(dp->fs, clst);
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8005a12:	6979      	ldr	r1, [r7, #20]
 8005a14:	4618      	mov	r0, r3
 8005a16:	f7ff fb79 	bl	800510c <clust2sect>
 8005a1a:	4602      	mov	r2, r0
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
			}
		}
	}

	dp->index = (WORD)i;	/* Current index */
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	b29a      	uxth	r2, r3
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	f8a3 2206 	strh.w	r2, [r3, #518]	; 0x206
	dp->dir = dp->fs->win.d8 + (i % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Current entry in the window */
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8005a32:	461a      	mov	r2, r3
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	f003 030f 	and.w	r3, r3, #15
 8005a3a:	015b      	lsls	r3, r3, #5
 8005a3c:	441a      	add	r2, r3
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

	return FR_OK;
 8005a44:	2300      	movs	r3, #0
}
 8005a46:	4618      	mov	r0, r3
 8005a48:	371c      	adds	r7, #28
 8005a4a:	46bd      	mov	sp, r7
 8005a4c:	bd90      	pop	{r4, r7, pc}

08005a4e <dir_alloc>:
static
FRESULT dir_alloc (
	DIR* dp,	/* Pointer to the directory object */
	UINT nent	/* Number of contiguous entries to allocate (1-21) */
)
{
 8005a4e:	b580      	push	{r7, lr}
 8005a50:	b084      	sub	sp, #16
 8005a52:	af00      	add	r7, sp, #0
 8005a54:	6078      	str	r0, [r7, #4]
 8005a56:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;


	res = dir_sdi(dp, 0);
 8005a58:	2100      	movs	r1, #0
 8005a5a:	6878      	ldr	r0, [r7, #4]
 8005a5c:	f7ff fe6c 	bl	8005738 <dir_sdi>
 8005a60:	4603      	mov	r3, r0
 8005a62:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8005a64:	7bfb      	ldrb	r3, [r7, #15]
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d131      	bne.n	8005ace <dir_alloc+0x80>
		n = 0;
 8005a6a:	2300      	movs	r3, #0
 8005a6c:	60bb      	str	r3, [r7, #8]
		do {
			res = move_window(dp->fs, dp->sect);
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8005a7a:	4619      	mov	r1, r3
 8005a7c:	4610      	mov	r0, r2
 8005a7e:	f7ff fa6a 	bl	8004f56 <move_window>
 8005a82:	4603      	mov	r3, r0
 8005a84:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 8005a86:	7bfb      	ldrb	r3, [r7, #15]
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	d11f      	bne.n	8005acc <dir_alloc+0x7e>
			if (dp->dir[0] == DDEM || dp->dir[0] == 0) {	/* Is it a free entry? */
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8005a92:	781b      	ldrb	r3, [r3, #0]
 8005a94:	2be5      	cmp	r3, #229	; 0xe5
 8005a96:	d005      	beq.n	8005aa4 <dir_alloc+0x56>
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8005a9e:	781b      	ldrb	r3, [r3, #0]
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	d107      	bne.n	8005ab4 <dir_alloc+0x66>
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8005aa4:	68bb      	ldr	r3, [r7, #8]
 8005aa6:	3301      	adds	r3, #1
 8005aa8:	60bb      	str	r3, [r7, #8]
 8005aaa:	68ba      	ldr	r2, [r7, #8]
 8005aac:	683b      	ldr	r3, [r7, #0]
 8005aae:	429a      	cmp	r2, r3
 8005ab0:	d102      	bne.n	8005ab8 <dir_alloc+0x6a>
 8005ab2:	e00c      	b.n	8005ace <dir_alloc+0x80>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8005ab4:	2300      	movs	r3, #0
 8005ab6:	60bb      	str	r3, [r7, #8]
			}
			res = dir_next(dp, 1);		/* Next entry with table stretch enabled */
 8005ab8:	2101      	movs	r1, #1
 8005aba:	6878      	ldr	r0, [r7, #4]
 8005abc:	f7ff fed0 	bl	8005860 <dir_next>
 8005ac0:	4603      	mov	r3, r0
 8005ac2:	73fb      	strb	r3, [r7, #15]
		} while (res == FR_OK);
 8005ac4:	7bfb      	ldrb	r3, [r7, #15]
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d0d1      	beq.n	8005a6e <dir_alloc+0x20>
 8005aca:	e000      	b.n	8005ace <dir_alloc+0x80>
			if (res != FR_OK) break;
 8005acc:	bf00      	nop
	}
	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8005ace:	7bfb      	ldrb	r3, [r7, #15]
 8005ad0:	2b04      	cmp	r3, #4
 8005ad2:	d101      	bne.n	8005ad8 <dir_alloc+0x8a>
 8005ad4:	2307      	movs	r3, #7
 8005ad6:	73fb      	strb	r3, [r7, #15]
	return res;
 8005ad8:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ada:	4618      	mov	r0, r3
 8005adc:	3710      	adds	r7, #16
 8005ade:	46bd      	mov	sp, r7
 8005ae0:	bd80      	pop	{r7, pc}

08005ae2 <ld_clust>:
static
DWORD ld_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir	/* Pointer to the directory entry */
)
{
 8005ae2:	b480      	push	{r7}
 8005ae4:	b085      	sub	sp, #20
 8005ae6:	af00      	add	r7, sp, #0
 8005ae8:	6078      	str	r0, [r7, #4]
 8005aea:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = LD_WORD(dir + DIR_FstClusLO);
 8005aec:	683b      	ldr	r3, [r7, #0]
 8005aee:	331b      	adds	r3, #27
 8005af0:	781b      	ldrb	r3, [r3, #0]
 8005af2:	021b      	lsls	r3, r3, #8
 8005af4:	b21a      	sxth	r2, r3
 8005af6:	683b      	ldr	r3, [r7, #0]
 8005af8:	331a      	adds	r3, #26
 8005afa:	781b      	ldrb	r3, [r3, #0]
 8005afc:	b21b      	sxth	r3, r3
 8005afe:	4313      	orrs	r3, r2
 8005b00:	b21b      	sxth	r3, r3
 8005b02:	b29b      	uxth	r3, r3
 8005b04:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32)
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8005b0c:	2b03      	cmp	r3, #3
 8005b0e:	d10f      	bne.n	8005b30 <ld_clust+0x4e>
		cl |= (DWORD)LD_WORD(dir + DIR_FstClusHI) << 16;
 8005b10:	683b      	ldr	r3, [r7, #0]
 8005b12:	3315      	adds	r3, #21
 8005b14:	781b      	ldrb	r3, [r3, #0]
 8005b16:	021b      	lsls	r3, r3, #8
 8005b18:	b21a      	sxth	r2, r3
 8005b1a:	683b      	ldr	r3, [r7, #0]
 8005b1c:	3314      	adds	r3, #20
 8005b1e:	781b      	ldrb	r3, [r3, #0]
 8005b20:	b21b      	sxth	r3, r3
 8005b22:	4313      	orrs	r3, r2
 8005b24:	b21b      	sxth	r3, r3
 8005b26:	b29b      	uxth	r3, r3
 8005b28:	041b      	lsls	r3, r3, #16
 8005b2a:	68fa      	ldr	r2, [r7, #12]
 8005b2c:	4313      	orrs	r3, r2
 8005b2e:	60fb      	str	r3, [r7, #12]

	return cl;
 8005b30:	68fb      	ldr	r3, [r7, #12]
}
 8005b32:	4618      	mov	r0, r3
 8005b34:	3714      	adds	r7, #20
 8005b36:	46bd      	mov	sp, r7
 8005b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b3c:	4770      	bx	lr

08005b3e <st_clust>:
static
void st_clust (
	BYTE* dir,	/* Pointer to the directory entry */
	DWORD cl	/* Value to be set */
)
{
 8005b3e:	b480      	push	{r7}
 8005b40:	b083      	sub	sp, #12
 8005b42:	af00      	add	r7, sp, #0
 8005b44:	6078      	str	r0, [r7, #4]
 8005b46:	6039      	str	r1, [r7, #0]
	ST_WORD(dir + DIR_FstClusLO, cl);
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	331a      	adds	r3, #26
 8005b4c:	683a      	ldr	r2, [r7, #0]
 8005b4e:	b2d2      	uxtb	r2, r2
 8005b50:	701a      	strb	r2, [r3, #0]
 8005b52:	683b      	ldr	r3, [r7, #0]
 8005b54:	b29b      	uxth	r3, r3
 8005b56:	0a1b      	lsrs	r3, r3, #8
 8005b58:	b29a      	uxth	r2, r3
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	331b      	adds	r3, #27
 8005b5e:	b2d2      	uxtb	r2, r2
 8005b60:	701a      	strb	r2, [r3, #0]
	ST_WORD(dir + DIR_FstClusHI, cl >> 16);
 8005b62:	683b      	ldr	r3, [r7, #0]
 8005b64:	0c1a      	lsrs	r2, r3, #16
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	3314      	adds	r3, #20
 8005b6a:	b2d2      	uxtb	r2, r2
 8005b6c:	701a      	strb	r2, [r3, #0]
 8005b6e:	683b      	ldr	r3, [r7, #0]
 8005b70:	0c1b      	lsrs	r3, r3, #16
 8005b72:	b29b      	uxth	r3, r3
 8005b74:	0a1b      	lsrs	r3, r3, #8
 8005b76:	b29a      	uxth	r2, r3
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	3315      	adds	r3, #21
 8005b7c:	b2d2      	uxtb	r2, r2
 8005b7e:	701a      	strb	r2, [r3, #0]
}
 8005b80:	bf00      	nop
 8005b82:	370c      	adds	r7, #12
 8005b84:	46bd      	mov	sp, r7
 8005b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b8a:	4770      	bx	lr

08005b8c <dir_find>:

static
FRESULT dir_find (
	DIR* dp			/* Pointer to the directory object linked to the file name */
)
{
 8005b8c:	b580      	push	{r7, lr}
 8005b8e:	b086      	sub	sp, #24
 8005b90:	af00      	add	r7, sp, #0
 8005b92:	6078      	str	r0, [r7, #4]
	BYTE c, *dir;
#if _USE_LFN
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8005b94:	2100      	movs	r1, #0
 8005b96:	6878      	ldr	r0, [r7, #4]
 8005b98:	f7ff fdce 	bl	8005738 <dir_sdi>
 8005b9c:	4603      	mov	r3, r0
 8005b9e:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8005ba0:	7dfb      	ldrb	r3, [r7, #23]
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d001      	beq.n	8005baa <dir_find+0x1e>
 8005ba6:	7dfb      	ldrb	r3, [r7, #23]
 8005ba8:	e03b      	b.n	8005c22 <dir_find+0x96>

#if _USE_LFN
	ord = sum = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(dp->fs, dp->sect);
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8005bb6:	4619      	mov	r1, r3
 8005bb8:	4610      	mov	r0, r2
 8005bba:	f7ff f9cc 	bl	8004f56 <move_window>
 8005bbe:	4603      	mov	r3, r0
 8005bc0:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8005bc2:	7dfb      	ldrb	r3, [r7, #23]
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	d128      	bne.n	8005c1a <dir_find+0x8e>
		dir = dp->dir;					/* Ptr to the directory entry of current index */
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8005bce:	613b      	str	r3, [r7, #16]
		c = dir[DIR_Name];
 8005bd0:	693b      	ldr	r3, [r7, #16]
 8005bd2:	781b      	ldrb	r3, [r3, #0]
 8005bd4:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8005bd6:	7bfb      	ldrb	r3, [r7, #15]
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	d102      	bne.n	8005be2 <dir_find+0x56>
 8005bdc:	2304      	movs	r3, #4
 8005bde:	75fb      	strb	r3, [r7, #23]
 8005be0:	e01e      	b.n	8005c20 <dir_find+0x94>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		if (!(dir[DIR_Attr] & AM_VOL) && !mem_cmp(dir, dp->fn, 11)) /* Is it a valid entry? */
 8005be2:	693b      	ldr	r3, [r7, #16]
 8005be4:	330b      	adds	r3, #11
 8005be6:	781b      	ldrb	r3, [r3, #0]
 8005be8:	f003 0308 	and.w	r3, r3, #8
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	d10a      	bne.n	8005c06 <dir_find+0x7a>
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8005bf6:	220b      	movs	r2, #11
 8005bf8:	4619      	mov	r1, r3
 8005bfa:	6938      	ldr	r0, [r7, #16]
 8005bfc:	f7fe ff68 	bl	8004ad0 <mem_cmp>
 8005c00:	4603      	mov	r3, r0
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d00b      	beq.n	8005c1e <dir_find+0x92>
			break;
#endif
		res = dir_next(dp, 0);		/* Next entry */
 8005c06:	2100      	movs	r1, #0
 8005c08:	6878      	ldr	r0, [r7, #4]
 8005c0a:	f7ff fe29 	bl	8005860 <dir_next>
 8005c0e:	4603      	mov	r3, r0
 8005c10:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8005c12:	7dfb      	ldrb	r3, [r7, #23]
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	d0c8      	beq.n	8005baa <dir_find+0x1e>
 8005c18:	e002      	b.n	8005c20 <dir_find+0x94>
		if (res != FR_OK) break;
 8005c1a:	bf00      	nop
 8005c1c:	e000      	b.n	8005c20 <dir_find+0x94>
			break;
 8005c1e:	bf00      	nop

	return res;
 8005c20:	7dfb      	ldrb	r3, [r7, #23]
}
 8005c22:	4618      	mov	r0, r3
 8005c24:	3718      	adds	r7, #24
 8005c26:	46bd      	mov	sp, r7
 8005c28:	bd80      	pop	{r7, pc}

08005c2a <dir_register>:
#if !_FS_READONLY
static
FRESULT dir_register (	/* FR_OK:Successful, FR_DENIED:No free entry or too many SFN collision, FR_DISK_ERR:Disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8005c2a:	b580      	push	{r7, lr}
 8005c2c:	b084      	sub	sp, #16
 8005c2e:	af00      	add	r7, sp, #0
 8005c30:	6078      	str	r0, [r7, #4]
				res = dir_next(dp, 0);	/* Next entry */
			} while (res == FR_OK && --nent);
		}
	}
#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 8005c32:	2101      	movs	r1, #1
 8005c34:	6878      	ldr	r0, [r7, #4]
 8005c36:	f7ff ff0a 	bl	8005a4e <dir_alloc>
 8005c3a:	4603      	mov	r3, r0
 8005c3c:	73fb      	strb	r3, [r7, #15]
#endif

	if (res == FR_OK) {				/* Set SFN entry */
 8005c3e:	7bfb      	ldrb	r3, [r7, #15]
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	d126      	bne.n	8005c92 <dir_register+0x68>
		res = move_window(dp->fs, dp->sect);
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8005c50:	4619      	mov	r1, r3
 8005c52:	4610      	mov	r0, r2
 8005c54:	f7ff f97f 	bl	8004f56 <move_window>
 8005c58:	4603      	mov	r3, r0
 8005c5a:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8005c5c:	7bfb      	ldrb	r3, [r7, #15]
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	d117      	bne.n	8005c92 <dir_register+0x68>
			mem_set(dp->dir, 0, SZ_DIRE);	/* Clean the entry */
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8005c68:	2220      	movs	r2, #32
 8005c6a:	2100      	movs	r1, #0
 8005c6c:	4618      	mov	r0, r3
 8005c6e:	f7fe ff14 	bl	8004a9a <mem_set>
			mem_cpy(dp->dir, dp->fn, 11);	/* Put SFN */
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	f8d3 0214 	ldr.w	r0, [r3, #532]	; 0x214
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8005c7e:	220b      	movs	r2, #11
 8005c80:	4619      	mov	r1, r3
 8005c82:	f7fe feeb 	bl	8004a5c <mem_cpy>
#if _USE_LFN
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			dp->fs->wflag = 1;
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8005c8c:	2201      	movs	r2, #1
 8005c8e:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
		}
	}

	return res;
 8005c92:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c94:	4618      	mov	r0, r3
 8005c96:	3710      	adds	r7, #16
 8005c98:	46bd      	mov	sp, r7
 8005c9a:	bd80      	pop	{r7, pc}

08005c9c <create_name>:
static
FRESULT create_name (
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8005c9c:	b580      	push	{r7, lr}
 8005c9e:	b088      	sub	sp, #32
 8005ca0:	af00      	add	r7, sp, #0
 8005ca2:	6078      	str	r0, [r7, #4]
 8005ca4:	6039      	str	r1, [r7, #0]
	BYTE b, c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	for (p = *path; *p == '/' || *p == '\\'; p++) ;	/* Strip duplicated separator */
 8005ca6:	683b      	ldr	r3, [r7, #0]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	60fb      	str	r3, [r7, #12]
 8005cac:	e002      	b.n	8005cb4 <create_name+0x18>
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	3301      	adds	r3, #1
 8005cb2:	60fb      	str	r3, [r7, #12]
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	781b      	ldrb	r3, [r3, #0]
 8005cb8:	2b2f      	cmp	r3, #47	; 0x2f
 8005cba:	d0f8      	beq.n	8005cae <create_name+0x12>
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	781b      	ldrb	r3, [r3, #0]
 8005cc0:	2b5c      	cmp	r3, #92	; 0x5c
 8005cc2:	d0f4      	beq.n	8005cae <create_name+0x12>
	sfn = dp->fn;
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8005cca:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 8005ccc:	220b      	movs	r2, #11
 8005cce:	2120      	movs	r1, #32
 8005cd0:	68b8      	ldr	r0, [r7, #8]
 8005cd2:	f7fe fee2 	bl	8004a9a <mem_set>
	si = i = b = 0; ni = 8;
 8005cd6:	2300      	movs	r3, #0
 8005cd8:	77fb      	strb	r3, [r7, #31]
 8005cda:	2300      	movs	r3, #0
 8005cdc:	613b      	str	r3, [r7, #16]
 8005cde:	693b      	ldr	r3, [r7, #16]
 8005ce0:	617b      	str	r3, [r7, #20]
 8005ce2:	2308      	movs	r3, #8
 8005ce4:	61bb      	str	r3, [r7, #24]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 8005ce6:	697b      	ldr	r3, [r7, #20]
 8005ce8:	1c5a      	adds	r2, r3, #1
 8005cea:	617a      	str	r2, [r7, #20]
 8005cec:	68fa      	ldr	r2, [r7, #12]
 8005cee:	4413      	add	r3, r2
 8005cf0:	781b      	ldrb	r3, [r3, #0]
 8005cf2:	77bb      	strb	r3, [r7, #30]
		if (c <= ' ' || c == '/' || c == '\\') break;	/* Break on end of segment */
 8005cf4:	7fbb      	ldrb	r3, [r7, #30]
 8005cf6:	2b20      	cmp	r3, #32
 8005cf8:	d953      	bls.n	8005da2 <create_name+0x106>
 8005cfa:	7fbb      	ldrb	r3, [r7, #30]
 8005cfc:	2b2f      	cmp	r3, #47	; 0x2f
 8005cfe:	d050      	beq.n	8005da2 <create_name+0x106>
 8005d00:	7fbb      	ldrb	r3, [r7, #30]
 8005d02:	2b5c      	cmp	r3, #92	; 0x5c
 8005d04:	d04d      	beq.n	8005da2 <create_name+0x106>
		if (c == '.' || i >= ni) {
 8005d06:	7fbb      	ldrb	r3, [r7, #30]
 8005d08:	2b2e      	cmp	r3, #46	; 0x2e
 8005d0a:	d003      	beq.n	8005d14 <create_name+0x78>
 8005d0c:	693a      	ldr	r2, [r7, #16]
 8005d0e:	69bb      	ldr	r3, [r7, #24]
 8005d10:	429a      	cmp	r2, r3
 8005d12:	d30f      	bcc.n	8005d34 <create_name+0x98>
			if (ni != 8 || c != '.') return FR_INVALID_NAME;
 8005d14:	69bb      	ldr	r3, [r7, #24]
 8005d16:	2b08      	cmp	r3, #8
 8005d18:	d102      	bne.n	8005d20 <create_name+0x84>
 8005d1a:	7fbb      	ldrb	r3, [r7, #30]
 8005d1c:	2b2e      	cmp	r3, #46	; 0x2e
 8005d1e:	d001      	beq.n	8005d24 <create_name+0x88>
 8005d20:	2306      	movs	r3, #6
 8005d22:	e073      	b.n	8005e0c <create_name+0x170>
			i = 8; ni = 11;
 8005d24:	2308      	movs	r3, #8
 8005d26:	613b      	str	r3, [r7, #16]
 8005d28:	230b      	movs	r3, #11
 8005d2a:	61bb      	str	r3, [r7, #24]
			b <<= 2; continue;
 8005d2c:	7ffb      	ldrb	r3, [r7, #31]
 8005d2e:	009b      	lsls	r3, r3, #2
 8005d30:	77fb      	strb	r3, [r7, #31]
 8005d32:	e035      	b.n	8005da0 <create_name+0x104>
		}
		if (c >= 0x80) {				/* Extended character? */
 8005d34:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	da08      	bge.n	8005d4e <create_name+0xb2>
			b |= 3;						/* Eliminate NT flag */
 8005d3c:	7ffb      	ldrb	r3, [r7, #31]
 8005d3e:	f043 0303 	orr.w	r3, r3, #3
 8005d42:	77fb      	strb	r3, [r7, #31]
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 8005d44:	7fbb      	ldrb	r3, [r7, #30]
 8005d46:	3b80      	subs	r3, #128	; 0x80
 8005d48:	4a32      	ldr	r2, [pc, #200]	; (8005e14 <create_name+0x178>)
 8005d4a:	5cd3      	ldrb	r3, [r2, r3]
 8005d4c:	77bb      	strb	r3, [r7, #30]
			if (!IsDBCS2(d) || i >= ni - 1)	/* Reject invalid DBC */
				return FR_INVALID_NAME;
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c))	/* Reject illegal chrs for SFN */
 8005d4e:	7fbb      	ldrb	r3, [r7, #30]
 8005d50:	4619      	mov	r1, r3
 8005d52:	4831      	ldr	r0, [pc, #196]	; (8005e18 <create_name+0x17c>)
 8005d54:	f7fe fee3 	bl	8004b1e <chk_chr>
 8005d58:	4603      	mov	r3, r0
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d001      	beq.n	8005d62 <create_name+0xc6>
				return FR_INVALID_NAME;
 8005d5e:	2306      	movs	r3, #6
 8005d60:	e054      	b.n	8005e0c <create_name+0x170>
			if (IsUpper(c)) {			/* ASCII large capital? */
 8005d62:	7fbb      	ldrb	r3, [r7, #30]
 8005d64:	2b40      	cmp	r3, #64	; 0x40
 8005d66:	d907      	bls.n	8005d78 <create_name+0xdc>
 8005d68:	7fbb      	ldrb	r3, [r7, #30]
 8005d6a:	2b5a      	cmp	r3, #90	; 0x5a
 8005d6c:	d804      	bhi.n	8005d78 <create_name+0xdc>
				b |= 2;
 8005d6e:	7ffb      	ldrb	r3, [r7, #31]
 8005d70:	f043 0302 	orr.w	r3, r3, #2
 8005d74:	77fb      	strb	r3, [r7, #31]
 8005d76:	e00c      	b.n	8005d92 <create_name+0xf6>
			} else {
				if (IsLower(c)) {		/* ASCII small capital? */
 8005d78:	7fbb      	ldrb	r3, [r7, #30]
 8005d7a:	2b60      	cmp	r3, #96	; 0x60
 8005d7c:	d909      	bls.n	8005d92 <create_name+0xf6>
 8005d7e:	7fbb      	ldrb	r3, [r7, #30]
 8005d80:	2b7a      	cmp	r3, #122	; 0x7a
 8005d82:	d806      	bhi.n	8005d92 <create_name+0xf6>
					b |= 1; c -= 0x20;
 8005d84:	7ffb      	ldrb	r3, [r7, #31]
 8005d86:	f043 0301 	orr.w	r3, r3, #1
 8005d8a:	77fb      	strb	r3, [r7, #31]
 8005d8c:	7fbb      	ldrb	r3, [r7, #30]
 8005d8e:	3b20      	subs	r3, #32
 8005d90:	77bb      	strb	r3, [r7, #30]
				}
			}
			sfn[i++] = c;
 8005d92:	693b      	ldr	r3, [r7, #16]
 8005d94:	1c5a      	adds	r2, r3, #1
 8005d96:	613a      	str	r2, [r7, #16]
 8005d98:	68ba      	ldr	r2, [r7, #8]
 8005d9a:	4413      	add	r3, r2
 8005d9c:	7fba      	ldrb	r2, [r7, #30]
 8005d9e:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 8005da0:	e7a1      	b.n	8005ce6 <create_name+0x4a>
		}
	}
	*path = &p[si];						/* Return pointer to the next segment */
 8005da2:	68fa      	ldr	r2, [r7, #12]
 8005da4:	697b      	ldr	r3, [r7, #20]
 8005da6:	441a      	add	r2, r3
 8005da8:	683b      	ldr	r3, [r7, #0]
 8005daa:	601a      	str	r2, [r3, #0]
	c = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
 8005dac:	7fbb      	ldrb	r3, [r7, #30]
 8005dae:	2b20      	cmp	r3, #32
 8005db0:	d801      	bhi.n	8005db6 <create_name+0x11a>
 8005db2:	2304      	movs	r3, #4
 8005db4:	e000      	b.n	8005db8 <create_name+0x11c>
 8005db6:	2300      	movs	r3, #0
 8005db8:	77bb      	strb	r3, [r7, #30]

	if (!i) return FR_INVALID_NAME;		/* Reject nul string */
 8005dba:	693b      	ldr	r3, [r7, #16]
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	d101      	bne.n	8005dc4 <create_name+0x128>
 8005dc0:	2306      	movs	r3, #6
 8005dc2:	e023      	b.n	8005e0c <create_name+0x170>
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* When first character collides with DDEM, replace it with RDDEM */
 8005dc4:	68bb      	ldr	r3, [r7, #8]
 8005dc6:	781b      	ldrb	r3, [r3, #0]
 8005dc8:	2be5      	cmp	r3, #229	; 0xe5
 8005dca:	d102      	bne.n	8005dd2 <create_name+0x136>
 8005dcc:	68bb      	ldr	r3, [r7, #8]
 8005dce:	2205      	movs	r2, #5
 8005dd0:	701a      	strb	r2, [r3, #0]

	if (ni == 8) b <<= 2;
 8005dd2:	69bb      	ldr	r3, [r7, #24]
 8005dd4:	2b08      	cmp	r3, #8
 8005dd6:	d102      	bne.n	8005dde <create_name+0x142>
 8005dd8:	7ffb      	ldrb	r3, [r7, #31]
 8005dda:	009b      	lsls	r3, r3, #2
 8005ddc:	77fb      	strb	r3, [r7, #31]
	if ((b & 0x03) == 0x01) c |= NS_EXT;	/* NT flag (Name extension has only small capital) */
 8005dde:	7ffb      	ldrb	r3, [r7, #31]
 8005de0:	f003 0303 	and.w	r3, r3, #3
 8005de4:	2b01      	cmp	r3, #1
 8005de6:	d103      	bne.n	8005df0 <create_name+0x154>
 8005de8:	7fbb      	ldrb	r3, [r7, #30]
 8005dea:	f043 0310 	orr.w	r3, r3, #16
 8005dee:	77bb      	strb	r3, [r7, #30]
	if ((b & 0x0C) == 0x04) c |= NS_BODY;	/* NT flag (Name body has only small capital) */
 8005df0:	7ffb      	ldrb	r3, [r7, #31]
 8005df2:	f003 030c 	and.w	r3, r3, #12
 8005df6:	2b04      	cmp	r3, #4
 8005df8:	d103      	bne.n	8005e02 <create_name+0x166>
 8005dfa:	7fbb      	ldrb	r3, [r7, #30]
 8005dfc:	f043 0308 	orr.w	r3, r3, #8
 8005e00:	77bb      	strb	r3, [r7, #30]

	sfn[NSFLAG] = c;		/* Store NT flag, File name is created */
 8005e02:	68bb      	ldr	r3, [r7, #8]
 8005e04:	330b      	adds	r3, #11
 8005e06:	7fba      	ldrb	r2, [r7, #30]
 8005e08:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 8005e0a:	2300      	movs	r3, #0
#endif
}
 8005e0c:	4618      	mov	r0, r3
 8005e0e:	3720      	adds	r7, #32
 8005e10:	46bd      	mov	sp, r7
 8005e12:	bd80      	pop	{r7, pc}
 8005e14:	08008250 	.word	0x08008250
 8005e18:	080081d4 	.word	0x080081d4

08005e1c <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8005e1c:	b580      	push	{r7, lr}
 8005e1e:	b084      	sub	sp, #16
 8005e20:	af00      	add	r7, sp, #0
 8005e22:	6078      	str	r0, [r7, #4]
 8005e24:	6039      	str	r1, [r7, #0]
		path++;	dp->sclust = 0;				/* Strip it and start from the root directory */
	} else {								/* No heading separator */
		dp->sclust = dp->fs->cdir;			/* Start from the current directory */
	}
#else
	if (*path == '/' || *path == '\\')		/* Strip heading separator if exist */
 8005e26:	683b      	ldr	r3, [r7, #0]
 8005e28:	781b      	ldrb	r3, [r3, #0]
 8005e2a:	2b2f      	cmp	r3, #47	; 0x2f
 8005e2c:	d003      	beq.n	8005e36 <follow_path+0x1a>
 8005e2e:	683b      	ldr	r3, [r7, #0]
 8005e30:	781b      	ldrb	r3, [r3, #0]
 8005e32:	2b5c      	cmp	r3, #92	; 0x5c
 8005e34:	d102      	bne.n	8005e3c <follow_path+0x20>
		path++;
 8005e36:	683b      	ldr	r3, [r7, #0]
 8005e38:	3301      	adds	r3, #1
 8005e3a:	603b      	str	r3, [r7, #0]
	dp->sclust = 0;							/* Always start from the root directory */
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	2200      	movs	r2, #0
 8005e40:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8005e44:	683b      	ldr	r3, [r7, #0]
 8005e46:	781b      	ldrb	r3, [r3, #0]
 8005e48:	2b1f      	cmp	r3, #31
 8005e4a:	d80a      	bhi.n	8005e62 <follow_path+0x46>
		res = dir_sdi(dp, 0);
 8005e4c:	2100      	movs	r1, #0
 8005e4e:	6878      	ldr	r0, [r7, #4]
 8005e50:	f7ff fc72 	bl	8005738 <dir_sdi>
 8005e54:	4603      	mov	r3, r0
 8005e56:	73fb      	strb	r3, [r7, #15]
		dp->dir = 0;
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	2200      	movs	r2, #0
 8005e5c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8005e60:	e045      	b.n	8005eee <follow_path+0xd2>
	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8005e62:	463b      	mov	r3, r7
 8005e64:	4619      	mov	r1, r3
 8005e66:	6878      	ldr	r0, [r7, #4]
 8005e68:	f7ff ff18 	bl	8005c9c <create_name>
 8005e6c:	4603      	mov	r3, r0
 8005e6e:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 8005e70:	7bfb      	ldrb	r3, [r7, #15]
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d136      	bne.n	8005ee4 <follow_path+0xc8>
			res = dir_find(dp);				/* Find an object with the sagment name */
 8005e76:	6878      	ldr	r0, [r7, #4]
 8005e78:	f7ff fe88 	bl	8005b8c <dir_find>
 8005e7c:	4603      	mov	r3, r0
 8005e7e:	73fb      	strb	r3, [r7, #15]
			ns = dp->fn[NSFLAG];
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8005e86:	7adb      	ldrb	r3, [r3, #11]
 8005e88:	73bb      	strb	r3, [r7, #14]
			if (res != FR_OK) {				/* Failed to find the object */
 8005e8a:	7bfb      	ldrb	r3, [r7, #15]
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	d00a      	beq.n	8005ea6 <follow_path+0x8a>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8005e90:	7bfb      	ldrb	r3, [r7, #15]
 8005e92:	2b04      	cmp	r3, #4
 8005e94:	d128      	bne.n	8005ee8 <follow_path+0xcc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, */
						dp->sclust = 0; dp->dir = 0;	/* it is the root directory and stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						res = FR_OK;					/* Ended at the root directroy. Function completed. */
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8005e96:	7bbb      	ldrb	r3, [r7, #14]
 8005e98:	f003 0304 	and.w	r3, r3, #4
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	d123      	bne.n	8005ee8 <follow_path+0xcc>
 8005ea0:	2305      	movs	r3, #5
 8005ea2:	73fb      	strb	r3, [r7, #15]
					}
				}
				break;
 8005ea4:	e020      	b.n	8005ee8 <follow_path+0xcc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8005ea6:	7bbb      	ldrb	r3, [r7, #14]
 8005ea8:	f003 0304 	and.w	r3, r3, #4
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	d11d      	bne.n	8005eec <follow_path+0xd0>
			dir = dp->dir;						/* Follow the sub-directory */
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8005eb6:	60bb      	str	r3, [r7, #8]
			if (!(dir[DIR_Attr] & AM_DIR)) {	/* It is not a sub-directory and cannot follow */
 8005eb8:	68bb      	ldr	r3, [r7, #8]
 8005eba:	330b      	adds	r3, #11
 8005ebc:	781b      	ldrb	r3, [r3, #0]
 8005ebe:	f003 0310 	and.w	r3, r3, #16
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	d102      	bne.n	8005ecc <follow_path+0xb0>
				res = FR_NO_PATH; break;
 8005ec6:	2305      	movs	r3, #5
 8005ec8:	73fb      	strb	r3, [r7, #15]
 8005eca:	e010      	b.n	8005eee <follow_path+0xd2>
			}
			dp->sclust = ld_clust(dp->fs, dir);
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8005ed2:	68b9      	ldr	r1, [r7, #8]
 8005ed4:	4618      	mov	r0, r3
 8005ed6:	f7ff fe04 	bl	8005ae2 <ld_clust>
 8005eda:	4602      	mov	r2, r0
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8005ee2:	e7be      	b.n	8005e62 <follow_path+0x46>
			if (res != FR_OK) break;
 8005ee4:	bf00      	nop
 8005ee6:	e002      	b.n	8005eee <follow_path+0xd2>
				break;
 8005ee8:	bf00      	nop
 8005eea:	e000      	b.n	8005eee <follow_path+0xd2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8005eec:	bf00      	nop
		}
	}

	return res;
 8005eee:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ef0:	4618      	mov	r0, r3
 8005ef2:	3710      	adds	r7, #16
 8005ef4:	46bd      	mov	sp, r7
 8005ef6:	bd80      	pop	{r7, pc}

08005ef8 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8005ef8:	b480      	push	{r7}
 8005efa:	b087      	sub	sp, #28
 8005efc:	af00      	add	r7, sp, #0
 8005efe:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8005f00:	f04f 33ff 	mov.w	r3, #4294967295
 8005f04:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	d031      	beq.n	8005f72 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	617b      	str	r3, [r7, #20]
 8005f14:	e002      	b.n	8005f1c <get_ldnumber+0x24>
 8005f16:	697b      	ldr	r3, [r7, #20]
 8005f18:	3301      	adds	r3, #1
 8005f1a:	617b      	str	r3, [r7, #20]
 8005f1c:	697b      	ldr	r3, [r7, #20]
 8005f1e:	781b      	ldrb	r3, [r3, #0]
 8005f20:	2b20      	cmp	r3, #32
 8005f22:	d903      	bls.n	8005f2c <get_ldnumber+0x34>
 8005f24:	697b      	ldr	r3, [r7, #20]
 8005f26:	781b      	ldrb	r3, [r3, #0]
 8005f28:	2b3a      	cmp	r3, #58	; 0x3a
 8005f2a:	d1f4      	bne.n	8005f16 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8005f2c:	697b      	ldr	r3, [r7, #20]
 8005f2e:	781b      	ldrb	r3, [r3, #0]
 8005f30:	2b3a      	cmp	r3, #58	; 0x3a
 8005f32:	d11c      	bne.n	8005f6e <get_ldnumber+0x76>
			tp = *path;
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0'; 
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	1c5a      	adds	r2, r3, #1
 8005f3e:	60fa      	str	r2, [r7, #12]
 8005f40:	781b      	ldrb	r3, [r3, #0]
 8005f42:	3b30      	subs	r3, #48	; 0x30
 8005f44:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8005f46:	68bb      	ldr	r3, [r7, #8]
 8005f48:	2b09      	cmp	r3, #9
 8005f4a:	d80e      	bhi.n	8005f6a <get_ldnumber+0x72>
 8005f4c:	68fa      	ldr	r2, [r7, #12]
 8005f4e:	697b      	ldr	r3, [r7, #20]
 8005f50:	429a      	cmp	r2, r3
 8005f52:	d10a      	bne.n	8005f6a <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8005f54:	68bb      	ldr	r3, [r7, #8]
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d107      	bne.n	8005f6a <get_ldnumber+0x72>
					vol = (int)i;
 8005f5a:	68bb      	ldr	r3, [r7, #8]
 8005f5c:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8005f5e:	697b      	ldr	r3, [r7, #20]
 8005f60:	3301      	adds	r3, #1
 8005f62:	617b      	str	r3, [r7, #20]
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	697a      	ldr	r2, [r7, #20]
 8005f68:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8005f6a:	693b      	ldr	r3, [r7, #16]
 8005f6c:	e002      	b.n	8005f74 <get_ldnumber+0x7c>
		}
#if _FS_RPATH && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8005f6e:	2300      	movs	r3, #0
 8005f70:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8005f72:	693b      	ldr	r3, [r7, #16]
}
 8005f74:	4618      	mov	r0, r3
 8005f76:	371c      	adds	r7, #28
 8005f78:	46bd      	mov	sp, r7
 8005f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f7e:	4770      	bx	lr

08005f80 <check_fs>:
static
BYTE check_fs (	/* 0:FAT boor sector, 1:Valid boor sector but not FAT, 2:Not a boot sector, 3:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to check if it is an FAT boot record or not */
)
{
 8005f80:	b580      	push	{r7, lr}
 8005f82:	b082      	sub	sp, #8
 8005f84:	af00      	add	r7, sp, #0
 8005f86:	6078      	str	r0, [r7, #4]
 8005f88:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;	/* Invaidate window */
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	2200      	movs	r2, #0
 8005f8e:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	f04f 32ff 	mov.w	r2, #4294967295
 8005f98:	f8c3 222c 	str.w	r2, [r3, #556]	; 0x22c
	if (move_window(fs, sect) != FR_OK)			/* Load boot record */
 8005f9c:	6839      	ldr	r1, [r7, #0]
 8005f9e:	6878      	ldr	r0, [r7, #4]
 8005fa0:	f7fe ffd9 	bl	8004f56 <move_window>
 8005fa4:	4603      	mov	r3, r0
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	d001      	beq.n	8005fae <check_fs+0x2e>
		return 3;
 8005faa:	2303      	movs	r3, #3
 8005fac:	e04a      	b.n	8006044 <check_fs+0xc4>

	if (LD_WORD(&fs->win.d8[BS_55AA]) != 0xAA55)	/* Check boot record signature (always placed at offset 510 even if the sector size is >512) */
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8005fb4:	3301      	adds	r3, #1
 8005fb6:	781b      	ldrb	r3, [r3, #0]
 8005fb8:	021b      	lsls	r3, r3, #8
 8005fba:	b21a      	sxth	r2, r3
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	f893 31fe 	ldrb.w	r3, [r3, #510]	; 0x1fe
 8005fc2:	b21b      	sxth	r3, r3
 8005fc4:	4313      	orrs	r3, r2
 8005fc6:	b21b      	sxth	r3, r3
 8005fc8:	4a20      	ldr	r2, [pc, #128]	; (800604c <check_fs+0xcc>)
 8005fca:	4293      	cmp	r3, r2
 8005fcc:	d001      	beq.n	8005fd2 <check_fs+0x52>
		return 2;
 8005fce:	2302      	movs	r3, #2
 8005fd0:	e038      	b.n	8006044 <check_fs+0xc4>

	if ((LD_DWORD(&fs->win.d8[BS_FilSysType]) & 0xFFFFFF) == 0x544146)		/* Check "FAT" string */
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	3336      	adds	r3, #54	; 0x36
 8005fd6:	3303      	adds	r3, #3
 8005fd8:	781b      	ldrb	r3, [r3, #0]
 8005fda:	061a      	lsls	r2, r3, #24
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	3336      	adds	r3, #54	; 0x36
 8005fe0:	3302      	adds	r3, #2
 8005fe2:	781b      	ldrb	r3, [r3, #0]
 8005fe4:	041b      	lsls	r3, r3, #16
 8005fe6:	4313      	orrs	r3, r2
 8005fe8:	687a      	ldr	r2, [r7, #4]
 8005fea:	3236      	adds	r2, #54	; 0x36
 8005fec:	3201      	adds	r2, #1
 8005fee:	7812      	ldrb	r2, [r2, #0]
 8005ff0:	0212      	lsls	r2, r2, #8
 8005ff2:	4313      	orrs	r3, r2
 8005ff4:	687a      	ldr	r2, [r7, #4]
 8005ff6:	f892 2036 	ldrb.w	r2, [r2, #54]	; 0x36
 8005ffa:	4313      	orrs	r3, r2
 8005ffc:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8006000:	4a13      	ldr	r2, [pc, #76]	; (8006050 <check_fs+0xd0>)
 8006002:	4293      	cmp	r3, r2
 8006004:	d101      	bne.n	800600a <check_fs+0x8a>
		return 0;
 8006006:	2300      	movs	r3, #0
 8006008:	e01c      	b.n	8006044 <check_fs+0xc4>
	if ((LD_DWORD(&fs->win.d8[BS_FilSysType32]) & 0xFFFFFF) == 0x544146)	/* Check "FAT" string */
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	3352      	adds	r3, #82	; 0x52
 800600e:	3303      	adds	r3, #3
 8006010:	781b      	ldrb	r3, [r3, #0]
 8006012:	061a      	lsls	r2, r3, #24
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	3352      	adds	r3, #82	; 0x52
 8006018:	3302      	adds	r3, #2
 800601a:	781b      	ldrb	r3, [r3, #0]
 800601c:	041b      	lsls	r3, r3, #16
 800601e:	4313      	orrs	r3, r2
 8006020:	687a      	ldr	r2, [r7, #4]
 8006022:	3252      	adds	r2, #82	; 0x52
 8006024:	3201      	adds	r2, #1
 8006026:	7812      	ldrb	r2, [r2, #0]
 8006028:	0212      	lsls	r2, r2, #8
 800602a:	4313      	orrs	r3, r2
 800602c:	687a      	ldr	r2, [r7, #4]
 800602e:	f892 2052 	ldrb.w	r2, [r2, #82]	; 0x52
 8006032:	4313      	orrs	r3, r2
 8006034:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8006038:	4a05      	ldr	r2, [pc, #20]	; (8006050 <check_fs+0xd0>)
 800603a:	4293      	cmp	r3, r2
 800603c:	d101      	bne.n	8006042 <check_fs+0xc2>
		return 0;
 800603e:	2300      	movs	r3, #0
 8006040:	e000      	b.n	8006044 <check_fs+0xc4>

	return 1;
 8006042:	2301      	movs	r3, #1
}
 8006044:	4618      	mov	r0, r3
 8006046:	3708      	adds	r7, #8
 8006048:	46bd      	mov	sp, r7
 800604a:	bd80      	pop	{r7, pc}
 800604c:	ffffaa55 	.word	0xffffaa55
 8006050:	00544146 	.word	0x00544146

08006054 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	BYTE wmode			/* !=0: Check write protection for write access */
)
{
 8006054:	b580      	push	{r7, lr}
 8006056:	b096      	sub	sp, #88	; 0x58
 8006058:	af00      	add	r7, sp, #0
 800605a:	60f8      	str	r0, [r7, #12]
 800605c:	60b9      	str	r1, [r7, #8]
 800605e:	4613      	mov	r3, r2
 8006060:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number from the path name */
	*rfs = 0;
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	2200      	movs	r2, #0
 8006066:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8006068:	68b8      	ldr	r0, [r7, #8]
 800606a:	f7ff ff45 	bl	8005ef8 <get_ldnumber>
 800606e:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8006070:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006072:	2b00      	cmp	r3, #0
 8006074:	da01      	bge.n	800607a <find_volume+0x26>
 8006076:	230b      	movs	r3, #11
 8006078:	e2a8      	b.n	80065cc <find_volume+0x578>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800607a:	4a9d      	ldr	r2, [pc, #628]	; (80062f0 <find_volume+0x29c>)
 800607c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800607e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006082:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8006084:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006086:	2b00      	cmp	r3, #0
 8006088:	d101      	bne.n	800608e <find_volume+0x3a>
 800608a:	230c      	movs	r3, #12
 800608c:	e29e      	b.n	80065cc <find_volume+0x578>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006092:	601a      	str	r2, [r3, #0]

	if (fs->fs_type) {					/* If the volume has been mounted */
 8006094:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006096:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800609a:	2b00      	cmp	r3, #0
 800609c:	d01b      	beq.n	80060d6 <find_volume+0x82>
		stat = disk_status(fs->drv);
 800609e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060a0:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 80060a4:	4618      	mov	r0, r3
 80060a6:	f7fe fc3b 	bl	8004920 <disk_status>
 80060aa:	4603      	mov	r3, r0
 80060ac:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 80060b0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80060b4:	f003 0301 	and.w	r3, r3, #1
 80060b8:	2b00      	cmp	r3, #0
 80060ba:	d10c      	bne.n	80060d6 <find_volume+0x82>
			if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check write protection if needed */
 80060bc:	79fb      	ldrb	r3, [r7, #7]
 80060be:	2b00      	cmp	r3, #0
 80060c0:	d007      	beq.n	80060d2 <find_volume+0x7e>
 80060c2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80060c6:	f003 0304 	and.w	r3, r3, #4
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	d001      	beq.n	80060d2 <find_volume+0x7e>
				return FR_WRITE_PROTECTED;
 80060ce:	230a      	movs	r3, #10
 80060d0:	e27c      	b.n	80065cc <find_volume+0x578>
			return FR_OK;				/* The file system object is valid */
 80060d2:	2300      	movs	r3, #0
 80060d4:	e27a      	b.n	80065cc <find_volume+0x578>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 80060d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060d8:	2200      	movs	r2, #0
 80060da:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 80060de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80060e0:	b2da      	uxtb	r2, r3
 80060e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060e4:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 80060e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060ea:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 80060ee:	4618      	mov	r0, r3
 80060f0:	f7fe fc30 	bl	8004954 <disk_initialize>
 80060f4:	4603      	mov	r3, r0
 80060f6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT)				/* Check if the initialization succeeded */
 80060fa:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80060fe:	f003 0301 	and.w	r3, r3, #1
 8006102:	2b00      	cmp	r3, #0
 8006104:	d001      	beq.n	800610a <find_volume+0xb6>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8006106:	2303      	movs	r3, #3
 8006108:	e260      	b.n	80065cc <find_volume+0x578>
	if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check disk write protection if needed */
 800610a:	79fb      	ldrb	r3, [r7, #7]
 800610c:	2b00      	cmp	r3, #0
 800610e:	d007      	beq.n	8006120 <find_volume+0xcc>
 8006110:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8006114:	f003 0304 	and.w	r3, r3, #4
 8006118:	2b00      	cmp	r3, #0
 800611a:	d001      	beq.n	8006120 <find_volume+0xcc>
		return FR_WRITE_PROTECTED;
 800611c:	230a      	movs	r3, #10
 800611e:	e255      	b.n	80065cc <find_volume+0x578>
#if _MAX_SS != _MIN_SS						/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK
		|| SS(fs) < _MIN_SS || SS(fs) > _MAX_SS) return FR_DISK_ERR;
#endif
	/* Find an FAT partition on the drive. Supports only generic partitioning, FDISK and SFD. */
	bsect = 0;
 8006120:	2300      	movs	r3, #0
 8006122:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);					/* Load sector 0 and check if it is an FAT boot sector as SFD */
 8006124:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8006126:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8006128:	f7ff ff2a 	bl	8005f80 <check_fs>
 800612c:	4603      	mov	r3, r0
 800612e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 1 || (!fmt && (LD2PT(vol)))) {	/* Not an FAT boot sector or forced partition number */
 8006132:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006136:	2b01      	cmp	r3, #1
 8006138:	d153      	bne.n	80061e2 <find_volume+0x18e>
		for (i = 0; i < 4; i++) {			/* Get partition offset */
 800613a:	2300      	movs	r3, #0
 800613c:	643b      	str	r3, [r7, #64]	; 0x40
 800613e:	e028      	b.n	8006192 <find_volume+0x13e>
			pt = fs->win.d8 + MBR_Table + i * SZ_PTE;
 8006140:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006142:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006144:	011b      	lsls	r3, r3, #4
 8006146:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800614a:	4413      	add	r3, r2
 800614c:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[4] ? LD_DWORD(&pt[8]) : 0;
 800614e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006150:	3304      	adds	r3, #4
 8006152:	781b      	ldrb	r3, [r3, #0]
 8006154:	2b00      	cmp	r3, #0
 8006156:	d012      	beq.n	800617e <find_volume+0x12a>
 8006158:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800615a:	330b      	adds	r3, #11
 800615c:	781b      	ldrb	r3, [r3, #0]
 800615e:	061a      	lsls	r2, r3, #24
 8006160:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006162:	330a      	adds	r3, #10
 8006164:	781b      	ldrb	r3, [r3, #0]
 8006166:	041b      	lsls	r3, r3, #16
 8006168:	4313      	orrs	r3, r2
 800616a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800616c:	3209      	adds	r2, #9
 800616e:	7812      	ldrb	r2, [r2, #0]
 8006170:	0212      	lsls	r2, r2, #8
 8006172:	4313      	orrs	r3, r2
 8006174:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006176:	3208      	adds	r2, #8
 8006178:	7812      	ldrb	r2, [r2, #0]
 800617a:	431a      	orrs	r2, r3
 800617c:	e000      	b.n	8006180 <find_volume+0x12c>
 800617e:	2200      	movs	r2, #0
 8006180:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006182:	009b      	lsls	r3, r3, #2
 8006184:	3358      	adds	r3, #88	; 0x58
 8006186:	443b      	add	r3, r7
 8006188:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {			/* Get partition offset */
 800618c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800618e:	3301      	adds	r3, #1
 8006190:	643b      	str	r3, [r7, #64]	; 0x40
 8006192:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006194:	2b03      	cmp	r3, #3
 8006196:	d9d3      	bls.n	8006140 <find_volume+0xec>
		}
		i = LD2PT(vol);						/* Partition number: 0:auto, 1-4:forced */
 8006198:	2300      	movs	r3, #0
 800619a:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 800619c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800619e:	2b00      	cmp	r3, #0
 80061a0:	d002      	beq.n	80061a8 <find_volume+0x154>
 80061a2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80061a4:	3b01      	subs	r3, #1
 80061a6:	643b      	str	r3, [r7, #64]	; 0x40
		do {								/* Find an FAT volume */
			bsect = br[i];
 80061a8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80061aa:	009b      	lsls	r3, r3, #2
 80061ac:	3358      	adds	r3, #88	; 0x58
 80061ae:	443b      	add	r3, r7
 80061b0:	f853 3c44 	ldr.w	r3, [r3, #-68]
 80061b4:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 2;	/* Check the partition */
 80061b6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80061b8:	2b00      	cmp	r3, #0
 80061ba:	d005      	beq.n	80061c8 <find_volume+0x174>
 80061bc:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80061be:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80061c0:	f7ff fede 	bl	8005f80 <check_fs>
 80061c4:	4603      	mov	r3, r0
 80061c6:	e000      	b.n	80061ca <find_volume+0x176>
 80061c8:	2302      	movs	r3, #2
 80061ca:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (!LD2PT(vol) && fmt && ++i < 4);
 80061ce:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	d005      	beq.n	80061e2 <find_volume+0x18e>
 80061d6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80061d8:	3301      	adds	r3, #1
 80061da:	643b      	str	r3, [r7, #64]	; 0x40
 80061dc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80061de:	2b03      	cmp	r3, #3
 80061e0:	d9e2      	bls.n	80061a8 <find_volume+0x154>
	}
	if (fmt == 3) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 80061e2:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80061e6:	2b03      	cmp	r3, #3
 80061e8:	d101      	bne.n	80061ee <find_volume+0x19a>
 80061ea:	2301      	movs	r3, #1
 80061ec:	e1ee      	b.n	80065cc <find_volume+0x578>
	if (fmt) return FR_NO_FILESYSTEM;		/* No FAT volume is found */
 80061ee:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	d001      	beq.n	80061fa <find_volume+0x1a6>
 80061f6:	230d      	movs	r3, #13
 80061f8:	e1e8      	b.n	80065cc <find_volume+0x578>

	/* An FAT volume is found. Following code initializes the file system object */

	if (LD_WORD(fs->win.d8 + BPB_BytsPerSec) != SS(fs))	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 80061fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061fc:	7b1b      	ldrb	r3, [r3, #12]
 80061fe:	021b      	lsls	r3, r3, #8
 8006200:	b21a      	sxth	r2, r3
 8006202:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006204:	7adb      	ldrb	r3, [r3, #11]
 8006206:	b21b      	sxth	r3, r3
 8006208:	4313      	orrs	r3, r2
 800620a:	b21b      	sxth	r3, r3
 800620c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006210:	d001      	beq.n	8006216 <find_volume+0x1c2>
		return FR_NO_FILESYSTEM;
 8006212:	230d      	movs	r3, #13
 8006214:	e1da      	b.n	80065cc <find_volume+0x578>

	fasize = LD_WORD(fs->win.d8 + BPB_FATSz16);			/* Number of sectors per FAT */
 8006216:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006218:	7ddb      	ldrb	r3, [r3, #23]
 800621a:	021b      	lsls	r3, r3, #8
 800621c:	b21a      	sxth	r2, r3
 800621e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006220:	7d9b      	ldrb	r3, [r3, #22]
 8006222:	b21b      	sxth	r3, r3
 8006224:	4313      	orrs	r3, r2
 8006226:	b21b      	sxth	r3, r3
 8006228:	b29b      	uxth	r3, r3
 800622a:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (!fasize) fasize = LD_DWORD(fs->win.d8 + BPB_FATSz32);
 800622c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800622e:	2b00      	cmp	r3, #0
 8006230:	d112      	bne.n	8006258 <find_volume+0x204>
 8006232:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006234:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8006238:	061a      	lsls	r2, r3, #24
 800623a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800623c:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8006240:	041b      	lsls	r3, r3, #16
 8006242:	4313      	orrs	r3, r2
 8006244:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006246:	f892 2025 	ldrb.w	r2, [r2, #37]	; 0x25
 800624a:	0212      	lsls	r2, r2, #8
 800624c:	4313      	orrs	r3, r2
 800624e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006250:	f892 2024 	ldrb.w	r2, [r2, #36]	; 0x24
 8006254:	4313      	orrs	r3, r2
 8006256:	64fb      	str	r3, [r7, #76]	; 0x4c
	fs->fsize = fasize;
 8006258:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800625a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800625c:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

	fs->n_fats = fs->win.d8[BPB_NumFATs];					/* Number of FAT copies */
 8006260:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006262:	7c1a      	ldrb	r2, [r3, #16]
 8006264:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006266:	f883 2203 	strb.w	r2, [r3, #515]	; 0x203
	if (fs->n_fats != 1 && fs->n_fats != 2)				/* (Must be 1 or 2) */
 800626a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800626c:	f893 3203 	ldrb.w	r3, [r3, #515]	; 0x203
 8006270:	2b01      	cmp	r3, #1
 8006272:	d006      	beq.n	8006282 <find_volume+0x22e>
 8006274:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006276:	f893 3203 	ldrb.w	r3, [r3, #515]	; 0x203
 800627a:	2b02      	cmp	r3, #2
 800627c:	d001      	beq.n	8006282 <find_volume+0x22e>
		return FR_NO_FILESYSTEM;
 800627e:	230d      	movs	r3, #13
 8006280:	e1a4      	b.n	80065cc <find_volume+0x578>
	fasize *= fs->n_fats;								/* Number of sectors for FAT area */
 8006282:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006284:	f893 3203 	ldrb.w	r3, [r3, #515]	; 0x203
 8006288:	461a      	mov	r2, r3
 800628a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800628c:	fb02 f303 	mul.w	r3, r2, r3
 8006290:	64fb      	str	r3, [r7, #76]	; 0x4c

	fs->csize = fs->win.d8[BPB_SecPerClus];				/* Number of sectors per cluster */
 8006292:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006294:	7b5a      	ldrb	r2, [r3, #13]
 8006296:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006298:	f883 2202 	strb.w	r2, [r3, #514]	; 0x202
	if (!fs->csize || (fs->csize & (fs->csize - 1)))	/* (Must be power of 2) */
 800629c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800629e:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	d00a      	beq.n	80062bc <find_volume+0x268>
 80062a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062a8:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 80062ac:	461a      	mov	r2, r3
 80062ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062b0:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 80062b4:	3b01      	subs	r3, #1
 80062b6:	4013      	ands	r3, r2
 80062b8:	2b00      	cmp	r3, #0
 80062ba:	d001      	beq.n	80062c0 <find_volume+0x26c>
		return FR_NO_FILESYSTEM;
 80062bc:	230d      	movs	r3, #13
 80062be:	e185      	b.n	80065cc <find_volume+0x578>

	fs->n_rootdir = LD_WORD(fs->win.d8 + BPB_RootEntCnt);	/* Number of root directory entries */
 80062c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062c2:	7c9b      	ldrb	r3, [r3, #18]
 80062c4:	021b      	lsls	r3, r3, #8
 80062c6:	b21a      	sxth	r2, r3
 80062c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062ca:	7c5b      	ldrb	r3, [r3, #17]
 80062cc:	b21b      	sxth	r3, r3
 80062ce:	4313      	orrs	r3, r2
 80062d0:	b21b      	sxth	r3, r3
 80062d2:	b29a      	uxth	r2, r3
 80062d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062d6:	f8a3 2208 	strh.w	r2, [r3, #520]	; 0x208
	if (fs->n_rootdir % (SS(fs) / SZ_DIRE))				/* (Must be sector aligned) */
 80062da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062dc:	f8b3 3208 	ldrh.w	r3, [r3, #520]	; 0x208
 80062e0:	f003 030f 	and.w	r3, r3, #15
 80062e4:	b29b      	uxth	r3, r3
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	d004      	beq.n	80062f4 <find_volume+0x2a0>
		return FR_NO_FILESYSTEM;
 80062ea:	230d      	movs	r3, #13
 80062ec:	e16e      	b.n	80065cc <find_volume+0x578>
 80062ee:	bf00      	nop
 80062f0:	200002ac 	.word	0x200002ac

	tsect = LD_WORD(fs->win.d8 + BPB_TotSec16);			/* Number of sectors on the volume */
 80062f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062f6:	7d1b      	ldrb	r3, [r3, #20]
 80062f8:	021b      	lsls	r3, r3, #8
 80062fa:	b21a      	sxth	r2, r3
 80062fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062fe:	7cdb      	ldrb	r3, [r3, #19]
 8006300:	b21b      	sxth	r3, r3
 8006302:	4313      	orrs	r3, r2
 8006304:	b21b      	sxth	r3, r3
 8006306:	b29b      	uxth	r3, r3
 8006308:	64bb      	str	r3, [r7, #72]	; 0x48
	if (!tsect) tsect = LD_DWORD(fs->win.d8 + BPB_TotSec32);
 800630a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800630c:	2b00      	cmp	r3, #0
 800630e:	d112      	bne.n	8006336 <find_volume+0x2e2>
 8006310:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006312:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8006316:	061a      	lsls	r2, r3, #24
 8006318:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800631a:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 800631e:	041b      	lsls	r3, r3, #16
 8006320:	4313      	orrs	r3, r2
 8006322:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006324:	f892 2021 	ldrb.w	r2, [r2, #33]	; 0x21
 8006328:	0212      	lsls	r2, r2, #8
 800632a:	4313      	orrs	r3, r2
 800632c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800632e:	f892 2020 	ldrb.w	r2, [r2, #32]
 8006332:	4313      	orrs	r3, r2
 8006334:	64bb      	str	r3, [r7, #72]	; 0x48

	nrsv = LD_WORD(fs->win.d8 + BPB_RsvdSecCnt);			/* Number of reserved sectors */
 8006336:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006338:	7bdb      	ldrb	r3, [r3, #15]
 800633a:	021b      	lsls	r3, r3, #8
 800633c:	b21a      	sxth	r2, r3
 800633e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006340:	7b9b      	ldrb	r3, [r3, #14]
 8006342:	b21b      	sxth	r3, r3
 8006344:	4313      	orrs	r3, r2
 8006346:	b21b      	sxth	r3, r3
 8006348:	85fb      	strh	r3, [r7, #46]	; 0x2e
	if (!nrsv) return FR_NO_FILESYSTEM;					/* (Must not be 0) */
 800634a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800634c:	2b00      	cmp	r3, #0
 800634e:	d101      	bne.n	8006354 <find_volume+0x300>
 8006350:	230d      	movs	r3, #13
 8006352:	e13b      	b.n	80065cc <find_volume+0x578>

	/* Determine the FAT sub type */
	sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZ_DIRE);	/* RSV + FAT + DIR */
 8006354:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8006356:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006358:	4413      	add	r3, r2
 800635a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800635c:	f8b2 2208 	ldrh.w	r2, [r2, #520]	; 0x208
 8006360:	0912      	lsrs	r2, r2, #4
 8006362:	b292      	uxth	r2, r2
 8006364:	4413      	add	r3, r2
 8006366:	62bb      	str	r3, [r7, #40]	; 0x28
	if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8006368:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800636a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800636c:	429a      	cmp	r2, r3
 800636e:	d201      	bcs.n	8006374 <find_volume+0x320>
 8006370:	230d      	movs	r3, #13
 8006372:	e12b      	b.n	80065cc <find_volume+0x578>
	nclst = (tsect - sysect) / fs->csize;				/* Number of clusters */
 8006374:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006376:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006378:	1ad3      	subs	r3, r2, r3
 800637a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800637c:	f892 2202 	ldrb.w	r2, [r2, #514]	; 0x202
 8006380:	fbb3 f3f2 	udiv	r3, r3, r2
 8006384:	627b      	str	r3, [r7, #36]	; 0x24
	if (!nclst) return FR_NO_FILESYSTEM;				/* (Invalid volume size) */
 8006386:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006388:	2b00      	cmp	r3, #0
 800638a:	d101      	bne.n	8006390 <find_volume+0x33c>
 800638c:	230d      	movs	r3, #13
 800638e:	e11d      	b.n	80065cc <find_volume+0x578>
	fmt = FS_FAT12;
 8006390:	2301      	movs	r3, #1
 8006392:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (nclst >= MIN_FAT16) fmt = FS_FAT16;
 8006396:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006398:	f640 72f5 	movw	r2, #4085	; 0xff5
 800639c:	4293      	cmp	r3, r2
 800639e:	d902      	bls.n	80063a6 <find_volume+0x352>
 80063a0:	2302      	movs	r3, #2
 80063a2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (nclst >= MIN_FAT32) fmt = FS_FAT32;
 80063a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063a8:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 80063ac:	4293      	cmp	r3, r2
 80063ae:	d902      	bls.n	80063b6 <find_volume+0x362>
 80063b0:	2303      	movs	r3, #3
 80063b2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	/* Boundaries and Limits */
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
 80063b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063b8:	1c9a      	adds	r2, r3, #2
 80063ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063bc:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
	fs->volbase = bsect;								/* Volume start sector */
 80063c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063c2:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80063c4:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
 80063c8:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80063ca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80063cc:	441a      	add	r2, r3
 80063ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063d0:	f8c3 2220 	str.w	r2, [r3, #544]	; 0x220
	fs->database = bsect + sysect;						/* Data start sector */
 80063d4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80063d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063d8:	441a      	add	r2, r3
 80063da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063dc:	f8c3 2228 	str.w	r2, [r3, #552]	; 0x228
	if (fmt == FS_FAT32) {
 80063e0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80063e4:	2b03      	cmp	r3, #3
 80063e6:	d121      	bne.n	800642c <find_volume+0x3d8>
		if (fs->n_rootdir) return FR_NO_FILESYSTEM;		/* (BPB_RootEntCnt must be 0) */
 80063e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063ea:	f8b3 3208 	ldrh.w	r3, [r3, #520]	; 0x208
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	d001      	beq.n	80063f6 <find_volume+0x3a2>
 80063f2:	230d      	movs	r3, #13
 80063f4:	e0ea      	b.n	80065cc <find_volume+0x578>
		fs->dirbase = LD_DWORD(fs->win.d8 + BPB_RootClus);	/* Root directory start cluster */
 80063f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063f8:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80063fc:	061a      	lsls	r2, r3, #24
 80063fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006400:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 8006404:	041b      	lsls	r3, r3, #16
 8006406:	4313      	orrs	r3, r2
 8006408:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800640a:	f892 202d 	ldrb.w	r2, [r2, #45]	; 0x2d
 800640e:	0212      	lsls	r2, r2, #8
 8006410:	4313      	orrs	r3, r2
 8006412:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006414:	f892 202c 	ldrb.w	r2, [r2, #44]	; 0x2c
 8006418:	431a      	orrs	r2, r3
 800641a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800641c:	f8c3 2224 	str.w	r2, [r3, #548]	; 0x224
		szbfat = fs->n_fatent * 4;						/* (Needed FAT size) */
 8006420:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006422:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8006426:	009b      	lsls	r3, r3, #2
 8006428:	647b      	str	r3, [r7, #68]	; 0x44
 800642a:	e025      	b.n	8006478 <find_volume+0x424>
	} else {
		if (!fs->n_rootdir)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
 800642c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800642e:	f8b3 3208 	ldrh.w	r3, [r3, #520]	; 0x208
 8006432:	2b00      	cmp	r3, #0
 8006434:	d101      	bne.n	800643a <find_volume+0x3e6>
 8006436:	230d      	movs	r3, #13
 8006438:	e0c8      	b.n	80065cc <find_volume+0x578>
		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
 800643a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800643c:	f8d3 2220 	ldr.w	r2, [r3, #544]	; 0x220
 8006440:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006442:	441a      	add	r2, r3
 8006444:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006446:	f8c3 2224 	str.w	r2, [r3, #548]	; 0x224
		szbfat = (fmt == FS_FAT16) ?					/* (Needed FAT size) */
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800644a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800644e:	2b02      	cmp	r3, #2
 8006450:	d104      	bne.n	800645c <find_volume+0x408>
 8006452:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006454:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8006458:	005b      	lsls	r3, r3, #1
 800645a:	e00c      	b.n	8006476 <find_volume+0x422>
 800645c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800645e:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8006462:	4613      	mov	r3, r2
 8006464:	005b      	lsls	r3, r3, #1
 8006466:	4413      	add	r3, r2
 8006468:	085a      	lsrs	r2, r3, #1
 800646a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800646c:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8006470:	f003 0301 	and.w	r3, r3, #1
 8006474:	4413      	add	r3, r2
		szbfat = (fmt == FS_FAT16) ?					/* (Needed FAT size) */
 8006476:	647b      	str	r3, [r7, #68]	; 0x44
	}
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than the size needed) */
 8006478:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800647a:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 800647e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006480:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8006484:	0a5b      	lsrs	r3, r3, #9
 8006486:	429a      	cmp	r2, r3
 8006488:	d201      	bcs.n	800648e <find_volume+0x43a>
		return FR_NO_FILESYSTEM;
 800648a:	230d      	movs	r3, #13
 800648c:	e09e      	b.n	80065cc <find_volume+0x578>

#if !_FS_READONLY
	/* Initialize cluster allocation information */
	fs->last_clust = fs->free_clust = 0xFFFFFFFF;
 800648e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006490:	f04f 32ff 	mov.w	r2, #4294967295
 8006494:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
 8006498:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800649a:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 800649e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80064a0:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

	/* Get fsinfo if available */
	fs->fsi_flag = 0x80;
 80064a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80064a6:	2280      	movs	r2, #128	; 0x80
 80064a8:	f883 2205 	strb.w	r2, [r3, #517]	; 0x205
#if (_FS_NOFSINFO & 3) != 3
	if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo is 1 */
 80064ac:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80064b0:	2b03      	cmp	r3, #3
 80064b2:	d177      	bne.n	80065a4 <find_volume+0x550>
		&& LD_WORD(fs->win.d8 + BPB_FSInfo) == 1
 80064b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80064b6:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80064ba:	021b      	lsls	r3, r3, #8
 80064bc:	b21a      	sxth	r2, r3
 80064be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80064c0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80064c4:	b21b      	sxth	r3, r3
 80064c6:	4313      	orrs	r3, r2
 80064c8:	b21b      	sxth	r3, r3
 80064ca:	2b01      	cmp	r3, #1
 80064cc:	d16a      	bne.n	80065a4 <find_volume+0x550>
		&& move_window(fs, bsect + 1) == FR_OK)
 80064ce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80064d0:	3301      	adds	r3, #1
 80064d2:	4619      	mov	r1, r3
 80064d4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80064d6:	f7fe fd3e 	bl	8004f56 <move_window>
 80064da:	4603      	mov	r3, r0
 80064dc:	2b00      	cmp	r3, #0
 80064de:	d161      	bne.n	80065a4 <find_volume+0x550>
	{
		fs->fsi_flag = 0;
 80064e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80064e2:	2200      	movs	r2, #0
 80064e4:	f883 2205 	strb.w	r2, [r3, #517]	; 0x205
		if (LD_WORD(fs->win.d8 + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 80064e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80064ea:	f893 31ff 	ldrb.w	r3, [r3, #511]	; 0x1ff
 80064ee:	021b      	lsls	r3, r3, #8
 80064f0:	b21a      	sxth	r2, r3
 80064f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80064f4:	f893 31fe 	ldrb.w	r3, [r3, #510]	; 0x1fe
 80064f8:	b21b      	sxth	r3, r3
 80064fa:	4313      	orrs	r3, r2
 80064fc:	b21b      	sxth	r3, r3
 80064fe:	4a35      	ldr	r2, [pc, #212]	; (80065d4 <find_volume+0x580>)
 8006500:	4293      	cmp	r3, r2
 8006502:	d14f      	bne.n	80065a4 <find_volume+0x550>
			&& LD_DWORD(fs->win.d8 + FSI_LeadSig) == 0x41615252
 8006504:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006506:	78db      	ldrb	r3, [r3, #3]
 8006508:	061a      	lsls	r2, r3, #24
 800650a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800650c:	789b      	ldrb	r3, [r3, #2]
 800650e:	041b      	lsls	r3, r3, #16
 8006510:	4313      	orrs	r3, r2
 8006512:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006514:	7852      	ldrb	r2, [r2, #1]
 8006516:	0212      	lsls	r2, r2, #8
 8006518:	4313      	orrs	r3, r2
 800651a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800651c:	7812      	ldrb	r2, [r2, #0]
 800651e:	4313      	orrs	r3, r2
 8006520:	4a2d      	ldr	r2, [pc, #180]	; (80065d8 <find_volume+0x584>)
 8006522:	4293      	cmp	r3, r2
 8006524:	d13e      	bne.n	80065a4 <find_volume+0x550>
			&& LD_DWORD(fs->win.d8 + FSI_StrucSig) == 0x61417272)
 8006526:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006528:	f893 31e7 	ldrb.w	r3, [r3, #487]	; 0x1e7
 800652c:	061a      	lsls	r2, r3, #24
 800652e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006530:	f893 31e6 	ldrb.w	r3, [r3, #486]	; 0x1e6
 8006534:	041b      	lsls	r3, r3, #16
 8006536:	4313      	orrs	r3, r2
 8006538:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800653a:	f892 21e5 	ldrb.w	r2, [r2, #485]	; 0x1e5
 800653e:	0212      	lsls	r2, r2, #8
 8006540:	4313      	orrs	r3, r2
 8006542:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006544:	f892 21e4 	ldrb.w	r2, [r2, #484]	; 0x1e4
 8006548:	4313      	orrs	r3, r2
 800654a:	4a24      	ldr	r2, [pc, #144]	; (80065dc <find_volume+0x588>)
 800654c:	4293      	cmp	r3, r2
 800654e:	d129      	bne.n	80065a4 <find_volume+0x550>
		{
#if (_FS_NOFSINFO & 1) == 0
			fs->free_clust = LD_DWORD(fs->win.d8 + FSI_Free_Count);
 8006550:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006552:	f893 31eb 	ldrb.w	r3, [r3, #491]	; 0x1eb
 8006556:	061a      	lsls	r2, r3, #24
 8006558:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800655a:	f893 31ea 	ldrb.w	r3, [r3, #490]	; 0x1ea
 800655e:	041b      	lsls	r3, r3, #16
 8006560:	4313      	orrs	r3, r2
 8006562:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006564:	f892 21e9 	ldrb.w	r2, [r2, #489]	; 0x1e9
 8006568:	0212      	lsls	r2, r2, #8
 800656a:	4313      	orrs	r3, r2
 800656c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800656e:	f892 21e8 	ldrb.w	r2, [r2, #488]	; 0x1e8
 8006572:	431a      	orrs	r2, r3
 8006574:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006576:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
#endif
#if (_FS_NOFSINFO & 2) == 0
			fs->last_clust = LD_DWORD(fs->win.d8 + FSI_Nxt_Free);
 800657a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800657c:	f893 31ef 	ldrb.w	r3, [r3, #495]	; 0x1ef
 8006580:	061a      	lsls	r2, r3, #24
 8006582:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006584:	f893 31ee 	ldrb.w	r3, [r3, #494]	; 0x1ee
 8006588:	041b      	lsls	r3, r3, #16
 800658a:	4313      	orrs	r3, r2
 800658c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800658e:	f892 21ed 	ldrb.w	r2, [r2, #493]	; 0x1ed
 8006592:	0212      	lsls	r2, r2, #8
 8006594:	4313      	orrs	r3, r2
 8006596:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006598:	f892 21ec 	ldrb.w	r2, [r2, #492]	; 0x1ec
 800659c:	431a      	orrs	r2, r3
 800659e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065a0:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
#endif
		}
	}
#endif
#endif
	fs->fs_type = fmt;	/* FAT sub-type */
 80065a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065a6:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 80065aa:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
	fs->id = ++Fsid;	/* File system mount ID */
 80065ae:	4b0c      	ldr	r3, [pc, #48]	; (80065e0 <find_volume+0x58c>)
 80065b0:	881b      	ldrh	r3, [r3, #0]
 80065b2:	3301      	adds	r3, #1
 80065b4:	b29a      	uxth	r2, r3
 80065b6:	4b0a      	ldr	r3, [pc, #40]	; (80065e0 <find_volume+0x58c>)
 80065b8:	801a      	strh	r2, [r3, #0]
 80065ba:	4b09      	ldr	r3, [pc, #36]	; (80065e0 <find_volume+0x58c>)
 80065bc:	881a      	ldrh	r2, [r3, #0]
 80065be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065c0:	f8a3 2206 	strh.w	r2, [r3, #518]	; 0x206
#if _FS_RPATH
	fs->cdir = 0;		/* Set current directory to root */
#endif
#if _FS_LOCK			/* Clear file lock semaphores */
	clear_lock(fs);
 80065c4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80065c6:	f7fe fc53 	bl	8004e70 <clear_lock>
#endif

	return FR_OK;
 80065ca:	2300      	movs	r3, #0
}
 80065cc:	4618      	mov	r0, r3
 80065ce:	3758      	adds	r7, #88	; 0x58
 80065d0:	46bd      	mov	sp, r7
 80065d2:	bd80      	pop	{r7, pc}
 80065d4:	ffffaa55 	.word	0xffffaa55
 80065d8:	41615252 	.word	0x41615252
 80065dc:	61417272 	.word	0x61417272
 80065e0:	200002b0 	.word	0x200002b0

080065e4 <validate>:

static
FRESULT validate (	/* FR_OK(0): The object is valid, !=0: Invalid */
	void* obj		/* Pointer to the object FIL/DIR to check validity */
)
{
 80065e4:	b580      	push	{r7, lr}
 80065e6:	b084      	sub	sp, #16
 80065e8:	af00      	add	r7, sp, #0
 80065ea:	6078      	str	r0, [r7, #4]
	FIL *fil = (FIL*)obj;	/* Assuming offset of .fs and .id in the FIL/DIR structure is identical */
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	60fb      	str	r3, [r7, #12]


	if (!fil || !fil->fs || !fil->fs->fs_type || fil->fs->id != fil->id || (disk_status(fil->fs->drv) & STA_NOINIT))
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	d022      	beq.n	800663c <validate+0x58>
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	d01d      	beq.n	800663c <validate+0x58>
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8006606:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800660a:	2b00      	cmp	r3, #0
 800660c:	d016      	beq.n	800663c <validate+0x58>
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8006614:	f8b3 2206 	ldrh.w	r2, [r3, #518]	; 0x206
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	f8b3 3204 	ldrh.w	r3, [r3, #516]	; 0x204
 800661e:	429a      	cmp	r2, r3
 8006620:	d10c      	bne.n	800663c <validate+0x58>
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8006628:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 800662c:	4618      	mov	r0, r3
 800662e:	f7fe f977 	bl	8004920 <disk_status>
 8006632:	4603      	mov	r3, r0
 8006634:	f003 0301 	and.w	r3, r3, #1
 8006638:	2b00      	cmp	r3, #0
 800663a:	d001      	beq.n	8006640 <validate+0x5c>
		return FR_INVALID_OBJECT;
 800663c:	2309      	movs	r3, #9
 800663e:	e000      	b.n	8006642 <validate+0x5e>

	ENTER_FF(fil->fs);		/* Lock file system */

	return FR_OK;
 8006640:	2300      	movs	r3, #0
}
 8006642:	4618      	mov	r0, r3
 8006644:	3710      	adds	r7, #16
 8006646:	46bd      	mov	sp, r7
 8006648:	bd80      	pop	{r7, pc}
	...

0800664c <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800664c:	b580      	push	{r7, lr}
 800664e:	b088      	sub	sp, #32
 8006650:	af00      	add	r7, sp, #0
 8006652:	60f8      	str	r0, [r7, #12]
 8006654:	60b9      	str	r1, [r7, #8]
 8006656:	4613      	mov	r3, r2
 8006658:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800665a:	68bb      	ldr	r3, [r7, #8]
 800665c:	613b      	str	r3, [r7, #16]


	vol = get_ldnumber(&rp);
 800665e:	f107 0310 	add.w	r3, r7, #16
 8006662:	4618      	mov	r0, r3
 8006664:	f7ff fc48 	bl	8005ef8 <get_ldnumber>
 8006668:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800666a:	69fb      	ldr	r3, [r7, #28]
 800666c:	2b00      	cmp	r3, #0
 800666e:	da01      	bge.n	8006674 <f_mount+0x28>
 8006670:	230b      	movs	r3, #11
 8006672:	e02d      	b.n	80066d0 <f_mount+0x84>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8006674:	4a18      	ldr	r2, [pc, #96]	; (80066d8 <f_mount+0x8c>)
 8006676:	69fb      	ldr	r3, [r7, #28]
 8006678:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800667c:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800667e:	69bb      	ldr	r3, [r7, #24]
 8006680:	2b00      	cmp	r3, #0
 8006682:	d006      	beq.n	8006692 <f_mount+0x46>
#if _FS_LOCK
		clear_lock(cfs);
 8006684:	69b8      	ldr	r0, [r7, #24]
 8006686:	f7fe fbf3 	bl	8004e70 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800668a:	69bb      	ldr	r3, [r7, #24]
 800668c:	2200      	movs	r2, #0
 800668e:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
	}

	if (fs) {
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	2b00      	cmp	r3, #0
 8006696:	d003      	beq.n	80066a0 <f_mount+0x54>
		fs->fs_type = 0;				/* Clear new fs object */
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	2200      	movs	r2, #0
 800669c:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 80066a0:	68fa      	ldr	r2, [r7, #12]
 80066a2:	490d      	ldr	r1, [pc, #52]	; (80066d8 <f_mount+0x8c>)
 80066a4:	69fb      	ldr	r3, [r7, #28]
 80066a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	2b00      	cmp	r3, #0
 80066ae:	d002      	beq.n	80066b6 <f_mount+0x6a>
 80066b0:	79fb      	ldrb	r3, [r7, #7]
 80066b2:	2b01      	cmp	r3, #1
 80066b4:	d001      	beq.n	80066ba <f_mount+0x6e>
 80066b6:	2300      	movs	r3, #0
 80066b8:	e00a      	b.n	80066d0 <f_mount+0x84>

	res = find_volume(&fs, &path, 0);	/* Force mounted the volume */
 80066ba:	f107 0108 	add.w	r1, r7, #8
 80066be:	f107 030c 	add.w	r3, r7, #12
 80066c2:	2200      	movs	r2, #0
 80066c4:	4618      	mov	r0, r3
 80066c6:	f7ff fcc5 	bl	8006054 <find_volume>
 80066ca:	4603      	mov	r3, r0
 80066cc:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 80066ce:	7dfb      	ldrb	r3, [r7, #23]
}
 80066d0:	4618      	mov	r0, r3
 80066d2:	3720      	adds	r7, #32
 80066d4:	46bd      	mov	sp, r7
 80066d6:	bd80      	pop	{r7, pc}
 80066d8:	200002ac 	.word	0x200002ac

080066dc <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 80066dc:	b580      	push	{r7, lr}
 80066de:	f5ad 7d14 	sub.w	sp, sp, #592	; 0x250
 80066e2:	af00      	add	r7, sp, #0
 80066e4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80066e8:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 80066ec:	6018      	str	r0, [r3, #0]
 80066ee:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80066f2:	f5a3 7312 	sub.w	r3, r3, #584	; 0x248
 80066f6:	6019      	str	r1, [r3, #0]
 80066f8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80066fc:	f2a3 2349 	subw	r3, r3, #585	; 0x249
 8006700:	701a      	strb	r2, [r3, #0]
#if !_FS_READONLY
	DWORD dw, cl;
#endif


	if (!fp) return FR_INVALID_OBJECT;
 8006702:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006706:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	2b00      	cmp	r3, #0
 800670e:	d101      	bne.n	8006714 <f_open+0x38>
 8006710:	2309      	movs	r3, #9
 8006712:	e257      	b.n	8006bc4 <f_open+0x4e8>
	fp->fs = 0;			/* Clear file object */
 8006714:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006718:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	2200      	movs	r2, #0
 8006720:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

	/* Get logical drive number */
#if !_FS_READONLY
	mode &= FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW;
 8006724:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006728:	f2a3 2349 	subw	r3, r3, #585	; 0x249
 800672c:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8006730:	f2a2 2249 	subw	r2, r2, #585	; 0x249
 8006734:	7812      	ldrb	r2, [r2, #0]
 8006736:	f002 021f 	and.w	r2, r2, #31
 800673a:	701a      	strb	r2, [r3, #0]
	res = find_volume(&dj.fs, &path, (BYTE)(mode & ~FA_READ));
 800673c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006740:	f2a3 2349 	subw	r3, r3, #585	; 0x249
 8006744:	781b      	ldrb	r3, [r3, #0]
 8006746:	f023 0301 	bic.w	r3, r3, #1
 800674a:	b2da      	uxtb	r2, r3
 800674c:	f107 0108 	add.w	r1, r7, #8
 8006750:	f107 0320 	add.w	r3, r7, #32
 8006754:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8006758:	4618      	mov	r0, r3
 800675a:	f7ff fc7b 	bl	8006054 <find_volume>
 800675e:	4603      	mov	r3, r0
 8006760:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
#else
	mode &= FA_READ;
	res = find_volume(&dj.fs, &path, 0);
#endif
	if (res == FR_OK) {
 8006764:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
 8006768:	2b00      	cmp	r3, #0
 800676a:	f040 8229 	bne.w	8006bc0 <f_open+0x4e4>
		INIT_BUF(dj);
 800676e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006772:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 8006776:	f107 0214 	add.w	r2, r7, #20
 800677a:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
		res = follow_path(&dj, path);	/* Follow the file path */
 800677e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006782:	f5a3 7312 	sub.w	r3, r3, #584	; 0x248
 8006786:	681a      	ldr	r2, [r3, #0]
 8006788:	f107 0320 	add.w	r3, r7, #32
 800678c:	4611      	mov	r1, r2
 800678e:	4618      	mov	r0, r3
 8006790:	f7ff fb44 	bl	8005e1c <follow_path>
 8006794:	4603      	mov	r3, r0
 8006796:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
		dir = dj.dir;
 800679a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800679e:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 80067a2:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80067a6:	f8c7 3248 	str.w	r3, [r7, #584]	; 0x248
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 80067aa:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	d11d      	bne.n	80067ee <f_open+0x112>
			if (!dir)	/* Default directory itself */
 80067b2:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	d103      	bne.n	80067c2 <f_open+0xe6>
				res = FR_INVALID_NAME;
 80067ba:	2306      	movs	r3, #6
 80067bc:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
 80067c0:	e015      	b.n	80067ee <f_open+0x112>
#if _FS_LOCK
			else
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80067c2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80067c6:	f2a3 2349 	subw	r3, r3, #585	; 0x249
 80067ca:	781b      	ldrb	r3, [r3, #0]
 80067cc:	f023 0301 	bic.w	r3, r3, #1
 80067d0:	2b00      	cmp	r3, #0
 80067d2:	bf14      	ite	ne
 80067d4:	2301      	movne	r3, #1
 80067d6:	2300      	moveq	r3, #0
 80067d8:	b2db      	uxtb	r3, r3
 80067da:	461a      	mov	r2, r3
 80067dc:	f107 0320 	add.w	r3, r7, #32
 80067e0:	4611      	mov	r1, r2
 80067e2:	4618      	mov	r0, r3
 80067e4:	f7fe f9b6 	bl	8004b54 <chk_lock>
 80067e8:	4603      	mov	r3, r0
 80067ea:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 80067ee:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80067f2:	f2a3 2349 	subw	r3, r3, #585	; 0x249
 80067f6:	781b      	ldrb	r3, [r3, #0]
 80067f8:	f003 031c 	and.w	r3, r3, #28
 80067fc:	2b00      	cmp	r3, #0
 80067fe:	f000 80e6 	beq.w	80069ce <f_open+0x2f2>
			if (res != FR_OK) {					/* No file, create new */
 8006802:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
 8006806:	2b00      	cmp	r3, #0
 8006808:	d027      	beq.n	800685a <f_open+0x17e>
				if (res == FR_NO_FILE)			/* There is no file to open, create a new entry */
 800680a:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
 800680e:	2b04      	cmp	r3, #4
 8006810:	d10e      	bne.n	8006830 <f_open+0x154>
#if _FS_LOCK
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8006812:	f7fe fa0d 	bl	8004c30 <enq_lock>
 8006816:	4603      	mov	r3, r0
 8006818:	2b00      	cmp	r3, #0
 800681a:	d006      	beq.n	800682a <f_open+0x14e>
 800681c:	f107 0320 	add.w	r3, r7, #32
 8006820:	4618      	mov	r0, r3
 8006822:	f7ff fa02 	bl	8005c2a <dir_register>
 8006826:	4603      	mov	r3, r0
 8006828:	e000      	b.n	800682c <f_open+0x150>
 800682a:	2312      	movs	r3, #18
 800682c:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
#else
					res = dir_register(&dj);
#endif
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8006830:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006834:	f2a3 2349 	subw	r3, r3, #585	; 0x249
 8006838:	f507 7214 	add.w	r2, r7, #592	; 0x250
 800683c:	f2a2 2249 	subw	r2, r2, #585	; 0x249
 8006840:	7812      	ldrb	r2, [r2, #0]
 8006842:	f042 0208 	orr.w	r2, r2, #8
 8006846:	701a      	strb	r2, [r3, #0]
				dir = dj.dir;					/* New entry */
 8006848:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800684c:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 8006850:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8006854:	f8c7 3248 	str.w	r3, [r7, #584]	; 0x248
 8006858:	e017      	b.n	800688a <f_open+0x1ae>
			}
			else {								/* Any object is already existing */
				if (dir[DIR_Attr] & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800685a:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 800685e:	330b      	adds	r3, #11
 8006860:	781b      	ldrb	r3, [r3, #0]
 8006862:	f003 0311 	and.w	r3, r3, #17
 8006866:	2b00      	cmp	r3, #0
 8006868:	d003      	beq.n	8006872 <f_open+0x196>
					res = FR_DENIED;
 800686a:	2307      	movs	r3, #7
 800686c:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
 8006870:	e00b      	b.n	800688a <f_open+0x1ae>
				} else {
					if (mode & FA_CREATE_NEW)	/* Cannot create as new file */
 8006872:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006876:	f2a3 2349 	subw	r3, r3, #585	; 0x249
 800687a:	781b      	ldrb	r3, [r3, #0]
 800687c:	f003 0304 	and.w	r3, r3, #4
 8006880:	2b00      	cmp	r3, #0
 8006882:	d002      	beq.n	800688a <f_open+0x1ae>
						res = FR_EXIST;
 8006884:	2308      	movs	r3, #8
 8006886:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800688a:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
 800688e:	2b00      	cmp	r3, #0
 8006890:	f040 80c1 	bne.w	8006a16 <f_open+0x33a>
 8006894:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006898:	f2a3 2349 	subw	r3, r3, #585	; 0x249
 800689c:	781b      	ldrb	r3, [r3, #0]
 800689e:	f003 0308 	and.w	r3, r3, #8
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	f000 80b7 	beq.w	8006a16 <f_open+0x33a>
				dw = GET_FATTIME();				/* Created time */
 80068a8:	f7fd fb02 	bl	8003eb0 <get_fattime>
 80068ac:	f8c7 0244 	str.w	r0, [r7, #580]	; 0x244
				ST_DWORD(dir + DIR_CrtTime, dw);
 80068b0:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 80068b4:	330e      	adds	r3, #14
 80068b6:	f8d7 2244 	ldr.w	r2, [r7, #580]	; 0x244
 80068ba:	b2d2      	uxtb	r2, r2
 80068bc:	701a      	strb	r2, [r3, #0]
 80068be:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 80068c2:	b29b      	uxth	r3, r3
 80068c4:	0a1b      	lsrs	r3, r3, #8
 80068c6:	b29a      	uxth	r2, r3
 80068c8:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 80068cc:	330f      	adds	r3, #15
 80068ce:	b2d2      	uxtb	r2, r2
 80068d0:	701a      	strb	r2, [r3, #0]
 80068d2:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 80068d6:	0c1a      	lsrs	r2, r3, #16
 80068d8:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 80068dc:	3310      	adds	r3, #16
 80068de:	b2d2      	uxtb	r2, r2
 80068e0:	701a      	strb	r2, [r3, #0]
 80068e2:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 80068e6:	0e1a      	lsrs	r2, r3, #24
 80068e8:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 80068ec:	3311      	adds	r3, #17
 80068ee:	b2d2      	uxtb	r2, r2
 80068f0:	701a      	strb	r2, [r3, #0]
				dir[DIR_Attr] = 0;				/* Reset attribute */
 80068f2:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 80068f6:	330b      	adds	r3, #11
 80068f8:	2200      	movs	r2, #0
 80068fa:	701a      	strb	r2, [r3, #0]
				ST_DWORD(dir + DIR_FileSize, 0);/* size = 0 */
 80068fc:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 8006900:	331c      	adds	r3, #28
 8006902:	2200      	movs	r2, #0
 8006904:	701a      	strb	r2, [r3, #0]
 8006906:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 800690a:	331d      	adds	r3, #29
 800690c:	2200      	movs	r2, #0
 800690e:	701a      	strb	r2, [r3, #0]
 8006910:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 8006914:	331e      	adds	r3, #30
 8006916:	2200      	movs	r2, #0
 8006918:	701a      	strb	r2, [r3, #0]
 800691a:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 800691e:	331f      	adds	r3, #31
 8006920:	2200      	movs	r2, #0
 8006922:	701a      	strb	r2, [r3, #0]
				cl = ld_clust(dj.fs, dir);		/* Get start cluster */
 8006924:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006928:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 800692c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8006930:	f8d7 1248 	ldr.w	r1, [r7, #584]	; 0x248
 8006934:	4618      	mov	r0, r3
 8006936:	f7ff f8d4 	bl	8005ae2 <ld_clust>
 800693a:	f8c7 0240 	str.w	r0, [r7, #576]	; 0x240
				st_clust(dir, 0);				/* cluster = 0 */
 800693e:	2100      	movs	r1, #0
 8006940:	f8d7 0248 	ldr.w	r0, [r7, #584]	; 0x248
 8006944:	f7ff f8fb 	bl	8005b3e <st_clust>
				dj.fs->wflag = 1;
 8006948:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800694c:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 8006950:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8006954:	2201      	movs	r2, #1
 8006956:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
				if (cl) {						/* Remove the cluster chain if exist */
 800695a:	f8d7 3240 	ldr.w	r3, [r7, #576]	; 0x240
 800695e:	2b00      	cmp	r3, #0
 8006960:	d059      	beq.n	8006a16 <f_open+0x33a>
					dw = dj.fs->winsect;
 8006962:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006966:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 800696a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800696e:	f8d3 322c 	ldr.w	r3, [r3, #556]	; 0x22c
 8006972:	f8c7 3244 	str.w	r3, [r7, #580]	; 0x244
					res = remove_chain(dj.fs, cl);
 8006976:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800697a:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 800697e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8006982:	f8d7 1240 	ldr.w	r1, [r7, #576]	; 0x240
 8006986:	4618      	mov	r0, r3
 8006988:	f7fe fdaa 	bl	80054e0 <remove_chain>
 800698c:	4603      	mov	r3, r0
 800698e:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
					if (res == FR_OK) {
 8006992:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
 8006996:	2b00      	cmp	r3, #0
 8006998:	d13d      	bne.n	8006a16 <f_open+0x33a>
						dj.fs->last_clust = cl - 1;	/* Reuse the cluster hole */
 800699a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800699e:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 80069a2:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80069a6:	f8d7 2240 	ldr.w	r2, [r7, #576]	; 0x240
 80069aa:	3a01      	subs	r2, #1
 80069ac:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
						res = move_window(dj.fs, dw);
 80069b0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80069b4:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 80069b8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80069bc:	f8d7 1244 	ldr.w	r1, [r7, #580]	; 0x244
 80069c0:	4618      	mov	r0, r3
 80069c2:	f7fe fac8 	bl	8004f56 <move_window>
 80069c6:	4603      	mov	r3, r0
 80069c8:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
 80069cc:	e023      	b.n	8006a16 <f_open+0x33a>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Follow succeeded */
 80069ce:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
 80069d2:	2b00      	cmp	r3, #0
 80069d4:	d11f      	bne.n	8006a16 <f_open+0x33a>
				if (dir[DIR_Attr] & AM_DIR) {	/* It is a directory */
 80069d6:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 80069da:	330b      	adds	r3, #11
 80069dc:	781b      	ldrb	r3, [r3, #0]
 80069de:	f003 0310 	and.w	r3, r3, #16
 80069e2:	2b00      	cmp	r3, #0
 80069e4:	d003      	beq.n	80069ee <f_open+0x312>
					res = FR_NO_FILE;
 80069e6:	2304      	movs	r3, #4
 80069e8:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
 80069ec:	e013      	b.n	8006a16 <f_open+0x33a>
				} else {
					if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
 80069ee:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80069f2:	f2a3 2349 	subw	r3, r3, #585	; 0x249
 80069f6:	781b      	ldrb	r3, [r3, #0]
 80069f8:	f003 0302 	and.w	r3, r3, #2
 80069fc:	2b00      	cmp	r3, #0
 80069fe:	d00a      	beq.n	8006a16 <f_open+0x33a>
 8006a00:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 8006a04:	330b      	adds	r3, #11
 8006a06:	781b      	ldrb	r3, [r3, #0]
 8006a08:	f003 0301 	and.w	r3, r3, #1
 8006a0c:	2b00      	cmp	r3, #0
 8006a0e:	d002      	beq.n	8006a16 <f_open+0x33a>
						res = FR_DENIED;
 8006a10:	2307      	movs	r3, #7
 8006a12:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
				}
			}
		}
		if (res == FR_OK) {
 8006a16:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	d153      	bne.n	8006ac6 <f_open+0x3ea>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8006a1e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006a22:	f2a3 2349 	subw	r3, r3, #585	; 0x249
 8006a26:	781b      	ldrb	r3, [r3, #0]
 8006a28:	f003 0308 	and.w	r3, r3, #8
 8006a2c:	2b00      	cmp	r3, #0
 8006a2e:	d00b      	beq.n	8006a48 <f_open+0x36c>
				mode |= FA__WRITTEN;
 8006a30:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006a34:	f2a3 2349 	subw	r3, r3, #585	; 0x249
 8006a38:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8006a3c:	f2a2 2249 	subw	r2, r2, #585	; 0x249
 8006a40:	7812      	ldrb	r2, [r2, #0]
 8006a42:	f042 0220 	orr.w	r2, r2, #32
 8006a46:	701a      	strb	r2, [r3, #0]
			fp->dir_sect = dj.fs->winsect;		/* Pointer to the directory entry */
 8006a48:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006a4c:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 8006a50:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8006a54:	f8d3 222c 	ldr.w	r2, [r3, #556]	; 0x22c
 8006a58:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006a5c:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
			fp->dir_ptr = dir;
 8006a66:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006a6a:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	f8d7 2248 	ldr.w	r2, [r7, #584]	; 0x248
 8006a74:	f8c3 2220 	str.w	r2, [r3, #544]	; 0x220
#if _FS_LOCK
			fp->lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8006a78:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006a7c:	f2a3 2349 	subw	r3, r3, #585	; 0x249
 8006a80:	781b      	ldrb	r3, [r3, #0]
 8006a82:	f023 0301 	bic.w	r3, r3, #1
 8006a86:	2b00      	cmp	r3, #0
 8006a88:	bf14      	ite	ne
 8006a8a:	2301      	movne	r3, #1
 8006a8c:	2300      	moveq	r3, #0
 8006a8e:	b2db      	uxtb	r3, r3
 8006a90:	461a      	mov	r2, r3
 8006a92:	f107 0320 	add.w	r3, r7, #32
 8006a96:	4611      	mov	r1, r2
 8006a98:	4618      	mov	r0, r3
 8006a9a:	f7fe f8ed 	bl	8004c78 <inc_lock>
 8006a9e:	4602      	mov	r2, r0
 8006aa0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006aa4:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	f8c3 2228 	str.w	r2, [r3, #552]	; 0x228
			if (!fp->lockid) res = FR_INT_ERR;
 8006aae:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006ab2:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	f8d3 3228 	ldr.w	r3, [r3, #552]	; 0x228
 8006abc:	2b00      	cmp	r3, #0
 8006abe:	d102      	bne.n	8006ac6 <f_open+0x3ea>
 8006ac0:	2302      	movs	r3, #2
 8006ac2:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
			}
		}
#endif
		FREE_BUF();

		if (res == FR_OK) {
 8006ac6:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
 8006aca:	2b00      	cmp	r3, #0
 8006acc:	d178      	bne.n	8006bc0 <f_open+0x4e4>
			fp->flag = mode;					/* File access mode */
 8006ace:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006ad2:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8006adc:	f2a2 2249 	subw	r2, r2, #585	; 0x249
 8006ae0:	7812      	ldrb	r2, [r2, #0]
 8006ae2:	f883 2206 	strb.w	r2, [r3, #518]	; 0x206
			fp->err = 0;						/* Clear error flag */
 8006ae6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006aea:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	2200      	movs	r2, #0
 8006af2:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
			fp->sclust = ld_clust(dj.fs, dir);	/* File start cluster */
 8006af6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006afa:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 8006afe:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8006b02:	f8d7 1248 	ldr.w	r1, [r7, #584]	; 0x248
 8006b06:	4618      	mov	r0, r3
 8006b08:	f7fe ffeb 	bl	8005ae2 <ld_clust>
 8006b0c:	4602      	mov	r2, r0
 8006b0e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006b12:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
			fp->fsize = LD_DWORD(dir + DIR_FileSize);	/* File size */
 8006b1c:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 8006b20:	331f      	adds	r3, #31
 8006b22:	781b      	ldrb	r3, [r3, #0]
 8006b24:	061a      	lsls	r2, r3, #24
 8006b26:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 8006b2a:	331e      	adds	r3, #30
 8006b2c:	781b      	ldrb	r3, [r3, #0]
 8006b2e:	041b      	lsls	r3, r3, #16
 8006b30:	4313      	orrs	r3, r2
 8006b32:	f8d7 2248 	ldr.w	r2, [r7, #584]	; 0x248
 8006b36:	321d      	adds	r2, #29
 8006b38:	7812      	ldrb	r2, [r2, #0]
 8006b3a:	0212      	lsls	r2, r2, #8
 8006b3c:	4313      	orrs	r3, r2
 8006b3e:	f8d7 2248 	ldr.w	r2, [r7, #584]	; 0x248
 8006b42:	321c      	adds	r2, #28
 8006b44:	7812      	ldrb	r2, [r2, #0]
 8006b46:	431a      	orrs	r2, r3
 8006b48:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006b4c:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
			fp->fptr = 0;						/* File pointer */
 8006b56:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006b5a:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	2200      	movs	r2, #0
 8006b62:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
			fp->dsect = 0;
 8006b66:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006b6a:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	2200      	movs	r2, #0
 8006b72:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
#if _USE_FASTSEEK
			fp->cltbl = 0;						/* Normal seek mode */
 8006b76:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006b7a:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	2200      	movs	r2, #0
 8006b82:	f8c3 2224 	str.w	r2, [r3, #548]	; 0x224
#endif
			fp->fs = dj.fs;	 					/* Validate file object */
 8006b86:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006b8a:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 8006b8e:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8006b92:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006b96:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
			fp->id = fp->fs->id;
 8006ba0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006ba4:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8006bae:	f8b3 2206 	ldrh.w	r2, [r3, #518]	; 0x206
 8006bb2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006bb6:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	f8a3 2204 	strh.w	r2, [r3, #516]	; 0x204
		}
	}

	LEAVE_FF(dj.fs, res);
 8006bc0:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
}
 8006bc4:	4618      	mov	r0, r3
 8006bc6:	f507 7714 	add.w	r7, r7, #592	; 0x250
 8006bca:	46bd      	mov	sp, r7
 8006bcc:	bd80      	pop	{r7, pc}

08006bce <f_read>:
	FIL* fp, 		/* Pointer to the file object */
	void* buff,		/* Pointer to data buffer */
	UINT btr,		/* Number of bytes to read */
	UINT* br		/* Pointer to number of bytes read */
)
{
 8006bce:	b580      	push	{r7, lr}
 8006bd0:	b08c      	sub	sp, #48	; 0x30
 8006bd2:	af00      	add	r7, sp, #0
 8006bd4:	60f8      	str	r0, [r7, #12]
 8006bd6:	60b9      	str	r1, [r7, #8]
 8006bd8:	607a      	str	r2, [r7, #4]
 8006bda:	603b      	str	r3, [r7, #0]
	FRESULT res;
	DWORD clst, sect, remain;
	UINT rcnt, cc;
	BYTE csect, *rbuff = (BYTE*)buff;
 8006bdc:	68bb      	ldr	r3, [r7, #8]
 8006bde:	623b      	str	r3, [r7, #32]


	*br = 0;	/* Clear read byte counter */
 8006be0:	683b      	ldr	r3, [r7, #0]
 8006be2:	2200      	movs	r2, #0
 8006be4:	601a      	str	r2, [r3, #0]

	res = validate(fp);							/* Check validity */
 8006be6:	68f8      	ldr	r0, [r7, #12]
 8006be8:	f7ff fcfc 	bl	80065e4 <validate>
 8006bec:	4603      	mov	r3, r0
 8006bee:	77fb      	strb	r3, [r7, #31]
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
 8006bf0:	7ffb      	ldrb	r3, [r7, #31]
 8006bf2:	2b00      	cmp	r3, #0
 8006bf4:	d001      	beq.n	8006bfa <f_read+0x2c>
 8006bf6:	7ffb      	ldrb	r3, [r7, #31]
 8006bf8:	e150      	b.n	8006e9c <f_read+0x2ce>
	if (fp->err)								/* Check error */
 8006bfa:	68fb      	ldr	r3, [r7, #12]
 8006bfc:	f893 3207 	ldrb.w	r3, [r3, #519]	; 0x207
 8006c00:	2b00      	cmp	r3, #0
 8006c02:	d003      	beq.n	8006c0c <f_read+0x3e>
		LEAVE_FF(fp->fs, (FRESULT)fp->err);
 8006c04:	68fb      	ldr	r3, [r7, #12]
 8006c06:	f893 3207 	ldrb.w	r3, [r3, #519]	; 0x207
 8006c0a:	e147      	b.n	8006e9c <f_read+0x2ce>
	if (!(fp->flag & FA_READ)) 					/* Check access mode */
 8006c0c:	68fb      	ldr	r3, [r7, #12]
 8006c0e:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 8006c12:	f003 0301 	and.w	r3, r3, #1
 8006c16:	2b00      	cmp	r3, #0
 8006c18:	d101      	bne.n	8006c1e <f_read+0x50>
		LEAVE_FF(fp->fs, FR_DENIED);
 8006c1a:	2307      	movs	r3, #7
 8006c1c:	e13e      	b.n	8006e9c <f_read+0x2ce>
	remain = fp->fsize - fp->fptr;
 8006c1e:	68fb      	ldr	r3, [r7, #12]
 8006c20:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 8006c2a:	1ad3      	subs	r3, r2, r3
 8006c2c:	61bb      	str	r3, [r7, #24]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 8006c2e:	687a      	ldr	r2, [r7, #4]
 8006c30:	69bb      	ldr	r3, [r7, #24]
 8006c32:	429a      	cmp	r2, r3
 8006c34:	f240 812d 	bls.w	8006e92 <f_read+0x2c4>
 8006c38:	69bb      	ldr	r3, [r7, #24]
 8006c3a:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 8006c3c:	e129      	b.n	8006e92 <f_read+0x2c4>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if ((fp->fptr % SS(fp->fs)) == 0) {		/* On the sector boundary? */
 8006c3e:	68fb      	ldr	r3, [r7, #12]
 8006c40:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 8006c44:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006c48:	2b00      	cmp	r3, #0
 8006c4a:	f040 80f2 	bne.w	8006e32 <f_read+0x264>
			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
 8006c4e:	68fb      	ldr	r3, [r7, #12]
 8006c50:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 8006c54:	0a5b      	lsrs	r3, r3, #9
 8006c56:	b2da      	uxtb	r2, r3
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8006c5e:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 8006c62:	3b01      	subs	r3, #1
 8006c64:	b2db      	uxtb	r3, r3
 8006c66:	4013      	ands	r3, r2
 8006c68:	75fb      	strb	r3, [r7, #23]
			if (!csect) {						/* On the cluster boundary? */
 8006c6a:	7dfb      	ldrb	r3, [r7, #23]
 8006c6c:	2b00      	cmp	r3, #0
 8006c6e:	d139      	bne.n	8006ce4 <f_read+0x116>
				if (fp->fptr == 0) {			/* On the top of the file? */
 8006c70:	68fb      	ldr	r3, [r7, #12]
 8006c72:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 8006c76:	2b00      	cmp	r3, #0
 8006c78:	d104      	bne.n	8006c84 <f_read+0xb6>
					clst = fp->sclust;			/* Follow from the origin */
 8006c7a:	68fb      	ldr	r3, [r7, #12]
 8006c7c:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8006c80:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006c82:	e018      	b.n	8006cb6 <f_read+0xe8>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl)
 8006c84:	68fb      	ldr	r3, [r7, #12]
 8006c86:	f8d3 3224 	ldr.w	r3, [r3, #548]	; 0x224
 8006c8a:	2b00      	cmp	r3, #0
 8006c8c:	d008      	beq.n	8006ca0 <f_read+0xd2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8006c8e:	68fb      	ldr	r3, [r7, #12]
 8006c90:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 8006c94:	4619      	mov	r1, r3
 8006c96:	68f8      	ldr	r0, [r7, #12]
 8006c98:	f7fe fd19 	bl	80056ce <clmt_clust>
 8006c9c:	62f8      	str	r0, [r7, #44]	; 0x2c
 8006c9e:	e00a      	b.n	8006cb6 <f_read+0xe8>
					else
#endif
						clst = get_fat(fp->fs, fp->clust);	/* Follow cluster chain on the FAT */
 8006ca0:	68fb      	ldr	r3, [r7, #12]
 8006ca2:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8006ca6:	68fb      	ldr	r3, [r7, #12]
 8006ca8:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8006cac:	4619      	mov	r1, r3
 8006cae:	4610      	mov	r0, r2
 8006cb0:	f7fe fa4e 	bl	8005150 <get_fat>
 8006cb4:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				if (clst < 2) ABORT(fp->fs, FR_INT_ERR);
 8006cb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006cb8:	2b01      	cmp	r3, #1
 8006cba:	d805      	bhi.n	8006cc8 <f_read+0xfa>
 8006cbc:	68fb      	ldr	r3, [r7, #12]
 8006cbe:	2202      	movs	r2, #2
 8006cc0:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 8006cc4:	2302      	movs	r3, #2
 8006cc6:	e0e9      	b.n	8006e9c <f_read+0x2ce>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 8006cc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006cca:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006cce:	d105      	bne.n	8006cdc <f_read+0x10e>
 8006cd0:	68fb      	ldr	r3, [r7, #12]
 8006cd2:	2201      	movs	r2, #1
 8006cd4:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 8006cd8:	2301      	movs	r3, #1
 8006cda:	e0df      	b.n	8006e9c <f_read+0x2ce>
				fp->clust = clst;				/* Update current cluster */
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006ce0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
			}
			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8006cea:	68fb      	ldr	r3, [r7, #12]
 8006cec:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8006cf0:	4619      	mov	r1, r3
 8006cf2:	4610      	mov	r0, r2
 8006cf4:	f7fe fa0a 	bl	800510c <clust2sect>
 8006cf8:	6138      	str	r0, [r7, #16]
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
 8006cfa:	693b      	ldr	r3, [r7, #16]
 8006cfc:	2b00      	cmp	r3, #0
 8006cfe:	d105      	bne.n	8006d0c <f_read+0x13e>
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	2202      	movs	r2, #2
 8006d04:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 8006d08:	2302      	movs	r3, #2
 8006d0a:	e0c7      	b.n	8006e9c <f_read+0x2ce>
			sect += csect;
 8006d0c:	7dfb      	ldrb	r3, [r7, #23]
 8006d0e:	693a      	ldr	r2, [r7, #16]
 8006d10:	4413      	add	r3, r2
 8006d12:	613b      	str	r3, [r7, #16]
			cc = btr / SS(fp->fs);				/* When remaining bytes >= sector size, */
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	0a5b      	lsrs	r3, r3, #9
 8006d18:	627b      	str	r3, [r7, #36]	; 0x24
			if (cc) {							/* Read maximum contiguous sectors directly */
 8006d1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d1c:	2b00      	cmp	r3, #0
 8006d1e:	d046      	beq.n	8006dae <f_read+0x1e0>
				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
 8006d20:	7dfa      	ldrb	r2, [r7, #23]
 8006d22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d24:	4413      	add	r3, r2
 8006d26:	68fa      	ldr	r2, [r7, #12]
 8006d28:	f8d2 2200 	ldr.w	r2, [r2, #512]	; 0x200
 8006d2c:	f892 2202 	ldrb.w	r2, [r2, #514]	; 0x202
 8006d30:	4293      	cmp	r3, r2
 8006d32:	d908      	bls.n	8006d46 <f_read+0x178>
					cc = fp->fs->csize - csect;
 8006d34:	68fb      	ldr	r3, [r7, #12]
 8006d36:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8006d3a:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 8006d3e:	461a      	mov	r2, r3
 8006d40:	7dfb      	ldrb	r3, [r7, #23]
 8006d42:	1ad3      	subs	r3, r2, r3
 8006d44:	627b      	str	r3, [r7, #36]	; 0x24
				if (disk_read(fp->fs->drv, rbuff, sect, cc) != RES_OK)
 8006d46:	68fb      	ldr	r3, [r7, #12]
 8006d48:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8006d4c:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 8006d50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d52:	693a      	ldr	r2, [r7, #16]
 8006d54:	6a39      	ldr	r1, [r7, #32]
 8006d56:	f7fd fe23 	bl	80049a0 <disk_read>
 8006d5a:	4603      	mov	r3, r0
 8006d5c:	2b00      	cmp	r3, #0
 8006d5e:	d005      	beq.n	8006d6c <f_read+0x19e>
					ABORT(fp->fs, FR_DISK_ERR);
 8006d60:	68fb      	ldr	r3, [r7, #12]
 8006d62:	2201      	movs	r2, #1
 8006d64:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 8006d68:	2301      	movs	r3, #1
 8006d6a:	e097      	b.n	8006e9c <f_read+0x2ce>
#if !_FS_READONLY && _FS_MINIMIZE <= 2			/* Replace one of the read sectors with cached data if it contains a dirty sector */
#if _FS_TINY
				if (fp->fs->wflag && fp->fs->winsect - sect < cc)
					mem_cpy(rbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), fp->fs->win.d8, SS(fp->fs));
#else
				if ((fp->flag & FA__DIRTY) && fp->dsect - sect < cc)
 8006d6c:	68fb      	ldr	r3, [r7, #12]
 8006d6e:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 8006d72:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d76:	2b00      	cmp	r3, #0
 8006d78:	d015      	beq.n	8006da6 <f_read+0x1d8>
 8006d7a:	68fb      	ldr	r3, [r7, #12]
 8006d7c:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 8006d80:	693b      	ldr	r3, [r7, #16]
 8006d82:	1ad3      	subs	r3, r2, r3
 8006d84:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006d86:	429a      	cmp	r2, r3
 8006d88:	d90d      	bls.n	8006da6 <f_read+0x1d8>
					mem_cpy(rbuff + ((fp->dsect - sect) * SS(fp->fs)), fp->buf.d8, SS(fp->fs));
 8006d8a:	68fb      	ldr	r3, [r7, #12]
 8006d8c:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 8006d90:	693b      	ldr	r3, [r7, #16]
 8006d92:	1ad3      	subs	r3, r2, r3
 8006d94:	025b      	lsls	r3, r3, #9
 8006d96:	6a3a      	ldr	r2, [r7, #32]
 8006d98:	4413      	add	r3, r2
 8006d9a:	68f9      	ldr	r1, [r7, #12]
 8006d9c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006da0:	4618      	mov	r0, r3
 8006da2:	f7fd fe5b 	bl	8004a5c <mem_cpy>
#endif
#endif
				rcnt = SS(fp->fs) * cc;			/* Number of bytes transferred */
 8006da6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006da8:	025b      	lsls	r3, r3, #9
 8006daa:	62bb      	str	r3, [r7, #40]	; 0x28
				continue;
 8006dac:	e05b      	b.n	8006e66 <f_read+0x298>
			}
#if !_FS_TINY
			if (fp->dsect != sect) {			/* Load data sector if not in cache */
 8006dae:	68fb      	ldr	r3, [r7, #12]
 8006db0:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8006db4:	693a      	ldr	r2, [r7, #16]
 8006db6:	429a      	cmp	r2, r3
 8006db8:	d037      	beq.n	8006e2a <f_read+0x25c>
#if !_FS_READONLY
				if (fp->flag & FA__DIRTY) {		/* Write-back dirty sector cache */
 8006dba:	68fb      	ldr	r3, [r7, #12]
 8006dbc:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 8006dc0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006dc4:	2b00      	cmp	r3, #0
 8006dc6:	d01d      	beq.n	8006e04 <f_read+0x236>
					if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8006dce:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 8006dd2:	68f9      	ldr	r1, [r7, #12]
 8006dd4:	68fb      	ldr	r3, [r7, #12]
 8006dd6:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 8006dda:	2301      	movs	r3, #1
 8006ddc:	f7fd fe00 	bl	80049e0 <disk_write>
 8006de0:	4603      	mov	r3, r0
 8006de2:	2b00      	cmp	r3, #0
 8006de4:	d005      	beq.n	8006df2 <f_read+0x224>
						ABORT(fp->fs, FR_DISK_ERR);
 8006de6:	68fb      	ldr	r3, [r7, #12]
 8006de8:	2201      	movs	r2, #1
 8006dea:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 8006dee:	2301      	movs	r3, #1
 8006df0:	e054      	b.n	8006e9c <f_read+0x2ce>
					fp->flag &= ~FA__DIRTY;
 8006df2:	68fb      	ldr	r3, [r7, #12]
 8006df4:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 8006df8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006dfc:	b2da      	uxtb	r2, r3
 8006dfe:	68fb      	ldr	r3, [r7, #12]
 8006e00:	f883 2206 	strb.w	r2, [r3, #518]	; 0x206
				}
#endif
				if (disk_read(fp->fs->drv, fp->buf.d8, sect, 1) != RES_OK)	/* Fill sector cache */
 8006e04:	68fb      	ldr	r3, [r7, #12]
 8006e06:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8006e0a:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 8006e0e:	68f9      	ldr	r1, [r7, #12]
 8006e10:	2301      	movs	r3, #1
 8006e12:	693a      	ldr	r2, [r7, #16]
 8006e14:	f7fd fdc4 	bl	80049a0 <disk_read>
 8006e18:	4603      	mov	r3, r0
 8006e1a:	2b00      	cmp	r3, #0
 8006e1c:	d005      	beq.n	8006e2a <f_read+0x25c>
					ABORT(fp->fs, FR_DISK_ERR);
 8006e1e:	68fb      	ldr	r3, [r7, #12]
 8006e20:	2201      	movs	r2, #1
 8006e22:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 8006e26:	2301      	movs	r3, #1
 8006e28:	e038      	b.n	8006e9c <f_read+0x2ce>
			}
#endif
			fp->dsect = sect;
 8006e2a:	68fb      	ldr	r3, [r7, #12]
 8006e2c:	693a      	ldr	r2, [r7, #16]
 8006e2e:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
		}
		rcnt = SS(fp->fs) - ((UINT)fp->fptr % SS(fp->fs));	/* Get partial sector data from sector buffer */
 8006e32:	68fb      	ldr	r3, [r7, #12]
 8006e34:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 8006e38:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006e3c:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8006e40:	62bb      	str	r3, [r7, #40]	; 0x28
		if (rcnt > btr) rcnt = btr;
 8006e42:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	429a      	cmp	r2, r3
 8006e48:	d901      	bls.n	8006e4e <f_read+0x280>
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	62bb      	str	r3, [r7, #40]	; 0x28
#if _FS_TINY
		if (move_window(fp->fs, fp->dsect) != FR_OK)		/* Move sector window */
			ABORT(fp->fs, FR_DISK_ERR);
		mem_cpy(rbuff, &fp->fs->win.d8[fp->fptr % SS(fp->fs)], rcnt);	/* Pick partial sector */
#else
		mem_cpy(rbuff, &fp->buf.d8[fp->fptr % SS(fp->fs)], rcnt);	/* Pick partial sector */
 8006e4e:	68fb      	ldr	r3, [r7, #12]
 8006e50:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 8006e54:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006e58:	68fa      	ldr	r2, [r7, #12]
 8006e5a:	4413      	add	r3, r2
 8006e5c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006e5e:	4619      	mov	r1, r3
 8006e60:	6a38      	ldr	r0, [r7, #32]
 8006e62:	f7fd fdfb 	bl	8004a5c <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 8006e66:	6a3a      	ldr	r2, [r7, #32]
 8006e68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e6a:	4413      	add	r3, r2
 8006e6c:	623b      	str	r3, [r7, #32]
 8006e6e:	68fb      	ldr	r3, [r7, #12]
 8006e70:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8006e74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e76:	441a      	add	r2, r3
 8006e78:	68fb      	ldr	r3, [r7, #12]
 8006e7a:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
 8006e7e:	683b      	ldr	r3, [r7, #0]
 8006e80:	681a      	ldr	r2, [r3, #0]
 8006e82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e84:	441a      	add	r2, r3
 8006e86:	683b      	ldr	r3, [r7, #0]
 8006e88:	601a      	str	r2, [r3, #0]
 8006e8a:	687a      	ldr	r2, [r7, #4]
 8006e8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e8e:	1ad3      	subs	r3, r2, r3
 8006e90:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	2b00      	cmp	r3, #0
 8006e96:	f47f aed2 	bne.w	8006c3e <f_read+0x70>
#endif
	}

	LEAVE_FF(fp->fs, FR_OK);
 8006e9a:	2300      	movs	r3, #0
}
 8006e9c:	4618      	mov	r0, r3
 8006e9e:	3730      	adds	r7, #48	; 0x30
 8006ea0:	46bd      	mov	sp, r7
 8006ea2:	bd80      	pop	{r7, pc}

08006ea4 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void *buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8006ea4:	b580      	push	{r7, lr}
 8006ea6:	b08a      	sub	sp, #40	; 0x28
 8006ea8:	af00      	add	r7, sp, #0
 8006eaa:	60f8      	str	r0, [r7, #12]
 8006eac:	60b9      	str	r1, [r7, #8]
 8006eae:	607a      	str	r2, [r7, #4]
 8006eb0:	603b      	str	r3, [r7, #0]
	FRESULT res;
	DWORD clst, sect;
	UINT wcnt, cc;
	const BYTE *wbuff = (const BYTE*)buff;
 8006eb2:	68bb      	ldr	r3, [r7, #8]
 8006eb4:	61bb      	str	r3, [r7, #24]
	BYTE csect;


	*bw = 0;	/* Clear write byte counter */
 8006eb6:	683b      	ldr	r3, [r7, #0]
 8006eb8:	2200      	movs	r2, #0
 8006eba:	601a      	str	r2, [r3, #0]

	res = validate(fp);						/* Check validity */
 8006ebc:	68f8      	ldr	r0, [r7, #12]
 8006ebe:	f7ff fb91 	bl	80065e4 <validate>
 8006ec2:	4603      	mov	r3, r0
 8006ec4:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
 8006ec6:	7dfb      	ldrb	r3, [r7, #23]
 8006ec8:	2b00      	cmp	r3, #0
 8006eca:	d001      	beq.n	8006ed0 <f_write+0x2c>
 8006ecc:	7dfb      	ldrb	r3, [r7, #23]
 8006ece:	e192      	b.n	80071f6 <f_write+0x352>
	if (fp->err)							/* Check error */
 8006ed0:	68fb      	ldr	r3, [r7, #12]
 8006ed2:	f893 3207 	ldrb.w	r3, [r3, #519]	; 0x207
 8006ed6:	2b00      	cmp	r3, #0
 8006ed8:	d003      	beq.n	8006ee2 <f_write+0x3e>
		LEAVE_FF(fp->fs, (FRESULT)fp->err);
 8006eda:	68fb      	ldr	r3, [r7, #12]
 8006edc:	f893 3207 	ldrb.w	r3, [r3, #519]	; 0x207
 8006ee0:	e189      	b.n	80071f6 <f_write+0x352>
	if (!(fp->flag & FA_WRITE))				/* Check access mode */
 8006ee2:	68fb      	ldr	r3, [r7, #12]
 8006ee4:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 8006ee8:	f003 0302 	and.w	r3, r3, #2
 8006eec:	2b00      	cmp	r3, #0
 8006eee:	d101      	bne.n	8006ef4 <f_write+0x50>
		LEAVE_FF(fp->fs, FR_DENIED);
 8006ef0:	2307      	movs	r3, #7
 8006ef2:	e180      	b.n	80071f6 <f_write+0x352>
	if (fp->fptr + btw < fp->fptr) btw = 0;	/* File size cannot reach 4GB */
 8006ef4:	68fb      	ldr	r3, [r7, #12]
 8006ef6:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	441a      	add	r2, r3
 8006efe:	68fb      	ldr	r3, [r7, #12]
 8006f00:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 8006f04:	429a      	cmp	r2, r3
 8006f06:	f080 8158 	bcs.w	80071ba <f_write+0x316>
 8006f0a:	2300      	movs	r3, #0
 8006f0c:	607b      	str	r3, [r7, #4]

	for ( ;  btw;							/* Repeat until all data written */
 8006f0e:	e154      	b.n	80071ba <f_write+0x316>
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
		if ((fp->fptr % SS(fp->fs)) == 0) {	/* On the sector boundary? */
 8006f10:	68fb      	ldr	r3, [r7, #12]
 8006f12:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 8006f16:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006f1a:	2b00      	cmp	r3, #0
 8006f1c:	f040 8114 	bne.w	8007148 <f_write+0x2a4>
			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
 8006f20:	68fb      	ldr	r3, [r7, #12]
 8006f22:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 8006f26:	0a5b      	lsrs	r3, r3, #9
 8006f28:	b2da      	uxtb	r2, r3
 8006f2a:	68fb      	ldr	r3, [r7, #12]
 8006f2c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8006f30:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 8006f34:	3b01      	subs	r3, #1
 8006f36:	b2db      	uxtb	r3, r3
 8006f38:	4013      	ands	r3, r2
 8006f3a:	75bb      	strb	r3, [r7, #22]
			if (!csect) {					/* On the cluster boundary? */
 8006f3c:	7dbb      	ldrb	r3, [r7, #22]
 8006f3e:	2b00      	cmp	r3, #0
 8006f40:	d151      	bne.n	8006fe6 <f_write+0x142>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8006f42:	68fb      	ldr	r3, [r7, #12]
 8006f44:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 8006f48:	2b00      	cmp	r3, #0
 8006f4a:	d10f      	bne.n	8006f6c <f_write+0xc8>
					clst = fp->sclust;		/* Follow from the origin */
 8006f4c:	68fb      	ldr	r3, [r7, #12]
 8006f4e:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8006f52:	627b      	str	r3, [r7, #36]	; 0x24
					if (clst == 0)			/* When no cluster is allocated, */
 8006f54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f56:	2b00      	cmp	r3, #0
 8006f58:	d121      	bne.n	8006f9e <f_write+0xfa>
						clst = create_chain(fp->fs, 0);	/* Create a new cluster chain */
 8006f5a:	68fb      	ldr	r3, [r7, #12]
 8006f5c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8006f60:	2100      	movs	r1, #0
 8006f62:	4618      	mov	r0, r3
 8006f64:	f7fe fb16 	bl	8005594 <create_chain>
 8006f68:	6278      	str	r0, [r7, #36]	; 0x24
 8006f6a:	e018      	b.n	8006f9e <f_write+0xfa>
				} else {					/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl)
 8006f6c:	68fb      	ldr	r3, [r7, #12]
 8006f6e:	f8d3 3224 	ldr.w	r3, [r3, #548]	; 0x224
 8006f72:	2b00      	cmp	r3, #0
 8006f74:	d008      	beq.n	8006f88 <f_write+0xe4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8006f76:	68fb      	ldr	r3, [r7, #12]
 8006f78:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 8006f7c:	4619      	mov	r1, r3
 8006f7e:	68f8      	ldr	r0, [r7, #12]
 8006f80:	f7fe fba5 	bl	80056ce <clmt_clust>
 8006f84:	6278      	str	r0, [r7, #36]	; 0x24
 8006f86:	e00a      	b.n	8006f9e <f_write+0xfa>
					else
#endif
						clst = create_chain(fp->fs, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8006f88:	68fb      	ldr	r3, [r7, #12]
 8006f8a:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8006f8e:	68fb      	ldr	r3, [r7, #12]
 8006f90:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8006f94:	4619      	mov	r1, r3
 8006f96:	4610      	mov	r0, r2
 8006f98:	f7fe fafc 	bl	8005594 <create_chain>
 8006f9c:	6278      	str	r0, [r7, #36]	; 0x24
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8006f9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fa0:	2b00      	cmp	r3, #0
 8006fa2:	f000 810f 	beq.w	80071c4 <f_write+0x320>
				if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
 8006fa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fa8:	2b01      	cmp	r3, #1
 8006faa:	d105      	bne.n	8006fb8 <f_write+0x114>
 8006fac:	68fb      	ldr	r3, [r7, #12]
 8006fae:	2202      	movs	r2, #2
 8006fb0:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 8006fb4:	2302      	movs	r3, #2
 8006fb6:	e11e      	b.n	80071f6 <f_write+0x352>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 8006fb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fba:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006fbe:	d105      	bne.n	8006fcc <f_write+0x128>
 8006fc0:	68fb      	ldr	r3, [r7, #12]
 8006fc2:	2201      	movs	r2, #1
 8006fc4:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 8006fc8:	2301      	movs	r3, #1
 8006fca:	e114      	b.n	80071f6 <f_write+0x352>
				fp->clust = clst;			/* Update current cluster */
 8006fcc:	68fb      	ldr	r3, [r7, #12]
 8006fce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006fd0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
				if (fp->sclust == 0) fp->sclust = clst;	/* Set start cluster if the first write */
 8006fd4:	68fb      	ldr	r3, [r7, #12]
 8006fd6:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8006fda:	2b00      	cmp	r3, #0
 8006fdc:	d103      	bne.n	8006fe6 <f_write+0x142>
 8006fde:	68fb      	ldr	r3, [r7, #12]
 8006fe0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006fe2:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
			}
#if _FS_TINY
			if (fp->fs->winsect == fp->dsect && sync_window(fp->fs))	/* Write-back sector cache */
				ABORT(fp->fs, FR_DISK_ERR);
#else
			if (fp->flag & FA__DIRTY) {		/* Write-back sector cache */
 8006fe6:	68fb      	ldr	r3, [r7, #12]
 8006fe8:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 8006fec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ff0:	2b00      	cmp	r3, #0
 8006ff2:	d01d      	beq.n	8007030 <f_write+0x18c>
				if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 8006ff4:	68fb      	ldr	r3, [r7, #12]
 8006ff6:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8006ffa:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 8006ffe:	68f9      	ldr	r1, [r7, #12]
 8007000:	68fb      	ldr	r3, [r7, #12]
 8007002:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 8007006:	2301      	movs	r3, #1
 8007008:	f7fd fcea 	bl	80049e0 <disk_write>
 800700c:	4603      	mov	r3, r0
 800700e:	2b00      	cmp	r3, #0
 8007010:	d005      	beq.n	800701e <f_write+0x17a>
					ABORT(fp->fs, FR_DISK_ERR);
 8007012:	68fb      	ldr	r3, [r7, #12]
 8007014:	2201      	movs	r2, #1
 8007016:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 800701a:	2301      	movs	r3, #1
 800701c:	e0eb      	b.n	80071f6 <f_write+0x352>
				fp->flag &= ~FA__DIRTY;
 800701e:	68fb      	ldr	r3, [r7, #12]
 8007020:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 8007024:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007028:	b2da      	uxtb	r2, r3
 800702a:	68fb      	ldr	r3, [r7, #12]
 800702c:	f883 2206 	strb.w	r2, [r3, #518]	; 0x206
			}
#endif
			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
 8007030:	68fb      	ldr	r3, [r7, #12]
 8007032:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8007036:	68fb      	ldr	r3, [r7, #12]
 8007038:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800703c:	4619      	mov	r1, r3
 800703e:	4610      	mov	r0, r2
 8007040:	f7fe f864 	bl	800510c <clust2sect>
 8007044:	6138      	str	r0, [r7, #16]
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
 8007046:	693b      	ldr	r3, [r7, #16]
 8007048:	2b00      	cmp	r3, #0
 800704a:	d105      	bne.n	8007058 <f_write+0x1b4>
 800704c:	68fb      	ldr	r3, [r7, #12]
 800704e:	2202      	movs	r2, #2
 8007050:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 8007054:	2302      	movs	r3, #2
 8007056:	e0ce      	b.n	80071f6 <f_write+0x352>
			sect += csect;
 8007058:	7dbb      	ldrb	r3, [r7, #22]
 800705a:	693a      	ldr	r2, [r7, #16]
 800705c:	4413      	add	r3, r2
 800705e:	613b      	str	r3, [r7, #16]
			cc = btw / SS(fp->fs);			/* When remaining bytes >= sector size, */
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	0a5b      	lsrs	r3, r3, #9
 8007064:	61fb      	str	r3, [r7, #28]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8007066:	69fb      	ldr	r3, [r7, #28]
 8007068:	2b00      	cmp	r3, #0
 800706a:	d048      	beq.n	80070fe <f_write+0x25a>
				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
 800706c:	7dba      	ldrb	r2, [r7, #22]
 800706e:	69fb      	ldr	r3, [r7, #28]
 8007070:	4413      	add	r3, r2
 8007072:	68fa      	ldr	r2, [r7, #12]
 8007074:	f8d2 2200 	ldr.w	r2, [r2, #512]	; 0x200
 8007078:	f892 2202 	ldrb.w	r2, [r2, #514]	; 0x202
 800707c:	4293      	cmp	r3, r2
 800707e:	d908      	bls.n	8007092 <f_write+0x1ee>
					cc = fp->fs->csize - csect;
 8007080:	68fb      	ldr	r3, [r7, #12]
 8007082:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8007086:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 800708a:	461a      	mov	r2, r3
 800708c:	7dbb      	ldrb	r3, [r7, #22]
 800708e:	1ad3      	subs	r3, r2, r3
 8007090:	61fb      	str	r3, [r7, #28]
				if (disk_write(fp->fs->drv, wbuff, sect, cc) != RES_OK)
 8007092:	68fb      	ldr	r3, [r7, #12]
 8007094:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8007098:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 800709c:	69fb      	ldr	r3, [r7, #28]
 800709e:	693a      	ldr	r2, [r7, #16]
 80070a0:	69b9      	ldr	r1, [r7, #24]
 80070a2:	f7fd fc9d 	bl	80049e0 <disk_write>
 80070a6:	4603      	mov	r3, r0
 80070a8:	2b00      	cmp	r3, #0
 80070aa:	d005      	beq.n	80070b8 <f_write+0x214>
					ABORT(fp->fs, FR_DISK_ERR);
 80070ac:	68fb      	ldr	r3, [r7, #12]
 80070ae:	2201      	movs	r2, #1
 80070b0:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 80070b4:	2301      	movs	r3, #1
 80070b6:	e09e      	b.n	80071f6 <f_write+0x352>
				if (fp->fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fp->fs->win.d8, wbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), SS(fp->fs));
					fp->fs->wflag = 0;
				}
#else
				if (fp->dsect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 80070b8:	68fb      	ldr	r3, [r7, #12]
 80070ba:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 80070be:	693b      	ldr	r3, [r7, #16]
 80070c0:	1ad3      	subs	r3, r2, r3
 80070c2:	69fa      	ldr	r2, [r7, #28]
 80070c4:	429a      	cmp	r2, r3
 80070c6:	d916      	bls.n	80070f6 <f_write+0x252>
					mem_cpy(fp->buf.d8, wbuff + ((fp->dsect - sect) * SS(fp->fs)), SS(fp->fs));
 80070c8:	68f8      	ldr	r0, [r7, #12]
 80070ca:	68fb      	ldr	r3, [r7, #12]
 80070cc:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 80070d0:	693b      	ldr	r3, [r7, #16]
 80070d2:	1ad3      	subs	r3, r2, r3
 80070d4:	025b      	lsls	r3, r3, #9
 80070d6:	69ba      	ldr	r2, [r7, #24]
 80070d8:	4413      	add	r3, r2
 80070da:	f44f 7200 	mov.w	r2, #512	; 0x200
 80070de:	4619      	mov	r1, r3
 80070e0:	f7fd fcbc 	bl	8004a5c <mem_cpy>
					fp->flag &= ~FA__DIRTY;
 80070e4:	68fb      	ldr	r3, [r7, #12]
 80070e6:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 80070ea:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80070ee:	b2da      	uxtb	r2, r3
 80070f0:	68fb      	ldr	r3, [r7, #12]
 80070f2:	f883 2206 	strb.w	r2, [r3, #518]	; 0x206
				}
#endif
#endif
				wcnt = SS(fp->fs) * cc;		/* Number of bytes transferred */
 80070f6:	69fb      	ldr	r3, [r7, #28]
 80070f8:	025b      	lsls	r3, r3, #9
 80070fa:	623b      	str	r3, [r7, #32]
				continue;
 80070fc:	e047      	b.n	800718e <f_write+0x2ea>
			if (fp->fptr >= fp->fsize) {	/* Avoid silly cache filling at growing edge */
				if (sync_window(fp->fs)) ABORT(fp->fs, FR_DISK_ERR);
				fp->fs->winsect = sect;
			}
#else
			if (fp->dsect != sect) {		/* Fill sector cache with file data */
 80070fe:	68fb      	ldr	r3, [r7, #12]
 8007100:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8007104:	693a      	ldr	r2, [r7, #16]
 8007106:	429a      	cmp	r2, r3
 8007108:	d01a      	beq.n	8007140 <f_write+0x29c>
				if (fp->fptr < fp->fsize &&
 800710a:	68fb      	ldr	r3, [r7, #12]
 800710c:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8007110:	68fb      	ldr	r3, [r7, #12]
 8007112:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8007116:	429a      	cmp	r2, r3
 8007118:	d212      	bcs.n	8007140 <f_write+0x29c>
					disk_read(fp->fs->drv, fp->buf.d8, sect, 1) != RES_OK)
 800711a:	68fb      	ldr	r3, [r7, #12]
 800711c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8007120:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 8007124:	68f9      	ldr	r1, [r7, #12]
 8007126:	2301      	movs	r3, #1
 8007128:	693a      	ldr	r2, [r7, #16]
 800712a:	f7fd fc39 	bl	80049a0 <disk_read>
 800712e:	4603      	mov	r3, r0
				if (fp->fptr < fp->fsize &&
 8007130:	2b00      	cmp	r3, #0
 8007132:	d005      	beq.n	8007140 <f_write+0x29c>
						ABORT(fp->fs, FR_DISK_ERR);
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	2201      	movs	r2, #1
 8007138:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 800713c:	2301      	movs	r3, #1
 800713e:	e05a      	b.n	80071f6 <f_write+0x352>
			}
#endif
			fp->dsect = sect;
 8007140:	68fb      	ldr	r3, [r7, #12]
 8007142:	693a      	ldr	r2, [r7, #16]
 8007144:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
		}
		wcnt = SS(fp->fs) - ((UINT)fp->fptr % SS(fp->fs));/* Put partial sector into file I/O buffer */
 8007148:	68fb      	ldr	r3, [r7, #12]
 800714a:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 800714e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007152:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8007156:	623b      	str	r3, [r7, #32]
		if (wcnt > btw) wcnt = btw;
 8007158:	6a3a      	ldr	r2, [r7, #32]
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	429a      	cmp	r2, r3
 800715e:	d901      	bls.n	8007164 <f_write+0x2c0>
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	623b      	str	r3, [r7, #32]
		if (move_window(fp->fs, fp->dsect) != FR_OK)	/* Move sector window */
			ABORT(fp->fs, FR_DISK_ERR);
		mem_cpy(&fp->fs->win.d8[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
		fp->fs->wflag = 1;
#else
		mem_cpy(&fp->buf.d8[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
 8007164:	68fb      	ldr	r3, [r7, #12]
 8007166:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 800716a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800716e:	68fa      	ldr	r2, [r7, #12]
 8007170:	4413      	add	r3, r2
 8007172:	6a3a      	ldr	r2, [r7, #32]
 8007174:	69b9      	ldr	r1, [r7, #24]
 8007176:	4618      	mov	r0, r3
 8007178:	f7fd fc70 	bl	8004a5c <mem_cpy>
		fp->flag |= FA__DIRTY;
 800717c:	68fb      	ldr	r3, [r7, #12]
 800717e:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 8007182:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007186:	b2da      	uxtb	r2, r3
 8007188:	68fb      	ldr	r3, [r7, #12]
 800718a:	f883 2206 	strb.w	r2, [r3, #518]	; 0x206
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
 800718e:	69ba      	ldr	r2, [r7, #24]
 8007190:	6a3b      	ldr	r3, [r7, #32]
 8007192:	4413      	add	r3, r2
 8007194:	61bb      	str	r3, [r7, #24]
 8007196:	68fb      	ldr	r3, [r7, #12]
 8007198:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800719c:	6a3b      	ldr	r3, [r7, #32]
 800719e:	441a      	add	r2, r3
 80071a0:	68fb      	ldr	r3, [r7, #12]
 80071a2:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
 80071a6:	683b      	ldr	r3, [r7, #0]
 80071a8:	681a      	ldr	r2, [r3, #0]
 80071aa:	6a3b      	ldr	r3, [r7, #32]
 80071ac:	441a      	add	r2, r3
 80071ae:	683b      	ldr	r3, [r7, #0]
 80071b0:	601a      	str	r2, [r3, #0]
 80071b2:	687a      	ldr	r2, [r7, #4]
 80071b4:	6a3b      	ldr	r3, [r7, #32]
 80071b6:	1ad3      	subs	r3, r2, r3
 80071b8:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	2b00      	cmp	r3, #0
 80071be:	f47f aea7 	bne.w	8006f10 <f_write+0x6c>
 80071c2:	e000      	b.n	80071c6 <f_write+0x322>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 80071c4:	bf00      	nop
#endif
	}

	if (fp->fptr > fp->fsize) fp->fsize = fp->fptr;	/* Update file size if needed */
 80071c6:	68fb      	ldr	r3, [r7, #12]
 80071c8:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 80071cc:	68fb      	ldr	r3, [r7, #12]
 80071ce:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 80071d2:	429a      	cmp	r2, r3
 80071d4:	d905      	bls.n	80071e2 <f_write+0x33e>
 80071d6:	68fb      	ldr	r3, [r7, #12]
 80071d8:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 80071dc:	68fb      	ldr	r3, [r7, #12]
 80071de:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
	fp->flag |= FA__WRITTEN;						/* Set file change flag */
 80071e2:	68fb      	ldr	r3, [r7, #12]
 80071e4:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 80071e8:	f043 0320 	orr.w	r3, r3, #32
 80071ec:	b2da      	uxtb	r2, r3
 80071ee:	68fb      	ldr	r3, [r7, #12]
 80071f0:	f883 2206 	strb.w	r2, [r3, #518]	; 0x206

	LEAVE_FF(fp->fs, FR_OK);
 80071f4:	2300      	movs	r3, #0
}
 80071f6:	4618      	mov	r0, r3
 80071f8:	3728      	adds	r7, #40	; 0x28
 80071fa:	46bd      	mov	sp, r7
 80071fc:	bd80      	pop	{r7, pc}

080071fe <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 80071fe:	b580      	push	{r7, lr}
 8007200:	b086      	sub	sp, #24
 8007202:	af00      	add	r7, sp, #0
 8007204:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DWORD tm;
	BYTE *dir;


	res = validate(fp);					/* Check validity of the object */
 8007206:	6878      	ldr	r0, [r7, #4]
 8007208:	f7ff f9ec 	bl	80065e4 <validate>
 800720c:	4603      	mov	r3, r0
 800720e:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8007210:	7dfb      	ldrb	r3, [r7, #23]
 8007212:	2b00      	cmp	r3, #0
 8007214:	f040 80a8 	bne.w	8007368 <f_sync+0x16a>
		if (fp->flag & FA__WRITTEN) {	/* Has the file been written? */
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 800721e:	f003 0320 	and.w	r3, r3, #32
 8007222:	2b00      	cmp	r3, #0
 8007224:	f000 80a0 	beq.w	8007368 <f_sync+0x16a>
			/* Write-back dirty buffer */
#if !_FS_TINY
			if (fp->flag & FA__DIRTY) {
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 800722e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007232:	2b00      	cmp	r3, #0
 8007234:	d019      	beq.n	800726a <f_sync+0x6c>
				if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800723c:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 8007240:	6879      	ldr	r1, [r7, #4]
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 8007248:	2301      	movs	r3, #1
 800724a:	f7fd fbc9 	bl	80049e0 <disk_write>
 800724e:	4603      	mov	r3, r0
 8007250:	2b00      	cmp	r3, #0
 8007252:	d001      	beq.n	8007258 <f_sync+0x5a>
					LEAVE_FF(fp->fs, FR_DISK_ERR);
 8007254:	2301      	movs	r3, #1
 8007256:	e088      	b.n	800736a <f_sync+0x16c>
				fp->flag &= ~FA__DIRTY;
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 800725e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007262:	b2da      	uxtb	r2, r3
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	f883 2206 	strb.w	r2, [r3, #518]	; 0x206
			}
#endif
			/* Update the directory entry */
			res = move_window(fp->fs, fp->dir_sect);
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 8007276:	4619      	mov	r1, r3
 8007278:	4610      	mov	r0, r2
 800727a:	f7fd fe6c 	bl	8004f56 <move_window>
 800727e:	4603      	mov	r3, r0
 8007280:	75fb      	strb	r3, [r7, #23]
			if (res == FR_OK) {
 8007282:	7dfb      	ldrb	r3, [r7, #23]
 8007284:	2b00      	cmp	r3, #0
 8007286:	d16f      	bne.n	8007368 <f_sync+0x16a>
				dir = fp->dir_ptr;
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 800728e:	613b      	str	r3, [r7, #16]
				dir[DIR_Attr] |= AM_ARC;					/* Set archive bit */
 8007290:	693b      	ldr	r3, [r7, #16]
 8007292:	330b      	adds	r3, #11
 8007294:	781a      	ldrb	r2, [r3, #0]
 8007296:	693b      	ldr	r3, [r7, #16]
 8007298:	330b      	adds	r3, #11
 800729a:	f042 0220 	orr.w	r2, r2, #32
 800729e:	b2d2      	uxtb	r2, r2
 80072a0:	701a      	strb	r2, [r3, #0]
				ST_DWORD(dir + DIR_FileSize, fp->fsize);	/* Update file size */
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80072a8:	693b      	ldr	r3, [r7, #16]
 80072aa:	331c      	adds	r3, #28
 80072ac:	b2d2      	uxtb	r2, r2
 80072ae:	701a      	strb	r2, [r3, #0]
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 80072b6:	b29b      	uxth	r3, r3
 80072b8:	0a1b      	lsrs	r3, r3, #8
 80072ba:	b29a      	uxth	r2, r3
 80072bc:	693b      	ldr	r3, [r7, #16]
 80072be:	331d      	adds	r3, #29
 80072c0:	b2d2      	uxtb	r2, r2
 80072c2:	701a      	strb	r2, [r3, #0]
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 80072ca:	0c1a      	lsrs	r2, r3, #16
 80072cc:	693b      	ldr	r3, [r7, #16]
 80072ce:	331e      	adds	r3, #30
 80072d0:	b2d2      	uxtb	r2, r2
 80072d2:	701a      	strb	r2, [r3, #0]
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 80072da:	0e1a      	lsrs	r2, r3, #24
 80072dc:	693b      	ldr	r3, [r7, #16]
 80072de:	331f      	adds	r3, #31
 80072e0:	b2d2      	uxtb	r2, r2
 80072e2:	701a      	strb	r2, [r3, #0]
				st_clust(dir, fp->sclust);					/* Update start cluster */
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 80072ea:	4619      	mov	r1, r3
 80072ec:	6938      	ldr	r0, [r7, #16]
 80072ee:	f7fe fc26 	bl	8005b3e <st_clust>
				tm = GET_FATTIME();							/* Update updated time */
 80072f2:	f7fc fddd 	bl	8003eb0 <get_fattime>
 80072f6:	60f8      	str	r0, [r7, #12]
				ST_DWORD(dir + DIR_WrtTime, tm);
 80072f8:	693b      	ldr	r3, [r7, #16]
 80072fa:	3316      	adds	r3, #22
 80072fc:	68fa      	ldr	r2, [r7, #12]
 80072fe:	b2d2      	uxtb	r2, r2
 8007300:	701a      	strb	r2, [r3, #0]
 8007302:	68fb      	ldr	r3, [r7, #12]
 8007304:	b29b      	uxth	r3, r3
 8007306:	0a1b      	lsrs	r3, r3, #8
 8007308:	b29a      	uxth	r2, r3
 800730a:	693b      	ldr	r3, [r7, #16]
 800730c:	3317      	adds	r3, #23
 800730e:	b2d2      	uxtb	r2, r2
 8007310:	701a      	strb	r2, [r3, #0]
 8007312:	68fb      	ldr	r3, [r7, #12]
 8007314:	0c1a      	lsrs	r2, r3, #16
 8007316:	693b      	ldr	r3, [r7, #16]
 8007318:	3318      	adds	r3, #24
 800731a:	b2d2      	uxtb	r2, r2
 800731c:	701a      	strb	r2, [r3, #0]
 800731e:	68fb      	ldr	r3, [r7, #12]
 8007320:	0e1a      	lsrs	r2, r3, #24
 8007322:	693b      	ldr	r3, [r7, #16]
 8007324:	3319      	adds	r3, #25
 8007326:	b2d2      	uxtb	r2, r2
 8007328:	701a      	strb	r2, [r3, #0]
				ST_WORD(dir + DIR_LstAccDate, 0);
 800732a:	693b      	ldr	r3, [r7, #16]
 800732c:	3312      	adds	r3, #18
 800732e:	2200      	movs	r2, #0
 8007330:	701a      	strb	r2, [r3, #0]
 8007332:	693b      	ldr	r3, [r7, #16]
 8007334:	3313      	adds	r3, #19
 8007336:	2200      	movs	r2, #0
 8007338:	701a      	strb	r2, [r3, #0]
				fp->flag &= ~FA__WRITTEN;
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 8007340:	f023 0320 	bic.w	r3, r3, #32
 8007344:	b2da      	uxtb	r2, r3
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	f883 2206 	strb.w	r2, [r3, #518]	; 0x206
				fp->fs->wflag = 1;
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8007352:	2201      	movs	r2, #1
 8007354:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
				res = sync_fs(fp->fs);
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800735e:	4618      	mov	r0, r3
 8007360:	f7fd fe27 	bl	8004fb2 <sync_fs>
 8007364:	4603      	mov	r3, r0
 8007366:	75fb      	strb	r3, [r7, #23]
			}
		}
	}

	LEAVE_FF(fp->fs, res);
 8007368:	7dfb      	ldrb	r3, [r7, #23]
}
 800736a:	4618      	mov	r0, r3
 800736c:	3718      	adds	r7, #24
 800736e:	46bd      	mov	sp, r7
 8007370:	bd80      	pop	{r7, pc}

08007372 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL *fp		/* Pointer to the file object to be closed */
)
{
 8007372:	b580      	push	{r7, lr}
 8007374:	b084      	sub	sp, #16
 8007376:	af00      	add	r7, sp, #0
 8007378:	6078      	str	r0, [r7, #4]
	FRESULT res;


#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800737a:	6878      	ldr	r0, [r7, #4]
 800737c:	f7ff ff3f 	bl	80071fe <f_sync>
 8007380:	4603      	mov	r3, r0
 8007382:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8007384:	7bfb      	ldrb	r3, [r7, #15]
 8007386:	2b00      	cmp	r3, #0
 8007388:	d116      	bne.n	80073b8 <f_close+0x46>
#endif
	{
		res = validate(fp);				/* Lock volume */
 800738a:	6878      	ldr	r0, [r7, #4]
 800738c:	f7ff f92a 	bl	80065e4 <validate>
 8007390:	4603      	mov	r3, r0
 8007392:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8007394:	7bfb      	ldrb	r3, [r7, #15]
 8007396:	2b00      	cmp	r3, #0
 8007398:	d10e      	bne.n	80073b8 <f_close+0x46>
#if _FS_REENTRANT
			FATFS *fs = fp->fs;
#endif
#if _FS_LOCK
			res = dec_lock(fp->lockid);	/* Decrement file open counter */
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	f8d3 3228 	ldr.w	r3, [r3, #552]	; 0x228
 80073a0:	4618      	mov	r0, r3
 80073a2:	f7fd fd21 	bl	8004de8 <dec_lock>
 80073a6:	4603      	mov	r3, r0
 80073a8:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 80073aa:	7bfb      	ldrb	r3, [r7, #15]
 80073ac:	2b00      	cmp	r3, #0
 80073ae:	d103      	bne.n	80073b8 <f_close+0x46>
#endif
				fp->fs = 0;				/* Invalidate file object */
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	2200      	movs	r2, #0
 80073b4:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 80073b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80073ba:	4618      	mov	r0, r3
 80073bc:	3710      	adds	r7, #16
 80073be:	46bd      	mov	sp, r7
 80073c0:	bd80      	pop	{r7, pc}

080073c2 <f_getfree>:
FRESULT f_getfree (
	const TCHAR* path,	/* Path name of the logical drive number */
	DWORD* nclst,		/* Pointer to a variable to return number of free clusters */
	FATFS** fatfs		/* Pointer to return pointer to corresponding file system object */
)
{
 80073c2:	b580      	push	{r7, lr}
 80073c4:	b08e      	sub	sp, #56	; 0x38
 80073c6:	af00      	add	r7, sp, #0
 80073c8:	60f8      	str	r0, [r7, #12]
 80073ca:	60b9      	str	r1, [r7, #8]
 80073cc:	607a      	str	r2, [r7, #4]
	UINT i;
	BYTE fat, *p;


	/* Get logical drive number */
	res = find_volume(fatfs, &path, 0);
 80073ce:	f107 030c 	add.w	r3, r7, #12
 80073d2:	2200      	movs	r2, #0
 80073d4:	4619      	mov	r1, r3
 80073d6:	6878      	ldr	r0, [r7, #4]
 80073d8:	f7fe fe3c 	bl	8006054 <find_volume>
 80073dc:	4603      	mov	r3, r0
 80073de:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	fs = *fatfs;
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	61fb      	str	r3, [r7, #28]
	if (res == FR_OK) {
 80073e8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80073ec:	2b00      	cmp	r3, #0
 80073ee:	f040 80af 	bne.w	8007550 <f_getfree+0x18e>
		/* If free_clust is valid, return it without full cluster scan */
		if (fs->free_clust <= fs->n_fatent - 2) {
 80073f2:	69fb      	ldr	r3, [r7, #28]
 80073f4:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 80073f8:	69fb      	ldr	r3, [r7, #28]
 80073fa:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80073fe:	3b02      	subs	r3, #2
 8007400:	429a      	cmp	r2, r3
 8007402:	d805      	bhi.n	8007410 <f_getfree+0x4e>
			*nclst = fs->free_clust;
 8007404:	69fb      	ldr	r3, [r7, #28]
 8007406:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 800740a:	68bb      	ldr	r3, [r7, #8]
 800740c:	601a      	str	r2, [r3, #0]
 800740e:	e09f      	b.n	8007550 <f_getfree+0x18e>
		} else {
			/* Get number of free clusters */
			fat = fs->fs_type;
 8007410:	69fb      	ldr	r3, [r7, #28]
 8007412:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8007416:	76fb      	strb	r3, [r7, #27]
			n = 0;
 8007418:	2300      	movs	r3, #0
 800741a:	633b      	str	r3, [r7, #48]	; 0x30
			if (fat == FS_FAT12) {
 800741c:	7efb      	ldrb	r3, [r7, #27]
 800741e:	2b01      	cmp	r3, #1
 8007420:	d125      	bne.n	800746e <f_getfree+0xac>
				clst = 2;
 8007422:	2302      	movs	r3, #2
 8007424:	62fb      	str	r3, [r7, #44]	; 0x2c
				do {
					stat = get_fat(fs, clst);
 8007426:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007428:	69f8      	ldr	r0, [r7, #28]
 800742a:	f7fd fe91 	bl	8005150 <get_fat>
 800742e:	6178      	str	r0, [r7, #20]
					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
 8007430:	697b      	ldr	r3, [r7, #20]
 8007432:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007436:	d103      	bne.n	8007440 <f_getfree+0x7e>
 8007438:	2301      	movs	r3, #1
 800743a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800743e:	e077      	b.n	8007530 <f_getfree+0x16e>
					if (stat == 1) { res = FR_INT_ERR; break; }
 8007440:	697b      	ldr	r3, [r7, #20]
 8007442:	2b01      	cmp	r3, #1
 8007444:	d103      	bne.n	800744e <f_getfree+0x8c>
 8007446:	2302      	movs	r3, #2
 8007448:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800744c:	e070      	b.n	8007530 <f_getfree+0x16e>
					if (stat == 0) n++;
 800744e:	697b      	ldr	r3, [r7, #20]
 8007450:	2b00      	cmp	r3, #0
 8007452:	d102      	bne.n	800745a <f_getfree+0x98>
 8007454:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007456:	3301      	adds	r3, #1
 8007458:	633b      	str	r3, [r7, #48]	; 0x30
				} while (++clst < fs->n_fatent);
 800745a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800745c:	3301      	adds	r3, #1
 800745e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007460:	69fb      	ldr	r3, [r7, #28]
 8007462:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8007466:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007468:	429a      	cmp	r2, r3
 800746a:	d3dc      	bcc.n	8007426 <f_getfree+0x64>
 800746c:	e060      	b.n	8007530 <f_getfree+0x16e>
			} else {
				clst = fs->n_fatent;
 800746e:	69fb      	ldr	r3, [r7, #28]
 8007470:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8007474:	62fb      	str	r3, [r7, #44]	; 0x2c
				sect = fs->fatbase;
 8007476:	69fb      	ldr	r3, [r7, #28]
 8007478:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 800747c:	62bb      	str	r3, [r7, #40]	; 0x28
				i = 0; p = 0;
 800747e:	2300      	movs	r3, #0
 8007480:	627b      	str	r3, [r7, #36]	; 0x24
 8007482:	2300      	movs	r3, #0
 8007484:	623b      	str	r3, [r7, #32]
				do {
					if (!i) {
 8007486:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007488:	2b00      	cmp	r3, #0
 800748a:	d112      	bne.n	80074b2 <f_getfree+0xf0>
						res = move_window(fs, sect++);
 800748c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800748e:	1c5a      	adds	r2, r3, #1
 8007490:	62ba      	str	r2, [r7, #40]	; 0x28
 8007492:	4619      	mov	r1, r3
 8007494:	69f8      	ldr	r0, [r7, #28]
 8007496:	f7fd fd5e 	bl	8004f56 <move_window>
 800749a:	4603      	mov	r3, r0
 800749c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
						if (res != FR_OK) break;
 80074a0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80074a4:	2b00      	cmp	r3, #0
 80074a6:	d142      	bne.n	800752e <f_getfree+0x16c>
						p = fs->win.d8;
 80074a8:	69fb      	ldr	r3, [r7, #28]
 80074aa:	623b      	str	r3, [r7, #32]
						i = SS(fs);
 80074ac:	f44f 7300 	mov.w	r3, #512	; 0x200
 80074b0:	627b      	str	r3, [r7, #36]	; 0x24
					}
					if (fat == FS_FAT16) {
 80074b2:	7efb      	ldrb	r3, [r7, #27]
 80074b4:	2b02      	cmp	r3, #2
 80074b6:	d115      	bne.n	80074e4 <f_getfree+0x122>
						if (LD_WORD(p) == 0) n++;
 80074b8:	6a3b      	ldr	r3, [r7, #32]
 80074ba:	3301      	adds	r3, #1
 80074bc:	781b      	ldrb	r3, [r3, #0]
 80074be:	021b      	lsls	r3, r3, #8
 80074c0:	b21a      	sxth	r2, r3
 80074c2:	6a3b      	ldr	r3, [r7, #32]
 80074c4:	781b      	ldrb	r3, [r3, #0]
 80074c6:	b21b      	sxth	r3, r3
 80074c8:	4313      	orrs	r3, r2
 80074ca:	b21b      	sxth	r3, r3
 80074cc:	2b00      	cmp	r3, #0
 80074ce:	d102      	bne.n	80074d6 <f_getfree+0x114>
 80074d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074d2:	3301      	adds	r3, #1
 80074d4:	633b      	str	r3, [r7, #48]	; 0x30
						p += 2; i -= 2;
 80074d6:	6a3b      	ldr	r3, [r7, #32]
 80074d8:	3302      	adds	r3, #2
 80074da:	623b      	str	r3, [r7, #32]
 80074dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074de:	3b02      	subs	r3, #2
 80074e0:	627b      	str	r3, [r7, #36]	; 0x24
 80074e2:	e01d      	b.n	8007520 <f_getfree+0x15e>
					} else {
						if ((LD_DWORD(p) & 0x0FFFFFFF) == 0) n++;
 80074e4:	6a3b      	ldr	r3, [r7, #32]
 80074e6:	3303      	adds	r3, #3
 80074e8:	781b      	ldrb	r3, [r3, #0]
 80074ea:	061a      	lsls	r2, r3, #24
 80074ec:	6a3b      	ldr	r3, [r7, #32]
 80074ee:	3302      	adds	r3, #2
 80074f0:	781b      	ldrb	r3, [r3, #0]
 80074f2:	041b      	lsls	r3, r3, #16
 80074f4:	4313      	orrs	r3, r2
 80074f6:	6a3a      	ldr	r2, [r7, #32]
 80074f8:	3201      	adds	r2, #1
 80074fa:	7812      	ldrb	r2, [r2, #0]
 80074fc:	0212      	lsls	r2, r2, #8
 80074fe:	4313      	orrs	r3, r2
 8007500:	6a3a      	ldr	r2, [r7, #32]
 8007502:	7812      	ldrb	r2, [r2, #0]
 8007504:	4313      	orrs	r3, r2
 8007506:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800750a:	2b00      	cmp	r3, #0
 800750c:	d102      	bne.n	8007514 <f_getfree+0x152>
 800750e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007510:	3301      	adds	r3, #1
 8007512:	633b      	str	r3, [r7, #48]	; 0x30
						p += 4; i -= 4;
 8007514:	6a3b      	ldr	r3, [r7, #32]
 8007516:	3304      	adds	r3, #4
 8007518:	623b      	str	r3, [r7, #32]
 800751a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800751c:	3b04      	subs	r3, #4
 800751e:	627b      	str	r3, [r7, #36]	; 0x24
					}
				} while (--clst);
 8007520:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007522:	3b01      	subs	r3, #1
 8007524:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007526:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007528:	2b00      	cmp	r3, #0
 800752a:	d1ac      	bne.n	8007486 <f_getfree+0xc4>
 800752c:	e000      	b.n	8007530 <f_getfree+0x16e>
						if (res != FR_OK) break;
 800752e:	bf00      	nop
			}
			fs->free_clust = n;
 8007530:	69fb      	ldr	r3, [r7, #28]
 8007532:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007534:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
			fs->fsi_flag |= 1;
 8007538:	69fb      	ldr	r3, [r7, #28]
 800753a:	f893 3205 	ldrb.w	r3, [r3, #517]	; 0x205
 800753e:	f043 0301 	orr.w	r3, r3, #1
 8007542:	b2da      	uxtb	r2, r3
 8007544:	69fb      	ldr	r3, [r7, #28]
 8007546:	f883 2205 	strb.w	r2, [r3, #517]	; 0x205
			*nclst = n;
 800754a:	68bb      	ldr	r3, [r7, #8]
 800754c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800754e:	601a      	str	r2, [r3, #0]
		}
	}
	LEAVE_FF(fs, res);
 8007550:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
}
 8007554:	4618      	mov	r0, r3
 8007556:	3738      	adds	r7, #56	; 0x38
 8007558:	46bd      	mov	sp, r7
 800755a:	bd80      	pop	{r7, pc}

0800755c <f_gets>:
TCHAR* f_gets (
	TCHAR* buff,	/* Pointer to the string buffer to read */
	int len,		/* Size of string buffer (characters) */
	FIL* fp			/* Pointer to the file object */
)
{
 800755c:	b580      	push	{r7, lr}
 800755e:	b088      	sub	sp, #32
 8007560:	af00      	add	r7, sp, #0
 8007562:	60f8      	str	r0, [r7, #12]
 8007564:	60b9      	str	r1, [r7, #8]
 8007566:	607a      	str	r2, [r7, #4]
	int n = 0;
 8007568:	2300      	movs	r3, #0
 800756a:	61fb      	str	r3, [r7, #28]
	TCHAR c, *p = buff;
 800756c:	68fb      	ldr	r3, [r7, #12]
 800756e:	61bb      	str	r3, [r7, #24]
	BYTE s[2];
	UINT rc;


	while (n < len - 1) {	/* Read characters until buffer gets filled */
 8007570:	e01b      	b.n	80075aa <f_gets+0x4e>
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
#else						/* Read a character without conversion */
		f_read(fp, s, 1, &rc);
 8007572:	f107 0310 	add.w	r3, r7, #16
 8007576:	f107 0114 	add.w	r1, r7, #20
 800757a:	2201      	movs	r2, #1
 800757c:	6878      	ldr	r0, [r7, #4]
 800757e:	f7ff fb26 	bl	8006bce <f_read>
		if (rc != 1) break;
 8007582:	693b      	ldr	r3, [r7, #16]
 8007584:	2b01      	cmp	r3, #1
 8007586:	d116      	bne.n	80075b6 <f_gets+0x5a>
		c = s[0];
 8007588:	7d3b      	ldrb	r3, [r7, #20]
 800758a:	75fb      	strb	r3, [r7, #23]
#endif
		if (_USE_STRFUNC == 2 && c == '\r') continue;	/* Strip '\r' */
 800758c:	7dfb      	ldrb	r3, [r7, #23]
 800758e:	2b0d      	cmp	r3, #13
 8007590:	d100      	bne.n	8007594 <f_gets+0x38>
 8007592:	e00a      	b.n	80075aa <f_gets+0x4e>
		*p++ = c;
 8007594:	69bb      	ldr	r3, [r7, #24]
 8007596:	1c5a      	adds	r2, r3, #1
 8007598:	61ba      	str	r2, [r7, #24]
 800759a:	7dfa      	ldrb	r2, [r7, #23]
 800759c:	701a      	strb	r2, [r3, #0]
		n++;
 800759e:	69fb      	ldr	r3, [r7, #28]
 80075a0:	3301      	adds	r3, #1
 80075a2:	61fb      	str	r3, [r7, #28]
		if (c == '\n') break;		/* Break on EOL */
 80075a4:	7dfb      	ldrb	r3, [r7, #23]
 80075a6:	2b0a      	cmp	r3, #10
 80075a8:	d007      	beq.n	80075ba <f_gets+0x5e>
	while (n < len - 1) {	/* Read characters until buffer gets filled */
 80075aa:	68bb      	ldr	r3, [r7, #8]
 80075ac:	3b01      	subs	r3, #1
 80075ae:	69fa      	ldr	r2, [r7, #28]
 80075b0:	429a      	cmp	r2, r3
 80075b2:	dbde      	blt.n	8007572 <f_gets+0x16>
 80075b4:	e002      	b.n	80075bc <f_gets+0x60>
		if (rc != 1) break;
 80075b6:	bf00      	nop
 80075b8:	e000      	b.n	80075bc <f_gets+0x60>
		if (c == '\n') break;		/* Break on EOL */
 80075ba:	bf00      	nop
	}
	*p = 0;
 80075bc:	69bb      	ldr	r3, [r7, #24]
 80075be:	2200      	movs	r2, #0
 80075c0:	701a      	strb	r2, [r3, #0]
	return n ? buff : 0;			/* When no data read (eof or error), return with error. */
 80075c2:	69fb      	ldr	r3, [r7, #28]
 80075c4:	2b00      	cmp	r3, #0
 80075c6:	d001      	beq.n	80075cc <f_gets+0x70>
 80075c8:	68fb      	ldr	r3, [r7, #12]
 80075ca:	e000      	b.n	80075ce <f_gets+0x72>
 80075cc:	2300      	movs	r3, #0
}
 80075ce:	4618      	mov	r0, r3
 80075d0:	3720      	adds	r7, #32
 80075d2:	46bd      	mov	sp, r7
 80075d4:	bd80      	pop	{r7, pc}
	...

080075d8 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the paramter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 80075d8:	b480      	push	{r7}
 80075da:	b087      	sub	sp, #28
 80075dc:	af00      	add	r7, sp, #0
 80075de:	60f8      	str	r0, [r7, #12]
 80075e0:	60b9      	str	r1, [r7, #8]
 80075e2:	4613      	mov	r3, r2
 80075e4:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 80075e6:	2301      	movs	r3, #1
 80075e8:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 80075ea:	2300      	movs	r3, #0
 80075ec:	75bb      	strb	r3, [r7, #22]
  
  if(disk.nbr <= _VOLUMES)
 80075ee:	4b1f      	ldr	r3, [pc, #124]	; (800766c <FATFS_LinkDriverEx+0x94>)
 80075f0:	7a5b      	ldrb	r3, [r3, #9]
 80075f2:	b2db      	uxtb	r3, r3
 80075f4:	2b01      	cmp	r3, #1
 80075f6:	d831      	bhi.n	800765c <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 80075f8:	4b1c      	ldr	r3, [pc, #112]	; (800766c <FATFS_LinkDriverEx+0x94>)
 80075fa:	7a5b      	ldrb	r3, [r3, #9]
 80075fc:	b2db      	uxtb	r3, r3
 80075fe:	461a      	mov	r2, r3
 8007600:	4b1a      	ldr	r3, [pc, #104]	; (800766c <FATFS_LinkDriverEx+0x94>)
 8007602:	2100      	movs	r1, #0
 8007604:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;  
 8007606:	4b19      	ldr	r3, [pc, #100]	; (800766c <FATFS_LinkDriverEx+0x94>)
 8007608:	7a5b      	ldrb	r3, [r3, #9]
 800760a:	b2db      	uxtb	r3, r3
 800760c:	4a17      	ldr	r2, [pc, #92]	; (800766c <FATFS_LinkDriverEx+0x94>)
 800760e:	009b      	lsls	r3, r3, #2
 8007610:	4413      	add	r3, r2
 8007612:	68fa      	ldr	r2, [r7, #12]
 8007614:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;  
 8007616:	4b15      	ldr	r3, [pc, #84]	; (800766c <FATFS_LinkDriverEx+0x94>)
 8007618:	7a5b      	ldrb	r3, [r3, #9]
 800761a:	b2db      	uxtb	r3, r3
 800761c:	461a      	mov	r2, r3
 800761e:	4b13      	ldr	r3, [pc, #76]	; (800766c <FATFS_LinkDriverEx+0x94>)
 8007620:	4413      	add	r3, r2
 8007622:	79fa      	ldrb	r2, [r7, #7]
 8007624:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8007626:	4b11      	ldr	r3, [pc, #68]	; (800766c <FATFS_LinkDriverEx+0x94>)
 8007628:	7a5b      	ldrb	r3, [r3, #9]
 800762a:	b2db      	uxtb	r3, r3
 800762c:	1c5a      	adds	r2, r3, #1
 800762e:	b2d1      	uxtb	r1, r2
 8007630:	4a0e      	ldr	r2, [pc, #56]	; (800766c <FATFS_LinkDriverEx+0x94>)
 8007632:	7251      	strb	r1, [r2, #9]
 8007634:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8007636:	7dbb      	ldrb	r3, [r7, #22]
 8007638:	3330      	adds	r3, #48	; 0x30
 800763a:	b2da      	uxtb	r2, r3
 800763c:	68bb      	ldr	r3, [r7, #8]
 800763e:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8007640:	68bb      	ldr	r3, [r7, #8]
 8007642:	3301      	adds	r3, #1
 8007644:	223a      	movs	r2, #58	; 0x3a
 8007646:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8007648:	68bb      	ldr	r3, [r7, #8]
 800764a:	3302      	adds	r3, #2
 800764c:	222f      	movs	r2, #47	; 0x2f
 800764e:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8007650:	68bb      	ldr	r3, [r7, #8]
 8007652:	3303      	adds	r3, #3
 8007654:	2200      	movs	r2, #0
 8007656:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8007658:	2300      	movs	r3, #0
 800765a:	75fb      	strb	r3, [r7, #23]
  }
  
  return ret;
 800765c:	7dfb      	ldrb	r3, [r7, #23]
}
 800765e:	4618      	mov	r0, r3
 8007660:	371c      	adds	r7, #28
 8007662:	46bd      	mov	sp, r7
 8007664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007668:	4770      	bx	lr
 800766a:	bf00      	nop
 800766c:	200002cc 	.word	0x200002cc

08007670 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path 
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(Diskio_drvTypeDef *drv, char *path)
{
 8007670:	b580      	push	{r7, lr}
 8007672:	b082      	sub	sp, #8
 8007674:	af00      	add	r7, sp, #0
 8007676:	6078      	str	r0, [r7, #4]
 8007678:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800767a:	2200      	movs	r2, #0
 800767c:	6839      	ldr	r1, [r7, #0]
 800767e:	6878      	ldr	r0, [r7, #4]
 8007680:	f7ff ffaa 	bl	80075d8 <FATFS_LinkDriverEx>
 8007684:	4603      	mov	r3, r0
}
 8007686:	4618      	mov	r0, r3
 8007688:	3708      	adds	r7, #8
 800768a:	46bd      	mov	sp, r7
 800768c:	bd80      	pop	{r7, pc}
	...

08007690 <__errno>:
 8007690:	4b01      	ldr	r3, [pc, #4]	; (8007698 <__errno+0x8>)
 8007692:	6818      	ldr	r0, [r3, #0]
 8007694:	4770      	bx	lr
 8007696:	bf00      	nop
 8007698:	20000024 	.word	0x20000024

0800769c <__libc_init_array>:
 800769c:	b570      	push	{r4, r5, r6, lr}
 800769e:	4d0d      	ldr	r5, [pc, #52]	; (80076d4 <__libc_init_array+0x38>)
 80076a0:	4c0d      	ldr	r4, [pc, #52]	; (80076d8 <__libc_init_array+0x3c>)
 80076a2:	1b64      	subs	r4, r4, r5
 80076a4:	10a4      	asrs	r4, r4, #2
 80076a6:	2600      	movs	r6, #0
 80076a8:	42a6      	cmp	r6, r4
 80076aa:	d109      	bne.n	80076c0 <__libc_init_array+0x24>
 80076ac:	4d0b      	ldr	r5, [pc, #44]	; (80076dc <__libc_init_array+0x40>)
 80076ae:	4c0c      	ldr	r4, [pc, #48]	; (80076e0 <__libc_init_array+0x44>)
 80076b0:	f000 fca8 	bl	8008004 <_init>
 80076b4:	1b64      	subs	r4, r4, r5
 80076b6:	10a4      	asrs	r4, r4, #2
 80076b8:	2600      	movs	r6, #0
 80076ba:	42a6      	cmp	r6, r4
 80076bc:	d105      	bne.n	80076ca <__libc_init_array+0x2e>
 80076be:	bd70      	pop	{r4, r5, r6, pc}
 80076c0:	f855 3b04 	ldr.w	r3, [r5], #4
 80076c4:	4798      	blx	r3
 80076c6:	3601      	adds	r6, #1
 80076c8:	e7ee      	b.n	80076a8 <__libc_init_array+0xc>
 80076ca:	f855 3b04 	ldr.w	r3, [r5], #4
 80076ce:	4798      	blx	r3
 80076d0:	3601      	adds	r6, #1
 80076d2:	e7f2      	b.n	80076ba <__libc_init_array+0x1e>
 80076d4:	08008304 	.word	0x08008304
 80076d8:	08008304 	.word	0x08008304
 80076dc:	08008304 	.word	0x08008304
 80076e0:	08008308 	.word	0x08008308

080076e4 <memset>:
 80076e4:	4402      	add	r2, r0
 80076e6:	4603      	mov	r3, r0
 80076e8:	4293      	cmp	r3, r2
 80076ea:	d100      	bne.n	80076ee <memset+0xa>
 80076ec:	4770      	bx	lr
 80076ee:	f803 1b01 	strb.w	r1, [r3], #1
 80076f2:	e7f9      	b.n	80076e8 <memset+0x4>

080076f4 <_vsniprintf_r>:
 80076f4:	b530      	push	{r4, r5, lr}
 80076f6:	4614      	mov	r4, r2
 80076f8:	2c00      	cmp	r4, #0
 80076fa:	b09b      	sub	sp, #108	; 0x6c
 80076fc:	4605      	mov	r5, r0
 80076fe:	461a      	mov	r2, r3
 8007700:	da05      	bge.n	800770e <_vsniprintf_r+0x1a>
 8007702:	238b      	movs	r3, #139	; 0x8b
 8007704:	6003      	str	r3, [r0, #0]
 8007706:	f04f 30ff 	mov.w	r0, #4294967295
 800770a:	b01b      	add	sp, #108	; 0x6c
 800770c:	bd30      	pop	{r4, r5, pc}
 800770e:	f44f 7302 	mov.w	r3, #520	; 0x208
 8007712:	f8ad 300c 	strh.w	r3, [sp, #12]
 8007716:	bf14      	ite	ne
 8007718:	f104 33ff 	addne.w	r3, r4, #4294967295
 800771c:	4623      	moveq	r3, r4
 800771e:	9302      	str	r3, [sp, #8]
 8007720:	9305      	str	r3, [sp, #20]
 8007722:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8007726:	9100      	str	r1, [sp, #0]
 8007728:	9104      	str	r1, [sp, #16]
 800772a:	f8ad 300e 	strh.w	r3, [sp, #14]
 800772e:	4669      	mov	r1, sp
 8007730:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8007732:	f000 f875 	bl	8007820 <_svfiprintf_r>
 8007736:	1c43      	adds	r3, r0, #1
 8007738:	bfbc      	itt	lt
 800773a:	238b      	movlt	r3, #139	; 0x8b
 800773c:	602b      	strlt	r3, [r5, #0]
 800773e:	2c00      	cmp	r4, #0
 8007740:	d0e3      	beq.n	800770a <_vsniprintf_r+0x16>
 8007742:	9b00      	ldr	r3, [sp, #0]
 8007744:	2200      	movs	r2, #0
 8007746:	701a      	strb	r2, [r3, #0]
 8007748:	e7df      	b.n	800770a <_vsniprintf_r+0x16>
	...

0800774c <vsniprintf>:
 800774c:	b507      	push	{r0, r1, r2, lr}
 800774e:	9300      	str	r3, [sp, #0]
 8007750:	4613      	mov	r3, r2
 8007752:	460a      	mov	r2, r1
 8007754:	4601      	mov	r1, r0
 8007756:	4803      	ldr	r0, [pc, #12]	; (8007764 <vsniprintf+0x18>)
 8007758:	6800      	ldr	r0, [r0, #0]
 800775a:	f7ff ffcb 	bl	80076f4 <_vsniprintf_r>
 800775e:	b003      	add	sp, #12
 8007760:	f85d fb04 	ldr.w	pc, [sp], #4
 8007764:	20000024 	.word	0x20000024

08007768 <__ssputs_r>:
 8007768:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800776c:	688e      	ldr	r6, [r1, #8]
 800776e:	429e      	cmp	r6, r3
 8007770:	4682      	mov	sl, r0
 8007772:	460c      	mov	r4, r1
 8007774:	4690      	mov	r8, r2
 8007776:	461f      	mov	r7, r3
 8007778:	d838      	bhi.n	80077ec <__ssputs_r+0x84>
 800777a:	898a      	ldrh	r2, [r1, #12]
 800777c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007780:	d032      	beq.n	80077e8 <__ssputs_r+0x80>
 8007782:	6825      	ldr	r5, [r4, #0]
 8007784:	6909      	ldr	r1, [r1, #16]
 8007786:	eba5 0901 	sub.w	r9, r5, r1
 800778a:	6965      	ldr	r5, [r4, #20]
 800778c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007790:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007794:	3301      	adds	r3, #1
 8007796:	444b      	add	r3, r9
 8007798:	106d      	asrs	r5, r5, #1
 800779a:	429d      	cmp	r5, r3
 800779c:	bf38      	it	cc
 800779e:	461d      	movcc	r5, r3
 80077a0:	0553      	lsls	r3, r2, #21
 80077a2:	d531      	bpl.n	8007808 <__ssputs_r+0xa0>
 80077a4:	4629      	mov	r1, r5
 80077a6:	f000 fb63 	bl	8007e70 <_malloc_r>
 80077aa:	4606      	mov	r6, r0
 80077ac:	b950      	cbnz	r0, 80077c4 <__ssputs_r+0x5c>
 80077ae:	230c      	movs	r3, #12
 80077b0:	f8ca 3000 	str.w	r3, [sl]
 80077b4:	89a3      	ldrh	r3, [r4, #12]
 80077b6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80077ba:	81a3      	strh	r3, [r4, #12]
 80077bc:	f04f 30ff 	mov.w	r0, #4294967295
 80077c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80077c4:	6921      	ldr	r1, [r4, #16]
 80077c6:	464a      	mov	r2, r9
 80077c8:	f000 fabe 	bl	8007d48 <memcpy>
 80077cc:	89a3      	ldrh	r3, [r4, #12]
 80077ce:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80077d2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80077d6:	81a3      	strh	r3, [r4, #12]
 80077d8:	6126      	str	r6, [r4, #16]
 80077da:	6165      	str	r5, [r4, #20]
 80077dc:	444e      	add	r6, r9
 80077de:	eba5 0509 	sub.w	r5, r5, r9
 80077e2:	6026      	str	r6, [r4, #0]
 80077e4:	60a5      	str	r5, [r4, #8]
 80077e6:	463e      	mov	r6, r7
 80077e8:	42be      	cmp	r6, r7
 80077ea:	d900      	bls.n	80077ee <__ssputs_r+0x86>
 80077ec:	463e      	mov	r6, r7
 80077ee:	6820      	ldr	r0, [r4, #0]
 80077f0:	4632      	mov	r2, r6
 80077f2:	4641      	mov	r1, r8
 80077f4:	f000 fab6 	bl	8007d64 <memmove>
 80077f8:	68a3      	ldr	r3, [r4, #8]
 80077fa:	1b9b      	subs	r3, r3, r6
 80077fc:	60a3      	str	r3, [r4, #8]
 80077fe:	6823      	ldr	r3, [r4, #0]
 8007800:	4433      	add	r3, r6
 8007802:	6023      	str	r3, [r4, #0]
 8007804:	2000      	movs	r0, #0
 8007806:	e7db      	b.n	80077c0 <__ssputs_r+0x58>
 8007808:	462a      	mov	r2, r5
 800780a:	f000 fba5 	bl	8007f58 <_realloc_r>
 800780e:	4606      	mov	r6, r0
 8007810:	2800      	cmp	r0, #0
 8007812:	d1e1      	bne.n	80077d8 <__ssputs_r+0x70>
 8007814:	6921      	ldr	r1, [r4, #16]
 8007816:	4650      	mov	r0, sl
 8007818:	f000 fabe 	bl	8007d98 <_free_r>
 800781c:	e7c7      	b.n	80077ae <__ssputs_r+0x46>
	...

08007820 <_svfiprintf_r>:
 8007820:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007824:	4698      	mov	r8, r3
 8007826:	898b      	ldrh	r3, [r1, #12]
 8007828:	061b      	lsls	r3, r3, #24
 800782a:	b09d      	sub	sp, #116	; 0x74
 800782c:	4607      	mov	r7, r0
 800782e:	460d      	mov	r5, r1
 8007830:	4614      	mov	r4, r2
 8007832:	d50e      	bpl.n	8007852 <_svfiprintf_r+0x32>
 8007834:	690b      	ldr	r3, [r1, #16]
 8007836:	b963      	cbnz	r3, 8007852 <_svfiprintf_r+0x32>
 8007838:	2140      	movs	r1, #64	; 0x40
 800783a:	f000 fb19 	bl	8007e70 <_malloc_r>
 800783e:	6028      	str	r0, [r5, #0]
 8007840:	6128      	str	r0, [r5, #16]
 8007842:	b920      	cbnz	r0, 800784e <_svfiprintf_r+0x2e>
 8007844:	230c      	movs	r3, #12
 8007846:	603b      	str	r3, [r7, #0]
 8007848:	f04f 30ff 	mov.w	r0, #4294967295
 800784c:	e0d1      	b.n	80079f2 <_svfiprintf_r+0x1d2>
 800784e:	2340      	movs	r3, #64	; 0x40
 8007850:	616b      	str	r3, [r5, #20]
 8007852:	2300      	movs	r3, #0
 8007854:	9309      	str	r3, [sp, #36]	; 0x24
 8007856:	2320      	movs	r3, #32
 8007858:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800785c:	f8cd 800c 	str.w	r8, [sp, #12]
 8007860:	2330      	movs	r3, #48	; 0x30
 8007862:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8007a0c <_svfiprintf_r+0x1ec>
 8007866:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800786a:	f04f 0901 	mov.w	r9, #1
 800786e:	4623      	mov	r3, r4
 8007870:	469a      	mov	sl, r3
 8007872:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007876:	b10a      	cbz	r2, 800787c <_svfiprintf_r+0x5c>
 8007878:	2a25      	cmp	r2, #37	; 0x25
 800787a:	d1f9      	bne.n	8007870 <_svfiprintf_r+0x50>
 800787c:	ebba 0b04 	subs.w	fp, sl, r4
 8007880:	d00b      	beq.n	800789a <_svfiprintf_r+0x7a>
 8007882:	465b      	mov	r3, fp
 8007884:	4622      	mov	r2, r4
 8007886:	4629      	mov	r1, r5
 8007888:	4638      	mov	r0, r7
 800788a:	f7ff ff6d 	bl	8007768 <__ssputs_r>
 800788e:	3001      	adds	r0, #1
 8007890:	f000 80aa 	beq.w	80079e8 <_svfiprintf_r+0x1c8>
 8007894:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007896:	445a      	add	r2, fp
 8007898:	9209      	str	r2, [sp, #36]	; 0x24
 800789a:	f89a 3000 	ldrb.w	r3, [sl]
 800789e:	2b00      	cmp	r3, #0
 80078a0:	f000 80a2 	beq.w	80079e8 <_svfiprintf_r+0x1c8>
 80078a4:	2300      	movs	r3, #0
 80078a6:	f04f 32ff 	mov.w	r2, #4294967295
 80078aa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80078ae:	f10a 0a01 	add.w	sl, sl, #1
 80078b2:	9304      	str	r3, [sp, #16]
 80078b4:	9307      	str	r3, [sp, #28]
 80078b6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80078ba:	931a      	str	r3, [sp, #104]	; 0x68
 80078bc:	4654      	mov	r4, sl
 80078be:	2205      	movs	r2, #5
 80078c0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80078c4:	4851      	ldr	r0, [pc, #324]	; (8007a0c <_svfiprintf_r+0x1ec>)
 80078c6:	f7f8 fc93 	bl	80001f0 <memchr>
 80078ca:	9a04      	ldr	r2, [sp, #16]
 80078cc:	b9d8      	cbnz	r0, 8007906 <_svfiprintf_r+0xe6>
 80078ce:	06d0      	lsls	r0, r2, #27
 80078d0:	bf44      	itt	mi
 80078d2:	2320      	movmi	r3, #32
 80078d4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80078d8:	0711      	lsls	r1, r2, #28
 80078da:	bf44      	itt	mi
 80078dc:	232b      	movmi	r3, #43	; 0x2b
 80078de:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80078e2:	f89a 3000 	ldrb.w	r3, [sl]
 80078e6:	2b2a      	cmp	r3, #42	; 0x2a
 80078e8:	d015      	beq.n	8007916 <_svfiprintf_r+0xf6>
 80078ea:	9a07      	ldr	r2, [sp, #28]
 80078ec:	4654      	mov	r4, sl
 80078ee:	2000      	movs	r0, #0
 80078f0:	f04f 0c0a 	mov.w	ip, #10
 80078f4:	4621      	mov	r1, r4
 80078f6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80078fa:	3b30      	subs	r3, #48	; 0x30
 80078fc:	2b09      	cmp	r3, #9
 80078fe:	d94e      	bls.n	800799e <_svfiprintf_r+0x17e>
 8007900:	b1b0      	cbz	r0, 8007930 <_svfiprintf_r+0x110>
 8007902:	9207      	str	r2, [sp, #28]
 8007904:	e014      	b.n	8007930 <_svfiprintf_r+0x110>
 8007906:	eba0 0308 	sub.w	r3, r0, r8
 800790a:	fa09 f303 	lsl.w	r3, r9, r3
 800790e:	4313      	orrs	r3, r2
 8007910:	9304      	str	r3, [sp, #16]
 8007912:	46a2      	mov	sl, r4
 8007914:	e7d2      	b.n	80078bc <_svfiprintf_r+0x9c>
 8007916:	9b03      	ldr	r3, [sp, #12]
 8007918:	1d19      	adds	r1, r3, #4
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	9103      	str	r1, [sp, #12]
 800791e:	2b00      	cmp	r3, #0
 8007920:	bfbb      	ittet	lt
 8007922:	425b      	neglt	r3, r3
 8007924:	f042 0202 	orrlt.w	r2, r2, #2
 8007928:	9307      	strge	r3, [sp, #28]
 800792a:	9307      	strlt	r3, [sp, #28]
 800792c:	bfb8      	it	lt
 800792e:	9204      	strlt	r2, [sp, #16]
 8007930:	7823      	ldrb	r3, [r4, #0]
 8007932:	2b2e      	cmp	r3, #46	; 0x2e
 8007934:	d10c      	bne.n	8007950 <_svfiprintf_r+0x130>
 8007936:	7863      	ldrb	r3, [r4, #1]
 8007938:	2b2a      	cmp	r3, #42	; 0x2a
 800793a:	d135      	bne.n	80079a8 <_svfiprintf_r+0x188>
 800793c:	9b03      	ldr	r3, [sp, #12]
 800793e:	1d1a      	adds	r2, r3, #4
 8007940:	681b      	ldr	r3, [r3, #0]
 8007942:	9203      	str	r2, [sp, #12]
 8007944:	2b00      	cmp	r3, #0
 8007946:	bfb8      	it	lt
 8007948:	f04f 33ff 	movlt.w	r3, #4294967295
 800794c:	3402      	adds	r4, #2
 800794e:	9305      	str	r3, [sp, #20]
 8007950:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8007a1c <_svfiprintf_r+0x1fc>
 8007954:	7821      	ldrb	r1, [r4, #0]
 8007956:	2203      	movs	r2, #3
 8007958:	4650      	mov	r0, sl
 800795a:	f7f8 fc49 	bl	80001f0 <memchr>
 800795e:	b140      	cbz	r0, 8007972 <_svfiprintf_r+0x152>
 8007960:	2340      	movs	r3, #64	; 0x40
 8007962:	eba0 000a 	sub.w	r0, r0, sl
 8007966:	fa03 f000 	lsl.w	r0, r3, r0
 800796a:	9b04      	ldr	r3, [sp, #16]
 800796c:	4303      	orrs	r3, r0
 800796e:	3401      	adds	r4, #1
 8007970:	9304      	str	r3, [sp, #16]
 8007972:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007976:	4826      	ldr	r0, [pc, #152]	; (8007a10 <_svfiprintf_r+0x1f0>)
 8007978:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800797c:	2206      	movs	r2, #6
 800797e:	f7f8 fc37 	bl	80001f0 <memchr>
 8007982:	2800      	cmp	r0, #0
 8007984:	d038      	beq.n	80079f8 <_svfiprintf_r+0x1d8>
 8007986:	4b23      	ldr	r3, [pc, #140]	; (8007a14 <_svfiprintf_r+0x1f4>)
 8007988:	bb1b      	cbnz	r3, 80079d2 <_svfiprintf_r+0x1b2>
 800798a:	9b03      	ldr	r3, [sp, #12]
 800798c:	3307      	adds	r3, #7
 800798e:	f023 0307 	bic.w	r3, r3, #7
 8007992:	3308      	adds	r3, #8
 8007994:	9303      	str	r3, [sp, #12]
 8007996:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007998:	4433      	add	r3, r6
 800799a:	9309      	str	r3, [sp, #36]	; 0x24
 800799c:	e767      	b.n	800786e <_svfiprintf_r+0x4e>
 800799e:	fb0c 3202 	mla	r2, ip, r2, r3
 80079a2:	460c      	mov	r4, r1
 80079a4:	2001      	movs	r0, #1
 80079a6:	e7a5      	b.n	80078f4 <_svfiprintf_r+0xd4>
 80079a8:	2300      	movs	r3, #0
 80079aa:	3401      	adds	r4, #1
 80079ac:	9305      	str	r3, [sp, #20]
 80079ae:	4619      	mov	r1, r3
 80079b0:	f04f 0c0a 	mov.w	ip, #10
 80079b4:	4620      	mov	r0, r4
 80079b6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80079ba:	3a30      	subs	r2, #48	; 0x30
 80079bc:	2a09      	cmp	r2, #9
 80079be:	d903      	bls.n	80079c8 <_svfiprintf_r+0x1a8>
 80079c0:	2b00      	cmp	r3, #0
 80079c2:	d0c5      	beq.n	8007950 <_svfiprintf_r+0x130>
 80079c4:	9105      	str	r1, [sp, #20]
 80079c6:	e7c3      	b.n	8007950 <_svfiprintf_r+0x130>
 80079c8:	fb0c 2101 	mla	r1, ip, r1, r2
 80079cc:	4604      	mov	r4, r0
 80079ce:	2301      	movs	r3, #1
 80079d0:	e7f0      	b.n	80079b4 <_svfiprintf_r+0x194>
 80079d2:	ab03      	add	r3, sp, #12
 80079d4:	9300      	str	r3, [sp, #0]
 80079d6:	462a      	mov	r2, r5
 80079d8:	4b0f      	ldr	r3, [pc, #60]	; (8007a18 <_svfiprintf_r+0x1f8>)
 80079da:	a904      	add	r1, sp, #16
 80079dc:	4638      	mov	r0, r7
 80079de:	f3af 8000 	nop.w
 80079e2:	1c42      	adds	r2, r0, #1
 80079e4:	4606      	mov	r6, r0
 80079e6:	d1d6      	bne.n	8007996 <_svfiprintf_r+0x176>
 80079e8:	89ab      	ldrh	r3, [r5, #12]
 80079ea:	065b      	lsls	r3, r3, #25
 80079ec:	f53f af2c 	bmi.w	8007848 <_svfiprintf_r+0x28>
 80079f0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80079f2:	b01d      	add	sp, #116	; 0x74
 80079f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80079f8:	ab03      	add	r3, sp, #12
 80079fa:	9300      	str	r3, [sp, #0]
 80079fc:	462a      	mov	r2, r5
 80079fe:	4b06      	ldr	r3, [pc, #24]	; (8007a18 <_svfiprintf_r+0x1f8>)
 8007a00:	a904      	add	r1, sp, #16
 8007a02:	4638      	mov	r0, r7
 8007a04:	f000 f87a 	bl	8007afc <_printf_i>
 8007a08:	e7eb      	b.n	80079e2 <_svfiprintf_r+0x1c2>
 8007a0a:	bf00      	nop
 8007a0c:	080082d0 	.word	0x080082d0
 8007a10:	080082da 	.word	0x080082da
 8007a14:	00000000 	.word	0x00000000
 8007a18:	08007769 	.word	0x08007769
 8007a1c:	080082d6 	.word	0x080082d6

08007a20 <_printf_common>:
 8007a20:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007a24:	4616      	mov	r6, r2
 8007a26:	4699      	mov	r9, r3
 8007a28:	688a      	ldr	r2, [r1, #8]
 8007a2a:	690b      	ldr	r3, [r1, #16]
 8007a2c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007a30:	4293      	cmp	r3, r2
 8007a32:	bfb8      	it	lt
 8007a34:	4613      	movlt	r3, r2
 8007a36:	6033      	str	r3, [r6, #0]
 8007a38:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007a3c:	4607      	mov	r7, r0
 8007a3e:	460c      	mov	r4, r1
 8007a40:	b10a      	cbz	r2, 8007a46 <_printf_common+0x26>
 8007a42:	3301      	adds	r3, #1
 8007a44:	6033      	str	r3, [r6, #0]
 8007a46:	6823      	ldr	r3, [r4, #0]
 8007a48:	0699      	lsls	r1, r3, #26
 8007a4a:	bf42      	ittt	mi
 8007a4c:	6833      	ldrmi	r3, [r6, #0]
 8007a4e:	3302      	addmi	r3, #2
 8007a50:	6033      	strmi	r3, [r6, #0]
 8007a52:	6825      	ldr	r5, [r4, #0]
 8007a54:	f015 0506 	ands.w	r5, r5, #6
 8007a58:	d106      	bne.n	8007a68 <_printf_common+0x48>
 8007a5a:	f104 0a19 	add.w	sl, r4, #25
 8007a5e:	68e3      	ldr	r3, [r4, #12]
 8007a60:	6832      	ldr	r2, [r6, #0]
 8007a62:	1a9b      	subs	r3, r3, r2
 8007a64:	42ab      	cmp	r3, r5
 8007a66:	dc26      	bgt.n	8007ab6 <_printf_common+0x96>
 8007a68:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007a6c:	1e13      	subs	r3, r2, #0
 8007a6e:	6822      	ldr	r2, [r4, #0]
 8007a70:	bf18      	it	ne
 8007a72:	2301      	movne	r3, #1
 8007a74:	0692      	lsls	r2, r2, #26
 8007a76:	d42b      	bmi.n	8007ad0 <_printf_common+0xb0>
 8007a78:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007a7c:	4649      	mov	r1, r9
 8007a7e:	4638      	mov	r0, r7
 8007a80:	47c0      	blx	r8
 8007a82:	3001      	adds	r0, #1
 8007a84:	d01e      	beq.n	8007ac4 <_printf_common+0xa4>
 8007a86:	6823      	ldr	r3, [r4, #0]
 8007a88:	68e5      	ldr	r5, [r4, #12]
 8007a8a:	6832      	ldr	r2, [r6, #0]
 8007a8c:	f003 0306 	and.w	r3, r3, #6
 8007a90:	2b04      	cmp	r3, #4
 8007a92:	bf08      	it	eq
 8007a94:	1aad      	subeq	r5, r5, r2
 8007a96:	68a3      	ldr	r3, [r4, #8]
 8007a98:	6922      	ldr	r2, [r4, #16]
 8007a9a:	bf0c      	ite	eq
 8007a9c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007aa0:	2500      	movne	r5, #0
 8007aa2:	4293      	cmp	r3, r2
 8007aa4:	bfc4      	itt	gt
 8007aa6:	1a9b      	subgt	r3, r3, r2
 8007aa8:	18ed      	addgt	r5, r5, r3
 8007aaa:	2600      	movs	r6, #0
 8007aac:	341a      	adds	r4, #26
 8007aae:	42b5      	cmp	r5, r6
 8007ab0:	d11a      	bne.n	8007ae8 <_printf_common+0xc8>
 8007ab2:	2000      	movs	r0, #0
 8007ab4:	e008      	b.n	8007ac8 <_printf_common+0xa8>
 8007ab6:	2301      	movs	r3, #1
 8007ab8:	4652      	mov	r2, sl
 8007aba:	4649      	mov	r1, r9
 8007abc:	4638      	mov	r0, r7
 8007abe:	47c0      	blx	r8
 8007ac0:	3001      	adds	r0, #1
 8007ac2:	d103      	bne.n	8007acc <_printf_common+0xac>
 8007ac4:	f04f 30ff 	mov.w	r0, #4294967295
 8007ac8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007acc:	3501      	adds	r5, #1
 8007ace:	e7c6      	b.n	8007a5e <_printf_common+0x3e>
 8007ad0:	18e1      	adds	r1, r4, r3
 8007ad2:	1c5a      	adds	r2, r3, #1
 8007ad4:	2030      	movs	r0, #48	; 0x30
 8007ad6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007ada:	4422      	add	r2, r4
 8007adc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007ae0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007ae4:	3302      	adds	r3, #2
 8007ae6:	e7c7      	b.n	8007a78 <_printf_common+0x58>
 8007ae8:	2301      	movs	r3, #1
 8007aea:	4622      	mov	r2, r4
 8007aec:	4649      	mov	r1, r9
 8007aee:	4638      	mov	r0, r7
 8007af0:	47c0      	blx	r8
 8007af2:	3001      	adds	r0, #1
 8007af4:	d0e6      	beq.n	8007ac4 <_printf_common+0xa4>
 8007af6:	3601      	adds	r6, #1
 8007af8:	e7d9      	b.n	8007aae <_printf_common+0x8e>
	...

08007afc <_printf_i>:
 8007afc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007b00:	7e0f      	ldrb	r7, [r1, #24]
 8007b02:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007b04:	2f78      	cmp	r7, #120	; 0x78
 8007b06:	4691      	mov	r9, r2
 8007b08:	4680      	mov	r8, r0
 8007b0a:	460c      	mov	r4, r1
 8007b0c:	469a      	mov	sl, r3
 8007b0e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8007b12:	d807      	bhi.n	8007b24 <_printf_i+0x28>
 8007b14:	2f62      	cmp	r7, #98	; 0x62
 8007b16:	d80a      	bhi.n	8007b2e <_printf_i+0x32>
 8007b18:	2f00      	cmp	r7, #0
 8007b1a:	f000 80d8 	beq.w	8007cce <_printf_i+0x1d2>
 8007b1e:	2f58      	cmp	r7, #88	; 0x58
 8007b20:	f000 80a3 	beq.w	8007c6a <_printf_i+0x16e>
 8007b24:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007b28:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007b2c:	e03a      	b.n	8007ba4 <_printf_i+0xa8>
 8007b2e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007b32:	2b15      	cmp	r3, #21
 8007b34:	d8f6      	bhi.n	8007b24 <_printf_i+0x28>
 8007b36:	a101      	add	r1, pc, #4	; (adr r1, 8007b3c <_printf_i+0x40>)
 8007b38:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007b3c:	08007b95 	.word	0x08007b95
 8007b40:	08007ba9 	.word	0x08007ba9
 8007b44:	08007b25 	.word	0x08007b25
 8007b48:	08007b25 	.word	0x08007b25
 8007b4c:	08007b25 	.word	0x08007b25
 8007b50:	08007b25 	.word	0x08007b25
 8007b54:	08007ba9 	.word	0x08007ba9
 8007b58:	08007b25 	.word	0x08007b25
 8007b5c:	08007b25 	.word	0x08007b25
 8007b60:	08007b25 	.word	0x08007b25
 8007b64:	08007b25 	.word	0x08007b25
 8007b68:	08007cb5 	.word	0x08007cb5
 8007b6c:	08007bd9 	.word	0x08007bd9
 8007b70:	08007c97 	.word	0x08007c97
 8007b74:	08007b25 	.word	0x08007b25
 8007b78:	08007b25 	.word	0x08007b25
 8007b7c:	08007cd7 	.word	0x08007cd7
 8007b80:	08007b25 	.word	0x08007b25
 8007b84:	08007bd9 	.word	0x08007bd9
 8007b88:	08007b25 	.word	0x08007b25
 8007b8c:	08007b25 	.word	0x08007b25
 8007b90:	08007c9f 	.word	0x08007c9f
 8007b94:	682b      	ldr	r3, [r5, #0]
 8007b96:	1d1a      	adds	r2, r3, #4
 8007b98:	681b      	ldr	r3, [r3, #0]
 8007b9a:	602a      	str	r2, [r5, #0]
 8007b9c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007ba0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007ba4:	2301      	movs	r3, #1
 8007ba6:	e0a3      	b.n	8007cf0 <_printf_i+0x1f4>
 8007ba8:	6820      	ldr	r0, [r4, #0]
 8007baa:	6829      	ldr	r1, [r5, #0]
 8007bac:	0606      	lsls	r6, r0, #24
 8007bae:	f101 0304 	add.w	r3, r1, #4
 8007bb2:	d50a      	bpl.n	8007bca <_printf_i+0xce>
 8007bb4:	680e      	ldr	r6, [r1, #0]
 8007bb6:	602b      	str	r3, [r5, #0]
 8007bb8:	2e00      	cmp	r6, #0
 8007bba:	da03      	bge.n	8007bc4 <_printf_i+0xc8>
 8007bbc:	232d      	movs	r3, #45	; 0x2d
 8007bbe:	4276      	negs	r6, r6
 8007bc0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007bc4:	485e      	ldr	r0, [pc, #376]	; (8007d40 <_printf_i+0x244>)
 8007bc6:	230a      	movs	r3, #10
 8007bc8:	e019      	b.n	8007bfe <_printf_i+0x102>
 8007bca:	680e      	ldr	r6, [r1, #0]
 8007bcc:	602b      	str	r3, [r5, #0]
 8007bce:	f010 0f40 	tst.w	r0, #64	; 0x40
 8007bd2:	bf18      	it	ne
 8007bd4:	b236      	sxthne	r6, r6
 8007bd6:	e7ef      	b.n	8007bb8 <_printf_i+0xbc>
 8007bd8:	682b      	ldr	r3, [r5, #0]
 8007bda:	6820      	ldr	r0, [r4, #0]
 8007bdc:	1d19      	adds	r1, r3, #4
 8007bde:	6029      	str	r1, [r5, #0]
 8007be0:	0601      	lsls	r1, r0, #24
 8007be2:	d501      	bpl.n	8007be8 <_printf_i+0xec>
 8007be4:	681e      	ldr	r6, [r3, #0]
 8007be6:	e002      	b.n	8007bee <_printf_i+0xf2>
 8007be8:	0646      	lsls	r6, r0, #25
 8007bea:	d5fb      	bpl.n	8007be4 <_printf_i+0xe8>
 8007bec:	881e      	ldrh	r6, [r3, #0]
 8007bee:	4854      	ldr	r0, [pc, #336]	; (8007d40 <_printf_i+0x244>)
 8007bf0:	2f6f      	cmp	r7, #111	; 0x6f
 8007bf2:	bf0c      	ite	eq
 8007bf4:	2308      	moveq	r3, #8
 8007bf6:	230a      	movne	r3, #10
 8007bf8:	2100      	movs	r1, #0
 8007bfa:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007bfe:	6865      	ldr	r5, [r4, #4]
 8007c00:	60a5      	str	r5, [r4, #8]
 8007c02:	2d00      	cmp	r5, #0
 8007c04:	bfa2      	ittt	ge
 8007c06:	6821      	ldrge	r1, [r4, #0]
 8007c08:	f021 0104 	bicge.w	r1, r1, #4
 8007c0c:	6021      	strge	r1, [r4, #0]
 8007c0e:	b90e      	cbnz	r6, 8007c14 <_printf_i+0x118>
 8007c10:	2d00      	cmp	r5, #0
 8007c12:	d04d      	beq.n	8007cb0 <_printf_i+0x1b4>
 8007c14:	4615      	mov	r5, r2
 8007c16:	fbb6 f1f3 	udiv	r1, r6, r3
 8007c1a:	fb03 6711 	mls	r7, r3, r1, r6
 8007c1e:	5dc7      	ldrb	r7, [r0, r7]
 8007c20:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007c24:	4637      	mov	r7, r6
 8007c26:	42bb      	cmp	r3, r7
 8007c28:	460e      	mov	r6, r1
 8007c2a:	d9f4      	bls.n	8007c16 <_printf_i+0x11a>
 8007c2c:	2b08      	cmp	r3, #8
 8007c2e:	d10b      	bne.n	8007c48 <_printf_i+0x14c>
 8007c30:	6823      	ldr	r3, [r4, #0]
 8007c32:	07de      	lsls	r6, r3, #31
 8007c34:	d508      	bpl.n	8007c48 <_printf_i+0x14c>
 8007c36:	6923      	ldr	r3, [r4, #16]
 8007c38:	6861      	ldr	r1, [r4, #4]
 8007c3a:	4299      	cmp	r1, r3
 8007c3c:	bfde      	ittt	le
 8007c3e:	2330      	movle	r3, #48	; 0x30
 8007c40:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007c44:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007c48:	1b52      	subs	r2, r2, r5
 8007c4a:	6122      	str	r2, [r4, #16]
 8007c4c:	f8cd a000 	str.w	sl, [sp]
 8007c50:	464b      	mov	r3, r9
 8007c52:	aa03      	add	r2, sp, #12
 8007c54:	4621      	mov	r1, r4
 8007c56:	4640      	mov	r0, r8
 8007c58:	f7ff fee2 	bl	8007a20 <_printf_common>
 8007c5c:	3001      	adds	r0, #1
 8007c5e:	d14c      	bne.n	8007cfa <_printf_i+0x1fe>
 8007c60:	f04f 30ff 	mov.w	r0, #4294967295
 8007c64:	b004      	add	sp, #16
 8007c66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007c6a:	4835      	ldr	r0, [pc, #212]	; (8007d40 <_printf_i+0x244>)
 8007c6c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8007c70:	6829      	ldr	r1, [r5, #0]
 8007c72:	6823      	ldr	r3, [r4, #0]
 8007c74:	f851 6b04 	ldr.w	r6, [r1], #4
 8007c78:	6029      	str	r1, [r5, #0]
 8007c7a:	061d      	lsls	r5, r3, #24
 8007c7c:	d514      	bpl.n	8007ca8 <_printf_i+0x1ac>
 8007c7e:	07df      	lsls	r7, r3, #31
 8007c80:	bf44      	itt	mi
 8007c82:	f043 0320 	orrmi.w	r3, r3, #32
 8007c86:	6023      	strmi	r3, [r4, #0]
 8007c88:	b91e      	cbnz	r6, 8007c92 <_printf_i+0x196>
 8007c8a:	6823      	ldr	r3, [r4, #0]
 8007c8c:	f023 0320 	bic.w	r3, r3, #32
 8007c90:	6023      	str	r3, [r4, #0]
 8007c92:	2310      	movs	r3, #16
 8007c94:	e7b0      	b.n	8007bf8 <_printf_i+0xfc>
 8007c96:	6823      	ldr	r3, [r4, #0]
 8007c98:	f043 0320 	orr.w	r3, r3, #32
 8007c9c:	6023      	str	r3, [r4, #0]
 8007c9e:	2378      	movs	r3, #120	; 0x78
 8007ca0:	4828      	ldr	r0, [pc, #160]	; (8007d44 <_printf_i+0x248>)
 8007ca2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007ca6:	e7e3      	b.n	8007c70 <_printf_i+0x174>
 8007ca8:	0659      	lsls	r1, r3, #25
 8007caa:	bf48      	it	mi
 8007cac:	b2b6      	uxthmi	r6, r6
 8007cae:	e7e6      	b.n	8007c7e <_printf_i+0x182>
 8007cb0:	4615      	mov	r5, r2
 8007cb2:	e7bb      	b.n	8007c2c <_printf_i+0x130>
 8007cb4:	682b      	ldr	r3, [r5, #0]
 8007cb6:	6826      	ldr	r6, [r4, #0]
 8007cb8:	6961      	ldr	r1, [r4, #20]
 8007cba:	1d18      	adds	r0, r3, #4
 8007cbc:	6028      	str	r0, [r5, #0]
 8007cbe:	0635      	lsls	r5, r6, #24
 8007cc0:	681b      	ldr	r3, [r3, #0]
 8007cc2:	d501      	bpl.n	8007cc8 <_printf_i+0x1cc>
 8007cc4:	6019      	str	r1, [r3, #0]
 8007cc6:	e002      	b.n	8007cce <_printf_i+0x1d2>
 8007cc8:	0670      	lsls	r0, r6, #25
 8007cca:	d5fb      	bpl.n	8007cc4 <_printf_i+0x1c8>
 8007ccc:	8019      	strh	r1, [r3, #0]
 8007cce:	2300      	movs	r3, #0
 8007cd0:	6123      	str	r3, [r4, #16]
 8007cd2:	4615      	mov	r5, r2
 8007cd4:	e7ba      	b.n	8007c4c <_printf_i+0x150>
 8007cd6:	682b      	ldr	r3, [r5, #0]
 8007cd8:	1d1a      	adds	r2, r3, #4
 8007cda:	602a      	str	r2, [r5, #0]
 8007cdc:	681d      	ldr	r5, [r3, #0]
 8007cde:	6862      	ldr	r2, [r4, #4]
 8007ce0:	2100      	movs	r1, #0
 8007ce2:	4628      	mov	r0, r5
 8007ce4:	f7f8 fa84 	bl	80001f0 <memchr>
 8007ce8:	b108      	cbz	r0, 8007cee <_printf_i+0x1f2>
 8007cea:	1b40      	subs	r0, r0, r5
 8007cec:	6060      	str	r0, [r4, #4]
 8007cee:	6863      	ldr	r3, [r4, #4]
 8007cf0:	6123      	str	r3, [r4, #16]
 8007cf2:	2300      	movs	r3, #0
 8007cf4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007cf8:	e7a8      	b.n	8007c4c <_printf_i+0x150>
 8007cfa:	6923      	ldr	r3, [r4, #16]
 8007cfc:	462a      	mov	r2, r5
 8007cfe:	4649      	mov	r1, r9
 8007d00:	4640      	mov	r0, r8
 8007d02:	47d0      	blx	sl
 8007d04:	3001      	adds	r0, #1
 8007d06:	d0ab      	beq.n	8007c60 <_printf_i+0x164>
 8007d08:	6823      	ldr	r3, [r4, #0]
 8007d0a:	079b      	lsls	r3, r3, #30
 8007d0c:	d413      	bmi.n	8007d36 <_printf_i+0x23a>
 8007d0e:	68e0      	ldr	r0, [r4, #12]
 8007d10:	9b03      	ldr	r3, [sp, #12]
 8007d12:	4298      	cmp	r0, r3
 8007d14:	bfb8      	it	lt
 8007d16:	4618      	movlt	r0, r3
 8007d18:	e7a4      	b.n	8007c64 <_printf_i+0x168>
 8007d1a:	2301      	movs	r3, #1
 8007d1c:	4632      	mov	r2, r6
 8007d1e:	4649      	mov	r1, r9
 8007d20:	4640      	mov	r0, r8
 8007d22:	47d0      	blx	sl
 8007d24:	3001      	adds	r0, #1
 8007d26:	d09b      	beq.n	8007c60 <_printf_i+0x164>
 8007d28:	3501      	adds	r5, #1
 8007d2a:	68e3      	ldr	r3, [r4, #12]
 8007d2c:	9903      	ldr	r1, [sp, #12]
 8007d2e:	1a5b      	subs	r3, r3, r1
 8007d30:	42ab      	cmp	r3, r5
 8007d32:	dcf2      	bgt.n	8007d1a <_printf_i+0x21e>
 8007d34:	e7eb      	b.n	8007d0e <_printf_i+0x212>
 8007d36:	2500      	movs	r5, #0
 8007d38:	f104 0619 	add.w	r6, r4, #25
 8007d3c:	e7f5      	b.n	8007d2a <_printf_i+0x22e>
 8007d3e:	bf00      	nop
 8007d40:	080082e1 	.word	0x080082e1
 8007d44:	080082f2 	.word	0x080082f2

08007d48 <memcpy>:
 8007d48:	440a      	add	r2, r1
 8007d4a:	4291      	cmp	r1, r2
 8007d4c:	f100 33ff 	add.w	r3, r0, #4294967295
 8007d50:	d100      	bne.n	8007d54 <memcpy+0xc>
 8007d52:	4770      	bx	lr
 8007d54:	b510      	push	{r4, lr}
 8007d56:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007d5a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007d5e:	4291      	cmp	r1, r2
 8007d60:	d1f9      	bne.n	8007d56 <memcpy+0xe>
 8007d62:	bd10      	pop	{r4, pc}

08007d64 <memmove>:
 8007d64:	4288      	cmp	r0, r1
 8007d66:	b510      	push	{r4, lr}
 8007d68:	eb01 0402 	add.w	r4, r1, r2
 8007d6c:	d902      	bls.n	8007d74 <memmove+0x10>
 8007d6e:	4284      	cmp	r4, r0
 8007d70:	4623      	mov	r3, r4
 8007d72:	d807      	bhi.n	8007d84 <memmove+0x20>
 8007d74:	1e43      	subs	r3, r0, #1
 8007d76:	42a1      	cmp	r1, r4
 8007d78:	d008      	beq.n	8007d8c <memmove+0x28>
 8007d7a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007d7e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007d82:	e7f8      	b.n	8007d76 <memmove+0x12>
 8007d84:	4402      	add	r2, r0
 8007d86:	4601      	mov	r1, r0
 8007d88:	428a      	cmp	r2, r1
 8007d8a:	d100      	bne.n	8007d8e <memmove+0x2a>
 8007d8c:	bd10      	pop	{r4, pc}
 8007d8e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007d92:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007d96:	e7f7      	b.n	8007d88 <memmove+0x24>

08007d98 <_free_r>:
 8007d98:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007d9a:	2900      	cmp	r1, #0
 8007d9c:	d044      	beq.n	8007e28 <_free_r+0x90>
 8007d9e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007da2:	9001      	str	r0, [sp, #4]
 8007da4:	2b00      	cmp	r3, #0
 8007da6:	f1a1 0404 	sub.w	r4, r1, #4
 8007daa:	bfb8      	it	lt
 8007dac:	18e4      	addlt	r4, r4, r3
 8007dae:	f000 f913 	bl	8007fd8 <__malloc_lock>
 8007db2:	4a1e      	ldr	r2, [pc, #120]	; (8007e2c <_free_r+0x94>)
 8007db4:	9801      	ldr	r0, [sp, #4]
 8007db6:	6813      	ldr	r3, [r2, #0]
 8007db8:	b933      	cbnz	r3, 8007dc8 <_free_r+0x30>
 8007dba:	6063      	str	r3, [r4, #4]
 8007dbc:	6014      	str	r4, [r2, #0]
 8007dbe:	b003      	add	sp, #12
 8007dc0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007dc4:	f000 b90e 	b.w	8007fe4 <__malloc_unlock>
 8007dc8:	42a3      	cmp	r3, r4
 8007dca:	d908      	bls.n	8007dde <_free_r+0x46>
 8007dcc:	6825      	ldr	r5, [r4, #0]
 8007dce:	1961      	adds	r1, r4, r5
 8007dd0:	428b      	cmp	r3, r1
 8007dd2:	bf01      	itttt	eq
 8007dd4:	6819      	ldreq	r1, [r3, #0]
 8007dd6:	685b      	ldreq	r3, [r3, #4]
 8007dd8:	1949      	addeq	r1, r1, r5
 8007dda:	6021      	streq	r1, [r4, #0]
 8007ddc:	e7ed      	b.n	8007dba <_free_r+0x22>
 8007dde:	461a      	mov	r2, r3
 8007de0:	685b      	ldr	r3, [r3, #4]
 8007de2:	b10b      	cbz	r3, 8007de8 <_free_r+0x50>
 8007de4:	42a3      	cmp	r3, r4
 8007de6:	d9fa      	bls.n	8007dde <_free_r+0x46>
 8007de8:	6811      	ldr	r1, [r2, #0]
 8007dea:	1855      	adds	r5, r2, r1
 8007dec:	42a5      	cmp	r5, r4
 8007dee:	d10b      	bne.n	8007e08 <_free_r+0x70>
 8007df0:	6824      	ldr	r4, [r4, #0]
 8007df2:	4421      	add	r1, r4
 8007df4:	1854      	adds	r4, r2, r1
 8007df6:	42a3      	cmp	r3, r4
 8007df8:	6011      	str	r1, [r2, #0]
 8007dfa:	d1e0      	bne.n	8007dbe <_free_r+0x26>
 8007dfc:	681c      	ldr	r4, [r3, #0]
 8007dfe:	685b      	ldr	r3, [r3, #4]
 8007e00:	6053      	str	r3, [r2, #4]
 8007e02:	4421      	add	r1, r4
 8007e04:	6011      	str	r1, [r2, #0]
 8007e06:	e7da      	b.n	8007dbe <_free_r+0x26>
 8007e08:	d902      	bls.n	8007e10 <_free_r+0x78>
 8007e0a:	230c      	movs	r3, #12
 8007e0c:	6003      	str	r3, [r0, #0]
 8007e0e:	e7d6      	b.n	8007dbe <_free_r+0x26>
 8007e10:	6825      	ldr	r5, [r4, #0]
 8007e12:	1961      	adds	r1, r4, r5
 8007e14:	428b      	cmp	r3, r1
 8007e16:	bf04      	itt	eq
 8007e18:	6819      	ldreq	r1, [r3, #0]
 8007e1a:	685b      	ldreq	r3, [r3, #4]
 8007e1c:	6063      	str	r3, [r4, #4]
 8007e1e:	bf04      	itt	eq
 8007e20:	1949      	addeq	r1, r1, r5
 8007e22:	6021      	streq	r1, [r4, #0]
 8007e24:	6054      	str	r4, [r2, #4]
 8007e26:	e7ca      	b.n	8007dbe <_free_r+0x26>
 8007e28:	b003      	add	sp, #12
 8007e2a:	bd30      	pop	{r4, r5, pc}
 8007e2c:	200002d8 	.word	0x200002d8

08007e30 <sbrk_aligned>:
 8007e30:	b570      	push	{r4, r5, r6, lr}
 8007e32:	4e0e      	ldr	r6, [pc, #56]	; (8007e6c <sbrk_aligned+0x3c>)
 8007e34:	460c      	mov	r4, r1
 8007e36:	6831      	ldr	r1, [r6, #0]
 8007e38:	4605      	mov	r5, r0
 8007e3a:	b911      	cbnz	r1, 8007e42 <sbrk_aligned+0x12>
 8007e3c:	f000 f8bc 	bl	8007fb8 <_sbrk_r>
 8007e40:	6030      	str	r0, [r6, #0]
 8007e42:	4621      	mov	r1, r4
 8007e44:	4628      	mov	r0, r5
 8007e46:	f000 f8b7 	bl	8007fb8 <_sbrk_r>
 8007e4a:	1c43      	adds	r3, r0, #1
 8007e4c:	d00a      	beq.n	8007e64 <sbrk_aligned+0x34>
 8007e4e:	1cc4      	adds	r4, r0, #3
 8007e50:	f024 0403 	bic.w	r4, r4, #3
 8007e54:	42a0      	cmp	r0, r4
 8007e56:	d007      	beq.n	8007e68 <sbrk_aligned+0x38>
 8007e58:	1a21      	subs	r1, r4, r0
 8007e5a:	4628      	mov	r0, r5
 8007e5c:	f000 f8ac 	bl	8007fb8 <_sbrk_r>
 8007e60:	3001      	adds	r0, #1
 8007e62:	d101      	bne.n	8007e68 <sbrk_aligned+0x38>
 8007e64:	f04f 34ff 	mov.w	r4, #4294967295
 8007e68:	4620      	mov	r0, r4
 8007e6a:	bd70      	pop	{r4, r5, r6, pc}
 8007e6c:	200002dc 	.word	0x200002dc

08007e70 <_malloc_r>:
 8007e70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007e74:	1ccd      	adds	r5, r1, #3
 8007e76:	f025 0503 	bic.w	r5, r5, #3
 8007e7a:	3508      	adds	r5, #8
 8007e7c:	2d0c      	cmp	r5, #12
 8007e7e:	bf38      	it	cc
 8007e80:	250c      	movcc	r5, #12
 8007e82:	2d00      	cmp	r5, #0
 8007e84:	4607      	mov	r7, r0
 8007e86:	db01      	blt.n	8007e8c <_malloc_r+0x1c>
 8007e88:	42a9      	cmp	r1, r5
 8007e8a:	d905      	bls.n	8007e98 <_malloc_r+0x28>
 8007e8c:	230c      	movs	r3, #12
 8007e8e:	603b      	str	r3, [r7, #0]
 8007e90:	2600      	movs	r6, #0
 8007e92:	4630      	mov	r0, r6
 8007e94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007e98:	4e2e      	ldr	r6, [pc, #184]	; (8007f54 <_malloc_r+0xe4>)
 8007e9a:	f000 f89d 	bl	8007fd8 <__malloc_lock>
 8007e9e:	6833      	ldr	r3, [r6, #0]
 8007ea0:	461c      	mov	r4, r3
 8007ea2:	bb34      	cbnz	r4, 8007ef2 <_malloc_r+0x82>
 8007ea4:	4629      	mov	r1, r5
 8007ea6:	4638      	mov	r0, r7
 8007ea8:	f7ff ffc2 	bl	8007e30 <sbrk_aligned>
 8007eac:	1c43      	adds	r3, r0, #1
 8007eae:	4604      	mov	r4, r0
 8007eb0:	d14d      	bne.n	8007f4e <_malloc_r+0xde>
 8007eb2:	6834      	ldr	r4, [r6, #0]
 8007eb4:	4626      	mov	r6, r4
 8007eb6:	2e00      	cmp	r6, #0
 8007eb8:	d140      	bne.n	8007f3c <_malloc_r+0xcc>
 8007eba:	6823      	ldr	r3, [r4, #0]
 8007ebc:	4631      	mov	r1, r6
 8007ebe:	4638      	mov	r0, r7
 8007ec0:	eb04 0803 	add.w	r8, r4, r3
 8007ec4:	f000 f878 	bl	8007fb8 <_sbrk_r>
 8007ec8:	4580      	cmp	r8, r0
 8007eca:	d13a      	bne.n	8007f42 <_malloc_r+0xd2>
 8007ecc:	6821      	ldr	r1, [r4, #0]
 8007ece:	3503      	adds	r5, #3
 8007ed0:	1a6d      	subs	r5, r5, r1
 8007ed2:	f025 0503 	bic.w	r5, r5, #3
 8007ed6:	3508      	adds	r5, #8
 8007ed8:	2d0c      	cmp	r5, #12
 8007eda:	bf38      	it	cc
 8007edc:	250c      	movcc	r5, #12
 8007ede:	4629      	mov	r1, r5
 8007ee0:	4638      	mov	r0, r7
 8007ee2:	f7ff ffa5 	bl	8007e30 <sbrk_aligned>
 8007ee6:	3001      	adds	r0, #1
 8007ee8:	d02b      	beq.n	8007f42 <_malloc_r+0xd2>
 8007eea:	6823      	ldr	r3, [r4, #0]
 8007eec:	442b      	add	r3, r5
 8007eee:	6023      	str	r3, [r4, #0]
 8007ef0:	e00e      	b.n	8007f10 <_malloc_r+0xa0>
 8007ef2:	6822      	ldr	r2, [r4, #0]
 8007ef4:	1b52      	subs	r2, r2, r5
 8007ef6:	d41e      	bmi.n	8007f36 <_malloc_r+0xc6>
 8007ef8:	2a0b      	cmp	r2, #11
 8007efa:	d916      	bls.n	8007f2a <_malloc_r+0xba>
 8007efc:	1961      	adds	r1, r4, r5
 8007efe:	42a3      	cmp	r3, r4
 8007f00:	6025      	str	r5, [r4, #0]
 8007f02:	bf18      	it	ne
 8007f04:	6059      	strne	r1, [r3, #4]
 8007f06:	6863      	ldr	r3, [r4, #4]
 8007f08:	bf08      	it	eq
 8007f0a:	6031      	streq	r1, [r6, #0]
 8007f0c:	5162      	str	r2, [r4, r5]
 8007f0e:	604b      	str	r3, [r1, #4]
 8007f10:	4638      	mov	r0, r7
 8007f12:	f104 060b 	add.w	r6, r4, #11
 8007f16:	f000 f865 	bl	8007fe4 <__malloc_unlock>
 8007f1a:	f026 0607 	bic.w	r6, r6, #7
 8007f1e:	1d23      	adds	r3, r4, #4
 8007f20:	1af2      	subs	r2, r6, r3
 8007f22:	d0b6      	beq.n	8007e92 <_malloc_r+0x22>
 8007f24:	1b9b      	subs	r3, r3, r6
 8007f26:	50a3      	str	r3, [r4, r2]
 8007f28:	e7b3      	b.n	8007e92 <_malloc_r+0x22>
 8007f2a:	6862      	ldr	r2, [r4, #4]
 8007f2c:	42a3      	cmp	r3, r4
 8007f2e:	bf0c      	ite	eq
 8007f30:	6032      	streq	r2, [r6, #0]
 8007f32:	605a      	strne	r2, [r3, #4]
 8007f34:	e7ec      	b.n	8007f10 <_malloc_r+0xa0>
 8007f36:	4623      	mov	r3, r4
 8007f38:	6864      	ldr	r4, [r4, #4]
 8007f3a:	e7b2      	b.n	8007ea2 <_malloc_r+0x32>
 8007f3c:	4634      	mov	r4, r6
 8007f3e:	6876      	ldr	r6, [r6, #4]
 8007f40:	e7b9      	b.n	8007eb6 <_malloc_r+0x46>
 8007f42:	230c      	movs	r3, #12
 8007f44:	603b      	str	r3, [r7, #0]
 8007f46:	4638      	mov	r0, r7
 8007f48:	f000 f84c 	bl	8007fe4 <__malloc_unlock>
 8007f4c:	e7a1      	b.n	8007e92 <_malloc_r+0x22>
 8007f4e:	6025      	str	r5, [r4, #0]
 8007f50:	e7de      	b.n	8007f10 <_malloc_r+0xa0>
 8007f52:	bf00      	nop
 8007f54:	200002d8 	.word	0x200002d8

08007f58 <_realloc_r>:
 8007f58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007f5c:	4680      	mov	r8, r0
 8007f5e:	4614      	mov	r4, r2
 8007f60:	460e      	mov	r6, r1
 8007f62:	b921      	cbnz	r1, 8007f6e <_realloc_r+0x16>
 8007f64:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007f68:	4611      	mov	r1, r2
 8007f6a:	f7ff bf81 	b.w	8007e70 <_malloc_r>
 8007f6e:	b92a      	cbnz	r2, 8007f7c <_realloc_r+0x24>
 8007f70:	f7ff ff12 	bl	8007d98 <_free_r>
 8007f74:	4625      	mov	r5, r4
 8007f76:	4628      	mov	r0, r5
 8007f78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007f7c:	f000 f838 	bl	8007ff0 <_malloc_usable_size_r>
 8007f80:	4284      	cmp	r4, r0
 8007f82:	4607      	mov	r7, r0
 8007f84:	d802      	bhi.n	8007f8c <_realloc_r+0x34>
 8007f86:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8007f8a:	d812      	bhi.n	8007fb2 <_realloc_r+0x5a>
 8007f8c:	4621      	mov	r1, r4
 8007f8e:	4640      	mov	r0, r8
 8007f90:	f7ff ff6e 	bl	8007e70 <_malloc_r>
 8007f94:	4605      	mov	r5, r0
 8007f96:	2800      	cmp	r0, #0
 8007f98:	d0ed      	beq.n	8007f76 <_realloc_r+0x1e>
 8007f9a:	42bc      	cmp	r4, r7
 8007f9c:	4622      	mov	r2, r4
 8007f9e:	4631      	mov	r1, r6
 8007fa0:	bf28      	it	cs
 8007fa2:	463a      	movcs	r2, r7
 8007fa4:	f7ff fed0 	bl	8007d48 <memcpy>
 8007fa8:	4631      	mov	r1, r6
 8007faa:	4640      	mov	r0, r8
 8007fac:	f7ff fef4 	bl	8007d98 <_free_r>
 8007fb0:	e7e1      	b.n	8007f76 <_realloc_r+0x1e>
 8007fb2:	4635      	mov	r5, r6
 8007fb4:	e7df      	b.n	8007f76 <_realloc_r+0x1e>
	...

08007fb8 <_sbrk_r>:
 8007fb8:	b538      	push	{r3, r4, r5, lr}
 8007fba:	4d06      	ldr	r5, [pc, #24]	; (8007fd4 <_sbrk_r+0x1c>)
 8007fbc:	2300      	movs	r3, #0
 8007fbe:	4604      	mov	r4, r0
 8007fc0:	4608      	mov	r0, r1
 8007fc2:	602b      	str	r3, [r5, #0]
 8007fc4:	f7f8 fc42 	bl	800084c <_sbrk>
 8007fc8:	1c43      	adds	r3, r0, #1
 8007fca:	d102      	bne.n	8007fd2 <_sbrk_r+0x1a>
 8007fcc:	682b      	ldr	r3, [r5, #0]
 8007fce:	b103      	cbz	r3, 8007fd2 <_sbrk_r+0x1a>
 8007fd0:	6023      	str	r3, [r4, #0]
 8007fd2:	bd38      	pop	{r3, r4, r5, pc}
 8007fd4:	200002e0 	.word	0x200002e0

08007fd8 <__malloc_lock>:
 8007fd8:	4801      	ldr	r0, [pc, #4]	; (8007fe0 <__malloc_lock+0x8>)
 8007fda:	f000 b811 	b.w	8008000 <__retarget_lock_acquire_recursive>
 8007fde:	bf00      	nop
 8007fe0:	200002e4 	.word	0x200002e4

08007fe4 <__malloc_unlock>:
 8007fe4:	4801      	ldr	r0, [pc, #4]	; (8007fec <__malloc_unlock+0x8>)
 8007fe6:	f000 b80c 	b.w	8008002 <__retarget_lock_release_recursive>
 8007fea:	bf00      	nop
 8007fec:	200002e4 	.word	0x200002e4

08007ff0 <_malloc_usable_size_r>:
 8007ff0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007ff4:	1f18      	subs	r0, r3, #4
 8007ff6:	2b00      	cmp	r3, #0
 8007ff8:	bfbc      	itt	lt
 8007ffa:	580b      	ldrlt	r3, [r1, r0]
 8007ffc:	18c0      	addlt	r0, r0, r3
 8007ffe:	4770      	bx	lr

08008000 <__retarget_lock_acquire_recursive>:
 8008000:	4770      	bx	lr

08008002 <__retarget_lock_release_recursive>:
 8008002:	4770      	bx	lr

08008004 <_init>:
 8008004:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008006:	bf00      	nop
 8008008:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800800a:	bc08      	pop	{r3}
 800800c:	469e      	mov	lr, r3
 800800e:	4770      	bx	lr

08008010 <_fini>:
 8008010:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008012:	bf00      	nop
 8008014:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008016:	bc08      	pop	{r3}
 8008018:	469e      	mov	lr, r3
 800801a:	4770      	bx	lr
