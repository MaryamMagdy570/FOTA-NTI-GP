
Bootloader__Templet.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000027ac  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  08002940  08002940  00012940  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002970  08002970  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08002970  08002970  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002970  08002970  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002970  08002970  00012970  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002974  08002974  00012974  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08002978  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002000c  2**0
                  CONTENTS
 10 .bss          0000009c  2000000c  2000000c  0002000c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200000a8  200000a8  0002000c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
 14 .debug_info   00009f2c  00000000  00000000  0002007f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00001de5  00000000  00000000  00029fab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000968  00000000  00000000  0002bd90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000746  00000000  00000000  0002c6f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00020d2f  00000000  00000000  0002ce3e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0000e1db  00000000  00000000  0004db6d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000c47d4  00000000  00000000  0005bd48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  0000250c  00000000  00000000  0012051c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000073  00000000  00000000  00122a28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	2000000c 	.word	0x2000000c
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08002928 	.word	0x08002928

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000010 	.word	0x20000010
 80001d0:	08002928 	.word	0x08002928

080001d4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80001d4:	b480      	push	{r7}
 80001d6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80001d8:	b672      	cpsid	i
}
 80001da:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80001dc:	e7fe      	b.n	80001dc <Error_Handler+0x8>
	...

080001e0 <MX_CAN_Init>:

CAN_HandleTypeDef hcan;

/* CAN init function */
void MX_CAN_Init(void)
{
 80001e0:	b580      	push	{r7, lr}
 80001e2:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN;
 80001e4:	4b16      	ldr	r3, [pc, #88]	; (8000240 <MX_CAN_Init+0x60>)
 80001e6:	4a17      	ldr	r2, [pc, #92]	; (8000244 <MX_CAN_Init+0x64>)
 80001e8:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 16;
 80001ea:	4b15      	ldr	r3, [pc, #84]	; (8000240 <MX_CAN_Init+0x60>)
 80001ec:	2210      	movs	r2, #16
 80001ee:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 80001f0:	4b13      	ldr	r3, [pc, #76]	; (8000240 <MX_CAN_Init+0x60>)
 80001f2:	2200      	movs	r2, #0
 80001f4:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80001f6:	4b12      	ldr	r3, [pc, #72]	; (8000240 <MX_CAN_Init+0x60>)
 80001f8:	2200      	movs	r2, #0
 80001fa:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_1TQ;
 80001fc:	4b10      	ldr	r3, [pc, #64]	; (8000240 <MX_CAN_Init+0x60>)
 80001fe:	2200      	movs	r2, #0
 8000200:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_1TQ;
 8000202:	4b0f      	ldr	r3, [pc, #60]	; (8000240 <MX_CAN_Init+0x60>)
 8000204:	2200      	movs	r2, #0
 8000206:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8000208:	4b0d      	ldr	r3, [pc, #52]	; (8000240 <MX_CAN_Init+0x60>)
 800020a:	2200      	movs	r2, #0
 800020c:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 800020e:	4b0c      	ldr	r3, [pc, #48]	; (8000240 <MX_CAN_Init+0x60>)
 8000210:	2200      	movs	r2, #0
 8000212:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8000214:	4b0a      	ldr	r3, [pc, #40]	; (8000240 <MX_CAN_Init+0x60>)
 8000216:	2200      	movs	r2, #0
 8000218:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 800021a:	4b09      	ldr	r3, [pc, #36]	; (8000240 <MX_CAN_Init+0x60>)
 800021c:	2200      	movs	r2, #0
 800021e:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 8000220:	4b07      	ldr	r3, [pc, #28]	; (8000240 <MX_CAN_Init+0x60>)
 8000222:	2200      	movs	r2, #0
 8000224:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 8000226:	4b06      	ldr	r3, [pc, #24]	; (8000240 <MX_CAN_Init+0x60>)
 8000228:	2200      	movs	r2, #0
 800022a:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 800022c:	4804      	ldr	r0, [pc, #16]	; (8000240 <MX_CAN_Init+0x60>)
 800022e:	f000 fa65 	bl	80006fc <HAL_CAN_Init>
 8000232:	4603      	mov	r3, r0
 8000234:	2b00      	cmp	r3, #0
 8000236:	d001      	beq.n	800023c <MX_CAN_Init+0x5c>
  {
    Error_Handler();
 8000238:	f7ff ffcc 	bl	80001d4 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */

}
 800023c:	bf00      	nop
 800023e:	bd80      	pop	{r7, pc}
 8000240:	20000028 	.word	0x20000028
 8000244:	40006400 	.word	0x40006400

08000248 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8000248:	b580      	push	{r7, lr}
 800024a:	b08a      	sub	sp, #40	; 0x28
 800024c:	af00      	add	r7, sp, #0
 800024e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000250:	f107 0314 	add.w	r3, r7, #20
 8000254:	2200      	movs	r2, #0
 8000256:	601a      	str	r2, [r3, #0]
 8000258:	605a      	str	r2, [r3, #4]
 800025a:	609a      	str	r2, [r3, #8]
 800025c:	60da      	str	r2, [r3, #12]
 800025e:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN)
 8000260:	687b      	ldr	r3, [r7, #4]
 8000262:	681b      	ldr	r3, [r3, #0]
 8000264:	4a18      	ldr	r2, [pc, #96]	; (80002c8 <HAL_CAN_MspInit+0x80>)
 8000266:	4293      	cmp	r3, r2
 8000268:	d129      	bne.n	80002be <HAL_CAN_MspInit+0x76>
  {
  /* USER CODE BEGIN CAN_MspInit 0 */

  /* USER CODE END CAN_MspInit 0 */
    /* CAN clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 800026a:	4b18      	ldr	r3, [pc, #96]	; (80002cc <HAL_CAN_MspInit+0x84>)
 800026c:	69db      	ldr	r3, [r3, #28]
 800026e:	4a17      	ldr	r2, [pc, #92]	; (80002cc <HAL_CAN_MspInit+0x84>)
 8000270:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000274:	61d3      	str	r3, [r2, #28]
 8000276:	4b15      	ldr	r3, [pc, #84]	; (80002cc <HAL_CAN_MspInit+0x84>)
 8000278:	69db      	ldr	r3, [r3, #28]
 800027a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800027e:	613b      	str	r3, [r7, #16]
 8000280:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000282:	4b12      	ldr	r3, [pc, #72]	; (80002cc <HAL_CAN_MspInit+0x84>)
 8000284:	695b      	ldr	r3, [r3, #20]
 8000286:	4a11      	ldr	r2, [pc, #68]	; (80002cc <HAL_CAN_MspInit+0x84>)
 8000288:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800028c:	6153      	str	r3, [r2, #20]
 800028e:	4b0f      	ldr	r3, [pc, #60]	; (80002cc <HAL_CAN_MspInit+0x84>)
 8000290:	695b      	ldr	r3, [r3, #20]
 8000292:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000296:	60fb      	str	r3, [r7, #12]
 8000298:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800029a:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800029e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80002a0:	2302      	movs	r3, #2
 80002a2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80002a4:	2300      	movs	r3, #0
 80002a6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80002a8:	2303      	movs	r3, #3
 80002aa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN;
 80002ac:	2309      	movs	r3, #9
 80002ae:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80002b0:	f107 0314 	add.w	r3, r7, #20
 80002b4:	4619      	mov	r1, r3
 80002b6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80002ba:	f000 fc01 	bl	8000ac0 <HAL_GPIO_Init>

  /* USER CODE BEGIN CAN_MspInit 1 */

  /* USER CODE END CAN_MspInit 1 */
  }
}
 80002be:	bf00      	nop
 80002c0:	3728      	adds	r7, #40	; 0x28
 80002c2:	46bd      	mov	sp, r7
 80002c4:	bd80      	pop	{r7, pc}
 80002c6:	bf00      	nop
 80002c8:	40006400 	.word	0x40006400
 80002cc:	40021000 	.word	0x40021000

080002d0 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Pinout Configuration
*/
void MX_GPIO_Init(void)
{
 80002d0:	b480      	push	{r7}
 80002d2:	b085      	sub	sp, #20
 80002d4:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80002d6:	4b1b      	ldr	r3, [pc, #108]	; (8000344 <MX_GPIO_Init+0x74>)
 80002d8:	695b      	ldr	r3, [r3, #20]
 80002da:	4a1a      	ldr	r2, [pc, #104]	; (8000344 <MX_GPIO_Init+0x74>)
 80002dc:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80002e0:	6153      	str	r3, [r2, #20]
 80002e2:	4b18      	ldr	r3, [pc, #96]	; (8000344 <MX_GPIO_Init+0x74>)
 80002e4:	695b      	ldr	r3, [r3, #20]
 80002e6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80002ea:	60fb      	str	r3, [r7, #12]
 80002ec:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80002ee:	4b15      	ldr	r3, [pc, #84]	; (8000344 <MX_GPIO_Init+0x74>)
 80002f0:	695b      	ldr	r3, [r3, #20]
 80002f2:	4a14      	ldr	r2, [pc, #80]	; (8000344 <MX_GPIO_Init+0x74>)
 80002f4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80002f8:	6153      	str	r3, [r2, #20]
 80002fa:	4b12      	ldr	r3, [pc, #72]	; (8000344 <MX_GPIO_Init+0x74>)
 80002fc:	695b      	ldr	r3, [r3, #20]
 80002fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000302:	60bb      	str	r3, [r7, #8]
 8000304:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000306:	4b0f      	ldr	r3, [pc, #60]	; (8000344 <MX_GPIO_Init+0x74>)
 8000308:	695b      	ldr	r3, [r3, #20]
 800030a:	4a0e      	ldr	r2, [pc, #56]	; (8000344 <MX_GPIO_Init+0x74>)
 800030c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000310:	6153      	str	r3, [r2, #20]
 8000312:	4b0c      	ldr	r3, [pc, #48]	; (8000344 <MX_GPIO_Init+0x74>)
 8000314:	695b      	ldr	r3, [r3, #20]
 8000316:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800031a:	607b      	str	r3, [r7, #4]
 800031c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800031e:	4b09      	ldr	r3, [pc, #36]	; (8000344 <MX_GPIO_Init+0x74>)
 8000320:	695b      	ldr	r3, [r3, #20]
 8000322:	4a08      	ldr	r2, [pc, #32]	; (8000344 <MX_GPIO_Init+0x74>)
 8000324:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000328:	6153      	str	r3, [r2, #20]
 800032a:	4b06      	ldr	r3, [pc, #24]	; (8000344 <MX_GPIO_Init+0x74>)
 800032c:	695b      	ldr	r3, [r3, #20]
 800032e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000332:	603b      	str	r3, [r7, #0]
 8000334:	683b      	ldr	r3, [r7, #0]

}
 8000336:	bf00      	nop
 8000338:	3714      	adds	r7, #20
 800033a:	46bd      	mov	sp, r7
 800033c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000340:	4770      	bx	lr
 8000342:	bf00      	nop
 8000344:	40021000 	.word	0x40021000

08000348 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000348:	b580      	push	{r7, lr}
 800034a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800034c:	4b1b      	ldr	r3, [pc, #108]	; (80003bc <MX_I2C1_Init+0x74>)
 800034e:	4a1c      	ldr	r2, [pc, #112]	; (80003c0 <MX_I2C1_Init+0x78>)
 8000350:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 8000352:	4b1a      	ldr	r3, [pc, #104]	; (80003bc <MX_I2C1_Init+0x74>)
 8000354:	4a1b      	ldr	r2, [pc, #108]	; (80003c4 <MX_I2C1_Init+0x7c>)
 8000356:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000358:	4b18      	ldr	r3, [pc, #96]	; (80003bc <MX_I2C1_Init+0x74>)
 800035a:	2200      	movs	r2, #0
 800035c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800035e:	4b17      	ldr	r3, [pc, #92]	; (80003bc <MX_I2C1_Init+0x74>)
 8000360:	2201      	movs	r2, #1
 8000362:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000364:	4b15      	ldr	r3, [pc, #84]	; (80003bc <MX_I2C1_Init+0x74>)
 8000366:	2200      	movs	r2, #0
 8000368:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800036a:	4b14      	ldr	r3, [pc, #80]	; (80003bc <MX_I2C1_Init+0x74>)
 800036c:	2200      	movs	r2, #0
 800036e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000370:	4b12      	ldr	r3, [pc, #72]	; (80003bc <MX_I2C1_Init+0x74>)
 8000372:	2200      	movs	r2, #0
 8000374:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000376:	4b11      	ldr	r3, [pc, #68]	; (80003bc <MX_I2C1_Init+0x74>)
 8000378:	2200      	movs	r2, #0
 800037a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800037c:	4b0f      	ldr	r3, [pc, #60]	; (80003bc <MX_I2C1_Init+0x74>)
 800037e:	2200      	movs	r2, #0
 8000380:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000382:	480e      	ldr	r0, [pc, #56]	; (80003bc <MX_I2C1_Init+0x74>)
 8000384:	f000 fd26 	bl	8000dd4 <HAL_I2C_Init>
 8000388:	4603      	mov	r3, r0
 800038a:	2b00      	cmp	r3, #0
 800038c:	d001      	beq.n	8000392 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800038e:	f7ff ff21 	bl	80001d4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000392:	2100      	movs	r1, #0
 8000394:	4809      	ldr	r0, [pc, #36]	; (80003bc <MX_I2C1_Init+0x74>)
 8000396:	f000 fdac 	bl	8000ef2 <HAL_I2CEx_ConfigAnalogFilter>
 800039a:	4603      	mov	r3, r0
 800039c:	2b00      	cmp	r3, #0
 800039e:	d001      	beq.n	80003a4 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80003a0:	f7ff ff18 	bl	80001d4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80003a4:	2100      	movs	r1, #0
 80003a6:	4805      	ldr	r0, [pc, #20]	; (80003bc <MX_I2C1_Init+0x74>)
 80003a8:	f000 fdee 	bl	8000f88 <HAL_I2CEx_ConfigDigitalFilter>
 80003ac:	4603      	mov	r3, r0
 80003ae:	2b00      	cmp	r3, #0
 80003b0:	d001      	beq.n	80003b6 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80003b2:	f7ff ff0f 	bl	80001d4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80003b6:	bf00      	nop
 80003b8:	bd80      	pop	{r7, pc}
 80003ba:	bf00      	nop
 80003bc:	20000050 	.word	0x20000050
 80003c0:	40005400 	.word	0x40005400
 80003c4:	2000090e 	.word	0x2000090e

080003c8 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80003c8:	b580      	push	{r7, lr}
 80003ca:	b08a      	sub	sp, #40	; 0x28
 80003cc:	af00      	add	r7, sp, #0
 80003ce:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003d0:	f107 0314 	add.w	r3, r7, #20
 80003d4:	2200      	movs	r2, #0
 80003d6:	601a      	str	r2, [r3, #0]
 80003d8:	605a      	str	r2, [r3, #4]
 80003da:	609a      	str	r2, [r3, #8]
 80003dc:	60da      	str	r2, [r3, #12]
 80003de:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 80003e0:	687b      	ldr	r3, [r7, #4]
 80003e2:	681b      	ldr	r3, [r3, #0]
 80003e4:	4a18      	ldr	r2, [pc, #96]	; (8000448 <HAL_I2C_MspInit+0x80>)
 80003e6:	4293      	cmp	r3, r2
 80003e8:	d129      	bne.n	800043e <HAL_I2C_MspInit+0x76>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80003ea:	4b18      	ldr	r3, [pc, #96]	; (800044c <HAL_I2C_MspInit+0x84>)
 80003ec:	695b      	ldr	r3, [r3, #20]
 80003ee:	4a17      	ldr	r2, [pc, #92]	; (800044c <HAL_I2C_MspInit+0x84>)
 80003f0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80003f4:	6153      	str	r3, [r2, #20]
 80003f6:	4b15      	ldr	r3, [pc, #84]	; (800044c <HAL_I2C_MspInit+0x84>)
 80003f8:	695b      	ldr	r3, [r3, #20]
 80003fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80003fe:	613b      	str	r3, [r7, #16]
 8000400:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PA14     ------> I2C1_SDA
    PA15     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8000402:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8000406:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000408:	2312      	movs	r3, #18
 800040a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800040c:	2300      	movs	r3, #0
 800040e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000410:	2303      	movs	r3, #3
 8000412:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000414:	2304      	movs	r3, #4
 8000416:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000418:	f107 0314 	add.w	r3, r7, #20
 800041c:	4619      	mov	r1, r3
 800041e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000422:	f000 fb4d 	bl	8000ac0 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000426:	4b09      	ldr	r3, [pc, #36]	; (800044c <HAL_I2C_MspInit+0x84>)
 8000428:	69db      	ldr	r3, [r3, #28]
 800042a:	4a08      	ldr	r2, [pc, #32]	; (800044c <HAL_I2C_MspInit+0x84>)
 800042c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000430:	61d3      	str	r3, [r2, #28]
 8000432:	4b06      	ldr	r3, [pc, #24]	; (800044c <HAL_I2C_MspInit+0x84>)
 8000434:	69db      	ldr	r3, [r3, #28]
 8000436:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800043a:	60fb      	str	r3, [r7, #12]
 800043c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 800043e:	bf00      	nop
 8000440:	3728      	adds	r7, #40	; 0x28
 8000442:	46bd      	mov	sp, r7
 8000444:	bd80      	pop	{r7, pc}
 8000446:	bf00      	nop
 8000448:	40005400 	.word	0x40005400
 800044c:	40021000 	.word	0x40021000

08000450 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000450:	b580      	push	{r7, lr}
 8000452:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000454:	f000 f8ec 	bl	8000630 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000458:	f000 f807 	bl	800046a <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800045c:	f7ff ff38 	bl	80002d0 <MX_GPIO_Init>
  MX_CAN_Init();
 8000460:	f7ff febe 	bl	80001e0 <MX_CAN_Init>
  MX_I2C1_Init();
 8000464:	f7ff ff70 	bl	8000348 <MX_I2C1_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000468:	e7fe      	b.n	8000468 <main+0x18>

0800046a <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800046a:	b580      	push	{r7, lr}
 800046c:	b0a6      	sub	sp, #152	; 0x98
 800046e:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000470:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000474:	2228      	movs	r2, #40	; 0x28
 8000476:	2100      	movs	r1, #0
 8000478:	4618      	mov	r0, r3
 800047a:	f002 fa29 	bl	80028d0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800047e:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000482:	2200      	movs	r2, #0
 8000484:	601a      	str	r2, [r3, #0]
 8000486:	605a      	str	r2, [r3, #4]
 8000488:	609a      	str	r2, [r3, #8]
 800048a:	60da      	str	r2, [r3, #12]
 800048c:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800048e:	1d3b      	adds	r3, r7, #4
 8000490:	2258      	movs	r2, #88	; 0x58
 8000492:	2100      	movs	r1, #0
 8000494:	4618      	mov	r0, r3
 8000496:	f002 fa1b 	bl	80028d0 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800049a:	2302      	movs	r3, #2
 800049c:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800049e:	2301      	movs	r3, #1
 80004a0:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80004a2:	2310      	movs	r3, #16
 80004a4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80004a8:	2300      	movs	r3, #0
 80004aa:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80004ae:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80004b2:	4618      	mov	r0, r3
 80004b4:	f000 fdb4 	bl	8001020 <HAL_RCC_OscConfig>
 80004b8:	4603      	mov	r3, r0
 80004ba:	2b00      	cmp	r3, #0
 80004bc:	d001      	beq.n	80004c2 <SystemClock_Config+0x58>
  {
    Error_Handler();
 80004be:	f7ff fe89 	bl	80001d4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80004c2:	230f      	movs	r3, #15
 80004c4:	65fb      	str	r3, [r7, #92]	; 0x5c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80004c6:	2300      	movs	r3, #0
 80004c8:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80004ca:	2300      	movs	r3, #0
 80004cc:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80004ce:	2300      	movs	r3, #0
 80004d0:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80004d2:	2300      	movs	r3, #0
 80004d4:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80004d6:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80004da:	2100      	movs	r1, #0
 80004dc:	4618      	mov	r0, r3
 80004de:	f001 fdf3 	bl	80020c8 <HAL_RCC_ClockConfig>
 80004e2:	4603      	mov	r3, r0
 80004e4:	2b00      	cmp	r3, #0
 80004e6:	d001      	beq.n	80004ec <SystemClock_Config+0x82>
  {
    Error_Handler();
 80004e8:	f7ff fe74 	bl	80001d4 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_USART2
 80004ec:	2327      	movs	r3, #39	; 0x27
 80004ee:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_I2C1;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80004f0:	2300      	movs	r3, #0
 80004f2:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80004f4:	2300      	movs	r3, #0
 80004f6:	613b      	str	r3, [r7, #16]
  PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80004f8:	2300      	movs	r3, #0
 80004fa:	617b      	str	r3, [r7, #20]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 80004fc:	2300      	movs	r3, #0
 80004fe:	623b      	str	r3, [r7, #32]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000500:	1d3b      	adds	r3, r7, #4
 8000502:	4618      	mov	r0, r3
 8000504:	f001 ffc6 	bl	8002494 <HAL_RCCEx_PeriphCLKConfig>
 8000508:	4603      	mov	r3, r0
 800050a:	2b00      	cmp	r3, #0
 800050c:	d001      	beq.n	8000512 <SystemClock_Config+0xa8>
  {
    Error_Handler();
 800050e:	f7ff fe61 	bl	80001d4 <Error_Handler>
  }
}
 8000512:	bf00      	nop
 8000514:	3798      	adds	r7, #152	; 0x98
 8000516:	46bd      	mov	sp, r7
 8000518:	bd80      	pop	{r7, pc}
	...

0800051c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800051c:	b480      	push	{r7}
 800051e:	b083      	sub	sp, #12
 8000520:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000522:	4b0f      	ldr	r3, [pc, #60]	; (8000560 <HAL_MspInit+0x44>)
 8000524:	699b      	ldr	r3, [r3, #24]
 8000526:	4a0e      	ldr	r2, [pc, #56]	; (8000560 <HAL_MspInit+0x44>)
 8000528:	f043 0301 	orr.w	r3, r3, #1
 800052c:	6193      	str	r3, [r2, #24]
 800052e:	4b0c      	ldr	r3, [pc, #48]	; (8000560 <HAL_MspInit+0x44>)
 8000530:	699b      	ldr	r3, [r3, #24]
 8000532:	f003 0301 	and.w	r3, r3, #1
 8000536:	607b      	str	r3, [r7, #4]
 8000538:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800053a:	4b09      	ldr	r3, [pc, #36]	; (8000560 <HAL_MspInit+0x44>)
 800053c:	69db      	ldr	r3, [r3, #28]
 800053e:	4a08      	ldr	r2, [pc, #32]	; (8000560 <HAL_MspInit+0x44>)
 8000540:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000544:	61d3      	str	r3, [r2, #28]
 8000546:	4b06      	ldr	r3, [pc, #24]	; (8000560 <HAL_MspInit+0x44>)
 8000548:	69db      	ldr	r3, [r3, #28]
 800054a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800054e:	603b      	str	r3, [r7, #0]
 8000550:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000552:	bf00      	nop
 8000554:	370c      	adds	r7, #12
 8000556:	46bd      	mov	sp, r7
 8000558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800055c:	4770      	bx	lr
 800055e:	bf00      	nop
 8000560:	40021000 	.word	0x40021000

08000564 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000564:	b480      	push	{r7}
 8000566:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000568:	e7fe      	b.n	8000568 <NMI_Handler+0x4>

0800056a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800056a:	b480      	push	{r7}
 800056c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800056e:	e7fe      	b.n	800056e <HardFault_Handler+0x4>

08000570 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000570:	b480      	push	{r7}
 8000572:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000574:	e7fe      	b.n	8000574 <MemManage_Handler+0x4>

08000576 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000576:	b480      	push	{r7}
 8000578:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800057a:	e7fe      	b.n	800057a <BusFault_Handler+0x4>

0800057c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800057c:	b480      	push	{r7}
 800057e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000580:	e7fe      	b.n	8000580 <UsageFault_Handler+0x4>

08000582 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000582:	b480      	push	{r7}
 8000584:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000586:	bf00      	nop
 8000588:	46bd      	mov	sp, r7
 800058a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800058e:	4770      	bx	lr

08000590 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000590:	b480      	push	{r7}
 8000592:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000594:	bf00      	nop
 8000596:	46bd      	mov	sp, r7
 8000598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800059c:	4770      	bx	lr

0800059e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800059e:	b480      	push	{r7}
 80005a0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80005a2:	bf00      	nop
 80005a4:	46bd      	mov	sp, r7
 80005a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005aa:	4770      	bx	lr

080005ac <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80005ac:	b580      	push	{r7, lr}
 80005ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80005b0:	f000 f884 	bl	80006bc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80005b4:	bf00      	nop
 80005b6:	bd80      	pop	{r7, pc}

080005b8 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80005b8:	b480      	push	{r7}
 80005ba:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80005bc:	4b06      	ldr	r3, [pc, #24]	; (80005d8 <SystemInit+0x20>)
 80005be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80005c2:	4a05      	ldr	r2, [pc, #20]	; (80005d8 <SystemInit+0x20>)
 80005c4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80005c8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80005cc:	bf00      	nop
 80005ce:	46bd      	mov	sp, r7
 80005d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d4:	4770      	bx	lr
 80005d6:	bf00      	nop
 80005d8:	e000ed00 	.word	0xe000ed00

080005dc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80005dc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000614 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 80005e0:	f7ff ffea 	bl	80005b8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80005e4:	480c      	ldr	r0, [pc, #48]	; (8000618 <LoopForever+0x6>)
  ldr r1, =_edata
 80005e6:	490d      	ldr	r1, [pc, #52]	; (800061c <LoopForever+0xa>)
  ldr r2, =_sidata
 80005e8:	4a0d      	ldr	r2, [pc, #52]	; (8000620 <LoopForever+0xe>)
  movs r3, #0
 80005ea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80005ec:	e002      	b.n	80005f4 <LoopCopyDataInit>

080005ee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80005ee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80005f0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80005f2:	3304      	adds	r3, #4

080005f4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80005f4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80005f6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80005f8:	d3f9      	bcc.n	80005ee <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80005fa:	4a0a      	ldr	r2, [pc, #40]	; (8000624 <LoopForever+0x12>)
  ldr r4, =_ebss
 80005fc:	4c0a      	ldr	r4, [pc, #40]	; (8000628 <LoopForever+0x16>)
  movs r3, #0
 80005fe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000600:	e001      	b.n	8000606 <LoopFillZerobss>

08000602 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000602:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000604:	3204      	adds	r2, #4

08000606 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000606:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000608:	d3fb      	bcc.n	8000602 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800060a:	f002 f969 	bl	80028e0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800060e:	f7ff ff1f 	bl	8000450 <main>

08000612 <LoopForever>:

LoopForever:
    b LoopForever
 8000612:	e7fe      	b.n	8000612 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000614:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000618:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800061c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000620:	08002978 	.word	0x08002978
  ldr r2, =_sbss
 8000624:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000628:	200000a8 	.word	0x200000a8

0800062c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800062c:	e7fe      	b.n	800062c <ADC1_2_IRQHandler>
	...

08000630 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000630:	b580      	push	{r7, lr}
 8000632:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000634:	4b08      	ldr	r3, [pc, #32]	; (8000658 <HAL_Init+0x28>)
 8000636:	681b      	ldr	r3, [r3, #0]
 8000638:	4a07      	ldr	r2, [pc, #28]	; (8000658 <HAL_Init+0x28>)
 800063a:	f043 0310 	orr.w	r3, r3, #16
 800063e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000640:	2003      	movs	r0, #3
 8000642:	f000 fa09 	bl	8000a58 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000646:	200f      	movs	r0, #15
 8000648:	f000 f808 	bl	800065c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800064c:	f7ff ff66 	bl	800051c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000650:	2300      	movs	r3, #0
}
 8000652:	4618      	mov	r0, r3
 8000654:	bd80      	pop	{r7, pc}
 8000656:	bf00      	nop
 8000658:	40022000 	.word	0x40022000

0800065c <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800065c:	b580      	push	{r7, lr}
 800065e:	b082      	sub	sp, #8
 8000660:	af00      	add	r7, sp, #0
 8000662:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000664:	4b12      	ldr	r3, [pc, #72]	; (80006b0 <HAL_InitTick+0x54>)
 8000666:	681a      	ldr	r2, [r3, #0]
 8000668:	4b12      	ldr	r3, [pc, #72]	; (80006b4 <HAL_InitTick+0x58>)
 800066a:	781b      	ldrb	r3, [r3, #0]
 800066c:	4619      	mov	r1, r3
 800066e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000672:	fbb3 f3f1 	udiv	r3, r3, r1
 8000676:	fbb2 f3f3 	udiv	r3, r2, r3
 800067a:	4618      	mov	r0, r3
 800067c:	f000 fa13 	bl	8000aa6 <HAL_SYSTICK_Config>
 8000680:	4603      	mov	r3, r0
 8000682:	2b00      	cmp	r3, #0
 8000684:	d001      	beq.n	800068a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000686:	2301      	movs	r3, #1
 8000688:	e00e      	b.n	80006a8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800068a:	687b      	ldr	r3, [r7, #4]
 800068c:	2b0f      	cmp	r3, #15
 800068e:	d80a      	bhi.n	80006a6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000690:	2200      	movs	r2, #0
 8000692:	6879      	ldr	r1, [r7, #4]
 8000694:	f04f 30ff 	mov.w	r0, #4294967295
 8000698:	f000 f9e9 	bl	8000a6e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800069c:	4a06      	ldr	r2, [pc, #24]	; (80006b8 <HAL_InitTick+0x5c>)
 800069e:	687b      	ldr	r3, [r7, #4]
 80006a0:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 80006a2:	2300      	movs	r3, #0
 80006a4:	e000      	b.n	80006a8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80006a6:	2301      	movs	r3, #1
}
 80006a8:	4618      	mov	r0, r3
 80006aa:	3708      	adds	r7, #8
 80006ac:	46bd      	mov	sp, r7
 80006ae:	bd80      	pop	{r7, pc}
 80006b0:	20000000 	.word	0x20000000
 80006b4:	20000008 	.word	0x20000008
 80006b8:	20000004 	.word	0x20000004

080006bc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80006bc:	b480      	push	{r7}
 80006be:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80006c0:	4b06      	ldr	r3, [pc, #24]	; (80006dc <HAL_IncTick+0x20>)
 80006c2:	781b      	ldrb	r3, [r3, #0]
 80006c4:	461a      	mov	r2, r3
 80006c6:	4b06      	ldr	r3, [pc, #24]	; (80006e0 <HAL_IncTick+0x24>)
 80006c8:	681b      	ldr	r3, [r3, #0]
 80006ca:	4413      	add	r3, r2
 80006cc:	4a04      	ldr	r2, [pc, #16]	; (80006e0 <HAL_IncTick+0x24>)
 80006ce:	6013      	str	r3, [r2, #0]
}
 80006d0:	bf00      	nop
 80006d2:	46bd      	mov	sp, r7
 80006d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d8:	4770      	bx	lr
 80006da:	bf00      	nop
 80006dc:	20000008 	.word	0x20000008
 80006e0:	200000a4 	.word	0x200000a4

080006e4 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80006e4:	b480      	push	{r7}
 80006e6:	af00      	add	r7, sp, #0
  return uwTick;  
 80006e8:	4b03      	ldr	r3, [pc, #12]	; (80006f8 <HAL_GetTick+0x14>)
 80006ea:	681b      	ldr	r3, [r3, #0]
}
 80006ec:	4618      	mov	r0, r3
 80006ee:	46bd      	mov	sp, r7
 80006f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006f4:	4770      	bx	lr
 80006f6:	bf00      	nop
 80006f8:	200000a4 	.word	0x200000a4

080006fc <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80006fc:	b580      	push	{r7, lr}
 80006fe:	b084      	sub	sp, #16
 8000700:	af00      	add	r7, sp, #0
 8000702:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8000704:	687b      	ldr	r3, [r7, #4]
 8000706:	2b00      	cmp	r3, #0
 8000708:	d101      	bne.n	800070e <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800070a:	2301      	movs	r3, #1
 800070c:	e0ed      	b.n	80008ea <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800070e:	687b      	ldr	r3, [r7, #4]
 8000710:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000714:	b2db      	uxtb	r3, r3
 8000716:	2b00      	cmp	r3, #0
 8000718:	d102      	bne.n	8000720 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800071a:	6878      	ldr	r0, [r7, #4]
 800071c:	f7ff fd94 	bl	8000248 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000720:	687b      	ldr	r3, [r7, #4]
 8000722:	681b      	ldr	r3, [r3, #0]
 8000724:	681a      	ldr	r2, [r3, #0]
 8000726:	687b      	ldr	r3, [r7, #4]
 8000728:	681b      	ldr	r3, [r3, #0]
 800072a:	f042 0201 	orr.w	r2, r2, #1
 800072e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000730:	f7ff ffd8 	bl	80006e4 <HAL_GetTick>
 8000734:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000736:	e012      	b.n	800075e <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000738:	f7ff ffd4 	bl	80006e4 <HAL_GetTick>
 800073c:	4602      	mov	r2, r0
 800073e:	68fb      	ldr	r3, [r7, #12]
 8000740:	1ad3      	subs	r3, r2, r3
 8000742:	2b0a      	cmp	r3, #10
 8000744:	d90b      	bls.n	800075e <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000746:	687b      	ldr	r3, [r7, #4]
 8000748:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800074a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800074e:	687b      	ldr	r3, [r7, #4]
 8000750:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000752:	687b      	ldr	r3, [r7, #4]
 8000754:	2205      	movs	r2, #5
 8000756:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800075a:	2301      	movs	r3, #1
 800075c:	e0c5      	b.n	80008ea <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800075e:	687b      	ldr	r3, [r7, #4]
 8000760:	681b      	ldr	r3, [r3, #0]
 8000762:	685b      	ldr	r3, [r3, #4]
 8000764:	f003 0301 	and.w	r3, r3, #1
 8000768:	2b00      	cmp	r3, #0
 800076a:	d0e5      	beq.n	8000738 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 800076c:	687b      	ldr	r3, [r7, #4]
 800076e:	681b      	ldr	r3, [r3, #0]
 8000770:	681a      	ldr	r2, [r3, #0]
 8000772:	687b      	ldr	r3, [r7, #4]
 8000774:	681b      	ldr	r3, [r3, #0]
 8000776:	f022 0202 	bic.w	r2, r2, #2
 800077a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800077c:	f7ff ffb2 	bl	80006e4 <HAL_GetTick>
 8000780:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000782:	e012      	b.n	80007aa <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000784:	f7ff ffae 	bl	80006e4 <HAL_GetTick>
 8000788:	4602      	mov	r2, r0
 800078a:	68fb      	ldr	r3, [r7, #12]
 800078c:	1ad3      	subs	r3, r2, r3
 800078e:	2b0a      	cmp	r3, #10
 8000790:	d90b      	bls.n	80007aa <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000792:	687b      	ldr	r3, [r7, #4]
 8000794:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000796:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800079a:	687b      	ldr	r3, [r7, #4]
 800079c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800079e:	687b      	ldr	r3, [r7, #4]
 80007a0:	2205      	movs	r2, #5
 80007a2:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80007a6:	2301      	movs	r3, #1
 80007a8:	e09f      	b.n	80008ea <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80007aa:	687b      	ldr	r3, [r7, #4]
 80007ac:	681b      	ldr	r3, [r3, #0]
 80007ae:	685b      	ldr	r3, [r3, #4]
 80007b0:	f003 0302 	and.w	r3, r3, #2
 80007b4:	2b00      	cmp	r3, #0
 80007b6:	d1e5      	bne.n	8000784 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80007b8:	687b      	ldr	r3, [r7, #4]
 80007ba:	7e1b      	ldrb	r3, [r3, #24]
 80007bc:	2b01      	cmp	r3, #1
 80007be:	d108      	bne.n	80007d2 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80007c0:	687b      	ldr	r3, [r7, #4]
 80007c2:	681b      	ldr	r3, [r3, #0]
 80007c4:	681a      	ldr	r2, [r3, #0]
 80007c6:	687b      	ldr	r3, [r7, #4]
 80007c8:	681b      	ldr	r3, [r3, #0]
 80007ca:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80007ce:	601a      	str	r2, [r3, #0]
 80007d0:	e007      	b.n	80007e2 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80007d2:	687b      	ldr	r3, [r7, #4]
 80007d4:	681b      	ldr	r3, [r3, #0]
 80007d6:	681a      	ldr	r2, [r3, #0]
 80007d8:	687b      	ldr	r3, [r7, #4]
 80007da:	681b      	ldr	r3, [r3, #0]
 80007dc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80007e0:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80007e2:	687b      	ldr	r3, [r7, #4]
 80007e4:	7e5b      	ldrb	r3, [r3, #25]
 80007e6:	2b01      	cmp	r3, #1
 80007e8:	d108      	bne.n	80007fc <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80007ea:	687b      	ldr	r3, [r7, #4]
 80007ec:	681b      	ldr	r3, [r3, #0]
 80007ee:	681a      	ldr	r2, [r3, #0]
 80007f0:	687b      	ldr	r3, [r7, #4]
 80007f2:	681b      	ldr	r3, [r3, #0]
 80007f4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80007f8:	601a      	str	r2, [r3, #0]
 80007fa:	e007      	b.n	800080c <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80007fc:	687b      	ldr	r3, [r7, #4]
 80007fe:	681b      	ldr	r3, [r3, #0]
 8000800:	681a      	ldr	r2, [r3, #0]
 8000802:	687b      	ldr	r3, [r7, #4]
 8000804:	681b      	ldr	r3, [r3, #0]
 8000806:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800080a:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 800080c:	687b      	ldr	r3, [r7, #4]
 800080e:	7e9b      	ldrb	r3, [r3, #26]
 8000810:	2b01      	cmp	r3, #1
 8000812:	d108      	bne.n	8000826 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000814:	687b      	ldr	r3, [r7, #4]
 8000816:	681b      	ldr	r3, [r3, #0]
 8000818:	681a      	ldr	r2, [r3, #0]
 800081a:	687b      	ldr	r3, [r7, #4]
 800081c:	681b      	ldr	r3, [r3, #0]
 800081e:	f042 0220 	orr.w	r2, r2, #32
 8000822:	601a      	str	r2, [r3, #0]
 8000824:	e007      	b.n	8000836 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000826:	687b      	ldr	r3, [r7, #4]
 8000828:	681b      	ldr	r3, [r3, #0]
 800082a:	681a      	ldr	r2, [r3, #0]
 800082c:	687b      	ldr	r3, [r7, #4]
 800082e:	681b      	ldr	r3, [r3, #0]
 8000830:	f022 0220 	bic.w	r2, r2, #32
 8000834:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8000836:	687b      	ldr	r3, [r7, #4]
 8000838:	7edb      	ldrb	r3, [r3, #27]
 800083a:	2b01      	cmp	r3, #1
 800083c:	d108      	bne.n	8000850 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800083e:	687b      	ldr	r3, [r7, #4]
 8000840:	681b      	ldr	r3, [r3, #0]
 8000842:	681a      	ldr	r2, [r3, #0]
 8000844:	687b      	ldr	r3, [r7, #4]
 8000846:	681b      	ldr	r3, [r3, #0]
 8000848:	f022 0210 	bic.w	r2, r2, #16
 800084c:	601a      	str	r2, [r3, #0]
 800084e:	e007      	b.n	8000860 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000850:	687b      	ldr	r3, [r7, #4]
 8000852:	681b      	ldr	r3, [r3, #0]
 8000854:	681a      	ldr	r2, [r3, #0]
 8000856:	687b      	ldr	r3, [r7, #4]
 8000858:	681b      	ldr	r3, [r3, #0]
 800085a:	f042 0210 	orr.w	r2, r2, #16
 800085e:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8000860:	687b      	ldr	r3, [r7, #4]
 8000862:	7f1b      	ldrb	r3, [r3, #28]
 8000864:	2b01      	cmp	r3, #1
 8000866:	d108      	bne.n	800087a <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000868:	687b      	ldr	r3, [r7, #4]
 800086a:	681b      	ldr	r3, [r3, #0]
 800086c:	681a      	ldr	r2, [r3, #0]
 800086e:	687b      	ldr	r3, [r7, #4]
 8000870:	681b      	ldr	r3, [r3, #0]
 8000872:	f042 0208 	orr.w	r2, r2, #8
 8000876:	601a      	str	r2, [r3, #0]
 8000878:	e007      	b.n	800088a <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800087a:	687b      	ldr	r3, [r7, #4]
 800087c:	681b      	ldr	r3, [r3, #0]
 800087e:	681a      	ldr	r2, [r3, #0]
 8000880:	687b      	ldr	r3, [r7, #4]
 8000882:	681b      	ldr	r3, [r3, #0]
 8000884:	f022 0208 	bic.w	r2, r2, #8
 8000888:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800088a:	687b      	ldr	r3, [r7, #4]
 800088c:	7f5b      	ldrb	r3, [r3, #29]
 800088e:	2b01      	cmp	r3, #1
 8000890:	d108      	bne.n	80008a4 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000892:	687b      	ldr	r3, [r7, #4]
 8000894:	681b      	ldr	r3, [r3, #0]
 8000896:	681a      	ldr	r2, [r3, #0]
 8000898:	687b      	ldr	r3, [r7, #4]
 800089a:	681b      	ldr	r3, [r3, #0]
 800089c:	f042 0204 	orr.w	r2, r2, #4
 80008a0:	601a      	str	r2, [r3, #0]
 80008a2:	e007      	b.n	80008b4 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80008a4:	687b      	ldr	r3, [r7, #4]
 80008a6:	681b      	ldr	r3, [r3, #0]
 80008a8:	681a      	ldr	r2, [r3, #0]
 80008aa:	687b      	ldr	r3, [r7, #4]
 80008ac:	681b      	ldr	r3, [r3, #0]
 80008ae:	f022 0204 	bic.w	r2, r2, #4
 80008b2:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80008b4:	687b      	ldr	r3, [r7, #4]
 80008b6:	689a      	ldr	r2, [r3, #8]
 80008b8:	687b      	ldr	r3, [r7, #4]
 80008ba:	68db      	ldr	r3, [r3, #12]
 80008bc:	431a      	orrs	r2, r3
 80008be:	687b      	ldr	r3, [r7, #4]
 80008c0:	691b      	ldr	r3, [r3, #16]
 80008c2:	431a      	orrs	r2, r3
 80008c4:	687b      	ldr	r3, [r7, #4]
 80008c6:	695b      	ldr	r3, [r3, #20]
 80008c8:	ea42 0103 	orr.w	r1, r2, r3
 80008cc:	687b      	ldr	r3, [r7, #4]
 80008ce:	685b      	ldr	r3, [r3, #4]
 80008d0:	1e5a      	subs	r2, r3, #1
 80008d2:	687b      	ldr	r3, [r7, #4]
 80008d4:	681b      	ldr	r3, [r3, #0]
 80008d6:	430a      	orrs	r2, r1
 80008d8:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80008da:	687b      	ldr	r3, [r7, #4]
 80008dc:	2200      	movs	r2, #0
 80008de:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80008e0:	687b      	ldr	r3, [r7, #4]
 80008e2:	2201      	movs	r2, #1
 80008e4:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80008e8:	2300      	movs	r3, #0
}
 80008ea:	4618      	mov	r0, r3
 80008ec:	3710      	adds	r7, #16
 80008ee:	46bd      	mov	sp, r7
 80008f0:	bd80      	pop	{r7, pc}
	...

080008f4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80008f4:	b480      	push	{r7}
 80008f6:	b085      	sub	sp, #20
 80008f8:	af00      	add	r7, sp, #0
 80008fa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80008fc:	687b      	ldr	r3, [r7, #4]
 80008fe:	f003 0307 	and.w	r3, r3, #7
 8000902:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000904:	4b0c      	ldr	r3, [pc, #48]	; (8000938 <__NVIC_SetPriorityGrouping+0x44>)
 8000906:	68db      	ldr	r3, [r3, #12]
 8000908:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800090a:	68ba      	ldr	r2, [r7, #8]
 800090c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000910:	4013      	ands	r3, r2
 8000912:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000914:	68fb      	ldr	r3, [r7, #12]
 8000916:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000918:	68bb      	ldr	r3, [r7, #8]
 800091a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800091c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000920:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000924:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000926:	4a04      	ldr	r2, [pc, #16]	; (8000938 <__NVIC_SetPriorityGrouping+0x44>)
 8000928:	68bb      	ldr	r3, [r7, #8]
 800092a:	60d3      	str	r3, [r2, #12]
}
 800092c:	bf00      	nop
 800092e:	3714      	adds	r7, #20
 8000930:	46bd      	mov	sp, r7
 8000932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000936:	4770      	bx	lr
 8000938:	e000ed00 	.word	0xe000ed00

0800093c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800093c:	b480      	push	{r7}
 800093e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000940:	4b04      	ldr	r3, [pc, #16]	; (8000954 <__NVIC_GetPriorityGrouping+0x18>)
 8000942:	68db      	ldr	r3, [r3, #12]
 8000944:	0a1b      	lsrs	r3, r3, #8
 8000946:	f003 0307 	and.w	r3, r3, #7
}
 800094a:	4618      	mov	r0, r3
 800094c:	46bd      	mov	sp, r7
 800094e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000952:	4770      	bx	lr
 8000954:	e000ed00 	.word	0xe000ed00

08000958 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000958:	b480      	push	{r7}
 800095a:	b083      	sub	sp, #12
 800095c:	af00      	add	r7, sp, #0
 800095e:	4603      	mov	r3, r0
 8000960:	6039      	str	r1, [r7, #0]
 8000962:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000964:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000968:	2b00      	cmp	r3, #0
 800096a:	db0a      	blt.n	8000982 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800096c:	683b      	ldr	r3, [r7, #0]
 800096e:	b2da      	uxtb	r2, r3
 8000970:	490c      	ldr	r1, [pc, #48]	; (80009a4 <__NVIC_SetPriority+0x4c>)
 8000972:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000976:	0112      	lsls	r2, r2, #4
 8000978:	b2d2      	uxtb	r2, r2
 800097a:	440b      	add	r3, r1
 800097c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000980:	e00a      	b.n	8000998 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000982:	683b      	ldr	r3, [r7, #0]
 8000984:	b2da      	uxtb	r2, r3
 8000986:	4908      	ldr	r1, [pc, #32]	; (80009a8 <__NVIC_SetPriority+0x50>)
 8000988:	79fb      	ldrb	r3, [r7, #7]
 800098a:	f003 030f 	and.w	r3, r3, #15
 800098e:	3b04      	subs	r3, #4
 8000990:	0112      	lsls	r2, r2, #4
 8000992:	b2d2      	uxtb	r2, r2
 8000994:	440b      	add	r3, r1
 8000996:	761a      	strb	r2, [r3, #24]
}
 8000998:	bf00      	nop
 800099a:	370c      	adds	r7, #12
 800099c:	46bd      	mov	sp, r7
 800099e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a2:	4770      	bx	lr
 80009a4:	e000e100 	.word	0xe000e100
 80009a8:	e000ed00 	.word	0xe000ed00

080009ac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80009ac:	b480      	push	{r7}
 80009ae:	b089      	sub	sp, #36	; 0x24
 80009b0:	af00      	add	r7, sp, #0
 80009b2:	60f8      	str	r0, [r7, #12]
 80009b4:	60b9      	str	r1, [r7, #8]
 80009b6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80009b8:	68fb      	ldr	r3, [r7, #12]
 80009ba:	f003 0307 	and.w	r3, r3, #7
 80009be:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80009c0:	69fb      	ldr	r3, [r7, #28]
 80009c2:	f1c3 0307 	rsb	r3, r3, #7
 80009c6:	2b04      	cmp	r3, #4
 80009c8:	bf28      	it	cs
 80009ca:	2304      	movcs	r3, #4
 80009cc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80009ce:	69fb      	ldr	r3, [r7, #28]
 80009d0:	3304      	adds	r3, #4
 80009d2:	2b06      	cmp	r3, #6
 80009d4:	d902      	bls.n	80009dc <NVIC_EncodePriority+0x30>
 80009d6:	69fb      	ldr	r3, [r7, #28]
 80009d8:	3b03      	subs	r3, #3
 80009da:	e000      	b.n	80009de <NVIC_EncodePriority+0x32>
 80009dc:	2300      	movs	r3, #0
 80009de:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80009e0:	f04f 32ff 	mov.w	r2, #4294967295
 80009e4:	69bb      	ldr	r3, [r7, #24]
 80009e6:	fa02 f303 	lsl.w	r3, r2, r3
 80009ea:	43da      	mvns	r2, r3
 80009ec:	68bb      	ldr	r3, [r7, #8]
 80009ee:	401a      	ands	r2, r3
 80009f0:	697b      	ldr	r3, [r7, #20]
 80009f2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80009f4:	f04f 31ff 	mov.w	r1, #4294967295
 80009f8:	697b      	ldr	r3, [r7, #20]
 80009fa:	fa01 f303 	lsl.w	r3, r1, r3
 80009fe:	43d9      	mvns	r1, r3
 8000a00:	687b      	ldr	r3, [r7, #4]
 8000a02:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a04:	4313      	orrs	r3, r2
         );
}
 8000a06:	4618      	mov	r0, r3
 8000a08:	3724      	adds	r7, #36	; 0x24
 8000a0a:	46bd      	mov	sp, r7
 8000a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a10:	4770      	bx	lr
	...

08000a14 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000a14:	b580      	push	{r7, lr}
 8000a16:	b082      	sub	sp, #8
 8000a18:	af00      	add	r7, sp, #0
 8000a1a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000a1c:	687b      	ldr	r3, [r7, #4]
 8000a1e:	3b01      	subs	r3, #1
 8000a20:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000a24:	d301      	bcc.n	8000a2a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000a26:	2301      	movs	r3, #1
 8000a28:	e00f      	b.n	8000a4a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000a2a:	4a0a      	ldr	r2, [pc, #40]	; (8000a54 <SysTick_Config+0x40>)
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	3b01      	subs	r3, #1
 8000a30:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000a32:	210f      	movs	r1, #15
 8000a34:	f04f 30ff 	mov.w	r0, #4294967295
 8000a38:	f7ff ff8e 	bl	8000958 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000a3c:	4b05      	ldr	r3, [pc, #20]	; (8000a54 <SysTick_Config+0x40>)
 8000a3e:	2200      	movs	r2, #0
 8000a40:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000a42:	4b04      	ldr	r3, [pc, #16]	; (8000a54 <SysTick_Config+0x40>)
 8000a44:	2207      	movs	r2, #7
 8000a46:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000a48:	2300      	movs	r3, #0
}
 8000a4a:	4618      	mov	r0, r3
 8000a4c:	3708      	adds	r7, #8
 8000a4e:	46bd      	mov	sp, r7
 8000a50:	bd80      	pop	{r7, pc}
 8000a52:	bf00      	nop
 8000a54:	e000e010 	.word	0xe000e010

08000a58 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a58:	b580      	push	{r7, lr}
 8000a5a:	b082      	sub	sp, #8
 8000a5c:	af00      	add	r7, sp, #0
 8000a5e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000a60:	6878      	ldr	r0, [r7, #4]
 8000a62:	f7ff ff47 	bl	80008f4 <__NVIC_SetPriorityGrouping>
}
 8000a66:	bf00      	nop
 8000a68:	3708      	adds	r7, #8
 8000a6a:	46bd      	mov	sp, r7
 8000a6c:	bd80      	pop	{r7, pc}

08000a6e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a6e:	b580      	push	{r7, lr}
 8000a70:	b086      	sub	sp, #24
 8000a72:	af00      	add	r7, sp, #0
 8000a74:	4603      	mov	r3, r0
 8000a76:	60b9      	str	r1, [r7, #8]
 8000a78:	607a      	str	r2, [r7, #4]
 8000a7a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000a7c:	2300      	movs	r3, #0
 8000a7e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000a80:	f7ff ff5c 	bl	800093c <__NVIC_GetPriorityGrouping>
 8000a84:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000a86:	687a      	ldr	r2, [r7, #4]
 8000a88:	68b9      	ldr	r1, [r7, #8]
 8000a8a:	6978      	ldr	r0, [r7, #20]
 8000a8c:	f7ff ff8e 	bl	80009ac <NVIC_EncodePriority>
 8000a90:	4602      	mov	r2, r0
 8000a92:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000a96:	4611      	mov	r1, r2
 8000a98:	4618      	mov	r0, r3
 8000a9a:	f7ff ff5d 	bl	8000958 <__NVIC_SetPriority>
}
 8000a9e:	bf00      	nop
 8000aa0:	3718      	adds	r7, #24
 8000aa2:	46bd      	mov	sp, r7
 8000aa4:	bd80      	pop	{r7, pc}

08000aa6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000aa6:	b580      	push	{r7, lr}
 8000aa8:	b082      	sub	sp, #8
 8000aaa:	af00      	add	r7, sp, #0
 8000aac:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000aae:	6878      	ldr	r0, [r7, #4]
 8000ab0:	f7ff ffb0 	bl	8000a14 <SysTick_Config>
 8000ab4:	4603      	mov	r3, r0
}
 8000ab6:	4618      	mov	r0, r3
 8000ab8:	3708      	adds	r7, #8
 8000aba:	46bd      	mov	sp, r7
 8000abc:	bd80      	pop	{r7, pc}
	...

08000ac0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ac0:	b480      	push	{r7}
 8000ac2:	b087      	sub	sp, #28
 8000ac4:	af00      	add	r7, sp, #0
 8000ac6:	6078      	str	r0, [r7, #4]
 8000ac8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000aca:	2300      	movs	r3, #0
 8000acc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000ace:	e160      	b.n	8000d92 <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000ad0:	683b      	ldr	r3, [r7, #0]
 8000ad2:	681a      	ldr	r2, [r3, #0]
 8000ad4:	2101      	movs	r1, #1
 8000ad6:	697b      	ldr	r3, [r7, #20]
 8000ad8:	fa01 f303 	lsl.w	r3, r1, r3
 8000adc:	4013      	ands	r3, r2
 8000ade:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000ae0:	68fb      	ldr	r3, [r7, #12]
 8000ae2:	2b00      	cmp	r3, #0
 8000ae4:	f000 8152 	beq.w	8000d8c <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000ae8:	683b      	ldr	r3, [r7, #0]
 8000aea:	685b      	ldr	r3, [r3, #4]
 8000aec:	f003 0303 	and.w	r3, r3, #3
 8000af0:	2b01      	cmp	r3, #1
 8000af2:	d005      	beq.n	8000b00 <HAL_GPIO_Init+0x40>
 8000af4:	683b      	ldr	r3, [r7, #0]
 8000af6:	685b      	ldr	r3, [r3, #4]
 8000af8:	f003 0303 	and.w	r3, r3, #3
 8000afc:	2b02      	cmp	r3, #2
 8000afe:	d130      	bne.n	8000b62 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	689b      	ldr	r3, [r3, #8]
 8000b04:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000b06:	697b      	ldr	r3, [r7, #20]
 8000b08:	005b      	lsls	r3, r3, #1
 8000b0a:	2203      	movs	r2, #3
 8000b0c:	fa02 f303 	lsl.w	r3, r2, r3
 8000b10:	43db      	mvns	r3, r3
 8000b12:	693a      	ldr	r2, [r7, #16]
 8000b14:	4013      	ands	r3, r2
 8000b16:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000b18:	683b      	ldr	r3, [r7, #0]
 8000b1a:	68da      	ldr	r2, [r3, #12]
 8000b1c:	697b      	ldr	r3, [r7, #20]
 8000b1e:	005b      	lsls	r3, r3, #1
 8000b20:	fa02 f303 	lsl.w	r3, r2, r3
 8000b24:	693a      	ldr	r2, [r7, #16]
 8000b26:	4313      	orrs	r3, r2
 8000b28:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	693a      	ldr	r2, [r7, #16]
 8000b2e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	685b      	ldr	r3, [r3, #4]
 8000b34:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000b36:	2201      	movs	r2, #1
 8000b38:	697b      	ldr	r3, [r7, #20]
 8000b3a:	fa02 f303 	lsl.w	r3, r2, r3
 8000b3e:	43db      	mvns	r3, r3
 8000b40:	693a      	ldr	r2, [r7, #16]
 8000b42:	4013      	ands	r3, r2
 8000b44:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000b46:	683b      	ldr	r3, [r7, #0]
 8000b48:	685b      	ldr	r3, [r3, #4]
 8000b4a:	091b      	lsrs	r3, r3, #4
 8000b4c:	f003 0201 	and.w	r2, r3, #1
 8000b50:	697b      	ldr	r3, [r7, #20]
 8000b52:	fa02 f303 	lsl.w	r3, r2, r3
 8000b56:	693a      	ldr	r2, [r7, #16]
 8000b58:	4313      	orrs	r3, r2
 8000b5a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	693a      	ldr	r2, [r7, #16]
 8000b60:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000b62:	683b      	ldr	r3, [r7, #0]
 8000b64:	685b      	ldr	r3, [r3, #4]
 8000b66:	f003 0303 	and.w	r3, r3, #3
 8000b6a:	2b03      	cmp	r3, #3
 8000b6c:	d017      	beq.n	8000b9e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	68db      	ldr	r3, [r3, #12]
 8000b72:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000b74:	697b      	ldr	r3, [r7, #20]
 8000b76:	005b      	lsls	r3, r3, #1
 8000b78:	2203      	movs	r2, #3
 8000b7a:	fa02 f303 	lsl.w	r3, r2, r3
 8000b7e:	43db      	mvns	r3, r3
 8000b80:	693a      	ldr	r2, [r7, #16]
 8000b82:	4013      	ands	r3, r2
 8000b84:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000b86:	683b      	ldr	r3, [r7, #0]
 8000b88:	689a      	ldr	r2, [r3, #8]
 8000b8a:	697b      	ldr	r3, [r7, #20]
 8000b8c:	005b      	lsls	r3, r3, #1
 8000b8e:	fa02 f303 	lsl.w	r3, r2, r3
 8000b92:	693a      	ldr	r2, [r7, #16]
 8000b94:	4313      	orrs	r3, r2
 8000b96:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	693a      	ldr	r2, [r7, #16]
 8000b9c:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000b9e:	683b      	ldr	r3, [r7, #0]
 8000ba0:	685b      	ldr	r3, [r3, #4]
 8000ba2:	f003 0303 	and.w	r3, r3, #3
 8000ba6:	2b02      	cmp	r3, #2
 8000ba8:	d123      	bne.n	8000bf2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000baa:	697b      	ldr	r3, [r7, #20]
 8000bac:	08da      	lsrs	r2, r3, #3
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	3208      	adds	r2, #8
 8000bb2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000bb6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000bb8:	697b      	ldr	r3, [r7, #20]
 8000bba:	f003 0307 	and.w	r3, r3, #7
 8000bbe:	009b      	lsls	r3, r3, #2
 8000bc0:	220f      	movs	r2, #15
 8000bc2:	fa02 f303 	lsl.w	r3, r2, r3
 8000bc6:	43db      	mvns	r3, r3
 8000bc8:	693a      	ldr	r2, [r7, #16]
 8000bca:	4013      	ands	r3, r2
 8000bcc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000bce:	683b      	ldr	r3, [r7, #0]
 8000bd0:	691a      	ldr	r2, [r3, #16]
 8000bd2:	697b      	ldr	r3, [r7, #20]
 8000bd4:	f003 0307 	and.w	r3, r3, #7
 8000bd8:	009b      	lsls	r3, r3, #2
 8000bda:	fa02 f303 	lsl.w	r3, r2, r3
 8000bde:	693a      	ldr	r2, [r7, #16]
 8000be0:	4313      	orrs	r3, r2
 8000be2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000be4:	697b      	ldr	r3, [r7, #20]
 8000be6:	08da      	lsrs	r2, r3, #3
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	3208      	adds	r2, #8
 8000bec:	6939      	ldr	r1, [r7, #16]
 8000bee:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	681b      	ldr	r3, [r3, #0]
 8000bf6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000bf8:	697b      	ldr	r3, [r7, #20]
 8000bfa:	005b      	lsls	r3, r3, #1
 8000bfc:	2203      	movs	r2, #3
 8000bfe:	fa02 f303 	lsl.w	r3, r2, r3
 8000c02:	43db      	mvns	r3, r3
 8000c04:	693a      	ldr	r2, [r7, #16]
 8000c06:	4013      	ands	r3, r2
 8000c08:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000c0a:	683b      	ldr	r3, [r7, #0]
 8000c0c:	685b      	ldr	r3, [r3, #4]
 8000c0e:	f003 0203 	and.w	r2, r3, #3
 8000c12:	697b      	ldr	r3, [r7, #20]
 8000c14:	005b      	lsls	r3, r3, #1
 8000c16:	fa02 f303 	lsl.w	r3, r2, r3
 8000c1a:	693a      	ldr	r2, [r7, #16]
 8000c1c:	4313      	orrs	r3, r2
 8000c1e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	693a      	ldr	r2, [r7, #16]
 8000c24:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000c26:	683b      	ldr	r3, [r7, #0]
 8000c28:	685b      	ldr	r3, [r3, #4]
 8000c2a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000c2e:	2b00      	cmp	r3, #0
 8000c30:	f000 80ac 	beq.w	8000d8c <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c34:	4b5e      	ldr	r3, [pc, #376]	; (8000db0 <HAL_GPIO_Init+0x2f0>)
 8000c36:	699b      	ldr	r3, [r3, #24]
 8000c38:	4a5d      	ldr	r2, [pc, #372]	; (8000db0 <HAL_GPIO_Init+0x2f0>)
 8000c3a:	f043 0301 	orr.w	r3, r3, #1
 8000c3e:	6193      	str	r3, [r2, #24]
 8000c40:	4b5b      	ldr	r3, [pc, #364]	; (8000db0 <HAL_GPIO_Init+0x2f0>)
 8000c42:	699b      	ldr	r3, [r3, #24]
 8000c44:	f003 0301 	and.w	r3, r3, #1
 8000c48:	60bb      	str	r3, [r7, #8]
 8000c4a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000c4c:	4a59      	ldr	r2, [pc, #356]	; (8000db4 <HAL_GPIO_Init+0x2f4>)
 8000c4e:	697b      	ldr	r3, [r7, #20]
 8000c50:	089b      	lsrs	r3, r3, #2
 8000c52:	3302      	adds	r3, #2
 8000c54:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c58:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000c5a:	697b      	ldr	r3, [r7, #20]
 8000c5c:	f003 0303 	and.w	r3, r3, #3
 8000c60:	009b      	lsls	r3, r3, #2
 8000c62:	220f      	movs	r2, #15
 8000c64:	fa02 f303 	lsl.w	r3, r2, r3
 8000c68:	43db      	mvns	r3, r3
 8000c6a:	693a      	ldr	r2, [r7, #16]
 8000c6c:	4013      	ands	r3, r2
 8000c6e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000c76:	d025      	beq.n	8000cc4 <HAL_GPIO_Init+0x204>
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	4a4f      	ldr	r2, [pc, #316]	; (8000db8 <HAL_GPIO_Init+0x2f8>)
 8000c7c:	4293      	cmp	r3, r2
 8000c7e:	d01f      	beq.n	8000cc0 <HAL_GPIO_Init+0x200>
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	4a4e      	ldr	r2, [pc, #312]	; (8000dbc <HAL_GPIO_Init+0x2fc>)
 8000c84:	4293      	cmp	r3, r2
 8000c86:	d019      	beq.n	8000cbc <HAL_GPIO_Init+0x1fc>
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	4a4d      	ldr	r2, [pc, #308]	; (8000dc0 <HAL_GPIO_Init+0x300>)
 8000c8c:	4293      	cmp	r3, r2
 8000c8e:	d013      	beq.n	8000cb8 <HAL_GPIO_Init+0x1f8>
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	4a4c      	ldr	r2, [pc, #304]	; (8000dc4 <HAL_GPIO_Init+0x304>)
 8000c94:	4293      	cmp	r3, r2
 8000c96:	d00d      	beq.n	8000cb4 <HAL_GPIO_Init+0x1f4>
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	4a4b      	ldr	r2, [pc, #300]	; (8000dc8 <HAL_GPIO_Init+0x308>)
 8000c9c:	4293      	cmp	r3, r2
 8000c9e:	d007      	beq.n	8000cb0 <HAL_GPIO_Init+0x1f0>
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	4a4a      	ldr	r2, [pc, #296]	; (8000dcc <HAL_GPIO_Init+0x30c>)
 8000ca4:	4293      	cmp	r3, r2
 8000ca6:	d101      	bne.n	8000cac <HAL_GPIO_Init+0x1ec>
 8000ca8:	2306      	movs	r3, #6
 8000caa:	e00c      	b.n	8000cc6 <HAL_GPIO_Init+0x206>
 8000cac:	2307      	movs	r3, #7
 8000cae:	e00a      	b.n	8000cc6 <HAL_GPIO_Init+0x206>
 8000cb0:	2305      	movs	r3, #5
 8000cb2:	e008      	b.n	8000cc6 <HAL_GPIO_Init+0x206>
 8000cb4:	2304      	movs	r3, #4
 8000cb6:	e006      	b.n	8000cc6 <HAL_GPIO_Init+0x206>
 8000cb8:	2303      	movs	r3, #3
 8000cba:	e004      	b.n	8000cc6 <HAL_GPIO_Init+0x206>
 8000cbc:	2302      	movs	r3, #2
 8000cbe:	e002      	b.n	8000cc6 <HAL_GPIO_Init+0x206>
 8000cc0:	2301      	movs	r3, #1
 8000cc2:	e000      	b.n	8000cc6 <HAL_GPIO_Init+0x206>
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	697a      	ldr	r2, [r7, #20]
 8000cc8:	f002 0203 	and.w	r2, r2, #3
 8000ccc:	0092      	lsls	r2, r2, #2
 8000cce:	4093      	lsls	r3, r2
 8000cd0:	693a      	ldr	r2, [r7, #16]
 8000cd2:	4313      	orrs	r3, r2
 8000cd4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000cd6:	4937      	ldr	r1, [pc, #220]	; (8000db4 <HAL_GPIO_Init+0x2f4>)
 8000cd8:	697b      	ldr	r3, [r7, #20]
 8000cda:	089b      	lsrs	r3, r3, #2
 8000cdc:	3302      	adds	r3, #2
 8000cde:	693a      	ldr	r2, [r7, #16]
 8000ce0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000ce4:	4b3a      	ldr	r3, [pc, #232]	; (8000dd0 <HAL_GPIO_Init+0x310>)
 8000ce6:	689b      	ldr	r3, [r3, #8]
 8000ce8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000cea:	68fb      	ldr	r3, [r7, #12]
 8000cec:	43db      	mvns	r3, r3
 8000cee:	693a      	ldr	r2, [r7, #16]
 8000cf0:	4013      	ands	r3, r2
 8000cf2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000cf4:	683b      	ldr	r3, [r7, #0]
 8000cf6:	685b      	ldr	r3, [r3, #4]
 8000cf8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000cfc:	2b00      	cmp	r3, #0
 8000cfe:	d003      	beq.n	8000d08 <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 8000d00:	693a      	ldr	r2, [r7, #16]
 8000d02:	68fb      	ldr	r3, [r7, #12]
 8000d04:	4313      	orrs	r3, r2
 8000d06:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000d08:	4a31      	ldr	r2, [pc, #196]	; (8000dd0 <HAL_GPIO_Init+0x310>)
 8000d0a:	693b      	ldr	r3, [r7, #16]
 8000d0c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000d0e:	4b30      	ldr	r3, [pc, #192]	; (8000dd0 <HAL_GPIO_Init+0x310>)
 8000d10:	68db      	ldr	r3, [r3, #12]
 8000d12:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000d14:	68fb      	ldr	r3, [r7, #12]
 8000d16:	43db      	mvns	r3, r3
 8000d18:	693a      	ldr	r2, [r7, #16]
 8000d1a:	4013      	ands	r3, r2
 8000d1c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000d1e:	683b      	ldr	r3, [r7, #0]
 8000d20:	685b      	ldr	r3, [r3, #4]
 8000d22:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000d26:	2b00      	cmp	r3, #0
 8000d28:	d003      	beq.n	8000d32 <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 8000d2a:	693a      	ldr	r2, [r7, #16]
 8000d2c:	68fb      	ldr	r3, [r7, #12]
 8000d2e:	4313      	orrs	r3, r2
 8000d30:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000d32:	4a27      	ldr	r2, [pc, #156]	; (8000dd0 <HAL_GPIO_Init+0x310>)
 8000d34:	693b      	ldr	r3, [r7, #16]
 8000d36:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000d38:	4b25      	ldr	r3, [pc, #148]	; (8000dd0 <HAL_GPIO_Init+0x310>)
 8000d3a:	685b      	ldr	r3, [r3, #4]
 8000d3c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000d3e:	68fb      	ldr	r3, [r7, #12]
 8000d40:	43db      	mvns	r3, r3
 8000d42:	693a      	ldr	r2, [r7, #16]
 8000d44:	4013      	ands	r3, r2
 8000d46:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000d48:	683b      	ldr	r3, [r7, #0]
 8000d4a:	685b      	ldr	r3, [r3, #4]
 8000d4c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	d003      	beq.n	8000d5c <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8000d54:	693a      	ldr	r2, [r7, #16]
 8000d56:	68fb      	ldr	r3, [r7, #12]
 8000d58:	4313      	orrs	r3, r2
 8000d5a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000d5c:	4a1c      	ldr	r2, [pc, #112]	; (8000dd0 <HAL_GPIO_Init+0x310>)
 8000d5e:	693b      	ldr	r3, [r7, #16]
 8000d60:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000d62:	4b1b      	ldr	r3, [pc, #108]	; (8000dd0 <HAL_GPIO_Init+0x310>)
 8000d64:	681b      	ldr	r3, [r3, #0]
 8000d66:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000d68:	68fb      	ldr	r3, [r7, #12]
 8000d6a:	43db      	mvns	r3, r3
 8000d6c:	693a      	ldr	r2, [r7, #16]
 8000d6e:	4013      	ands	r3, r2
 8000d70:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000d72:	683b      	ldr	r3, [r7, #0]
 8000d74:	685b      	ldr	r3, [r3, #4]
 8000d76:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000d7a:	2b00      	cmp	r3, #0
 8000d7c:	d003      	beq.n	8000d86 <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 8000d7e:	693a      	ldr	r2, [r7, #16]
 8000d80:	68fb      	ldr	r3, [r7, #12]
 8000d82:	4313      	orrs	r3, r2
 8000d84:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000d86:	4a12      	ldr	r2, [pc, #72]	; (8000dd0 <HAL_GPIO_Init+0x310>)
 8000d88:	693b      	ldr	r3, [r7, #16]
 8000d8a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8000d8c:	697b      	ldr	r3, [r7, #20]
 8000d8e:	3301      	adds	r3, #1
 8000d90:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000d92:	683b      	ldr	r3, [r7, #0]
 8000d94:	681a      	ldr	r2, [r3, #0]
 8000d96:	697b      	ldr	r3, [r7, #20]
 8000d98:	fa22 f303 	lsr.w	r3, r2, r3
 8000d9c:	2b00      	cmp	r3, #0
 8000d9e:	f47f ae97 	bne.w	8000ad0 <HAL_GPIO_Init+0x10>
  }
}
 8000da2:	bf00      	nop
 8000da4:	bf00      	nop
 8000da6:	371c      	adds	r7, #28
 8000da8:	46bd      	mov	sp, r7
 8000daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dae:	4770      	bx	lr
 8000db0:	40021000 	.word	0x40021000
 8000db4:	40010000 	.word	0x40010000
 8000db8:	48000400 	.word	0x48000400
 8000dbc:	48000800 	.word	0x48000800
 8000dc0:	48000c00 	.word	0x48000c00
 8000dc4:	48001000 	.word	0x48001000
 8000dc8:	48001400 	.word	0x48001400
 8000dcc:	48001800 	.word	0x48001800
 8000dd0:	40010400 	.word	0x40010400

08000dd4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	b082      	sub	sp, #8
 8000dd8:	af00      	add	r7, sp, #0
 8000dda:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	2b00      	cmp	r3, #0
 8000de0:	d101      	bne.n	8000de6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8000de2:	2301      	movs	r3, #1
 8000de4:	e081      	b.n	8000eea <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8000dec:	b2db      	uxtb	r3, r3
 8000dee:	2b00      	cmp	r3, #0
 8000df0:	d106      	bne.n	8000e00 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	2200      	movs	r2, #0
 8000df6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8000dfa:	6878      	ldr	r0, [r7, #4]
 8000dfc:	f7ff fae4 	bl	80003c8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	2224      	movs	r2, #36	; 0x24
 8000e04:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	681a      	ldr	r2, [r3, #0]
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	681b      	ldr	r3, [r3, #0]
 8000e12:	f022 0201 	bic.w	r2, r2, #1
 8000e16:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	685a      	ldr	r2, [r3, #4]
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8000e24:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	681b      	ldr	r3, [r3, #0]
 8000e2a:	689a      	ldr	r2, [r3, #8]
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8000e34:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	68db      	ldr	r3, [r3, #12]
 8000e3a:	2b01      	cmp	r3, #1
 8000e3c:	d107      	bne.n	8000e4e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	689a      	ldr	r2, [r3, #8]
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	681b      	ldr	r3, [r3, #0]
 8000e46:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8000e4a:	609a      	str	r2, [r3, #8]
 8000e4c:	e006      	b.n	8000e5c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	689a      	ldr	r2, [r3, #8]
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	681b      	ldr	r3, [r3, #0]
 8000e56:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8000e5a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	68db      	ldr	r3, [r3, #12]
 8000e60:	2b02      	cmp	r3, #2
 8000e62:	d104      	bne.n	8000e6e <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000e6c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	681b      	ldr	r3, [r3, #0]
 8000e72:	685b      	ldr	r3, [r3, #4]
 8000e74:	687a      	ldr	r2, [r7, #4]
 8000e76:	6812      	ldr	r2, [r2, #0]
 8000e78:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000e7c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000e80:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	68da      	ldr	r2, [r3, #12]
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8000e90:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	691a      	ldr	r2, [r3, #16]
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	695b      	ldr	r3, [r3, #20]
 8000e9a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	699b      	ldr	r3, [r3, #24]
 8000ea2:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	430a      	orrs	r2, r1
 8000eaa:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	69d9      	ldr	r1, [r3, #28]
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	6a1a      	ldr	r2, [r3, #32]
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	430a      	orrs	r2, r1
 8000eba:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	681a      	ldr	r2, [r3, #0]
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	f042 0201 	orr.w	r2, r2, #1
 8000eca:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	2200      	movs	r2, #0
 8000ed0:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	2220      	movs	r2, #32
 8000ed6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	2200      	movs	r2, #0
 8000ede:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8000ee8:	2300      	movs	r3, #0
}
 8000eea:	4618      	mov	r0, r3
 8000eec:	3708      	adds	r7, #8
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	bd80      	pop	{r7, pc}

08000ef2 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8000ef2:	b480      	push	{r7}
 8000ef4:	b083      	sub	sp, #12
 8000ef6:	af00      	add	r7, sp, #0
 8000ef8:	6078      	str	r0, [r7, #4]
 8000efa:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8000f02:	b2db      	uxtb	r3, r3
 8000f04:	2b20      	cmp	r3, #32
 8000f06:	d138      	bne.n	8000f7a <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8000f0e:	2b01      	cmp	r3, #1
 8000f10:	d101      	bne.n	8000f16 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8000f12:	2302      	movs	r3, #2
 8000f14:	e032      	b.n	8000f7c <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	2201      	movs	r2, #1
 8000f1a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	2224      	movs	r2, #36	; 0x24
 8000f22:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	681b      	ldr	r3, [r3, #0]
 8000f2a:	681a      	ldr	r2, [r3, #0]
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	f022 0201 	bic.w	r2, r2, #1
 8000f34:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	681a      	ldr	r2, [r3, #0]
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8000f44:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	6819      	ldr	r1, [r3, #0]
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	683a      	ldr	r2, [r7, #0]
 8000f52:	430a      	orrs	r2, r1
 8000f54:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	681a      	ldr	r2, [r3, #0]
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	f042 0201 	orr.w	r2, r2, #1
 8000f64:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	2220      	movs	r2, #32
 8000f6a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	2200      	movs	r2, #0
 8000f72:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8000f76:	2300      	movs	r3, #0
 8000f78:	e000      	b.n	8000f7c <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8000f7a:	2302      	movs	r3, #2
  }
}
 8000f7c:	4618      	mov	r0, r3
 8000f7e:	370c      	adds	r7, #12
 8000f80:	46bd      	mov	sp, r7
 8000f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f86:	4770      	bx	lr

08000f88 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8000f88:	b480      	push	{r7}
 8000f8a:	b085      	sub	sp, #20
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	6078      	str	r0, [r7, #4]
 8000f90:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8000f98:	b2db      	uxtb	r3, r3
 8000f9a:	2b20      	cmp	r3, #32
 8000f9c:	d139      	bne.n	8001012 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8000fa4:	2b01      	cmp	r3, #1
 8000fa6:	d101      	bne.n	8000fac <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8000fa8:	2302      	movs	r3, #2
 8000faa:	e033      	b.n	8001014 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	2201      	movs	r2, #1
 8000fb0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	2224      	movs	r2, #36	; 0x24
 8000fb8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	681a      	ldr	r2, [r3, #0]
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	f022 0201 	bic.w	r2, r2, #1
 8000fca:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8000fd4:	68fb      	ldr	r3, [r7, #12]
 8000fd6:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8000fda:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8000fdc:	683b      	ldr	r3, [r7, #0]
 8000fde:	021b      	lsls	r3, r3, #8
 8000fe0:	68fa      	ldr	r2, [r7, #12]
 8000fe2:	4313      	orrs	r3, r2
 8000fe4:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	68fa      	ldr	r2, [r7, #12]
 8000fec:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	681a      	ldr	r2, [r3, #0]
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	f042 0201 	orr.w	r2, r2, #1
 8000ffc:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	2220      	movs	r2, #32
 8001002:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	2200      	movs	r2, #0
 800100a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800100e:	2300      	movs	r3, #0
 8001010:	e000      	b.n	8001014 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001012:	2302      	movs	r3, #2
  }
}
 8001014:	4618      	mov	r0, r3
 8001016:	3714      	adds	r7, #20
 8001018:	46bd      	mov	sp, r7
 800101a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101e:	4770      	bx	lr

08001020 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 8001026:	af00      	add	r7, sp, #0
 8001028:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800102c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001030:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001032:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001036:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	2b00      	cmp	r3, #0
 800103e:	d102      	bne.n	8001046 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8001040:	2301      	movs	r3, #1
 8001042:	f001 b83a 	b.w	80020ba <HAL_RCC_OscConfig+0x109a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001046:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800104a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	f003 0301 	and.w	r3, r3, #1
 8001056:	2b00      	cmp	r3, #0
 8001058:	f000 816f 	beq.w	800133a <HAL_RCC_OscConfig+0x31a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800105c:	4bb5      	ldr	r3, [pc, #724]	; (8001334 <HAL_RCC_OscConfig+0x314>)
 800105e:	685b      	ldr	r3, [r3, #4]
 8001060:	f003 030c 	and.w	r3, r3, #12
 8001064:	2b04      	cmp	r3, #4
 8001066:	d00c      	beq.n	8001082 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001068:	4bb2      	ldr	r3, [pc, #712]	; (8001334 <HAL_RCC_OscConfig+0x314>)
 800106a:	685b      	ldr	r3, [r3, #4]
 800106c:	f003 030c 	and.w	r3, r3, #12
 8001070:	2b08      	cmp	r3, #8
 8001072:	d15c      	bne.n	800112e <HAL_RCC_OscConfig+0x10e>
 8001074:	4baf      	ldr	r3, [pc, #700]	; (8001334 <HAL_RCC_OscConfig+0x314>)
 8001076:	685b      	ldr	r3, [r3, #4]
 8001078:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 800107c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001080:	d155      	bne.n	800112e <HAL_RCC_OscConfig+0x10e>
 8001082:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001086:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800108a:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800108e:	fa93 f3a3 	rbit	r3, r3
 8001092:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001096:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800109a:	fab3 f383 	clz	r3, r3
 800109e:	b2db      	uxtb	r3, r3
 80010a0:	095b      	lsrs	r3, r3, #5
 80010a2:	b2db      	uxtb	r3, r3
 80010a4:	f043 0301 	orr.w	r3, r3, #1
 80010a8:	b2db      	uxtb	r3, r3
 80010aa:	2b01      	cmp	r3, #1
 80010ac:	d102      	bne.n	80010b4 <HAL_RCC_OscConfig+0x94>
 80010ae:	4ba1      	ldr	r3, [pc, #644]	; (8001334 <HAL_RCC_OscConfig+0x314>)
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	e015      	b.n	80010e0 <HAL_RCC_OscConfig+0xc0>
 80010b4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80010b8:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80010bc:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 80010c0:	fa93 f3a3 	rbit	r3, r3
 80010c4:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 80010c8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80010cc:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 80010d0:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 80010d4:	fa93 f3a3 	rbit	r3, r3
 80010d8:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 80010dc:	4b95      	ldr	r3, [pc, #596]	; (8001334 <HAL_RCC_OscConfig+0x314>)
 80010de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010e0:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80010e4:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 80010e8:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 80010ec:	fa92 f2a2 	rbit	r2, r2
 80010f0:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
  return result;
 80010f4:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 80010f8:	fab2 f282 	clz	r2, r2
 80010fc:	b2d2      	uxtb	r2, r2
 80010fe:	f042 0220 	orr.w	r2, r2, #32
 8001102:	b2d2      	uxtb	r2, r2
 8001104:	f002 021f 	and.w	r2, r2, #31
 8001108:	2101      	movs	r1, #1
 800110a:	fa01 f202 	lsl.w	r2, r1, r2
 800110e:	4013      	ands	r3, r2
 8001110:	2b00      	cmp	r3, #0
 8001112:	f000 8111 	beq.w	8001338 <HAL_RCC_OscConfig+0x318>
 8001116:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800111a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	685b      	ldr	r3, [r3, #4]
 8001122:	2b00      	cmp	r3, #0
 8001124:	f040 8108 	bne.w	8001338 <HAL_RCC_OscConfig+0x318>
      {
        return HAL_ERROR;
 8001128:	2301      	movs	r3, #1
 800112a:	f000 bfc6 	b.w	80020ba <HAL_RCC_OscConfig+0x109a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800112e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001132:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	685b      	ldr	r3, [r3, #4]
 800113a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800113e:	d106      	bne.n	800114e <HAL_RCC_OscConfig+0x12e>
 8001140:	4b7c      	ldr	r3, [pc, #496]	; (8001334 <HAL_RCC_OscConfig+0x314>)
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	4a7b      	ldr	r2, [pc, #492]	; (8001334 <HAL_RCC_OscConfig+0x314>)
 8001146:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800114a:	6013      	str	r3, [r2, #0]
 800114c:	e036      	b.n	80011bc <HAL_RCC_OscConfig+0x19c>
 800114e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001152:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	685b      	ldr	r3, [r3, #4]
 800115a:	2b00      	cmp	r3, #0
 800115c:	d10c      	bne.n	8001178 <HAL_RCC_OscConfig+0x158>
 800115e:	4b75      	ldr	r3, [pc, #468]	; (8001334 <HAL_RCC_OscConfig+0x314>)
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	4a74      	ldr	r2, [pc, #464]	; (8001334 <HAL_RCC_OscConfig+0x314>)
 8001164:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001168:	6013      	str	r3, [r2, #0]
 800116a:	4b72      	ldr	r3, [pc, #456]	; (8001334 <HAL_RCC_OscConfig+0x314>)
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	4a71      	ldr	r2, [pc, #452]	; (8001334 <HAL_RCC_OscConfig+0x314>)
 8001170:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001174:	6013      	str	r3, [r2, #0]
 8001176:	e021      	b.n	80011bc <HAL_RCC_OscConfig+0x19c>
 8001178:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800117c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	685b      	ldr	r3, [r3, #4]
 8001184:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001188:	d10c      	bne.n	80011a4 <HAL_RCC_OscConfig+0x184>
 800118a:	4b6a      	ldr	r3, [pc, #424]	; (8001334 <HAL_RCC_OscConfig+0x314>)
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	4a69      	ldr	r2, [pc, #420]	; (8001334 <HAL_RCC_OscConfig+0x314>)
 8001190:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001194:	6013      	str	r3, [r2, #0]
 8001196:	4b67      	ldr	r3, [pc, #412]	; (8001334 <HAL_RCC_OscConfig+0x314>)
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	4a66      	ldr	r2, [pc, #408]	; (8001334 <HAL_RCC_OscConfig+0x314>)
 800119c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80011a0:	6013      	str	r3, [r2, #0]
 80011a2:	e00b      	b.n	80011bc <HAL_RCC_OscConfig+0x19c>
 80011a4:	4b63      	ldr	r3, [pc, #396]	; (8001334 <HAL_RCC_OscConfig+0x314>)
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	4a62      	ldr	r2, [pc, #392]	; (8001334 <HAL_RCC_OscConfig+0x314>)
 80011aa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80011ae:	6013      	str	r3, [r2, #0]
 80011b0:	4b60      	ldr	r3, [pc, #384]	; (8001334 <HAL_RCC_OscConfig+0x314>)
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	4a5f      	ldr	r2, [pc, #380]	; (8001334 <HAL_RCC_OscConfig+0x314>)
 80011b6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80011ba:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80011bc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80011c0:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	685b      	ldr	r3, [r3, #4]
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d059      	beq.n	8001280 <HAL_RCC_OscConfig+0x260>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011cc:	f7ff fa8a 	bl	80006e4 <HAL_GetTick>
 80011d0:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80011d4:	e00a      	b.n	80011ec <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80011d6:	f7ff fa85 	bl	80006e4 <HAL_GetTick>
 80011da:	4602      	mov	r2, r0
 80011dc:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80011e0:	1ad3      	subs	r3, r2, r3
 80011e2:	2b64      	cmp	r3, #100	; 0x64
 80011e4:	d902      	bls.n	80011ec <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 80011e6:	2303      	movs	r3, #3
 80011e8:	f000 bf67 	b.w	80020ba <HAL_RCC_OscConfig+0x109a>
 80011ec:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80011f0:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80011f4:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 80011f8:	fa93 f3a3 	rbit	r3, r3
 80011fc:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
  return result;
 8001200:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001204:	fab3 f383 	clz	r3, r3
 8001208:	b2db      	uxtb	r3, r3
 800120a:	095b      	lsrs	r3, r3, #5
 800120c:	b2db      	uxtb	r3, r3
 800120e:	f043 0301 	orr.w	r3, r3, #1
 8001212:	b2db      	uxtb	r3, r3
 8001214:	2b01      	cmp	r3, #1
 8001216:	d102      	bne.n	800121e <HAL_RCC_OscConfig+0x1fe>
 8001218:	4b46      	ldr	r3, [pc, #280]	; (8001334 <HAL_RCC_OscConfig+0x314>)
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	e015      	b.n	800124a <HAL_RCC_OscConfig+0x22a>
 800121e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001222:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001226:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 800122a:	fa93 f3a3 	rbit	r3, r3
 800122e:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 8001232:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001236:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 800123a:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 800123e:	fa93 f3a3 	rbit	r3, r3
 8001242:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8001246:	4b3b      	ldr	r3, [pc, #236]	; (8001334 <HAL_RCC_OscConfig+0x314>)
 8001248:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800124a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800124e:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
 8001252:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 8001256:	fa92 f2a2 	rbit	r2, r2
 800125a:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
  return result;
 800125e:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8001262:	fab2 f282 	clz	r2, r2
 8001266:	b2d2      	uxtb	r2, r2
 8001268:	f042 0220 	orr.w	r2, r2, #32
 800126c:	b2d2      	uxtb	r2, r2
 800126e:	f002 021f 	and.w	r2, r2, #31
 8001272:	2101      	movs	r1, #1
 8001274:	fa01 f202 	lsl.w	r2, r1, r2
 8001278:	4013      	ands	r3, r2
 800127a:	2b00      	cmp	r3, #0
 800127c:	d0ab      	beq.n	80011d6 <HAL_RCC_OscConfig+0x1b6>
 800127e:	e05c      	b.n	800133a <HAL_RCC_OscConfig+0x31a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001280:	f7ff fa30 	bl	80006e4 <HAL_GetTick>
 8001284:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001288:	e00a      	b.n	80012a0 <HAL_RCC_OscConfig+0x280>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800128a:	f7ff fa2b 	bl	80006e4 <HAL_GetTick>
 800128e:	4602      	mov	r2, r0
 8001290:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001294:	1ad3      	subs	r3, r2, r3
 8001296:	2b64      	cmp	r3, #100	; 0x64
 8001298:	d902      	bls.n	80012a0 <HAL_RCC_OscConfig+0x280>
          {
            return HAL_TIMEOUT;
 800129a:	2303      	movs	r3, #3
 800129c:	f000 bf0d 	b.w	80020ba <HAL_RCC_OscConfig+0x109a>
 80012a0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80012a4:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012a8:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 80012ac:	fa93 f3a3 	rbit	r3, r3
 80012b0:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
  return result;
 80012b4:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80012b8:	fab3 f383 	clz	r3, r3
 80012bc:	b2db      	uxtb	r3, r3
 80012be:	095b      	lsrs	r3, r3, #5
 80012c0:	b2db      	uxtb	r3, r3
 80012c2:	f043 0301 	orr.w	r3, r3, #1
 80012c6:	b2db      	uxtb	r3, r3
 80012c8:	2b01      	cmp	r3, #1
 80012ca:	d102      	bne.n	80012d2 <HAL_RCC_OscConfig+0x2b2>
 80012cc:	4b19      	ldr	r3, [pc, #100]	; (8001334 <HAL_RCC_OscConfig+0x314>)
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	e015      	b.n	80012fe <HAL_RCC_OscConfig+0x2de>
 80012d2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80012d6:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012da:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 80012de:	fa93 f3a3 	rbit	r3, r3
 80012e2:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 80012e6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80012ea:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 80012ee:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80012f2:	fa93 f3a3 	rbit	r3, r3
 80012f6:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 80012fa:	4b0e      	ldr	r3, [pc, #56]	; (8001334 <HAL_RCC_OscConfig+0x314>)
 80012fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012fe:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001302:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 8001306:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 800130a:	fa92 f2a2 	rbit	r2, r2
 800130e:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
  return result;
 8001312:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8001316:	fab2 f282 	clz	r2, r2
 800131a:	b2d2      	uxtb	r2, r2
 800131c:	f042 0220 	orr.w	r2, r2, #32
 8001320:	b2d2      	uxtb	r2, r2
 8001322:	f002 021f 	and.w	r2, r2, #31
 8001326:	2101      	movs	r1, #1
 8001328:	fa01 f202 	lsl.w	r2, r1, r2
 800132c:	4013      	ands	r3, r2
 800132e:	2b00      	cmp	r3, #0
 8001330:	d1ab      	bne.n	800128a <HAL_RCC_OscConfig+0x26a>
 8001332:	e002      	b.n	800133a <HAL_RCC_OscConfig+0x31a>
 8001334:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001338:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800133a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800133e:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	f003 0302 	and.w	r3, r3, #2
 800134a:	2b00      	cmp	r3, #0
 800134c:	f000 817f 	beq.w	800164e <HAL_RCC_OscConfig+0x62e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001350:	4ba7      	ldr	r3, [pc, #668]	; (80015f0 <HAL_RCC_OscConfig+0x5d0>)
 8001352:	685b      	ldr	r3, [r3, #4]
 8001354:	f003 030c 	and.w	r3, r3, #12
 8001358:	2b00      	cmp	r3, #0
 800135a:	d00c      	beq.n	8001376 <HAL_RCC_OscConfig+0x356>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800135c:	4ba4      	ldr	r3, [pc, #656]	; (80015f0 <HAL_RCC_OscConfig+0x5d0>)
 800135e:	685b      	ldr	r3, [r3, #4]
 8001360:	f003 030c 	and.w	r3, r3, #12
 8001364:	2b08      	cmp	r3, #8
 8001366:	d173      	bne.n	8001450 <HAL_RCC_OscConfig+0x430>
 8001368:	4ba1      	ldr	r3, [pc, #644]	; (80015f0 <HAL_RCC_OscConfig+0x5d0>)
 800136a:	685b      	ldr	r3, [r3, #4]
 800136c:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8001370:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001374:	d16c      	bne.n	8001450 <HAL_RCC_OscConfig+0x430>
 8001376:	2302      	movs	r3, #2
 8001378:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800137c:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8001380:	fa93 f3a3 	rbit	r3, r3
 8001384:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
  return result;
 8001388:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800138c:	fab3 f383 	clz	r3, r3
 8001390:	b2db      	uxtb	r3, r3
 8001392:	095b      	lsrs	r3, r3, #5
 8001394:	b2db      	uxtb	r3, r3
 8001396:	f043 0301 	orr.w	r3, r3, #1
 800139a:	b2db      	uxtb	r3, r3
 800139c:	2b01      	cmp	r3, #1
 800139e:	d102      	bne.n	80013a6 <HAL_RCC_OscConfig+0x386>
 80013a0:	4b93      	ldr	r3, [pc, #588]	; (80015f0 <HAL_RCC_OscConfig+0x5d0>)
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	e013      	b.n	80013ce <HAL_RCC_OscConfig+0x3ae>
 80013a6:	2302      	movs	r3, #2
 80013a8:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80013ac:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 80013b0:	fa93 f3a3 	rbit	r3, r3
 80013b4:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 80013b8:	2302      	movs	r3, #2
 80013ba:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 80013be:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 80013c2:	fa93 f3a3 	rbit	r3, r3
 80013c6:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 80013ca:	4b89      	ldr	r3, [pc, #548]	; (80015f0 <HAL_RCC_OscConfig+0x5d0>)
 80013cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013ce:	2202      	movs	r2, #2
 80013d0:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 80013d4:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 80013d8:	fa92 f2a2 	rbit	r2, r2
 80013dc:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
  return result;
 80013e0:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 80013e4:	fab2 f282 	clz	r2, r2
 80013e8:	b2d2      	uxtb	r2, r2
 80013ea:	f042 0220 	orr.w	r2, r2, #32
 80013ee:	b2d2      	uxtb	r2, r2
 80013f0:	f002 021f 	and.w	r2, r2, #31
 80013f4:	2101      	movs	r1, #1
 80013f6:	fa01 f202 	lsl.w	r2, r1, r2
 80013fa:	4013      	ands	r3, r2
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d00a      	beq.n	8001416 <HAL_RCC_OscConfig+0x3f6>
 8001400:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001404:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	68db      	ldr	r3, [r3, #12]
 800140c:	2b01      	cmp	r3, #1
 800140e:	d002      	beq.n	8001416 <HAL_RCC_OscConfig+0x3f6>
      {
        return HAL_ERROR;
 8001410:	2301      	movs	r3, #1
 8001412:	f000 be52 	b.w	80020ba <HAL_RCC_OscConfig+0x109a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001416:	4b76      	ldr	r3, [pc, #472]	; (80015f0 <HAL_RCC_OscConfig+0x5d0>)
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800141e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001422:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	691b      	ldr	r3, [r3, #16]
 800142a:	21f8      	movs	r1, #248	; 0xf8
 800142c:	f8c7 1174 	str.w	r1, [r7, #372]	; 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001430:	f8d7 1174 	ldr.w	r1, [r7, #372]	; 0x174
 8001434:	fa91 f1a1 	rbit	r1, r1
 8001438:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
  return result;
 800143c:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8001440:	fab1 f181 	clz	r1, r1
 8001444:	b2c9      	uxtb	r1, r1
 8001446:	408b      	lsls	r3, r1
 8001448:	4969      	ldr	r1, [pc, #420]	; (80015f0 <HAL_RCC_OscConfig+0x5d0>)
 800144a:	4313      	orrs	r3, r2
 800144c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800144e:	e0fe      	b.n	800164e <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001450:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001454:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	68db      	ldr	r3, [r3, #12]
 800145c:	2b00      	cmp	r3, #0
 800145e:	f000 8088 	beq.w	8001572 <HAL_RCC_OscConfig+0x552>
 8001462:	2301      	movs	r3, #1
 8001464:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001468:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 800146c:	fa93 f3a3 	rbit	r3, r3
 8001470:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  return result;
 8001474:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001478:	fab3 f383 	clz	r3, r3
 800147c:	b2db      	uxtb	r3, r3
 800147e:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001482:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001486:	009b      	lsls	r3, r3, #2
 8001488:	461a      	mov	r2, r3
 800148a:	2301      	movs	r3, #1
 800148c:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800148e:	f7ff f929 	bl	80006e4 <HAL_GetTick>
 8001492:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001496:	e00a      	b.n	80014ae <HAL_RCC_OscConfig+0x48e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001498:	f7ff f924 	bl	80006e4 <HAL_GetTick>
 800149c:	4602      	mov	r2, r0
 800149e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80014a2:	1ad3      	subs	r3, r2, r3
 80014a4:	2b02      	cmp	r3, #2
 80014a6:	d902      	bls.n	80014ae <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 80014a8:	2303      	movs	r3, #3
 80014aa:	f000 be06 	b.w	80020ba <HAL_RCC_OscConfig+0x109a>
 80014ae:	2302      	movs	r3, #2
 80014b0:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014b4:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 80014b8:	fa93 f3a3 	rbit	r3, r3
 80014bc:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
  return result;
 80014c0:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80014c4:	fab3 f383 	clz	r3, r3
 80014c8:	b2db      	uxtb	r3, r3
 80014ca:	095b      	lsrs	r3, r3, #5
 80014cc:	b2db      	uxtb	r3, r3
 80014ce:	f043 0301 	orr.w	r3, r3, #1
 80014d2:	b2db      	uxtb	r3, r3
 80014d4:	2b01      	cmp	r3, #1
 80014d6:	d102      	bne.n	80014de <HAL_RCC_OscConfig+0x4be>
 80014d8:	4b45      	ldr	r3, [pc, #276]	; (80015f0 <HAL_RCC_OscConfig+0x5d0>)
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	e013      	b.n	8001506 <HAL_RCC_OscConfig+0x4e6>
 80014de:	2302      	movs	r3, #2
 80014e0:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014e4:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 80014e8:	fa93 f3a3 	rbit	r3, r3
 80014ec:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 80014f0:	2302      	movs	r3, #2
 80014f2:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 80014f6:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 80014fa:	fa93 f3a3 	rbit	r3, r3
 80014fe:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8001502:	4b3b      	ldr	r3, [pc, #236]	; (80015f0 <HAL_RCC_OscConfig+0x5d0>)
 8001504:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001506:	2202      	movs	r2, #2
 8001508:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 800150c:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8001510:	fa92 f2a2 	rbit	r2, r2
 8001514:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
  return result;
 8001518:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800151c:	fab2 f282 	clz	r2, r2
 8001520:	b2d2      	uxtb	r2, r2
 8001522:	f042 0220 	orr.w	r2, r2, #32
 8001526:	b2d2      	uxtb	r2, r2
 8001528:	f002 021f 	and.w	r2, r2, #31
 800152c:	2101      	movs	r1, #1
 800152e:	fa01 f202 	lsl.w	r2, r1, r2
 8001532:	4013      	ands	r3, r2
 8001534:	2b00      	cmp	r3, #0
 8001536:	d0af      	beq.n	8001498 <HAL_RCC_OscConfig+0x478>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001538:	4b2d      	ldr	r3, [pc, #180]	; (80015f0 <HAL_RCC_OscConfig+0x5d0>)
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001540:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001544:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	691b      	ldr	r3, [r3, #16]
 800154c:	21f8      	movs	r1, #248	; 0xf8
 800154e:	f8c7 1144 	str.w	r1, [r7, #324]	; 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001552:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 8001556:	fa91 f1a1 	rbit	r1, r1
 800155a:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
  return result;
 800155e:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8001562:	fab1 f181 	clz	r1, r1
 8001566:	b2c9      	uxtb	r1, r1
 8001568:	408b      	lsls	r3, r1
 800156a:	4921      	ldr	r1, [pc, #132]	; (80015f0 <HAL_RCC_OscConfig+0x5d0>)
 800156c:	4313      	orrs	r3, r2
 800156e:	600b      	str	r3, [r1, #0]
 8001570:	e06d      	b.n	800164e <HAL_RCC_OscConfig+0x62e>
 8001572:	2301      	movs	r3, #1
 8001574:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001578:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 800157c:	fa93 f3a3 	rbit	r3, r3
 8001580:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  return result;
 8001584:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001588:	fab3 f383 	clz	r3, r3
 800158c:	b2db      	uxtb	r3, r3
 800158e:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001592:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001596:	009b      	lsls	r3, r3, #2
 8001598:	461a      	mov	r2, r3
 800159a:	2300      	movs	r3, #0
 800159c:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800159e:	f7ff f8a1 	bl	80006e4 <HAL_GetTick>
 80015a2:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80015a6:	e00a      	b.n	80015be <HAL_RCC_OscConfig+0x59e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80015a8:	f7ff f89c 	bl	80006e4 <HAL_GetTick>
 80015ac:	4602      	mov	r2, r0
 80015ae:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80015b2:	1ad3      	subs	r3, r2, r3
 80015b4:	2b02      	cmp	r3, #2
 80015b6:	d902      	bls.n	80015be <HAL_RCC_OscConfig+0x59e>
          {
            return HAL_TIMEOUT;
 80015b8:	2303      	movs	r3, #3
 80015ba:	f000 bd7e 	b.w	80020ba <HAL_RCC_OscConfig+0x109a>
 80015be:	2302      	movs	r3, #2
 80015c0:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015c4:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80015c8:	fa93 f3a3 	rbit	r3, r3
 80015cc:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  return result;
 80015d0:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80015d4:	fab3 f383 	clz	r3, r3
 80015d8:	b2db      	uxtb	r3, r3
 80015da:	095b      	lsrs	r3, r3, #5
 80015dc:	b2db      	uxtb	r3, r3
 80015de:	f043 0301 	orr.w	r3, r3, #1
 80015e2:	b2db      	uxtb	r3, r3
 80015e4:	2b01      	cmp	r3, #1
 80015e6:	d105      	bne.n	80015f4 <HAL_RCC_OscConfig+0x5d4>
 80015e8:	4b01      	ldr	r3, [pc, #4]	; (80015f0 <HAL_RCC_OscConfig+0x5d0>)
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	e016      	b.n	800161c <HAL_RCC_OscConfig+0x5fc>
 80015ee:	bf00      	nop
 80015f0:	40021000 	.word	0x40021000
 80015f4:	2302      	movs	r3, #2
 80015f6:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015fa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80015fe:	fa93 f3a3 	rbit	r3, r3
 8001602:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8001606:	2302      	movs	r3, #2
 8001608:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800160c:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8001610:	fa93 f3a3 	rbit	r3, r3
 8001614:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8001618:	4bbf      	ldr	r3, [pc, #764]	; (8001918 <HAL_RCC_OscConfig+0x8f8>)
 800161a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800161c:	2202      	movs	r2, #2
 800161e:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 8001622:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 8001626:	fa92 f2a2 	rbit	r2, r2
 800162a:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
  return result;
 800162e:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8001632:	fab2 f282 	clz	r2, r2
 8001636:	b2d2      	uxtb	r2, r2
 8001638:	f042 0220 	orr.w	r2, r2, #32
 800163c:	b2d2      	uxtb	r2, r2
 800163e:	f002 021f 	and.w	r2, r2, #31
 8001642:	2101      	movs	r1, #1
 8001644:	fa01 f202 	lsl.w	r2, r1, r2
 8001648:	4013      	ands	r3, r2
 800164a:	2b00      	cmp	r3, #0
 800164c:	d1ac      	bne.n	80015a8 <HAL_RCC_OscConfig+0x588>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800164e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001652:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	f003 0308 	and.w	r3, r3, #8
 800165e:	2b00      	cmp	r3, #0
 8001660:	f000 8113 	beq.w	800188a <HAL_RCC_OscConfig+0x86a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001664:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001668:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	695b      	ldr	r3, [r3, #20]
 8001670:	2b00      	cmp	r3, #0
 8001672:	d07c      	beq.n	800176e <HAL_RCC_OscConfig+0x74e>
 8001674:	2301      	movs	r3, #1
 8001676:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800167a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800167e:	fa93 f3a3 	rbit	r3, r3
 8001682:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  return result;
 8001686:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800168a:	fab3 f383 	clz	r3, r3
 800168e:	b2db      	uxtb	r3, r3
 8001690:	461a      	mov	r2, r3
 8001692:	4ba2      	ldr	r3, [pc, #648]	; (800191c <HAL_RCC_OscConfig+0x8fc>)
 8001694:	4413      	add	r3, r2
 8001696:	009b      	lsls	r3, r3, #2
 8001698:	461a      	mov	r2, r3
 800169a:	2301      	movs	r3, #1
 800169c:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800169e:	f7ff f821 	bl	80006e4 <HAL_GetTick>
 80016a2:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80016a6:	e00a      	b.n	80016be <HAL_RCC_OscConfig+0x69e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80016a8:	f7ff f81c 	bl	80006e4 <HAL_GetTick>
 80016ac:	4602      	mov	r2, r0
 80016ae:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80016b2:	1ad3      	subs	r3, r2, r3
 80016b4:	2b02      	cmp	r3, #2
 80016b6:	d902      	bls.n	80016be <HAL_RCC_OscConfig+0x69e>
        {
          return HAL_TIMEOUT;
 80016b8:	2303      	movs	r3, #3
 80016ba:	f000 bcfe 	b.w	80020ba <HAL_RCC_OscConfig+0x109a>
 80016be:	2302      	movs	r3, #2
 80016c0:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016c4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80016c8:	fa93 f2a3 	rbit	r2, r3
 80016cc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80016d0:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80016d4:	601a      	str	r2, [r3, #0]
 80016d6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80016da:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80016de:	2202      	movs	r2, #2
 80016e0:	601a      	str	r2, [r3, #0]
 80016e2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80016e6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	fa93 f2a3 	rbit	r2, r3
 80016f0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80016f4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80016f8:	601a      	str	r2, [r3, #0]
 80016fa:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80016fe:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8001702:	2202      	movs	r2, #2
 8001704:	601a      	str	r2, [r3, #0]
 8001706:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800170a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	fa93 f2a3 	rbit	r2, r3
 8001714:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001718:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800171c:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800171e:	4b7e      	ldr	r3, [pc, #504]	; (8001918 <HAL_RCC_OscConfig+0x8f8>)
 8001720:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001722:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001726:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800172a:	2102      	movs	r1, #2
 800172c:	6019      	str	r1, [r3, #0]
 800172e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001732:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	fa93 f1a3 	rbit	r1, r3
 800173c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001740:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8001744:	6019      	str	r1, [r3, #0]
  return result;
 8001746:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800174a:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	fab3 f383 	clz	r3, r3
 8001754:	b2db      	uxtb	r3, r3
 8001756:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800175a:	b2db      	uxtb	r3, r3
 800175c:	f003 031f 	and.w	r3, r3, #31
 8001760:	2101      	movs	r1, #1
 8001762:	fa01 f303 	lsl.w	r3, r1, r3
 8001766:	4013      	ands	r3, r2
 8001768:	2b00      	cmp	r3, #0
 800176a:	d09d      	beq.n	80016a8 <HAL_RCC_OscConfig+0x688>
 800176c:	e08d      	b.n	800188a <HAL_RCC_OscConfig+0x86a>
 800176e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001772:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8001776:	2201      	movs	r2, #1
 8001778:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800177a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800177e:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	fa93 f2a3 	rbit	r2, r3
 8001788:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800178c:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8001790:	601a      	str	r2, [r3, #0]
  return result;
 8001792:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001796:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800179a:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800179c:	fab3 f383 	clz	r3, r3
 80017a0:	b2db      	uxtb	r3, r3
 80017a2:	461a      	mov	r2, r3
 80017a4:	4b5d      	ldr	r3, [pc, #372]	; (800191c <HAL_RCC_OscConfig+0x8fc>)
 80017a6:	4413      	add	r3, r2
 80017a8:	009b      	lsls	r3, r3, #2
 80017aa:	461a      	mov	r2, r3
 80017ac:	2300      	movs	r3, #0
 80017ae:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80017b0:	f7fe ff98 	bl	80006e4 <HAL_GetTick>
 80017b4:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80017b8:	e00a      	b.n	80017d0 <HAL_RCC_OscConfig+0x7b0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80017ba:	f7fe ff93 	bl	80006e4 <HAL_GetTick>
 80017be:	4602      	mov	r2, r0
 80017c0:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80017c4:	1ad3      	subs	r3, r2, r3
 80017c6:	2b02      	cmp	r3, #2
 80017c8:	d902      	bls.n	80017d0 <HAL_RCC_OscConfig+0x7b0>
        {
          return HAL_TIMEOUT;
 80017ca:	2303      	movs	r3, #3
 80017cc:	f000 bc75 	b.w	80020ba <HAL_RCC_OscConfig+0x109a>
 80017d0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80017d4:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80017d8:	2202      	movs	r2, #2
 80017da:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017dc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80017e0:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	fa93 f2a3 	rbit	r2, r3
 80017ea:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80017ee:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80017f2:	601a      	str	r2, [r3, #0]
 80017f4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80017f8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80017fc:	2202      	movs	r2, #2
 80017fe:	601a      	str	r2, [r3, #0]
 8001800:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001804:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	fa93 f2a3 	rbit	r2, r3
 800180e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001812:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8001816:	601a      	str	r2, [r3, #0]
 8001818:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800181c:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8001820:	2202      	movs	r2, #2
 8001822:	601a      	str	r2, [r3, #0]
 8001824:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001828:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	fa93 f2a3 	rbit	r2, r3
 8001832:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001836:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800183a:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800183c:	4b36      	ldr	r3, [pc, #216]	; (8001918 <HAL_RCC_OscConfig+0x8f8>)
 800183e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001840:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001844:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8001848:	2102      	movs	r1, #2
 800184a:	6019      	str	r1, [r3, #0]
 800184c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001850:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	fa93 f1a3 	rbit	r1, r3
 800185a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800185e:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8001862:	6019      	str	r1, [r3, #0]
  return result;
 8001864:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001868:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	fab3 f383 	clz	r3, r3
 8001872:	b2db      	uxtb	r3, r3
 8001874:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001878:	b2db      	uxtb	r3, r3
 800187a:	f003 031f 	and.w	r3, r3, #31
 800187e:	2101      	movs	r1, #1
 8001880:	fa01 f303 	lsl.w	r3, r1, r3
 8001884:	4013      	ands	r3, r2
 8001886:	2b00      	cmp	r3, #0
 8001888:	d197      	bne.n	80017ba <HAL_RCC_OscConfig+0x79a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800188a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800188e:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	f003 0304 	and.w	r3, r3, #4
 800189a:	2b00      	cmp	r3, #0
 800189c:	f000 81a5 	beq.w	8001bea <HAL_RCC_OscConfig+0xbca>
  {
    FlagStatus       pwrclkchanged = RESET;
 80018a0:	2300      	movs	r3, #0
 80018a2:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80018a6:	4b1c      	ldr	r3, [pc, #112]	; (8001918 <HAL_RCC_OscConfig+0x8f8>)
 80018a8:	69db      	ldr	r3, [r3, #28]
 80018aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d116      	bne.n	80018e0 <HAL_RCC_OscConfig+0x8c0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80018b2:	4b19      	ldr	r3, [pc, #100]	; (8001918 <HAL_RCC_OscConfig+0x8f8>)
 80018b4:	69db      	ldr	r3, [r3, #28]
 80018b6:	4a18      	ldr	r2, [pc, #96]	; (8001918 <HAL_RCC_OscConfig+0x8f8>)
 80018b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80018bc:	61d3      	str	r3, [r2, #28]
 80018be:	4b16      	ldr	r3, [pc, #88]	; (8001918 <HAL_RCC_OscConfig+0x8f8>)
 80018c0:	69db      	ldr	r3, [r3, #28]
 80018c2:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 80018c6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80018ca:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80018ce:	601a      	str	r2, [r3, #0]
 80018d0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80018d4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80018d8:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 80018da:	2301      	movs	r3, #1
 80018dc:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80018e0:	4b0f      	ldr	r3, [pc, #60]	; (8001920 <HAL_RCC_OscConfig+0x900>)
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d121      	bne.n	8001930 <HAL_RCC_OscConfig+0x910>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80018ec:	4b0c      	ldr	r3, [pc, #48]	; (8001920 <HAL_RCC_OscConfig+0x900>)
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	4a0b      	ldr	r2, [pc, #44]	; (8001920 <HAL_RCC_OscConfig+0x900>)
 80018f2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80018f6:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80018f8:	f7fe fef4 	bl	80006e4 <HAL_GetTick>
 80018fc:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001900:	e010      	b.n	8001924 <HAL_RCC_OscConfig+0x904>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001902:	f7fe feef 	bl	80006e4 <HAL_GetTick>
 8001906:	4602      	mov	r2, r0
 8001908:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800190c:	1ad3      	subs	r3, r2, r3
 800190e:	2b64      	cmp	r3, #100	; 0x64
 8001910:	d908      	bls.n	8001924 <HAL_RCC_OscConfig+0x904>
        {
          return HAL_TIMEOUT;
 8001912:	2303      	movs	r3, #3
 8001914:	e3d1      	b.n	80020ba <HAL_RCC_OscConfig+0x109a>
 8001916:	bf00      	nop
 8001918:	40021000 	.word	0x40021000
 800191c:	10908120 	.word	0x10908120
 8001920:	40007000 	.word	0x40007000
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001924:	4b8d      	ldr	r3, [pc, #564]	; (8001b5c <HAL_RCC_OscConfig+0xb3c>)
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800192c:	2b00      	cmp	r3, #0
 800192e:	d0e8      	beq.n	8001902 <HAL_RCC_OscConfig+0x8e2>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001930:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001934:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	689b      	ldr	r3, [r3, #8]
 800193c:	2b01      	cmp	r3, #1
 800193e:	d106      	bne.n	800194e <HAL_RCC_OscConfig+0x92e>
 8001940:	4b87      	ldr	r3, [pc, #540]	; (8001b60 <HAL_RCC_OscConfig+0xb40>)
 8001942:	6a1b      	ldr	r3, [r3, #32]
 8001944:	4a86      	ldr	r2, [pc, #536]	; (8001b60 <HAL_RCC_OscConfig+0xb40>)
 8001946:	f043 0301 	orr.w	r3, r3, #1
 800194a:	6213      	str	r3, [r2, #32]
 800194c:	e035      	b.n	80019ba <HAL_RCC_OscConfig+0x99a>
 800194e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001952:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	689b      	ldr	r3, [r3, #8]
 800195a:	2b00      	cmp	r3, #0
 800195c:	d10c      	bne.n	8001978 <HAL_RCC_OscConfig+0x958>
 800195e:	4b80      	ldr	r3, [pc, #512]	; (8001b60 <HAL_RCC_OscConfig+0xb40>)
 8001960:	6a1b      	ldr	r3, [r3, #32]
 8001962:	4a7f      	ldr	r2, [pc, #508]	; (8001b60 <HAL_RCC_OscConfig+0xb40>)
 8001964:	f023 0301 	bic.w	r3, r3, #1
 8001968:	6213      	str	r3, [r2, #32]
 800196a:	4b7d      	ldr	r3, [pc, #500]	; (8001b60 <HAL_RCC_OscConfig+0xb40>)
 800196c:	6a1b      	ldr	r3, [r3, #32]
 800196e:	4a7c      	ldr	r2, [pc, #496]	; (8001b60 <HAL_RCC_OscConfig+0xb40>)
 8001970:	f023 0304 	bic.w	r3, r3, #4
 8001974:	6213      	str	r3, [r2, #32]
 8001976:	e020      	b.n	80019ba <HAL_RCC_OscConfig+0x99a>
 8001978:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800197c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	689b      	ldr	r3, [r3, #8]
 8001984:	2b05      	cmp	r3, #5
 8001986:	d10c      	bne.n	80019a2 <HAL_RCC_OscConfig+0x982>
 8001988:	4b75      	ldr	r3, [pc, #468]	; (8001b60 <HAL_RCC_OscConfig+0xb40>)
 800198a:	6a1b      	ldr	r3, [r3, #32]
 800198c:	4a74      	ldr	r2, [pc, #464]	; (8001b60 <HAL_RCC_OscConfig+0xb40>)
 800198e:	f043 0304 	orr.w	r3, r3, #4
 8001992:	6213      	str	r3, [r2, #32]
 8001994:	4b72      	ldr	r3, [pc, #456]	; (8001b60 <HAL_RCC_OscConfig+0xb40>)
 8001996:	6a1b      	ldr	r3, [r3, #32]
 8001998:	4a71      	ldr	r2, [pc, #452]	; (8001b60 <HAL_RCC_OscConfig+0xb40>)
 800199a:	f043 0301 	orr.w	r3, r3, #1
 800199e:	6213      	str	r3, [r2, #32]
 80019a0:	e00b      	b.n	80019ba <HAL_RCC_OscConfig+0x99a>
 80019a2:	4b6f      	ldr	r3, [pc, #444]	; (8001b60 <HAL_RCC_OscConfig+0xb40>)
 80019a4:	6a1b      	ldr	r3, [r3, #32]
 80019a6:	4a6e      	ldr	r2, [pc, #440]	; (8001b60 <HAL_RCC_OscConfig+0xb40>)
 80019a8:	f023 0301 	bic.w	r3, r3, #1
 80019ac:	6213      	str	r3, [r2, #32]
 80019ae:	4b6c      	ldr	r3, [pc, #432]	; (8001b60 <HAL_RCC_OscConfig+0xb40>)
 80019b0:	6a1b      	ldr	r3, [r3, #32]
 80019b2:	4a6b      	ldr	r2, [pc, #428]	; (8001b60 <HAL_RCC_OscConfig+0xb40>)
 80019b4:	f023 0304 	bic.w	r3, r3, #4
 80019b8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80019ba:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80019be:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	689b      	ldr	r3, [r3, #8]
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	f000 8081 	beq.w	8001ace <HAL_RCC_OscConfig+0xaae>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80019cc:	f7fe fe8a 	bl	80006e4 <HAL_GetTick>
 80019d0:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80019d4:	e00b      	b.n	80019ee <HAL_RCC_OscConfig+0x9ce>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80019d6:	f7fe fe85 	bl	80006e4 <HAL_GetTick>
 80019da:	4602      	mov	r2, r0
 80019dc:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80019e0:	1ad3      	subs	r3, r2, r3
 80019e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80019e6:	4293      	cmp	r3, r2
 80019e8:	d901      	bls.n	80019ee <HAL_RCC_OscConfig+0x9ce>
        {
          return HAL_TIMEOUT;
 80019ea:	2303      	movs	r3, #3
 80019ec:	e365      	b.n	80020ba <HAL_RCC_OscConfig+0x109a>
 80019ee:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80019f2:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 80019f6:	2202      	movs	r2, #2
 80019f8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019fa:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80019fe:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	fa93 f2a3 	rbit	r2, r3
 8001a08:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001a0c:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8001a10:	601a      	str	r2, [r3, #0]
 8001a12:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001a16:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8001a1a:	2202      	movs	r2, #2
 8001a1c:	601a      	str	r2, [r3, #0]
 8001a1e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001a22:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	fa93 f2a3 	rbit	r2, r3
 8001a2c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001a30:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8001a34:	601a      	str	r2, [r3, #0]
  return result;
 8001a36:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001a3a:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8001a3e:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a40:	fab3 f383 	clz	r3, r3
 8001a44:	b2db      	uxtb	r3, r3
 8001a46:	095b      	lsrs	r3, r3, #5
 8001a48:	b2db      	uxtb	r3, r3
 8001a4a:	f043 0302 	orr.w	r3, r3, #2
 8001a4e:	b2db      	uxtb	r3, r3
 8001a50:	2b02      	cmp	r3, #2
 8001a52:	d102      	bne.n	8001a5a <HAL_RCC_OscConfig+0xa3a>
 8001a54:	4b42      	ldr	r3, [pc, #264]	; (8001b60 <HAL_RCC_OscConfig+0xb40>)
 8001a56:	6a1b      	ldr	r3, [r3, #32]
 8001a58:	e013      	b.n	8001a82 <HAL_RCC_OscConfig+0xa62>
 8001a5a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001a5e:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8001a62:	2202      	movs	r2, #2
 8001a64:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a66:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001a6a:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	fa93 f2a3 	rbit	r2, r3
 8001a74:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001a78:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 8001a7c:	601a      	str	r2, [r3, #0]
 8001a7e:	4b38      	ldr	r3, [pc, #224]	; (8001b60 <HAL_RCC_OscConfig+0xb40>)
 8001a80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a82:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001a86:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8001a8a:	2102      	movs	r1, #2
 8001a8c:	6011      	str	r1, [r2, #0]
 8001a8e:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001a92:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8001a96:	6812      	ldr	r2, [r2, #0]
 8001a98:	fa92 f1a2 	rbit	r1, r2
 8001a9c:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001aa0:	f5a2 72b0 	sub.w	r2, r2, #352	; 0x160
 8001aa4:	6011      	str	r1, [r2, #0]
  return result;
 8001aa6:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001aaa:	f5a2 72b0 	sub.w	r2, r2, #352	; 0x160
 8001aae:	6812      	ldr	r2, [r2, #0]
 8001ab0:	fab2 f282 	clz	r2, r2
 8001ab4:	b2d2      	uxtb	r2, r2
 8001ab6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001aba:	b2d2      	uxtb	r2, r2
 8001abc:	f002 021f 	and.w	r2, r2, #31
 8001ac0:	2101      	movs	r1, #1
 8001ac2:	fa01 f202 	lsl.w	r2, r1, r2
 8001ac6:	4013      	ands	r3, r2
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d084      	beq.n	80019d6 <HAL_RCC_OscConfig+0x9b6>
 8001acc:	e083      	b.n	8001bd6 <HAL_RCC_OscConfig+0xbb6>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ace:	f7fe fe09 	bl	80006e4 <HAL_GetTick>
 8001ad2:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ad6:	e00b      	b.n	8001af0 <HAL_RCC_OscConfig+0xad0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001ad8:	f7fe fe04 	bl	80006e4 <HAL_GetTick>
 8001adc:	4602      	mov	r2, r0
 8001ade:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001ae2:	1ad3      	subs	r3, r2, r3
 8001ae4:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ae8:	4293      	cmp	r3, r2
 8001aea:	d901      	bls.n	8001af0 <HAL_RCC_OscConfig+0xad0>
        {
          return HAL_TIMEOUT;
 8001aec:	2303      	movs	r3, #3
 8001aee:	e2e4      	b.n	80020ba <HAL_RCC_OscConfig+0x109a>
 8001af0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001af4:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8001af8:	2202      	movs	r2, #2
 8001afa:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001afc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001b00:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	fa93 f2a3 	rbit	r2, r3
 8001b0a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001b0e:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8001b12:	601a      	str	r2, [r3, #0]
 8001b14:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001b18:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8001b1c:	2202      	movs	r2, #2
 8001b1e:	601a      	str	r2, [r3, #0]
 8001b20:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001b24:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	fa93 f2a3 	rbit	r2, r3
 8001b2e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001b32:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8001b36:	601a      	str	r2, [r3, #0]
  return result;
 8001b38:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001b3c:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8001b40:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001b42:	fab3 f383 	clz	r3, r3
 8001b46:	b2db      	uxtb	r3, r3
 8001b48:	095b      	lsrs	r3, r3, #5
 8001b4a:	b2db      	uxtb	r3, r3
 8001b4c:	f043 0302 	orr.w	r3, r3, #2
 8001b50:	b2db      	uxtb	r3, r3
 8001b52:	2b02      	cmp	r3, #2
 8001b54:	d106      	bne.n	8001b64 <HAL_RCC_OscConfig+0xb44>
 8001b56:	4b02      	ldr	r3, [pc, #8]	; (8001b60 <HAL_RCC_OscConfig+0xb40>)
 8001b58:	6a1b      	ldr	r3, [r3, #32]
 8001b5a:	e017      	b.n	8001b8c <HAL_RCC_OscConfig+0xb6c>
 8001b5c:	40007000 	.word	0x40007000
 8001b60:	40021000 	.word	0x40021000
 8001b64:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001b68:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8001b6c:	2202      	movs	r2, #2
 8001b6e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b70:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001b74:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	fa93 f2a3 	rbit	r2, r3
 8001b7e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001b82:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 8001b86:	601a      	str	r2, [r3, #0]
 8001b88:	4bb3      	ldr	r3, [pc, #716]	; (8001e58 <HAL_RCC_OscConfig+0xe38>)
 8001b8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b8c:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001b90:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8001b94:	2102      	movs	r1, #2
 8001b96:	6011      	str	r1, [r2, #0]
 8001b98:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001b9c:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8001ba0:	6812      	ldr	r2, [r2, #0]
 8001ba2:	fa92 f1a2 	rbit	r1, r2
 8001ba6:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001baa:	f5a2 72c0 	sub.w	r2, r2, #384	; 0x180
 8001bae:	6011      	str	r1, [r2, #0]
  return result;
 8001bb0:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001bb4:	f5a2 72c0 	sub.w	r2, r2, #384	; 0x180
 8001bb8:	6812      	ldr	r2, [r2, #0]
 8001bba:	fab2 f282 	clz	r2, r2
 8001bbe:	b2d2      	uxtb	r2, r2
 8001bc0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001bc4:	b2d2      	uxtb	r2, r2
 8001bc6:	f002 021f 	and.w	r2, r2, #31
 8001bca:	2101      	movs	r1, #1
 8001bcc:	fa01 f202 	lsl.w	r2, r1, r2
 8001bd0:	4013      	ands	r3, r2
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d180      	bne.n	8001ad8 <HAL_RCC_OscConfig+0xab8>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001bd6:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 8001bda:	2b01      	cmp	r3, #1
 8001bdc:	d105      	bne.n	8001bea <HAL_RCC_OscConfig+0xbca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001bde:	4b9e      	ldr	r3, [pc, #632]	; (8001e58 <HAL_RCC_OscConfig+0xe38>)
 8001be0:	69db      	ldr	r3, [r3, #28]
 8001be2:	4a9d      	ldr	r2, [pc, #628]	; (8001e58 <HAL_RCC_OscConfig+0xe38>)
 8001be4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001be8:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001bea:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001bee:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	699b      	ldr	r3, [r3, #24]
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	f000 825e 	beq.w	80020b8 <HAL_RCC_OscConfig+0x1098>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001bfc:	4b96      	ldr	r3, [pc, #600]	; (8001e58 <HAL_RCC_OscConfig+0xe38>)
 8001bfe:	685b      	ldr	r3, [r3, #4]
 8001c00:	f003 030c 	and.w	r3, r3, #12
 8001c04:	2b08      	cmp	r3, #8
 8001c06:	f000 821f 	beq.w	8002048 <HAL_RCC_OscConfig+0x1028>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001c0a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001c0e:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	699b      	ldr	r3, [r3, #24]
 8001c16:	2b02      	cmp	r3, #2
 8001c18:	f040 8170 	bne.w	8001efc <HAL_RCC_OscConfig+0xedc>
 8001c1c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001c20:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8001c24:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001c28:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c2a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001c2e:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	fa93 f2a3 	rbit	r2, r3
 8001c38:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001c3c:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8001c40:	601a      	str	r2, [r3, #0]
  return result;
 8001c42:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001c46:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8001c4a:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c4c:	fab3 f383 	clz	r3, r3
 8001c50:	b2db      	uxtb	r3, r3
 8001c52:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001c56:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001c5a:	009b      	lsls	r3, r3, #2
 8001c5c:	461a      	mov	r2, r3
 8001c5e:	2300      	movs	r3, #0
 8001c60:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c62:	f7fe fd3f 	bl	80006e4 <HAL_GetTick>
 8001c66:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c6a:	e009      	b.n	8001c80 <HAL_RCC_OscConfig+0xc60>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c6c:	f7fe fd3a 	bl	80006e4 <HAL_GetTick>
 8001c70:	4602      	mov	r2, r0
 8001c72:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001c76:	1ad3      	subs	r3, r2, r3
 8001c78:	2b02      	cmp	r3, #2
 8001c7a:	d901      	bls.n	8001c80 <HAL_RCC_OscConfig+0xc60>
          {
            return HAL_TIMEOUT;
 8001c7c:	2303      	movs	r3, #3
 8001c7e:	e21c      	b.n	80020ba <HAL_RCC_OscConfig+0x109a>
 8001c80:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001c84:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8001c88:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001c8c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c8e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001c92:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	fa93 f2a3 	rbit	r2, r3
 8001c9c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001ca0:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8001ca4:	601a      	str	r2, [r3, #0]
  return result;
 8001ca6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001caa:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8001cae:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001cb0:	fab3 f383 	clz	r3, r3
 8001cb4:	b2db      	uxtb	r3, r3
 8001cb6:	095b      	lsrs	r3, r3, #5
 8001cb8:	b2db      	uxtb	r3, r3
 8001cba:	f043 0301 	orr.w	r3, r3, #1
 8001cbe:	b2db      	uxtb	r3, r3
 8001cc0:	2b01      	cmp	r3, #1
 8001cc2:	d102      	bne.n	8001cca <HAL_RCC_OscConfig+0xcaa>
 8001cc4:	4b64      	ldr	r3, [pc, #400]	; (8001e58 <HAL_RCC_OscConfig+0xe38>)
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	e027      	b.n	8001d1a <HAL_RCC_OscConfig+0xcfa>
 8001cca:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001cce:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8001cd2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001cd6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cd8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001cdc:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	fa93 f2a3 	rbit	r2, r3
 8001ce6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001cea:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8001cee:	601a      	str	r2, [r3, #0]
 8001cf0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001cf4:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8001cf8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001cfc:	601a      	str	r2, [r3, #0]
 8001cfe:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001d02:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	fa93 f2a3 	rbit	r2, r3
 8001d0c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001d10:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 8001d14:	601a      	str	r2, [r3, #0]
 8001d16:	4b50      	ldr	r3, [pc, #320]	; (8001e58 <HAL_RCC_OscConfig+0xe38>)
 8001d18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d1a:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001d1e:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8001d22:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001d26:	6011      	str	r1, [r2, #0]
 8001d28:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001d2c:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8001d30:	6812      	ldr	r2, [r2, #0]
 8001d32:	fa92 f1a2 	rbit	r1, r2
 8001d36:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001d3a:	f5a2 72d4 	sub.w	r2, r2, #424	; 0x1a8
 8001d3e:	6011      	str	r1, [r2, #0]
  return result;
 8001d40:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001d44:	f5a2 72d4 	sub.w	r2, r2, #424	; 0x1a8
 8001d48:	6812      	ldr	r2, [r2, #0]
 8001d4a:	fab2 f282 	clz	r2, r2
 8001d4e:	b2d2      	uxtb	r2, r2
 8001d50:	f042 0220 	orr.w	r2, r2, #32
 8001d54:	b2d2      	uxtb	r2, r2
 8001d56:	f002 021f 	and.w	r2, r2, #31
 8001d5a:	2101      	movs	r1, #1
 8001d5c:	fa01 f202 	lsl.w	r2, r1, r2
 8001d60:	4013      	ands	r3, r2
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d182      	bne.n	8001c6c <HAL_RCC_OscConfig+0xc4c>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001d66:	4b3c      	ldr	r3, [pc, #240]	; (8001e58 <HAL_RCC_OscConfig+0xe38>)
 8001d68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d6a:	f023 020f 	bic.w	r2, r3, #15
 8001d6e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001d72:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d7a:	4937      	ldr	r1, [pc, #220]	; (8001e58 <HAL_RCC_OscConfig+0xe38>)
 8001d7c:	4313      	orrs	r3, r2
 8001d7e:	62cb      	str	r3, [r1, #44]	; 0x2c
 8001d80:	4b35      	ldr	r3, [pc, #212]	; (8001e58 <HAL_RCC_OscConfig+0xe38>)
 8001d82:	685b      	ldr	r3, [r3, #4]
 8001d84:	f423 1276 	bic.w	r2, r3, #4030464	; 0x3d8000
 8001d88:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001d8c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	6a19      	ldr	r1, [r3, #32]
 8001d94:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001d98:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	69db      	ldr	r3, [r3, #28]
 8001da0:	430b      	orrs	r3, r1
 8001da2:	492d      	ldr	r1, [pc, #180]	; (8001e58 <HAL_RCC_OscConfig+0xe38>)
 8001da4:	4313      	orrs	r3, r2
 8001da6:	604b      	str	r3, [r1, #4]
 8001da8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001dac:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8001db0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001db4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001db6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001dba:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	fa93 f2a3 	rbit	r2, r3
 8001dc4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001dc8:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8001dcc:	601a      	str	r2, [r3, #0]
  return result;
 8001dce:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001dd2:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8001dd6:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001dd8:	fab3 f383 	clz	r3, r3
 8001ddc:	b2db      	uxtb	r3, r3
 8001dde:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001de2:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001de6:	009b      	lsls	r3, r3, #2
 8001de8:	461a      	mov	r2, r3
 8001dea:	2301      	movs	r3, #1
 8001dec:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001dee:	f7fe fc79 	bl	80006e4 <HAL_GetTick>
 8001df2:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001df6:	e009      	b.n	8001e0c <HAL_RCC_OscConfig+0xdec>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001df8:	f7fe fc74 	bl	80006e4 <HAL_GetTick>
 8001dfc:	4602      	mov	r2, r0
 8001dfe:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001e02:	1ad3      	subs	r3, r2, r3
 8001e04:	2b02      	cmp	r3, #2
 8001e06:	d901      	bls.n	8001e0c <HAL_RCC_OscConfig+0xdec>
          {
            return HAL_TIMEOUT;
 8001e08:	2303      	movs	r3, #3
 8001e0a:	e156      	b.n	80020ba <HAL_RCC_OscConfig+0x109a>
 8001e0c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001e10:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8001e14:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001e18:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e1a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001e1e:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	fa93 f2a3 	rbit	r2, r3
 8001e28:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001e2c:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8001e30:	601a      	str	r2, [r3, #0]
  return result;
 8001e32:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001e36:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8001e3a:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001e3c:	fab3 f383 	clz	r3, r3
 8001e40:	b2db      	uxtb	r3, r3
 8001e42:	095b      	lsrs	r3, r3, #5
 8001e44:	b2db      	uxtb	r3, r3
 8001e46:	f043 0301 	orr.w	r3, r3, #1
 8001e4a:	b2db      	uxtb	r3, r3
 8001e4c:	2b01      	cmp	r3, #1
 8001e4e:	d105      	bne.n	8001e5c <HAL_RCC_OscConfig+0xe3c>
 8001e50:	4b01      	ldr	r3, [pc, #4]	; (8001e58 <HAL_RCC_OscConfig+0xe38>)
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	e02a      	b.n	8001eac <HAL_RCC_OscConfig+0xe8c>
 8001e56:	bf00      	nop
 8001e58:	40021000 	.word	0x40021000
 8001e5c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001e60:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8001e64:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001e68:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e6a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001e6e:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	fa93 f2a3 	rbit	r2, r3
 8001e78:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001e7c:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8001e80:	601a      	str	r2, [r3, #0]
 8001e82:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001e86:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8001e8a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001e8e:	601a      	str	r2, [r3, #0]
 8001e90:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001e94:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	fa93 f2a3 	rbit	r2, r3
 8001e9e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001ea2:	f5a3 73e4 	sub.w	r3, r3, #456	; 0x1c8
 8001ea6:	601a      	str	r2, [r3, #0]
 8001ea8:	4b86      	ldr	r3, [pc, #536]	; (80020c4 <HAL_RCC_OscConfig+0x10a4>)
 8001eaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001eac:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001eb0:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8001eb4:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001eb8:	6011      	str	r1, [r2, #0]
 8001eba:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001ebe:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8001ec2:	6812      	ldr	r2, [r2, #0]
 8001ec4:	fa92 f1a2 	rbit	r1, r2
 8001ec8:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001ecc:	f5a2 72e8 	sub.w	r2, r2, #464	; 0x1d0
 8001ed0:	6011      	str	r1, [r2, #0]
  return result;
 8001ed2:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001ed6:	f5a2 72e8 	sub.w	r2, r2, #464	; 0x1d0
 8001eda:	6812      	ldr	r2, [r2, #0]
 8001edc:	fab2 f282 	clz	r2, r2
 8001ee0:	b2d2      	uxtb	r2, r2
 8001ee2:	f042 0220 	orr.w	r2, r2, #32
 8001ee6:	b2d2      	uxtb	r2, r2
 8001ee8:	f002 021f 	and.w	r2, r2, #31
 8001eec:	2101      	movs	r1, #1
 8001eee:	fa01 f202 	lsl.w	r2, r1, r2
 8001ef2:	4013      	ands	r3, r2
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	f43f af7f 	beq.w	8001df8 <HAL_RCC_OscConfig+0xdd8>
 8001efa:	e0dd      	b.n	80020b8 <HAL_RCC_OscConfig+0x1098>
 8001efc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001f00:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8001f04:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001f08:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f0a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001f0e:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	fa93 f2a3 	rbit	r2, r3
 8001f18:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001f1c:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8001f20:	601a      	str	r2, [r3, #0]
  return result;
 8001f22:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001f26:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8001f2a:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f2c:	fab3 f383 	clz	r3, r3
 8001f30:	b2db      	uxtb	r3, r3
 8001f32:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001f36:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001f3a:	009b      	lsls	r3, r3, #2
 8001f3c:	461a      	mov	r2, r3
 8001f3e:	2300      	movs	r3, #0
 8001f40:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f42:	f7fe fbcf 	bl	80006e4 <HAL_GetTick>
 8001f46:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f4a:	e009      	b.n	8001f60 <HAL_RCC_OscConfig+0xf40>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001f4c:	f7fe fbca 	bl	80006e4 <HAL_GetTick>
 8001f50:	4602      	mov	r2, r0
 8001f52:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001f56:	1ad3      	subs	r3, r2, r3
 8001f58:	2b02      	cmp	r3, #2
 8001f5a:	d901      	bls.n	8001f60 <HAL_RCC_OscConfig+0xf40>
          {
            return HAL_TIMEOUT;
 8001f5c:	2303      	movs	r3, #3
 8001f5e:	e0ac      	b.n	80020ba <HAL_RCC_OscConfig+0x109a>
 8001f60:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001f64:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8001f68:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001f6c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f6e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001f72:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	fa93 f2a3 	rbit	r2, r3
 8001f7c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001f80:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8001f84:	601a      	str	r2, [r3, #0]
  return result;
 8001f86:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001f8a:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8001f8e:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f90:	fab3 f383 	clz	r3, r3
 8001f94:	b2db      	uxtb	r3, r3
 8001f96:	095b      	lsrs	r3, r3, #5
 8001f98:	b2db      	uxtb	r3, r3
 8001f9a:	f043 0301 	orr.w	r3, r3, #1
 8001f9e:	b2db      	uxtb	r3, r3
 8001fa0:	2b01      	cmp	r3, #1
 8001fa2:	d102      	bne.n	8001faa <HAL_RCC_OscConfig+0xf8a>
 8001fa4:	4b47      	ldr	r3, [pc, #284]	; (80020c4 <HAL_RCC_OscConfig+0x10a4>)
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	e027      	b.n	8001ffa <HAL_RCC_OscConfig+0xfda>
 8001faa:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001fae:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8001fb2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001fb6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fb8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001fbc:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	fa93 f2a3 	rbit	r2, r3
 8001fc6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001fca:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8001fce:	601a      	str	r2, [r3, #0]
 8001fd0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001fd4:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8001fd8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001fdc:	601a      	str	r2, [r3, #0]
 8001fde:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001fe2:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	fa93 f2a3 	rbit	r2, r3
 8001fec:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001ff0:	f5a3 73f8 	sub.w	r3, r3, #496	; 0x1f0
 8001ff4:	601a      	str	r2, [r3, #0]
 8001ff6:	4b33      	ldr	r3, [pc, #204]	; (80020c4 <HAL_RCC_OscConfig+0x10a4>)
 8001ff8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ffa:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001ffe:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8002002:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002006:	6011      	str	r1, [r2, #0]
 8002008:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800200c:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8002010:	6812      	ldr	r2, [r2, #0]
 8002012:	fa92 f1a2 	rbit	r1, r2
 8002016:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800201a:	f5a2 72fc 	sub.w	r2, r2, #504	; 0x1f8
 800201e:	6011      	str	r1, [r2, #0]
  return result;
 8002020:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002024:	f5a2 72fc 	sub.w	r2, r2, #504	; 0x1f8
 8002028:	6812      	ldr	r2, [r2, #0]
 800202a:	fab2 f282 	clz	r2, r2
 800202e:	b2d2      	uxtb	r2, r2
 8002030:	f042 0220 	orr.w	r2, r2, #32
 8002034:	b2d2      	uxtb	r2, r2
 8002036:	f002 021f 	and.w	r2, r2, #31
 800203a:	2101      	movs	r1, #1
 800203c:	fa01 f202 	lsl.w	r2, r1, r2
 8002040:	4013      	ands	r3, r2
 8002042:	2b00      	cmp	r3, #0
 8002044:	d182      	bne.n	8001f4c <HAL_RCC_OscConfig+0xf2c>
 8002046:	e037      	b.n	80020b8 <HAL_RCC_OscConfig+0x1098>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002048:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800204c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	699b      	ldr	r3, [r3, #24]
 8002054:	2b01      	cmp	r3, #1
 8002056:	d101      	bne.n	800205c <HAL_RCC_OscConfig+0x103c>
      {
        return HAL_ERROR;
 8002058:	2301      	movs	r3, #1
 800205a:	e02e      	b.n	80020ba <HAL_RCC_OscConfig+0x109a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800205c:	4b19      	ldr	r3, [pc, #100]	; (80020c4 <HAL_RCC_OscConfig+0x10a4>)
 800205e:	685b      	ldr	r3, [r3, #4]
 8002060:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 8002064:	4b17      	ldr	r3, [pc, #92]	; (80020c4 <HAL_RCC_OscConfig+0x10a4>)
 8002066:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002068:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800206c:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8002070:	f403 32c0 	and.w	r2, r3, #98304	; 0x18000
 8002074:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002078:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	69db      	ldr	r3, [r3, #28]
 8002080:	429a      	cmp	r2, r3
 8002082:	d117      	bne.n	80020b4 <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8002084:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8002088:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800208c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002090:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002098:	429a      	cmp	r2, r3
 800209a:	d10b      	bne.n	80020b4 <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 800209c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80020a0:	f003 020f 	and.w	r2, r3, #15
 80020a4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80020a8:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 80020b0:	429a      	cmp	r2, r3
 80020b2:	d001      	beq.n	80020b8 <HAL_RCC_OscConfig+0x1098>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 80020b4:	2301      	movs	r3, #1
 80020b6:	e000      	b.n	80020ba <HAL_RCC_OscConfig+0x109a>
        }
      }
    }
  }

  return HAL_OK;
 80020b8:	2300      	movs	r3, #0
}
 80020ba:	4618      	mov	r0, r3
 80020bc:	f507 7702 	add.w	r7, r7, #520	; 0x208
 80020c0:	46bd      	mov	sp, r7
 80020c2:	bd80      	pop	{r7, pc}
 80020c4:	40021000 	.word	0x40021000

080020c8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80020c8:	b580      	push	{r7, lr}
 80020ca:	b09e      	sub	sp, #120	; 0x78
 80020cc:	af00      	add	r7, sp, #0
 80020ce:	6078      	str	r0, [r7, #4]
 80020d0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80020d2:	2300      	movs	r3, #0
 80020d4:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d101      	bne.n	80020e0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80020dc:	2301      	movs	r3, #1
 80020de:	e162      	b.n	80023a6 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80020e0:	4b90      	ldr	r3, [pc, #576]	; (8002324 <HAL_RCC_ClockConfig+0x25c>)
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	f003 0307 	and.w	r3, r3, #7
 80020e8:	683a      	ldr	r2, [r7, #0]
 80020ea:	429a      	cmp	r2, r3
 80020ec:	d910      	bls.n	8002110 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80020ee:	4b8d      	ldr	r3, [pc, #564]	; (8002324 <HAL_RCC_ClockConfig+0x25c>)
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	f023 0207 	bic.w	r2, r3, #7
 80020f6:	498b      	ldr	r1, [pc, #556]	; (8002324 <HAL_RCC_ClockConfig+0x25c>)
 80020f8:	683b      	ldr	r3, [r7, #0]
 80020fa:	4313      	orrs	r3, r2
 80020fc:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80020fe:	4b89      	ldr	r3, [pc, #548]	; (8002324 <HAL_RCC_ClockConfig+0x25c>)
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	f003 0307 	and.w	r3, r3, #7
 8002106:	683a      	ldr	r2, [r7, #0]
 8002108:	429a      	cmp	r2, r3
 800210a:	d001      	beq.n	8002110 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800210c:	2301      	movs	r3, #1
 800210e:	e14a      	b.n	80023a6 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	f003 0302 	and.w	r3, r3, #2
 8002118:	2b00      	cmp	r3, #0
 800211a:	d008      	beq.n	800212e <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800211c:	4b82      	ldr	r3, [pc, #520]	; (8002328 <HAL_RCC_ClockConfig+0x260>)
 800211e:	685b      	ldr	r3, [r3, #4]
 8002120:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	689b      	ldr	r3, [r3, #8]
 8002128:	497f      	ldr	r1, [pc, #508]	; (8002328 <HAL_RCC_ClockConfig+0x260>)
 800212a:	4313      	orrs	r3, r2
 800212c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	f003 0301 	and.w	r3, r3, #1
 8002136:	2b00      	cmp	r3, #0
 8002138:	f000 80dc 	beq.w	80022f4 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	685b      	ldr	r3, [r3, #4]
 8002140:	2b01      	cmp	r3, #1
 8002142:	d13c      	bne.n	80021be <HAL_RCC_ClockConfig+0xf6>
 8002144:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002148:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800214a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800214c:	fa93 f3a3 	rbit	r3, r3
 8002150:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8002152:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002154:	fab3 f383 	clz	r3, r3
 8002158:	b2db      	uxtb	r3, r3
 800215a:	095b      	lsrs	r3, r3, #5
 800215c:	b2db      	uxtb	r3, r3
 800215e:	f043 0301 	orr.w	r3, r3, #1
 8002162:	b2db      	uxtb	r3, r3
 8002164:	2b01      	cmp	r3, #1
 8002166:	d102      	bne.n	800216e <HAL_RCC_ClockConfig+0xa6>
 8002168:	4b6f      	ldr	r3, [pc, #444]	; (8002328 <HAL_RCC_ClockConfig+0x260>)
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	e00f      	b.n	800218e <HAL_RCC_ClockConfig+0xc6>
 800216e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002172:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002174:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002176:	fa93 f3a3 	rbit	r3, r3
 800217a:	667b      	str	r3, [r7, #100]	; 0x64
 800217c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002180:	663b      	str	r3, [r7, #96]	; 0x60
 8002182:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002184:	fa93 f3a3 	rbit	r3, r3
 8002188:	65fb      	str	r3, [r7, #92]	; 0x5c
 800218a:	4b67      	ldr	r3, [pc, #412]	; (8002328 <HAL_RCC_ClockConfig+0x260>)
 800218c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800218e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002192:	65ba      	str	r2, [r7, #88]	; 0x58
 8002194:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002196:	fa92 f2a2 	rbit	r2, r2
 800219a:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 800219c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800219e:	fab2 f282 	clz	r2, r2
 80021a2:	b2d2      	uxtb	r2, r2
 80021a4:	f042 0220 	orr.w	r2, r2, #32
 80021a8:	b2d2      	uxtb	r2, r2
 80021aa:	f002 021f 	and.w	r2, r2, #31
 80021ae:	2101      	movs	r1, #1
 80021b0:	fa01 f202 	lsl.w	r2, r1, r2
 80021b4:	4013      	ands	r3, r2
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d17b      	bne.n	80022b2 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80021ba:	2301      	movs	r3, #1
 80021bc:	e0f3      	b.n	80023a6 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	685b      	ldr	r3, [r3, #4]
 80021c2:	2b02      	cmp	r3, #2
 80021c4:	d13c      	bne.n	8002240 <HAL_RCC_ClockConfig+0x178>
 80021c6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80021ca:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021cc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80021ce:	fa93 f3a3 	rbit	r3, r3
 80021d2:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80021d4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80021d6:	fab3 f383 	clz	r3, r3
 80021da:	b2db      	uxtb	r3, r3
 80021dc:	095b      	lsrs	r3, r3, #5
 80021de:	b2db      	uxtb	r3, r3
 80021e0:	f043 0301 	orr.w	r3, r3, #1
 80021e4:	b2db      	uxtb	r3, r3
 80021e6:	2b01      	cmp	r3, #1
 80021e8:	d102      	bne.n	80021f0 <HAL_RCC_ClockConfig+0x128>
 80021ea:	4b4f      	ldr	r3, [pc, #316]	; (8002328 <HAL_RCC_ClockConfig+0x260>)
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	e00f      	b.n	8002210 <HAL_RCC_ClockConfig+0x148>
 80021f0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80021f4:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021f6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80021f8:	fa93 f3a3 	rbit	r3, r3
 80021fc:	647b      	str	r3, [r7, #68]	; 0x44
 80021fe:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002202:	643b      	str	r3, [r7, #64]	; 0x40
 8002204:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002206:	fa93 f3a3 	rbit	r3, r3
 800220a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800220c:	4b46      	ldr	r3, [pc, #280]	; (8002328 <HAL_RCC_ClockConfig+0x260>)
 800220e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002210:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002214:	63ba      	str	r2, [r7, #56]	; 0x38
 8002216:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002218:	fa92 f2a2 	rbit	r2, r2
 800221c:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 800221e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002220:	fab2 f282 	clz	r2, r2
 8002224:	b2d2      	uxtb	r2, r2
 8002226:	f042 0220 	orr.w	r2, r2, #32
 800222a:	b2d2      	uxtb	r2, r2
 800222c:	f002 021f 	and.w	r2, r2, #31
 8002230:	2101      	movs	r1, #1
 8002232:	fa01 f202 	lsl.w	r2, r1, r2
 8002236:	4013      	ands	r3, r2
 8002238:	2b00      	cmp	r3, #0
 800223a:	d13a      	bne.n	80022b2 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800223c:	2301      	movs	r3, #1
 800223e:	e0b2      	b.n	80023a6 <HAL_RCC_ClockConfig+0x2de>
 8002240:	2302      	movs	r3, #2
 8002242:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002244:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002246:	fa93 f3a3 	rbit	r3, r3
 800224a:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 800224c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800224e:	fab3 f383 	clz	r3, r3
 8002252:	b2db      	uxtb	r3, r3
 8002254:	095b      	lsrs	r3, r3, #5
 8002256:	b2db      	uxtb	r3, r3
 8002258:	f043 0301 	orr.w	r3, r3, #1
 800225c:	b2db      	uxtb	r3, r3
 800225e:	2b01      	cmp	r3, #1
 8002260:	d102      	bne.n	8002268 <HAL_RCC_ClockConfig+0x1a0>
 8002262:	4b31      	ldr	r3, [pc, #196]	; (8002328 <HAL_RCC_ClockConfig+0x260>)
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	e00d      	b.n	8002284 <HAL_RCC_ClockConfig+0x1bc>
 8002268:	2302      	movs	r3, #2
 800226a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800226c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800226e:	fa93 f3a3 	rbit	r3, r3
 8002272:	627b      	str	r3, [r7, #36]	; 0x24
 8002274:	2302      	movs	r3, #2
 8002276:	623b      	str	r3, [r7, #32]
 8002278:	6a3b      	ldr	r3, [r7, #32]
 800227a:	fa93 f3a3 	rbit	r3, r3
 800227e:	61fb      	str	r3, [r7, #28]
 8002280:	4b29      	ldr	r3, [pc, #164]	; (8002328 <HAL_RCC_ClockConfig+0x260>)
 8002282:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002284:	2202      	movs	r2, #2
 8002286:	61ba      	str	r2, [r7, #24]
 8002288:	69ba      	ldr	r2, [r7, #24]
 800228a:	fa92 f2a2 	rbit	r2, r2
 800228e:	617a      	str	r2, [r7, #20]
  return result;
 8002290:	697a      	ldr	r2, [r7, #20]
 8002292:	fab2 f282 	clz	r2, r2
 8002296:	b2d2      	uxtb	r2, r2
 8002298:	f042 0220 	orr.w	r2, r2, #32
 800229c:	b2d2      	uxtb	r2, r2
 800229e:	f002 021f 	and.w	r2, r2, #31
 80022a2:	2101      	movs	r1, #1
 80022a4:	fa01 f202 	lsl.w	r2, r1, r2
 80022a8:	4013      	ands	r3, r2
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d101      	bne.n	80022b2 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80022ae:	2301      	movs	r3, #1
 80022b0:	e079      	b.n	80023a6 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80022b2:	4b1d      	ldr	r3, [pc, #116]	; (8002328 <HAL_RCC_ClockConfig+0x260>)
 80022b4:	685b      	ldr	r3, [r3, #4]
 80022b6:	f023 0203 	bic.w	r2, r3, #3
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	685b      	ldr	r3, [r3, #4]
 80022be:	491a      	ldr	r1, [pc, #104]	; (8002328 <HAL_RCC_ClockConfig+0x260>)
 80022c0:	4313      	orrs	r3, r2
 80022c2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80022c4:	f7fe fa0e 	bl	80006e4 <HAL_GetTick>
 80022c8:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80022ca:	e00a      	b.n	80022e2 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80022cc:	f7fe fa0a 	bl	80006e4 <HAL_GetTick>
 80022d0:	4602      	mov	r2, r0
 80022d2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80022d4:	1ad3      	subs	r3, r2, r3
 80022d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80022da:	4293      	cmp	r3, r2
 80022dc:	d901      	bls.n	80022e2 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 80022de:	2303      	movs	r3, #3
 80022e0:	e061      	b.n	80023a6 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80022e2:	4b11      	ldr	r3, [pc, #68]	; (8002328 <HAL_RCC_ClockConfig+0x260>)
 80022e4:	685b      	ldr	r3, [r3, #4]
 80022e6:	f003 020c 	and.w	r2, r3, #12
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	685b      	ldr	r3, [r3, #4]
 80022ee:	009b      	lsls	r3, r3, #2
 80022f0:	429a      	cmp	r2, r3
 80022f2:	d1eb      	bne.n	80022cc <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80022f4:	4b0b      	ldr	r3, [pc, #44]	; (8002324 <HAL_RCC_ClockConfig+0x25c>)
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	f003 0307 	and.w	r3, r3, #7
 80022fc:	683a      	ldr	r2, [r7, #0]
 80022fe:	429a      	cmp	r2, r3
 8002300:	d214      	bcs.n	800232c <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002302:	4b08      	ldr	r3, [pc, #32]	; (8002324 <HAL_RCC_ClockConfig+0x25c>)
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	f023 0207 	bic.w	r2, r3, #7
 800230a:	4906      	ldr	r1, [pc, #24]	; (8002324 <HAL_RCC_ClockConfig+0x25c>)
 800230c:	683b      	ldr	r3, [r7, #0]
 800230e:	4313      	orrs	r3, r2
 8002310:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002312:	4b04      	ldr	r3, [pc, #16]	; (8002324 <HAL_RCC_ClockConfig+0x25c>)
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	f003 0307 	and.w	r3, r3, #7
 800231a:	683a      	ldr	r2, [r7, #0]
 800231c:	429a      	cmp	r2, r3
 800231e:	d005      	beq.n	800232c <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8002320:	2301      	movs	r3, #1
 8002322:	e040      	b.n	80023a6 <HAL_RCC_ClockConfig+0x2de>
 8002324:	40022000 	.word	0x40022000
 8002328:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	f003 0304 	and.w	r3, r3, #4
 8002334:	2b00      	cmp	r3, #0
 8002336:	d008      	beq.n	800234a <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002338:	4b1d      	ldr	r3, [pc, #116]	; (80023b0 <HAL_RCC_ClockConfig+0x2e8>)
 800233a:	685b      	ldr	r3, [r3, #4]
 800233c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	68db      	ldr	r3, [r3, #12]
 8002344:	491a      	ldr	r1, [pc, #104]	; (80023b0 <HAL_RCC_ClockConfig+0x2e8>)
 8002346:	4313      	orrs	r3, r2
 8002348:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	f003 0308 	and.w	r3, r3, #8
 8002352:	2b00      	cmp	r3, #0
 8002354:	d009      	beq.n	800236a <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002356:	4b16      	ldr	r3, [pc, #88]	; (80023b0 <HAL_RCC_ClockConfig+0x2e8>)
 8002358:	685b      	ldr	r3, [r3, #4]
 800235a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	691b      	ldr	r3, [r3, #16]
 8002362:	00db      	lsls	r3, r3, #3
 8002364:	4912      	ldr	r1, [pc, #72]	; (80023b0 <HAL_RCC_ClockConfig+0x2e8>)
 8002366:	4313      	orrs	r3, r2
 8002368:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800236a:	f000 f829 	bl	80023c0 <HAL_RCC_GetSysClockFreq>
 800236e:	4601      	mov	r1, r0
 8002370:	4b0f      	ldr	r3, [pc, #60]	; (80023b0 <HAL_RCC_ClockConfig+0x2e8>)
 8002372:	685b      	ldr	r3, [r3, #4]
 8002374:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002378:	22f0      	movs	r2, #240	; 0xf0
 800237a:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800237c:	693a      	ldr	r2, [r7, #16]
 800237e:	fa92 f2a2 	rbit	r2, r2
 8002382:	60fa      	str	r2, [r7, #12]
  return result;
 8002384:	68fa      	ldr	r2, [r7, #12]
 8002386:	fab2 f282 	clz	r2, r2
 800238a:	b2d2      	uxtb	r2, r2
 800238c:	40d3      	lsrs	r3, r2
 800238e:	4a09      	ldr	r2, [pc, #36]	; (80023b4 <HAL_RCC_ClockConfig+0x2ec>)
 8002390:	5cd3      	ldrb	r3, [r2, r3]
 8002392:	fa21 f303 	lsr.w	r3, r1, r3
 8002396:	4a08      	ldr	r2, [pc, #32]	; (80023b8 <HAL_RCC_ClockConfig+0x2f0>)
 8002398:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 800239a:	4b08      	ldr	r3, [pc, #32]	; (80023bc <HAL_RCC_ClockConfig+0x2f4>)
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	4618      	mov	r0, r3
 80023a0:	f7fe f95c 	bl	800065c <HAL_InitTick>
  
  return HAL_OK;
 80023a4:	2300      	movs	r3, #0
}
 80023a6:	4618      	mov	r0, r3
 80023a8:	3778      	adds	r7, #120	; 0x78
 80023aa:	46bd      	mov	sp, r7
 80023ac:	bd80      	pop	{r7, pc}
 80023ae:	bf00      	nop
 80023b0:	40021000 	.word	0x40021000
 80023b4:	08002940 	.word	0x08002940
 80023b8:	20000000 	.word	0x20000000
 80023bc:	20000004 	.word	0x20000004

080023c0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80023c0:	b480      	push	{r7}
 80023c2:	b08b      	sub	sp, #44	; 0x2c
 80023c4:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80023c6:	2300      	movs	r3, #0
 80023c8:	61fb      	str	r3, [r7, #28]
 80023ca:	2300      	movs	r3, #0
 80023cc:	61bb      	str	r3, [r7, #24]
 80023ce:	2300      	movs	r3, #0
 80023d0:	627b      	str	r3, [r7, #36]	; 0x24
 80023d2:	2300      	movs	r3, #0
 80023d4:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80023d6:	2300      	movs	r3, #0
 80023d8:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 80023da:	4b2a      	ldr	r3, [pc, #168]	; (8002484 <HAL_RCC_GetSysClockFreq+0xc4>)
 80023dc:	685b      	ldr	r3, [r3, #4]
 80023de:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80023e0:	69fb      	ldr	r3, [r7, #28]
 80023e2:	f003 030c 	and.w	r3, r3, #12
 80023e6:	2b04      	cmp	r3, #4
 80023e8:	d002      	beq.n	80023f0 <HAL_RCC_GetSysClockFreq+0x30>
 80023ea:	2b08      	cmp	r3, #8
 80023ec:	d003      	beq.n	80023f6 <HAL_RCC_GetSysClockFreq+0x36>
 80023ee:	e03f      	b.n	8002470 <HAL_RCC_GetSysClockFreq+0xb0>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80023f0:	4b25      	ldr	r3, [pc, #148]	; (8002488 <HAL_RCC_GetSysClockFreq+0xc8>)
 80023f2:	623b      	str	r3, [r7, #32]
      break;
 80023f4:	e03f      	b.n	8002476 <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 80023f6:	69fb      	ldr	r3, [r7, #28]
 80023f8:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 80023fc:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8002400:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002402:	68ba      	ldr	r2, [r7, #8]
 8002404:	fa92 f2a2 	rbit	r2, r2
 8002408:	607a      	str	r2, [r7, #4]
  return result;
 800240a:	687a      	ldr	r2, [r7, #4]
 800240c:	fab2 f282 	clz	r2, r2
 8002410:	b2d2      	uxtb	r2, r2
 8002412:	40d3      	lsrs	r3, r2
 8002414:	4a1d      	ldr	r2, [pc, #116]	; (800248c <HAL_RCC_GetSysClockFreq+0xcc>)
 8002416:	5cd3      	ldrb	r3, [r2, r3]
 8002418:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 800241a:	4b1a      	ldr	r3, [pc, #104]	; (8002484 <HAL_RCC_GetSysClockFreq+0xc4>)
 800241c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800241e:	f003 030f 	and.w	r3, r3, #15
 8002422:	220f      	movs	r2, #15
 8002424:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002426:	693a      	ldr	r2, [r7, #16]
 8002428:	fa92 f2a2 	rbit	r2, r2
 800242c:	60fa      	str	r2, [r7, #12]
  return result;
 800242e:	68fa      	ldr	r2, [r7, #12]
 8002430:	fab2 f282 	clz	r2, r2
 8002434:	b2d2      	uxtb	r2, r2
 8002436:	40d3      	lsrs	r3, r2
 8002438:	4a15      	ldr	r2, [pc, #84]	; (8002490 <HAL_RCC_GetSysClockFreq+0xd0>)
 800243a:	5cd3      	ldrb	r3, [r2, r3]
 800243c:	61bb      	str	r3, [r7, #24]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 800243e:	69fb      	ldr	r3, [r7, #28]
 8002440:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002444:	2b00      	cmp	r3, #0
 8002446:	d008      	beq.n	800245a <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002448:	4a0f      	ldr	r2, [pc, #60]	; (8002488 <HAL_RCC_GetSysClockFreq+0xc8>)
 800244a:	69bb      	ldr	r3, [r7, #24]
 800244c:	fbb2 f2f3 	udiv	r2, r2, r3
 8002450:	697b      	ldr	r3, [r7, #20]
 8002452:	fb02 f303 	mul.w	r3, r2, r3
 8002456:	627b      	str	r3, [r7, #36]	; 0x24
 8002458:	e007      	b.n	800246a <HAL_RCC_GetSysClockFreq+0xaa>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800245a:	4a0b      	ldr	r2, [pc, #44]	; (8002488 <HAL_RCC_GetSysClockFreq+0xc8>)
 800245c:	69bb      	ldr	r3, [r7, #24]
 800245e:	fbb2 f2f3 	udiv	r2, r2, r3
 8002462:	697b      	ldr	r3, [r7, #20]
 8002464:	fb02 f303 	mul.w	r3, r2, r3
 8002468:	627b      	str	r3, [r7, #36]	; 0x24
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 800246a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800246c:	623b      	str	r3, [r7, #32]
      break;
 800246e:	e002      	b.n	8002476 <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002470:	4b05      	ldr	r3, [pc, #20]	; (8002488 <HAL_RCC_GetSysClockFreq+0xc8>)
 8002472:	623b      	str	r3, [r7, #32]
      break;
 8002474:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002476:	6a3b      	ldr	r3, [r7, #32]
}
 8002478:	4618      	mov	r0, r3
 800247a:	372c      	adds	r7, #44	; 0x2c
 800247c:	46bd      	mov	sp, r7
 800247e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002482:	4770      	bx	lr
 8002484:	40021000 	.word	0x40021000
 8002488:	007a1200 	.word	0x007a1200
 800248c:	08002950 	.word	0x08002950
 8002490:	08002960 	.word	0x08002960

08002494 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002494:	b580      	push	{r7, lr}
 8002496:	b092      	sub	sp, #72	; 0x48
 8002498:	af00      	add	r7, sp, #0
 800249a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800249c:	2300      	movs	r3, #0
 800249e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 80024a0:	2300      	movs	r3, #0
 80024a2:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 80024a4:	2300      	movs	r3, #0
 80024a6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	f000 80d4 	beq.w	8002660 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80024b8:	4b4e      	ldr	r3, [pc, #312]	; (80025f4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80024ba:	69db      	ldr	r3, [r3, #28]
 80024bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d10e      	bne.n	80024e2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80024c4:	4b4b      	ldr	r3, [pc, #300]	; (80025f4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80024c6:	69db      	ldr	r3, [r3, #28]
 80024c8:	4a4a      	ldr	r2, [pc, #296]	; (80025f4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80024ca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80024ce:	61d3      	str	r3, [r2, #28]
 80024d0:	4b48      	ldr	r3, [pc, #288]	; (80025f4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80024d2:	69db      	ldr	r3, [r3, #28]
 80024d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024d8:	60bb      	str	r3, [r7, #8]
 80024da:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80024dc:	2301      	movs	r3, #1
 80024de:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024e2:	4b45      	ldr	r3, [pc, #276]	; (80025f8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d118      	bne.n	8002520 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80024ee:	4b42      	ldr	r3, [pc, #264]	; (80025f8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	4a41      	ldr	r2, [pc, #260]	; (80025f8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80024f4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80024f8:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80024fa:	f7fe f8f3 	bl	80006e4 <HAL_GetTick>
 80024fe:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002500:	e008      	b.n	8002514 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002502:	f7fe f8ef 	bl	80006e4 <HAL_GetTick>
 8002506:	4602      	mov	r2, r0
 8002508:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800250a:	1ad3      	subs	r3, r2, r3
 800250c:	2b64      	cmp	r3, #100	; 0x64
 800250e:	d901      	bls.n	8002514 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8002510:	2303      	movs	r3, #3
 8002512:	e1d6      	b.n	80028c2 <HAL_RCCEx_PeriphCLKConfig+0x42e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002514:	4b38      	ldr	r3, [pc, #224]	; (80025f8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800251c:	2b00      	cmp	r3, #0
 800251e:	d0f0      	beq.n	8002502 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002520:	4b34      	ldr	r3, [pc, #208]	; (80025f4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002522:	6a1b      	ldr	r3, [r3, #32]
 8002524:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002528:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800252a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800252c:	2b00      	cmp	r3, #0
 800252e:	f000 8084 	beq.w	800263a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	685b      	ldr	r3, [r3, #4]
 8002536:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800253a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800253c:	429a      	cmp	r2, r3
 800253e:	d07c      	beq.n	800263a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002540:	4b2c      	ldr	r3, [pc, #176]	; (80025f4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002542:	6a1b      	ldr	r3, [r3, #32]
 8002544:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002548:	63fb      	str	r3, [r7, #60]	; 0x3c
 800254a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800254e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002550:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002552:	fa93 f3a3 	rbit	r3, r3
 8002556:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002558:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800255a:	fab3 f383 	clz	r3, r3
 800255e:	b2db      	uxtb	r3, r3
 8002560:	461a      	mov	r2, r3
 8002562:	4b26      	ldr	r3, [pc, #152]	; (80025fc <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002564:	4413      	add	r3, r2
 8002566:	009b      	lsls	r3, r3, #2
 8002568:	461a      	mov	r2, r3
 800256a:	2301      	movs	r3, #1
 800256c:	6013      	str	r3, [r2, #0]
 800256e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002572:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002574:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002576:	fa93 f3a3 	rbit	r3, r3
 800257a:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 800257c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 800257e:	fab3 f383 	clz	r3, r3
 8002582:	b2db      	uxtb	r3, r3
 8002584:	461a      	mov	r2, r3
 8002586:	4b1d      	ldr	r3, [pc, #116]	; (80025fc <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002588:	4413      	add	r3, r2
 800258a:	009b      	lsls	r3, r3, #2
 800258c:	461a      	mov	r2, r3
 800258e:	2300      	movs	r3, #0
 8002590:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002592:	4a18      	ldr	r2, [pc, #96]	; (80025f4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002594:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002596:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002598:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800259a:	f003 0301 	and.w	r3, r3, #1
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d04b      	beq.n	800263a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025a2:	f7fe f89f 	bl	80006e4 <HAL_GetTick>
 80025a6:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80025a8:	e00a      	b.n	80025c0 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80025aa:	f7fe f89b 	bl	80006e4 <HAL_GetTick>
 80025ae:	4602      	mov	r2, r0
 80025b0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80025b2:	1ad3      	subs	r3, r2, r3
 80025b4:	f241 3288 	movw	r2, #5000	; 0x1388
 80025b8:	4293      	cmp	r3, r2
 80025ba:	d901      	bls.n	80025c0 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 80025bc:	2303      	movs	r3, #3
 80025be:	e180      	b.n	80028c2 <HAL_RCCEx_PeriphCLKConfig+0x42e>
 80025c0:	2302      	movs	r3, #2
 80025c2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025c6:	fa93 f3a3 	rbit	r3, r3
 80025ca:	627b      	str	r3, [r7, #36]	; 0x24
 80025cc:	2302      	movs	r3, #2
 80025ce:	623b      	str	r3, [r7, #32]
 80025d0:	6a3b      	ldr	r3, [r7, #32]
 80025d2:	fa93 f3a3 	rbit	r3, r3
 80025d6:	61fb      	str	r3, [r7, #28]
  return result;
 80025d8:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80025da:	fab3 f383 	clz	r3, r3
 80025de:	b2db      	uxtb	r3, r3
 80025e0:	095b      	lsrs	r3, r3, #5
 80025e2:	b2db      	uxtb	r3, r3
 80025e4:	f043 0302 	orr.w	r3, r3, #2
 80025e8:	b2db      	uxtb	r3, r3
 80025ea:	2b02      	cmp	r3, #2
 80025ec:	d108      	bne.n	8002600 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 80025ee:	4b01      	ldr	r3, [pc, #4]	; (80025f4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80025f0:	6a1b      	ldr	r3, [r3, #32]
 80025f2:	e00d      	b.n	8002610 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 80025f4:	40021000 	.word	0x40021000
 80025f8:	40007000 	.word	0x40007000
 80025fc:	10908100 	.word	0x10908100
 8002600:	2302      	movs	r3, #2
 8002602:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002604:	69bb      	ldr	r3, [r7, #24]
 8002606:	fa93 f3a3 	rbit	r3, r3
 800260a:	617b      	str	r3, [r7, #20]
 800260c:	4b9a      	ldr	r3, [pc, #616]	; (8002878 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800260e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002610:	2202      	movs	r2, #2
 8002612:	613a      	str	r2, [r7, #16]
 8002614:	693a      	ldr	r2, [r7, #16]
 8002616:	fa92 f2a2 	rbit	r2, r2
 800261a:	60fa      	str	r2, [r7, #12]
  return result;
 800261c:	68fa      	ldr	r2, [r7, #12]
 800261e:	fab2 f282 	clz	r2, r2
 8002622:	b2d2      	uxtb	r2, r2
 8002624:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002628:	b2d2      	uxtb	r2, r2
 800262a:	f002 021f 	and.w	r2, r2, #31
 800262e:	2101      	movs	r1, #1
 8002630:	fa01 f202 	lsl.w	r2, r1, r2
 8002634:	4013      	ands	r3, r2
 8002636:	2b00      	cmp	r3, #0
 8002638:	d0b7      	beq.n	80025aa <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 800263a:	4b8f      	ldr	r3, [pc, #572]	; (8002878 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800263c:	6a1b      	ldr	r3, [r3, #32]
 800263e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	685b      	ldr	r3, [r3, #4]
 8002646:	498c      	ldr	r1, [pc, #560]	; (8002878 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002648:	4313      	orrs	r3, r2
 800264a:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800264c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8002650:	2b01      	cmp	r3, #1
 8002652:	d105      	bne.n	8002660 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002654:	4b88      	ldr	r3, [pc, #544]	; (8002878 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002656:	69db      	ldr	r3, [r3, #28]
 8002658:	4a87      	ldr	r2, [pc, #540]	; (8002878 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800265a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800265e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	f003 0301 	and.w	r3, r3, #1
 8002668:	2b00      	cmp	r3, #0
 800266a:	d008      	beq.n	800267e <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800266c:	4b82      	ldr	r3, [pc, #520]	; (8002878 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800266e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002670:	f023 0203 	bic.w	r2, r3, #3
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	689b      	ldr	r3, [r3, #8]
 8002678:	497f      	ldr	r1, [pc, #508]	; (8002878 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800267a:	4313      	orrs	r3, r2
 800267c:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	f003 0302 	and.w	r3, r3, #2
 8002686:	2b00      	cmp	r3, #0
 8002688:	d008      	beq.n	800269c <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800268a:	4b7b      	ldr	r3, [pc, #492]	; (8002878 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800268c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800268e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	68db      	ldr	r3, [r3, #12]
 8002696:	4978      	ldr	r1, [pc, #480]	; (8002878 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002698:	4313      	orrs	r3, r2
 800269a:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	f003 0304 	and.w	r3, r3, #4
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d008      	beq.n	80026ba <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80026a8:	4b73      	ldr	r3, [pc, #460]	; (8002878 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80026aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026ac:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	691b      	ldr	r3, [r3, #16]
 80026b4:	4970      	ldr	r1, [pc, #448]	; (8002878 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80026b6:	4313      	orrs	r3, r2
 80026b8:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	f003 0320 	and.w	r3, r3, #32
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d008      	beq.n	80026d8 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80026c6:	4b6c      	ldr	r3, [pc, #432]	; (8002878 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80026c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026ca:	f023 0210 	bic.w	r2, r3, #16
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	69db      	ldr	r3, [r3, #28]
 80026d2:	4969      	ldr	r1, [pc, #420]	; (8002878 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80026d4:	4313      	orrs	r3, r2
 80026d6:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d008      	beq.n	80026f6 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 80026e4:	4b64      	ldr	r3, [pc, #400]	; (8002878 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80026e6:	685b      	ldr	r3, [r3, #4]
 80026e8:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026f0:	4961      	ldr	r1, [pc, #388]	; (8002878 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80026f2:	4313      	orrs	r3, r2
 80026f4:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d008      	beq.n	8002714 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002702:	4b5d      	ldr	r3, [pc, #372]	; (8002878 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002704:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002706:	f023 0220 	bic.w	r2, r3, #32
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	6a1b      	ldr	r3, [r3, #32]
 800270e:	495a      	ldr	r1, [pc, #360]	; (8002878 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002710:	4313      	orrs	r3, r2
 8002712:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800271c:	2b00      	cmp	r3, #0
 800271e:	d008      	beq.n	8002732 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002720:	4b55      	ldr	r3, [pc, #340]	; (8002878 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002722:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002724:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800272c:	4952      	ldr	r1, [pc, #328]	; (8002878 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800272e:	4313      	orrs	r3, r2
 8002730:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	f003 0308 	and.w	r3, r3, #8
 800273a:	2b00      	cmp	r3, #0
 800273c:	d008      	beq.n	8002750 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800273e:	4b4e      	ldr	r3, [pc, #312]	; (8002878 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002740:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002742:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	695b      	ldr	r3, [r3, #20]
 800274a:	494b      	ldr	r1, [pc, #300]	; (8002878 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800274c:	4313      	orrs	r3, r2
 800274e:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	f003 0310 	and.w	r3, r3, #16
 8002758:	2b00      	cmp	r3, #0
 800275a:	d008      	beq.n	800276e <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800275c:	4b46      	ldr	r3, [pc, #280]	; (8002878 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800275e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002760:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	699b      	ldr	r3, [r3, #24]
 8002768:	4943      	ldr	r1, [pc, #268]	; (8002878 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800276a:	4313      	orrs	r3, r2
 800276c:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002776:	2b00      	cmp	r3, #0
 8002778:	d008      	beq.n	800278c <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800277a:	4b3f      	ldr	r3, [pc, #252]	; (8002878 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800277c:	685b      	ldr	r3, [r3, #4]
 800277e:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002786:	493c      	ldr	r1, [pc, #240]	; (8002878 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002788:	4313      	orrs	r3, r2
 800278a:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002794:	2b00      	cmp	r3, #0
 8002796:	d008      	beq.n	80027aa <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002798:	4b37      	ldr	r3, [pc, #220]	; (8002878 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800279a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800279c:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027a4:	4934      	ldr	r1, [pc, #208]	; (8002878 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80027a6:	4313      	orrs	r3, r2
 80027a8:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d008      	beq.n	80027c8 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 80027b6:	4b30      	ldr	r3, [pc, #192]	; (8002878 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80027b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027ba:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027c2:	492d      	ldr	r1, [pc, #180]	; (8002878 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80027c4:	4313      	orrs	r3, r2
 80027c6:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d008      	beq.n	80027e6 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80027d4:	4b28      	ldr	r3, [pc, #160]	; (8002878 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80027d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027d8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80027e0:	4925      	ldr	r1, [pc, #148]	; (8002878 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80027e2:	4313      	orrs	r3, r2
 80027e4:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d008      	beq.n	8002804 <HAL_RCCEx_PeriphCLKConfig+0x370>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 80027f2:	4b21      	ldr	r3, [pc, #132]	; (8002878 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80027f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027f6:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027fe:	491e      	ldr	r1, [pc, #120]	; (8002878 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002800:	4313      	orrs	r3, r2
 8002802:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800280c:	2b00      	cmp	r3, #0
 800280e:	d008      	beq.n	8002822 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 8002810:	4b19      	ldr	r3, [pc, #100]	; (8002878 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002812:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002814:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800281c:	4916      	ldr	r1, [pc, #88]	; (8002878 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800281e:	4313      	orrs	r3, r2
 8002820:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800282a:	2b00      	cmp	r3, #0
 800282c:	d008      	beq.n	8002840 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 800282e:	4b12      	ldr	r3, [pc, #72]	; (8002878 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002830:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002832:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800283a:	490f      	ldr	r1, [pc, #60]	; (8002878 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800283c:	4313      	orrs	r3, r2
 800283e:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002848:	2b00      	cmp	r3, #0
 800284a:	d008      	beq.n	800285e <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 800284c:	4b0a      	ldr	r3, [pc, #40]	; (8002878 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800284e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002850:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002858:	4907      	ldr	r1, [pc, #28]	; (8002878 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800285a:	4313      	orrs	r3, r2
 800285c:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002866:	2b00      	cmp	r3, #0
 8002868:	d00c      	beq.n	8002884 <HAL_RCCEx_PeriphCLKConfig+0x3f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 800286a:	4b03      	ldr	r3, [pc, #12]	; (8002878 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800286c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800286e:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	e002      	b.n	800287c <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 8002876:	bf00      	nop
 8002878:	40021000 	.word	0x40021000
 800287c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800287e:	4913      	ldr	r1, [pc, #76]	; (80028cc <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002880:	4313      	orrs	r3, r2
 8002882:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800288c:	2b00      	cmp	r3, #0
 800288e:	d008      	beq.n	80028a2 <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8002890:	4b0e      	ldr	r3, [pc, #56]	; (80028cc <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002892:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002894:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800289c:	490b      	ldr	r1, [pc, #44]	; (80028cc <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800289e:	4313      	orrs	r3, r2
 80028a0:	630b      	str	r3, [r1, #48]	; 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d008      	beq.n	80028c0 <HAL_RCCEx_PeriphCLKConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 80028ae:	4b07      	ldr	r3, [pc, #28]	; (80028cc <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80028b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028b2:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80028ba:	4904      	ldr	r1, [pc, #16]	; (80028cc <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80028bc:	4313      	orrs	r3, r2
 80028be:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 80028c0:	2300      	movs	r3, #0
}
 80028c2:	4618      	mov	r0, r3
 80028c4:	3748      	adds	r7, #72	; 0x48
 80028c6:	46bd      	mov	sp, r7
 80028c8:	bd80      	pop	{r7, pc}
 80028ca:	bf00      	nop
 80028cc:	40021000 	.word	0x40021000

080028d0 <memset>:
 80028d0:	4402      	add	r2, r0
 80028d2:	4603      	mov	r3, r0
 80028d4:	4293      	cmp	r3, r2
 80028d6:	d100      	bne.n	80028da <memset+0xa>
 80028d8:	4770      	bx	lr
 80028da:	f803 1b01 	strb.w	r1, [r3], #1
 80028de:	e7f9      	b.n	80028d4 <memset+0x4>

080028e0 <__libc_init_array>:
 80028e0:	b570      	push	{r4, r5, r6, lr}
 80028e2:	4d0d      	ldr	r5, [pc, #52]	; (8002918 <__libc_init_array+0x38>)
 80028e4:	4c0d      	ldr	r4, [pc, #52]	; (800291c <__libc_init_array+0x3c>)
 80028e6:	1b64      	subs	r4, r4, r5
 80028e8:	10a4      	asrs	r4, r4, #2
 80028ea:	2600      	movs	r6, #0
 80028ec:	42a6      	cmp	r6, r4
 80028ee:	d109      	bne.n	8002904 <__libc_init_array+0x24>
 80028f0:	4d0b      	ldr	r5, [pc, #44]	; (8002920 <__libc_init_array+0x40>)
 80028f2:	4c0c      	ldr	r4, [pc, #48]	; (8002924 <__libc_init_array+0x44>)
 80028f4:	f000 f818 	bl	8002928 <_init>
 80028f8:	1b64      	subs	r4, r4, r5
 80028fa:	10a4      	asrs	r4, r4, #2
 80028fc:	2600      	movs	r6, #0
 80028fe:	42a6      	cmp	r6, r4
 8002900:	d105      	bne.n	800290e <__libc_init_array+0x2e>
 8002902:	bd70      	pop	{r4, r5, r6, pc}
 8002904:	f855 3b04 	ldr.w	r3, [r5], #4
 8002908:	4798      	blx	r3
 800290a:	3601      	adds	r6, #1
 800290c:	e7ee      	b.n	80028ec <__libc_init_array+0xc>
 800290e:	f855 3b04 	ldr.w	r3, [r5], #4
 8002912:	4798      	blx	r3
 8002914:	3601      	adds	r6, #1
 8002916:	e7f2      	b.n	80028fe <__libc_init_array+0x1e>
 8002918:	08002970 	.word	0x08002970
 800291c:	08002970 	.word	0x08002970
 8002920:	08002970 	.word	0x08002970
 8002924:	08002974 	.word	0x08002974

08002928 <_init>:
 8002928:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800292a:	bf00      	nop
 800292c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800292e:	bc08      	pop	{r3}
 8002930:	469e      	mov	lr, r3
 8002932:	4770      	bx	lr

08002934 <_fini>:
 8002934:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002936:	bf00      	nop
 8002938:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800293a:	bc08      	pop	{r3}
 800293c:	469e      	mov	lr, r3
 800293e:	4770      	bx	lr
