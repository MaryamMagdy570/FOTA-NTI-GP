
GATEWAY__.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008118  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000080  080082b8  080082b8  000182b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008338  08008338  00020078  2**0
                  CONTENTS
  4 .ARM          00000000  08008338  08008338  00020078  2**0
                  CONTENTS
  5 .preinit_array 00000000  08008338  08008338  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008338  08008338  00018338  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800833c  0800833c  0001833c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  08008340  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020078  2**0
                  CONTENTS
 10 .bss          00001f14  20000078  20000078  00020078  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20001f8c  20001f8c  00020078  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY
 14 .debug_info   0001ff02  00000000  00000000  000200eb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00004330  00000000  00000000  0003ffed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001a70  00000000  00000000  00044320  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 000014b1  00000000  00000000  00045d90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  000045e1  00000000  00000000  00047241  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00022978  00000000  00000000  0004b822  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000d7b46  00000000  00000000  0006e19a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00007270  00000000  00000000  00145ce0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000058  00000000  00000000  0014cf50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000078 	.word	0x20000078
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080082a0 	.word	0x080082a0

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000007c 	.word	0x2000007c
 80001dc:	080082a0 	.word	0x080082a0

080001e0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001e0:	b580      	push	{r7, lr}
 80001e2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001e4:	f000 fd3e 	bl	8000c64 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001e8:	f000 f822 	bl	8000230 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001ec:	f000 f99a 	bl	8000524 <MX_GPIO_Init>
  MX_DMA_Init();
 80001f0:	f000 f952 	bl	8000498 <MX_DMA_Init>
  MX_I2C1_Init();
 80001f4:	f000 f872 	bl	80002dc <MX_I2C1_Init>
  MX_SPI2_Init();
 80001f8:	f000 f8b0 	bl	800035c <MX_SPI2_Init>
  MX_USART1_UART_Init();
 80001fc:	f000 f8ec 	bl	80003d8 <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 8000200:	f000 f91a 	bl	8000438 <MX_USART3_UART_Init>
  MX_FATFS_Init();
 8000204:	f004 fbc2 	bl	800498c <MX_FATFS_Init>


  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000208:	f005 f95e 	bl	80054c8 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 800020c:	4a05      	ldr	r2, [pc, #20]	; (8000224 <main+0x44>)
 800020e:	2100      	movs	r1, #0
 8000210:	4805      	ldr	r0, [pc, #20]	; (8000228 <main+0x48>)
 8000212:	f005 f9c1 	bl	8005598 <osThreadNew>
 8000216:	4603      	mov	r3, r0
 8000218:	4a04      	ldr	r2, [pc, #16]	; (800022c <main+0x4c>)
 800021a:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 800021c:	f005 f988 	bl	8005530 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000220:	e7fe      	b.n	8000220 <main+0x40>
 8000222:	bf00      	nop
 8000224:	080082dc 	.word	0x080082dc
 8000228:	080005d1 	.word	0x080005d1
 800022c:	200003f4 	.word	0x200003f4

08000230 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000230:	b580      	push	{r7, lr}
 8000232:	b0a6      	sub	sp, #152	; 0x98
 8000234:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000236:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800023a:	2228      	movs	r2, #40	; 0x28
 800023c:	2100      	movs	r1, #0
 800023e:	4618      	mov	r0, r3
 8000240:	f007 ff44 	bl	80080cc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000244:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000248:	2200      	movs	r2, #0
 800024a:	601a      	str	r2, [r3, #0]
 800024c:	605a      	str	r2, [r3, #4]
 800024e:	609a      	str	r2, [r3, #8]
 8000250:	60da      	str	r2, [r3, #12]
 8000252:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000254:	1d3b      	adds	r3, r7, #4
 8000256:	2258      	movs	r2, #88	; 0x58
 8000258:	2100      	movs	r1, #0
 800025a:	4618      	mov	r0, r3
 800025c:	f007 ff36 	bl	80080cc <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000260:	2302      	movs	r3, #2
 8000262:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000264:	2301      	movs	r3, #1
 8000266:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000268:	2310      	movs	r3, #16
 800026a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800026e:	2300      	movs	r3, #0
 8000270:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000274:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000278:	4618      	mov	r0, r3
 800027a:	f001 f9f9 	bl	8001670 <HAL_RCC_OscConfig>
 800027e:	4603      	mov	r3, r0
 8000280:	2b00      	cmp	r3, #0
 8000282:	d001      	beq.n	8000288 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000284:	f000 f9be 	bl	8000604 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000288:	230f      	movs	r3, #15
 800028a:	65fb      	str	r3, [r7, #92]	; 0x5c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800028c:	2300      	movs	r3, #0
 800028e:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000290:	2300      	movs	r3, #0
 8000292:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000294:	2300      	movs	r3, #0
 8000296:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000298:	2300      	movs	r3, #0
 800029a:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800029c:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80002a0:	2100      	movs	r1, #0
 80002a2:	4618      	mov	r0, r3
 80002a4:	f002 fa38 	bl	8002718 <HAL_RCC_ClockConfig>
 80002a8:	4603      	mov	r3, r0
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	d001      	beq.n	80002b2 <SystemClock_Config+0x82>
  {
    Error_Handler();
 80002ae:	f000 f9a9 	bl	8000604 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_USART3
 80002b2:	2325      	movs	r3, #37	; 0x25
 80002b4:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_I2C1;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80002b6:	2300      	movs	r3, #0
 80002b8:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80002ba:	2300      	movs	r3, #0
 80002bc:	617b      	str	r3, [r7, #20]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 80002be:	2300      	movs	r3, #0
 80002c0:	623b      	str	r3, [r7, #32]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80002c2:	1d3b      	adds	r3, r7, #4
 80002c4:	4618      	mov	r0, r3
 80002c6:	f002 fc8f 	bl	8002be8 <HAL_RCCEx_PeriphCLKConfig>
 80002ca:	4603      	mov	r3, r0
 80002cc:	2b00      	cmp	r3, #0
 80002ce:	d001      	beq.n	80002d4 <SystemClock_Config+0xa4>
  {
    Error_Handler();
 80002d0:	f000 f998 	bl	8000604 <Error_Handler>
  }
}
 80002d4:	bf00      	nop
 80002d6:	3798      	adds	r7, #152	; 0x98
 80002d8:	46bd      	mov	sp, r7
 80002da:	bd80      	pop	{r7, pc}

080002dc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80002dc:	b580      	push	{r7, lr}
 80002de:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80002e0:	4b1b      	ldr	r3, [pc, #108]	; (8000350 <MX_I2C1_Init+0x74>)
 80002e2:	4a1c      	ldr	r2, [pc, #112]	; (8000354 <MX_I2C1_Init+0x78>)
 80002e4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 80002e6:	4b1a      	ldr	r3, [pc, #104]	; (8000350 <MX_I2C1_Init+0x74>)
 80002e8:	4a1b      	ldr	r2, [pc, #108]	; (8000358 <MX_I2C1_Init+0x7c>)
 80002ea:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80002ec:	4b18      	ldr	r3, [pc, #96]	; (8000350 <MX_I2C1_Init+0x74>)
 80002ee:	2200      	movs	r2, #0
 80002f0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80002f2:	4b17      	ldr	r3, [pc, #92]	; (8000350 <MX_I2C1_Init+0x74>)
 80002f4:	2201      	movs	r2, #1
 80002f6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80002f8:	4b15      	ldr	r3, [pc, #84]	; (8000350 <MX_I2C1_Init+0x74>)
 80002fa:	2200      	movs	r2, #0
 80002fc:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80002fe:	4b14      	ldr	r3, [pc, #80]	; (8000350 <MX_I2C1_Init+0x74>)
 8000300:	2200      	movs	r2, #0
 8000302:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000304:	4b12      	ldr	r3, [pc, #72]	; (8000350 <MX_I2C1_Init+0x74>)
 8000306:	2200      	movs	r2, #0
 8000308:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800030a:	4b11      	ldr	r3, [pc, #68]	; (8000350 <MX_I2C1_Init+0x74>)
 800030c:	2200      	movs	r2, #0
 800030e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000310:	4b0f      	ldr	r3, [pc, #60]	; (8000350 <MX_I2C1_Init+0x74>)
 8000312:	2200      	movs	r2, #0
 8000314:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000316:	480e      	ldr	r0, [pc, #56]	; (8000350 <MX_I2C1_Init+0x74>)
 8000318:	f001 f884 	bl	8001424 <HAL_I2C_Init>
 800031c:	4603      	mov	r3, r0
 800031e:	2b00      	cmp	r3, #0
 8000320:	d001      	beq.n	8000326 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000322:	f000 f96f 	bl	8000604 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000326:	2100      	movs	r1, #0
 8000328:	4809      	ldr	r0, [pc, #36]	; (8000350 <MX_I2C1_Init+0x74>)
 800032a:	f001 f90a 	bl	8001542 <HAL_I2CEx_ConfigAnalogFilter>
 800032e:	4603      	mov	r3, r0
 8000330:	2b00      	cmp	r3, #0
 8000332:	d001      	beq.n	8000338 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000334:	f000 f966 	bl	8000604 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000338:	2100      	movs	r1, #0
 800033a:	4805      	ldr	r0, [pc, #20]	; (8000350 <MX_I2C1_Init+0x74>)
 800033c:	f001 f94c 	bl	80015d8 <HAL_I2CEx_ConfigDigitalFilter>
 8000340:	4603      	mov	r3, r0
 8000342:	2b00      	cmp	r3, #0
 8000344:	d001      	beq.n	800034a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000346:	f000 f95d 	bl	8000604 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800034a:	bf00      	nop
 800034c:	bd80      	pop	{r7, pc}
 800034e:	bf00      	nop
 8000350:	20000094 	.word	0x20000094
 8000354:	40005400 	.word	0x40005400
 8000358:	2000090e 	.word	0x2000090e

0800035c <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 800035c:	b580      	push	{r7, lr}
 800035e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000360:	4b1b      	ldr	r3, [pc, #108]	; (80003d0 <MX_SPI2_Init+0x74>)
 8000362:	4a1c      	ldr	r2, [pc, #112]	; (80003d4 <MX_SPI2_Init+0x78>)
 8000364:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000366:	4b1a      	ldr	r3, [pc, #104]	; (80003d0 <MX_SPI2_Init+0x74>)
 8000368:	f44f 7282 	mov.w	r2, #260	; 0x104
 800036c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800036e:	4b18      	ldr	r3, [pc, #96]	; (80003d0 <MX_SPI2_Init+0x74>)
 8000370:	2200      	movs	r2, #0
 8000372:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000374:	4b16      	ldr	r3, [pc, #88]	; (80003d0 <MX_SPI2_Init+0x74>)
 8000376:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800037a:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800037c:	4b14      	ldr	r3, [pc, #80]	; (80003d0 <MX_SPI2_Init+0x74>)
 800037e:	2200      	movs	r2, #0
 8000380:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000382:	4b13      	ldr	r3, [pc, #76]	; (80003d0 <MX_SPI2_Init+0x74>)
 8000384:	2200      	movs	r2, #0
 8000386:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000388:	4b11      	ldr	r3, [pc, #68]	; (80003d0 <MX_SPI2_Init+0x74>)
 800038a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800038e:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8000390:	4b0f      	ldr	r3, [pc, #60]	; (80003d0 <MX_SPI2_Init+0x74>)
 8000392:	2230      	movs	r2, #48	; 0x30
 8000394:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000396:	4b0e      	ldr	r3, [pc, #56]	; (80003d0 <MX_SPI2_Init+0x74>)
 8000398:	2200      	movs	r2, #0
 800039a:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800039c:	4b0c      	ldr	r3, [pc, #48]	; (80003d0 <MX_SPI2_Init+0x74>)
 800039e:	2200      	movs	r2, #0
 80003a0:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80003a2:	4b0b      	ldr	r3, [pc, #44]	; (80003d0 <MX_SPI2_Init+0x74>)
 80003a4:	2200      	movs	r2, #0
 80003a6:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 80003a8:	4b09      	ldr	r3, [pc, #36]	; (80003d0 <MX_SPI2_Init+0x74>)
 80003aa:	2207      	movs	r2, #7
 80003ac:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80003ae:	4b08      	ldr	r3, [pc, #32]	; (80003d0 <MX_SPI2_Init+0x74>)
 80003b0:	2200      	movs	r2, #0
 80003b2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80003b4:	4b06      	ldr	r3, [pc, #24]	; (80003d0 <MX_SPI2_Init+0x74>)
 80003b6:	2208      	movs	r2, #8
 80003b8:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80003ba:	4805      	ldr	r0, [pc, #20]	; (80003d0 <MX_SPI2_Init+0x74>)
 80003bc:	f002 fe32 	bl	8003024 <HAL_SPI_Init>
 80003c0:	4603      	mov	r3, r0
 80003c2:	2b00      	cmp	r3, #0
 80003c4:	d001      	beq.n	80003ca <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 80003c6:	f000 f91d 	bl	8000604 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80003ca:	bf00      	nop
 80003cc:	bd80      	pop	{r7, pc}
 80003ce:	bf00      	nop
 80003d0:	20000170 	.word	0x20000170
 80003d4:	40003800 	.word	0x40003800

080003d8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80003d8:	b580      	push	{r7, lr}
 80003da:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80003dc:	4b14      	ldr	r3, [pc, #80]	; (8000430 <MX_USART1_UART_Init+0x58>)
 80003de:	4a15      	ldr	r2, [pc, #84]	; (8000434 <MX_USART1_UART_Init+0x5c>)
 80003e0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 80003e2:	4b13      	ldr	r3, [pc, #76]	; (8000430 <MX_USART1_UART_Init+0x58>)
 80003e4:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80003e8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80003ea:	4b11      	ldr	r3, [pc, #68]	; (8000430 <MX_USART1_UART_Init+0x58>)
 80003ec:	2200      	movs	r2, #0
 80003ee:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80003f0:	4b0f      	ldr	r3, [pc, #60]	; (8000430 <MX_USART1_UART_Init+0x58>)
 80003f2:	2200      	movs	r2, #0
 80003f4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80003f6:	4b0e      	ldr	r3, [pc, #56]	; (8000430 <MX_USART1_UART_Init+0x58>)
 80003f8:	2200      	movs	r2, #0
 80003fa:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80003fc:	4b0c      	ldr	r3, [pc, #48]	; (8000430 <MX_USART1_UART_Init+0x58>)
 80003fe:	220c      	movs	r2, #12
 8000400:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000402:	4b0b      	ldr	r3, [pc, #44]	; (8000430 <MX_USART1_UART_Init+0x58>)
 8000404:	2200      	movs	r2, #0
 8000406:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000408:	4b09      	ldr	r3, [pc, #36]	; (8000430 <MX_USART1_UART_Init+0x58>)
 800040a:	2200      	movs	r2, #0
 800040c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800040e:	4b08      	ldr	r3, [pc, #32]	; (8000430 <MX_USART1_UART_Init+0x58>)
 8000410:	2200      	movs	r2, #0
 8000412:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000414:	4b06      	ldr	r3, [pc, #24]	; (8000430 <MX_USART1_UART_Init+0x58>)
 8000416:	2200      	movs	r2, #0
 8000418:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800041a:	4805      	ldr	r0, [pc, #20]	; (8000430 <MX_USART1_UART_Init+0x58>)
 800041c:	f003 fe7e 	bl	800411c <HAL_UART_Init>
 8000420:	4603      	mov	r3, r0
 8000422:	2b00      	cmp	r3, #0
 8000424:	d001      	beq.n	800042a <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000426:	f000 f8ed 	bl	8000604 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800042a:	bf00      	nop
 800042c:	bd80      	pop	{r7, pc}
 800042e:	bf00      	nop
 8000430:	2000025c 	.word	0x2000025c
 8000434:	40013800 	.word	0x40013800

08000438 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000438:	b580      	push	{r7, lr}
 800043a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800043c:	4b14      	ldr	r3, [pc, #80]	; (8000490 <MX_USART3_UART_Init+0x58>)
 800043e:	4a15      	ldr	r2, [pc, #84]	; (8000494 <MX_USART3_UART_Init+0x5c>)
 8000440:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8000442:	4b13      	ldr	r3, [pc, #76]	; (8000490 <MX_USART3_UART_Init+0x58>)
 8000444:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000448:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800044a:	4b11      	ldr	r3, [pc, #68]	; (8000490 <MX_USART3_UART_Init+0x58>)
 800044c:	2200      	movs	r2, #0
 800044e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000450:	4b0f      	ldr	r3, [pc, #60]	; (8000490 <MX_USART3_UART_Init+0x58>)
 8000452:	2200      	movs	r2, #0
 8000454:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000456:	4b0e      	ldr	r3, [pc, #56]	; (8000490 <MX_USART3_UART_Init+0x58>)
 8000458:	2200      	movs	r2, #0
 800045a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800045c:	4b0c      	ldr	r3, [pc, #48]	; (8000490 <MX_USART3_UART_Init+0x58>)
 800045e:	220c      	movs	r2, #12
 8000460:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000462:	4b0b      	ldr	r3, [pc, #44]	; (8000490 <MX_USART3_UART_Init+0x58>)
 8000464:	2200      	movs	r2, #0
 8000466:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000468:	4b09      	ldr	r3, [pc, #36]	; (8000490 <MX_USART3_UART_Init+0x58>)
 800046a:	2200      	movs	r2, #0
 800046c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800046e:	4b08      	ldr	r3, [pc, #32]	; (8000490 <MX_USART3_UART_Init+0x58>)
 8000470:	2200      	movs	r2, #0
 8000472:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000474:	4b06      	ldr	r3, [pc, #24]	; (8000490 <MX_USART3_UART_Init+0x58>)
 8000476:	2200      	movs	r2, #0
 8000478:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800047a:	4805      	ldr	r0, [pc, #20]	; (8000490 <MX_USART3_UART_Init+0x58>)
 800047c:	f003 fe4e 	bl	800411c <HAL_UART_Init>
 8000480:	4603      	mov	r3, r0
 8000482:	2b00      	cmp	r3, #0
 8000484:	d001      	beq.n	800048a <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000486:	f000 f8bd 	bl	8000604 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800048a:	bf00      	nop
 800048c:	bd80      	pop	{r7, pc}
 800048e:	bf00      	nop
 8000490:	200002e4 	.word	0x200002e4
 8000494:	40004800 	.word	0x40004800

08000498 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000498:	b580      	push	{r7, lr}
 800049a:	b082      	sub	sp, #8
 800049c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800049e:	4b20      	ldr	r3, [pc, #128]	; (8000520 <MX_DMA_Init+0x88>)
 80004a0:	695b      	ldr	r3, [r3, #20]
 80004a2:	4a1f      	ldr	r2, [pc, #124]	; (8000520 <MX_DMA_Init+0x88>)
 80004a4:	f043 0301 	orr.w	r3, r3, #1
 80004a8:	6153      	str	r3, [r2, #20]
 80004aa:	4b1d      	ldr	r3, [pc, #116]	; (8000520 <MX_DMA_Init+0x88>)
 80004ac:	695b      	ldr	r3, [r3, #20]
 80004ae:	f003 0301 	and.w	r3, r3, #1
 80004b2:	607b      	str	r3, [r7, #4]
 80004b4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 5, 0);
 80004b6:	2200      	movs	r2, #0
 80004b8:	2105      	movs	r1, #5
 80004ba:	200c      	movs	r0, #12
 80004bc:	f000 fcc0 	bl	8000e40 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 80004c0:	200c      	movs	r0, #12
 80004c2:	f000 fcd9 	bl	8000e78 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 5, 0);
 80004c6:	2200      	movs	r2, #0
 80004c8:	2105      	movs	r1, #5
 80004ca:	200d      	movs	r0, #13
 80004cc:	f000 fcb8 	bl	8000e40 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 80004d0:	200d      	movs	r0, #13
 80004d2:	f000 fcd1 	bl	8000e78 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 5, 0);
 80004d6:	2200      	movs	r2, #0
 80004d8:	2105      	movs	r1, #5
 80004da:	200e      	movs	r0, #14
 80004dc:	f000 fcb0 	bl	8000e40 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 80004e0:	200e      	movs	r0, #14
 80004e2:	f000 fcc9 	bl	8000e78 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 5, 0);
 80004e6:	2200      	movs	r2, #0
 80004e8:	2105      	movs	r1, #5
 80004ea:	200f      	movs	r0, #15
 80004ec:	f000 fca8 	bl	8000e40 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 80004f0:	200f      	movs	r0, #15
 80004f2:	f000 fcc1 	bl	8000e78 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 5, 0);
 80004f6:	2200      	movs	r2, #0
 80004f8:	2105      	movs	r1, #5
 80004fa:	2010      	movs	r0, #16
 80004fc:	f000 fca0 	bl	8000e40 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8000500:	2010      	movs	r0, #16
 8000502:	f000 fcb9 	bl	8000e78 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 5, 0);
 8000506:	2200      	movs	r2, #0
 8000508:	2105      	movs	r1, #5
 800050a:	2011      	movs	r0, #17
 800050c:	f000 fc98 	bl	8000e40 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 8000510:	2011      	movs	r0, #17
 8000512:	f000 fcb1 	bl	8000e78 <HAL_NVIC_EnableIRQ>

}
 8000516:	bf00      	nop
 8000518:	3708      	adds	r7, #8
 800051a:	46bd      	mov	sp, r7
 800051c:	bd80      	pop	{r7, pc}
 800051e:	bf00      	nop
 8000520:	40021000 	.word	0x40021000

08000524 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000524:	b580      	push	{r7, lr}
 8000526:	b08a      	sub	sp, #40	; 0x28
 8000528:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800052a:	f107 0314 	add.w	r3, r7, #20
 800052e:	2200      	movs	r2, #0
 8000530:	601a      	str	r2, [r3, #0]
 8000532:	605a      	str	r2, [r3, #4]
 8000534:	609a      	str	r2, [r3, #8]
 8000536:	60da      	str	r2, [r3, #12]
 8000538:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800053a:	4b23      	ldr	r3, [pc, #140]	; (80005c8 <MX_GPIO_Init+0xa4>)
 800053c:	695b      	ldr	r3, [r3, #20]
 800053e:	4a22      	ldr	r2, [pc, #136]	; (80005c8 <MX_GPIO_Init+0xa4>)
 8000540:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000544:	6153      	str	r3, [r2, #20]
 8000546:	4b20      	ldr	r3, [pc, #128]	; (80005c8 <MX_GPIO_Init+0xa4>)
 8000548:	695b      	ldr	r3, [r3, #20]
 800054a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800054e:	613b      	str	r3, [r7, #16]
 8000550:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000552:	4b1d      	ldr	r3, [pc, #116]	; (80005c8 <MX_GPIO_Init+0xa4>)
 8000554:	695b      	ldr	r3, [r3, #20]
 8000556:	4a1c      	ldr	r2, [pc, #112]	; (80005c8 <MX_GPIO_Init+0xa4>)
 8000558:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800055c:	6153      	str	r3, [r2, #20]
 800055e:	4b1a      	ldr	r3, [pc, #104]	; (80005c8 <MX_GPIO_Init+0xa4>)
 8000560:	695b      	ldr	r3, [r3, #20]
 8000562:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000566:	60fb      	str	r3, [r7, #12]
 8000568:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800056a:	4b17      	ldr	r3, [pc, #92]	; (80005c8 <MX_GPIO_Init+0xa4>)
 800056c:	695b      	ldr	r3, [r3, #20]
 800056e:	4a16      	ldr	r2, [pc, #88]	; (80005c8 <MX_GPIO_Init+0xa4>)
 8000570:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000574:	6153      	str	r3, [r2, #20]
 8000576:	4b14      	ldr	r3, [pc, #80]	; (80005c8 <MX_GPIO_Init+0xa4>)
 8000578:	695b      	ldr	r3, [r3, #20]
 800057a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800057e:	60bb      	str	r3, [r7, #8]
 8000580:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000582:	4b11      	ldr	r3, [pc, #68]	; (80005c8 <MX_GPIO_Init+0xa4>)
 8000584:	695b      	ldr	r3, [r3, #20]
 8000586:	4a10      	ldr	r2, [pc, #64]	; (80005c8 <MX_GPIO_Init+0xa4>)
 8000588:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800058c:	6153      	str	r3, [r2, #20]
 800058e:	4b0e      	ldr	r3, [pc, #56]	; (80005c8 <MX_GPIO_Init+0xa4>)
 8000590:	695b      	ldr	r3, [r3, #20]
 8000592:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000596:	607b      	str	r3, [r7, #4]
 8000598:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_RESET);
 800059a:	2200      	movs	r2, #0
 800059c:	2102      	movs	r1, #2
 800059e:	480b      	ldr	r0, [pc, #44]	; (80005cc <MX_GPIO_Init+0xa8>)
 80005a0:	f000 ff28 	bl	80013f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : SD_CS_Pin */
  GPIO_InitStruct.Pin = SD_CS_Pin;
 80005a4:	2302      	movs	r3, #2
 80005a6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005a8:	2301      	movs	r3, #1
 80005aa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005ac:	2300      	movs	r3, #0
 80005ae:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005b0:	2300      	movs	r3, #0
 80005b2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SD_CS_GPIO_Port, &GPIO_InitStruct);
 80005b4:	f107 0314 	add.w	r3, r7, #20
 80005b8:	4619      	mov	r1, r3
 80005ba:	4804      	ldr	r0, [pc, #16]	; (80005cc <MX_GPIO_Init+0xa8>)
 80005bc:	f000 fd90 	bl	80010e0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80005c0:	bf00      	nop
 80005c2:	3728      	adds	r7, #40	; 0x28
 80005c4:	46bd      	mov	sp, r7
 80005c6:	bd80      	pop	{r7, pc}
 80005c8:	40021000 	.word	0x40021000
 80005cc:	48000400 	.word	0x48000400

080005d0 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80005d0:	b580      	push	{r7, lr}
 80005d2:	b082      	sub	sp, #8
 80005d4:	af00      	add	r7, sp, #0
 80005d6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80005d8:	2001      	movs	r0, #1
 80005da:	f005 f887 	bl	80056ec <osDelay>
 80005de:	e7fb      	b.n	80005d8 <StartDefaultTask+0x8>

080005e0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80005e0:	b580      	push	{r7, lr}
 80005e2:	b082      	sub	sp, #8
 80005e4:	af00      	add	r7, sp, #0
 80005e6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 80005e8:	687b      	ldr	r3, [r7, #4]
 80005ea:	681b      	ldr	r3, [r3, #0]
 80005ec:	4a04      	ldr	r2, [pc, #16]	; (8000600 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80005ee:	4293      	cmp	r3, r2
 80005f0:	d101      	bne.n	80005f6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80005f2:	f000 fb4d 	bl	8000c90 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80005f6:	bf00      	nop
 80005f8:	3708      	adds	r7, #8
 80005fa:	46bd      	mov	sp, r7
 80005fc:	bd80      	pop	{r7, pc}
 80005fe:	bf00      	nop
 8000600:	40012c00 	.word	0x40012c00

08000604 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000604:	b480      	push	{r7}
 8000606:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000608:	b672      	cpsid	i
}
 800060a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800060c:	e7fe      	b.n	800060c <Error_Handler+0x8>
	...

08000610 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000610:	b580      	push	{r7, lr}
 8000612:	b082      	sub	sp, #8
 8000614:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000616:	4b11      	ldr	r3, [pc, #68]	; (800065c <HAL_MspInit+0x4c>)
 8000618:	699b      	ldr	r3, [r3, #24]
 800061a:	4a10      	ldr	r2, [pc, #64]	; (800065c <HAL_MspInit+0x4c>)
 800061c:	f043 0301 	orr.w	r3, r3, #1
 8000620:	6193      	str	r3, [r2, #24]
 8000622:	4b0e      	ldr	r3, [pc, #56]	; (800065c <HAL_MspInit+0x4c>)
 8000624:	699b      	ldr	r3, [r3, #24]
 8000626:	f003 0301 	and.w	r3, r3, #1
 800062a:	607b      	str	r3, [r7, #4]
 800062c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800062e:	4b0b      	ldr	r3, [pc, #44]	; (800065c <HAL_MspInit+0x4c>)
 8000630:	69db      	ldr	r3, [r3, #28]
 8000632:	4a0a      	ldr	r2, [pc, #40]	; (800065c <HAL_MspInit+0x4c>)
 8000634:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000638:	61d3      	str	r3, [r2, #28]
 800063a:	4b08      	ldr	r3, [pc, #32]	; (800065c <HAL_MspInit+0x4c>)
 800063c:	69db      	ldr	r3, [r3, #28]
 800063e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000642:	603b      	str	r3, [r7, #0]
 8000644:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000646:	2200      	movs	r2, #0
 8000648:	210f      	movs	r1, #15
 800064a:	f06f 0001 	mvn.w	r0, #1
 800064e:	f000 fbf7 	bl	8000e40 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000652:	bf00      	nop
 8000654:	3708      	adds	r7, #8
 8000656:	46bd      	mov	sp, r7
 8000658:	bd80      	pop	{r7, pc}
 800065a:	bf00      	nop
 800065c:	40021000 	.word	0x40021000

08000660 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000660:	b580      	push	{r7, lr}
 8000662:	b08a      	sub	sp, #40	; 0x28
 8000664:	af00      	add	r7, sp, #0
 8000666:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000668:	f107 0314 	add.w	r3, r7, #20
 800066c:	2200      	movs	r2, #0
 800066e:	601a      	str	r2, [r3, #0]
 8000670:	605a      	str	r2, [r3, #4]
 8000672:	609a      	str	r2, [r3, #8]
 8000674:	60da      	str	r2, [r3, #12]
 8000676:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000678:	687b      	ldr	r3, [r7, #4]
 800067a:	681b      	ldr	r3, [r3, #0]
 800067c:	4a3e      	ldr	r2, [pc, #248]	; (8000778 <HAL_I2C_MspInit+0x118>)
 800067e:	4293      	cmp	r3, r2
 8000680:	d175      	bne.n	800076e <HAL_I2C_MspInit+0x10e>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000682:	4b3e      	ldr	r3, [pc, #248]	; (800077c <HAL_I2C_MspInit+0x11c>)
 8000684:	695b      	ldr	r3, [r3, #20]
 8000686:	4a3d      	ldr	r2, [pc, #244]	; (800077c <HAL_I2C_MspInit+0x11c>)
 8000688:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800068c:	6153      	str	r3, [r2, #20]
 800068e:	4b3b      	ldr	r3, [pc, #236]	; (800077c <HAL_I2C_MspInit+0x11c>)
 8000690:	695b      	ldr	r3, [r3, #20]
 8000692:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000696:	613b      	str	r3, [r7, #16]
 8000698:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PA14     ------> I2C1_SDA
    PA15     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 800069a:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 800069e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80006a0:	2312      	movs	r3, #18
 80006a2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006a4:	2300      	movs	r3, #0
 80006a6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80006a8:	2303      	movs	r3, #3
 80006aa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80006ac:	2304      	movs	r3, #4
 80006ae:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006b0:	f107 0314 	add.w	r3, r7, #20
 80006b4:	4619      	mov	r1, r3
 80006b6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80006ba:	f000 fd11 	bl	80010e0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80006be:	4b2f      	ldr	r3, [pc, #188]	; (800077c <HAL_I2C_MspInit+0x11c>)
 80006c0:	69db      	ldr	r3, [r3, #28]
 80006c2:	4a2e      	ldr	r2, [pc, #184]	; (800077c <HAL_I2C_MspInit+0x11c>)
 80006c4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80006c8:	61d3      	str	r3, [r2, #28]
 80006ca:	4b2c      	ldr	r3, [pc, #176]	; (800077c <HAL_I2C_MspInit+0x11c>)
 80006cc:	69db      	ldr	r3, [r3, #28]
 80006ce:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80006d2:	60fb      	str	r3, [r7, #12]
 80006d4:	68fb      	ldr	r3, [r7, #12]

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Channel7;
 80006d6:	4b2a      	ldr	r3, [pc, #168]	; (8000780 <HAL_I2C_MspInit+0x120>)
 80006d8:	4a2a      	ldr	r2, [pc, #168]	; (8000784 <HAL_I2C_MspInit+0x124>)
 80006da:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80006dc:	4b28      	ldr	r3, [pc, #160]	; (8000780 <HAL_I2C_MspInit+0x120>)
 80006de:	2200      	movs	r2, #0
 80006e0:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80006e2:	4b27      	ldr	r3, [pc, #156]	; (8000780 <HAL_I2C_MspInit+0x120>)
 80006e4:	2200      	movs	r2, #0
 80006e6:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80006e8:	4b25      	ldr	r3, [pc, #148]	; (8000780 <HAL_I2C_MspInit+0x120>)
 80006ea:	2280      	movs	r2, #128	; 0x80
 80006ec:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80006ee:	4b24      	ldr	r3, [pc, #144]	; (8000780 <HAL_I2C_MspInit+0x120>)
 80006f0:	2200      	movs	r2, #0
 80006f2:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80006f4:	4b22      	ldr	r3, [pc, #136]	; (8000780 <HAL_I2C_MspInit+0x120>)
 80006f6:	2200      	movs	r2, #0
 80006f8:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 80006fa:	4b21      	ldr	r3, [pc, #132]	; (8000780 <HAL_I2C_MspInit+0x120>)
 80006fc:	2200      	movs	r2, #0
 80006fe:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000700:	4b1f      	ldr	r3, [pc, #124]	; (8000780 <HAL_I2C_MspInit+0x120>)
 8000702:	2200      	movs	r2, #0
 8000704:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 8000706:	481e      	ldr	r0, [pc, #120]	; (8000780 <HAL_I2C_MspInit+0x120>)
 8000708:	f000 fbc4 	bl	8000e94 <HAL_DMA_Init>
 800070c:	4603      	mov	r3, r0
 800070e:	2b00      	cmp	r3, #0
 8000710:	d001      	beq.n	8000716 <HAL_I2C_MspInit+0xb6>
    {
      Error_Handler();
 8000712:	f7ff ff77 	bl	8000604 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c1_rx);
 8000716:	687b      	ldr	r3, [r7, #4]
 8000718:	4a19      	ldr	r2, [pc, #100]	; (8000780 <HAL_I2C_MspInit+0x120>)
 800071a:	63da      	str	r2, [r3, #60]	; 0x3c
 800071c:	4a18      	ldr	r2, [pc, #96]	; (8000780 <HAL_I2C_MspInit+0x120>)
 800071e:	687b      	ldr	r3, [r7, #4]
 8000720:	6253      	str	r3, [r2, #36]	; 0x24

    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Channel6;
 8000722:	4b19      	ldr	r3, [pc, #100]	; (8000788 <HAL_I2C_MspInit+0x128>)
 8000724:	4a19      	ldr	r2, [pc, #100]	; (800078c <HAL_I2C_MspInit+0x12c>)
 8000726:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000728:	4b17      	ldr	r3, [pc, #92]	; (8000788 <HAL_I2C_MspInit+0x128>)
 800072a:	2210      	movs	r2, #16
 800072c:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800072e:	4b16      	ldr	r3, [pc, #88]	; (8000788 <HAL_I2C_MspInit+0x128>)
 8000730:	2200      	movs	r2, #0
 8000732:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000734:	4b14      	ldr	r3, [pc, #80]	; (8000788 <HAL_I2C_MspInit+0x128>)
 8000736:	2280      	movs	r2, #128	; 0x80
 8000738:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800073a:	4b13      	ldr	r3, [pc, #76]	; (8000788 <HAL_I2C_MspInit+0x128>)
 800073c:	2200      	movs	r2, #0
 800073e:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000740:	4b11      	ldr	r3, [pc, #68]	; (8000788 <HAL_I2C_MspInit+0x128>)
 8000742:	2200      	movs	r2, #0
 8000744:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 8000746:	4b10      	ldr	r3, [pc, #64]	; (8000788 <HAL_I2C_MspInit+0x128>)
 8000748:	2200      	movs	r2, #0
 800074a:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 800074c:	4b0e      	ldr	r3, [pc, #56]	; (8000788 <HAL_I2C_MspInit+0x128>)
 800074e:	2200      	movs	r2, #0
 8000750:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 8000752:	480d      	ldr	r0, [pc, #52]	; (8000788 <HAL_I2C_MspInit+0x128>)
 8000754:	f000 fb9e 	bl	8000e94 <HAL_DMA_Init>
 8000758:	4603      	mov	r3, r0
 800075a:	2b00      	cmp	r3, #0
 800075c:	d001      	beq.n	8000762 <HAL_I2C_MspInit+0x102>
    {
      Error_Handler();
 800075e:	f7ff ff51 	bl	8000604 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c1_tx);
 8000762:	687b      	ldr	r3, [r7, #4]
 8000764:	4a08      	ldr	r2, [pc, #32]	; (8000788 <HAL_I2C_MspInit+0x128>)
 8000766:	639a      	str	r2, [r3, #56]	; 0x38
 8000768:	4a07      	ldr	r2, [pc, #28]	; (8000788 <HAL_I2C_MspInit+0x128>)
 800076a:	687b      	ldr	r3, [r7, #4]
 800076c:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800076e:	bf00      	nop
 8000770:	3728      	adds	r7, #40	; 0x28
 8000772:	46bd      	mov	sp, r7
 8000774:	bd80      	pop	{r7, pc}
 8000776:	bf00      	nop
 8000778:	40005400 	.word	0x40005400
 800077c:	40021000 	.word	0x40021000
 8000780:	200000e8 	.word	0x200000e8
 8000784:	40020080 	.word	0x40020080
 8000788:	2000012c 	.word	0x2000012c
 800078c:	4002006c 	.word	0x4002006c

08000790 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000790:	b580      	push	{r7, lr}
 8000792:	b08a      	sub	sp, #40	; 0x28
 8000794:	af00      	add	r7, sp, #0
 8000796:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000798:	f107 0314 	add.w	r3, r7, #20
 800079c:	2200      	movs	r2, #0
 800079e:	601a      	str	r2, [r3, #0]
 80007a0:	605a      	str	r2, [r3, #4]
 80007a2:	609a      	str	r2, [r3, #8]
 80007a4:	60da      	str	r2, [r3, #12]
 80007a6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 80007a8:	687b      	ldr	r3, [r7, #4]
 80007aa:	681b      	ldr	r3, [r3, #0]
 80007ac:	4a3d      	ldr	r2, [pc, #244]	; (80008a4 <HAL_SPI_MspInit+0x114>)
 80007ae:	4293      	cmp	r3, r2
 80007b0:	d174      	bne.n	800089c <HAL_SPI_MspInit+0x10c>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80007b2:	4b3d      	ldr	r3, [pc, #244]	; (80008a8 <HAL_SPI_MspInit+0x118>)
 80007b4:	69db      	ldr	r3, [r3, #28]
 80007b6:	4a3c      	ldr	r2, [pc, #240]	; (80008a8 <HAL_SPI_MspInit+0x118>)
 80007b8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80007bc:	61d3      	str	r3, [r2, #28]
 80007be:	4b3a      	ldr	r3, [pc, #232]	; (80008a8 <HAL_SPI_MspInit+0x118>)
 80007c0:	69db      	ldr	r3, [r3, #28]
 80007c2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80007c6:	613b      	str	r3, [r7, #16]
 80007c8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80007ca:	4b37      	ldr	r3, [pc, #220]	; (80008a8 <HAL_SPI_MspInit+0x118>)
 80007cc:	695b      	ldr	r3, [r3, #20]
 80007ce:	4a36      	ldr	r2, [pc, #216]	; (80008a8 <HAL_SPI_MspInit+0x118>)
 80007d0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80007d4:	6153      	str	r3, [r2, #20]
 80007d6:	4b34      	ldr	r3, [pc, #208]	; (80008a8 <HAL_SPI_MspInit+0x118>)
 80007d8:	695b      	ldr	r3, [r3, #20]
 80007da:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80007de:	60fb      	str	r3, [r7, #12]
 80007e0:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80007e2:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 80007e6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007e8:	2302      	movs	r3, #2
 80007ea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ec:	2300      	movs	r3, #0
 80007ee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80007f0:	2303      	movs	r3, #3
 80007f2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80007f4:	2305      	movs	r3, #5
 80007f6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007f8:	f107 0314 	add.w	r3, r7, #20
 80007fc:	4619      	mov	r1, r3
 80007fe:	482b      	ldr	r0, [pc, #172]	; (80008ac <HAL_SPI_MspInit+0x11c>)
 8000800:	f000 fc6e 	bl	80010e0 <HAL_GPIO_Init>

    /* SPI2 DMA Init */
    /* SPI2_RX Init */
    hdma_spi2_rx.Instance = DMA1_Channel4;
 8000804:	4b2a      	ldr	r3, [pc, #168]	; (80008b0 <HAL_SPI_MspInit+0x120>)
 8000806:	4a2b      	ldr	r2, [pc, #172]	; (80008b4 <HAL_SPI_MspInit+0x124>)
 8000808:	601a      	str	r2, [r3, #0]
    hdma_spi2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800080a:	4b29      	ldr	r3, [pc, #164]	; (80008b0 <HAL_SPI_MspInit+0x120>)
 800080c:	2200      	movs	r2, #0
 800080e:	605a      	str	r2, [r3, #4]
    hdma_spi2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000810:	4b27      	ldr	r3, [pc, #156]	; (80008b0 <HAL_SPI_MspInit+0x120>)
 8000812:	2200      	movs	r2, #0
 8000814:	609a      	str	r2, [r3, #8]
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000816:	4b26      	ldr	r3, [pc, #152]	; (80008b0 <HAL_SPI_MspInit+0x120>)
 8000818:	2280      	movs	r2, #128	; 0x80
 800081a:	60da      	str	r2, [r3, #12]
    hdma_spi2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800081c:	4b24      	ldr	r3, [pc, #144]	; (80008b0 <HAL_SPI_MspInit+0x120>)
 800081e:	2200      	movs	r2, #0
 8000820:	611a      	str	r2, [r3, #16]
    hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000822:	4b23      	ldr	r3, [pc, #140]	; (80008b0 <HAL_SPI_MspInit+0x120>)
 8000824:	2200      	movs	r2, #0
 8000826:	615a      	str	r2, [r3, #20]
    hdma_spi2_rx.Init.Mode = DMA_NORMAL;
 8000828:	4b21      	ldr	r3, [pc, #132]	; (80008b0 <HAL_SPI_MspInit+0x120>)
 800082a:	2200      	movs	r2, #0
 800082c:	619a      	str	r2, [r3, #24]
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_LOW;
 800082e:	4b20      	ldr	r3, [pc, #128]	; (80008b0 <HAL_SPI_MspInit+0x120>)
 8000830:	2200      	movs	r2, #0
 8000832:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 8000834:	481e      	ldr	r0, [pc, #120]	; (80008b0 <HAL_SPI_MspInit+0x120>)
 8000836:	f000 fb2d 	bl	8000e94 <HAL_DMA_Init>
 800083a:	4603      	mov	r3, r0
 800083c:	2b00      	cmp	r3, #0
 800083e:	d001      	beq.n	8000844 <HAL_SPI_MspInit+0xb4>
    {
      Error_Handler();
 8000840:	f7ff fee0 	bl	8000604 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmarx,hdma_spi2_rx);
 8000844:	687b      	ldr	r3, [r7, #4]
 8000846:	4a1a      	ldr	r2, [pc, #104]	; (80008b0 <HAL_SPI_MspInit+0x120>)
 8000848:	659a      	str	r2, [r3, #88]	; 0x58
 800084a:	4a19      	ldr	r2, [pc, #100]	; (80008b0 <HAL_SPI_MspInit+0x120>)
 800084c:	687b      	ldr	r3, [r7, #4]
 800084e:	6253      	str	r3, [r2, #36]	; 0x24

    /* SPI2_TX Init */
    hdma_spi2_tx.Instance = DMA1_Channel5;
 8000850:	4b19      	ldr	r3, [pc, #100]	; (80008b8 <HAL_SPI_MspInit+0x128>)
 8000852:	4a1a      	ldr	r2, [pc, #104]	; (80008bc <HAL_SPI_MspInit+0x12c>)
 8000854:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000856:	4b18      	ldr	r3, [pc, #96]	; (80008b8 <HAL_SPI_MspInit+0x128>)
 8000858:	2210      	movs	r2, #16
 800085a:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800085c:	4b16      	ldr	r3, [pc, #88]	; (80008b8 <HAL_SPI_MspInit+0x128>)
 800085e:	2200      	movs	r2, #0
 8000860:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000862:	4b15      	ldr	r3, [pc, #84]	; (80008b8 <HAL_SPI_MspInit+0x128>)
 8000864:	2280      	movs	r2, #128	; 0x80
 8000866:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000868:	4b13      	ldr	r3, [pc, #76]	; (80008b8 <HAL_SPI_MspInit+0x128>)
 800086a:	2200      	movs	r2, #0
 800086c:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800086e:	4b12      	ldr	r3, [pc, #72]	; (80008b8 <HAL_SPI_MspInit+0x128>)
 8000870:	2200      	movs	r2, #0
 8000872:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.Mode = DMA_NORMAL;
 8000874:	4b10      	ldr	r3, [pc, #64]	; (80008b8 <HAL_SPI_MspInit+0x128>)
 8000876:	2200      	movs	r2, #0
 8000878:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_LOW;
 800087a:	4b0f      	ldr	r3, [pc, #60]	; (80008b8 <HAL_SPI_MspInit+0x128>)
 800087c:	2200      	movs	r2, #0
 800087e:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 8000880:	480d      	ldr	r0, [pc, #52]	; (80008b8 <HAL_SPI_MspInit+0x128>)
 8000882:	f000 fb07 	bl	8000e94 <HAL_DMA_Init>
 8000886:	4603      	mov	r3, r0
 8000888:	2b00      	cmp	r3, #0
 800088a:	d001      	beq.n	8000890 <HAL_SPI_MspInit+0x100>
    {
      Error_Handler();
 800088c:	f7ff feba 	bl	8000604 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi2_tx);
 8000890:	687b      	ldr	r3, [r7, #4]
 8000892:	4a09      	ldr	r2, [pc, #36]	; (80008b8 <HAL_SPI_MspInit+0x128>)
 8000894:	655a      	str	r2, [r3, #84]	; 0x54
 8000896:	4a08      	ldr	r2, [pc, #32]	; (80008b8 <HAL_SPI_MspInit+0x128>)
 8000898:	687b      	ldr	r3, [r7, #4]
 800089a:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 800089c:	bf00      	nop
 800089e:	3728      	adds	r7, #40	; 0x28
 80008a0:	46bd      	mov	sp, r7
 80008a2:	bd80      	pop	{r7, pc}
 80008a4:	40003800 	.word	0x40003800
 80008a8:	40021000 	.word	0x40021000
 80008ac:	48000400 	.word	0x48000400
 80008b0:	200001d4 	.word	0x200001d4
 80008b4:	40020044 	.word	0x40020044
 80008b8:	20000218 	.word	0x20000218
 80008bc:	40020058 	.word	0x40020058

080008c0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80008c0:	b580      	push	{r7, lr}
 80008c2:	b08c      	sub	sp, #48	; 0x30
 80008c4:	af00      	add	r7, sp, #0
 80008c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008c8:	f107 031c 	add.w	r3, r7, #28
 80008cc:	2200      	movs	r2, #0
 80008ce:	601a      	str	r2, [r3, #0]
 80008d0:	605a      	str	r2, [r3, #4]
 80008d2:	609a      	str	r2, [r3, #8]
 80008d4:	60da      	str	r2, [r3, #12]
 80008d6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80008d8:	687b      	ldr	r3, [r7, #4]
 80008da:	681b      	ldr	r3, [r3, #0]
 80008dc:	4a54      	ldr	r2, [pc, #336]	; (8000a30 <HAL_UART_MspInit+0x170>)
 80008de:	4293      	cmp	r3, r2
 80008e0:	d128      	bne.n	8000934 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80008e2:	4b54      	ldr	r3, [pc, #336]	; (8000a34 <HAL_UART_MspInit+0x174>)
 80008e4:	699b      	ldr	r3, [r3, #24]
 80008e6:	4a53      	ldr	r2, [pc, #332]	; (8000a34 <HAL_UART_MspInit+0x174>)
 80008e8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80008ec:	6193      	str	r3, [r2, #24]
 80008ee:	4b51      	ldr	r3, [pc, #324]	; (8000a34 <HAL_UART_MspInit+0x174>)
 80008f0:	699b      	ldr	r3, [r3, #24]
 80008f2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80008f6:	61bb      	str	r3, [r7, #24]
 80008f8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80008fa:	4b4e      	ldr	r3, [pc, #312]	; (8000a34 <HAL_UART_MspInit+0x174>)
 80008fc:	695b      	ldr	r3, [r3, #20]
 80008fe:	4a4d      	ldr	r2, [pc, #308]	; (8000a34 <HAL_UART_MspInit+0x174>)
 8000900:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000904:	6153      	str	r3, [r2, #20]
 8000906:	4b4b      	ldr	r3, [pc, #300]	; (8000a34 <HAL_UART_MspInit+0x174>)
 8000908:	695b      	ldr	r3, [r3, #20]
 800090a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800090e:	617b      	str	r3, [r7, #20]
 8000910:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PC4     ------> USART1_TX
    PC5     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8000912:	2330      	movs	r3, #48	; 0x30
 8000914:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000916:	2302      	movs	r3, #2
 8000918:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800091a:	2300      	movs	r3, #0
 800091c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800091e:	2303      	movs	r3, #3
 8000920:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000922:	2307      	movs	r3, #7
 8000924:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000926:	f107 031c 	add.w	r3, r7, #28
 800092a:	4619      	mov	r1, r3
 800092c:	4842      	ldr	r0, [pc, #264]	; (8000a38 <HAL_UART_MspInit+0x178>)
 800092e:	f000 fbd7 	bl	80010e0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000932:	e079      	b.n	8000a28 <HAL_UART_MspInit+0x168>
  else if(huart->Instance==USART3)
 8000934:	687b      	ldr	r3, [r7, #4]
 8000936:	681b      	ldr	r3, [r3, #0]
 8000938:	4a40      	ldr	r2, [pc, #256]	; (8000a3c <HAL_UART_MspInit+0x17c>)
 800093a:	4293      	cmp	r3, r2
 800093c:	d174      	bne.n	8000a28 <HAL_UART_MspInit+0x168>
    __HAL_RCC_USART3_CLK_ENABLE();
 800093e:	4b3d      	ldr	r3, [pc, #244]	; (8000a34 <HAL_UART_MspInit+0x174>)
 8000940:	69db      	ldr	r3, [r3, #28]
 8000942:	4a3c      	ldr	r2, [pc, #240]	; (8000a34 <HAL_UART_MspInit+0x174>)
 8000944:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000948:	61d3      	str	r3, [r2, #28]
 800094a:	4b3a      	ldr	r3, [pc, #232]	; (8000a34 <HAL_UART_MspInit+0x174>)
 800094c:	69db      	ldr	r3, [r3, #28]
 800094e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000952:	613b      	str	r3, [r7, #16]
 8000954:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000956:	4b37      	ldr	r3, [pc, #220]	; (8000a34 <HAL_UART_MspInit+0x174>)
 8000958:	695b      	ldr	r3, [r3, #20]
 800095a:	4a36      	ldr	r2, [pc, #216]	; (8000a34 <HAL_UART_MspInit+0x174>)
 800095c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000960:	6153      	str	r3, [r2, #20]
 8000962:	4b34      	ldr	r3, [pc, #208]	; (8000a34 <HAL_UART_MspInit+0x174>)
 8000964:	695b      	ldr	r3, [r3, #20]
 8000966:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800096a:	60fb      	str	r3, [r7, #12]
 800096c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800096e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000972:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000974:	2302      	movs	r3, #2
 8000976:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000978:	2300      	movs	r3, #0
 800097a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800097c:	2303      	movs	r3, #3
 800097e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000980:	2307      	movs	r3, #7
 8000982:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000984:	f107 031c 	add.w	r3, r7, #28
 8000988:	4619      	mov	r1, r3
 800098a:	482d      	ldr	r0, [pc, #180]	; (8000a40 <HAL_UART_MspInit+0x180>)
 800098c:	f000 fba8 	bl	80010e0 <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Channel3;
 8000990:	4b2c      	ldr	r3, [pc, #176]	; (8000a44 <HAL_UART_MspInit+0x184>)
 8000992:	4a2d      	ldr	r2, [pc, #180]	; (8000a48 <HAL_UART_MspInit+0x188>)
 8000994:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000996:	4b2b      	ldr	r3, [pc, #172]	; (8000a44 <HAL_UART_MspInit+0x184>)
 8000998:	2200      	movs	r2, #0
 800099a:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800099c:	4b29      	ldr	r3, [pc, #164]	; (8000a44 <HAL_UART_MspInit+0x184>)
 800099e:	2200      	movs	r2, #0
 80009a0:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 80009a2:	4b28      	ldr	r3, [pc, #160]	; (8000a44 <HAL_UART_MspInit+0x184>)
 80009a4:	2280      	movs	r2, #128	; 0x80
 80009a6:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80009a8:	4b26      	ldr	r3, [pc, #152]	; (8000a44 <HAL_UART_MspInit+0x184>)
 80009aa:	2200      	movs	r2, #0
 80009ac:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80009ae:	4b25      	ldr	r3, [pc, #148]	; (8000a44 <HAL_UART_MspInit+0x184>)
 80009b0:	2200      	movs	r2, #0
 80009b2:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 80009b4:	4b23      	ldr	r3, [pc, #140]	; (8000a44 <HAL_UART_MspInit+0x184>)
 80009b6:	2200      	movs	r2, #0
 80009b8:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 80009ba:	4b22      	ldr	r3, [pc, #136]	; (8000a44 <HAL_UART_MspInit+0x184>)
 80009bc:	2200      	movs	r2, #0
 80009be:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 80009c0:	4820      	ldr	r0, [pc, #128]	; (8000a44 <HAL_UART_MspInit+0x184>)
 80009c2:	f000 fa67 	bl	8000e94 <HAL_DMA_Init>
 80009c6:	4603      	mov	r3, r0
 80009c8:	2b00      	cmp	r3, #0
 80009ca:	d001      	beq.n	80009d0 <HAL_UART_MspInit+0x110>
      Error_Handler();
 80009cc:	f7ff fe1a 	bl	8000604 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	4a1c      	ldr	r2, [pc, #112]	; (8000a44 <HAL_UART_MspInit+0x184>)
 80009d4:	675a      	str	r2, [r3, #116]	; 0x74
 80009d6:	4a1b      	ldr	r2, [pc, #108]	; (8000a44 <HAL_UART_MspInit+0x184>)
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	6253      	str	r3, [r2, #36]	; 0x24
    hdma_usart3_tx.Instance = DMA1_Channel2;
 80009dc:	4b1b      	ldr	r3, [pc, #108]	; (8000a4c <HAL_UART_MspInit+0x18c>)
 80009de:	4a1c      	ldr	r2, [pc, #112]	; (8000a50 <HAL_UART_MspInit+0x190>)
 80009e0:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80009e2:	4b1a      	ldr	r3, [pc, #104]	; (8000a4c <HAL_UART_MspInit+0x18c>)
 80009e4:	2210      	movs	r2, #16
 80009e6:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80009e8:	4b18      	ldr	r3, [pc, #96]	; (8000a4c <HAL_UART_MspInit+0x18c>)
 80009ea:	2200      	movs	r2, #0
 80009ec:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 80009ee:	4b17      	ldr	r3, [pc, #92]	; (8000a4c <HAL_UART_MspInit+0x18c>)
 80009f0:	2280      	movs	r2, #128	; 0x80
 80009f2:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80009f4:	4b15      	ldr	r3, [pc, #84]	; (8000a4c <HAL_UART_MspInit+0x18c>)
 80009f6:	2200      	movs	r2, #0
 80009f8:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80009fa:	4b14      	ldr	r3, [pc, #80]	; (8000a4c <HAL_UART_MspInit+0x18c>)
 80009fc:	2200      	movs	r2, #0
 80009fe:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 8000a00:	4b12      	ldr	r3, [pc, #72]	; (8000a4c <HAL_UART_MspInit+0x18c>)
 8000a02:	2200      	movs	r2, #0
 8000a04:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000a06:	4b11      	ldr	r3, [pc, #68]	; (8000a4c <HAL_UART_MspInit+0x18c>)
 8000a08:	2200      	movs	r2, #0
 8000a0a:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 8000a0c:	480f      	ldr	r0, [pc, #60]	; (8000a4c <HAL_UART_MspInit+0x18c>)
 8000a0e:	f000 fa41 	bl	8000e94 <HAL_DMA_Init>
 8000a12:	4603      	mov	r3, r0
 8000a14:	2b00      	cmp	r3, #0
 8000a16:	d001      	beq.n	8000a1c <HAL_UART_MspInit+0x15c>
      Error_Handler();
 8000a18:	f7ff fdf4 	bl	8000604 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart3_tx);
 8000a1c:	687b      	ldr	r3, [r7, #4]
 8000a1e:	4a0b      	ldr	r2, [pc, #44]	; (8000a4c <HAL_UART_MspInit+0x18c>)
 8000a20:	671a      	str	r2, [r3, #112]	; 0x70
 8000a22:	4a0a      	ldr	r2, [pc, #40]	; (8000a4c <HAL_UART_MspInit+0x18c>)
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	6253      	str	r3, [r2, #36]	; 0x24
}
 8000a28:	bf00      	nop
 8000a2a:	3730      	adds	r7, #48	; 0x30
 8000a2c:	46bd      	mov	sp, r7
 8000a2e:	bd80      	pop	{r7, pc}
 8000a30:	40013800 	.word	0x40013800
 8000a34:	40021000 	.word	0x40021000
 8000a38:	48000800 	.word	0x48000800
 8000a3c:	40004800 	.word	0x40004800
 8000a40:	48000400 	.word	0x48000400
 8000a44:	2000036c 	.word	0x2000036c
 8000a48:	40020030 	.word	0x40020030
 8000a4c:	200003b0 	.word	0x200003b0
 8000a50:	4002001c 	.word	0x4002001c

08000a54 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a54:	b580      	push	{r7, lr}
 8000a56:	b08c      	sub	sp, #48	; 0x30
 8000a58:	af00      	add	r7, sp, #0
 8000a5a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8000a5c:	2300      	movs	r3, #0
 8000a5e:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 8000a60:	2300      	movs	r3, #0
 8000a62:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000a64:	4b2e      	ldr	r3, [pc, #184]	; (8000b20 <HAL_InitTick+0xcc>)
 8000a66:	699b      	ldr	r3, [r3, #24]
 8000a68:	4a2d      	ldr	r2, [pc, #180]	; (8000b20 <HAL_InitTick+0xcc>)
 8000a6a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000a6e:	6193      	str	r3, [r2, #24]
 8000a70:	4b2b      	ldr	r3, [pc, #172]	; (8000b20 <HAL_InitTick+0xcc>)
 8000a72:	699b      	ldr	r3, [r3, #24]
 8000a74:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000a78:	60bb      	str	r3, [r7, #8]
 8000a7a:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000a7c:	f107 020c 	add.w	r2, r7, #12
 8000a80:	f107 0310 	add.w	r3, r7, #16
 8000a84:	4611      	mov	r1, r2
 8000a86:	4618      	mov	r0, r3
 8000a88:	f002 f87c 	bl	8002b84 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000a8c:	f002 f858 	bl	8002b40 <HAL_RCC_GetPCLK2Freq>
 8000a90:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000a92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000a94:	4a23      	ldr	r2, [pc, #140]	; (8000b24 <HAL_InitTick+0xd0>)
 8000a96:	fba2 2303 	umull	r2, r3, r2, r3
 8000a9a:	0c9b      	lsrs	r3, r3, #18
 8000a9c:	3b01      	subs	r3, #1
 8000a9e:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000aa0:	4b21      	ldr	r3, [pc, #132]	; (8000b28 <HAL_InitTick+0xd4>)
 8000aa2:	4a22      	ldr	r2, [pc, #136]	; (8000b2c <HAL_InitTick+0xd8>)
 8000aa4:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8000aa6:	4b20      	ldr	r3, [pc, #128]	; (8000b28 <HAL_InitTick+0xd4>)
 8000aa8:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000aac:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000aae:	4a1e      	ldr	r2, [pc, #120]	; (8000b28 <HAL_InitTick+0xd4>)
 8000ab0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ab2:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000ab4:	4b1c      	ldr	r3, [pc, #112]	; (8000b28 <HAL_InitTick+0xd4>)
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000aba:	4b1b      	ldr	r3, [pc, #108]	; (8000b28 <HAL_InitTick+0xd4>)
 8000abc:	2200      	movs	r2, #0
 8000abe:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ac0:	4b19      	ldr	r3, [pc, #100]	; (8000b28 <HAL_InitTick+0xd4>)
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8000ac6:	4818      	ldr	r0, [pc, #96]	; (8000b28 <HAL_InitTick+0xd4>)
 8000ac8:	f003 f852 	bl	8003b70 <HAL_TIM_Base_Init>
 8000acc:	4603      	mov	r3, r0
 8000ace:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8000ad2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000ad6:	2b00      	cmp	r3, #0
 8000ad8:	d11b      	bne.n	8000b12 <HAL_InitTick+0xbe>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8000ada:	4813      	ldr	r0, [pc, #76]	; (8000b28 <HAL_InitTick+0xd4>)
 8000adc:	f003 f8aa 	bl	8003c34 <HAL_TIM_Base_Start_IT>
 8000ae0:	4603      	mov	r3, r0
 8000ae2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8000ae6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000aea:	2b00      	cmp	r3, #0
 8000aec:	d111      	bne.n	8000b12 <HAL_InitTick+0xbe>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8000aee:	2019      	movs	r0, #25
 8000af0:	f000 f9c2 	bl	8000e78 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	2b0f      	cmp	r3, #15
 8000af8:	d808      	bhi.n	8000b0c <HAL_InitTick+0xb8>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority, 0U);
 8000afa:	2200      	movs	r2, #0
 8000afc:	6879      	ldr	r1, [r7, #4]
 8000afe:	2019      	movs	r0, #25
 8000b00:	f000 f99e 	bl	8000e40 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000b04:	4a0a      	ldr	r2, [pc, #40]	; (8000b30 <HAL_InitTick+0xdc>)
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	6013      	str	r3, [r2, #0]
 8000b0a:	e002      	b.n	8000b12 <HAL_InitTick+0xbe>
      }
      else
      {
        status = HAL_ERROR;
 8000b0c:	2301      	movs	r3, #1
 8000b0e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8000b12:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8000b16:	4618      	mov	r0, r3
 8000b18:	3730      	adds	r7, #48	; 0x30
 8000b1a:	46bd      	mov	sp, r7
 8000b1c:	bd80      	pop	{r7, pc}
 8000b1e:	bf00      	nop
 8000b20:	40021000 	.word	0x40021000
 8000b24:	431bde83 	.word	0x431bde83
 8000b28:	200003f8 	.word	0x200003f8
 8000b2c:	40012c00 	.word	0x40012c00
 8000b30:	20000004 	.word	0x20000004

08000b34 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b34:	b480      	push	{r7}
 8000b36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000b38:	e7fe      	b.n	8000b38 <NMI_Handler+0x4>

08000b3a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b3a:	b480      	push	{r7}
 8000b3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b3e:	e7fe      	b.n	8000b3e <HardFault_Handler+0x4>

08000b40 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b40:	b480      	push	{r7}
 8000b42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b44:	e7fe      	b.n	8000b44 <MemManage_Handler+0x4>

08000b46 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b46:	b480      	push	{r7}
 8000b48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b4a:	e7fe      	b.n	8000b4a <BusFault_Handler+0x4>

08000b4c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b4c:	b480      	push	{r7}
 8000b4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b50:	e7fe      	b.n	8000b50 <UsageFault_Handler+0x4>

08000b52 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b52:	b480      	push	{r7}
 8000b54:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b56:	bf00      	nop
 8000b58:	46bd      	mov	sp, r7
 8000b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b5e:	4770      	bx	lr

08000b60 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8000b60:	b580      	push	{r7, lr}
 8000b62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8000b64:	4802      	ldr	r0, [pc, #8]	; (8000b70 <DMA1_Channel2_IRQHandler+0x10>)
 8000b66:	f000 f9dc 	bl	8000f22 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8000b6a:	bf00      	nop
 8000b6c:	bd80      	pop	{r7, pc}
 8000b6e:	bf00      	nop
 8000b70:	200003b0 	.word	0x200003b0

08000b74 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8000b74:	b580      	push	{r7, lr}
 8000b76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8000b78:	4802      	ldr	r0, [pc, #8]	; (8000b84 <DMA1_Channel3_IRQHandler+0x10>)
 8000b7a:	f000 f9d2 	bl	8000f22 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8000b7e:	bf00      	nop
 8000b80:	bd80      	pop	{r7, pc}
 8000b82:	bf00      	nop
 8000b84:	2000036c 	.word	0x2000036c

08000b88 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_rx);
 8000b8c:	4802      	ldr	r0, [pc, #8]	; (8000b98 <DMA1_Channel4_IRQHandler+0x10>)
 8000b8e:	f000 f9c8 	bl	8000f22 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 8000b92:	bf00      	nop
 8000b94:	bd80      	pop	{r7, pc}
 8000b96:	bf00      	nop
 8000b98:	200001d4 	.word	0x200001d4

08000b9c <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 8000ba0:	4802      	ldr	r0, [pc, #8]	; (8000bac <DMA1_Channel5_IRQHandler+0x10>)
 8000ba2:	f000 f9be 	bl	8000f22 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8000ba6:	bf00      	nop
 8000ba8:	bd80      	pop	{r7, pc}
 8000baa:	bf00      	nop
 8000bac:	20000218 	.word	0x20000218

08000bb0 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 8000bb4:	4802      	ldr	r0, [pc, #8]	; (8000bc0 <DMA1_Channel6_IRQHandler+0x10>)
 8000bb6:	f000 f9b4 	bl	8000f22 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 8000bba:	bf00      	nop
 8000bbc:	bd80      	pop	{r7, pc}
 8000bbe:	bf00      	nop
 8000bc0:	2000012c 	.word	0x2000012c

08000bc4 <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 8000bc8:	4802      	ldr	r0, [pc, #8]	; (8000bd4 <DMA1_Channel7_IRQHandler+0x10>)
 8000bca:	f000 f9aa 	bl	8000f22 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 8000bce:	bf00      	nop
 8000bd0:	bd80      	pop	{r7, pc}
 8000bd2:	bf00      	nop
 8000bd4:	200000e8 	.word	0x200000e8

08000bd8 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update and TIM16 interrupts.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000bdc:	4802      	ldr	r0, [pc, #8]	; (8000be8 <TIM1_UP_TIM16_IRQHandler+0x10>)
 8000bde:	f003 f899 	bl	8003d14 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8000be2:	bf00      	nop
 8000be4:	bd80      	pop	{r7, pc}
 8000be6:	bf00      	nop
 8000be8:	200003f8 	.word	0x200003f8

08000bec <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000bec:	b480      	push	{r7}
 8000bee:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000bf0:	4b06      	ldr	r3, [pc, #24]	; (8000c0c <SystemInit+0x20>)
 8000bf2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000bf6:	4a05      	ldr	r2, [pc, #20]	; (8000c0c <SystemInit+0x20>)
 8000bf8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000bfc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c00:	bf00      	nop
 8000c02:	46bd      	mov	sp, r7
 8000c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c08:	4770      	bx	lr
 8000c0a:	bf00      	nop
 8000c0c:	e000ed00 	.word	0xe000ed00

08000c10 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000c10:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000c48 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8000c14:	f7ff ffea 	bl	8000bec <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000c18:	480c      	ldr	r0, [pc, #48]	; (8000c4c <LoopForever+0x6>)
  ldr r1, =_edata
 8000c1a:	490d      	ldr	r1, [pc, #52]	; (8000c50 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000c1c:	4a0d      	ldr	r2, [pc, #52]	; (8000c54 <LoopForever+0xe>)
  movs r3, #0
 8000c1e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c20:	e002      	b.n	8000c28 <LoopCopyDataInit>

08000c22 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c22:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c24:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c26:	3304      	adds	r3, #4

08000c28 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c28:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c2a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c2c:	d3f9      	bcc.n	8000c22 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c2e:	4a0a      	ldr	r2, [pc, #40]	; (8000c58 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000c30:	4c0a      	ldr	r4, [pc, #40]	; (8000c5c <LoopForever+0x16>)
  movs r3, #0
 8000c32:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c34:	e001      	b.n	8000c3a <LoopFillZerobss>

08000c36 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c36:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c38:	3204      	adds	r2, #4

08000c3a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c3a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c3c:	d3fb      	bcc.n	8000c36 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000c3e:	f007 faa3 	bl	8008188 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000c42:	f7ff facd 	bl	80001e0 <main>

08000c46 <LoopForever>:

LoopForever:
    b LoopForever
 8000c46:	e7fe      	b.n	8000c46 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000c48:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000c4c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c50:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8000c54:	08008340 	.word	0x08008340
  ldr r2, =_sbss
 8000c58:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8000c5c:	20001f8c 	.word	0x20001f8c

08000c60 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000c60:	e7fe      	b.n	8000c60 <ADC1_2_IRQHandler>
	...

08000c64 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c64:	b580      	push	{r7, lr}
 8000c66:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c68:	4b08      	ldr	r3, [pc, #32]	; (8000c8c <HAL_Init+0x28>)
 8000c6a:	681b      	ldr	r3, [r3, #0]
 8000c6c:	4a07      	ldr	r2, [pc, #28]	; (8000c8c <HAL_Init+0x28>)
 8000c6e:	f043 0310 	orr.w	r3, r3, #16
 8000c72:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c74:	2003      	movs	r0, #3
 8000c76:	f000 f8d8 	bl	8000e2a <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c7a:	200f      	movs	r0, #15
 8000c7c:	f7ff feea 	bl	8000a54 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c80:	f7ff fcc6 	bl	8000610 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c84:	2300      	movs	r3, #0
}
 8000c86:	4618      	mov	r0, r3
 8000c88:	bd80      	pop	{r7, pc}
 8000c8a:	bf00      	nop
 8000c8c:	40022000 	.word	0x40022000

08000c90 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c90:	b480      	push	{r7}
 8000c92:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c94:	4b06      	ldr	r3, [pc, #24]	; (8000cb0 <HAL_IncTick+0x20>)
 8000c96:	781b      	ldrb	r3, [r3, #0]
 8000c98:	461a      	mov	r2, r3
 8000c9a:	4b06      	ldr	r3, [pc, #24]	; (8000cb4 <HAL_IncTick+0x24>)
 8000c9c:	681b      	ldr	r3, [r3, #0]
 8000c9e:	4413      	add	r3, r2
 8000ca0:	4a04      	ldr	r2, [pc, #16]	; (8000cb4 <HAL_IncTick+0x24>)
 8000ca2:	6013      	str	r3, [r2, #0]
}
 8000ca4:	bf00      	nop
 8000ca6:	46bd      	mov	sp, r7
 8000ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cac:	4770      	bx	lr
 8000cae:	bf00      	nop
 8000cb0:	20000008 	.word	0x20000008
 8000cb4:	20000444 	.word	0x20000444

08000cb8 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000cb8:	b480      	push	{r7}
 8000cba:	af00      	add	r7, sp, #0
  return uwTick;  
 8000cbc:	4b03      	ldr	r3, [pc, #12]	; (8000ccc <HAL_GetTick+0x14>)
 8000cbe:	681b      	ldr	r3, [r3, #0]
}
 8000cc0:	4618      	mov	r0, r3
 8000cc2:	46bd      	mov	sp, r7
 8000cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc8:	4770      	bx	lr
 8000cca:	bf00      	nop
 8000ccc:	20000444 	.word	0x20000444

08000cd0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000cd0:	b480      	push	{r7}
 8000cd2:	b085      	sub	sp, #20
 8000cd4:	af00      	add	r7, sp, #0
 8000cd6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	f003 0307 	and.w	r3, r3, #7
 8000cde:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ce0:	4b0c      	ldr	r3, [pc, #48]	; (8000d14 <__NVIC_SetPriorityGrouping+0x44>)
 8000ce2:	68db      	ldr	r3, [r3, #12]
 8000ce4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ce6:	68ba      	ldr	r2, [r7, #8]
 8000ce8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000cec:	4013      	ands	r3, r2
 8000cee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000cf0:	68fb      	ldr	r3, [r7, #12]
 8000cf2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000cf4:	68bb      	ldr	r3, [r7, #8]
 8000cf6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000cf8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000cfc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d00:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d02:	4a04      	ldr	r2, [pc, #16]	; (8000d14 <__NVIC_SetPriorityGrouping+0x44>)
 8000d04:	68bb      	ldr	r3, [r7, #8]
 8000d06:	60d3      	str	r3, [r2, #12]
}
 8000d08:	bf00      	nop
 8000d0a:	3714      	adds	r7, #20
 8000d0c:	46bd      	mov	sp, r7
 8000d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d12:	4770      	bx	lr
 8000d14:	e000ed00 	.word	0xe000ed00

08000d18 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d18:	b480      	push	{r7}
 8000d1a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d1c:	4b04      	ldr	r3, [pc, #16]	; (8000d30 <__NVIC_GetPriorityGrouping+0x18>)
 8000d1e:	68db      	ldr	r3, [r3, #12]
 8000d20:	0a1b      	lsrs	r3, r3, #8
 8000d22:	f003 0307 	and.w	r3, r3, #7
}
 8000d26:	4618      	mov	r0, r3
 8000d28:	46bd      	mov	sp, r7
 8000d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d2e:	4770      	bx	lr
 8000d30:	e000ed00 	.word	0xe000ed00

08000d34 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d34:	b480      	push	{r7}
 8000d36:	b083      	sub	sp, #12
 8000d38:	af00      	add	r7, sp, #0
 8000d3a:	4603      	mov	r3, r0
 8000d3c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d42:	2b00      	cmp	r3, #0
 8000d44:	db0b      	blt.n	8000d5e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d46:	79fb      	ldrb	r3, [r7, #7]
 8000d48:	f003 021f 	and.w	r2, r3, #31
 8000d4c:	4907      	ldr	r1, [pc, #28]	; (8000d6c <__NVIC_EnableIRQ+0x38>)
 8000d4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d52:	095b      	lsrs	r3, r3, #5
 8000d54:	2001      	movs	r0, #1
 8000d56:	fa00 f202 	lsl.w	r2, r0, r2
 8000d5a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000d5e:	bf00      	nop
 8000d60:	370c      	adds	r7, #12
 8000d62:	46bd      	mov	sp, r7
 8000d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d68:	4770      	bx	lr
 8000d6a:	bf00      	nop
 8000d6c:	e000e100 	.word	0xe000e100

08000d70 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d70:	b480      	push	{r7}
 8000d72:	b083      	sub	sp, #12
 8000d74:	af00      	add	r7, sp, #0
 8000d76:	4603      	mov	r3, r0
 8000d78:	6039      	str	r1, [r7, #0]
 8000d7a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d7c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d80:	2b00      	cmp	r3, #0
 8000d82:	db0a      	blt.n	8000d9a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d84:	683b      	ldr	r3, [r7, #0]
 8000d86:	b2da      	uxtb	r2, r3
 8000d88:	490c      	ldr	r1, [pc, #48]	; (8000dbc <__NVIC_SetPriority+0x4c>)
 8000d8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d8e:	0112      	lsls	r2, r2, #4
 8000d90:	b2d2      	uxtb	r2, r2
 8000d92:	440b      	add	r3, r1
 8000d94:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d98:	e00a      	b.n	8000db0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d9a:	683b      	ldr	r3, [r7, #0]
 8000d9c:	b2da      	uxtb	r2, r3
 8000d9e:	4908      	ldr	r1, [pc, #32]	; (8000dc0 <__NVIC_SetPriority+0x50>)
 8000da0:	79fb      	ldrb	r3, [r7, #7]
 8000da2:	f003 030f 	and.w	r3, r3, #15
 8000da6:	3b04      	subs	r3, #4
 8000da8:	0112      	lsls	r2, r2, #4
 8000daa:	b2d2      	uxtb	r2, r2
 8000dac:	440b      	add	r3, r1
 8000dae:	761a      	strb	r2, [r3, #24]
}
 8000db0:	bf00      	nop
 8000db2:	370c      	adds	r7, #12
 8000db4:	46bd      	mov	sp, r7
 8000db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dba:	4770      	bx	lr
 8000dbc:	e000e100 	.word	0xe000e100
 8000dc0:	e000ed00 	.word	0xe000ed00

08000dc4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000dc4:	b480      	push	{r7}
 8000dc6:	b089      	sub	sp, #36	; 0x24
 8000dc8:	af00      	add	r7, sp, #0
 8000dca:	60f8      	str	r0, [r7, #12]
 8000dcc:	60b9      	str	r1, [r7, #8]
 8000dce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000dd0:	68fb      	ldr	r3, [r7, #12]
 8000dd2:	f003 0307 	and.w	r3, r3, #7
 8000dd6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000dd8:	69fb      	ldr	r3, [r7, #28]
 8000dda:	f1c3 0307 	rsb	r3, r3, #7
 8000dde:	2b04      	cmp	r3, #4
 8000de0:	bf28      	it	cs
 8000de2:	2304      	movcs	r3, #4
 8000de4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000de6:	69fb      	ldr	r3, [r7, #28]
 8000de8:	3304      	adds	r3, #4
 8000dea:	2b06      	cmp	r3, #6
 8000dec:	d902      	bls.n	8000df4 <NVIC_EncodePriority+0x30>
 8000dee:	69fb      	ldr	r3, [r7, #28]
 8000df0:	3b03      	subs	r3, #3
 8000df2:	e000      	b.n	8000df6 <NVIC_EncodePriority+0x32>
 8000df4:	2300      	movs	r3, #0
 8000df6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000df8:	f04f 32ff 	mov.w	r2, #4294967295
 8000dfc:	69bb      	ldr	r3, [r7, #24]
 8000dfe:	fa02 f303 	lsl.w	r3, r2, r3
 8000e02:	43da      	mvns	r2, r3
 8000e04:	68bb      	ldr	r3, [r7, #8]
 8000e06:	401a      	ands	r2, r3
 8000e08:	697b      	ldr	r3, [r7, #20]
 8000e0a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e0c:	f04f 31ff 	mov.w	r1, #4294967295
 8000e10:	697b      	ldr	r3, [r7, #20]
 8000e12:	fa01 f303 	lsl.w	r3, r1, r3
 8000e16:	43d9      	mvns	r1, r3
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e1c:	4313      	orrs	r3, r2
         );
}
 8000e1e:	4618      	mov	r0, r3
 8000e20:	3724      	adds	r7, #36	; 0x24
 8000e22:	46bd      	mov	sp, r7
 8000e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e28:	4770      	bx	lr

08000e2a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e2a:	b580      	push	{r7, lr}
 8000e2c:	b082      	sub	sp, #8
 8000e2e:	af00      	add	r7, sp, #0
 8000e30:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e32:	6878      	ldr	r0, [r7, #4]
 8000e34:	f7ff ff4c 	bl	8000cd0 <__NVIC_SetPriorityGrouping>
}
 8000e38:	bf00      	nop
 8000e3a:	3708      	adds	r7, #8
 8000e3c:	46bd      	mov	sp, r7
 8000e3e:	bd80      	pop	{r7, pc}

08000e40 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e40:	b580      	push	{r7, lr}
 8000e42:	b086      	sub	sp, #24
 8000e44:	af00      	add	r7, sp, #0
 8000e46:	4603      	mov	r3, r0
 8000e48:	60b9      	str	r1, [r7, #8]
 8000e4a:	607a      	str	r2, [r7, #4]
 8000e4c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000e4e:	2300      	movs	r3, #0
 8000e50:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000e52:	f7ff ff61 	bl	8000d18 <__NVIC_GetPriorityGrouping>
 8000e56:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e58:	687a      	ldr	r2, [r7, #4]
 8000e5a:	68b9      	ldr	r1, [r7, #8]
 8000e5c:	6978      	ldr	r0, [r7, #20]
 8000e5e:	f7ff ffb1 	bl	8000dc4 <NVIC_EncodePriority>
 8000e62:	4602      	mov	r2, r0
 8000e64:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e68:	4611      	mov	r1, r2
 8000e6a:	4618      	mov	r0, r3
 8000e6c:	f7ff ff80 	bl	8000d70 <__NVIC_SetPriority>
}
 8000e70:	bf00      	nop
 8000e72:	3718      	adds	r7, #24
 8000e74:	46bd      	mov	sp, r7
 8000e76:	bd80      	pop	{r7, pc}

08000e78 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	b082      	sub	sp, #8
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	4603      	mov	r3, r0
 8000e80:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000e82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e86:	4618      	mov	r0, r3
 8000e88:	f7ff ff54 	bl	8000d34 <__NVIC_EnableIRQ>
}
 8000e8c:	bf00      	nop
 8000e8e:	3708      	adds	r7, #8
 8000e90:	46bd      	mov	sp, r7
 8000e92:	bd80      	pop	{r7, pc}

08000e94 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 8000e94:	b580      	push	{r7, lr}
 8000e96:	b084      	sub	sp, #16
 8000e98:	af00      	add	r7, sp, #0
 8000e9a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8000e9c:	2300      	movs	r3, #0
 8000e9e:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	2b00      	cmp	r3, #0
 8000ea4:	d101      	bne.n	8000eaa <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8000ea6:	2301      	movs	r3, #1
 8000ea8:	e037      	b.n	8000f1a <HAL_DMA_Init+0x86>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	2202      	movs	r2, #2
 8000eae:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8000eba:	68fb      	ldr	r3, [r7, #12]
 8000ebc:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8000ec0:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8000ec4:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8000ece:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	68db      	ldr	r3, [r3, #12]
 8000ed4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000eda:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	695b      	ldr	r3, [r3, #20]
 8000ee0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000ee6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	69db      	ldr	r3, [r3, #28]
 8000eec:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8000eee:	68fa      	ldr	r2, [r7, #12]
 8000ef0:	4313      	orrs	r3, r2
 8000ef2:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	68fa      	ldr	r2, [r7, #12]
 8000efa:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8000efc:	6878      	ldr	r0, [r7, #4]
 8000efe:	f000 f8b3 	bl	8001068 <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	2200      	movs	r2, #0
 8000f06:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	2201      	movs	r2, #1
 8000f0c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	2200      	movs	r2, #0
 8000f14:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 8000f18:	2300      	movs	r3, #0
}  
 8000f1a:	4618      	mov	r0, r3
 8000f1c:	3710      	adds	r7, #16
 8000f1e:	46bd      	mov	sp, r7
 8000f20:	bd80      	pop	{r7, pc}

08000f22 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8000f22:	b580      	push	{r7, lr}
 8000f24:	b084      	sub	sp, #16
 8000f26:	af00      	add	r7, sp, #0
 8000f28:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f3e:	2204      	movs	r2, #4
 8000f40:	409a      	lsls	r2, r3
 8000f42:	68fb      	ldr	r3, [r7, #12]
 8000f44:	4013      	ands	r3, r2
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	d024      	beq.n	8000f94 <HAL_DMA_IRQHandler+0x72>
 8000f4a:	68bb      	ldr	r3, [r7, #8]
 8000f4c:	f003 0304 	and.w	r3, r3, #4
 8000f50:	2b00      	cmp	r3, #0
 8000f52:	d01f      	beq.n	8000f94 <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	f003 0320 	and.w	r3, r3, #32
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	d107      	bne.n	8000f72 <HAL_DMA_IRQHandler+0x50>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	681b      	ldr	r3, [r3, #0]
 8000f66:	681a      	ldr	r2, [r3, #0]
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	f022 0204 	bic.w	r2, r2, #4
 8000f70:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000f7a:	2104      	movs	r1, #4
 8000f7c:	fa01 f202 	lsl.w	r2, r1, r2
 8000f80:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	d06a      	beq.n	8001060 <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f8e:	6878      	ldr	r0, [r7, #4]
 8000f90:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 8000f92:	e065      	b.n	8001060 <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f98:	2202      	movs	r2, #2
 8000f9a:	409a      	lsls	r2, r3
 8000f9c:	68fb      	ldr	r3, [r7, #12]
 8000f9e:	4013      	ands	r3, r2
 8000fa0:	2b00      	cmp	r3, #0
 8000fa2:	d02c      	beq.n	8000ffe <HAL_DMA_IRQHandler+0xdc>
 8000fa4:	68bb      	ldr	r3, [r7, #8]
 8000fa6:	f003 0302 	and.w	r3, r3, #2
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	d027      	beq.n	8000ffe <HAL_DMA_IRQHandler+0xdc>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	f003 0320 	and.w	r3, r3, #32
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	d10b      	bne.n	8000fd4 <HAL_DMA_IRQHandler+0xb2>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	681a      	ldr	r2, [r3, #0]
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	f022 020a 	bic.w	r2, r2, #10
 8000fca:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	2201      	movs	r2, #1
 8000fd0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000fdc:	2102      	movs	r1, #2
 8000fde:	fa01 f202 	lsl.w	r2, r1, r2
 8000fe2:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	f883 2020 	strb.w	r2, [r3, #32]
  	
  	if(hdma->XferCpltCallback != NULL)
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	d035      	beq.n	8001060 <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ff8:	6878      	ldr	r0, [r7, #4]
 8000ffa:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 8000ffc:	e030      	b.n	8001060 <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001002:	2208      	movs	r2, #8
 8001004:	409a      	lsls	r2, r3
 8001006:	68fb      	ldr	r3, [r7, #12]
 8001008:	4013      	ands	r3, r2
 800100a:	2b00      	cmp	r3, #0
 800100c:	d028      	beq.n	8001060 <HAL_DMA_IRQHandler+0x13e>
 800100e:	68bb      	ldr	r3, [r7, #8]
 8001010:	f003 0308 	and.w	r3, r3, #8
 8001014:	2b00      	cmp	r3, #0
 8001016:	d023      	beq.n	8001060 <HAL_DMA_IRQHandler+0x13e>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	681a      	ldr	r2, [r3, #0]
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	f022 020e 	bic.w	r2, r2, #14
 8001026:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001030:	2101      	movs	r1, #1
 8001032:	fa01 f202 	lsl.w	r2, r1, r2
 8001036:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	2201      	movs	r2, #1
 800103c:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	2201      	movs	r2, #1
 8001042:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	2200      	movs	r2, #0
 800104a:	f883 2020 	strb.w	r2, [r3, #32]
    
    if(hdma->XferErrorCallback != NULL)
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001052:	2b00      	cmp	r3, #0
 8001054:	d004      	beq.n	8001060 <HAL_DMA_IRQHandler+0x13e>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800105a:	6878      	ldr	r0, [r7, #4]
 800105c:	4798      	blx	r3
    }
  }
}  
 800105e:	e7ff      	b.n	8001060 <HAL_DMA_IRQHandler+0x13e>
 8001060:	bf00      	nop
 8001062:	3710      	adds	r7, #16
 8001064:	46bd      	mov	sp, r7
 8001066:	bd80      	pop	{r7, pc}

08001068 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001068:	b480      	push	{r7}
 800106a:	b083      	sub	sp, #12
 800106c:	af00      	add	r7, sp, #0
 800106e:	6078      	str	r0, [r7, #4]
#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	461a      	mov	r2, r3
 8001076:	4b14      	ldr	r3, [pc, #80]	; (80010c8 <DMA_CalcBaseAndBitshift+0x60>)
 8001078:	429a      	cmp	r2, r3
 800107a:	d80f      	bhi.n	800109c <DMA_CalcBaseAndBitshift+0x34>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	461a      	mov	r2, r3
 8001082:	4b12      	ldr	r3, [pc, #72]	; (80010cc <DMA_CalcBaseAndBitshift+0x64>)
 8001084:	4413      	add	r3, r2
 8001086:	4a12      	ldr	r2, [pc, #72]	; (80010d0 <DMA_CalcBaseAndBitshift+0x68>)
 8001088:	fba2 2303 	umull	r2, r3, r2, r3
 800108c:	091b      	lsrs	r3, r3, #4
 800108e:	009a      	lsls	r2, r3, #2
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA1;
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	4a0f      	ldr	r2, [pc, #60]	; (80010d4 <DMA_CalcBaseAndBitshift+0x6c>)
 8001098:	63da      	str	r2, [r3, #60]	; 0x3c
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif
}
 800109a:	e00e      	b.n	80010ba <DMA_CalcBaseAndBitshift+0x52>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	461a      	mov	r2, r3
 80010a2:	4b0d      	ldr	r3, [pc, #52]	; (80010d8 <DMA_CalcBaseAndBitshift+0x70>)
 80010a4:	4413      	add	r3, r2
 80010a6:	4a0a      	ldr	r2, [pc, #40]	; (80010d0 <DMA_CalcBaseAndBitshift+0x68>)
 80010a8:	fba2 2303 	umull	r2, r3, r2, r3
 80010ac:	091b      	lsrs	r3, r3, #4
 80010ae:	009a      	lsls	r2, r3, #2
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA2;
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	4a09      	ldr	r2, [pc, #36]	; (80010dc <DMA_CalcBaseAndBitshift+0x74>)
 80010b8:	63da      	str	r2, [r3, #60]	; 0x3c
}
 80010ba:	bf00      	nop
 80010bc:	370c      	adds	r7, #12
 80010be:	46bd      	mov	sp, r7
 80010c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c4:	4770      	bx	lr
 80010c6:	bf00      	nop
 80010c8:	40020407 	.word	0x40020407
 80010cc:	bffdfff8 	.word	0xbffdfff8
 80010d0:	cccccccd 	.word	0xcccccccd
 80010d4:	40020000 	.word	0x40020000
 80010d8:	bffdfbf8 	.word	0xbffdfbf8
 80010dc:	40020400 	.word	0x40020400

080010e0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80010e0:	b480      	push	{r7}
 80010e2:	b087      	sub	sp, #28
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	6078      	str	r0, [r7, #4]
 80010e8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80010ea:	2300      	movs	r3, #0
 80010ec:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80010ee:	e160      	b.n	80013b2 <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80010f0:	683b      	ldr	r3, [r7, #0]
 80010f2:	681a      	ldr	r2, [r3, #0]
 80010f4:	2101      	movs	r1, #1
 80010f6:	697b      	ldr	r3, [r7, #20]
 80010f8:	fa01 f303 	lsl.w	r3, r1, r3
 80010fc:	4013      	ands	r3, r2
 80010fe:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001100:	68fb      	ldr	r3, [r7, #12]
 8001102:	2b00      	cmp	r3, #0
 8001104:	f000 8152 	beq.w	80013ac <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001108:	683b      	ldr	r3, [r7, #0]
 800110a:	685b      	ldr	r3, [r3, #4]
 800110c:	f003 0303 	and.w	r3, r3, #3
 8001110:	2b01      	cmp	r3, #1
 8001112:	d005      	beq.n	8001120 <HAL_GPIO_Init+0x40>
 8001114:	683b      	ldr	r3, [r7, #0]
 8001116:	685b      	ldr	r3, [r3, #4]
 8001118:	f003 0303 	and.w	r3, r3, #3
 800111c:	2b02      	cmp	r3, #2
 800111e:	d130      	bne.n	8001182 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	689b      	ldr	r3, [r3, #8]
 8001124:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001126:	697b      	ldr	r3, [r7, #20]
 8001128:	005b      	lsls	r3, r3, #1
 800112a:	2203      	movs	r2, #3
 800112c:	fa02 f303 	lsl.w	r3, r2, r3
 8001130:	43db      	mvns	r3, r3
 8001132:	693a      	ldr	r2, [r7, #16]
 8001134:	4013      	ands	r3, r2
 8001136:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001138:	683b      	ldr	r3, [r7, #0]
 800113a:	68da      	ldr	r2, [r3, #12]
 800113c:	697b      	ldr	r3, [r7, #20]
 800113e:	005b      	lsls	r3, r3, #1
 8001140:	fa02 f303 	lsl.w	r3, r2, r3
 8001144:	693a      	ldr	r2, [r7, #16]
 8001146:	4313      	orrs	r3, r2
 8001148:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	693a      	ldr	r2, [r7, #16]
 800114e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	685b      	ldr	r3, [r3, #4]
 8001154:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001156:	2201      	movs	r2, #1
 8001158:	697b      	ldr	r3, [r7, #20]
 800115a:	fa02 f303 	lsl.w	r3, r2, r3
 800115e:	43db      	mvns	r3, r3
 8001160:	693a      	ldr	r2, [r7, #16]
 8001162:	4013      	ands	r3, r2
 8001164:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001166:	683b      	ldr	r3, [r7, #0]
 8001168:	685b      	ldr	r3, [r3, #4]
 800116a:	091b      	lsrs	r3, r3, #4
 800116c:	f003 0201 	and.w	r2, r3, #1
 8001170:	697b      	ldr	r3, [r7, #20]
 8001172:	fa02 f303 	lsl.w	r3, r2, r3
 8001176:	693a      	ldr	r2, [r7, #16]
 8001178:	4313      	orrs	r3, r2
 800117a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	693a      	ldr	r2, [r7, #16]
 8001180:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001182:	683b      	ldr	r3, [r7, #0]
 8001184:	685b      	ldr	r3, [r3, #4]
 8001186:	f003 0303 	and.w	r3, r3, #3
 800118a:	2b03      	cmp	r3, #3
 800118c:	d017      	beq.n	80011be <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	68db      	ldr	r3, [r3, #12]
 8001192:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001194:	697b      	ldr	r3, [r7, #20]
 8001196:	005b      	lsls	r3, r3, #1
 8001198:	2203      	movs	r2, #3
 800119a:	fa02 f303 	lsl.w	r3, r2, r3
 800119e:	43db      	mvns	r3, r3
 80011a0:	693a      	ldr	r2, [r7, #16]
 80011a2:	4013      	ands	r3, r2
 80011a4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80011a6:	683b      	ldr	r3, [r7, #0]
 80011a8:	689a      	ldr	r2, [r3, #8]
 80011aa:	697b      	ldr	r3, [r7, #20]
 80011ac:	005b      	lsls	r3, r3, #1
 80011ae:	fa02 f303 	lsl.w	r3, r2, r3
 80011b2:	693a      	ldr	r2, [r7, #16]
 80011b4:	4313      	orrs	r3, r2
 80011b6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	693a      	ldr	r2, [r7, #16]
 80011bc:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80011be:	683b      	ldr	r3, [r7, #0]
 80011c0:	685b      	ldr	r3, [r3, #4]
 80011c2:	f003 0303 	and.w	r3, r3, #3
 80011c6:	2b02      	cmp	r3, #2
 80011c8:	d123      	bne.n	8001212 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80011ca:	697b      	ldr	r3, [r7, #20]
 80011cc:	08da      	lsrs	r2, r3, #3
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	3208      	adds	r2, #8
 80011d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80011d6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80011d8:	697b      	ldr	r3, [r7, #20]
 80011da:	f003 0307 	and.w	r3, r3, #7
 80011de:	009b      	lsls	r3, r3, #2
 80011e0:	220f      	movs	r2, #15
 80011e2:	fa02 f303 	lsl.w	r3, r2, r3
 80011e6:	43db      	mvns	r3, r3
 80011e8:	693a      	ldr	r2, [r7, #16]
 80011ea:	4013      	ands	r3, r2
 80011ec:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80011ee:	683b      	ldr	r3, [r7, #0]
 80011f0:	691a      	ldr	r2, [r3, #16]
 80011f2:	697b      	ldr	r3, [r7, #20]
 80011f4:	f003 0307 	and.w	r3, r3, #7
 80011f8:	009b      	lsls	r3, r3, #2
 80011fa:	fa02 f303 	lsl.w	r3, r2, r3
 80011fe:	693a      	ldr	r2, [r7, #16]
 8001200:	4313      	orrs	r3, r2
 8001202:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001204:	697b      	ldr	r3, [r7, #20]
 8001206:	08da      	lsrs	r2, r3, #3
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	3208      	adds	r2, #8
 800120c:	6939      	ldr	r1, [r7, #16]
 800120e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001218:	697b      	ldr	r3, [r7, #20]
 800121a:	005b      	lsls	r3, r3, #1
 800121c:	2203      	movs	r2, #3
 800121e:	fa02 f303 	lsl.w	r3, r2, r3
 8001222:	43db      	mvns	r3, r3
 8001224:	693a      	ldr	r2, [r7, #16]
 8001226:	4013      	ands	r3, r2
 8001228:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800122a:	683b      	ldr	r3, [r7, #0]
 800122c:	685b      	ldr	r3, [r3, #4]
 800122e:	f003 0203 	and.w	r2, r3, #3
 8001232:	697b      	ldr	r3, [r7, #20]
 8001234:	005b      	lsls	r3, r3, #1
 8001236:	fa02 f303 	lsl.w	r3, r2, r3
 800123a:	693a      	ldr	r2, [r7, #16]
 800123c:	4313      	orrs	r3, r2
 800123e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	693a      	ldr	r2, [r7, #16]
 8001244:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001246:	683b      	ldr	r3, [r7, #0]
 8001248:	685b      	ldr	r3, [r3, #4]
 800124a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800124e:	2b00      	cmp	r3, #0
 8001250:	f000 80ac 	beq.w	80013ac <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001254:	4b5e      	ldr	r3, [pc, #376]	; (80013d0 <HAL_GPIO_Init+0x2f0>)
 8001256:	699b      	ldr	r3, [r3, #24]
 8001258:	4a5d      	ldr	r2, [pc, #372]	; (80013d0 <HAL_GPIO_Init+0x2f0>)
 800125a:	f043 0301 	orr.w	r3, r3, #1
 800125e:	6193      	str	r3, [r2, #24]
 8001260:	4b5b      	ldr	r3, [pc, #364]	; (80013d0 <HAL_GPIO_Init+0x2f0>)
 8001262:	699b      	ldr	r3, [r3, #24]
 8001264:	f003 0301 	and.w	r3, r3, #1
 8001268:	60bb      	str	r3, [r7, #8]
 800126a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800126c:	4a59      	ldr	r2, [pc, #356]	; (80013d4 <HAL_GPIO_Init+0x2f4>)
 800126e:	697b      	ldr	r3, [r7, #20]
 8001270:	089b      	lsrs	r3, r3, #2
 8001272:	3302      	adds	r3, #2
 8001274:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001278:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800127a:	697b      	ldr	r3, [r7, #20]
 800127c:	f003 0303 	and.w	r3, r3, #3
 8001280:	009b      	lsls	r3, r3, #2
 8001282:	220f      	movs	r2, #15
 8001284:	fa02 f303 	lsl.w	r3, r2, r3
 8001288:	43db      	mvns	r3, r3
 800128a:	693a      	ldr	r2, [r7, #16]
 800128c:	4013      	ands	r3, r2
 800128e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001296:	d025      	beq.n	80012e4 <HAL_GPIO_Init+0x204>
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	4a4f      	ldr	r2, [pc, #316]	; (80013d8 <HAL_GPIO_Init+0x2f8>)
 800129c:	4293      	cmp	r3, r2
 800129e:	d01f      	beq.n	80012e0 <HAL_GPIO_Init+0x200>
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	4a4e      	ldr	r2, [pc, #312]	; (80013dc <HAL_GPIO_Init+0x2fc>)
 80012a4:	4293      	cmp	r3, r2
 80012a6:	d019      	beq.n	80012dc <HAL_GPIO_Init+0x1fc>
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	4a4d      	ldr	r2, [pc, #308]	; (80013e0 <HAL_GPIO_Init+0x300>)
 80012ac:	4293      	cmp	r3, r2
 80012ae:	d013      	beq.n	80012d8 <HAL_GPIO_Init+0x1f8>
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	4a4c      	ldr	r2, [pc, #304]	; (80013e4 <HAL_GPIO_Init+0x304>)
 80012b4:	4293      	cmp	r3, r2
 80012b6:	d00d      	beq.n	80012d4 <HAL_GPIO_Init+0x1f4>
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	4a4b      	ldr	r2, [pc, #300]	; (80013e8 <HAL_GPIO_Init+0x308>)
 80012bc:	4293      	cmp	r3, r2
 80012be:	d007      	beq.n	80012d0 <HAL_GPIO_Init+0x1f0>
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	4a4a      	ldr	r2, [pc, #296]	; (80013ec <HAL_GPIO_Init+0x30c>)
 80012c4:	4293      	cmp	r3, r2
 80012c6:	d101      	bne.n	80012cc <HAL_GPIO_Init+0x1ec>
 80012c8:	2306      	movs	r3, #6
 80012ca:	e00c      	b.n	80012e6 <HAL_GPIO_Init+0x206>
 80012cc:	2307      	movs	r3, #7
 80012ce:	e00a      	b.n	80012e6 <HAL_GPIO_Init+0x206>
 80012d0:	2305      	movs	r3, #5
 80012d2:	e008      	b.n	80012e6 <HAL_GPIO_Init+0x206>
 80012d4:	2304      	movs	r3, #4
 80012d6:	e006      	b.n	80012e6 <HAL_GPIO_Init+0x206>
 80012d8:	2303      	movs	r3, #3
 80012da:	e004      	b.n	80012e6 <HAL_GPIO_Init+0x206>
 80012dc:	2302      	movs	r3, #2
 80012de:	e002      	b.n	80012e6 <HAL_GPIO_Init+0x206>
 80012e0:	2301      	movs	r3, #1
 80012e2:	e000      	b.n	80012e6 <HAL_GPIO_Init+0x206>
 80012e4:	2300      	movs	r3, #0
 80012e6:	697a      	ldr	r2, [r7, #20]
 80012e8:	f002 0203 	and.w	r2, r2, #3
 80012ec:	0092      	lsls	r2, r2, #2
 80012ee:	4093      	lsls	r3, r2
 80012f0:	693a      	ldr	r2, [r7, #16]
 80012f2:	4313      	orrs	r3, r2
 80012f4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80012f6:	4937      	ldr	r1, [pc, #220]	; (80013d4 <HAL_GPIO_Init+0x2f4>)
 80012f8:	697b      	ldr	r3, [r7, #20]
 80012fa:	089b      	lsrs	r3, r3, #2
 80012fc:	3302      	adds	r3, #2
 80012fe:	693a      	ldr	r2, [r7, #16]
 8001300:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001304:	4b3a      	ldr	r3, [pc, #232]	; (80013f0 <HAL_GPIO_Init+0x310>)
 8001306:	689b      	ldr	r3, [r3, #8]
 8001308:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800130a:	68fb      	ldr	r3, [r7, #12]
 800130c:	43db      	mvns	r3, r3
 800130e:	693a      	ldr	r2, [r7, #16]
 8001310:	4013      	ands	r3, r2
 8001312:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001314:	683b      	ldr	r3, [r7, #0]
 8001316:	685b      	ldr	r3, [r3, #4]
 8001318:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800131c:	2b00      	cmp	r3, #0
 800131e:	d003      	beq.n	8001328 <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 8001320:	693a      	ldr	r2, [r7, #16]
 8001322:	68fb      	ldr	r3, [r7, #12]
 8001324:	4313      	orrs	r3, r2
 8001326:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001328:	4a31      	ldr	r2, [pc, #196]	; (80013f0 <HAL_GPIO_Init+0x310>)
 800132a:	693b      	ldr	r3, [r7, #16]
 800132c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800132e:	4b30      	ldr	r3, [pc, #192]	; (80013f0 <HAL_GPIO_Init+0x310>)
 8001330:	68db      	ldr	r3, [r3, #12]
 8001332:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001334:	68fb      	ldr	r3, [r7, #12]
 8001336:	43db      	mvns	r3, r3
 8001338:	693a      	ldr	r2, [r7, #16]
 800133a:	4013      	ands	r3, r2
 800133c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800133e:	683b      	ldr	r3, [r7, #0]
 8001340:	685b      	ldr	r3, [r3, #4]
 8001342:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001346:	2b00      	cmp	r3, #0
 8001348:	d003      	beq.n	8001352 <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 800134a:	693a      	ldr	r2, [r7, #16]
 800134c:	68fb      	ldr	r3, [r7, #12]
 800134e:	4313      	orrs	r3, r2
 8001350:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001352:	4a27      	ldr	r2, [pc, #156]	; (80013f0 <HAL_GPIO_Init+0x310>)
 8001354:	693b      	ldr	r3, [r7, #16]
 8001356:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001358:	4b25      	ldr	r3, [pc, #148]	; (80013f0 <HAL_GPIO_Init+0x310>)
 800135a:	685b      	ldr	r3, [r3, #4]
 800135c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800135e:	68fb      	ldr	r3, [r7, #12]
 8001360:	43db      	mvns	r3, r3
 8001362:	693a      	ldr	r2, [r7, #16]
 8001364:	4013      	ands	r3, r2
 8001366:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001368:	683b      	ldr	r3, [r7, #0]
 800136a:	685b      	ldr	r3, [r3, #4]
 800136c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001370:	2b00      	cmp	r3, #0
 8001372:	d003      	beq.n	800137c <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8001374:	693a      	ldr	r2, [r7, #16]
 8001376:	68fb      	ldr	r3, [r7, #12]
 8001378:	4313      	orrs	r3, r2
 800137a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800137c:	4a1c      	ldr	r2, [pc, #112]	; (80013f0 <HAL_GPIO_Init+0x310>)
 800137e:	693b      	ldr	r3, [r7, #16]
 8001380:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001382:	4b1b      	ldr	r3, [pc, #108]	; (80013f0 <HAL_GPIO_Init+0x310>)
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001388:	68fb      	ldr	r3, [r7, #12]
 800138a:	43db      	mvns	r3, r3
 800138c:	693a      	ldr	r2, [r7, #16]
 800138e:	4013      	ands	r3, r2
 8001390:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001392:	683b      	ldr	r3, [r7, #0]
 8001394:	685b      	ldr	r3, [r3, #4]
 8001396:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800139a:	2b00      	cmp	r3, #0
 800139c:	d003      	beq.n	80013a6 <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 800139e:	693a      	ldr	r2, [r7, #16]
 80013a0:	68fb      	ldr	r3, [r7, #12]
 80013a2:	4313      	orrs	r3, r2
 80013a4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80013a6:	4a12      	ldr	r2, [pc, #72]	; (80013f0 <HAL_GPIO_Init+0x310>)
 80013a8:	693b      	ldr	r3, [r7, #16]
 80013aa:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80013ac:	697b      	ldr	r3, [r7, #20]
 80013ae:	3301      	adds	r3, #1
 80013b0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80013b2:	683b      	ldr	r3, [r7, #0]
 80013b4:	681a      	ldr	r2, [r3, #0]
 80013b6:	697b      	ldr	r3, [r7, #20]
 80013b8:	fa22 f303 	lsr.w	r3, r2, r3
 80013bc:	2b00      	cmp	r3, #0
 80013be:	f47f ae97 	bne.w	80010f0 <HAL_GPIO_Init+0x10>
  }
}
 80013c2:	bf00      	nop
 80013c4:	bf00      	nop
 80013c6:	371c      	adds	r7, #28
 80013c8:	46bd      	mov	sp, r7
 80013ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ce:	4770      	bx	lr
 80013d0:	40021000 	.word	0x40021000
 80013d4:	40010000 	.word	0x40010000
 80013d8:	48000400 	.word	0x48000400
 80013dc:	48000800 	.word	0x48000800
 80013e0:	48000c00 	.word	0x48000c00
 80013e4:	48001000 	.word	0x48001000
 80013e8:	48001400 	.word	0x48001400
 80013ec:	48001800 	.word	0x48001800
 80013f0:	40010400 	.word	0x40010400

080013f4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80013f4:	b480      	push	{r7}
 80013f6:	b083      	sub	sp, #12
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	6078      	str	r0, [r7, #4]
 80013fc:	460b      	mov	r3, r1
 80013fe:	807b      	strh	r3, [r7, #2]
 8001400:	4613      	mov	r3, r2
 8001402:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001404:	787b      	ldrb	r3, [r7, #1]
 8001406:	2b00      	cmp	r3, #0
 8001408:	d003      	beq.n	8001412 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800140a:	887a      	ldrh	r2, [r7, #2]
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001410:	e002      	b.n	8001418 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001412:	887a      	ldrh	r2, [r7, #2]
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001418:	bf00      	nop
 800141a:	370c      	adds	r7, #12
 800141c:	46bd      	mov	sp, r7
 800141e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001422:	4770      	bx	lr

08001424 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001424:	b580      	push	{r7, lr}
 8001426:	b082      	sub	sp, #8
 8001428:	af00      	add	r7, sp, #0
 800142a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	2b00      	cmp	r3, #0
 8001430:	d101      	bne.n	8001436 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001432:	2301      	movs	r3, #1
 8001434:	e081      	b.n	800153a <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800143c:	b2db      	uxtb	r3, r3
 800143e:	2b00      	cmp	r3, #0
 8001440:	d106      	bne.n	8001450 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	2200      	movs	r2, #0
 8001446:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800144a:	6878      	ldr	r0, [r7, #4]
 800144c:	f7ff f908 	bl	8000660 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	2224      	movs	r2, #36	; 0x24
 8001454:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	681a      	ldr	r2, [r3, #0]
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	f022 0201 	bic.w	r2, r2, #1
 8001466:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	685a      	ldr	r2, [r3, #4]
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001474:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	689a      	ldr	r2, [r3, #8]
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001484:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	68db      	ldr	r3, [r3, #12]
 800148a:	2b01      	cmp	r3, #1
 800148c:	d107      	bne.n	800149e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	689a      	ldr	r2, [r3, #8]
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800149a:	609a      	str	r2, [r3, #8]
 800149c:	e006      	b.n	80014ac <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	689a      	ldr	r2, [r3, #8]
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80014aa:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	68db      	ldr	r3, [r3, #12]
 80014b0:	2b02      	cmp	r3, #2
 80014b2:	d104      	bne.n	80014be <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80014bc:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	685b      	ldr	r3, [r3, #4]
 80014c4:	687a      	ldr	r2, [r7, #4]
 80014c6:	6812      	ldr	r2, [r2, #0]
 80014c8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80014cc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80014d0:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	68da      	ldr	r2, [r3, #12]
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80014e0:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	691a      	ldr	r2, [r3, #16]
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	695b      	ldr	r3, [r3, #20]
 80014ea:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	699b      	ldr	r3, [r3, #24]
 80014f2:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	430a      	orrs	r2, r1
 80014fa:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	69d9      	ldr	r1, [r3, #28]
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	6a1a      	ldr	r2, [r3, #32]
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	430a      	orrs	r2, r1
 800150a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	681a      	ldr	r2, [r3, #0]
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	f042 0201 	orr.w	r2, r2, #1
 800151a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	2200      	movs	r2, #0
 8001520:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	2220      	movs	r2, #32
 8001526:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	2200      	movs	r2, #0
 800152e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	2200      	movs	r2, #0
 8001534:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8001538:	2300      	movs	r3, #0
}
 800153a:	4618      	mov	r0, r3
 800153c:	3708      	adds	r7, #8
 800153e:	46bd      	mov	sp, r7
 8001540:	bd80      	pop	{r7, pc}

08001542 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001542:	b480      	push	{r7}
 8001544:	b083      	sub	sp, #12
 8001546:	af00      	add	r7, sp, #0
 8001548:	6078      	str	r0, [r7, #4]
 800154a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001552:	b2db      	uxtb	r3, r3
 8001554:	2b20      	cmp	r3, #32
 8001556:	d138      	bne.n	80015ca <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800155e:	2b01      	cmp	r3, #1
 8001560:	d101      	bne.n	8001566 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001562:	2302      	movs	r3, #2
 8001564:	e032      	b.n	80015cc <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	2201      	movs	r2, #1
 800156a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	2224      	movs	r2, #36	; 0x24
 8001572:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	681a      	ldr	r2, [r3, #0]
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	f022 0201 	bic.w	r2, r2, #1
 8001584:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	681a      	ldr	r2, [r3, #0]
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001594:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	6819      	ldr	r1, [r3, #0]
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	683a      	ldr	r2, [r7, #0]
 80015a2:	430a      	orrs	r2, r1
 80015a4:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	681a      	ldr	r2, [r3, #0]
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	f042 0201 	orr.w	r2, r2, #1
 80015b4:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	2220      	movs	r2, #32
 80015ba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	2200      	movs	r2, #0
 80015c2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80015c6:	2300      	movs	r3, #0
 80015c8:	e000      	b.n	80015cc <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80015ca:	2302      	movs	r3, #2
  }
}
 80015cc:	4618      	mov	r0, r3
 80015ce:	370c      	adds	r7, #12
 80015d0:	46bd      	mov	sp, r7
 80015d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d6:	4770      	bx	lr

080015d8 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80015d8:	b480      	push	{r7}
 80015da:	b085      	sub	sp, #20
 80015dc:	af00      	add	r7, sp, #0
 80015de:	6078      	str	r0, [r7, #4]
 80015e0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80015e8:	b2db      	uxtb	r3, r3
 80015ea:	2b20      	cmp	r3, #32
 80015ec:	d139      	bne.n	8001662 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80015f4:	2b01      	cmp	r3, #1
 80015f6:	d101      	bne.n	80015fc <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80015f8:	2302      	movs	r3, #2
 80015fa:	e033      	b.n	8001664 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	2201      	movs	r2, #1
 8001600:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	2224      	movs	r2, #36	; 0x24
 8001608:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	681a      	ldr	r2, [r3, #0]
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	f022 0201 	bic.w	r2, r2, #1
 800161a:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001624:	68fb      	ldr	r3, [r7, #12]
 8001626:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800162a:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800162c:	683b      	ldr	r3, [r7, #0]
 800162e:	021b      	lsls	r3, r3, #8
 8001630:	68fa      	ldr	r2, [r7, #12]
 8001632:	4313      	orrs	r3, r2
 8001634:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	68fa      	ldr	r2, [r7, #12]
 800163c:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	681a      	ldr	r2, [r3, #0]
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	f042 0201 	orr.w	r2, r2, #1
 800164c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	2220      	movs	r2, #32
 8001652:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	2200      	movs	r2, #0
 800165a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800165e:	2300      	movs	r3, #0
 8001660:	e000      	b.n	8001664 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001662:	2302      	movs	r3, #2
  }
}
 8001664:	4618      	mov	r0, r3
 8001666:	3714      	adds	r7, #20
 8001668:	46bd      	mov	sp, r7
 800166a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800166e:	4770      	bx	lr

08001670 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001670:	b580      	push	{r7, lr}
 8001672:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 8001676:	af00      	add	r7, sp, #0
 8001678:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800167c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001680:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001682:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001686:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	2b00      	cmp	r3, #0
 800168e:	d102      	bne.n	8001696 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8001690:	2301      	movs	r3, #1
 8001692:	f001 b83a 	b.w	800270a <HAL_RCC_OscConfig+0x109a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001696:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800169a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	f003 0301 	and.w	r3, r3, #1
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	f000 816f 	beq.w	800198a <HAL_RCC_OscConfig+0x31a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80016ac:	4bb5      	ldr	r3, [pc, #724]	; (8001984 <HAL_RCC_OscConfig+0x314>)
 80016ae:	685b      	ldr	r3, [r3, #4]
 80016b0:	f003 030c 	and.w	r3, r3, #12
 80016b4:	2b04      	cmp	r3, #4
 80016b6:	d00c      	beq.n	80016d2 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80016b8:	4bb2      	ldr	r3, [pc, #712]	; (8001984 <HAL_RCC_OscConfig+0x314>)
 80016ba:	685b      	ldr	r3, [r3, #4]
 80016bc:	f003 030c 	and.w	r3, r3, #12
 80016c0:	2b08      	cmp	r3, #8
 80016c2:	d15c      	bne.n	800177e <HAL_RCC_OscConfig+0x10e>
 80016c4:	4baf      	ldr	r3, [pc, #700]	; (8001984 <HAL_RCC_OscConfig+0x314>)
 80016c6:	685b      	ldr	r3, [r3, #4]
 80016c8:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 80016cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80016d0:	d155      	bne.n	800177e <HAL_RCC_OscConfig+0x10e>
 80016d2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80016d6:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016da:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80016de:	fa93 f3a3 	rbit	r3, r3
 80016e2:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80016e6:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80016ea:	fab3 f383 	clz	r3, r3
 80016ee:	b2db      	uxtb	r3, r3
 80016f0:	095b      	lsrs	r3, r3, #5
 80016f2:	b2db      	uxtb	r3, r3
 80016f4:	f043 0301 	orr.w	r3, r3, #1
 80016f8:	b2db      	uxtb	r3, r3
 80016fa:	2b01      	cmp	r3, #1
 80016fc:	d102      	bne.n	8001704 <HAL_RCC_OscConfig+0x94>
 80016fe:	4ba1      	ldr	r3, [pc, #644]	; (8001984 <HAL_RCC_OscConfig+0x314>)
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	e015      	b.n	8001730 <HAL_RCC_OscConfig+0xc0>
 8001704:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001708:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800170c:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 8001710:	fa93 f3a3 	rbit	r3, r3
 8001714:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 8001718:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800171c:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8001720:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 8001724:	fa93 f3a3 	rbit	r3, r3
 8001728:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 800172c:	4b95      	ldr	r3, [pc, #596]	; (8001984 <HAL_RCC_OscConfig+0x314>)
 800172e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001730:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001734:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 8001738:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 800173c:	fa92 f2a2 	rbit	r2, r2
 8001740:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
  return result;
 8001744:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8001748:	fab2 f282 	clz	r2, r2
 800174c:	b2d2      	uxtb	r2, r2
 800174e:	f042 0220 	orr.w	r2, r2, #32
 8001752:	b2d2      	uxtb	r2, r2
 8001754:	f002 021f 	and.w	r2, r2, #31
 8001758:	2101      	movs	r1, #1
 800175a:	fa01 f202 	lsl.w	r2, r1, r2
 800175e:	4013      	ands	r3, r2
 8001760:	2b00      	cmp	r3, #0
 8001762:	f000 8111 	beq.w	8001988 <HAL_RCC_OscConfig+0x318>
 8001766:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800176a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	685b      	ldr	r3, [r3, #4]
 8001772:	2b00      	cmp	r3, #0
 8001774:	f040 8108 	bne.w	8001988 <HAL_RCC_OscConfig+0x318>
      {
        return HAL_ERROR;
 8001778:	2301      	movs	r3, #1
 800177a:	f000 bfc6 	b.w	800270a <HAL_RCC_OscConfig+0x109a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800177e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001782:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	685b      	ldr	r3, [r3, #4]
 800178a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800178e:	d106      	bne.n	800179e <HAL_RCC_OscConfig+0x12e>
 8001790:	4b7c      	ldr	r3, [pc, #496]	; (8001984 <HAL_RCC_OscConfig+0x314>)
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	4a7b      	ldr	r2, [pc, #492]	; (8001984 <HAL_RCC_OscConfig+0x314>)
 8001796:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800179a:	6013      	str	r3, [r2, #0]
 800179c:	e036      	b.n	800180c <HAL_RCC_OscConfig+0x19c>
 800179e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80017a2:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	685b      	ldr	r3, [r3, #4]
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d10c      	bne.n	80017c8 <HAL_RCC_OscConfig+0x158>
 80017ae:	4b75      	ldr	r3, [pc, #468]	; (8001984 <HAL_RCC_OscConfig+0x314>)
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	4a74      	ldr	r2, [pc, #464]	; (8001984 <HAL_RCC_OscConfig+0x314>)
 80017b4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80017b8:	6013      	str	r3, [r2, #0]
 80017ba:	4b72      	ldr	r3, [pc, #456]	; (8001984 <HAL_RCC_OscConfig+0x314>)
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	4a71      	ldr	r2, [pc, #452]	; (8001984 <HAL_RCC_OscConfig+0x314>)
 80017c0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80017c4:	6013      	str	r3, [r2, #0]
 80017c6:	e021      	b.n	800180c <HAL_RCC_OscConfig+0x19c>
 80017c8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80017cc:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	685b      	ldr	r3, [r3, #4]
 80017d4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80017d8:	d10c      	bne.n	80017f4 <HAL_RCC_OscConfig+0x184>
 80017da:	4b6a      	ldr	r3, [pc, #424]	; (8001984 <HAL_RCC_OscConfig+0x314>)
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	4a69      	ldr	r2, [pc, #420]	; (8001984 <HAL_RCC_OscConfig+0x314>)
 80017e0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80017e4:	6013      	str	r3, [r2, #0]
 80017e6:	4b67      	ldr	r3, [pc, #412]	; (8001984 <HAL_RCC_OscConfig+0x314>)
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	4a66      	ldr	r2, [pc, #408]	; (8001984 <HAL_RCC_OscConfig+0x314>)
 80017ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80017f0:	6013      	str	r3, [r2, #0]
 80017f2:	e00b      	b.n	800180c <HAL_RCC_OscConfig+0x19c>
 80017f4:	4b63      	ldr	r3, [pc, #396]	; (8001984 <HAL_RCC_OscConfig+0x314>)
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	4a62      	ldr	r2, [pc, #392]	; (8001984 <HAL_RCC_OscConfig+0x314>)
 80017fa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80017fe:	6013      	str	r3, [r2, #0]
 8001800:	4b60      	ldr	r3, [pc, #384]	; (8001984 <HAL_RCC_OscConfig+0x314>)
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	4a5f      	ldr	r2, [pc, #380]	; (8001984 <HAL_RCC_OscConfig+0x314>)
 8001806:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800180a:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800180c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001810:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	685b      	ldr	r3, [r3, #4]
 8001818:	2b00      	cmp	r3, #0
 800181a:	d059      	beq.n	80018d0 <HAL_RCC_OscConfig+0x260>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800181c:	f7ff fa4c 	bl	8000cb8 <HAL_GetTick>
 8001820:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001824:	e00a      	b.n	800183c <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001826:	f7ff fa47 	bl	8000cb8 <HAL_GetTick>
 800182a:	4602      	mov	r2, r0
 800182c:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001830:	1ad3      	subs	r3, r2, r3
 8001832:	2b64      	cmp	r3, #100	; 0x64
 8001834:	d902      	bls.n	800183c <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8001836:	2303      	movs	r3, #3
 8001838:	f000 bf67 	b.w	800270a <HAL_RCC_OscConfig+0x109a>
 800183c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001840:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001844:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 8001848:	fa93 f3a3 	rbit	r3, r3
 800184c:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
  return result;
 8001850:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001854:	fab3 f383 	clz	r3, r3
 8001858:	b2db      	uxtb	r3, r3
 800185a:	095b      	lsrs	r3, r3, #5
 800185c:	b2db      	uxtb	r3, r3
 800185e:	f043 0301 	orr.w	r3, r3, #1
 8001862:	b2db      	uxtb	r3, r3
 8001864:	2b01      	cmp	r3, #1
 8001866:	d102      	bne.n	800186e <HAL_RCC_OscConfig+0x1fe>
 8001868:	4b46      	ldr	r3, [pc, #280]	; (8001984 <HAL_RCC_OscConfig+0x314>)
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	e015      	b.n	800189a <HAL_RCC_OscConfig+0x22a>
 800186e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001872:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001876:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 800187a:	fa93 f3a3 	rbit	r3, r3
 800187e:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 8001882:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001886:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 800188a:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 800188e:	fa93 f3a3 	rbit	r3, r3
 8001892:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8001896:	4b3b      	ldr	r3, [pc, #236]	; (8001984 <HAL_RCC_OscConfig+0x314>)
 8001898:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800189a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800189e:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
 80018a2:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 80018a6:	fa92 f2a2 	rbit	r2, r2
 80018aa:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
  return result;
 80018ae:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 80018b2:	fab2 f282 	clz	r2, r2
 80018b6:	b2d2      	uxtb	r2, r2
 80018b8:	f042 0220 	orr.w	r2, r2, #32
 80018bc:	b2d2      	uxtb	r2, r2
 80018be:	f002 021f 	and.w	r2, r2, #31
 80018c2:	2101      	movs	r1, #1
 80018c4:	fa01 f202 	lsl.w	r2, r1, r2
 80018c8:	4013      	ands	r3, r2
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d0ab      	beq.n	8001826 <HAL_RCC_OscConfig+0x1b6>
 80018ce:	e05c      	b.n	800198a <HAL_RCC_OscConfig+0x31a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018d0:	f7ff f9f2 	bl	8000cb8 <HAL_GetTick>
 80018d4:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80018d8:	e00a      	b.n	80018f0 <HAL_RCC_OscConfig+0x280>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80018da:	f7ff f9ed 	bl	8000cb8 <HAL_GetTick>
 80018de:	4602      	mov	r2, r0
 80018e0:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80018e4:	1ad3      	subs	r3, r2, r3
 80018e6:	2b64      	cmp	r3, #100	; 0x64
 80018e8:	d902      	bls.n	80018f0 <HAL_RCC_OscConfig+0x280>
          {
            return HAL_TIMEOUT;
 80018ea:	2303      	movs	r3, #3
 80018ec:	f000 bf0d 	b.w	800270a <HAL_RCC_OscConfig+0x109a>
 80018f0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80018f4:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018f8:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 80018fc:	fa93 f3a3 	rbit	r3, r3
 8001900:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
  return result;
 8001904:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001908:	fab3 f383 	clz	r3, r3
 800190c:	b2db      	uxtb	r3, r3
 800190e:	095b      	lsrs	r3, r3, #5
 8001910:	b2db      	uxtb	r3, r3
 8001912:	f043 0301 	orr.w	r3, r3, #1
 8001916:	b2db      	uxtb	r3, r3
 8001918:	2b01      	cmp	r3, #1
 800191a:	d102      	bne.n	8001922 <HAL_RCC_OscConfig+0x2b2>
 800191c:	4b19      	ldr	r3, [pc, #100]	; (8001984 <HAL_RCC_OscConfig+0x314>)
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	e015      	b.n	800194e <HAL_RCC_OscConfig+0x2de>
 8001922:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001926:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800192a:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 800192e:	fa93 f3a3 	rbit	r3, r3
 8001932:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 8001936:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800193a:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 800193e:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8001942:	fa93 f3a3 	rbit	r3, r3
 8001946:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 800194a:	4b0e      	ldr	r3, [pc, #56]	; (8001984 <HAL_RCC_OscConfig+0x314>)
 800194c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800194e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001952:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 8001956:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 800195a:	fa92 f2a2 	rbit	r2, r2
 800195e:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
  return result;
 8001962:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8001966:	fab2 f282 	clz	r2, r2
 800196a:	b2d2      	uxtb	r2, r2
 800196c:	f042 0220 	orr.w	r2, r2, #32
 8001970:	b2d2      	uxtb	r2, r2
 8001972:	f002 021f 	and.w	r2, r2, #31
 8001976:	2101      	movs	r1, #1
 8001978:	fa01 f202 	lsl.w	r2, r1, r2
 800197c:	4013      	ands	r3, r2
 800197e:	2b00      	cmp	r3, #0
 8001980:	d1ab      	bne.n	80018da <HAL_RCC_OscConfig+0x26a>
 8001982:	e002      	b.n	800198a <HAL_RCC_OscConfig+0x31a>
 8001984:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001988:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800198a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800198e:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	f003 0302 	and.w	r3, r3, #2
 800199a:	2b00      	cmp	r3, #0
 800199c:	f000 817f 	beq.w	8001c9e <HAL_RCC_OscConfig+0x62e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80019a0:	4ba7      	ldr	r3, [pc, #668]	; (8001c40 <HAL_RCC_OscConfig+0x5d0>)
 80019a2:	685b      	ldr	r3, [r3, #4]
 80019a4:	f003 030c 	and.w	r3, r3, #12
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d00c      	beq.n	80019c6 <HAL_RCC_OscConfig+0x356>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80019ac:	4ba4      	ldr	r3, [pc, #656]	; (8001c40 <HAL_RCC_OscConfig+0x5d0>)
 80019ae:	685b      	ldr	r3, [r3, #4]
 80019b0:	f003 030c 	and.w	r3, r3, #12
 80019b4:	2b08      	cmp	r3, #8
 80019b6:	d173      	bne.n	8001aa0 <HAL_RCC_OscConfig+0x430>
 80019b8:	4ba1      	ldr	r3, [pc, #644]	; (8001c40 <HAL_RCC_OscConfig+0x5d0>)
 80019ba:	685b      	ldr	r3, [r3, #4]
 80019bc:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 80019c0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80019c4:	d16c      	bne.n	8001aa0 <HAL_RCC_OscConfig+0x430>
 80019c6:	2302      	movs	r3, #2
 80019c8:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019cc:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 80019d0:	fa93 f3a3 	rbit	r3, r3
 80019d4:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
  return result;
 80019d8:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80019dc:	fab3 f383 	clz	r3, r3
 80019e0:	b2db      	uxtb	r3, r3
 80019e2:	095b      	lsrs	r3, r3, #5
 80019e4:	b2db      	uxtb	r3, r3
 80019e6:	f043 0301 	orr.w	r3, r3, #1
 80019ea:	b2db      	uxtb	r3, r3
 80019ec:	2b01      	cmp	r3, #1
 80019ee:	d102      	bne.n	80019f6 <HAL_RCC_OscConfig+0x386>
 80019f0:	4b93      	ldr	r3, [pc, #588]	; (8001c40 <HAL_RCC_OscConfig+0x5d0>)
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	e013      	b.n	8001a1e <HAL_RCC_OscConfig+0x3ae>
 80019f6:	2302      	movs	r3, #2
 80019f8:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019fc:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8001a00:	fa93 f3a3 	rbit	r3, r3
 8001a04:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 8001a08:	2302      	movs	r3, #2
 8001a0a:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8001a0e:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8001a12:	fa93 f3a3 	rbit	r3, r3
 8001a16:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8001a1a:	4b89      	ldr	r3, [pc, #548]	; (8001c40 <HAL_RCC_OscConfig+0x5d0>)
 8001a1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a1e:	2202      	movs	r2, #2
 8001a20:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 8001a24:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 8001a28:	fa92 f2a2 	rbit	r2, r2
 8001a2c:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
  return result;
 8001a30:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8001a34:	fab2 f282 	clz	r2, r2
 8001a38:	b2d2      	uxtb	r2, r2
 8001a3a:	f042 0220 	orr.w	r2, r2, #32
 8001a3e:	b2d2      	uxtb	r2, r2
 8001a40:	f002 021f 	and.w	r2, r2, #31
 8001a44:	2101      	movs	r1, #1
 8001a46:	fa01 f202 	lsl.w	r2, r1, r2
 8001a4a:	4013      	ands	r3, r2
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d00a      	beq.n	8001a66 <HAL_RCC_OscConfig+0x3f6>
 8001a50:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001a54:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	68db      	ldr	r3, [r3, #12]
 8001a5c:	2b01      	cmp	r3, #1
 8001a5e:	d002      	beq.n	8001a66 <HAL_RCC_OscConfig+0x3f6>
      {
        return HAL_ERROR;
 8001a60:	2301      	movs	r3, #1
 8001a62:	f000 be52 	b.w	800270a <HAL_RCC_OscConfig+0x109a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a66:	4b76      	ldr	r3, [pc, #472]	; (8001c40 <HAL_RCC_OscConfig+0x5d0>)
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001a6e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001a72:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	691b      	ldr	r3, [r3, #16]
 8001a7a:	21f8      	movs	r1, #248	; 0xf8
 8001a7c:	f8c7 1174 	str.w	r1, [r7, #372]	; 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a80:	f8d7 1174 	ldr.w	r1, [r7, #372]	; 0x174
 8001a84:	fa91 f1a1 	rbit	r1, r1
 8001a88:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
  return result;
 8001a8c:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8001a90:	fab1 f181 	clz	r1, r1
 8001a94:	b2c9      	uxtb	r1, r1
 8001a96:	408b      	lsls	r3, r1
 8001a98:	4969      	ldr	r1, [pc, #420]	; (8001c40 <HAL_RCC_OscConfig+0x5d0>)
 8001a9a:	4313      	orrs	r3, r2
 8001a9c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001a9e:	e0fe      	b.n	8001c9e <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001aa0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001aa4:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	68db      	ldr	r3, [r3, #12]
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	f000 8088 	beq.w	8001bc2 <HAL_RCC_OscConfig+0x552>
 8001ab2:	2301      	movs	r3, #1
 8001ab4:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ab8:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8001abc:	fa93 f3a3 	rbit	r3, r3
 8001ac0:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  return result;
 8001ac4:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001ac8:	fab3 f383 	clz	r3, r3
 8001acc:	b2db      	uxtb	r3, r3
 8001ace:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001ad2:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001ad6:	009b      	lsls	r3, r3, #2
 8001ad8:	461a      	mov	r2, r3
 8001ada:	2301      	movs	r3, #1
 8001adc:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ade:	f7ff f8eb 	bl	8000cb8 <HAL_GetTick>
 8001ae2:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ae6:	e00a      	b.n	8001afe <HAL_RCC_OscConfig+0x48e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001ae8:	f7ff f8e6 	bl	8000cb8 <HAL_GetTick>
 8001aec:	4602      	mov	r2, r0
 8001aee:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001af2:	1ad3      	subs	r3, r2, r3
 8001af4:	2b02      	cmp	r3, #2
 8001af6:	d902      	bls.n	8001afe <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8001af8:	2303      	movs	r3, #3
 8001afa:	f000 be06 	b.w	800270a <HAL_RCC_OscConfig+0x109a>
 8001afe:	2302      	movs	r3, #2
 8001b00:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b04:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8001b08:	fa93 f3a3 	rbit	r3, r3
 8001b0c:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
  return result;
 8001b10:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b14:	fab3 f383 	clz	r3, r3
 8001b18:	b2db      	uxtb	r3, r3
 8001b1a:	095b      	lsrs	r3, r3, #5
 8001b1c:	b2db      	uxtb	r3, r3
 8001b1e:	f043 0301 	orr.w	r3, r3, #1
 8001b22:	b2db      	uxtb	r3, r3
 8001b24:	2b01      	cmp	r3, #1
 8001b26:	d102      	bne.n	8001b2e <HAL_RCC_OscConfig+0x4be>
 8001b28:	4b45      	ldr	r3, [pc, #276]	; (8001c40 <HAL_RCC_OscConfig+0x5d0>)
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	e013      	b.n	8001b56 <HAL_RCC_OscConfig+0x4e6>
 8001b2e:	2302      	movs	r3, #2
 8001b30:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b34:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8001b38:	fa93 f3a3 	rbit	r3, r3
 8001b3c:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 8001b40:	2302      	movs	r3, #2
 8001b42:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8001b46:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8001b4a:	fa93 f3a3 	rbit	r3, r3
 8001b4e:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8001b52:	4b3b      	ldr	r3, [pc, #236]	; (8001c40 <HAL_RCC_OscConfig+0x5d0>)
 8001b54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b56:	2202      	movs	r2, #2
 8001b58:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 8001b5c:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8001b60:	fa92 f2a2 	rbit	r2, r2
 8001b64:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
  return result;
 8001b68:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8001b6c:	fab2 f282 	clz	r2, r2
 8001b70:	b2d2      	uxtb	r2, r2
 8001b72:	f042 0220 	orr.w	r2, r2, #32
 8001b76:	b2d2      	uxtb	r2, r2
 8001b78:	f002 021f 	and.w	r2, r2, #31
 8001b7c:	2101      	movs	r1, #1
 8001b7e:	fa01 f202 	lsl.w	r2, r1, r2
 8001b82:	4013      	ands	r3, r2
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d0af      	beq.n	8001ae8 <HAL_RCC_OscConfig+0x478>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b88:	4b2d      	ldr	r3, [pc, #180]	; (8001c40 <HAL_RCC_OscConfig+0x5d0>)
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001b90:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001b94:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	691b      	ldr	r3, [r3, #16]
 8001b9c:	21f8      	movs	r1, #248	; 0xf8
 8001b9e:	f8c7 1144 	str.w	r1, [r7, #324]	; 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ba2:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 8001ba6:	fa91 f1a1 	rbit	r1, r1
 8001baa:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
  return result;
 8001bae:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8001bb2:	fab1 f181 	clz	r1, r1
 8001bb6:	b2c9      	uxtb	r1, r1
 8001bb8:	408b      	lsls	r3, r1
 8001bba:	4921      	ldr	r1, [pc, #132]	; (8001c40 <HAL_RCC_OscConfig+0x5d0>)
 8001bbc:	4313      	orrs	r3, r2
 8001bbe:	600b      	str	r3, [r1, #0]
 8001bc0:	e06d      	b.n	8001c9e <HAL_RCC_OscConfig+0x62e>
 8001bc2:	2301      	movs	r3, #1
 8001bc4:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bc8:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8001bcc:	fa93 f3a3 	rbit	r3, r3
 8001bd0:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  return result;
 8001bd4:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001bd8:	fab3 f383 	clz	r3, r3
 8001bdc:	b2db      	uxtb	r3, r3
 8001bde:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001be2:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001be6:	009b      	lsls	r3, r3, #2
 8001be8:	461a      	mov	r2, r3
 8001bea:	2300      	movs	r3, #0
 8001bec:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bee:	f7ff f863 	bl	8000cb8 <HAL_GetTick>
 8001bf2:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001bf6:	e00a      	b.n	8001c0e <HAL_RCC_OscConfig+0x59e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001bf8:	f7ff f85e 	bl	8000cb8 <HAL_GetTick>
 8001bfc:	4602      	mov	r2, r0
 8001bfe:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001c02:	1ad3      	subs	r3, r2, r3
 8001c04:	2b02      	cmp	r3, #2
 8001c06:	d902      	bls.n	8001c0e <HAL_RCC_OscConfig+0x59e>
          {
            return HAL_TIMEOUT;
 8001c08:	2303      	movs	r3, #3
 8001c0a:	f000 bd7e 	b.w	800270a <HAL_RCC_OscConfig+0x109a>
 8001c0e:	2302      	movs	r3, #2
 8001c10:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c14:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8001c18:	fa93 f3a3 	rbit	r3, r3
 8001c1c:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  return result;
 8001c20:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c24:	fab3 f383 	clz	r3, r3
 8001c28:	b2db      	uxtb	r3, r3
 8001c2a:	095b      	lsrs	r3, r3, #5
 8001c2c:	b2db      	uxtb	r3, r3
 8001c2e:	f043 0301 	orr.w	r3, r3, #1
 8001c32:	b2db      	uxtb	r3, r3
 8001c34:	2b01      	cmp	r3, #1
 8001c36:	d105      	bne.n	8001c44 <HAL_RCC_OscConfig+0x5d4>
 8001c38:	4b01      	ldr	r3, [pc, #4]	; (8001c40 <HAL_RCC_OscConfig+0x5d0>)
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	e016      	b.n	8001c6c <HAL_RCC_OscConfig+0x5fc>
 8001c3e:	bf00      	nop
 8001c40:	40021000 	.word	0x40021000
 8001c44:	2302      	movs	r3, #2
 8001c46:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c4a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8001c4e:	fa93 f3a3 	rbit	r3, r3
 8001c52:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8001c56:	2302      	movs	r3, #2
 8001c58:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8001c5c:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8001c60:	fa93 f3a3 	rbit	r3, r3
 8001c64:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8001c68:	4bbf      	ldr	r3, [pc, #764]	; (8001f68 <HAL_RCC_OscConfig+0x8f8>)
 8001c6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c6c:	2202      	movs	r2, #2
 8001c6e:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 8001c72:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 8001c76:	fa92 f2a2 	rbit	r2, r2
 8001c7a:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
  return result;
 8001c7e:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8001c82:	fab2 f282 	clz	r2, r2
 8001c86:	b2d2      	uxtb	r2, r2
 8001c88:	f042 0220 	orr.w	r2, r2, #32
 8001c8c:	b2d2      	uxtb	r2, r2
 8001c8e:	f002 021f 	and.w	r2, r2, #31
 8001c92:	2101      	movs	r1, #1
 8001c94:	fa01 f202 	lsl.w	r2, r1, r2
 8001c98:	4013      	ands	r3, r2
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d1ac      	bne.n	8001bf8 <HAL_RCC_OscConfig+0x588>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001c9e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001ca2:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	f003 0308 	and.w	r3, r3, #8
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	f000 8113 	beq.w	8001eda <HAL_RCC_OscConfig+0x86a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001cb4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001cb8:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	695b      	ldr	r3, [r3, #20]
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d07c      	beq.n	8001dbe <HAL_RCC_OscConfig+0x74e>
 8001cc4:	2301      	movs	r3, #1
 8001cc6:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001cce:	fa93 f3a3 	rbit	r3, r3
 8001cd2:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  return result;
 8001cd6:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001cda:	fab3 f383 	clz	r3, r3
 8001cde:	b2db      	uxtb	r3, r3
 8001ce0:	461a      	mov	r2, r3
 8001ce2:	4ba2      	ldr	r3, [pc, #648]	; (8001f6c <HAL_RCC_OscConfig+0x8fc>)
 8001ce4:	4413      	add	r3, r2
 8001ce6:	009b      	lsls	r3, r3, #2
 8001ce8:	461a      	mov	r2, r3
 8001cea:	2301      	movs	r3, #1
 8001cec:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001cee:	f7fe ffe3 	bl	8000cb8 <HAL_GetTick>
 8001cf2:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001cf6:	e00a      	b.n	8001d0e <HAL_RCC_OscConfig+0x69e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001cf8:	f7fe ffde 	bl	8000cb8 <HAL_GetTick>
 8001cfc:	4602      	mov	r2, r0
 8001cfe:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001d02:	1ad3      	subs	r3, r2, r3
 8001d04:	2b02      	cmp	r3, #2
 8001d06:	d902      	bls.n	8001d0e <HAL_RCC_OscConfig+0x69e>
        {
          return HAL_TIMEOUT;
 8001d08:	2303      	movs	r3, #3
 8001d0a:	f000 bcfe 	b.w	800270a <HAL_RCC_OscConfig+0x109a>
 8001d0e:	2302      	movs	r3, #2
 8001d10:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d14:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8001d18:	fa93 f2a3 	rbit	r2, r3
 8001d1c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001d20:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8001d24:	601a      	str	r2, [r3, #0]
 8001d26:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001d2a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8001d2e:	2202      	movs	r2, #2
 8001d30:	601a      	str	r2, [r3, #0]
 8001d32:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001d36:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	fa93 f2a3 	rbit	r2, r3
 8001d40:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001d44:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8001d48:	601a      	str	r2, [r3, #0]
 8001d4a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001d4e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8001d52:	2202      	movs	r2, #2
 8001d54:	601a      	str	r2, [r3, #0]
 8001d56:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001d5a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	fa93 f2a3 	rbit	r2, r3
 8001d64:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001d68:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001d6c:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d6e:	4b7e      	ldr	r3, [pc, #504]	; (8001f68 <HAL_RCC_OscConfig+0x8f8>)
 8001d70:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001d72:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001d76:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8001d7a:	2102      	movs	r1, #2
 8001d7c:	6019      	str	r1, [r3, #0]
 8001d7e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001d82:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	fa93 f1a3 	rbit	r1, r3
 8001d8c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001d90:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8001d94:	6019      	str	r1, [r3, #0]
  return result;
 8001d96:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001d9a:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	fab3 f383 	clz	r3, r3
 8001da4:	b2db      	uxtb	r3, r3
 8001da6:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001daa:	b2db      	uxtb	r3, r3
 8001dac:	f003 031f 	and.w	r3, r3, #31
 8001db0:	2101      	movs	r1, #1
 8001db2:	fa01 f303 	lsl.w	r3, r1, r3
 8001db6:	4013      	ands	r3, r2
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d09d      	beq.n	8001cf8 <HAL_RCC_OscConfig+0x688>
 8001dbc:	e08d      	b.n	8001eda <HAL_RCC_OscConfig+0x86a>
 8001dbe:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001dc2:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8001dc6:	2201      	movs	r2, #1
 8001dc8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dca:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001dce:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	fa93 f2a3 	rbit	r2, r3
 8001dd8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001ddc:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8001de0:	601a      	str	r2, [r3, #0]
  return result;
 8001de2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001de6:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8001dea:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001dec:	fab3 f383 	clz	r3, r3
 8001df0:	b2db      	uxtb	r3, r3
 8001df2:	461a      	mov	r2, r3
 8001df4:	4b5d      	ldr	r3, [pc, #372]	; (8001f6c <HAL_RCC_OscConfig+0x8fc>)
 8001df6:	4413      	add	r3, r2
 8001df8:	009b      	lsls	r3, r3, #2
 8001dfa:	461a      	mov	r2, r3
 8001dfc:	2300      	movs	r3, #0
 8001dfe:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e00:	f7fe ff5a 	bl	8000cb8 <HAL_GetTick>
 8001e04:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e08:	e00a      	b.n	8001e20 <HAL_RCC_OscConfig+0x7b0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001e0a:	f7fe ff55 	bl	8000cb8 <HAL_GetTick>
 8001e0e:	4602      	mov	r2, r0
 8001e10:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001e14:	1ad3      	subs	r3, r2, r3
 8001e16:	2b02      	cmp	r3, #2
 8001e18:	d902      	bls.n	8001e20 <HAL_RCC_OscConfig+0x7b0>
        {
          return HAL_TIMEOUT;
 8001e1a:	2303      	movs	r3, #3
 8001e1c:	f000 bc75 	b.w	800270a <HAL_RCC_OscConfig+0x109a>
 8001e20:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001e24:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8001e28:	2202      	movs	r2, #2
 8001e2a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e2c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001e30:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	fa93 f2a3 	rbit	r2, r3
 8001e3a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001e3e:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8001e42:	601a      	str	r2, [r3, #0]
 8001e44:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001e48:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8001e4c:	2202      	movs	r2, #2
 8001e4e:	601a      	str	r2, [r3, #0]
 8001e50:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001e54:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	fa93 f2a3 	rbit	r2, r3
 8001e5e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001e62:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8001e66:	601a      	str	r2, [r3, #0]
 8001e68:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001e6c:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8001e70:	2202      	movs	r2, #2
 8001e72:	601a      	str	r2, [r3, #0]
 8001e74:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001e78:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	fa93 f2a3 	rbit	r2, r3
 8001e82:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001e86:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8001e8a:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e8c:	4b36      	ldr	r3, [pc, #216]	; (8001f68 <HAL_RCC_OscConfig+0x8f8>)
 8001e8e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001e90:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001e94:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8001e98:	2102      	movs	r1, #2
 8001e9a:	6019      	str	r1, [r3, #0]
 8001e9c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001ea0:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	fa93 f1a3 	rbit	r1, r3
 8001eaa:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001eae:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8001eb2:	6019      	str	r1, [r3, #0]
  return result;
 8001eb4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001eb8:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	fab3 f383 	clz	r3, r3
 8001ec2:	b2db      	uxtb	r3, r3
 8001ec4:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001ec8:	b2db      	uxtb	r3, r3
 8001eca:	f003 031f 	and.w	r3, r3, #31
 8001ece:	2101      	movs	r1, #1
 8001ed0:	fa01 f303 	lsl.w	r3, r1, r3
 8001ed4:	4013      	ands	r3, r2
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d197      	bne.n	8001e0a <HAL_RCC_OscConfig+0x79a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001eda:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001ede:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	f003 0304 	and.w	r3, r3, #4
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	f000 81a5 	beq.w	800223a <HAL_RCC_OscConfig+0xbca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001ef0:	2300      	movs	r3, #0
 8001ef2:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001ef6:	4b1c      	ldr	r3, [pc, #112]	; (8001f68 <HAL_RCC_OscConfig+0x8f8>)
 8001ef8:	69db      	ldr	r3, [r3, #28]
 8001efa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d116      	bne.n	8001f30 <HAL_RCC_OscConfig+0x8c0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001f02:	4b19      	ldr	r3, [pc, #100]	; (8001f68 <HAL_RCC_OscConfig+0x8f8>)
 8001f04:	69db      	ldr	r3, [r3, #28]
 8001f06:	4a18      	ldr	r2, [pc, #96]	; (8001f68 <HAL_RCC_OscConfig+0x8f8>)
 8001f08:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f0c:	61d3      	str	r3, [r2, #28]
 8001f0e:	4b16      	ldr	r3, [pc, #88]	; (8001f68 <HAL_RCC_OscConfig+0x8f8>)
 8001f10:	69db      	ldr	r3, [r3, #28]
 8001f12:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8001f16:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001f1a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001f1e:	601a      	str	r2, [r3, #0]
 8001f20:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001f24:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001f28:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8001f2a:	2301      	movs	r3, #1
 8001f2c:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f30:	4b0f      	ldr	r3, [pc, #60]	; (8001f70 <HAL_RCC_OscConfig+0x900>)
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d121      	bne.n	8001f80 <HAL_RCC_OscConfig+0x910>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001f3c:	4b0c      	ldr	r3, [pc, #48]	; (8001f70 <HAL_RCC_OscConfig+0x900>)
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	4a0b      	ldr	r2, [pc, #44]	; (8001f70 <HAL_RCC_OscConfig+0x900>)
 8001f42:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f46:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001f48:	f7fe feb6 	bl	8000cb8 <HAL_GetTick>
 8001f4c:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f50:	e010      	b.n	8001f74 <HAL_RCC_OscConfig+0x904>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f52:	f7fe feb1 	bl	8000cb8 <HAL_GetTick>
 8001f56:	4602      	mov	r2, r0
 8001f58:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001f5c:	1ad3      	subs	r3, r2, r3
 8001f5e:	2b64      	cmp	r3, #100	; 0x64
 8001f60:	d908      	bls.n	8001f74 <HAL_RCC_OscConfig+0x904>
        {
          return HAL_TIMEOUT;
 8001f62:	2303      	movs	r3, #3
 8001f64:	e3d1      	b.n	800270a <HAL_RCC_OscConfig+0x109a>
 8001f66:	bf00      	nop
 8001f68:	40021000 	.word	0x40021000
 8001f6c:	10908120 	.word	0x10908120
 8001f70:	40007000 	.word	0x40007000
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f74:	4b8d      	ldr	r3, [pc, #564]	; (80021ac <HAL_RCC_OscConfig+0xb3c>)
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d0e8      	beq.n	8001f52 <HAL_RCC_OscConfig+0x8e2>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001f80:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001f84:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	689b      	ldr	r3, [r3, #8]
 8001f8c:	2b01      	cmp	r3, #1
 8001f8e:	d106      	bne.n	8001f9e <HAL_RCC_OscConfig+0x92e>
 8001f90:	4b87      	ldr	r3, [pc, #540]	; (80021b0 <HAL_RCC_OscConfig+0xb40>)
 8001f92:	6a1b      	ldr	r3, [r3, #32]
 8001f94:	4a86      	ldr	r2, [pc, #536]	; (80021b0 <HAL_RCC_OscConfig+0xb40>)
 8001f96:	f043 0301 	orr.w	r3, r3, #1
 8001f9a:	6213      	str	r3, [r2, #32]
 8001f9c:	e035      	b.n	800200a <HAL_RCC_OscConfig+0x99a>
 8001f9e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001fa2:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	689b      	ldr	r3, [r3, #8]
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d10c      	bne.n	8001fc8 <HAL_RCC_OscConfig+0x958>
 8001fae:	4b80      	ldr	r3, [pc, #512]	; (80021b0 <HAL_RCC_OscConfig+0xb40>)
 8001fb0:	6a1b      	ldr	r3, [r3, #32]
 8001fb2:	4a7f      	ldr	r2, [pc, #508]	; (80021b0 <HAL_RCC_OscConfig+0xb40>)
 8001fb4:	f023 0301 	bic.w	r3, r3, #1
 8001fb8:	6213      	str	r3, [r2, #32]
 8001fba:	4b7d      	ldr	r3, [pc, #500]	; (80021b0 <HAL_RCC_OscConfig+0xb40>)
 8001fbc:	6a1b      	ldr	r3, [r3, #32]
 8001fbe:	4a7c      	ldr	r2, [pc, #496]	; (80021b0 <HAL_RCC_OscConfig+0xb40>)
 8001fc0:	f023 0304 	bic.w	r3, r3, #4
 8001fc4:	6213      	str	r3, [r2, #32]
 8001fc6:	e020      	b.n	800200a <HAL_RCC_OscConfig+0x99a>
 8001fc8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001fcc:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	689b      	ldr	r3, [r3, #8]
 8001fd4:	2b05      	cmp	r3, #5
 8001fd6:	d10c      	bne.n	8001ff2 <HAL_RCC_OscConfig+0x982>
 8001fd8:	4b75      	ldr	r3, [pc, #468]	; (80021b0 <HAL_RCC_OscConfig+0xb40>)
 8001fda:	6a1b      	ldr	r3, [r3, #32]
 8001fdc:	4a74      	ldr	r2, [pc, #464]	; (80021b0 <HAL_RCC_OscConfig+0xb40>)
 8001fde:	f043 0304 	orr.w	r3, r3, #4
 8001fe2:	6213      	str	r3, [r2, #32]
 8001fe4:	4b72      	ldr	r3, [pc, #456]	; (80021b0 <HAL_RCC_OscConfig+0xb40>)
 8001fe6:	6a1b      	ldr	r3, [r3, #32]
 8001fe8:	4a71      	ldr	r2, [pc, #452]	; (80021b0 <HAL_RCC_OscConfig+0xb40>)
 8001fea:	f043 0301 	orr.w	r3, r3, #1
 8001fee:	6213      	str	r3, [r2, #32]
 8001ff0:	e00b      	b.n	800200a <HAL_RCC_OscConfig+0x99a>
 8001ff2:	4b6f      	ldr	r3, [pc, #444]	; (80021b0 <HAL_RCC_OscConfig+0xb40>)
 8001ff4:	6a1b      	ldr	r3, [r3, #32]
 8001ff6:	4a6e      	ldr	r2, [pc, #440]	; (80021b0 <HAL_RCC_OscConfig+0xb40>)
 8001ff8:	f023 0301 	bic.w	r3, r3, #1
 8001ffc:	6213      	str	r3, [r2, #32]
 8001ffe:	4b6c      	ldr	r3, [pc, #432]	; (80021b0 <HAL_RCC_OscConfig+0xb40>)
 8002000:	6a1b      	ldr	r3, [r3, #32]
 8002002:	4a6b      	ldr	r2, [pc, #428]	; (80021b0 <HAL_RCC_OscConfig+0xb40>)
 8002004:	f023 0304 	bic.w	r3, r3, #4
 8002008:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800200a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800200e:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	689b      	ldr	r3, [r3, #8]
 8002016:	2b00      	cmp	r3, #0
 8002018:	f000 8081 	beq.w	800211e <HAL_RCC_OscConfig+0xaae>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800201c:	f7fe fe4c 	bl	8000cb8 <HAL_GetTick>
 8002020:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002024:	e00b      	b.n	800203e <HAL_RCC_OscConfig+0x9ce>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002026:	f7fe fe47 	bl	8000cb8 <HAL_GetTick>
 800202a:	4602      	mov	r2, r0
 800202c:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002030:	1ad3      	subs	r3, r2, r3
 8002032:	f241 3288 	movw	r2, #5000	; 0x1388
 8002036:	4293      	cmp	r3, r2
 8002038:	d901      	bls.n	800203e <HAL_RCC_OscConfig+0x9ce>
        {
          return HAL_TIMEOUT;
 800203a:	2303      	movs	r3, #3
 800203c:	e365      	b.n	800270a <HAL_RCC_OscConfig+0x109a>
 800203e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002042:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8002046:	2202      	movs	r2, #2
 8002048:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800204a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800204e:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	fa93 f2a3 	rbit	r2, r3
 8002058:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800205c:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8002060:	601a      	str	r2, [r3, #0]
 8002062:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002066:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 800206a:	2202      	movs	r2, #2
 800206c:	601a      	str	r2, [r3, #0]
 800206e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002072:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	fa93 f2a3 	rbit	r2, r3
 800207c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002080:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8002084:	601a      	str	r2, [r3, #0]
  return result;
 8002086:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800208a:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 800208e:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002090:	fab3 f383 	clz	r3, r3
 8002094:	b2db      	uxtb	r3, r3
 8002096:	095b      	lsrs	r3, r3, #5
 8002098:	b2db      	uxtb	r3, r3
 800209a:	f043 0302 	orr.w	r3, r3, #2
 800209e:	b2db      	uxtb	r3, r3
 80020a0:	2b02      	cmp	r3, #2
 80020a2:	d102      	bne.n	80020aa <HAL_RCC_OscConfig+0xa3a>
 80020a4:	4b42      	ldr	r3, [pc, #264]	; (80021b0 <HAL_RCC_OscConfig+0xb40>)
 80020a6:	6a1b      	ldr	r3, [r3, #32]
 80020a8:	e013      	b.n	80020d2 <HAL_RCC_OscConfig+0xa62>
 80020aa:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80020ae:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 80020b2:	2202      	movs	r2, #2
 80020b4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020b6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80020ba:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	fa93 f2a3 	rbit	r2, r3
 80020c4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80020c8:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 80020cc:	601a      	str	r2, [r3, #0]
 80020ce:	4b38      	ldr	r3, [pc, #224]	; (80021b0 <HAL_RCC_OscConfig+0xb40>)
 80020d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020d2:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80020d6:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 80020da:	2102      	movs	r1, #2
 80020dc:	6011      	str	r1, [r2, #0]
 80020de:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80020e2:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 80020e6:	6812      	ldr	r2, [r2, #0]
 80020e8:	fa92 f1a2 	rbit	r1, r2
 80020ec:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80020f0:	f5a2 72b0 	sub.w	r2, r2, #352	; 0x160
 80020f4:	6011      	str	r1, [r2, #0]
  return result;
 80020f6:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80020fa:	f5a2 72b0 	sub.w	r2, r2, #352	; 0x160
 80020fe:	6812      	ldr	r2, [r2, #0]
 8002100:	fab2 f282 	clz	r2, r2
 8002104:	b2d2      	uxtb	r2, r2
 8002106:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800210a:	b2d2      	uxtb	r2, r2
 800210c:	f002 021f 	and.w	r2, r2, #31
 8002110:	2101      	movs	r1, #1
 8002112:	fa01 f202 	lsl.w	r2, r1, r2
 8002116:	4013      	ands	r3, r2
 8002118:	2b00      	cmp	r3, #0
 800211a:	d084      	beq.n	8002026 <HAL_RCC_OscConfig+0x9b6>
 800211c:	e083      	b.n	8002226 <HAL_RCC_OscConfig+0xbb6>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800211e:	f7fe fdcb 	bl	8000cb8 <HAL_GetTick>
 8002122:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002126:	e00b      	b.n	8002140 <HAL_RCC_OscConfig+0xad0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002128:	f7fe fdc6 	bl	8000cb8 <HAL_GetTick>
 800212c:	4602      	mov	r2, r0
 800212e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002132:	1ad3      	subs	r3, r2, r3
 8002134:	f241 3288 	movw	r2, #5000	; 0x1388
 8002138:	4293      	cmp	r3, r2
 800213a:	d901      	bls.n	8002140 <HAL_RCC_OscConfig+0xad0>
        {
          return HAL_TIMEOUT;
 800213c:	2303      	movs	r3, #3
 800213e:	e2e4      	b.n	800270a <HAL_RCC_OscConfig+0x109a>
 8002140:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002144:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8002148:	2202      	movs	r2, #2
 800214a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800214c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002150:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	fa93 f2a3 	rbit	r2, r3
 800215a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800215e:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8002162:	601a      	str	r2, [r3, #0]
 8002164:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002168:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 800216c:	2202      	movs	r2, #2
 800216e:	601a      	str	r2, [r3, #0]
 8002170:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002174:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	fa93 f2a3 	rbit	r2, r3
 800217e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002182:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8002186:	601a      	str	r2, [r3, #0]
  return result;
 8002188:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800218c:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8002190:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002192:	fab3 f383 	clz	r3, r3
 8002196:	b2db      	uxtb	r3, r3
 8002198:	095b      	lsrs	r3, r3, #5
 800219a:	b2db      	uxtb	r3, r3
 800219c:	f043 0302 	orr.w	r3, r3, #2
 80021a0:	b2db      	uxtb	r3, r3
 80021a2:	2b02      	cmp	r3, #2
 80021a4:	d106      	bne.n	80021b4 <HAL_RCC_OscConfig+0xb44>
 80021a6:	4b02      	ldr	r3, [pc, #8]	; (80021b0 <HAL_RCC_OscConfig+0xb40>)
 80021a8:	6a1b      	ldr	r3, [r3, #32]
 80021aa:	e017      	b.n	80021dc <HAL_RCC_OscConfig+0xb6c>
 80021ac:	40007000 	.word	0x40007000
 80021b0:	40021000 	.word	0x40021000
 80021b4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80021b8:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 80021bc:	2202      	movs	r2, #2
 80021be:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021c0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80021c4:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	fa93 f2a3 	rbit	r2, r3
 80021ce:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80021d2:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 80021d6:	601a      	str	r2, [r3, #0]
 80021d8:	4bb3      	ldr	r3, [pc, #716]	; (80024a8 <HAL_RCC_OscConfig+0xe38>)
 80021da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021dc:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80021e0:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 80021e4:	2102      	movs	r1, #2
 80021e6:	6011      	str	r1, [r2, #0]
 80021e8:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80021ec:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 80021f0:	6812      	ldr	r2, [r2, #0]
 80021f2:	fa92 f1a2 	rbit	r1, r2
 80021f6:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80021fa:	f5a2 72c0 	sub.w	r2, r2, #384	; 0x180
 80021fe:	6011      	str	r1, [r2, #0]
  return result;
 8002200:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002204:	f5a2 72c0 	sub.w	r2, r2, #384	; 0x180
 8002208:	6812      	ldr	r2, [r2, #0]
 800220a:	fab2 f282 	clz	r2, r2
 800220e:	b2d2      	uxtb	r2, r2
 8002210:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002214:	b2d2      	uxtb	r2, r2
 8002216:	f002 021f 	and.w	r2, r2, #31
 800221a:	2101      	movs	r1, #1
 800221c:	fa01 f202 	lsl.w	r2, r1, r2
 8002220:	4013      	ands	r3, r2
 8002222:	2b00      	cmp	r3, #0
 8002224:	d180      	bne.n	8002128 <HAL_RCC_OscConfig+0xab8>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002226:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 800222a:	2b01      	cmp	r3, #1
 800222c:	d105      	bne.n	800223a <HAL_RCC_OscConfig+0xbca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800222e:	4b9e      	ldr	r3, [pc, #632]	; (80024a8 <HAL_RCC_OscConfig+0xe38>)
 8002230:	69db      	ldr	r3, [r3, #28]
 8002232:	4a9d      	ldr	r2, [pc, #628]	; (80024a8 <HAL_RCC_OscConfig+0xe38>)
 8002234:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002238:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800223a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800223e:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	699b      	ldr	r3, [r3, #24]
 8002246:	2b00      	cmp	r3, #0
 8002248:	f000 825e 	beq.w	8002708 <HAL_RCC_OscConfig+0x1098>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800224c:	4b96      	ldr	r3, [pc, #600]	; (80024a8 <HAL_RCC_OscConfig+0xe38>)
 800224e:	685b      	ldr	r3, [r3, #4]
 8002250:	f003 030c 	and.w	r3, r3, #12
 8002254:	2b08      	cmp	r3, #8
 8002256:	f000 821f 	beq.w	8002698 <HAL_RCC_OscConfig+0x1028>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800225a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800225e:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	699b      	ldr	r3, [r3, #24]
 8002266:	2b02      	cmp	r3, #2
 8002268:	f040 8170 	bne.w	800254c <HAL_RCC_OscConfig+0xedc>
 800226c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002270:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8002274:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002278:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800227a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800227e:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	fa93 f2a3 	rbit	r2, r3
 8002288:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800228c:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8002290:	601a      	str	r2, [r3, #0]
  return result;
 8002292:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002296:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 800229a:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800229c:	fab3 f383 	clz	r3, r3
 80022a0:	b2db      	uxtb	r3, r3
 80022a2:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80022a6:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80022aa:	009b      	lsls	r3, r3, #2
 80022ac:	461a      	mov	r2, r3
 80022ae:	2300      	movs	r3, #0
 80022b0:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022b2:	f7fe fd01 	bl	8000cb8 <HAL_GetTick>
 80022b6:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80022ba:	e009      	b.n	80022d0 <HAL_RCC_OscConfig+0xc60>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80022bc:	f7fe fcfc 	bl	8000cb8 <HAL_GetTick>
 80022c0:	4602      	mov	r2, r0
 80022c2:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80022c6:	1ad3      	subs	r3, r2, r3
 80022c8:	2b02      	cmp	r3, #2
 80022ca:	d901      	bls.n	80022d0 <HAL_RCC_OscConfig+0xc60>
          {
            return HAL_TIMEOUT;
 80022cc:	2303      	movs	r3, #3
 80022ce:	e21c      	b.n	800270a <HAL_RCC_OscConfig+0x109a>
 80022d0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80022d4:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 80022d8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80022dc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022de:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80022e2:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	fa93 f2a3 	rbit	r2, r3
 80022ec:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80022f0:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 80022f4:	601a      	str	r2, [r3, #0]
  return result;
 80022f6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80022fa:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 80022fe:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002300:	fab3 f383 	clz	r3, r3
 8002304:	b2db      	uxtb	r3, r3
 8002306:	095b      	lsrs	r3, r3, #5
 8002308:	b2db      	uxtb	r3, r3
 800230a:	f043 0301 	orr.w	r3, r3, #1
 800230e:	b2db      	uxtb	r3, r3
 8002310:	2b01      	cmp	r3, #1
 8002312:	d102      	bne.n	800231a <HAL_RCC_OscConfig+0xcaa>
 8002314:	4b64      	ldr	r3, [pc, #400]	; (80024a8 <HAL_RCC_OscConfig+0xe38>)
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	e027      	b.n	800236a <HAL_RCC_OscConfig+0xcfa>
 800231a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800231e:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8002322:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002326:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002328:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800232c:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	fa93 f2a3 	rbit	r2, r3
 8002336:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800233a:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 800233e:	601a      	str	r2, [r3, #0]
 8002340:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002344:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8002348:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800234c:	601a      	str	r2, [r3, #0]
 800234e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002352:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	fa93 f2a3 	rbit	r2, r3
 800235c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002360:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 8002364:	601a      	str	r2, [r3, #0]
 8002366:	4b50      	ldr	r3, [pc, #320]	; (80024a8 <HAL_RCC_OscConfig+0xe38>)
 8002368:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800236a:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800236e:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8002372:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002376:	6011      	str	r1, [r2, #0]
 8002378:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800237c:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8002380:	6812      	ldr	r2, [r2, #0]
 8002382:	fa92 f1a2 	rbit	r1, r2
 8002386:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800238a:	f5a2 72d4 	sub.w	r2, r2, #424	; 0x1a8
 800238e:	6011      	str	r1, [r2, #0]
  return result;
 8002390:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002394:	f5a2 72d4 	sub.w	r2, r2, #424	; 0x1a8
 8002398:	6812      	ldr	r2, [r2, #0]
 800239a:	fab2 f282 	clz	r2, r2
 800239e:	b2d2      	uxtb	r2, r2
 80023a0:	f042 0220 	orr.w	r2, r2, #32
 80023a4:	b2d2      	uxtb	r2, r2
 80023a6:	f002 021f 	and.w	r2, r2, #31
 80023aa:	2101      	movs	r1, #1
 80023ac:	fa01 f202 	lsl.w	r2, r1, r2
 80023b0:	4013      	ands	r3, r2
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d182      	bne.n	80022bc <HAL_RCC_OscConfig+0xc4c>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80023b6:	4b3c      	ldr	r3, [pc, #240]	; (80024a8 <HAL_RCC_OscConfig+0xe38>)
 80023b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023ba:	f023 020f 	bic.w	r2, r3, #15
 80023be:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80023c2:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023ca:	4937      	ldr	r1, [pc, #220]	; (80024a8 <HAL_RCC_OscConfig+0xe38>)
 80023cc:	4313      	orrs	r3, r2
 80023ce:	62cb      	str	r3, [r1, #44]	; 0x2c
 80023d0:	4b35      	ldr	r3, [pc, #212]	; (80024a8 <HAL_RCC_OscConfig+0xe38>)
 80023d2:	685b      	ldr	r3, [r3, #4]
 80023d4:	f423 1276 	bic.w	r2, r3, #4030464	; 0x3d8000
 80023d8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80023dc:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	6a19      	ldr	r1, [r3, #32]
 80023e4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80023e8:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	69db      	ldr	r3, [r3, #28]
 80023f0:	430b      	orrs	r3, r1
 80023f2:	492d      	ldr	r1, [pc, #180]	; (80024a8 <HAL_RCC_OscConfig+0xe38>)
 80023f4:	4313      	orrs	r3, r2
 80023f6:	604b      	str	r3, [r1, #4]
 80023f8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80023fc:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8002400:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002404:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002406:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800240a:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	fa93 f2a3 	rbit	r2, r3
 8002414:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002418:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 800241c:	601a      	str	r2, [r3, #0]
  return result;
 800241e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002422:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8002426:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002428:	fab3 f383 	clz	r3, r3
 800242c:	b2db      	uxtb	r3, r3
 800242e:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002432:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002436:	009b      	lsls	r3, r3, #2
 8002438:	461a      	mov	r2, r3
 800243a:	2301      	movs	r3, #1
 800243c:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800243e:	f7fe fc3b 	bl	8000cb8 <HAL_GetTick>
 8002442:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002446:	e009      	b.n	800245c <HAL_RCC_OscConfig+0xdec>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002448:	f7fe fc36 	bl	8000cb8 <HAL_GetTick>
 800244c:	4602      	mov	r2, r0
 800244e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002452:	1ad3      	subs	r3, r2, r3
 8002454:	2b02      	cmp	r3, #2
 8002456:	d901      	bls.n	800245c <HAL_RCC_OscConfig+0xdec>
          {
            return HAL_TIMEOUT;
 8002458:	2303      	movs	r3, #3
 800245a:	e156      	b.n	800270a <HAL_RCC_OscConfig+0x109a>
 800245c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002460:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8002464:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002468:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800246a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800246e:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	fa93 f2a3 	rbit	r2, r3
 8002478:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800247c:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8002480:	601a      	str	r2, [r3, #0]
  return result;
 8002482:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002486:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 800248a:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800248c:	fab3 f383 	clz	r3, r3
 8002490:	b2db      	uxtb	r3, r3
 8002492:	095b      	lsrs	r3, r3, #5
 8002494:	b2db      	uxtb	r3, r3
 8002496:	f043 0301 	orr.w	r3, r3, #1
 800249a:	b2db      	uxtb	r3, r3
 800249c:	2b01      	cmp	r3, #1
 800249e:	d105      	bne.n	80024ac <HAL_RCC_OscConfig+0xe3c>
 80024a0:	4b01      	ldr	r3, [pc, #4]	; (80024a8 <HAL_RCC_OscConfig+0xe38>)
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	e02a      	b.n	80024fc <HAL_RCC_OscConfig+0xe8c>
 80024a6:	bf00      	nop
 80024a8:	40021000 	.word	0x40021000
 80024ac:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80024b0:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 80024b4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80024b8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024ba:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80024be:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	fa93 f2a3 	rbit	r2, r3
 80024c8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80024cc:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 80024d0:	601a      	str	r2, [r3, #0]
 80024d2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80024d6:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 80024da:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80024de:	601a      	str	r2, [r3, #0]
 80024e0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80024e4:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	fa93 f2a3 	rbit	r2, r3
 80024ee:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80024f2:	f5a3 73e4 	sub.w	r3, r3, #456	; 0x1c8
 80024f6:	601a      	str	r2, [r3, #0]
 80024f8:	4b86      	ldr	r3, [pc, #536]	; (8002714 <HAL_RCC_OscConfig+0x10a4>)
 80024fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024fc:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002500:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8002504:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002508:	6011      	str	r1, [r2, #0]
 800250a:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800250e:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8002512:	6812      	ldr	r2, [r2, #0]
 8002514:	fa92 f1a2 	rbit	r1, r2
 8002518:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800251c:	f5a2 72e8 	sub.w	r2, r2, #464	; 0x1d0
 8002520:	6011      	str	r1, [r2, #0]
  return result;
 8002522:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002526:	f5a2 72e8 	sub.w	r2, r2, #464	; 0x1d0
 800252a:	6812      	ldr	r2, [r2, #0]
 800252c:	fab2 f282 	clz	r2, r2
 8002530:	b2d2      	uxtb	r2, r2
 8002532:	f042 0220 	orr.w	r2, r2, #32
 8002536:	b2d2      	uxtb	r2, r2
 8002538:	f002 021f 	and.w	r2, r2, #31
 800253c:	2101      	movs	r1, #1
 800253e:	fa01 f202 	lsl.w	r2, r1, r2
 8002542:	4013      	ands	r3, r2
 8002544:	2b00      	cmp	r3, #0
 8002546:	f43f af7f 	beq.w	8002448 <HAL_RCC_OscConfig+0xdd8>
 800254a:	e0dd      	b.n	8002708 <HAL_RCC_OscConfig+0x1098>
 800254c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002550:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8002554:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002558:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800255a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800255e:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	fa93 f2a3 	rbit	r2, r3
 8002568:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800256c:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8002570:	601a      	str	r2, [r3, #0]
  return result;
 8002572:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002576:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 800257a:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800257c:	fab3 f383 	clz	r3, r3
 8002580:	b2db      	uxtb	r3, r3
 8002582:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002586:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800258a:	009b      	lsls	r3, r3, #2
 800258c:	461a      	mov	r2, r3
 800258e:	2300      	movs	r3, #0
 8002590:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002592:	f7fe fb91 	bl	8000cb8 <HAL_GetTick>
 8002596:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800259a:	e009      	b.n	80025b0 <HAL_RCC_OscConfig+0xf40>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800259c:	f7fe fb8c 	bl	8000cb8 <HAL_GetTick>
 80025a0:	4602      	mov	r2, r0
 80025a2:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80025a6:	1ad3      	subs	r3, r2, r3
 80025a8:	2b02      	cmp	r3, #2
 80025aa:	d901      	bls.n	80025b0 <HAL_RCC_OscConfig+0xf40>
          {
            return HAL_TIMEOUT;
 80025ac:	2303      	movs	r3, #3
 80025ae:	e0ac      	b.n	800270a <HAL_RCC_OscConfig+0x109a>
 80025b0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80025b4:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 80025b8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80025bc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025be:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80025c2:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	fa93 f2a3 	rbit	r2, r3
 80025cc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80025d0:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 80025d4:	601a      	str	r2, [r3, #0]
  return result;
 80025d6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80025da:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 80025de:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80025e0:	fab3 f383 	clz	r3, r3
 80025e4:	b2db      	uxtb	r3, r3
 80025e6:	095b      	lsrs	r3, r3, #5
 80025e8:	b2db      	uxtb	r3, r3
 80025ea:	f043 0301 	orr.w	r3, r3, #1
 80025ee:	b2db      	uxtb	r3, r3
 80025f0:	2b01      	cmp	r3, #1
 80025f2:	d102      	bne.n	80025fa <HAL_RCC_OscConfig+0xf8a>
 80025f4:	4b47      	ldr	r3, [pc, #284]	; (8002714 <HAL_RCC_OscConfig+0x10a4>)
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	e027      	b.n	800264a <HAL_RCC_OscConfig+0xfda>
 80025fa:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80025fe:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8002602:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002606:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002608:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800260c:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	fa93 f2a3 	rbit	r2, r3
 8002616:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800261a:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 800261e:	601a      	str	r2, [r3, #0]
 8002620:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002624:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8002628:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800262c:	601a      	str	r2, [r3, #0]
 800262e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002632:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	fa93 f2a3 	rbit	r2, r3
 800263c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002640:	f5a3 73f8 	sub.w	r3, r3, #496	; 0x1f0
 8002644:	601a      	str	r2, [r3, #0]
 8002646:	4b33      	ldr	r3, [pc, #204]	; (8002714 <HAL_RCC_OscConfig+0x10a4>)
 8002648:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800264a:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800264e:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8002652:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002656:	6011      	str	r1, [r2, #0]
 8002658:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800265c:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8002660:	6812      	ldr	r2, [r2, #0]
 8002662:	fa92 f1a2 	rbit	r1, r2
 8002666:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800266a:	f5a2 72fc 	sub.w	r2, r2, #504	; 0x1f8
 800266e:	6011      	str	r1, [r2, #0]
  return result;
 8002670:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002674:	f5a2 72fc 	sub.w	r2, r2, #504	; 0x1f8
 8002678:	6812      	ldr	r2, [r2, #0]
 800267a:	fab2 f282 	clz	r2, r2
 800267e:	b2d2      	uxtb	r2, r2
 8002680:	f042 0220 	orr.w	r2, r2, #32
 8002684:	b2d2      	uxtb	r2, r2
 8002686:	f002 021f 	and.w	r2, r2, #31
 800268a:	2101      	movs	r1, #1
 800268c:	fa01 f202 	lsl.w	r2, r1, r2
 8002690:	4013      	ands	r3, r2
 8002692:	2b00      	cmp	r3, #0
 8002694:	d182      	bne.n	800259c <HAL_RCC_OscConfig+0xf2c>
 8002696:	e037      	b.n	8002708 <HAL_RCC_OscConfig+0x1098>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002698:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800269c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	699b      	ldr	r3, [r3, #24]
 80026a4:	2b01      	cmp	r3, #1
 80026a6:	d101      	bne.n	80026ac <HAL_RCC_OscConfig+0x103c>
      {
        return HAL_ERROR;
 80026a8:	2301      	movs	r3, #1
 80026aa:	e02e      	b.n	800270a <HAL_RCC_OscConfig+0x109a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80026ac:	4b19      	ldr	r3, [pc, #100]	; (8002714 <HAL_RCC_OscConfig+0x10a4>)
 80026ae:	685b      	ldr	r3, [r3, #4]
 80026b0:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 80026b4:	4b17      	ldr	r3, [pc, #92]	; (8002714 <HAL_RCC_OscConfig+0x10a4>)
 80026b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026b8:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80026bc:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80026c0:	f403 32c0 	and.w	r2, r3, #98304	; 0x18000
 80026c4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80026c8:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	69db      	ldr	r3, [r3, #28]
 80026d0:	429a      	cmp	r2, r3
 80026d2:	d117      	bne.n	8002704 <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 80026d4:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80026d8:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80026dc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80026e0:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80026e8:	429a      	cmp	r2, r3
 80026ea:	d10b      	bne.n	8002704 <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 80026ec:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80026f0:	f003 020f 	and.w	r2, r3, #15
 80026f4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80026f8:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8002700:	429a      	cmp	r2, r3
 8002702:	d001      	beq.n	8002708 <HAL_RCC_OscConfig+0x1098>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 8002704:	2301      	movs	r3, #1
 8002706:	e000      	b.n	800270a <HAL_RCC_OscConfig+0x109a>
        }
      }
    }
  }

  return HAL_OK;
 8002708:	2300      	movs	r3, #0
}
 800270a:	4618      	mov	r0, r3
 800270c:	f507 7702 	add.w	r7, r7, #520	; 0x208
 8002710:	46bd      	mov	sp, r7
 8002712:	bd80      	pop	{r7, pc}
 8002714:	40021000 	.word	0x40021000

08002718 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002718:	b580      	push	{r7, lr}
 800271a:	b09e      	sub	sp, #120	; 0x78
 800271c:	af00      	add	r7, sp, #0
 800271e:	6078      	str	r0, [r7, #4]
 8002720:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002722:	2300      	movs	r3, #0
 8002724:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	2b00      	cmp	r3, #0
 800272a:	d101      	bne.n	8002730 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800272c:	2301      	movs	r3, #1
 800272e:	e162      	b.n	80029f6 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002730:	4b90      	ldr	r3, [pc, #576]	; (8002974 <HAL_RCC_ClockConfig+0x25c>)
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	f003 0307 	and.w	r3, r3, #7
 8002738:	683a      	ldr	r2, [r7, #0]
 800273a:	429a      	cmp	r2, r3
 800273c:	d910      	bls.n	8002760 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800273e:	4b8d      	ldr	r3, [pc, #564]	; (8002974 <HAL_RCC_ClockConfig+0x25c>)
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	f023 0207 	bic.w	r2, r3, #7
 8002746:	498b      	ldr	r1, [pc, #556]	; (8002974 <HAL_RCC_ClockConfig+0x25c>)
 8002748:	683b      	ldr	r3, [r7, #0]
 800274a:	4313      	orrs	r3, r2
 800274c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800274e:	4b89      	ldr	r3, [pc, #548]	; (8002974 <HAL_RCC_ClockConfig+0x25c>)
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	f003 0307 	and.w	r3, r3, #7
 8002756:	683a      	ldr	r2, [r7, #0]
 8002758:	429a      	cmp	r2, r3
 800275a:	d001      	beq.n	8002760 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800275c:	2301      	movs	r3, #1
 800275e:	e14a      	b.n	80029f6 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	f003 0302 	and.w	r3, r3, #2
 8002768:	2b00      	cmp	r3, #0
 800276a:	d008      	beq.n	800277e <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800276c:	4b82      	ldr	r3, [pc, #520]	; (8002978 <HAL_RCC_ClockConfig+0x260>)
 800276e:	685b      	ldr	r3, [r3, #4]
 8002770:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	689b      	ldr	r3, [r3, #8]
 8002778:	497f      	ldr	r1, [pc, #508]	; (8002978 <HAL_RCC_ClockConfig+0x260>)
 800277a:	4313      	orrs	r3, r2
 800277c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	f003 0301 	and.w	r3, r3, #1
 8002786:	2b00      	cmp	r3, #0
 8002788:	f000 80dc 	beq.w	8002944 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	685b      	ldr	r3, [r3, #4]
 8002790:	2b01      	cmp	r3, #1
 8002792:	d13c      	bne.n	800280e <HAL_RCC_ClockConfig+0xf6>
 8002794:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002798:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800279a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800279c:	fa93 f3a3 	rbit	r3, r3
 80027a0:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 80027a2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80027a4:	fab3 f383 	clz	r3, r3
 80027a8:	b2db      	uxtb	r3, r3
 80027aa:	095b      	lsrs	r3, r3, #5
 80027ac:	b2db      	uxtb	r3, r3
 80027ae:	f043 0301 	orr.w	r3, r3, #1
 80027b2:	b2db      	uxtb	r3, r3
 80027b4:	2b01      	cmp	r3, #1
 80027b6:	d102      	bne.n	80027be <HAL_RCC_ClockConfig+0xa6>
 80027b8:	4b6f      	ldr	r3, [pc, #444]	; (8002978 <HAL_RCC_ClockConfig+0x260>)
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	e00f      	b.n	80027de <HAL_RCC_ClockConfig+0xc6>
 80027be:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80027c2:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027c4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80027c6:	fa93 f3a3 	rbit	r3, r3
 80027ca:	667b      	str	r3, [r7, #100]	; 0x64
 80027cc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80027d0:	663b      	str	r3, [r7, #96]	; 0x60
 80027d2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80027d4:	fa93 f3a3 	rbit	r3, r3
 80027d8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80027da:	4b67      	ldr	r3, [pc, #412]	; (8002978 <HAL_RCC_ClockConfig+0x260>)
 80027dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027de:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80027e2:	65ba      	str	r2, [r7, #88]	; 0x58
 80027e4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80027e6:	fa92 f2a2 	rbit	r2, r2
 80027ea:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 80027ec:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80027ee:	fab2 f282 	clz	r2, r2
 80027f2:	b2d2      	uxtb	r2, r2
 80027f4:	f042 0220 	orr.w	r2, r2, #32
 80027f8:	b2d2      	uxtb	r2, r2
 80027fa:	f002 021f 	and.w	r2, r2, #31
 80027fe:	2101      	movs	r1, #1
 8002800:	fa01 f202 	lsl.w	r2, r1, r2
 8002804:	4013      	ands	r3, r2
 8002806:	2b00      	cmp	r3, #0
 8002808:	d17b      	bne.n	8002902 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800280a:	2301      	movs	r3, #1
 800280c:	e0f3      	b.n	80029f6 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	685b      	ldr	r3, [r3, #4]
 8002812:	2b02      	cmp	r3, #2
 8002814:	d13c      	bne.n	8002890 <HAL_RCC_ClockConfig+0x178>
 8002816:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800281a:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800281c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800281e:	fa93 f3a3 	rbit	r3, r3
 8002822:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002824:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002826:	fab3 f383 	clz	r3, r3
 800282a:	b2db      	uxtb	r3, r3
 800282c:	095b      	lsrs	r3, r3, #5
 800282e:	b2db      	uxtb	r3, r3
 8002830:	f043 0301 	orr.w	r3, r3, #1
 8002834:	b2db      	uxtb	r3, r3
 8002836:	2b01      	cmp	r3, #1
 8002838:	d102      	bne.n	8002840 <HAL_RCC_ClockConfig+0x128>
 800283a:	4b4f      	ldr	r3, [pc, #316]	; (8002978 <HAL_RCC_ClockConfig+0x260>)
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	e00f      	b.n	8002860 <HAL_RCC_ClockConfig+0x148>
 8002840:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002844:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002846:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002848:	fa93 f3a3 	rbit	r3, r3
 800284c:	647b      	str	r3, [r7, #68]	; 0x44
 800284e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002852:	643b      	str	r3, [r7, #64]	; 0x40
 8002854:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002856:	fa93 f3a3 	rbit	r3, r3
 800285a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800285c:	4b46      	ldr	r3, [pc, #280]	; (8002978 <HAL_RCC_ClockConfig+0x260>)
 800285e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002860:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002864:	63ba      	str	r2, [r7, #56]	; 0x38
 8002866:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002868:	fa92 f2a2 	rbit	r2, r2
 800286c:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 800286e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002870:	fab2 f282 	clz	r2, r2
 8002874:	b2d2      	uxtb	r2, r2
 8002876:	f042 0220 	orr.w	r2, r2, #32
 800287a:	b2d2      	uxtb	r2, r2
 800287c:	f002 021f 	and.w	r2, r2, #31
 8002880:	2101      	movs	r1, #1
 8002882:	fa01 f202 	lsl.w	r2, r1, r2
 8002886:	4013      	ands	r3, r2
 8002888:	2b00      	cmp	r3, #0
 800288a:	d13a      	bne.n	8002902 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800288c:	2301      	movs	r3, #1
 800288e:	e0b2      	b.n	80029f6 <HAL_RCC_ClockConfig+0x2de>
 8002890:	2302      	movs	r3, #2
 8002892:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002894:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002896:	fa93 f3a3 	rbit	r3, r3
 800289a:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 800289c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800289e:	fab3 f383 	clz	r3, r3
 80028a2:	b2db      	uxtb	r3, r3
 80028a4:	095b      	lsrs	r3, r3, #5
 80028a6:	b2db      	uxtb	r3, r3
 80028a8:	f043 0301 	orr.w	r3, r3, #1
 80028ac:	b2db      	uxtb	r3, r3
 80028ae:	2b01      	cmp	r3, #1
 80028b0:	d102      	bne.n	80028b8 <HAL_RCC_ClockConfig+0x1a0>
 80028b2:	4b31      	ldr	r3, [pc, #196]	; (8002978 <HAL_RCC_ClockConfig+0x260>)
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	e00d      	b.n	80028d4 <HAL_RCC_ClockConfig+0x1bc>
 80028b8:	2302      	movs	r3, #2
 80028ba:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028be:	fa93 f3a3 	rbit	r3, r3
 80028c2:	627b      	str	r3, [r7, #36]	; 0x24
 80028c4:	2302      	movs	r3, #2
 80028c6:	623b      	str	r3, [r7, #32]
 80028c8:	6a3b      	ldr	r3, [r7, #32]
 80028ca:	fa93 f3a3 	rbit	r3, r3
 80028ce:	61fb      	str	r3, [r7, #28]
 80028d0:	4b29      	ldr	r3, [pc, #164]	; (8002978 <HAL_RCC_ClockConfig+0x260>)
 80028d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028d4:	2202      	movs	r2, #2
 80028d6:	61ba      	str	r2, [r7, #24]
 80028d8:	69ba      	ldr	r2, [r7, #24]
 80028da:	fa92 f2a2 	rbit	r2, r2
 80028de:	617a      	str	r2, [r7, #20]
  return result;
 80028e0:	697a      	ldr	r2, [r7, #20]
 80028e2:	fab2 f282 	clz	r2, r2
 80028e6:	b2d2      	uxtb	r2, r2
 80028e8:	f042 0220 	orr.w	r2, r2, #32
 80028ec:	b2d2      	uxtb	r2, r2
 80028ee:	f002 021f 	and.w	r2, r2, #31
 80028f2:	2101      	movs	r1, #1
 80028f4:	fa01 f202 	lsl.w	r2, r1, r2
 80028f8:	4013      	ands	r3, r2
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d101      	bne.n	8002902 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80028fe:	2301      	movs	r3, #1
 8002900:	e079      	b.n	80029f6 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002902:	4b1d      	ldr	r3, [pc, #116]	; (8002978 <HAL_RCC_ClockConfig+0x260>)
 8002904:	685b      	ldr	r3, [r3, #4]
 8002906:	f023 0203 	bic.w	r2, r3, #3
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	685b      	ldr	r3, [r3, #4]
 800290e:	491a      	ldr	r1, [pc, #104]	; (8002978 <HAL_RCC_ClockConfig+0x260>)
 8002910:	4313      	orrs	r3, r2
 8002912:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002914:	f7fe f9d0 	bl	8000cb8 <HAL_GetTick>
 8002918:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800291a:	e00a      	b.n	8002932 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800291c:	f7fe f9cc 	bl	8000cb8 <HAL_GetTick>
 8002920:	4602      	mov	r2, r0
 8002922:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002924:	1ad3      	subs	r3, r2, r3
 8002926:	f241 3288 	movw	r2, #5000	; 0x1388
 800292a:	4293      	cmp	r3, r2
 800292c:	d901      	bls.n	8002932 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 800292e:	2303      	movs	r3, #3
 8002930:	e061      	b.n	80029f6 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002932:	4b11      	ldr	r3, [pc, #68]	; (8002978 <HAL_RCC_ClockConfig+0x260>)
 8002934:	685b      	ldr	r3, [r3, #4]
 8002936:	f003 020c 	and.w	r2, r3, #12
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	685b      	ldr	r3, [r3, #4]
 800293e:	009b      	lsls	r3, r3, #2
 8002940:	429a      	cmp	r2, r3
 8002942:	d1eb      	bne.n	800291c <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002944:	4b0b      	ldr	r3, [pc, #44]	; (8002974 <HAL_RCC_ClockConfig+0x25c>)
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	f003 0307 	and.w	r3, r3, #7
 800294c:	683a      	ldr	r2, [r7, #0]
 800294e:	429a      	cmp	r2, r3
 8002950:	d214      	bcs.n	800297c <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002952:	4b08      	ldr	r3, [pc, #32]	; (8002974 <HAL_RCC_ClockConfig+0x25c>)
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	f023 0207 	bic.w	r2, r3, #7
 800295a:	4906      	ldr	r1, [pc, #24]	; (8002974 <HAL_RCC_ClockConfig+0x25c>)
 800295c:	683b      	ldr	r3, [r7, #0]
 800295e:	4313      	orrs	r3, r2
 8002960:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002962:	4b04      	ldr	r3, [pc, #16]	; (8002974 <HAL_RCC_ClockConfig+0x25c>)
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	f003 0307 	and.w	r3, r3, #7
 800296a:	683a      	ldr	r2, [r7, #0]
 800296c:	429a      	cmp	r2, r3
 800296e:	d005      	beq.n	800297c <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8002970:	2301      	movs	r3, #1
 8002972:	e040      	b.n	80029f6 <HAL_RCC_ClockConfig+0x2de>
 8002974:	40022000 	.word	0x40022000
 8002978:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	f003 0304 	and.w	r3, r3, #4
 8002984:	2b00      	cmp	r3, #0
 8002986:	d008      	beq.n	800299a <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002988:	4b1d      	ldr	r3, [pc, #116]	; (8002a00 <HAL_RCC_ClockConfig+0x2e8>)
 800298a:	685b      	ldr	r3, [r3, #4]
 800298c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	68db      	ldr	r3, [r3, #12]
 8002994:	491a      	ldr	r1, [pc, #104]	; (8002a00 <HAL_RCC_ClockConfig+0x2e8>)
 8002996:	4313      	orrs	r3, r2
 8002998:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	f003 0308 	and.w	r3, r3, #8
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d009      	beq.n	80029ba <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80029a6:	4b16      	ldr	r3, [pc, #88]	; (8002a00 <HAL_RCC_ClockConfig+0x2e8>)
 80029a8:	685b      	ldr	r3, [r3, #4]
 80029aa:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	691b      	ldr	r3, [r3, #16]
 80029b2:	00db      	lsls	r3, r3, #3
 80029b4:	4912      	ldr	r1, [pc, #72]	; (8002a00 <HAL_RCC_ClockConfig+0x2e8>)
 80029b6:	4313      	orrs	r3, r2
 80029b8:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80029ba:	f000 f829 	bl	8002a10 <HAL_RCC_GetSysClockFreq>
 80029be:	4601      	mov	r1, r0
 80029c0:	4b0f      	ldr	r3, [pc, #60]	; (8002a00 <HAL_RCC_ClockConfig+0x2e8>)
 80029c2:	685b      	ldr	r3, [r3, #4]
 80029c4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80029c8:	22f0      	movs	r2, #240	; 0xf0
 80029ca:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029cc:	693a      	ldr	r2, [r7, #16]
 80029ce:	fa92 f2a2 	rbit	r2, r2
 80029d2:	60fa      	str	r2, [r7, #12]
  return result;
 80029d4:	68fa      	ldr	r2, [r7, #12]
 80029d6:	fab2 f282 	clz	r2, r2
 80029da:	b2d2      	uxtb	r2, r2
 80029dc:	40d3      	lsrs	r3, r2
 80029de:	4a09      	ldr	r2, [pc, #36]	; (8002a04 <HAL_RCC_ClockConfig+0x2ec>)
 80029e0:	5cd3      	ldrb	r3, [r2, r3]
 80029e2:	fa21 f303 	lsr.w	r3, r1, r3
 80029e6:	4a08      	ldr	r2, [pc, #32]	; (8002a08 <HAL_RCC_ClockConfig+0x2f0>)
 80029e8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 80029ea:	4b08      	ldr	r3, [pc, #32]	; (8002a0c <HAL_RCC_ClockConfig+0x2f4>)
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	4618      	mov	r0, r3
 80029f0:	f7fe f830 	bl	8000a54 <HAL_InitTick>
  
  return HAL_OK;
 80029f4:	2300      	movs	r3, #0
}
 80029f6:	4618      	mov	r0, r3
 80029f8:	3778      	adds	r7, #120	; 0x78
 80029fa:	46bd      	mov	sp, r7
 80029fc:	bd80      	pop	{r7, pc}
 80029fe:	bf00      	nop
 8002a00:	40021000 	.word	0x40021000
 8002a04:	08008300 	.word	0x08008300
 8002a08:	20000000 	.word	0x20000000
 8002a0c:	20000004 	.word	0x20000004

08002a10 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002a10:	b480      	push	{r7}
 8002a12:	b08b      	sub	sp, #44	; 0x2c
 8002a14:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002a16:	2300      	movs	r3, #0
 8002a18:	61fb      	str	r3, [r7, #28]
 8002a1a:	2300      	movs	r3, #0
 8002a1c:	61bb      	str	r3, [r7, #24]
 8002a1e:	2300      	movs	r3, #0
 8002a20:	627b      	str	r3, [r7, #36]	; 0x24
 8002a22:	2300      	movs	r3, #0
 8002a24:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002a26:	2300      	movs	r3, #0
 8002a28:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8002a2a:	4b2a      	ldr	r3, [pc, #168]	; (8002ad4 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002a2c:	685b      	ldr	r3, [r3, #4]
 8002a2e:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002a30:	69fb      	ldr	r3, [r7, #28]
 8002a32:	f003 030c 	and.w	r3, r3, #12
 8002a36:	2b04      	cmp	r3, #4
 8002a38:	d002      	beq.n	8002a40 <HAL_RCC_GetSysClockFreq+0x30>
 8002a3a:	2b08      	cmp	r3, #8
 8002a3c:	d003      	beq.n	8002a46 <HAL_RCC_GetSysClockFreq+0x36>
 8002a3e:	e03f      	b.n	8002ac0 <HAL_RCC_GetSysClockFreq+0xb0>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002a40:	4b25      	ldr	r3, [pc, #148]	; (8002ad8 <HAL_RCC_GetSysClockFreq+0xc8>)
 8002a42:	623b      	str	r3, [r7, #32]
      break;
 8002a44:	e03f      	b.n	8002ac6 <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8002a46:	69fb      	ldr	r3, [r7, #28]
 8002a48:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8002a4c:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8002a50:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a52:	68ba      	ldr	r2, [r7, #8]
 8002a54:	fa92 f2a2 	rbit	r2, r2
 8002a58:	607a      	str	r2, [r7, #4]
  return result;
 8002a5a:	687a      	ldr	r2, [r7, #4]
 8002a5c:	fab2 f282 	clz	r2, r2
 8002a60:	b2d2      	uxtb	r2, r2
 8002a62:	40d3      	lsrs	r3, r2
 8002a64:	4a1d      	ldr	r2, [pc, #116]	; (8002adc <HAL_RCC_GetSysClockFreq+0xcc>)
 8002a66:	5cd3      	ldrb	r3, [r2, r3]
 8002a68:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8002a6a:	4b1a      	ldr	r3, [pc, #104]	; (8002ad4 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002a6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a6e:	f003 030f 	and.w	r3, r3, #15
 8002a72:	220f      	movs	r2, #15
 8002a74:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a76:	693a      	ldr	r2, [r7, #16]
 8002a78:	fa92 f2a2 	rbit	r2, r2
 8002a7c:	60fa      	str	r2, [r7, #12]
  return result;
 8002a7e:	68fa      	ldr	r2, [r7, #12]
 8002a80:	fab2 f282 	clz	r2, r2
 8002a84:	b2d2      	uxtb	r2, r2
 8002a86:	40d3      	lsrs	r3, r2
 8002a88:	4a15      	ldr	r2, [pc, #84]	; (8002ae0 <HAL_RCC_GetSysClockFreq+0xd0>)
 8002a8a:	5cd3      	ldrb	r3, [r2, r3]
 8002a8c:	61bb      	str	r3, [r7, #24]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 8002a8e:	69fb      	ldr	r3, [r7, #28]
 8002a90:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d008      	beq.n	8002aaa <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002a98:	4a0f      	ldr	r2, [pc, #60]	; (8002ad8 <HAL_RCC_GetSysClockFreq+0xc8>)
 8002a9a:	69bb      	ldr	r3, [r7, #24]
 8002a9c:	fbb2 f2f3 	udiv	r2, r2, r3
 8002aa0:	697b      	ldr	r3, [r7, #20]
 8002aa2:	fb02 f303 	mul.w	r3, r2, r3
 8002aa6:	627b      	str	r3, [r7, #36]	; 0x24
 8002aa8:	e007      	b.n	8002aba <HAL_RCC_GetSysClockFreq+0xaa>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002aaa:	4a0b      	ldr	r2, [pc, #44]	; (8002ad8 <HAL_RCC_GetSysClockFreq+0xc8>)
 8002aac:	69bb      	ldr	r3, [r7, #24]
 8002aae:	fbb2 f2f3 	udiv	r2, r2, r3
 8002ab2:	697b      	ldr	r3, [r7, #20]
 8002ab4:	fb02 f303 	mul.w	r3, r2, r3
 8002ab8:	627b      	str	r3, [r7, #36]	; 0x24
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8002aba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002abc:	623b      	str	r3, [r7, #32]
      break;
 8002abe:	e002      	b.n	8002ac6 <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002ac0:	4b05      	ldr	r3, [pc, #20]	; (8002ad8 <HAL_RCC_GetSysClockFreq+0xc8>)
 8002ac2:	623b      	str	r3, [r7, #32]
      break;
 8002ac4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002ac6:	6a3b      	ldr	r3, [r7, #32]
}
 8002ac8:	4618      	mov	r0, r3
 8002aca:	372c      	adds	r7, #44	; 0x2c
 8002acc:	46bd      	mov	sp, r7
 8002ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad2:	4770      	bx	lr
 8002ad4:	40021000 	.word	0x40021000
 8002ad8:	007a1200 	.word	0x007a1200
 8002adc:	08008318 	.word	0x08008318
 8002ae0:	08008328 	.word	0x08008328

08002ae4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002ae4:	b480      	push	{r7}
 8002ae6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002ae8:	4b03      	ldr	r3, [pc, #12]	; (8002af8 <HAL_RCC_GetHCLKFreq+0x14>)
 8002aea:	681b      	ldr	r3, [r3, #0]
}
 8002aec:	4618      	mov	r0, r3
 8002aee:	46bd      	mov	sp, r7
 8002af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af4:	4770      	bx	lr
 8002af6:	bf00      	nop
 8002af8:	20000000 	.word	0x20000000

08002afc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002afc:	b580      	push	{r7, lr}
 8002afe:	b082      	sub	sp, #8
 8002b00:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8002b02:	f7ff ffef 	bl	8002ae4 <HAL_RCC_GetHCLKFreq>
 8002b06:	4601      	mov	r1, r0
 8002b08:	4b0b      	ldr	r3, [pc, #44]	; (8002b38 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8002b0a:	685b      	ldr	r3, [r3, #4]
 8002b0c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002b10:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8002b14:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b16:	687a      	ldr	r2, [r7, #4]
 8002b18:	fa92 f2a2 	rbit	r2, r2
 8002b1c:	603a      	str	r2, [r7, #0]
  return result;
 8002b1e:	683a      	ldr	r2, [r7, #0]
 8002b20:	fab2 f282 	clz	r2, r2
 8002b24:	b2d2      	uxtb	r2, r2
 8002b26:	40d3      	lsrs	r3, r2
 8002b28:	4a04      	ldr	r2, [pc, #16]	; (8002b3c <HAL_RCC_GetPCLK1Freq+0x40>)
 8002b2a:	5cd3      	ldrb	r3, [r2, r3]
 8002b2c:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8002b30:	4618      	mov	r0, r3
 8002b32:	3708      	adds	r7, #8
 8002b34:	46bd      	mov	sp, r7
 8002b36:	bd80      	pop	{r7, pc}
 8002b38:	40021000 	.word	0x40021000
 8002b3c:	08008310 	.word	0x08008310

08002b40 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002b40:	b580      	push	{r7, lr}
 8002b42:	b082      	sub	sp, #8
 8002b44:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8002b46:	f7ff ffcd 	bl	8002ae4 <HAL_RCC_GetHCLKFreq>
 8002b4a:	4601      	mov	r1, r0
 8002b4c:	4b0b      	ldr	r3, [pc, #44]	; (8002b7c <HAL_RCC_GetPCLK2Freq+0x3c>)
 8002b4e:	685b      	ldr	r3, [r3, #4]
 8002b50:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8002b54:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8002b58:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b5a:	687a      	ldr	r2, [r7, #4]
 8002b5c:	fa92 f2a2 	rbit	r2, r2
 8002b60:	603a      	str	r2, [r7, #0]
  return result;
 8002b62:	683a      	ldr	r2, [r7, #0]
 8002b64:	fab2 f282 	clz	r2, r2
 8002b68:	b2d2      	uxtb	r2, r2
 8002b6a:	40d3      	lsrs	r3, r2
 8002b6c:	4a04      	ldr	r2, [pc, #16]	; (8002b80 <HAL_RCC_GetPCLK2Freq+0x40>)
 8002b6e:	5cd3      	ldrb	r3, [r2, r3]
 8002b70:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8002b74:	4618      	mov	r0, r3
 8002b76:	3708      	adds	r7, #8
 8002b78:	46bd      	mov	sp, r7
 8002b7a:	bd80      	pop	{r7, pc}
 8002b7c:	40021000 	.word	0x40021000
 8002b80:	08008310 	.word	0x08008310

08002b84 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002b84:	b480      	push	{r7}
 8002b86:	b083      	sub	sp, #12
 8002b88:	af00      	add	r7, sp, #0
 8002b8a:	6078      	str	r0, [r7, #4]
 8002b8c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	220f      	movs	r2, #15
 8002b92:	601a      	str	r2, [r3, #0]
  
  /* Get the SYSCLK configuration --------------------------------------------*/ 
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002b94:	4b12      	ldr	r3, [pc, #72]	; (8002be0 <HAL_RCC_GetClockConfig+0x5c>)
 8002b96:	685b      	ldr	r3, [r3, #4]
 8002b98:	f003 0203 	and.w	r2, r3, #3
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	605a      	str	r2, [r3, #4]
  
  /* Get the HCLK configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE); 
 8002ba0:	4b0f      	ldr	r3, [pc, #60]	; (8002be0 <HAL_RCC_GetClockConfig+0x5c>)
 8002ba2:	685b      	ldr	r3, [r3, #4]
 8002ba4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	609a      	str	r2, [r3, #8]
  
  /* Get the APB1 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);   
 8002bac:	4b0c      	ldr	r3, [pc, #48]	; (8002be0 <HAL_RCC_GetClockConfig+0x5c>)
 8002bae:	685b      	ldr	r3, [r3, #4]
 8002bb0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	60da      	str	r2, [r3, #12]
  
  /* Get the APB2 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8002bb8:	4b09      	ldr	r3, [pc, #36]	; (8002be0 <HAL_RCC_GetClockConfig+0x5c>)
 8002bba:	685b      	ldr	r3, [r3, #4]
 8002bbc:	08db      	lsrs	r3, r3, #3
 8002bbe:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	611a      	str	r2, [r3, #16]
  
  /* Get the Flash Wait State (Latency) configuration ------------------------*/   
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY); 
 8002bc6:	4b07      	ldr	r3, [pc, #28]	; (8002be4 <HAL_RCC_GetClockConfig+0x60>)
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	f003 0207 	and.w	r2, r3, #7
 8002bce:	683b      	ldr	r3, [r7, #0]
 8002bd0:	601a      	str	r2, [r3, #0]
}
 8002bd2:	bf00      	nop
 8002bd4:	370c      	adds	r7, #12
 8002bd6:	46bd      	mov	sp, r7
 8002bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bdc:	4770      	bx	lr
 8002bde:	bf00      	nop
 8002be0:	40021000 	.word	0x40021000
 8002be4:	40022000 	.word	0x40022000

08002be8 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002be8:	b580      	push	{r7, lr}
 8002bea:	b092      	sub	sp, #72	; 0x48
 8002bec:	af00      	add	r7, sp, #0
 8002bee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002bf0:	2300      	movs	r3, #0
 8002bf2:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8002bf4:	2300      	movs	r3, #0
 8002bf6:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8002bf8:	2300      	movs	r3, #0
 8002bfa:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	f000 80d4 	beq.w	8002db4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002c0c:	4b4e      	ldr	r3, [pc, #312]	; (8002d48 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c0e:	69db      	ldr	r3, [r3, #28]
 8002c10:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d10e      	bne.n	8002c36 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002c18:	4b4b      	ldr	r3, [pc, #300]	; (8002d48 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c1a:	69db      	ldr	r3, [r3, #28]
 8002c1c:	4a4a      	ldr	r2, [pc, #296]	; (8002d48 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c1e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c22:	61d3      	str	r3, [r2, #28]
 8002c24:	4b48      	ldr	r3, [pc, #288]	; (8002d48 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c26:	69db      	ldr	r3, [r3, #28]
 8002c28:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c2c:	60bb      	str	r3, [r7, #8]
 8002c2e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002c30:	2301      	movs	r3, #1
 8002c32:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c36:	4b45      	ldr	r3, [pc, #276]	; (8002d4c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d118      	bne.n	8002c74 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002c42:	4b42      	ldr	r3, [pc, #264]	; (8002d4c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	4a41      	ldr	r2, [pc, #260]	; (8002d4c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002c48:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c4c:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002c4e:	f7fe f833 	bl	8000cb8 <HAL_GetTick>
 8002c52:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c54:	e008      	b.n	8002c68 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c56:	f7fe f82f 	bl	8000cb8 <HAL_GetTick>
 8002c5a:	4602      	mov	r2, r0
 8002c5c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002c5e:	1ad3      	subs	r3, r2, r3
 8002c60:	2b64      	cmp	r3, #100	; 0x64
 8002c62:	d901      	bls.n	8002c68 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8002c64:	2303      	movs	r3, #3
 8002c66:	e1d6      	b.n	8003016 <HAL_RCCEx_PeriphCLKConfig+0x42e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c68:	4b38      	ldr	r3, [pc, #224]	; (8002d4c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d0f0      	beq.n	8002c56 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002c74:	4b34      	ldr	r3, [pc, #208]	; (8002d48 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c76:	6a1b      	ldr	r3, [r3, #32]
 8002c78:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002c7c:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002c7e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	f000 8084 	beq.w	8002d8e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	685b      	ldr	r3, [r3, #4]
 8002c8a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002c8e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002c90:	429a      	cmp	r2, r3
 8002c92:	d07c      	beq.n	8002d8e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002c94:	4b2c      	ldr	r3, [pc, #176]	; (8002d48 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c96:	6a1b      	ldr	r3, [r3, #32]
 8002c98:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002c9c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002c9e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002ca2:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ca4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ca6:	fa93 f3a3 	rbit	r3, r3
 8002caa:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002cac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002cae:	fab3 f383 	clz	r3, r3
 8002cb2:	b2db      	uxtb	r3, r3
 8002cb4:	461a      	mov	r2, r3
 8002cb6:	4b26      	ldr	r3, [pc, #152]	; (8002d50 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002cb8:	4413      	add	r3, r2
 8002cba:	009b      	lsls	r3, r3, #2
 8002cbc:	461a      	mov	r2, r3
 8002cbe:	2301      	movs	r3, #1
 8002cc0:	6013      	str	r3, [r2, #0]
 8002cc2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002cc6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002cca:	fa93 f3a3 	rbit	r3, r3
 8002cce:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002cd0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002cd2:	fab3 f383 	clz	r3, r3
 8002cd6:	b2db      	uxtb	r3, r3
 8002cd8:	461a      	mov	r2, r3
 8002cda:	4b1d      	ldr	r3, [pc, #116]	; (8002d50 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002cdc:	4413      	add	r3, r2
 8002cde:	009b      	lsls	r3, r3, #2
 8002ce0:	461a      	mov	r2, r3
 8002ce2:	2300      	movs	r3, #0
 8002ce4:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002ce6:	4a18      	ldr	r2, [pc, #96]	; (8002d48 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002ce8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002cea:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002cec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002cee:	f003 0301 	and.w	r3, r3, #1
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d04b      	beq.n	8002d8e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cf6:	f7fd ffdf 	bl	8000cb8 <HAL_GetTick>
 8002cfa:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002cfc:	e00a      	b.n	8002d14 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002cfe:	f7fd ffdb 	bl	8000cb8 <HAL_GetTick>
 8002d02:	4602      	mov	r2, r0
 8002d04:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002d06:	1ad3      	subs	r3, r2, r3
 8002d08:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d0c:	4293      	cmp	r3, r2
 8002d0e:	d901      	bls.n	8002d14 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8002d10:	2303      	movs	r3, #3
 8002d12:	e180      	b.n	8003016 <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8002d14:	2302      	movs	r3, #2
 8002d16:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d1a:	fa93 f3a3 	rbit	r3, r3
 8002d1e:	627b      	str	r3, [r7, #36]	; 0x24
 8002d20:	2302      	movs	r3, #2
 8002d22:	623b      	str	r3, [r7, #32]
 8002d24:	6a3b      	ldr	r3, [r7, #32]
 8002d26:	fa93 f3a3 	rbit	r3, r3
 8002d2a:	61fb      	str	r3, [r7, #28]
  return result;
 8002d2c:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d2e:	fab3 f383 	clz	r3, r3
 8002d32:	b2db      	uxtb	r3, r3
 8002d34:	095b      	lsrs	r3, r3, #5
 8002d36:	b2db      	uxtb	r3, r3
 8002d38:	f043 0302 	orr.w	r3, r3, #2
 8002d3c:	b2db      	uxtb	r3, r3
 8002d3e:	2b02      	cmp	r3, #2
 8002d40:	d108      	bne.n	8002d54 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8002d42:	4b01      	ldr	r3, [pc, #4]	; (8002d48 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d44:	6a1b      	ldr	r3, [r3, #32]
 8002d46:	e00d      	b.n	8002d64 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8002d48:	40021000 	.word	0x40021000
 8002d4c:	40007000 	.word	0x40007000
 8002d50:	10908100 	.word	0x10908100
 8002d54:	2302      	movs	r3, #2
 8002d56:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d58:	69bb      	ldr	r3, [r7, #24]
 8002d5a:	fa93 f3a3 	rbit	r3, r3
 8002d5e:	617b      	str	r3, [r7, #20]
 8002d60:	4b9a      	ldr	r3, [pc, #616]	; (8002fcc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002d62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d64:	2202      	movs	r2, #2
 8002d66:	613a      	str	r2, [r7, #16]
 8002d68:	693a      	ldr	r2, [r7, #16]
 8002d6a:	fa92 f2a2 	rbit	r2, r2
 8002d6e:	60fa      	str	r2, [r7, #12]
  return result;
 8002d70:	68fa      	ldr	r2, [r7, #12]
 8002d72:	fab2 f282 	clz	r2, r2
 8002d76:	b2d2      	uxtb	r2, r2
 8002d78:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002d7c:	b2d2      	uxtb	r2, r2
 8002d7e:	f002 021f 	and.w	r2, r2, #31
 8002d82:	2101      	movs	r1, #1
 8002d84:	fa01 f202 	lsl.w	r2, r1, r2
 8002d88:	4013      	ands	r3, r2
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d0b7      	beq.n	8002cfe <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8002d8e:	4b8f      	ldr	r3, [pc, #572]	; (8002fcc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002d90:	6a1b      	ldr	r3, [r3, #32]
 8002d92:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	685b      	ldr	r3, [r3, #4]
 8002d9a:	498c      	ldr	r1, [pc, #560]	; (8002fcc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002d9c:	4313      	orrs	r3, r2
 8002d9e:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002da0:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8002da4:	2b01      	cmp	r3, #1
 8002da6:	d105      	bne.n	8002db4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002da8:	4b88      	ldr	r3, [pc, #544]	; (8002fcc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002daa:	69db      	ldr	r3, [r3, #28]
 8002dac:	4a87      	ldr	r2, [pc, #540]	; (8002fcc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002dae:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002db2:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	f003 0301 	and.w	r3, r3, #1
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d008      	beq.n	8002dd2 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002dc0:	4b82      	ldr	r3, [pc, #520]	; (8002fcc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002dc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dc4:	f023 0203 	bic.w	r2, r3, #3
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	689b      	ldr	r3, [r3, #8]
 8002dcc:	497f      	ldr	r1, [pc, #508]	; (8002fcc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002dce:	4313      	orrs	r3, r2
 8002dd0:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	f003 0302 	and.w	r3, r3, #2
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d008      	beq.n	8002df0 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002dde:	4b7b      	ldr	r3, [pc, #492]	; (8002fcc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002de0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002de2:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	68db      	ldr	r3, [r3, #12]
 8002dea:	4978      	ldr	r1, [pc, #480]	; (8002fcc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002dec:	4313      	orrs	r3, r2
 8002dee:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	f003 0304 	and.w	r3, r3, #4
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d008      	beq.n	8002e0e <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002dfc:	4b73      	ldr	r3, [pc, #460]	; (8002fcc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002dfe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e00:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	691b      	ldr	r3, [r3, #16]
 8002e08:	4970      	ldr	r1, [pc, #448]	; (8002fcc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002e0a:	4313      	orrs	r3, r2
 8002e0c:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	f003 0320 	and.w	r3, r3, #32
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d008      	beq.n	8002e2c <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002e1a:	4b6c      	ldr	r3, [pc, #432]	; (8002fcc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002e1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e1e:	f023 0210 	bic.w	r2, r3, #16
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	69db      	ldr	r3, [r3, #28]
 8002e26:	4969      	ldr	r1, [pc, #420]	; (8002fcc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002e28:	4313      	orrs	r3, r2
 8002e2a:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d008      	beq.n	8002e4a <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8002e38:	4b64      	ldr	r3, [pc, #400]	; (8002fcc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002e3a:	685b      	ldr	r3, [r3, #4]
 8002e3c:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e44:	4961      	ldr	r1, [pc, #388]	; (8002fcc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002e46:	4313      	orrs	r3, r2
 8002e48:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d008      	beq.n	8002e68 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002e56:	4b5d      	ldr	r3, [pc, #372]	; (8002fcc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002e58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e5a:	f023 0220 	bic.w	r2, r3, #32
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	6a1b      	ldr	r3, [r3, #32]
 8002e62:	495a      	ldr	r1, [pc, #360]	; (8002fcc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002e64:	4313      	orrs	r3, r2
 8002e66:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d008      	beq.n	8002e86 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002e74:	4b55      	ldr	r3, [pc, #340]	; (8002fcc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002e76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e78:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e80:	4952      	ldr	r1, [pc, #328]	; (8002fcc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002e82:	4313      	orrs	r3, r2
 8002e84:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	f003 0308 	and.w	r3, r3, #8
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d008      	beq.n	8002ea4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002e92:	4b4e      	ldr	r3, [pc, #312]	; (8002fcc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002e94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e96:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	695b      	ldr	r3, [r3, #20]
 8002e9e:	494b      	ldr	r1, [pc, #300]	; (8002fcc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002ea0:	4313      	orrs	r3, r2
 8002ea2:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	f003 0310 	and.w	r3, r3, #16
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d008      	beq.n	8002ec2 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002eb0:	4b46      	ldr	r3, [pc, #280]	; (8002fcc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002eb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002eb4:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	699b      	ldr	r3, [r3, #24]
 8002ebc:	4943      	ldr	r1, [pc, #268]	; (8002fcc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002ebe:	4313      	orrs	r3, r2
 8002ec0:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d008      	beq.n	8002ee0 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002ece:	4b3f      	ldr	r3, [pc, #252]	; (8002fcc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002ed0:	685b      	ldr	r3, [r3, #4]
 8002ed2:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002eda:	493c      	ldr	r1, [pc, #240]	; (8002fcc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002edc:	4313      	orrs	r3, r2
 8002ede:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d008      	beq.n	8002efe <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002eec:	4b37      	ldr	r3, [pc, #220]	; (8002fcc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002eee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ef0:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ef8:	4934      	ldr	r1, [pc, #208]	; (8002fcc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002efa:	4313      	orrs	r3, r2
 8002efc:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d008      	beq.n	8002f1c <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8002f0a:	4b30      	ldr	r3, [pc, #192]	; (8002fcc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002f0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f0e:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f16:	492d      	ldr	r1, [pc, #180]	; (8002fcc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002f18:	4313      	orrs	r3, r2
 8002f1a:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d008      	beq.n	8002f3a <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8002f28:	4b28      	ldr	r3, [pc, #160]	; (8002fcc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002f2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f2c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f34:	4925      	ldr	r1, [pc, #148]	; (8002fcc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002f36:	4313      	orrs	r3, r2
 8002f38:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d008      	beq.n	8002f58 <HAL_RCCEx_PeriphCLKConfig+0x370>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8002f46:	4b21      	ldr	r3, [pc, #132]	; (8002fcc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002f48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f4a:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f52:	491e      	ldr	r1, [pc, #120]	; (8002fcc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002f54:	4313      	orrs	r3, r2
 8002f56:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d008      	beq.n	8002f76 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 8002f64:	4b19      	ldr	r3, [pc, #100]	; (8002fcc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002f66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f68:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f70:	4916      	ldr	r1, [pc, #88]	; (8002fcc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002f72:	4313      	orrs	r3, r2
 8002f74:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d008      	beq.n	8002f94 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 8002f82:	4b12      	ldr	r3, [pc, #72]	; (8002fcc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002f84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f86:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f8e:	490f      	ldr	r1, [pc, #60]	; (8002fcc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002f90:	4313      	orrs	r3, r2
 8002f92:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d008      	beq.n	8002fb2 <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8002fa0:	4b0a      	ldr	r3, [pc, #40]	; (8002fcc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002fa2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fa4:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fac:	4907      	ldr	r1, [pc, #28]	; (8002fcc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002fae:	4313      	orrs	r3, r2
 8002fb0:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d00c      	beq.n	8002fd8 <HAL_RCCEx_PeriphCLKConfig+0x3f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 8002fbe:	4b03      	ldr	r3, [pc, #12]	; (8002fcc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002fc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fc2:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	e002      	b.n	8002fd0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 8002fca:	bf00      	nop
 8002fcc:	40021000 	.word	0x40021000
 8002fd0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002fd2:	4913      	ldr	r1, [pc, #76]	; (8003020 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002fd4:	4313      	orrs	r3, r2
 8002fd6:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d008      	beq.n	8002ff6 <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8002fe4:	4b0e      	ldr	r3, [pc, #56]	; (8003020 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002fe6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fe8:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ff0:	490b      	ldr	r1, [pc, #44]	; (8003020 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002ff2:	4313      	orrs	r3, r2
 8002ff4:	630b      	str	r3, [r1, #48]	; 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d008      	beq.n	8003014 <HAL_RCCEx_PeriphCLKConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 8003002:	4b07      	ldr	r3, [pc, #28]	; (8003020 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003004:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003006:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800300e:	4904      	ldr	r1, [pc, #16]	; (8003020 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003010:	4313      	orrs	r3, r2
 8003012:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8003014:	2300      	movs	r3, #0
}
 8003016:	4618      	mov	r0, r3
 8003018:	3748      	adds	r7, #72	; 0x48
 800301a:	46bd      	mov	sp, r7
 800301c:	bd80      	pop	{r7, pc}
 800301e:	bf00      	nop
 8003020:	40021000 	.word	0x40021000

08003024 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003024:	b580      	push	{r7, lr}
 8003026:	b084      	sub	sp, #16
 8003028:	af00      	add	r7, sp, #0
 800302a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	2b00      	cmp	r3, #0
 8003030:	d101      	bne.n	8003036 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003032:	2301      	movs	r3, #1
 8003034:	e09d      	b.n	8003172 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800303a:	2b00      	cmp	r3, #0
 800303c:	d108      	bne.n	8003050 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	685b      	ldr	r3, [r3, #4]
 8003042:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003046:	d009      	beq.n	800305c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	2200      	movs	r2, #0
 800304c:	61da      	str	r2, [r3, #28]
 800304e:	e005      	b.n	800305c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	2200      	movs	r2, #0
 8003054:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	2200      	movs	r2, #0
 800305a:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	2200      	movs	r2, #0
 8003060:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003068:	b2db      	uxtb	r3, r3
 800306a:	2b00      	cmp	r3, #0
 800306c:	d106      	bne.n	800307c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	2200      	movs	r2, #0
 8003072:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003076:	6878      	ldr	r0, [r7, #4]
 8003078:	f7fd fb8a 	bl	8000790 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	2202      	movs	r2, #2
 8003080:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	681a      	ldr	r2, [r3, #0]
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003092:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	68db      	ldr	r3, [r3, #12]
 8003098:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800309c:	d902      	bls.n	80030a4 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800309e:	2300      	movs	r3, #0
 80030a0:	60fb      	str	r3, [r7, #12]
 80030a2:	e002      	b.n	80030aa <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80030a4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80030a8:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	68db      	ldr	r3, [r3, #12]
 80030ae:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80030b2:	d007      	beq.n	80030c4 <HAL_SPI_Init+0xa0>
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	68db      	ldr	r3, [r3, #12]
 80030b8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80030bc:	d002      	beq.n	80030c4 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	2200      	movs	r2, #0
 80030c2:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	685b      	ldr	r3, [r3, #4]
 80030c8:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	689b      	ldr	r3, [r3, #8]
 80030d0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80030d4:	431a      	orrs	r2, r3
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	691b      	ldr	r3, [r3, #16]
 80030da:	f003 0302 	and.w	r3, r3, #2
 80030de:	431a      	orrs	r2, r3
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	695b      	ldr	r3, [r3, #20]
 80030e4:	f003 0301 	and.w	r3, r3, #1
 80030e8:	431a      	orrs	r2, r3
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	699b      	ldr	r3, [r3, #24]
 80030ee:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80030f2:	431a      	orrs	r2, r3
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	69db      	ldr	r3, [r3, #28]
 80030f8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80030fc:	431a      	orrs	r2, r3
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	6a1b      	ldr	r3, [r3, #32]
 8003102:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003106:	ea42 0103 	orr.w	r1, r2, r3
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800310e:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	430a      	orrs	r2, r1
 8003118:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	699b      	ldr	r3, [r3, #24]
 800311e:	0c1b      	lsrs	r3, r3, #16
 8003120:	f003 0204 	and.w	r2, r3, #4
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003128:	f003 0310 	and.w	r3, r3, #16
 800312c:	431a      	orrs	r2, r3
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003132:	f003 0308 	and.w	r3, r3, #8
 8003136:	431a      	orrs	r2, r3
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	68db      	ldr	r3, [r3, #12]
 800313c:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8003140:	ea42 0103 	orr.w	r1, r2, r3
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	430a      	orrs	r2, r1
 8003150:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	69da      	ldr	r2, [r3, #28]
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003160:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	2200      	movs	r2, #0
 8003166:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	2201      	movs	r2, #1
 800316c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8003170:	2300      	movs	r3, #0
}
 8003172:	4618      	mov	r0, r3
 8003174:	3710      	adds	r7, #16
 8003176:	46bd      	mov	sp, r7
 8003178:	bd80      	pop	{r7, pc}

0800317a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800317a:	b580      	push	{r7, lr}
 800317c:	b088      	sub	sp, #32
 800317e:	af00      	add	r7, sp, #0
 8003180:	60f8      	str	r0, [r7, #12]
 8003182:	60b9      	str	r1, [r7, #8]
 8003184:	603b      	str	r3, [r7, #0]
 8003186:	4613      	mov	r3, r2
 8003188:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800318a:	2300      	movs	r3, #0
 800318c:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8003194:	2b01      	cmp	r3, #1
 8003196:	d101      	bne.n	800319c <HAL_SPI_Transmit+0x22>
 8003198:	2302      	movs	r3, #2
 800319a:	e15f      	b.n	800345c <HAL_SPI_Transmit+0x2e2>
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	2201      	movs	r2, #1
 80031a0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80031a4:	f7fd fd88 	bl	8000cb8 <HAL_GetTick>
 80031a8:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80031aa:	88fb      	ldrh	r3, [r7, #6]
 80031ac:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80031b4:	b2db      	uxtb	r3, r3
 80031b6:	2b01      	cmp	r3, #1
 80031b8:	d002      	beq.n	80031c0 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80031ba:	2302      	movs	r3, #2
 80031bc:	77fb      	strb	r3, [r7, #31]
    goto error;
 80031be:	e148      	b.n	8003452 <HAL_SPI_Transmit+0x2d8>
  }

  if ((pData == NULL) || (Size == 0U))
 80031c0:	68bb      	ldr	r3, [r7, #8]
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d002      	beq.n	80031cc <HAL_SPI_Transmit+0x52>
 80031c6:	88fb      	ldrh	r3, [r7, #6]
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d102      	bne.n	80031d2 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80031cc:	2301      	movs	r3, #1
 80031ce:	77fb      	strb	r3, [r7, #31]
    goto error;
 80031d0:	e13f      	b.n	8003452 <HAL_SPI_Transmit+0x2d8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	2203      	movs	r2, #3
 80031d6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	2200      	movs	r2, #0
 80031de:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	68ba      	ldr	r2, [r7, #8]
 80031e4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	88fa      	ldrh	r2, [r7, #6]
 80031ea:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	88fa      	ldrh	r2, [r7, #6]
 80031f0:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	2200      	movs	r2, #0
 80031f6:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	2200      	movs	r2, #0
 80031fc:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	2200      	movs	r2, #0
 8003204:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	2200      	movs	r2, #0
 800320c:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	2200      	movs	r2, #0
 8003212:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	689b      	ldr	r3, [r3, #8]
 8003218:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800321c:	d10f      	bne.n	800323e <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	681a      	ldr	r2, [r3, #0]
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800322c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	681a      	ldr	r2, [r3, #0]
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800323c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003248:	2b40      	cmp	r3, #64	; 0x40
 800324a:	d007      	beq.n	800325c <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	681a      	ldr	r2, [r3, #0]
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800325a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	68db      	ldr	r3, [r3, #12]
 8003260:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003264:	d94f      	bls.n	8003306 <HAL_SPI_Transmit+0x18c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	685b      	ldr	r3, [r3, #4]
 800326a:	2b00      	cmp	r3, #0
 800326c:	d002      	beq.n	8003274 <HAL_SPI_Transmit+0xfa>
 800326e:	8afb      	ldrh	r3, [r7, #22]
 8003270:	2b01      	cmp	r3, #1
 8003272:	d142      	bne.n	80032fa <HAL_SPI_Transmit+0x180>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003278:	881a      	ldrh	r2, [r3, #0]
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003284:	1c9a      	adds	r2, r3, #2
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800328e:	b29b      	uxth	r3, r3
 8003290:	3b01      	subs	r3, #1
 8003292:	b29a      	uxth	r2, r3
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003298:	e02f      	b.n	80032fa <HAL_SPI_Transmit+0x180>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	689b      	ldr	r3, [r3, #8]
 80032a0:	f003 0302 	and.w	r3, r3, #2
 80032a4:	2b02      	cmp	r3, #2
 80032a6:	d112      	bne.n	80032ce <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032ac:	881a      	ldrh	r2, [r3, #0]
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032b8:	1c9a      	adds	r2, r3, #2
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80032c2:	b29b      	uxth	r3, r3
 80032c4:	3b01      	subs	r3, #1
 80032c6:	b29a      	uxth	r2, r3
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	87da      	strh	r2, [r3, #62]	; 0x3e
 80032cc:	e015      	b.n	80032fa <HAL_SPI_Transmit+0x180>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80032ce:	f7fd fcf3 	bl	8000cb8 <HAL_GetTick>
 80032d2:	4602      	mov	r2, r0
 80032d4:	69bb      	ldr	r3, [r7, #24]
 80032d6:	1ad3      	subs	r3, r2, r3
 80032d8:	683a      	ldr	r2, [r7, #0]
 80032da:	429a      	cmp	r2, r3
 80032dc:	d803      	bhi.n	80032e6 <HAL_SPI_Transmit+0x16c>
 80032de:	683b      	ldr	r3, [r7, #0]
 80032e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032e4:	d102      	bne.n	80032ec <HAL_SPI_Transmit+0x172>
 80032e6:	683b      	ldr	r3, [r7, #0]
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d106      	bne.n	80032fa <HAL_SPI_Transmit+0x180>
        {
          errorcode = HAL_TIMEOUT;
 80032ec:	2303      	movs	r3, #3
 80032ee:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	2201      	movs	r2, #1
 80032f4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 80032f8:	e0ab      	b.n	8003452 <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80032fe:	b29b      	uxth	r3, r3
 8003300:	2b00      	cmp	r3, #0
 8003302:	d1ca      	bne.n	800329a <HAL_SPI_Transmit+0x120>
 8003304:	e080      	b.n	8003408 <HAL_SPI_Transmit+0x28e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	685b      	ldr	r3, [r3, #4]
 800330a:	2b00      	cmp	r3, #0
 800330c:	d002      	beq.n	8003314 <HAL_SPI_Transmit+0x19a>
 800330e:	8afb      	ldrh	r3, [r7, #22]
 8003310:	2b01      	cmp	r3, #1
 8003312:	d174      	bne.n	80033fe <HAL_SPI_Transmit+0x284>
    {
      if (hspi->TxXferCount > 1U)
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003318:	b29b      	uxth	r3, r3
 800331a:	2b01      	cmp	r3, #1
 800331c:	d912      	bls.n	8003344 <HAL_SPI_Transmit+0x1ca>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003322:	881a      	ldrh	r2, [r3, #0]
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800332e:	1c9a      	adds	r2, r3, #2
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003338:	b29b      	uxth	r3, r3
 800333a:	3b02      	subs	r3, #2
 800333c:	b29a      	uxth	r2, r3
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003342:	e05c      	b.n	80033fe <HAL_SPI_Transmit+0x284>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	330c      	adds	r3, #12
 800334e:	7812      	ldrb	r2, [r2, #0]
 8003350:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003356:	1c5a      	adds	r2, r3, #1
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003360:	b29b      	uxth	r3, r3
 8003362:	3b01      	subs	r3, #1
 8003364:	b29a      	uxth	r2, r3
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 800336a:	e048      	b.n	80033fe <HAL_SPI_Transmit+0x284>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	689b      	ldr	r3, [r3, #8]
 8003372:	f003 0302 	and.w	r3, r3, #2
 8003376:	2b02      	cmp	r3, #2
 8003378:	d12b      	bne.n	80033d2 <HAL_SPI_Transmit+0x258>
      {
        if (hspi->TxXferCount > 1U)
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800337e:	b29b      	uxth	r3, r3
 8003380:	2b01      	cmp	r3, #1
 8003382:	d912      	bls.n	80033aa <HAL_SPI_Transmit+0x230>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003388:	881a      	ldrh	r2, [r3, #0]
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003394:	1c9a      	adds	r2, r3, #2
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800339e:	b29b      	uxth	r3, r3
 80033a0:	3b02      	subs	r3, #2
 80033a2:	b29a      	uxth	r2, r3
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	87da      	strh	r2, [r3, #62]	; 0x3e
 80033a8:	e029      	b.n	80033fe <HAL_SPI_Transmit+0x284>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	330c      	adds	r3, #12
 80033b4:	7812      	ldrb	r2, [r2, #0]
 80033b6:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033bc:	1c5a      	adds	r2, r3, #1
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80033c6:	b29b      	uxth	r3, r3
 80033c8:	3b01      	subs	r3, #1
 80033ca:	b29a      	uxth	r2, r3
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	87da      	strh	r2, [r3, #62]	; 0x3e
 80033d0:	e015      	b.n	80033fe <HAL_SPI_Transmit+0x284>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80033d2:	f7fd fc71 	bl	8000cb8 <HAL_GetTick>
 80033d6:	4602      	mov	r2, r0
 80033d8:	69bb      	ldr	r3, [r7, #24]
 80033da:	1ad3      	subs	r3, r2, r3
 80033dc:	683a      	ldr	r2, [r7, #0]
 80033de:	429a      	cmp	r2, r3
 80033e0:	d803      	bhi.n	80033ea <HAL_SPI_Transmit+0x270>
 80033e2:	683b      	ldr	r3, [r7, #0]
 80033e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033e8:	d102      	bne.n	80033f0 <HAL_SPI_Transmit+0x276>
 80033ea:	683b      	ldr	r3, [r7, #0]
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d106      	bne.n	80033fe <HAL_SPI_Transmit+0x284>
        {
          errorcode = HAL_TIMEOUT;
 80033f0:	2303      	movs	r3, #3
 80033f2:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	2201      	movs	r2, #1
 80033f8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 80033fc:	e029      	b.n	8003452 <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003402:	b29b      	uxth	r3, r3
 8003404:	2b00      	cmp	r3, #0
 8003406:	d1b1      	bne.n	800336c <HAL_SPI_Transmit+0x1f2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003408:	69ba      	ldr	r2, [r7, #24]
 800340a:	6839      	ldr	r1, [r7, #0]
 800340c:	68f8      	ldr	r0, [r7, #12]
 800340e:	f000 fb69 	bl	8003ae4 <SPI_EndRxTxTransaction>
 8003412:	4603      	mov	r3, r0
 8003414:	2b00      	cmp	r3, #0
 8003416:	d002      	beq.n	800341e <HAL_SPI_Transmit+0x2a4>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	2220      	movs	r2, #32
 800341c:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	689b      	ldr	r3, [r3, #8]
 8003422:	2b00      	cmp	r3, #0
 8003424:	d10a      	bne.n	800343c <HAL_SPI_Transmit+0x2c2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003426:	2300      	movs	r3, #0
 8003428:	613b      	str	r3, [r7, #16]
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	68db      	ldr	r3, [r3, #12]
 8003430:	613b      	str	r3, [r7, #16]
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	689b      	ldr	r3, [r3, #8]
 8003438:	613b      	str	r3, [r7, #16]
 800343a:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003440:	2b00      	cmp	r3, #0
 8003442:	d002      	beq.n	800344a <HAL_SPI_Transmit+0x2d0>
  {
    errorcode = HAL_ERROR;
 8003444:	2301      	movs	r3, #1
 8003446:	77fb      	strb	r3, [r7, #31]
 8003448:	e003      	b.n	8003452 <HAL_SPI_Transmit+0x2d8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	2201      	movs	r2, #1
 800344e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	2200      	movs	r2, #0
 8003456:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800345a:	7ffb      	ldrb	r3, [r7, #31]
}
 800345c:	4618      	mov	r0, r3
 800345e:	3720      	adds	r7, #32
 8003460:	46bd      	mov	sp, r7
 8003462:	bd80      	pop	{r7, pc}

08003464 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8003464:	b580      	push	{r7, lr}
 8003466:	b08a      	sub	sp, #40	; 0x28
 8003468:	af00      	add	r7, sp, #0
 800346a:	60f8      	str	r0, [r7, #12]
 800346c:	60b9      	str	r1, [r7, #8]
 800346e:	607a      	str	r2, [r7, #4]
 8003470:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003472:	2301      	movs	r3, #1
 8003474:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8003476:	2300      	movs	r3, #0
 8003478:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8003482:	2b01      	cmp	r3, #1
 8003484:	d101      	bne.n	800348a <HAL_SPI_TransmitReceive+0x26>
 8003486:	2302      	movs	r3, #2
 8003488:	e20a      	b.n	80038a0 <HAL_SPI_TransmitReceive+0x43c>
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	2201      	movs	r2, #1
 800348e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003492:	f7fd fc11 	bl	8000cb8 <HAL_GetTick>
 8003496:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800349e:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	685b      	ldr	r3, [r3, #4]
 80034a4:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 80034a6:	887b      	ldrh	r3, [r7, #2]
 80034a8:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 80034aa:	887b      	ldrh	r3, [r7, #2]
 80034ac:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80034ae:	7efb      	ldrb	r3, [r7, #27]
 80034b0:	2b01      	cmp	r3, #1
 80034b2:	d00e      	beq.n	80034d2 <HAL_SPI_TransmitReceive+0x6e>
 80034b4:	697b      	ldr	r3, [r7, #20]
 80034b6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80034ba:	d106      	bne.n	80034ca <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	689b      	ldr	r3, [r3, #8]
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d102      	bne.n	80034ca <HAL_SPI_TransmitReceive+0x66>
 80034c4:	7efb      	ldrb	r3, [r7, #27]
 80034c6:	2b04      	cmp	r3, #4
 80034c8:	d003      	beq.n	80034d2 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 80034ca:	2302      	movs	r3, #2
 80034cc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 80034d0:	e1e0      	b.n	8003894 <HAL_SPI_TransmitReceive+0x430>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80034d2:	68bb      	ldr	r3, [r7, #8]
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d005      	beq.n	80034e4 <HAL_SPI_TransmitReceive+0x80>
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d002      	beq.n	80034e4 <HAL_SPI_TransmitReceive+0x80>
 80034de:	887b      	ldrh	r3, [r7, #2]
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d103      	bne.n	80034ec <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 80034e4:	2301      	movs	r3, #1
 80034e6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 80034ea:	e1d3      	b.n	8003894 <HAL_SPI_TransmitReceive+0x430>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80034f2:	b2db      	uxtb	r3, r3
 80034f4:	2b04      	cmp	r3, #4
 80034f6:	d003      	beq.n	8003500 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	2205      	movs	r2, #5
 80034fc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	2200      	movs	r2, #0
 8003504:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	687a      	ldr	r2, [r7, #4]
 800350a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	887a      	ldrh	r2, [r7, #2]
 8003510:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	887a      	ldrh	r2, [r7, #2]
 8003518:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	68ba      	ldr	r2, [r7, #8]
 8003520:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	887a      	ldrh	r2, [r7, #2]
 8003526:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	887a      	ldrh	r2, [r7, #2]
 800352c:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	2200      	movs	r2, #0
 8003532:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	2200      	movs	r2, #0
 8003538:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	68db      	ldr	r3, [r3, #12]
 800353e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003542:	d802      	bhi.n	800354a <HAL_SPI_TransmitReceive+0xe6>
 8003544:	8a3b      	ldrh	r3, [r7, #16]
 8003546:	2b01      	cmp	r3, #1
 8003548:	d908      	bls.n	800355c <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	685a      	ldr	r2, [r3, #4]
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003558:	605a      	str	r2, [r3, #4]
 800355a:	e007      	b.n	800356c <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	685a      	ldr	r2, [r3, #4]
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800356a:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003576:	2b40      	cmp	r3, #64	; 0x40
 8003578:	d007      	beq.n	800358a <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	681a      	ldr	r2, [r3, #0]
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003588:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	68db      	ldr	r3, [r3, #12]
 800358e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003592:	f240 8081 	bls.w	8003698 <HAL_SPI_TransmitReceive+0x234>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	685b      	ldr	r3, [r3, #4]
 800359a:	2b00      	cmp	r3, #0
 800359c:	d002      	beq.n	80035a4 <HAL_SPI_TransmitReceive+0x140>
 800359e:	8a7b      	ldrh	r3, [r7, #18]
 80035a0:	2b01      	cmp	r3, #1
 80035a2:	d16d      	bne.n	8003680 <HAL_SPI_TransmitReceive+0x21c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035a8:	881a      	ldrh	r2, [r3, #0]
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035b4:	1c9a      	adds	r2, r3, #2
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80035be:	b29b      	uxth	r3, r3
 80035c0:	3b01      	subs	r3, #1
 80035c2:	b29a      	uxth	r2, r3
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80035c8:	e05a      	b.n	8003680 <HAL_SPI_TransmitReceive+0x21c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	689b      	ldr	r3, [r3, #8]
 80035d0:	f003 0302 	and.w	r3, r3, #2
 80035d4:	2b02      	cmp	r3, #2
 80035d6:	d11b      	bne.n	8003610 <HAL_SPI_TransmitReceive+0x1ac>
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80035dc:	b29b      	uxth	r3, r3
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d016      	beq.n	8003610 <HAL_SPI_TransmitReceive+0x1ac>
 80035e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035e4:	2b01      	cmp	r3, #1
 80035e6:	d113      	bne.n	8003610 <HAL_SPI_TransmitReceive+0x1ac>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035ec:	881a      	ldrh	r2, [r3, #0]
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035f8:	1c9a      	adds	r2, r3, #2
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003602:	b29b      	uxth	r3, r3
 8003604:	3b01      	subs	r3, #1
 8003606:	b29a      	uxth	r2, r3
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800360c:	2300      	movs	r3, #0
 800360e:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	689b      	ldr	r3, [r3, #8]
 8003616:	f003 0301 	and.w	r3, r3, #1
 800361a:	2b01      	cmp	r3, #1
 800361c:	d11c      	bne.n	8003658 <HAL_SPI_TransmitReceive+0x1f4>
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003624:	b29b      	uxth	r3, r3
 8003626:	2b00      	cmp	r3, #0
 8003628:	d016      	beq.n	8003658 <HAL_SPI_TransmitReceive+0x1f4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	68da      	ldr	r2, [r3, #12]
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003634:	b292      	uxth	r2, r2
 8003636:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800363c:	1c9a      	adds	r2, r3, #2
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003648:	b29b      	uxth	r3, r3
 800364a:	3b01      	subs	r3, #1
 800364c:	b29a      	uxth	r2, r3
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003654:	2301      	movs	r3, #1
 8003656:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003658:	f7fd fb2e 	bl	8000cb8 <HAL_GetTick>
 800365c:	4602      	mov	r2, r0
 800365e:	69fb      	ldr	r3, [r7, #28]
 8003660:	1ad3      	subs	r3, r2, r3
 8003662:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003664:	429a      	cmp	r2, r3
 8003666:	d80b      	bhi.n	8003680 <HAL_SPI_TransmitReceive+0x21c>
 8003668:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800366a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800366e:	d007      	beq.n	8003680 <HAL_SPI_TransmitReceive+0x21c>
      {
        errorcode = HAL_TIMEOUT;
 8003670:	2303      	movs	r3, #3
 8003672:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        hspi->State = HAL_SPI_STATE_READY;
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	2201      	movs	r2, #1
 800367a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        goto error;
 800367e:	e109      	b.n	8003894 <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003684:	b29b      	uxth	r3, r3
 8003686:	2b00      	cmp	r3, #0
 8003688:	d19f      	bne.n	80035ca <HAL_SPI_TransmitReceive+0x166>
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003690:	b29b      	uxth	r3, r3
 8003692:	2b00      	cmp	r3, #0
 8003694:	d199      	bne.n	80035ca <HAL_SPI_TransmitReceive+0x166>
 8003696:	e0e3      	b.n	8003860 <HAL_SPI_TransmitReceive+0x3fc>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	685b      	ldr	r3, [r3, #4]
 800369c:	2b00      	cmp	r3, #0
 800369e:	d003      	beq.n	80036a8 <HAL_SPI_TransmitReceive+0x244>
 80036a0:	8a7b      	ldrh	r3, [r7, #18]
 80036a2:	2b01      	cmp	r3, #1
 80036a4:	f040 80cf 	bne.w	8003846 <HAL_SPI_TransmitReceive+0x3e2>
    {
      if (hspi->TxXferCount > 1U)
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80036ac:	b29b      	uxth	r3, r3
 80036ae:	2b01      	cmp	r3, #1
 80036b0:	d912      	bls.n	80036d8 <HAL_SPI_TransmitReceive+0x274>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036b6:	881a      	ldrh	r2, [r3, #0]
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036c2:	1c9a      	adds	r2, r3, #2
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80036cc:	b29b      	uxth	r3, r3
 80036ce:	3b02      	subs	r3, #2
 80036d0:	b29a      	uxth	r2, r3
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	87da      	strh	r2, [r3, #62]	; 0x3e
 80036d6:	e0b6      	b.n	8003846 <HAL_SPI_TransmitReceive+0x3e2>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	330c      	adds	r3, #12
 80036e2:	7812      	ldrb	r2, [r2, #0]
 80036e4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036ea:	1c5a      	adds	r2, r3, #1
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80036f4:	b29b      	uxth	r3, r3
 80036f6:	3b01      	subs	r3, #1
 80036f8:	b29a      	uxth	r2, r3
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80036fe:	e0a2      	b.n	8003846 <HAL_SPI_TransmitReceive+0x3e2>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	689b      	ldr	r3, [r3, #8]
 8003706:	f003 0302 	and.w	r3, r3, #2
 800370a:	2b02      	cmp	r3, #2
 800370c:	d134      	bne.n	8003778 <HAL_SPI_TransmitReceive+0x314>
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003712:	b29b      	uxth	r3, r3
 8003714:	2b00      	cmp	r3, #0
 8003716:	d02f      	beq.n	8003778 <HAL_SPI_TransmitReceive+0x314>
 8003718:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800371a:	2b01      	cmp	r3, #1
 800371c:	d12c      	bne.n	8003778 <HAL_SPI_TransmitReceive+0x314>
      {
        if (hspi->TxXferCount > 1U)
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003722:	b29b      	uxth	r3, r3
 8003724:	2b01      	cmp	r3, #1
 8003726:	d912      	bls.n	800374e <HAL_SPI_TransmitReceive+0x2ea>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800372c:	881a      	ldrh	r2, [r3, #0]
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003738:	1c9a      	adds	r2, r3, #2
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003742:	b29b      	uxth	r3, r3
 8003744:	3b02      	subs	r3, #2
 8003746:	b29a      	uxth	r2, r3
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800374c:	e012      	b.n	8003774 <HAL_SPI_TransmitReceive+0x310>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	330c      	adds	r3, #12
 8003758:	7812      	ldrb	r2, [r2, #0]
 800375a:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003760:	1c5a      	adds	r2, r3, #1
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800376a:	b29b      	uxth	r3, r3
 800376c:	3b01      	subs	r3, #1
 800376e:	b29a      	uxth	r2, r3
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003774:	2300      	movs	r3, #0
 8003776:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	689b      	ldr	r3, [r3, #8]
 800377e:	f003 0301 	and.w	r3, r3, #1
 8003782:	2b01      	cmp	r3, #1
 8003784:	d148      	bne.n	8003818 <HAL_SPI_TransmitReceive+0x3b4>
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800378c:	b29b      	uxth	r3, r3
 800378e:	2b00      	cmp	r3, #0
 8003790:	d042      	beq.n	8003818 <HAL_SPI_TransmitReceive+0x3b4>
      {
        if (hspi->RxXferCount > 1U)
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003798:	b29b      	uxth	r3, r3
 800379a:	2b01      	cmp	r3, #1
 800379c:	d923      	bls.n	80037e6 <HAL_SPI_TransmitReceive+0x382>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	68da      	ldr	r2, [r3, #12]
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037a8:	b292      	uxth	r2, r2
 80037aa:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037b0:	1c9a      	adds	r2, r3, #2
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80037bc:	b29b      	uxth	r3, r3
 80037be:	3b02      	subs	r3, #2
 80037c0:	b29a      	uxth	r2, r3
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80037ce:	b29b      	uxth	r3, r3
 80037d0:	2b01      	cmp	r3, #1
 80037d2:	d81f      	bhi.n	8003814 <HAL_SPI_TransmitReceive+0x3b0>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	685a      	ldr	r2, [r3, #4]
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80037e2:	605a      	str	r2, [r3, #4]
 80037e4:	e016      	b.n	8003814 <HAL_SPI_TransmitReceive+0x3b0>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	f103 020c 	add.w	r2, r3, #12
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037f2:	7812      	ldrb	r2, [r2, #0]
 80037f4:	b2d2      	uxtb	r2, r2
 80037f6:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037fc:	1c5a      	adds	r2, r3, #1
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003808:	b29b      	uxth	r3, r3
 800380a:	3b01      	subs	r3, #1
 800380c:	b29a      	uxth	r2, r3
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003814:	2301      	movs	r3, #1
 8003816:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003818:	f7fd fa4e 	bl	8000cb8 <HAL_GetTick>
 800381c:	4602      	mov	r2, r0
 800381e:	69fb      	ldr	r3, [r7, #28]
 8003820:	1ad3      	subs	r3, r2, r3
 8003822:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003824:	429a      	cmp	r2, r3
 8003826:	d803      	bhi.n	8003830 <HAL_SPI_TransmitReceive+0x3cc>
 8003828:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800382a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800382e:	d102      	bne.n	8003836 <HAL_SPI_TransmitReceive+0x3d2>
 8003830:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003832:	2b00      	cmp	r3, #0
 8003834:	d107      	bne.n	8003846 <HAL_SPI_TransmitReceive+0x3e2>
      {
        errorcode = HAL_TIMEOUT;
 8003836:	2303      	movs	r3, #3
 8003838:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        hspi->State = HAL_SPI_STATE_READY;
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	2201      	movs	r2, #1
 8003840:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        goto error;
 8003844:	e026      	b.n	8003894 <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800384a:	b29b      	uxth	r3, r3
 800384c:	2b00      	cmp	r3, #0
 800384e:	f47f af57 	bne.w	8003700 <HAL_SPI_TransmitReceive+0x29c>
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003858:	b29b      	uxth	r3, r3
 800385a:	2b00      	cmp	r3, #0
 800385c:	f47f af50 	bne.w	8003700 <HAL_SPI_TransmitReceive+0x29c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003860:	69fa      	ldr	r2, [r7, #28]
 8003862:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003864:	68f8      	ldr	r0, [r7, #12]
 8003866:	f000 f93d 	bl	8003ae4 <SPI_EndRxTxTransaction>
 800386a:	4603      	mov	r3, r0
 800386c:	2b00      	cmp	r3, #0
 800386e:	d005      	beq.n	800387c <HAL_SPI_TransmitReceive+0x418>
  {
    errorcode = HAL_ERROR;
 8003870:	2301      	movs	r3, #1
 8003872:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	2220      	movs	r2, #32
 800387a:	661a      	str	r2, [r3, #96]	; 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003880:	2b00      	cmp	r3, #0
 8003882:	d003      	beq.n	800388c <HAL_SPI_TransmitReceive+0x428>
  {
    errorcode = HAL_ERROR;
 8003884:	2301      	movs	r3, #1
 8003886:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800388a:	e003      	b.n	8003894 <HAL_SPI_TransmitReceive+0x430>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	2201      	movs	r2, #1
 8003890:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }
  
error :
  __HAL_UNLOCK(hspi);
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	2200      	movs	r2, #0
 8003898:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800389c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 80038a0:	4618      	mov	r0, r3
 80038a2:	3728      	adds	r7, #40	; 0x28
 80038a4:	46bd      	mov	sp, r7
 80038a6:	bd80      	pop	{r7, pc}

080038a8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80038a8:	b580      	push	{r7, lr}
 80038aa:	b088      	sub	sp, #32
 80038ac:	af00      	add	r7, sp, #0
 80038ae:	60f8      	str	r0, [r7, #12]
 80038b0:	60b9      	str	r1, [r7, #8]
 80038b2:	603b      	str	r3, [r7, #0]
 80038b4:	4613      	mov	r3, r2
 80038b6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80038b8:	f7fd f9fe 	bl	8000cb8 <HAL_GetTick>
 80038bc:	4602      	mov	r2, r0
 80038be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038c0:	1a9b      	subs	r3, r3, r2
 80038c2:	683a      	ldr	r2, [r7, #0]
 80038c4:	4413      	add	r3, r2
 80038c6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80038c8:	f7fd f9f6 	bl	8000cb8 <HAL_GetTick>
 80038cc:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80038ce:	4b39      	ldr	r3, [pc, #228]	; (80039b4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	015b      	lsls	r3, r3, #5
 80038d4:	0d1b      	lsrs	r3, r3, #20
 80038d6:	69fa      	ldr	r2, [r7, #28]
 80038d8:	fb02 f303 	mul.w	r3, r2, r3
 80038dc:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80038de:	e054      	b.n	800398a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80038e0:	683b      	ldr	r3, [r7, #0]
 80038e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038e6:	d050      	beq.n	800398a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80038e8:	f7fd f9e6 	bl	8000cb8 <HAL_GetTick>
 80038ec:	4602      	mov	r2, r0
 80038ee:	69bb      	ldr	r3, [r7, #24]
 80038f0:	1ad3      	subs	r3, r2, r3
 80038f2:	69fa      	ldr	r2, [r7, #28]
 80038f4:	429a      	cmp	r2, r3
 80038f6:	d902      	bls.n	80038fe <SPI_WaitFlagStateUntilTimeout+0x56>
 80038f8:	69fb      	ldr	r3, [r7, #28]
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d13d      	bne.n	800397a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	685a      	ldr	r2, [r3, #4]
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800390c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	685b      	ldr	r3, [r3, #4]
 8003912:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003916:	d111      	bne.n	800393c <SPI_WaitFlagStateUntilTimeout+0x94>
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	689b      	ldr	r3, [r3, #8]
 800391c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003920:	d004      	beq.n	800392c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	689b      	ldr	r3, [r3, #8]
 8003926:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800392a:	d107      	bne.n	800393c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	681a      	ldr	r2, [r3, #0]
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800393a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003940:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003944:	d10f      	bne.n	8003966 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	681a      	ldr	r2, [r3, #0]
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003954:	601a      	str	r2, [r3, #0]
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	681a      	ldr	r2, [r3, #0]
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003964:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	2201      	movs	r2, #1
 800396a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	2200      	movs	r2, #0
 8003972:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8003976:	2303      	movs	r3, #3
 8003978:	e017      	b.n	80039aa <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800397a:	697b      	ldr	r3, [r7, #20]
 800397c:	2b00      	cmp	r3, #0
 800397e:	d101      	bne.n	8003984 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003980:	2300      	movs	r3, #0
 8003982:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003984:	697b      	ldr	r3, [r7, #20]
 8003986:	3b01      	subs	r3, #1
 8003988:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	689a      	ldr	r2, [r3, #8]
 8003990:	68bb      	ldr	r3, [r7, #8]
 8003992:	4013      	ands	r3, r2
 8003994:	68ba      	ldr	r2, [r7, #8]
 8003996:	429a      	cmp	r2, r3
 8003998:	bf0c      	ite	eq
 800399a:	2301      	moveq	r3, #1
 800399c:	2300      	movne	r3, #0
 800399e:	b2db      	uxtb	r3, r3
 80039a0:	461a      	mov	r2, r3
 80039a2:	79fb      	ldrb	r3, [r7, #7]
 80039a4:	429a      	cmp	r2, r3
 80039a6:	d19b      	bne.n	80038e0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80039a8:	2300      	movs	r3, #0
}
 80039aa:	4618      	mov	r0, r3
 80039ac:	3720      	adds	r7, #32
 80039ae:	46bd      	mov	sp, r7
 80039b0:	bd80      	pop	{r7, pc}
 80039b2:	bf00      	nop
 80039b4:	20000000 	.word	0x20000000

080039b8 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80039b8:	b580      	push	{r7, lr}
 80039ba:	b08a      	sub	sp, #40	; 0x28
 80039bc:	af00      	add	r7, sp, #0
 80039be:	60f8      	str	r0, [r7, #12]
 80039c0:	60b9      	str	r1, [r7, #8]
 80039c2:	607a      	str	r2, [r7, #4]
 80039c4:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80039c6:	2300      	movs	r3, #0
 80039c8:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80039ca:	f7fd f975 	bl	8000cb8 <HAL_GetTick>
 80039ce:	4602      	mov	r2, r0
 80039d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039d2:	1a9b      	subs	r3, r3, r2
 80039d4:	683a      	ldr	r2, [r7, #0]
 80039d6:	4413      	add	r3, r2
 80039d8:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 80039da:	f7fd f96d 	bl	8000cb8 <HAL_GetTick>
 80039de:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	330c      	adds	r3, #12
 80039e6:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80039e8:	4b3d      	ldr	r3, [pc, #244]	; (8003ae0 <SPI_WaitFifoStateUntilTimeout+0x128>)
 80039ea:	681a      	ldr	r2, [r3, #0]
 80039ec:	4613      	mov	r3, r2
 80039ee:	009b      	lsls	r3, r3, #2
 80039f0:	4413      	add	r3, r2
 80039f2:	00da      	lsls	r2, r3, #3
 80039f4:	1ad3      	subs	r3, r2, r3
 80039f6:	0d1b      	lsrs	r3, r3, #20
 80039f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80039fa:	fb02 f303 	mul.w	r3, r2, r3
 80039fe:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8003a00:	e060      	b.n	8003ac4 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8003a02:	68bb      	ldr	r3, [r7, #8]
 8003a04:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8003a08:	d107      	bne.n	8003a1a <SPI_WaitFifoStateUntilTimeout+0x62>
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d104      	bne.n	8003a1a <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8003a10:	69fb      	ldr	r3, [r7, #28]
 8003a12:	781b      	ldrb	r3, [r3, #0]
 8003a14:	b2db      	uxtb	r3, r3
 8003a16:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8003a18:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8003a1a:	683b      	ldr	r3, [r7, #0]
 8003a1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a20:	d050      	beq.n	8003ac4 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003a22:	f7fd f949 	bl	8000cb8 <HAL_GetTick>
 8003a26:	4602      	mov	r2, r0
 8003a28:	6a3b      	ldr	r3, [r7, #32]
 8003a2a:	1ad3      	subs	r3, r2, r3
 8003a2c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a2e:	429a      	cmp	r2, r3
 8003a30:	d902      	bls.n	8003a38 <SPI_WaitFifoStateUntilTimeout+0x80>
 8003a32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d13d      	bne.n	8003ab4 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	685a      	ldr	r2, [r3, #4]
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003a46:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	685b      	ldr	r3, [r3, #4]
 8003a4c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003a50:	d111      	bne.n	8003a76 <SPI_WaitFifoStateUntilTimeout+0xbe>
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	689b      	ldr	r3, [r3, #8]
 8003a56:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003a5a:	d004      	beq.n	8003a66 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	689b      	ldr	r3, [r3, #8]
 8003a60:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003a64:	d107      	bne.n	8003a76 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	681a      	ldr	r2, [r3, #0]
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003a74:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a7a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003a7e:	d10f      	bne.n	8003aa0 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	681a      	ldr	r2, [r3, #0]
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003a8e:	601a      	str	r2, [r3, #0]
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	681a      	ldr	r2, [r3, #0]
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003a9e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	2201      	movs	r2, #1
 8003aa4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	2200      	movs	r2, #0
 8003aac:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8003ab0:	2303      	movs	r3, #3
 8003ab2:	e010      	b.n	8003ad6 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003ab4:	69bb      	ldr	r3, [r7, #24]
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d101      	bne.n	8003abe <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8003aba:	2300      	movs	r3, #0
 8003abc:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8003abe:	69bb      	ldr	r3, [r7, #24]
 8003ac0:	3b01      	subs	r3, #1
 8003ac2:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	689a      	ldr	r2, [r3, #8]
 8003aca:	68bb      	ldr	r3, [r7, #8]
 8003acc:	4013      	ands	r3, r2
 8003ace:	687a      	ldr	r2, [r7, #4]
 8003ad0:	429a      	cmp	r2, r3
 8003ad2:	d196      	bne.n	8003a02 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8003ad4:	2300      	movs	r3, #0
}
 8003ad6:	4618      	mov	r0, r3
 8003ad8:	3728      	adds	r7, #40	; 0x28
 8003ada:	46bd      	mov	sp, r7
 8003adc:	bd80      	pop	{r7, pc}
 8003ade:	bf00      	nop
 8003ae0:	20000000 	.word	0x20000000

08003ae4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003ae4:	b580      	push	{r7, lr}
 8003ae6:	b086      	sub	sp, #24
 8003ae8:	af02      	add	r7, sp, #8
 8003aea:	60f8      	str	r0, [r7, #12]
 8003aec:	60b9      	str	r1, [r7, #8]
 8003aee:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	9300      	str	r3, [sp, #0]
 8003af4:	68bb      	ldr	r3, [r7, #8]
 8003af6:	2200      	movs	r2, #0
 8003af8:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8003afc:	68f8      	ldr	r0, [r7, #12]
 8003afe:	f7ff ff5b 	bl	80039b8 <SPI_WaitFifoStateUntilTimeout>
 8003b02:	4603      	mov	r3, r0
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d007      	beq.n	8003b18 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003b0c:	f043 0220 	orr.w	r2, r3, #32
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003b14:	2303      	movs	r3, #3
 8003b16:	e027      	b.n	8003b68 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	9300      	str	r3, [sp, #0]
 8003b1c:	68bb      	ldr	r3, [r7, #8]
 8003b1e:	2200      	movs	r2, #0
 8003b20:	2180      	movs	r1, #128	; 0x80
 8003b22:	68f8      	ldr	r0, [r7, #12]
 8003b24:	f7ff fec0 	bl	80038a8 <SPI_WaitFlagStateUntilTimeout>
 8003b28:	4603      	mov	r3, r0
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d007      	beq.n	8003b3e <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003b32:	f043 0220 	orr.w	r2, r3, #32
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003b3a:	2303      	movs	r3, #3
 8003b3c:	e014      	b.n	8003b68 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	9300      	str	r3, [sp, #0]
 8003b42:	68bb      	ldr	r3, [r7, #8]
 8003b44:	2200      	movs	r2, #0
 8003b46:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8003b4a:	68f8      	ldr	r0, [r7, #12]
 8003b4c:	f7ff ff34 	bl	80039b8 <SPI_WaitFifoStateUntilTimeout>
 8003b50:	4603      	mov	r3, r0
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d007      	beq.n	8003b66 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003b5a:	f043 0220 	orr.w	r2, r3, #32
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003b62:	2303      	movs	r3, #3
 8003b64:	e000      	b.n	8003b68 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8003b66:	2300      	movs	r3, #0
}
 8003b68:	4618      	mov	r0, r3
 8003b6a:	3710      	adds	r7, #16
 8003b6c:	46bd      	mov	sp, r7
 8003b6e:	bd80      	pop	{r7, pc}

08003b70 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003b70:	b580      	push	{r7, lr}
 8003b72:	b082      	sub	sp, #8
 8003b74:	af00      	add	r7, sp, #0
 8003b76:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d101      	bne.n	8003b82 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003b7e:	2301      	movs	r3, #1
 8003b80:	e049      	b.n	8003c16 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b88:	b2db      	uxtb	r3, r3
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d106      	bne.n	8003b9c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	2200      	movs	r2, #0
 8003b92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003b96:	6878      	ldr	r0, [r7, #4]
 8003b98:	f000 f841 	bl	8003c1e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	2202      	movs	r2, #2
 8003ba0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681a      	ldr	r2, [r3, #0]
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	3304      	adds	r3, #4
 8003bac:	4619      	mov	r1, r3
 8003bae:	4610      	mov	r0, r2
 8003bb0:	f000 f9f8 	bl	8003fa4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	2201      	movs	r2, #1
 8003bb8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	2201      	movs	r2, #1
 8003bc0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	2201      	movs	r2, #1
 8003bc8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	2201      	movs	r2, #1
 8003bd0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	2201      	movs	r2, #1
 8003bd8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	2201      	movs	r2, #1
 8003be0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	2201      	movs	r2, #1
 8003be8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	2201      	movs	r2, #1
 8003bf0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	2201      	movs	r2, #1
 8003bf8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	2201      	movs	r2, #1
 8003c00:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	2201      	movs	r2, #1
 8003c08:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	2201      	movs	r2, #1
 8003c10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003c14:	2300      	movs	r3, #0
}
 8003c16:	4618      	mov	r0, r3
 8003c18:	3708      	adds	r7, #8
 8003c1a:	46bd      	mov	sp, r7
 8003c1c:	bd80      	pop	{r7, pc}

08003c1e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8003c1e:	b480      	push	{r7}
 8003c20:	b083      	sub	sp, #12
 8003c22:	af00      	add	r7, sp, #0
 8003c24:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8003c26:	bf00      	nop
 8003c28:	370c      	adds	r7, #12
 8003c2a:	46bd      	mov	sp, r7
 8003c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c30:	4770      	bx	lr
	...

08003c34 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003c34:	b480      	push	{r7}
 8003c36:	b085      	sub	sp, #20
 8003c38:	af00      	add	r7, sp, #0
 8003c3a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c42:	b2db      	uxtb	r3, r3
 8003c44:	2b01      	cmp	r3, #1
 8003c46:	d001      	beq.n	8003c4c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003c48:	2301      	movs	r3, #1
 8003c4a:	e04f      	b.n	8003cec <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	2202      	movs	r2, #2
 8003c50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	68da      	ldr	r2, [r3, #12]
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	f042 0201 	orr.w	r2, r2, #1
 8003c62:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	4a23      	ldr	r2, [pc, #140]	; (8003cf8 <HAL_TIM_Base_Start_IT+0xc4>)
 8003c6a:	4293      	cmp	r3, r2
 8003c6c:	d01d      	beq.n	8003caa <HAL_TIM_Base_Start_IT+0x76>
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c76:	d018      	beq.n	8003caa <HAL_TIM_Base_Start_IT+0x76>
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	4a1f      	ldr	r2, [pc, #124]	; (8003cfc <HAL_TIM_Base_Start_IT+0xc8>)
 8003c7e:	4293      	cmp	r3, r2
 8003c80:	d013      	beq.n	8003caa <HAL_TIM_Base_Start_IT+0x76>
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	4a1e      	ldr	r2, [pc, #120]	; (8003d00 <HAL_TIM_Base_Start_IT+0xcc>)
 8003c88:	4293      	cmp	r3, r2
 8003c8a:	d00e      	beq.n	8003caa <HAL_TIM_Base_Start_IT+0x76>
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	4a1c      	ldr	r2, [pc, #112]	; (8003d04 <HAL_TIM_Base_Start_IT+0xd0>)
 8003c92:	4293      	cmp	r3, r2
 8003c94:	d009      	beq.n	8003caa <HAL_TIM_Base_Start_IT+0x76>
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	4a1b      	ldr	r2, [pc, #108]	; (8003d08 <HAL_TIM_Base_Start_IT+0xd4>)
 8003c9c:	4293      	cmp	r3, r2
 8003c9e:	d004      	beq.n	8003caa <HAL_TIM_Base_Start_IT+0x76>
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	4a19      	ldr	r2, [pc, #100]	; (8003d0c <HAL_TIM_Base_Start_IT+0xd8>)
 8003ca6:	4293      	cmp	r3, r2
 8003ca8:	d115      	bne.n	8003cd6 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	689a      	ldr	r2, [r3, #8]
 8003cb0:	4b17      	ldr	r3, [pc, #92]	; (8003d10 <HAL_TIM_Base_Start_IT+0xdc>)
 8003cb2:	4013      	ands	r3, r2
 8003cb4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	2b06      	cmp	r3, #6
 8003cba:	d015      	beq.n	8003ce8 <HAL_TIM_Base_Start_IT+0xb4>
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003cc2:	d011      	beq.n	8003ce8 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	681a      	ldr	r2, [r3, #0]
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	f042 0201 	orr.w	r2, r2, #1
 8003cd2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003cd4:	e008      	b.n	8003ce8 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	681a      	ldr	r2, [r3, #0]
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	f042 0201 	orr.w	r2, r2, #1
 8003ce4:	601a      	str	r2, [r3, #0]
 8003ce6:	e000      	b.n	8003cea <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003ce8:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003cea:	2300      	movs	r3, #0
}
 8003cec:	4618      	mov	r0, r3
 8003cee:	3714      	adds	r7, #20
 8003cf0:	46bd      	mov	sp, r7
 8003cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf6:	4770      	bx	lr
 8003cf8:	40012c00 	.word	0x40012c00
 8003cfc:	40000400 	.word	0x40000400
 8003d00:	40000800 	.word	0x40000800
 8003d04:	40013400 	.word	0x40013400
 8003d08:	40014000 	.word	0x40014000
 8003d0c:	40015000 	.word	0x40015000
 8003d10:	00010007 	.word	0x00010007

08003d14 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003d14:	b580      	push	{r7, lr}
 8003d16:	b082      	sub	sp, #8
 8003d18:	af00      	add	r7, sp, #0
 8003d1a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	691b      	ldr	r3, [r3, #16]
 8003d22:	f003 0302 	and.w	r3, r3, #2
 8003d26:	2b02      	cmp	r3, #2
 8003d28:	d122      	bne.n	8003d70 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	68db      	ldr	r3, [r3, #12]
 8003d30:	f003 0302 	and.w	r3, r3, #2
 8003d34:	2b02      	cmp	r3, #2
 8003d36:	d11b      	bne.n	8003d70 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	f06f 0202 	mvn.w	r2, #2
 8003d40:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	2201      	movs	r2, #1
 8003d46:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	699b      	ldr	r3, [r3, #24]
 8003d4e:	f003 0303 	and.w	r3, r3, #3
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d003      	beq.n	8003d5e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003d56:	6878      	ldr	r0, [r7, #4]
 8003d58:	f000 f905 	bl	8003f66 <HAL_TIM_IC_CaptureCallback>
 8003d5c:	e005      	b.n	8003d6a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003d5e:	6878      	ldr	r0, [r7, #4]
 8003d60:	f000 f8f7 	bl	8003f52 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003d64:	6878      	ldr	r0, [r7, #4]
 8003d66:	f000 f908 	bl	8003f7a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	2200      	movs	r2, #0
 8003d6e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	691b      	ldr	r3, [r3, #16]
 8003d76:	f003 0304 	and.w	r3, r3, #4
 8003d7a:	2b04      	cmp	r3, #4
 8003d7c:	d122      	bne.n	8003dc4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	68db      	ldr	r3, [r3, #12]
 8003d84:	f003 0304 	and.w	r3, r3, #4
 8003d88:	2b04      	cmp	r3, #4
 8003d8a:	d11b      	bne.n	8003dc4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	f06f 0204 	mvn.w	r2, #4
 8003d94:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	2202      	movs	r2, #2
 8003d9a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	699b      	ldr	r3, [r3, #24]
 8003da2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d003      	beq.n	8003db2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003daa:	6878      	ldr	r0, [r7, #4]
 8003dac:	f000 f8db 	bl	8003f66 <HAL_TIM_IC_CaptureCallback>
 8003db0:	e005      	b.n	8003dbe <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003db2:	6878      	ldr	r0, [r7, #4]
 8003db4:	f000 f8cd 	bl	8003f52 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003db8:	6878      	ldr	r0, [r7, #4]
 8003dba:	f000 f8de 	bl	8003f7a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	2200      	movs	r2, #0
 8003dc2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	691b      	ldr	r3, [r3, #16]
 8003dca:	f003 0308 	and.w	r3, r3, #8
 8003dce:	2b08      	cmp	r3, #8
 8003dd0:	d122      	bne.n	8003e18 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	68db      	ldr	r3, [r3, #12]
 8003dd8:	f003 0308 	and.w	r3, r3, #8
 8003ddc:	2b08      	cmp	r3, #8
 8003dde:	d11b      	bne.n	8003e18 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	f06f 0208 	mvn.w	r2, #8
 8003de8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	2204      	movs	r2, #4
 8003dee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	69db      	ldr	r3, [r3, #28]
 8003df6:	f003 0303 	and.w	r3, r3, #3
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d003      	beq.n	8003e06 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003dfe:	6878      	ldr	r0, [r7, #4]
 8003e00:	f000 f8b1 	bl	8003f66 <HAL_TIM_IC_CaptureCallback>
 8003e04:	e005      	b.n	8003e12 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003e06:	6878      	ldr	r0, [r7, #4]
 8003e08:	f000 f8a3 	bl	8003f52 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003e0c:	6878      	ldr	r0, [r7, #4]
 8003e0e:	f000 f8b4 	bl	8003f7a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	2200      	movs	r2, #0
 8003e16:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	691b      	ldr	r3, [r3, #16]
 8003e1e:	f003 0310 	and.w	r3, r3, #16
 8003e22:	2b10      	cmp	r3, #16
 8003e24:	d122      	bne.n	8003e6c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	68db      	ldr	r3, [r3, #12]
 8003e2c:	f003 0310 	and.w	r3, r3, #16
 8003e30:	2b10      	cmp	r3, #16
 8003e32:	d11b      	bne.n	8003e6c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	f06f 0210 	mvn.w	r2, #16
 8003e3c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	2208      	movs	r2, #8
 8003e42:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	69db      	ldr	r3, [r3, #28]
 8003e4a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d003      	beq.n	8003e5a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003e52:	6878      	ldr	r0, [r7, #4]
 8003e54:	f000 f887 	bl	8003f66 <HAL_TIM_IC_CaptureCallback>
 8003e58:	e005      	b.n	8003e66 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003e5a:	6878      	ldr	r0, [r7, #4]
 8003e5c:	f000 f879 	bl	8003f52 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003e60:	6878      	ldr	r0, [r7, #4]
 8003e62:	f000 f88a 	bl	8003f7a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	2200      	movs	r2, #0
 8003e6a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	691b      	ldr	r3, [r3, #16]
 8003e72:	f003 0301 	and.w	r3, r3, #1
 8003e76:	2b01      	cmp	r3, #1
 8003e78:	d10e      	bne.n	8003e98 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	68db      	ldr	r3, [r3, #12]
 8003e80:	f003 0301 	and.w	r3, r3, #1
 8003e84:	2b01      	cmp	r3, #1
 8003e86:	d107      	bne.n	8003e98 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	f06f 0201 	mvn.w	r2, #1
 8003e90:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003e92:	6878      	ldr	r0, [r7, #4]
 8003e94:	f7fc fba4 	bl	80005e0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	691b      	ldr	r3, [r3, #16]
 8003e9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ea2:	2b80      	cmp	r3, #128	; 0x80
 8003ea4:	d10e      	bne.n	8003ec4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	68db      	ldr	r3, [r3, #12]
 8003eac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003eb0:	2b80      	cmp	r3, #128	; 0x80
 8003eb2:	d107      	bne.n	8003ec4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003ebc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003ebe:	6878      	ldr	r0, [r7, #4]
 8003ec0:	f000 f918 	bl	80040f4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	691b      	ldr	r3, [r3, #16]
 8003eca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ece:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003ed2:	d10e      	bne.n	8003ef2 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	68db      	ldr	r3, [r3, #12]
 8003eda:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ede:	2b80      	cmp	r3, #128	; 0x80
 8003ee0:	d107      	bne.n	8003ef2 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8003eea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003eec:	6878      	ldr	r0, [r7, #4]
 8003eee:	f000 f90b 	bl	8004108 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	691b      	ldr	r3, [r3, #16]
 8003ef8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003efc:	2b40      	cmp	r3, #64	; 0x40
 8003efe:	d10e      	bne.n	8003f1e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	68db      	ldr	r3, [r3, #12]
 8003f06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f0a:	2b40      	cmp	r3, #64	; 0x40
 8003f0c:	d107      	bne.n	8003f1e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003f16:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003f18:	6878      	ldr	r0, [r7, #4]
 8003f1a:	f000 f838 	bl	8003f8e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	691b      	ldr	r3, [r3, #16]
 8003f24:	f003 0320 	and.w	r3, r3, #32
 8003f28:	2b20      	cmp	r3, #32
 8003f2a:	d10e      	bne.n	8003f4a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	68db      	ldr	r3, [r3, #12]
 8003f32:	f003 0320 	and.w	r3, r3, #32
 8003f36:	2b20      	cmp	r3, #32
 8003f38:	d107      	bne.n	8003f4a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	f06f 0220 	mvn.w	r2, #32
 8003f42:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003f44:	6878      	ldr	r0, [r7, #4]
 8003f46:	f000 f8cb 	bl	80040e0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003f4a:	bf00      	nop
 8003f4c:	3708      	adds	r7, #8
 8003f4e:	46bd      	mov	sp, r7
 8003f50:	bd80      	pop	{r7, pc}

08003f52 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003f52:	b480      	push	{r7}
 8003f54:	b083      	sub	sp, #12
 8003f56:	af00      	add	r7, sp, #0
 8003f58:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003f5a:	bf00      	nop
 8003f5c:	370c      	adds	r7, #12
 8003f5e:	46bd      	mov	sp, r7
 8003f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f64:	4770      	bx	lr

08003f66 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003f66:	b480      	push	{r7}
 8003f68:	b083      	sub	sp, #12
 8003f6a:	af00      	add	r7, sp, #0
 8003f6c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003f6e:	bf00      	nop
 8003f70:	370c      	adds	r7, #12
 8003f72:	46bd      	mov	sp, r7
 8003f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f78:	4770      	bx	lr

08003f7a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003f7a:	b480      	push	{r7}
 8003f7c:	b083      	sub	sp, #12
 8003f7e:	af00      	add	r7, sp, #0
 8003f80:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003f82:	bf00      	nop
 8003f84:	370c      	adds	r7, #12
 8003f86:	46bd      	mov	sp, r7
 8003f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f8c:	4770      	bx	lr

08003f8e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003f8e:	b480      	push	{r7}
 8003f90:	b083      	sub	sp, #12
 8003f92:	af00      	add	r7, sp, #0
 8003f94:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003f96:	bf00      	nop
 8003f98:	370c      	adds	r7, #12
 8003f9a:	46bd      	mov	sp, r7
 8003f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fa0:	4770      	bx	lr
	...

08003fa4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003fa4:	b480      	push	{r7}
 8003fa6:	b085      	sub	sp, #20
 8003fa8:	af00      	add	r7, sp, #0
 8003faa:	6078      	str	r0, [r7, #4]
 8003fac:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	4a42      	ldr	r2, [pc, #264]	; (80040c0 <TIM_Base_SetConfig+0x11c>)
 8003fb8:	4293      	cmp	r3, r2
 8003fba:	d013      	beq.n	8003fe4 <TIM_Base_SetConfig+0x40>
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003fc2:	d00f      	beq.n	8003fe4 <TIM_Base_SetConfig+0x40>
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	4a3f      	ldr	r2, [pc, #252]	; (80040c4 <TIM_Base_SetConfig+0x120>)
 8003fc8:	4293      	cmp	r3, r2
 8003fca:	d00b      	beq.n	8003fe4 <TIM_Base_SetConfig+0x40>
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	4a3e      	ldr	r2, [pc, #248]	; (80040c8 <TIM_Base_SetConfig+0x124>)
 8003fd0:	4293      	cmp	r3, r2
 8003fd2:	d007      	beq.n	8003fe4 <TIM_Base_SetConfig+0x40>
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	4a3d      	ldr	r2, [pc, #244]	; (80040cc <TIM_Base_SetConfig+0x128>)
 8003fd8:	4293      	cmp	r3, r2
 8003fda:	d003      	beq.n	8003fe4 <TIM_Base_SetConfig+0x40>
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	4a3c      	ldr	r2, [pc, #240]	; (80040d0 <TIM_Base_SetConfig+0x12c>)
 8003fe0:	4293      	cmp	r3, r2
 8003fe2:	d108      	bne.n	8003ff6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003fea:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003fec:	683b      	ldr	r3, [r7, #0]
 8003fee:	685b      	ldr	r3, [r3, #4]
 8003ff0:	68fa      	ldr	r2, [r7, #12]
 8003ff2:	4313      	orrs	r3, r2
 8003ff4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	4a31      	ldr	r2, [pc, #196]	; (80040c0 <TIM_Base_SetConfig+0x11c>)
 8003ffa:	4293      	cmp	r3, r2
 8003ffc:	d01f      	beq.n	800403e <TIM_Base_SetConfig+0x9a>
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004004:	d01b      	beq.n	800403e <TIM_Base_SetConfig+0x9a>
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	4a2e      	ldr	r2, [pc, #184]	; (80040c4 <TIM_Base_SetConfig+0x120>)
 800400a:	4293      	cmp	r3, r2
 800400c:	d017      	beq.n	800403e <TIM_Base_SetConfig+0x9a>
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	4a2d      	ldr	r2, [pc, #180]	; (80040c8 <TIM_Base_SetConfig+0x124>)
 8004012:	4293      	cmp	r3, r2
 8004014:	d013      	beq.n	800403e <TIM_Base_SetConfig+0x9a>
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	4a2c      	ldr	r2, [pc, #176]	; (80040cc <TIM_Base_SetConfig+0x128>)
 800401a:	4293      	cmp	r3, r2
 800401c:	d00f      	beq.n	800403e <TIM_Base_SetConfig+0x9a>
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	4a2c      	ldr	r2, [pc, #176]	; (80040d4 <TIM_Base_SetConfig+0x130>)
 8004022:	4293      	cmp	r3, r2
 8004024:	d00b      	beq.n	800403e <TIM_Base_SetConfig+0x9a>
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	4a2b      	ldr	r2, [pc, #172]	; (80040d8 <TIM_Base_SetConfig+0x134>)
 800402a:	4293      	cmp	r3, r2
 800402c:	d007      	beq.n	800403e <TIM_Base_SetConfig+0x9a>
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	4a2a      	ldr	r2, [pc, #168]	; (80040dc <TIM_Base_SetConfig+0x138>)
 8004032:	4293      	cmp	r3, r2
 8004034:	d003      	beq.n	800403e <TIM_Base_SetConfig+0x9a>
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	4a25      	ldr	r2, [pc, #148]	; (80040d0 <TIM_Base_SetConfig+0x12c>)
 800403a:	4293      	cmp	r3, r2
 800403c:	d108      	bne.n	8004050 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004044:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004046:	683b      	ldr	r3, [r7, #0]
 8004048:	68db      	ldr	r3, [r3, #12]
 800404a:	68fa      	ldr	r2, [r7, #12]
 800404c:	4313      	orrs	r3, r2
 800404e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004056:	683b      	ldr	r3, [r7, #0]
 8004058:	695b      	ldr	r3, [r3, #20]
 800405a:	4313      	orrs	r3, r2
 800405c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	68fa      	ldr	r2, [r7, #12]
 8004062:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004064:	683b      	ldr	r3, [r7, #0]
 8004066:	689a      	ldr	r2, [r3, #8]
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800406c:	683b      	ldr	r3, [r7, #0]
 800406e:	681a      	ldr	r2, [r3, #0]
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	4a12      	ldr	r2, [pc, #72]	; (80040c0 <TIM_Base_SetConfig+0x11c>)
 8004078:	4293      	cmp	r3, r2
 800407a:	d013      	beq.n	80040a4 <TIM_Base_SetConfig+0x100>
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	4a13      	ldr	r2, [pc, #76]	; (80040cc <TIM_Base_SetConfig+0x128>)
 8004080:	4293      	cmp	r3, r2
 8004082:	d00f      	beq.n	80040a4 <TIM_Base_SetConfig+0x100>
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	4a13      	ldr	r2, [pc, #76]	; (80040d4 <TIM_Base_SetConfig+0x130>)
 8004088:	4293      	cmp	r3, r2
 800408a:	d00b      	beq.n	80040a4 <TIM_Base_SetConfig+0x100>
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	4a12      	ldr	r2, [pc, #72]	; (80040d8 <TIM_Base_SetConfig+0x134>)
 8004090:	4293      	cmp	r3, r2
 8004092:	d007      	beq.n	80040a4 <TIM_Base_SetConfig+0x100>
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	4a11      	ldr	r2, [pc, #68]	; (80040dc <TIM_Base_SetConfig+0x138>)
 8004098:	4293      	cmp	r3, r2
 800409a:	d003      	beq.n	80040a4 <TIM_Base_SetConfig+0x100>
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	4a0c      	ldr	r2, [pc, #48]	; (80040d0 <TIM_Base_SetConfig+0x12c>)
 80040a0:	4293      	cmp	r3, r2
 80040a2:	d103      	bne.n	80040ac <TIM_Base_SetConfig+0x108>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80040a4:	683b      	ldr	r3, [r7, #0]
 80040a6:	691a      	ldr	r2, [r3, #16]
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	2201      	movs	r2, #1
 80040b0:	615a      	str	r2, [r3, #20]
}
 80040b2:	bf00      	nop
 80040b4:	3714      	adds	r7, #20
 80040b6:	46bd      	mov	sp, r7
 80040b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040bc:	4770      	bx	lr
 80040be:	bf00      	nop
 80040c0:	40012c00 	.word	0x40012c00
 80040c4:	40000400 	.word	0x40000400
 80040c8:	40000800 	.word	0x40000800
 80040cc:	40013400 	.word	0x40013400
 80040d0:	40015000 	.word	0x40015000
 80040d4:	40014000 	.word	0x40014000
 80040d8:	40014400 	.word	0x40014400
 80040dc:	40014800 	.word	0x40014800

080040e0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80040e0:	b480      	push	{r7}
 80040e2:	b083      	sub	sp, #12
 80040e4:	af00      	add	r7, sp, #0
 80040e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80040e8:	bf00      	nop
 80040ea:	370c      	adds	r7, #12
 80040ec:	46bd      	mov	sp, r7
 80040ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040f2:	4770      	bx	lr

080040f4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80040f4:	b480      	push	{r7}
 80040f6:	b083      	sub	sp, #12
 80040f8:	af00      	add	r7, sp, #0
 80040fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80040fc:	bf00      	nop
 80040fe:	370c      	adds	r7, #12
 8004100:	46bd      	mov	sp, r7
 8004102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004106:	4770      	bx	lr

08004108 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004108:	b480      	push	{r7}
 800410a:	b083      	sub	sp, #12
 800410c:	af00      	add	r7, sp, #0
 800410e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004110:	bf00      	nop
 8004112:	370c      	adds	r7, #12
 8004114:	46bd      	mov	sp, r7
 8004116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800411a:	4770      	bx	lr

0800411c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800411c:	b580      	push	{r7, lr}
 800411e:	b082      	sub	sp, #8
 8004120:	af00      	add	r7, sp, #0
 8004122:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	2b00      	cmp	r3, #0
 8004128:	d101      	bne.n	800412e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800412a:	2301      	movs	r3, #1
 800412c:	e040      	b.n	80041b0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004132:	2b00      	cmp	r3, #0
 8004134:	d106      	bne.n	8004144 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	2200      	movs	r2, #0
 800413a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800413e:	6878      	ldr	r0, [r7, #4]
 8004140:	f7fc fbbe 	bl	80008c0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	2224      	movs	r2, #36	; 0x24
 8004148:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	681a      	ldr	r2, [r3, #0]
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	f022 0201 	bic.w	r2, r2, #1
 8004158:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800415a:	6878      	ldr	r0, [r7, #4]
 800415c:	f000 f82c 	bl	80041b8 <UART_SetConfig>
 8004160:	4603      	mov	r3, r0
 8004162:	2b01      	cmp	r3, #1
 8004164:	d101      	bne.n	800416a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8004166:	2301      	movs	r3, #1
 8004168:	e022      	b.n	80041b0 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800416e:	2b00      	cmp	r3, #0
 8004170:	d002      	beq.n	8004178 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8004172:	6878      	ldr	r0, [r7, #4]
 8004174:	f000 f9f4 	bl	8004560 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	685a      	ldr	r2, [r3, #4]
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004186:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	689a      	ldr	r2, [r3, #8]
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004196:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	681a      	ldr	r2, [r3, #0]
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	f042 0201 	orr.w	r2, r2, #1
 80041a6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80041a8:	6878      	ldr	r0, [r7, #4]
 80041aa:	f000 fa7b 	bl	80046a4 <UART_CheckIdleState>
 80041ae:	4603      	mov	r3, r0
}
 80041b0:	4618      	mov	r0, r3
 80041b2:	3708      	adds	r7, #8
 80041b4:	46bd      	mov	sp, r7
 80041b6:	bd80      	pop	{r7, pc}

080041b8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80041b8:	b580      	push	{r7, lr}
 80041ba:	b088      	sub	sp, #32
 80041bc:	af00      	add	r7, sp, #0
 80041be:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80041c0:	2300      	movs	r3, #0
 80041c2:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	689a      	ldr	r2, [r3, #8]
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	691b      	ldr	r3, [r3, #16]
 80041cc:	431a      	orrs	r2, r3
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	695b      	ldr	r3, [r3, #20]
 80041d2:	431a      	orrs	r2, r3
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	69db      	ldr	r3, [r3, #28]
 80041d8:	4313      	orrs	r3, r2
 80041da:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	681a      	ldr	r2, [r3, #0]
 80041e2:	4b92      	ldr	r3, [pc, #584]	; (800442c <UART_SetConfig+0x274>)
 80041e4:	4013      	ands	r3, r2
 80041e6:	687a      	ldr	r2, [r7, #4]
 80041e8:	6812      	ldr	r2, [r2, #0]
 80041ea:	6979      	ldr	r1, [r7, #20]
 80041ec:	430b      	orrs	r3, r1
 80041ee:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	685b      	ldr	r3, [r3, #4]
 80041f6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	68da      	ldr	r2, [r3, #12]
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	430a      	orrs	r2, r1
 8004204:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	699b      	ldr	r3, [r3, #24]
 800420a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	6a1b      	ldr	r3, [r3, #32]
 8004210:	697a      	ldr	r2, [r7, #20]
 8004212:	4313      	orrs	r3, r2
 8004214:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	689b      	ldr	r3, [r3, #8]
 800421c:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	697a      	ldr	r2, [r7, #20]
 8004226:	430a      	orrs	r2, r1
 8004228:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	4a80      	ldr	r2, [pc, #512]	; (8004430 <UART_SetConfig+0x278>)
 8004230:	4293      	cmp	r3, r2
 8004232:	d120      	bne.n	8004276 <UART_SetConfig+0xbe>
 8004234:	4b7f      	ldr	r3, [pc, #508]	; (8004434 <UART_SetConfig+0x27c>)
 8004236:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004238:	f003 0303 	and.w	r3, r3, #3
 800423c:	2b03      	cmp	r3, #3
 800423e:	d817      	bhi.n	8004270 <UART_SetConfig+0xb8>
 8004240:	a201      	add	r2, pc, #4	; (adr r2, 8004248 <UART_SetConfig+0x90>)
 8004242:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004246:	bf00      	nop
 8004248:	08004259 	.word	0x08004259
 800424c:	08004265 	.word	0x08004265
 8004250:	0800426b 	.word	0x0800426b
 8004254:	0800425f 	.word	0x0800425f
 8004258:	2301      	movs	r3, #1
 800425a:	77fb      	strb	r3, [r7, #31]
 800425c:	e0b5      	b.n	80043ca <UART_SetConfig+0x212>
 800425e:	2302      	movs	r3, #2
 8004260:	77fb      	strb	r3, [r7, #31]
 8004262:	e0b2      	b.n	80043ca <UART_SetConfig+0x212>
 8004264:	2304      	movs	r3, #4
 8004266:	77fb      	strb	r3, [r7, #31]
 8004268:	e0af      	b.n	80043ca <UART_SetConfig+0x212>
 800426a:	2308      	movs	r3, #8
 800426c:	77fb      	strb	r3, [r7, #31]
 800426e:	e0ac      	b.n	80043ca <UART_SetConfig+0x212>
 8004270:	2310      	movs	r3, #16
 8004272:	77fb      	strb	r3, [r7, #31]
 8004274:	e0a9      	b.n	80043ca <UART_SetConfig+0x212>
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	4a6f      	ldr	r2, [pc, #444]	; (8004438 <UART_SetConfig+0x280>)
 800427c:	4293      	cmp	r3, r2
 800427e:	d124      	bne.n	80042ca <UART_SetConfig+0x112>
 8004280:	4b6c      	ldr	r3, [pc, #432]	; (8004434 <UART_SetConfig+0x27c>)
 8004282:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004284:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004288:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800428c:	d011      	beq.n	80042b2 <UART_SetConfig+0xfa>
 800428e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004292:	d817      	bhi.n	80042c4 <UART_SetConfig+0x10c>
 8004294:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004298:	d011      	beq.n	80042be <UART_SetConfig+0x106>
 800429a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800429e:	d811      	bhi.n	80042c4 <UART_SetConfig+0x10c>
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d003      	beq.n	80042ac <UART_SetConfig+0xf4>
 80042a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80042a8:	d006      	beq.n	80042b8 <UART_SetConfig+0x100>
 80042aa:	e00b      	b.n	80042c4 <UART_SetConfig+0x10c>
 80042ac:	2300      	movs	r3, #0
 80042ae:	77fb      	strb	r3, [r7, #31]
 80042b0:	e08b      	b.n	80043ca <UART_SetConfig+0x212>
 80042b2:	2302      	movs	r3, #2
 80042b4:	77fb      	strb	r3, [r7, #31]
 80042b6:	e088      	b.n	80043ca <UART_SetConfig+0x212>
 80042b8:	2304      	movs	r3, #4
 80042ba:	77fb      	strb	r3, [r7, #31]
 80042bc:	e085      	b.n	80043ca <UART_SetConfig+0x212>
 80042be:	2308      	movs	r3, #8
 80042c0:	77fb      	strb	r3, [r7, #31]
 80042c2:	e082      	b.n	80043ca <UART_SetConfig+0x212>
 80042c4:	2310      	movs	r3, #16
 80042c6:	77fb      	strb	r3, [r7, #31]
 80042c8:	e07f      	b.n	80043ca <UART_SetConfig+0x212>
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	4a5b      	ldr	r2, [pc, #364]	; (800443c <UART_SetConfig+0x284>)
 80042d0:	4293      	cmp	r3, r2
 80042d2:	d124      	bne.n	800431e <UART_SetConfig+0x166>
 80042d4:	4b57      	ldr	r3, [pc, #348]	; (8004434 <UART_SetConfig+0x27c>)
 80042d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042d8:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 80042dc:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80042e0:	d011      	beq.n	8004306 <UART_SetConfig+0x14e>
 80042e2:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80042e6:	d817      	bhi.n	8004318 <UART_SetConfig+0x160>
 80042e8:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80042ec:	d011      	beq.n	8004312 <UART_SetConfig+0x15a>
 80042ee:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80042f2:	d811      	bhi.n	8004318 <UART_SetConfig+0x160>
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d003      	beq.n	8004300 <UART_SetConfig+0x148>
 80042f8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80042fc:	d006      	beq.n	800430c <UART_SetConfig+0x154>
 80042fe:	e00b      	b.n	8004318 <UART_SetConfig+0x160>
 8004300:	2300      	movs	r3, #0
 8004302:	77fb      	strb	r3, [r7, #31]
 8004304:	e061      	b.n	80043ca <UART_SetConfig+0x212>
 8004306:	2302      	movs	r3, #2
 8004308:	77fb      	strb	r3, [r7, #31]
 800430a:	e05e      	b.n	80043ca <UART_SetConfig+0x212>
 800430c:	2304      	movs	r3, #4
 800430e:	77fb      	strb	r3, [r7, #31]
 8004310:	e05b      	b.n	80043ca <UART_SetConfig+0x212>
 8004312:	2308      	movs	r3, #8
 8004314:	77fb      	strb	r3, [r7, #31]
 8004316:	e058      	b.n	80043ca <UART_SetConfig+0x212>
 8004318:	2310      	movs	r3, #16
 800431a:	77fb      	strb	r3, [r7, #31]
 800431c:	e055      	b.n	80043ca <UART_SetConfig+0x212>
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	4a47      	ldr	r2, [pc, #284]	; (8004440 <UART_SetConfig+0x288>)
 8004324:	4293      	cmp	r3, r2
 8004326:	d124      	bne.n	8004372 <UART_SetConfig+0x1ba>
 8004328:	4b42      	ldr	r3, [pc, #264]	; (8004434 <UART_SetConfig+0x27c>)
 800432a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800432c:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8004330:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004334:	d011      	beq.n	800435a <UART_SetConfig+0x1a2>
 8004336:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800433a:	d817      	bhi.n	800436c <UART_SetConfig+0x1b4>
 800433c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004340:	d011      	beq.n	8004366 <UART_SetConfig+0x1ae>
 8004342:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004346:	d811      	bhi.n	800436c <UART_SetConfig+0x1b4>
 8004348:	2b00      	cmp	r3, #0
 800434a:	d003      	beq.n	8004354 <UART_SetConfig+0x19c>
 800434c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004350:	d006      	beq.n	8004360 <UART_SetConfig+0x1a8>
 8004352:	e00b      	b.n	800436c <UART_SetConfig+0x1b4>
 8004354:	2300      	movs	r3, #0
 8004356:	77fb      	strb	r3, [r7, #31]
 8004358:	e037      	b.n	80043ca <UART_SetConfig+0x212>
 800435a:	2302      	movs	r3, #2
 800435c:	77fb      	strb	r3, [r7, #31]
 800435e:	e034      	b.n	80043ca <UART_SetConfig+0x212>
 8004360:	2304      	movs	r3, #4
 8004362:	77fb      	strb	r3, [r7, #31]
 8004364:	e031      	b.n	80043ca <UART_SetConfig+0x212>
 8004366:	2308      	movs	r3, #8
 8004368:	77fb      	strb	r3, [r7, #31]
 800436a:	e02e      	b.n	80043ca <UART_SetConfig+0x212>
 800436c:	2310      	movs	r3, #16
 800436e:	77fb      	strb	r3, [r7, #31]
 8004370:	e02b      	b.n	80043ca <UART_SetConfig+0x212>
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	4a33      	ldr	r2, [pc, #204]	; (8004444 <UART_SetConfig+0x28c>)
 8004378:	4293      	cmp	r3, r2
 800437a:	d124      	bne.n	80043c6 <UART_SetConfig+0x20e>
 800437c:	4b2d      	ldr	r3, [pc, #180]	; (8004434 <UART_SetConfig+0x27c>)
 800437e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004380:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8004384:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004388:	d011      	beq.n	80043ae <UART_SetConfig+0x1f6>
 800438a:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800438e:	d817      	bhi.n	80043c0 <UART_SetConfig+0x208>
 8004390:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004394:	d011      	beq.n	80043ba <UART_SetConfig+0x202>
 8004396:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800439a:	d811      	bhi.n	80043c0 <UART_SetConfig+0x208>
 800439c:	2b00      	cmp	r3, #0
 800439e:	d003      	beq.n	80043a8 <UART_SetConfig+0x1f0>
 80043a0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80043a4:	d006      	beq.n	80043b4 <UART_SetConfig+0x1fc>
 80043a6:	e00b      	b.n	80043c0 <UART_SetConfig+0x208>
 80043a8:	2300      	movs	r3, #0
 80043aa:	77fb      	strb	r3, [r7, #31]
 80043ac:	e00d      	b.n	80043ca <UART_SetConfig+0x212>
 80043ae:	2302      	movs	r3, #2
 80043b0:	77fb      	strb	r3, [r7, #31]
 80043b2:	e00a      	b.n	80043ca <UART_SetConfig+0x212>
 80043b4:	2304      	movs	r3, #4
 80043b6:	77fb      	strb	r3, [r7, #31]
 80043b8:	e007      	b.n	80043ca <UART_SetConfig+0x212>
 80043ba:	2308      	movs	r3, #8
 80043bc:	77fb      	strb	r3, [r7, #31]
 80043be:	e004      	b.n	80043ca <UART_SetConfig+0x212>
 80043c0:	2310      	movs	r3, #16
 80043c2:	77fb      	strb	r3, [r7, #31]
 80043c4:	e001      	b.n	80043ca <UART_SetConfig+0x212>
 80043c6:	2310      	movs	r3, #16
 80043c8:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	69db      	ldr	r3, [r3, #28]
 80043ce:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80043d2:	d16b      	bne.n	80044ac <UART_SetConfig+0x2f4>
  {
    switch (clocksource)
 80043d4:	7ffb      	ldrb	r3, [r7, #31]
 80043d6:	2b08      	cmp	r3, #8
 80043d8:	d838      	bhi.n	800444c <UART_SetConfig+0x294>
 80043da:	a201      	add	r2, pc, #4	; (adr r2, 80043e0 <UART_SetConfig+0x228>)
 80043dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043e0:	08004405 	.word	0x08004405
 80043e4:	0800440d 	.word	0x0800440d
 80043e8:	08004415 	.word	0x08004415
 80043ec:	0800444d 	.word	0x0800444d
 80043f0:	0800441b 	.word	0x0800441b
 80043f4:	0800444d 	.word	0x0800444d
 80043f8:	0800444d 	.word	0x0800444d
 80043fc:	0800444d 	.word	0x0800444d
 8004400:	08004423 	.word	0x08004423
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004404:	f7fe fb7a 	bl	8002afc <HAL_RCC_GetPCLK1Freq>
 8004408:	61b8      	str	r0, [r7, #24]
        break;
 800440a:	e024      	b.n	8004456 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800440c:	f7fe fb98 	bl	8002b40 <HAL_RCC_GetPCLK2Freq>
 8004410:	61b8      	str	r0, [r7, #24]
        break;
 8004412:	e020      	b.n	8004456 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004414:	4b0c      	ldr	r3, [pc, #48]	; (8004448 <UART_SetConfig+0x290>)
 8004416:	61bb      	str	r3, [r7, #24]
        break;
 8004418:	e01d      	b.n	8004456 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800441a:	f7fe faf9 	bl	8002a10 <HAL_RCC_GetSysClockFreq>
 800441e:	61b8      	str	r0, [r7, #24]
        break;
 8004420:	e019      	b.n	8004456 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004422:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004426:	61bb      	str	r3, [r7, #24]
        break;
 8004428:	e015      	b.n	8004456 <UART_SetConfig+0x29e>
 800442a:	bf00      	nop
 800442c:	efff69f3 	.word	0xefff69f3
 8004430:	40013800 	.word	0x40013800
 8004434:	40021000 	.word	0x40021000
 8004438:	40004400 	.word	0x40004400
 800443c:	40004800 	.word	0x40004800
 8004440:	40004c00 	.word	0x40004c00
 8004444:	40005000 	.word	0x40005000
 8004448:	007a1200 	.word	0x007a1200
      default:
        pclk = 0U;
 800444c:	2300      	movs	r3, #0
 800444e:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004450:	2301      	movs	r3, #1
 8004452:	77bb      	strb	r3, [r7, #30]
        break;
 8004454:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004456:	69bb      	ldr	r3, [r7, #24]
 8004458:	2b00      	cmp	r3, #0
 800445a:	d073      	beq.n	8004544 <UART_SetConfig+0x38c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800445c:	69bb      	ldr	r3, [r7, #24]
 800445e:	005a      	lsls	r2, r3, #1
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	685b      	ldr	r3, [r3, #4]
 8004464:	085b      	lsrs	r3, r3, #1
 8004466:	441a      	add	r2, r3
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	685b      	ldr	r3, [r3, #4]
 800446c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004470:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004472:	693b      	ldr	r3, [r7, #16]
 8004474:	2b0f      	cmp	r3, #15
 8004476:	d916      	bls.n	80044a6 <UART_SetConfig+0x2ee>
 8004478:	693b      	ldr	r3, [r7, #16]
 800447a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800447e:	d212      	bcs.n	80044a6 <UART_SetConfig+0x2ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004480:	693b      	ldr	r3, [r7, #16]
 8004482:	b29b      	uxth	r3, r3
 8004484:	f023 030f 	bic.w	r3, r3, #15
 8004488:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800448a:	693b      	ldr	r3, [r7, #16]
 800448c:	085b      	lsrs	r3, r3, #1
 800448e:	b29b      	uxth	r3, r3
 8004490:	f003 0307 	and.w	r3, r3, #7
 8004494:	b29a      	uxth	r2, r3
 8004496:	89fb      	ldrh	r3, [r7, #14]
 8004498:	4313      	orrs	r3, r2
 800449a:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	89fa      	ldrh	r2, [r7, #14]
 80044a2:	60da      	str	r2, [r3, #12]
 80044a4:	e04e      	b.n	8004544 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 80044a6:	2301      	movs	r3, #1
 80044a8:	77bb      	strb	r3, [r7, #30]
 80044aa:	e04b      	b.n	8004544 <UART_SetConfig+0x38c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80044ac:	7ffb      	ldrb	r3, [r7, #31]
 80044ae:	2b08      	cmp	r3, #8
 80044b0:	d827      	bhi.n	8004502 <UART_SetConfig+0x34a>
 80044b2:	a201      	add	r2, pc, #4	; (adr r2, 80044b8 <UART_SetConfig+0x300>)
 80044b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044b8:	080044dd 	.word	0x080044dd
 80044bc:	080044e5 	.word	0x080044e5
 80044c0:	080044ed 	.word	0x080044ed
 80044c4:	08004503 	.word	0x08004503
 80044c8:	080044f3 	.word	0x080044f3
 80044cc:	08004503 	.word	0x08004503
 80044d0:	08004503 	.word	0x08004503
 80044d4:	08004503 	.word	0x08004503
 80044d8:	080044fb 	.word	0x080044fb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80044dc:	f7fe fb0e 	bl	8002afc <HAL_RCC_GetPCLK1Freq>
 80044e0:	61b8      	str	r0, [r7, #24]
        break;
 80044e2:	e013      	b.n	800450c <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80044e4:	f7fe fb2c 	bl	8002b40 <HAL_RCC_GetPCLK2Freq>
 80044e8:	61b8      	str	r0, [r7, #24]
        break;
 80044ea:	e00f      	b.n	800450c <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80044ec:	4b1b      	ldr	r3, [pc, #108]	; (800455c <UART_SetConfig+0x3a4>)
 80044ee:	61bb      	str	r3, [r7, #24]
        break;
 80044f0:	e00c      	b.n	800450c <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80044f2:	f7fe fa8d 	bl	8002a10 <HAL_RCC_GetSysClockFreq>
 80044f6:	61b8      	str	r0, [r7, #24]
        break;
 80044f8:	e008      	b.n	800450c <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80044fa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80044fe:	61bb      	str	r3, [r7, #24]
        break;
 8004500:	e004      	b.n	800450c <UART_SetConfig+0x354>
      default:
        pclk = 0U;
 8004502:	2300      	movs	r3, #0
 8004504:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004506:	2301      	movs	r3, #1
 8004508:	77bb      	strb	r3, [r7, #30]
        break;
 800450a:	bf00      	nop
    }

    if (pclk != 0U)
 800450c:	69bb      	ldr	r3, [r7, #24]
 800450e:	2b00      	cmp	r3, #0
 8004510:	d018      	beq.n	8004544 <UART_SetConfig+0x38c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	685b      	ldr	r3, [r3, #4]
 8004516:	085a      	lsrs	r2, r3, #1
 8004518:	69bb      	ldr	r3, [r7, #24]
 800451a:	441a      	add	r2, r3
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	685b      	ldr	r3, [r3, #4]
 8004520:	fbb2 f3f3 	udiv	r3, r2, r3
 8004524:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004526:	693b      	ldr	r3, [r7, #16]
 8004528:	2b0f      	cmp	r3, #15
 800452a:	d909      	bls.n	8004540 <UART_SetConfig+0x388>
 800452c:	693b      	ldr	r3, [r7, #16]
 800452e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004532:	d205      	bcs.n	8004540 <UART_SetConfig+0x388>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004534:	693b      	ldr	r3, [r7, #16]
 8004536:	b29a      	uxth	r2, r3
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	60da      	str	r2, [r3, #12]
 800453e:	e001      	b.n	8004544 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 8004540:	2301      	movs	r3, #1
 8004542:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	2200      	movs	r2, #0
 8004548:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	2200      	movs	r2, #0
 800454e:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8004550:	7fbb      	ldrb	r3, [r7, #30]
}
 8004552:	4618      	mov	r0, r3
 8004554:	3720      	adds	r7, #32
 8004556:	46bd      	mov	sp, r7
 8004558:	bd80      	pop	{r7, pc}
 800455a:	bf00      	nop
 800455c:	007a1200 	.word	0x007a1200

08004560 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004560:	b480      	push	{r7}
 8004562:	b083      	sub	sp, #12
 8004564:	af00      	add	r7, sp, #0
 8004566:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800456c:	f003 0301 	and.w	r3, r3, #1
 8004570:	2b00      	cmp	r3, #0
 8004572:	d00a      	beq.n	800458a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	685b      	ldr	r3, [r3, #4]
 800457a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	430a      	orrs	r2, r1
 8004588:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800458e:	f003 0302 	and.w	r3, r3, #2
 8004592:	2b00      	cmp	r3, #0
 8004594:	d00a      	beq.n	80045ac <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	685b      	ldr	r3, [r3, #4]
 800459c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	430a      	orrs	r2, r1
 80045aa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045b0:	f003 0304 	and.w	r3, r3, #4
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d00a      	beq.n	80045ce <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	685b      	ldr	r3, [r3, #4]
 80045be:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	430a      	orrs	r2, r1
 80045cc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045d2:	f003 0308 	and.w	r3, r3, #8
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d00a      	beq.n	80045f0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	685b      	ldr	r3, [r3, #4]
 80045e0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	430a      	orrs	r2, r1
 80045ee:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045f4:	f003 0310 	and.w	r3, r3, #16
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d00a      	beq.n	8004612 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	689b      	ldr	r3, [r3, #8]
 8004602:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	430a      	orrs	r2, r1
 8004610:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004616:	f003 0320 	and.w	r3, r3, #32
 800461a:	2b00      	cmp	r3, #0
 800461c:	d00a      	beq.n	8004634 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	689b      	ldr	r3, [r3, #8]
 8004624:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	430a      	orrs	r2, r1
 8004632:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004638:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800463c:	2b00      	cmp	r3, #0
 800463e:	d01a      	beq.n	8004676 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	685b      	ldr	r3, [r3, #4]
 8004646:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	430a      	orrs	r2, r1
 8004654:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800465a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800465e:	d10a      	bne.n	8004676 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	685b      	ldr	r3, [r3, #4]
 8004666:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	430a      	orrs	r2, r1
 8004674:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800467a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800467e:	2b00      	cmp	r3, #0
 8004680:	d00a      	beq.n	8004698 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	685b      	ldr	r3, [r3, #4]
 8004688:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	430a      	orrs	r2, r1
 8004696:	605a      	str	r2, [r3, #4]
  }
}
 8004698:	bf00      	nop
 800469a:	370c      	adds	r7, #12
 800469c:	46bd      	mov	sp, r7
 800469e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046a2:	4770      	bx	lr

080046a4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80046a4:	b580      	push	{r7, lr}
 80046a6:	b098      	sub	sp, #96	; 0x60
 80046a8:	af02      	add	r7, sp, #8
 80046aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	2200      	movs	r2, #0
 80046b0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80046b4:	f7fc fb00 	bl	8000cb8 <HAL_GetTick>
 80046b8:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	f003 0308 	and.w	r3, r3, #8
 80046c4:	2b08      	cmp	r3, #8
 80046c6:	d12e      	bne.n	8004726 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80046c8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80046cc:	9300      	str	r3, [sp, #0]
 80046ce:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80046d0:	2200      	movs	r2, #0
 80046d2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80046d6:	6878      	ldr	r0, [r7, #4]
 80046d8:	f000 f88c 	bl	80047f4 <UART_WaitOnFlagUntilTimeout>
 80046dc:	4603      	mov	r3, r0
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d021      	beq.n	8004726 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80046ea:	e853 3f00 	ldrex	r3, [r3]
 80046ee:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80046f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80046f2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80046f6:	653b      	str	r3, [r7, #80]	; 0x50
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	461a      	mov	r2, r3
 80046fe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004700:	647b      	str	r3, [r7, #68]	; 0x44
 8004702:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004704:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004706:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004708:	e841 2300 	strex	r3, r2, [r1]
 800470c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800470e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004710:	2b00      	cmp	r3, #0
 8004712:	d1e6      	bne.n	80046e2 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	2220      	movs	r2, #32
 8004718:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	2200      	movs	r2, #0
 800471e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004722:	2303      	movs	r3, #3
 8004724:	e062      	b.n	80047ec <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	f003 0304 	and.w	r3, r3, #4
 8004730:	2b04      	cmp	r3, #4
 8004732:	d149      	bne.n	80047c8 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004734:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004738:	9300      	str	r3, [sp, #0]
 800473a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800473c:	2200      	movs	r2, #0
 800473e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004742:	6878      	ldr	r0, [r7, #4]
 8004744:	f000 f856 	bl	80047f4 <UART_WaitOnFlagUntilTimeout>
 8004748:	4603      	mov	r3, r0
 800474a:	2b00      	cmp	r3, #0
 800474c:	d03c      	beq.n	80047c8 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004754:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004756:	e853 3f00 	ldrex	r3, [r3]
 800475a:	623b      	str	r3, [r7, #32]
   return(result);
 800475c:	6a3b      	ldr	r3, [r7, #32]
 800475e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004762:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	461a      	mov	r2, r3
 800476a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800476c:	633b      	str	r3, [r7, #48]	; 0x30
 800476e:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004770:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004772:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004774:	e841 2300 	strex	r3, r2, [r1]
 8004778:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800477a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800477c:	2b00      	cmp	r3, #0
 800477e:	d1e6      	bne.n	800474e <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	3308      	adds	r3, #8
 8004786:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004788:	693b      	ldr	r3, [r7, #16]
 800478a:	e853 3f00 	ldrex	r3, [r3]
 800478e:	60fb      	str	r3, [r7, #12]
   return(result);
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	f023 0301 	bic.w	r3, r3, #1
 8004796:	64bb      	str	r3, [r7, #72]	; 0x48
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	3308      	adds	r3, #8
 800479e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80047a0:	61fa      	str	r2, [r7, #28]
 80047a2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047a4:	69b9      	ldr	r1, [r7, #24]
 80047a6:	69fa      	ldr	r2, [r7, #28]
 80047a8:	e841 2300 	strex	r3, r2, [r1]
 80047ac:	617b      	str	r3, [r7, #20]
   return(result);
 80047ae:	697b      	ldr	r3, [r7, #20]
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d1e5      	bne.n	8004780 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	2220      	movs	r2, #32
 80047b8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	2200      	movs	r2, #0
 80047c0:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80047c4:	2303      	movs	r3, #3
 80047c6:	e011      	b.n	80047ec <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	2220      	movs	r2, #32
 80047cc:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	2220      	movs	r2, #32
 80047d2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	2200      	movs	r2, #0
 80047da:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	2200      	movs	r2, #0
 80047e0:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	2200      	movs	r2, #0
 80047e6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 80047ea:	2300      	movs	r3, #0
}
 80047ec:	4618      	mov	r0, r3
 80047ee:	3758      	adds	r7, #88	; 0x58
 80047f0:	46bd      	mov	sp, r7
 80047f2:	bd80      	pop	{r7, pc}

080047f4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80047f4:	b580      	push	{r7, lr}
 80047f6:	b084      	sub	sp, #16
 80047f8:	af00      	add	r7, sp, #0
 80047fa:	60f8      	str	r0, [r7, #12]
 80047fc:	60b9      	str	r1, [r7, #8]
 80047fe:	603b      	str	r3, [r7, #0]
 8004800:	4613      	mov	r3, r2
 8004802:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004804:	e049      	b.n	800489a <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004806:	69bb      	ldr	r3, [r7, #24]
 8004808:	f1b3 3fff 	cmp.w	r3, #4294967295
 800480c:	d045      	beq.n	800489a <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800480e:	f7fc fa53 	bl	8000cb8 <HAL_GetTick>
 8004812:	4602      	mov	r2, r0
 8004814:	683b      	ldr	r3, [r7, #0]
 8004816:	1ad3      	subs	r3, r2, r3
 8004818:	69ba      	ldr	r2, [r7, #24]
 800481a:	429a      	cmp	r2, r3
 800481c:	d302      	bcc.n	8004824 <UART_WaitOnFlagUntilTimeout+0x30>
 800481e:	69bb      	ldr	r3, [r7, #24]
 8004820:	2b00      	cmp	r3, #0
 8004822:	d101      	bne.n	8004828 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004824:	2303      	movs	r3, #3
 8004826:	e048      	b.n	80048ba <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	f003 0304 	and.w	r3, r3, #4
 8004832:	2b00      	cmp	r3, #0
 8004834:	d031      	beq.n	800489a <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	69db      	ldr	r3, [r3, #28]
 800483c:	f003 0308 	and.w	r3, r3, #8
 8004840:	2b08      	cmp	r3, #8
 8004842:	d110      	bne.n	8004866 <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	2208      	movs	r2, #8
 800484a:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 800484c:	68f8      	ldr	r0, [r7, #12]
 800484e:	f000 f838 	bl	80048c2 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	2208      	movs	r2, #8
 8004856:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	2200      	movs	r2, #0
 800485e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

           return HAL_ERROR;
 8004862:	2301      	movs	r3, #1
 8004864:	e029      	b.n	80048ba <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	69db      	ldr	r3, [r3, #28]
 800486c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004870:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004874:	d111      	bne.n	800489a <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800487e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004880:	68f8      	ldr	r0, [r7, #12]
 8004882:	f000 f81e 	bl	80048c2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	2220      	movs	r2, #32
 800488a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	2200      	movs	r2, #0
 8004892:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8004896:	2303      	movs	r3, #3
 8004898:	e00f      	b.n	80048ba <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	69da      	ldr	r2, [r3, #28]
 80048a0:	68bb      	ldr	r3, [r7, #8]
 80048a2:	4013      	ands	r3, r2
 80048a4:	68ba      	ldr	r2, [r7, #8]
 80048a6:	429a      	cmp	r2, r3
 80048a8:	bf0c      	ite	eq
 80048aa:	2301      	moveq	r3, #1
 80048ac:	2300      	movne	r3, #0
 80048ae:	b2db      	uxtb	r3, r3
 80048b0:	461a      	mov	r2, r3
 80048b2:	79fb      	ldrb	r3, [r7, #7]
 80048b4:	429a      	cmp	r2, r3
 80048b6:	d0a6      	beq.n	8004806 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80048b8:	2300      	movs	r3, #0
}
 80048ba:	4618      	mov	r0, r3
 80048bc:	3710      	adds	r7, #16
 80048be:	46bd      	mov	sp, r7
 80048c0:	bd80      	pop	{r7, pc}

080048c2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80048c2:	b480      	push	{r7}
 80048c4:	b095      	sub	sp, #84	; 0x54
 80048c6:	af00      	add	r7, sp, #0
 80048c8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80048d2:	e853 3f00 	ldrex	r3, [r3]
 80048d6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80048d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048da:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80048de:	64fb      	str	r3, [r7, #76]	; 0x4c
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	461a      	mov	r2, r3
 80048e6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80048e8:	643b      	str	r3, [r7, #64]	; 0x40
 80048ea:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048ec:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80048ee:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80048f0:	e841 2300 	strex	r3, r2, [r1]
 80048f4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80048f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d1e6      	bne.n	80048ca <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	3308      	adds	r3, #8
 8004902:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004904:	6a3b      	ldr	r3, [r7, #32]
 8004906:	e853 3f00 	ldrex	r3, [r3]
 800490a:	61fb      	str	r3, [r7, #28]
   return(result);
 800490c:	69fb      	ldr	r3, [r7, #28]
 800490e:	f023 0301 	bic.w	r3, r3, #1
 8004912:	64bb      	str	r3, [r7, #72]	; 0x48
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	3308      	adds	r3, #8
 800491a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800491c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800491e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004920:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004922:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004924:	e841 2300 	strex	r3, r2, [r1]
 8004928:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800492a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800492c:	2b00      	cmp	r3, #0
 800492e:	d1e5      	bne.n	80048fc <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004934:	2b01      	cmp	r3, #1
 8004936:	d118      	bne.n	800496a <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	e853 3f00 	ldrex	r3, [r3]
 8004944:	60bb      	str	r3, [r7, #8]
   return(result);
 8004946:	68bb      	ldr	r3, [r7, #8]
 8004948:	f023 0310 	bic.w	r3, r3, #16
 800494c:	647b      	str	r3, [r7, #68]	; 0x44
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	461a      	mov	r2, r3
 8004954:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004956:	61bb      	str	r3, [r7, #24]
 8004958:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800495a:	6979      	ldr	r1, [r7, #20]
 800495c:	69ba      	ldr	r2, [r7, #24]
 800495e:	e841 2300 	strex	r3, r2, [r1]
 8004962:	613b      	str	r3, [r7, #16]
   return(result);
 8004964:	693b      	ldr	r3, [r7, #16]
 8004966:	2b00      	cmp	r3, #0
 8004968:	d1e6      	bne.n	8004938 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	2220      	movs	r2, #32
 800496e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	2200      	movs	r2, #0
 8004976:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	2200      	movs	r2, #0
 800497c:	669a      	str	r2, [r3, #104]	; 0x68
}
 800497e:	bf00      	nop
 8004980:	3754      	adds	r7, #84	; 0x54
 8004982:	46bd      	mov	sp, r7
 8004984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004988:	4770      	bx	lr
	...

0800498c <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800498c:	b580      	push	{r7, lr}
 800498e:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8004990:	4904      	ldr	r1, [pc, #16]	; (80049a4 <MX_FATFS_Init+0x18>)
 8004992:	4805      	ldr	r0, [pc, #20]	; (80049a8 <MX_FATFS_Init+0x1c>)
 8004994:	f000 fd88 	bl	80054a8 <FATFS_LinkDriver>
 8004998:	4603      	mov	r3, r0
 800499a:	461a      	mov	r2, r3
 800499c:	4b03      	ldr	r3, [pc, #12]	; (80049ac <MX_FATFS_Init+0x20>)
 800499e:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 80049a0:	bf00      	nop
 80049a2:	bd80      	pop	{r7, pc}
 80049a4:	2000044c 	.word	0x2000044c
 80049a8:	2000000c 	.word	0x2000000c
 80049ac:	20000448 	.word	0x20000448

080049b0 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 80049b0:	b580      	push	{r7, lr}
 80049b2:	b082      	sub	sp, #8
 80049b4:	af00      	add	r7, sp, #0
 80049b6:	4603      	mov	r3, r0
 80049b8:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    return USER_SPI_initialize(pdrv);
 80049ba:	79fb      	ldrb	r3, [r7, #7]
 80049bc:	4618      	mov	r0, r3
 80049be:	f000 f9d3 	bl	8004d68 <USER_SPI_initialize>
 80049c2:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 80049c4:	4618      	mov	r0, r3
 80049c6:	3708      	adds	r7, #8
 80049c8:	46bd      	mov	sp, r7
 80049ca:	bd80      	pop	{r7, pc}

080049cc <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 80049cc:	b580      	push	{r7, lr}
 80049ce:	b082      	sub	sp, #8
 80049d0:	af00      	add	r7, sp, #0
 80049d2:	4603      	mov	r3, r0
 80049d4:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
	return USER_SPI_status(pdrv);
 80049d6:	79fb      	ldrb	r3, [r7, #7]
 80049d8:	4618      	mov	r0, r3
 80049da:	f000 fab1 	bl	8004f40 <USER_SPI_status>
 80049de:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 80049e0:	4618      	mov	r0, r3
 80049e2:	3708      	adds	r7, #8
 80049e4:	46bd      	mov	sp, r7
 80049e6:	bd80      	pop	{r7, pc}

080049e8 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 80049e8:	b580      	push	{r7, lr}
 80049ea:	b084      	sub	sp, #16
 80049ec:	af00      	add	r7, sp, #0
 80049ee:	60b9      	str	r1, [r7, #8]
 80049f0:	607a      	str	r2, [r7, #4]
 80049f2:	603b      	str	r3, [r7, #0]
 80049f4:	4603      	mov	r3, r0
 80049f6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
	return USER_SPI_read(pdrv, buff, sector, count);
 80049f8:	7bf8      	ldrb	r0, [r7, #15]
 80049fa:	683b      	ldr	r3, [r7, #0]
 80049fc:	687a      	ldr	r2, [r7, #4]
 80049fe:	68b9      	ldr	r1, [r7, #8]
 8004a00:	f000 fab4 	bl	8004f6c <USER_SPI_read>
 8004a04:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 8004a06:	4618      	mov	r0, r3
 8004a08:	3710      	adds	r7, #16
 8004a0a:	46bd      	mov	sp, r7
 8004a0c:	bd80      	pop	{r7, pc}

08004a0e <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 8004a0e:	b580      	push	{r7, lr}
 8004a10:	b084      	sub	sp, #16
 8004a12:	af00      	add	r7, sp, #0
 8004a14:	60b9      	str	r1, [r7, #8]
 8004a16:	607a      	str	r2, [r7, #4]
 8004a18:	603b      	str	r3, [r7, #0]
 8004a1a:	4603      	mov	r3, r0
 8004a1c:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
	return USER_SPI_write(pdrv, buff, sector, count);
 8004a1e:	7bf8      	ldrb	r0, [r7, #15]
 8004a20:	683b      	ldr	r3, [r7, #0]
 8004a22:	687a      	ldr	r2, [r7, #4]
 8004a24:	68b9      	ldr	r1, [r7, #8]
 8004a26:	f000 fb07 	bl	8005038 <USER_SPI_write>
 8004a2a:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 8004a2c:	4618      	mov	r0, r3
 8004a2e:	3710      	adds	r7, #16
 8004a30:	46bd      	mov	sp, r7
 8004a32:	bd80      	pop	{r7, pc}

08004a34 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8004a34:	b580      	push	{r7, lr}
 8004a36:	b082      	sub	sp, #8
 8004a38:	af00      	add	r7, sp, #0
 8004a3a:	4603      	mov	r3, r0
 8004a3c:	603a      	str	r2, [r7, #0]
 8004a3e:	71fb      	strb	r3, [r7, #7]
 8004a40:	460b      	mov	r3, r1
 8004a42:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
	return USER_SPI_ioctl(pdrv, cmd, buff);
 8004a44:	79b9      	ldrb	r1, [r7, #6]
 8004a46:	79fb      	ldrb	r3, [r7, #7]
 8004a48:	683a      	ldr	r2, [r7, #0]
 8004a4a:	4618      	mov	r0, r3
 8004a4c:	f000 fb70 	bl	8005130 <USER_SPI_ioctl>
 8004a50:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 8004a52:	4618      	mov	r0, r3
 8004a54:	3708      	adds	r7, #8
 8004a56:	46bd      	mov	sp, r7
 8004a58:	bd80      	pop	{r7, pc}
	...

08004a5c <SPI_Timer_On>:
BYTE CardType;			/* Card type flags */

uint32_t spiTimerTickStart;
uint32_t spiTimerTickDelay;

void SPI_Timer_On(uint32_t waitTicks) {
 8004a5c:	b580      	push	{r7, lr}
 8004a5e:	b082      	sub	sp, #8
 8004a60:	af00      	add	r7, sp, #0
 8004a62:	6078      	str	r0, [r7, #4]
    spiTimerTickStart = HAL_GetTick();
 8004a64:	f7fc f928 	bl	8000cb8 <HAL_GetTick>
 8004a68:	4603      	mov	r3, r0
 8004a6a:	4a04      	ldr	r2, [pc, #16]	; (8004a7c <SPI_Timer_On+0x20>)
 8004a6c:	6013      	str	r3, [r2, #0]
    spiTimerTickDelay = waitTicks;
 8004a6e:	4a04      	ldr	r2, [pc, #16]	; (8004a80 <SPI_Timer_On+0x24>)
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	6013      	str	r3, [r2, #0]
}
 8004a74:	bf00      	nop
 8004a76:	3708      	adds	r7, #8
 8004a78:	46bd      	mov	sp, r7
 8004a7a:	bd80      	pop	{r7, pc}
 8004a7c:	20000454 	.word	0x20000454
 8004a80:	20000458 	.word	0x20000458

08004a84 <SPI_Timer_Status>:

uint8_t SPI_Timer_Status() {
 8004a84:	b580      	push	{r7, lr}
 8004a86:	af00      	add	r7, sp, #0
    return ((HAL_GetTick() - spiTimerTickStart) < spiTimerTickDelay);
 8004a88:	f7fc f916 	bl	8000cb8 <HAL_GetTick>
 8004a8c:	4602      	mov	r2, r0
 8004a8e:	4b06      	ldr	r3, [pc, #24]	; (8004aa8 <SPI_Timer_Status+0x24>)
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	1ad2      	subs	r2, r2, r3
 8004a94:	4b05      	ldr	r3, [pc, #20]	; (8004aac <SPI_Timer_Status+0x28>)
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	429a      	cmp	r2, r3
 8004a9a:	bf34      	ite	cc
 8004a9c:	2301      	movcc	r3, #1
 8004a9e:	2300      	movcs	r3, #0
 8004aa0:	b2db      	uxtb	r3, r3
}
 8004aa2:	4618      	mov	r0, r3
 8004aa4:	bd80      	pop	{r7, pc}
 8004aa6:	bf00      	nop
 8004aa8:	20000454 	.word	0x20000454
 8004aac:	20000458 	.word	0x20000458

08004ab0 <xchg_spi>:
/* Exchange a byte */
static
BYTE xchg_spi (
	BYTE dat	/* Data to send */
)
{
 8004ab0:	b580      	push	{r7, lr}
 8004ab2:	b086      	sub	sp, #24
 8004ab4:	af02      	add	r7, sp, #8
 8004ab6:	4603      	mov	r3, r0
 8004ab8:	71fb      	strb	r3, [r7, #7]
	BYTE rxDat;
    HAL_SPI_TransmitReceive(&SD_SPI_HANDLE, &dat, &rxDat, 1, 50);
 8004aba:	f107 020f 	add.w	r2, r7, #15
 8004abe:	1df9      	adds	r1, r7, #7
 8004ac0:	2332      	movs	r3, #50	; 0x32
 8004ac2:	9300      	str	r3, [sp, #0]
 8004ac4:	2301      	movs	r3, #1
 8004ac6:	4804      	ldr	r0, [pc, #16]	; (8004ad8 <xchg_spi+0x28>)
 8004ac8:	f7fe fccc 	bl	8003464 <HAL_SPI_TransmitReceive>
    return rxDat;
 8004acc:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ace:	4618      	mov	r0, r3
 8004ad0:	3710      	adds	r7, #16
 8004ad2:	46bd      	mov	sp, r7
 8004ad4:	bd80      	pop	{r7, pc}
 8004ad6:	bf00      	nop
 8004ad8:	20000170 	.word	0x20000170

08004adc <rcvr_spi_multi>:
static
void rcvr_spi_multi (
	BYTE *buff,		/* Pointer to data buffer */
	UINT btr		/* Number of bytes to receive (even number) */
)
{
 8004adc:	b590      	push	{r4, r7, lr}
 8004ade:	b085      	sub	sp, #20
 8004ae0:	af00      	add	r7, sp, #0
 8004ae2:	6078      	str	r0, [r7, #4]
 8004ae4:	6039      	str	r1, [r7, #0]
	for(UINT i=0; i<btr; i++) {
 8004ae6:	2300      	movs	r3, #0
 8004ae8:	60fb      	str	r3, [r7, #12]
 8004aea:	e00a      	b.n	8004b02 <rcvr_spi_multi+0x26>
		*(buff+i) = xchg_spi(0xFF);
 8004aec:	687a      	ldr	r2, [r7, #4]
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	18d4      	adds	r4, r2, r3
 8004af2:	20ff      	movs	r0, #255	; 0xff
 8004af4:	f7ff ffdc 	bl	8004ab0 <xchg_spi>
 8004af8:	4603      	mov	r3, r0
 8004afa:	7023      	strb	r3, [r4, #0]
	for(UINT i=0; i<btr; i++) {
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	3301      	adds	r3, #1
 8004b00:	60fb      	str	r3, [r7, #12]
 8004b02:	68fa      	ldr	r2, [r7, #12]
 8004b04:	683b      	ldr	r3, [r7, #0]
 8004b06:	429a      	cmp	r2, r3
 8004b08:	d3f0      	bcc.n	8004aec <rcvr_spi_multi+0x10>
	}
}
 8004b0a:	bf00      	nop
 8004b0c:	bf00      	nop
 8004b0e:	3714      	adds	r7, #20
 8004b10:	46bd      	mov	sp, r7
 8004b12:	bd90      	pop	{r4, r7, pc}

08004b14 <xmit_spi_multi>:
static
void xmit_spi_multi (
	const BYTE *buff,	/* Pointer to the data */
	UINT btx			/* Number of bytes to send (even number) */
)
{
 8004b14:	b580      	push	{r7, lr}
 8004b16:	b082      	sub	sp, #8
 8004b18:	af00      	add	r7, sp, #0
 8004b1a:	6078      	str	r0, [r7, #4]
 8004b1c:	6039      	str	r1, [r7, #0]
	HAL_SPI_Transmit(&SD_SPI_HANDLE, buff, btx, HAL_MAX_DELAY);
 8004b1e:	683b      	ldr	r3, [r7, #0]
 8004b20:	b29a      	uxth	r2, r3
 8004b22:	f04f 33ff 	mov.w	r3, #4294967295
 8004b26:	6879      	ldr	r1, [r7, #4]
 8004b28:	4803      	ldr	r0, [pc, #12]	; (8004b38 <xmit_spi_multi+0x24>)
 8004b2a:	f7fe fb26 	bl	800317a <HAL_SPI_Transmit>
}
 8004b2e:	bf00      	nop
 8004b30:	3708      	adds	r7, #8
 8004b32:	46bd      	mov	sp, r7
 8004b34:	bd80      	pop	{r7, pc}
 8004b36:	bf00      	nop
 8004b38:	20000170 	.word	0x20000170

08004b3c <wait_ready>:

static
int wait_ready (	/* 1:Ready, 0:Timeout */
	UINT wt			/* Timeout [ms] */
)
{
 8004b3c:	b580      	push	{r7, lr}
 8004b3e:	b086      	sub	sp, #24
 8004b40:	af00      	add	r7, sp, #0
 8004b42:	6078      	str	r0, [r7, #4]
	//wait_ready needs its own timer, unfortunately, so it can't use the
	//spi_timer functions
	uint32_t waitSpiTimerTickStart;
	uint32_t waitSpiTimerTickDelay;

	waitSpiTimerTickStart = HAL_GetTick();
 8004b44:	f7fc f8b8 	bl	8000cb8 <HAL_GetTick>
 8004b48:	6178      	str	r0, [r7, #20]
	waitSpiTimerTickDelay = (uint32_t)wt;
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	613b      	str	r3, [r7, #16]
	do {
		d = xchg_spi(0xFF);
 8004b4e:	20ff      	movs	r0, #255	; 0xff
 8004b50:	f7ff ffae 	bl	8004ab0 <xchg_spi>
 8004b54:	4603      	mov	r3, r0
 8004b56:	73fb      	strb	r3, [r7, #15]
		/* This loop takes a time. Insert rot_rdq() here for multitask envilonment. */
	} while (d != 0xFF && ((HAL_GetTick() - waitSpiTimerTickStart) < waitSpiTimerTickDelay));	/* Wait for card goes ready or timeout */
 8004b58:	7bfb      	ldrb	r3, [r7, #15]
 8004b5a:	2bff      	cmp	r3, #255	; 0xff
 8004b5c:	d007      	beq.n	8004b6e <wait_ready+0x32>
 8004b5e:	f7fc f8ab 	bl	8000cb8 <HAL_GetTick>
 8004b62:	4602      	mov	r2, r0
 8004b64:	697b      	ldr	r3, [r7, #20]
 8004b66:	1ad3      	subs	r3, r2, r3
 8004b68:	693a      	ldr	r2, [r7, #16]
 8004b6a:	429a      	cmp	r2, r3
 8004b6c:	d8ef      	bhi.n	8004b4e <wait_ready+0x12>

	return (d == 0xFF) ? 1 : 0;
 8004b6e:	7bfb      	ldrb	r3, [r7, #15]
 8004b70:	2bff      	cmp	r3, #255	; 0xff
 8004b72:	bf0c      	ite	eq
 8004b74:	2301      	moveq	r3, #1
 8004b76:	2300      	movne	r3, #0
 8004b78:	b2db      	uxtb	r3, r3
}
 8004b7a:	4618      	mov	r0, r3
 8004b7c:	3718      	adds	r7, #24
 8004b7e:	46bd      	mov	sp, r7
 8004b80:	bd80      	pop	{r7, pc}
	...

08004b84 <despiselect>:
/* Despiselect card and release SPI                                         */
/*-----------------------------------------------------------------------*/

static
void despiselect (void)
{
 8004b84:	b580      	push	{r7, lr}
 8004b86:	af00      	add	r7, sp, #0
	CS_HIGH();		/* Set CS# high */
 8004b88:	2201      	movs	r2, #1
 8004b8a:	2102      	movs	r1, #2
 8004b8c:	4803      	ldr	r0, [pc, #12]	; (8004b9c <despiselect+0x18>)
 8004b8e:	f7fc fc31 	bl	80013f4 <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO hi-z for multiple slave SPI) */
 8004b92:	20ff      	movs	r0, #255	; 0xff
 8004b94:	f7ff ff8c 	bl	8004ab0 <xchg_spi>

}
 8004b98:	bf00      	nop
 8004b9a:	bd80      	pop	{r7, pc}
 8004b9c:	48000400 	.word	0x48000400

08004ba0 <spiselect>:
/* Select card and wait for ready                                        */
/*-----------------------------------------------------------------------*/

static
int spiselect (void)	/* 1:OK, 0:Timeout */
{
 8004ba0:	b580      	push	{r7, lr}
 8004ba2:	af00      	add	r7, sp, #0
	CS_LOW();		/* Set CS# low */
 8004ba4:	2200      	movs	r2, #0
 8004ba6:	2102      	movs	r1, #2
 8004ba8:	4809      	ldr	r0, [pc, #36]	; (8004bd0 <spiselect+0x30>)
 8004baa:	f7fc fc23 	bl	80013f4 <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO enabled) */
 8004bae:	20ff      	movs	r0, #255	; 0xff
 8004bb0:	f7ff ff7e 	bl	8004ab0 <xchg_spi>
	if (wait_ready(500)) return 1;	/* Wait for card ready */
 8004bb4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8004bb8:	f7ff ffc0 	bl	8004b3c <wait_ready>
 8004bbc:	4603      	mov	r3, r0
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d001      	beq.n	8004bc6 <spiselect+0x26>
 8004bc2:	2301      	movs	r3, #1
 8004bc4:	e002      	b.n	8004bcc <spiselect+0x2c>

	despiselect();
 8004bc6:	f7ff ffdd 	bl	8004b84 <despiselect>
	return 0;	/* Timeout */
 8004bca:	2300      	movs	r3, #0
}
 8004bcc:	4618      	mov	r0, r3
 8004bce:	bd80      	pop	{r7, pc}
 8004bd0:	48000400 	.word	0x48000400

08004bd4 <rcvr_datablock>:
static
int rcvr_datablock (	/* 1:OK, 0:Error */
	BYTE *buff,			/* Data buffer */
	UINT btr			/* Data block length (byte) */
)
{
 8004bd4:	b580      	push	{r7, lr}
 8004bd6:	b084      	sub	sp, #16
 8004bd8:	af00      	add	r7, sp, #0
 8004bda:	6078      	str	r0, [r7, #4]
 8004bdc:	6039      	str	r1, [r7, #0]
	BYTE token;


	SPI_Timer_On(200);
 8004bde:	20c8      	movs	r0, #200	; 0xc8
 8004be0:	f7ff ff3c 	bl	8004a5c <SPI_Timer_On>
	do {							/* Wait for DataStart token in timeout of 200ms */
		token = xchg_spi(0xFF);
 8004be4:	20ff      	movs	r0, #255	; 0xff
 8004be6:	f7ff ff63 	bl	8004ab0 <xchg_spi>
 8004bea:	4603      	mov	r3, r0
 8004bec:	73fb      	strb	r3, [r7, #15]
		/* This loop will take a time. Insert rot_rdq() here for multitask envilonment. */
	} while ((token == 0xFF) && SPI_Timer_Status());
 8004bee:	7bfb      	ldrb	r3, [r7, #15]
 8004bf0:	2bff      	cmp	r3, #255	; 0xff
 8004bf2:	d104      	bne.n	8004bfe <rcvr_datablock+0x2a>
 8004bf4:	f7ff ff46 	bl	8004a84 <SPI_Timer_Status>
 8004bf8:	4603      	mov	r3, r0
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d1f2      	bne.n	8004be4 <rcvr_datablock+0x10>
	if(token != 0xFE) return 0;		/* Function fails if invalid DataStart token or timeout */
 8004bfe:	7bfb      	ldrb	r3, [r7, #15]
 8004c00:	2bfe      	cmp	r3, #254	; 0xfe
 8004c02:	d001      	beq.n	8004c08 <rcvr_datablock+0x34>
 8004c04:	2300      	movs	r3, #0
 8004c06:	e00a      	b.n	8004c1e <rcvr_datablock+0x4a>

	rcvr_spi_multi(buff, btr);		/* Store trailing data to the buffer */
 8004c08:	6839      	ldr	r1, [r7, #0]
 8004c0a:	6878      	ldr	r0, [r7, #4]
 8004c0c:	f7ff ff66 	bl	8004adc <rcvr_spi_multi>
	xchg_spi(0xFF); xchg_spi(0xFF);			/* Discard CRC */
 8004c10:	20ff      	movs	r0, #255	; 0xff
 8004c12:	f7ff ff4d 	bl	8004ab0 <xchg_spi>
 8004c16:	20ff      	movs	r0, #255	; 0xff
 8004c18:	f7ff ff4a 	bl	8004ab0 <xchg_spi>

	return 1;						/* Function succeeded */
 8004c1c:	2301      	movs	r3, #1
}
 8004c1e:	4618      	mov	r0, r3
 8004c20:	3710      	adds	r7, #16
 8004c22:	46bd      	mov	sp, r7
 8004c24:	bd80      	pop	{r7, pc}

08004c26 <xmit_datablock>:
static
int xmit_datablock (	/* 1:OK, 0:Failed */
	const BYTE *buff,	/* Ponter to 512 byte data to be sent */
	BYTE token			/* Token */
)
{
 8004c26:	b580      	push	{r7, lr}
 8004c28:	b084      	sub	sp, #16
 8004c2a:	af00      	add	r7, sp, #0
 8004c2c:	6078      	str	r0, [r7, #4]
 8004c2e:	460b      	mov	r3, r1
 8004c30:	70fb      	strb	r3, [r7, #3]
	BYTE resp;


	if (!wait_ready(500)) return 0;		/* Wait for card ready */
 8004c32:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8004c36:	f7ff ff81 	bl	8004b3c <wait_ready>
 8004c3a:	4603      	mov	r3, r0
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d101      	bne.n	8004c44 <xmit_datablock+0x1e>
 8004c40:	2300      	movs	r3, #0
 8004c42:	e01e      	b.n	8004c82 <xmit_datablock+0x5c>

	xchg_spi(token);					/* Send token */
 8004c44:	78fb      	ldrb	r3, [r7, #3]
 8004c46:	4618      	mov	r0, r3
 8004c48:	f7ff ff32 	bl	8004ab0 <xchg_spi>
	if (token != 0xFD) {				/* Send data if token is other than StopTran */
 8004c4c:	78fb      	ldrb	r3, [r7, #3]
 8004c4e:	2bfd      	cmp	r3, #253	; 0xfd
 8004c50:	d016      	beq.n	8004c80 <xmit_datablock+0x5a>
		xmit_spi_multi(buff, 512);		/* Data */
 8004c52:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004c56:	6878      	ldr	r0, [r7, #4]
 8004c58:	f7ff ff5c 	bl	8004b14 <xmit_spi_multi>
		xchg_spi(0xFF); xchg_spi(0xFF);	/* Dummy CRC */
 8004c5c:	20ff      	movs	r0, #255	; 0xff
 8004c5e:	f7ff ff27 	bl	8004ab0 <xchg_spi>
 8004c62:	20ff      	movs	r0, #255	; 0xff
 8004c64:	f7ff ff24 	bl	8004ab0 <xchg_spi>

		resp = xchg_spi(0xFF);				/* Receive data resp */
 8004c68:	20ff      	movs	r0, #255	; 0xff
 8004c6a:	f7ff ff21 	bl	8004ab0 <xchg_spi>
 8004c6e:	4603      	mov	r3, r0
 8004c70:	73fb      	strb	r3, [r7, #15]
		if ((resp & 0x1F) != 0x05) return 0;	/* Function fails if the data packet was not accepted */
 8004c72:	7bfb      	ldrb	r3, [r7, #15]
 8004c74:	f003 031f 	and.w	r3, r3, #31
 8004c78:	2b05      	cmp	r3, #5
 8004c7a:	d001      	beq.n	8004c80 <xmit_datablock+0x5a>
 8004c7c:	2300      	movs	r3, #0
 8004c7e:	e000      	b.n	8004c82 <xmit_datablock+0x5c>
	}
	return 1;
 8004c80:	2301      	movs	r3, #1
}
 8004c82:	4618      	mov	r0, r3
 8004c84:	3710      	adds	r7, #16
 8004c86:	46bd      	mov	sp, r7
 8004c88:	bd80      	pop	{r7, pc}

08004c8a <send_cmd>:
static
BYTE send_cmd (		/* Return value: R1 resp (bit7==1:Failed to send) */
	BYTE cmd,		/* Command index */
	DWORD arg		/* Argument */
)
{
 8004c8a:	b580      	push	{r7, lr}
 8004c8c:	b084      	sub	sp, #16
 8004c8e:	af00      	add	r7, sp, #0
 8004c90:	4603      	mov	r3, r0
 8004c92:	6039      	str	r1, [r7, #0]
 8004c94:	71fb      	strb	r3, [r7, #7]
	BYTE n, res;


	if (cmd & 0x80) {	/* Send a CMD55 prior to ACMD<n> */
 8004c96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	da0e      	bge.n	8004cbc <send_cmd+0x32>
		cmd &= 0x7F;
 8004c9e:	79fb      	ldrb	r3, [r7, #7]
 8004ca0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004ca4:	71fb      	strb	r3, [r7, #7]
		res = send_cmd(CMD55, 0);
 8004ca6:	2100      	movs	r1, #0
 8004ca8:	2037      	movs	r0, #55	; 0x37
 8004caa:	f7ff ffee 	bl	8004c8a <send_cmd>
 8004cae:	4603      	mov	r3, r0
 8004cb0:	73bb      	strb	r3, [r7, #14]
		if (res > 1) return res;
 8004cb2:	7bbb      	ldrb	r3, [r7, #14]
 8004cb4:	2b01      	cmp	r3, #1
 8004cb6:	d901      	bls.n	8004cbc <send_cmd+0x32>
 8004cb8:	7bbb      	ldrb	r3, [r7, #14]
 8004cba:	e051      	b.n	8004d60 <send_cmd+0xd6>
	}

	/* Select the card and wait for ready except to stop multiple block read */
	if (cmd != CMD12) {
 8004cbc:	79fb      	ldrb	r3, [r7, #7]
 8004cbe:	2b0c      	cmp	r3, #12
 8004cc0:	d008      	beq.n	8004cd4 <send_cmd+0x4a>
		despiselect();
 8004cc2:	f7ff ff5f 	bl	8004b84 <despiselect>
		if (!spiselect()) return 0xFF;
 8004cc6:	f7ff ff6b 	bl	8004ba0 <spiselect>
 8004cca:	4603      	mov	r3, r0
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d101      	bne.n	8004cd4 <send_cmd+0x4a>
 8004cd0:	23ff      	movs	r3, #255	; 0xff
 8004cd2:	e045      	b.n	8004d60 <send_cmd+0xd6>
	}

	/* Send command packet */
	xchg_spi(0x40 | cmd);				/* Start + command index */
 8004cd4:	79fb      	ldrb	r3, [r7, #7]
 8004cd6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004cda:	b2db      	uxtb	r3, r3
 8004cdc:	4618      	mov	r0, r3
 8004cde:	f7ff fee7 	bl	8004ab0 <xchg_spi>
	xchg_spi((BYTE)(arg >> 24));		/* Argument[31..24] */
 8004ce2:	683b      	ldr	r3, [r7, #0]
 8004ce4:	0e1b      	lsrs	r3, r3, #24
 8004ce6:	b2db      	uxtb	r3, r3
 8004ce8:	4618      	mov	r0, r3
 8004cea:	f7ff fee1 	bl	8004ab0 <xchg_spi>
	xchg_spi((BYTE)(arg >> 16));		/* Argument[23..16] */
 8004cee:	683b      	ldr	r3, [r7, #0]
 8004cf0:	0c1b      	lsrs	r3, r3, #16
 8004cf2:	b2db      	uxtb	r3, r3
 8004cf4:	4618      	mov	r0, r3
 8004cf6:	f7ff fedb 	bl	8004ab0 <xchg_spi>
	xchg_spi((BYTE)(arg >> 8));			/* Argument[15..8] */
 8004cfa:	683b      	ldr	r3, [r7, #0]
 8004cfc:	0a1b      	lsrs	r3, r3, #8
 8004cfe:	b2db      	uxtb	r3, r3
 8004d00:	4618      	mov	r0, r3
 8004d02:	f7ff fed5 	bl	8004ab0 <xchg_spi>
	xchg_spi((BYTE)arg);				/* Argument[7..0] */
 8004d06:	683b      	ldr	r3, [r7, #0]
 8004d08:	b2db      	uxtb	r3, r3
 8004d0a:	4618      	mov	r0, r3
 8004d0c:	f7ff fed0 	bl	8004ab0 <xchg_spi>
	n = 0x01;							/* Dummy CRC + Stop */
 8004d10:	2301      	movs	r3, #1
 8004d12:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) */
 8004d14:	79fb      	ldrb	r3, [r7, #7]
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d101      	bne.n	8004d1e <send_cmd+0x94>
 8004d1a:	2395      	movs	r3, #149	; 0x95
 8004d1c:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD8) n = 0x87;			/* Valid CRC for CMD8(0x1AA) */
 8004d1e:	79fb      	ldrb	r3, [r7, #7]
 8004d20:	2b08      	cmp	r3, #8
 8004d22:	d101      	bne.n	8004d28 <send_cmd+0x9e>
 8004d24:	2387      	movs	r3, #135	; 0x87
 8004d26:	73fb      	strb	r3, [r7, #15]
	xchg_spi(n);
 8004d28:	7bfb      	ldrb	r3, [r7, #15]
 8004d2a:	4618      	mov	r0, r3
 8004d2c:	f7ff fec0 	bl	8004ab0 <xchg_spi>

	/* Receive command resp */
	if (cmd == CMD12) xchg_spi(0xFF);	/* Diacard following one byte when CMD12 */
 8004d30:	79fb      	ldrb	r3, [r7, #7]
 8004d32:	2b0c      	cmp	r3, #12
 8004d34:	d102      	bne.n	8004d3c <send_cmd+0xb2>
 8004d36:	20ff      	movs	r0, #255	; 0xff
 8004d38:	f7ff feba 	bl	8004ab0 <xchg_spi>
	n = 10;								/* Wait for response (10 bytes max) */
 8004d3c:	230a      	movs	r3, #10
 8004d3e:	73fb      	strb	r3, [r7, #15]
	do {
		res = xchg_spi(0xFF);
 8004d40:	20ff      	movs	r0, #255	; 0xff
 8004d42:	f7ff feb5 	bl	8004ab0 <xchg_spi>
 8004d46:	4603      	mov	r3, r0
 8004d48:	73bb      	strb	r3, [r7, #14]
	} while ((res & 0x80) && --n);
 8004d4a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	da05      	bge.n	8004d5e <send_cmd+0xd4>
 8004d52:	7bfb      	ldrb	r3, [r7, #15]
 8004d54:	3b01      	subs	r3, #1
 8004d56:	73fb      	strb	r3, [r7, #15]
 8004d58:	7bfb      	ldrb	r3, [r7, #15]
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d1f0      	bne.n	8004d40 <send_cmd+0xb6>

	return res;							/* Return received response */
 8004d5e:	7bbb      	ldrb	r3, [r7, #14]
}
 8004d60:	4618      	mov	r0, r3
 8004d62:	3710      	adds	r7, #16
 8004d64:	46bd      	mov	sp, r7
 8004d66:	bd80      	pop	{r7, pc}

08004d68 <USER_SPI_initialize>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_initialize (
	BYTE drv		/* Physical drive number (0) */
)
{
 8004d68:	b590      	push	{r4, r7, lr}
 8004d6a:	b085      	sub	sp, #20
 8004d6c:	af00      	add	r7, sp, #0
 8004d6e:	4603      	mov	r3, r0
 8004d70:	71fb      	strb	r3, [r7, #7]
	BYTE n, cmd, ty, ocr[4];

	if (drv != 0) return STA_NOINIT;		/* Supports only drive 0 */
 8004d72:	79fb      	ldrb	r3, [r7, #7]
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d001      	beq.n	8004d7c <USER_SPI_initialize+0x14>
 8004d78:	2301      	movs	r3, #1
 8004d7a:	e0d6      	b.n	8004f2a <USER_SPI_initialize+0x1c2>
	//assume SPI already init init_spi();	/* Initialize SPI */

	if (Stat & STA_NODISK) return Stat;	/* Is card existing in the soket? */
 8004d7c:	4b6d      	ldr	r3, [pc, #436]	; (8004f34 <USER_SPI_initialize+0x1cc>)
 8004d7e:	781b      	ldrb	r3, [r3, #0]
 8004d80:	b2db      	uxtb	r3, r3
 8004d82:	f003 0302 	and.w	r3, r3, #2
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d003      	beq.n	8004d92 <USER_SPI_initialize+0x2a>
 8004d8a:	4b6a      	ldr	r3, [pc, #424]	; (8004f34 <USER_SPI_initialize+0x1cc>)
 8004d8c:	781b      	ldrb	r3, [r3, #0]
 8004d8e:	b2db      	uxtb	r3, r3
 8004d90:	e0cb      	b.n	8004f2a <USER_SPI_initialize+0x1c2>

	FCLK_SLOW();
 8004d92:	4b69      	ldr	r3, [pc, #420]	; (8004f38 <USER_SPI_initialize+0x1d0>)
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8004d9c:	4b66      	ldr	r3, [pc, #408]	; (8004f38 <USER_SPI_initialize+0x1d0>)
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	f042 0230 	orr.w	r2, r2, #48	; 0x30
 8004da4:	601a      	str	r2, [r3, #0]
	for (n = 10; n; n--) xchg_spi(0xFF);	/* Send 80 dummy clocks */
 8004da6:	230a      	movs	r3, #10
 8004da8:	73fb      	strb	r3, [r7, #15]
 8004daa:	e005      	b.n	8004db8 <USER_SPI_initialize+0x50>
 8004dac:	20ff      	movs	r0, #255	; 0xff
 8004dae:	f7ff fe7f 	bl	8004ab0 <xchg_spi>
 8004db2:	7bfb      	ldrb	r3, [r7, #15]
 8004db4:	3b01      	subs	r3, #1
 8004db6:	73fb      	strb	r3, [r7, #15]
 8004db8:	7bfb      	ldrb	r3, [r7, #15]
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d1f6      	bne.n	8004dac <USER_SPI_initialize+0x44>

	ty = 0;
 8004dbe:	2300      	movs	r3, #0
 8004dc0:	737b      	strb	r3, [r7, #13]
	if (send_cmd(CMD0, 0) == 1) {			/* Put the card SPI/Idle state */
 8004dc2:	2100      	movs	r1, #0
 8004dc4:	2000      	movs	r0, #0
 8004dc6:	f7ff ff60 	bl	8004c8a <send_cmd>
 8004dca:	4603      	mov	r3, r0
 8004dcc:	2b01      	cmp	r3, #1
 8004dce:	f040 808b 	bne.w	8004ee8 <USER_SPI_initialize+0x180>
		SPI_Timer_On(1000);					/* Initialization timeout = 1 sec */
 8004dd2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004dd6:	f7ff fe41 	bl	8004a5c <SPI_Timer_On>
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDv2? */
 8004dda:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8004dde:	2008      	movs	r0, #8
 8004de0:	f7ff ff53 	bl	8004c8a <send_cmd>
 8004de4:	4603      	mov	r3, r0
 8004de6:	2b01      	cmp	r3, #1
 8004de8:	d151      	bne.n	8004e8e <USER_SPI_initialize+0x126>
			for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);	/* Get 32 bit return value of R7 resp */
 8004dea:	2300      	movs	r3, #0
 8004dec:	73fb      	strb	r3, [r7, #15]
 8004dee:	e00d      	b.n	8004e0c <USER_SPI_initialize+0xa4>
 8004df0:	7bfc      	ldrb	r4, [r7, #15]
 8004df2:	20ff      	movs	r0, #255	; 0xff
 8004df4:	f7ff fe5c 	bl	8004ab0 <xchg_spi>
 8004df8:	4603      	mov	r3, r0
 8004dfa:	461a      	mov	r2, r3
 8004dfc:	f104 0310 	add.w	r3, r4, #16
 8004e00:	443b      	add	r3, r7
 8004e02:	f803 2c08 	strb.w	r2, [r3, #-8]
 8004e06:	7bfb      	ldrb	r3, [r7, #15]
 8004e08:	3301      	adds	r3, #1
 8004e0a:	73fb      	strb	r3, [r7, #15]
 8004e0c:	7bfb      	ldrb	r3, [r7, #15]
 8004e0e:	2b03      	cmp	r3, #3
 8004e10:	d9ee      	bls.n	8004df0 <USER_SPI_initialize+0x88>
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) {				/* Is the card supports vcc of 2.7-3.6V? */
 8004e12:	7abb      	ldrb	r3, [r7, #10]
 8004e14:	2b01      	cmp	r3, #1
 8004e16:	d167      	bne.n	8004ee8 <USER_SPI_initialize+0x180>
 8004e18:	7afb      	ldrb	r3, [r7, #11]
 8004e1a:	2baa      	cmp	r3, #170	; 0xaa
 8004e1c:	d164      	bne.n	8004ee8 <USER_SPI_initialize+0x180>
				while (SPI_Timer_Status() && send_cmd(ACMD41, 1UL << 30)) ;	/* Wait for end of initialization with ACMD41(HCS) */
 8004e1e:	bf00      	nop
 8004e20:	f7ff fe30 	bl	8004a84 <SPI_Timer_Status>
 8004e24:	4603      	mov	r3, r0
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d007      	beq.n	8004e3a <USER_SPI_initialize+0xd2>
 8004e2a:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8004e2e:	20a9      	movs	r0, #169	; 0xa9
 8004e30:	f7ff ff2b 	bl	8004c8a <send_cmd>
 8004e34:	4603      	mov	r3, r0
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d1f2      	bne.n	8004e20 <USER_SPI_initialize+0xb8>
				if (SPI_Timer_Status() && send_cmd(CMD58, 0) == 0) {		/* Check CCS bit in the OCR */
 8004e3a:	f7ff fe23 	bl	8004a84 <SPI_Timer_Status>
 8004e3e:	4603      	mov	r3, r0
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d051      	beq.n	8004ee8 <USER_SPI_initialize+0x180>
 8004e44:	2100      	movs	r1, #0
 8004e46:	203a      	movs	r0, #58	; 0x3a
 8004e48:	f7ff ff1f 	bl	8004c8a <send_cmd>
 8004e4c:	4603      	mov	r3, r0
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d14a      	bne.n	8004ee8 <USER_SPI_initialize+0x180>
					for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);
 8004e52:	2300      	movs	r3, #0
 8004e54:	73fb      	strb	r3, [r7, #15]
 8004e56:	e00d      	b.n	8004e74 <USER_SPI_initialize+0x10c>
 8004e58:	7bfc      	ldrb	r4, [r7, #15]
 8004e5a:	20ff      	movs	r0, #255	; 0xff
 8004e5c:	f7ff fe28 	bl	8004ab0 <xchg_spi>
 8004e60:	4603      	mov	r3, r0
 8004e62:	461a      	mov	r2, r3
 8004e64:	f104 0310 	add.w	r3, r4, #16
 8004e68:	443b      	add	r3, r7
 8004e6a:	f803 2c08 	strb.w	r2, [r3, #-8]
 8004e6e:	7bfb      	ldrb	r3, [r7, #15]
 8004e70:	3301      	adds	r3, #1
 8004e72:	73fb      	strb	r3, [r7, #15]
 8004e74:	7bfb      	ldrb	r3, [r7, #15]
 8004e76:	2b03      	cmp	r3, #3
 8004e78:	d9ee      	bls.n	8004e58 <USER_SPI_initialize+0xf0>
					ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* Card id SDv2 */
 8004e7a:	7a3b      	ldrb	r3, [r7, #8]
 8004e7c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d001      	beq.n	8004e88 <USER_SPI_initialize+0x120>
 8004e84:	230c      	movs	r3, #12
 8004e86:	e000      	b.n	8004e8a <USER_SPI_initialize+0x122>
 8004e88:	2304      	movs	r3, #4
 8004e8a:	737b      	strb	r3, [r7, #13]
 8004e8c:	e02c      	b.n	8004ee8 <USER_SPI_initialize+0x180>
				}
			}
		} else {	/* Not SDv2 card */
			if (send_cmd(ACMD41, 0) <= 1) 	{	/* SDv1 or MMC? */
 8004e8e:	2100      	movs	r1, #0
 8004e90:	20a9      	movs	r0, #169	; 0xa9
 8004e92:	f7ff fefa 	bl	8004c8a <send_cmd>
 8004e96:	4603      	mov	r3, r0
 8004e98:	2b01      	cmp	r3, #1
 8004e9a:	d804      	bhi.n	8004ea6 <USER_SPI_initialize+0x13e>
				ty = CT_SD1; cmd = ACMD41;	/* SDv1 (ACMD41(0)) */
 8004e9c:	2302      	movs	r3, #2
 8004e9e:	737b      	strb	r3, [r7, #13]
 8004ea0:	23a9      	movs	r3, #169	; 0xa9
 8004ea2:	73bb      	strb	r3, [r7, #14]
 8004ea4:	e003      	b.n	8004eae <USER_SPI_initialize+0x146>
			} else {
				ty = CT_MMC; cmd = CMD1;	/* MMCv3 (CMD1(0)) */
 8004ea6:	2301      	movs	r3, #1
 8004ea8:	737b      	strb	r3, [r7, #13]
 8004eaa:	2301      	movs	r3, #1
 8004eac:	73bb      	strb	r3, [r7, #14]
			}
			while (SPI_Timer_Status() && send_cmd(cmd, 0)) ;		/* Wait for end of initialization */
 8004eae:	bf00      	nop
 8004eb0:	f7ff fde8 	bl	8004a84 <SPI_Timer_Status>
 8004eb4:	4603      	mov	r3, r0
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d007      	beq.n	8004eca <USER_SPI_initialize+0x162>
 8004eba:	7bbb      	ldrb	r3, [r7, #14]
 8004ebc:	2100      	movs	r1, #0
 8004ebe:	4618      	mov	r0, r3
 8004ec0:	f7ff fee3 	bl	8004c8a <send_cmd>
 8004ec4:	4603      	mov	r3, r0
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d1f2      	bne.n	8004eb0 <USER_SPI_initialize+0x148>
			if (!SPI_Timer_Status() || send_cmd(CMD16, 512) != 0)	/* Set block length: 512 */
 8004eca:	f7ff fddb 	bl	8004a84 <SPI_Timer_Status>
 8004ece:	4603      	mov	r3, r0
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d007      	beq.n	8004ee4 <USER_SPI_initialize+0x17c>
 8004ed4:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004ed8:	2010      	movs	r0, #16
 8004eda:	f7ff fed6 	bl	8004c8a <send_cmd>
 8004ede:	4603      	mov	r3, r0
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d001      	beq.n	8004ee8 <USER_SPI_initialize+0x180>
				ty = 0;
 8004ee4:	2300      	movs	r3, #0
 8004ee6:	737b      	strb	r3, [r7, #13]
		}
	}
	CardType = ty;	/* Card type */
 8004ee8:	4a14      	ldr	r2, [pc, #80]	; (8004f3c <USER_SPI_initialize+0x1d4>)
 8004eea:	7b7b      	ldrb	r3, [r7, #13]
 8004eec:	7013      	strb	r3, [r2, #0]
	despiselect();
 8004eee:	f7ff fe49 	bl	8004b84 <despiselect>

	if (ty) {			/* OK */
 8004ef2:	7b7b      	ldrb	r3, [r7, #13]
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d012      	beq.n	8004f1e <USER_SPI_initialize+0x1b6>
		FCLK_FAST();			/* Set fast clock */
 8004ef8:	4b0f      	ldr	r3, [pc, #60]	; (8004f38 <USER_SPI_initialize+0x1d0>)
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8004f02:	4b0d      	ldr	r3, [pc, #52]	; (8004f38 <USER_SPI_initialize+0x1d0>)
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	f042 0210 	orr.w	r2, r2, #16
 8004f0a:	601a      	str	r2, [r3, #0]
		Stat &= ~STA_NOINIT;	/* Clear STA_NOINIT flag */
 8004f0c:	4b09      	ldr	r3, [pc, #36]	; (8004f34 <USER_SPI_initialize+0x1cc>)
 8004f0e:	781b      	ldrb	r3, [r3, #0]
 8004f10:	b2db      	uxtb	r3, r3
 8004f12:	f023 0301 	bic.w	r3, r3, #1
 8004f16:	b2da      	uxtb	r2, r3
 8004f18:	4b06      	ldr	r3, [pc, #24]	; (8004f34 <USER_SPI_initialize+0x1cc>)
 8004f1a:	701a      	strb	r2, [r3, #0]
 8004f1c:	e002      	b.n	8004f24 <USER_SPI_initialize+0x1bc>
	} else {			/* Failed */
		Stat = STA_NOINIT;
 8004f1e:	4b05      	ldr	r3, [pc, #20]	; (8004f34 <USER_SPI_initialize+0x1cc>)
 8004f20:	2201      	movs	r2, #1
 8004f22:	701a      	strb	r2, [r3, #0]
	}

	return Stat;
 8004f24:	4b03      	ldr	r3, [pc, #12]	; (8004f34 <USER_SPI_initialize+0x1cc>)
 8004f26:	781b      	ldrb	r3, [r3, #0]
 8004f28:	b2db      	uxtb	r3, r3
}
 8004f2a:	4618      	mov	r0, r3
 8004f2c:	3714      	adds	r7, #20
 8004f2e:	46bd      	mov	sp, r7
 8004f30:	bd90      	pop	{r4, r7, pc}
 8004f32:	bf00      	nop
 8004f34:	20000020 	.word	0x20000020
 8004f38:	20000170 	.word	0x20000170
 8004f3c:	20000450 	.word	0x20000450

08004f40 <USER_SPI_status>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_status (
	BYTE drv		/* Physical drive number (0) */
)
{
 8004f40:	b480      	push	{r7}
 8004f42:	b083      	sub	sp, #12
 8004f44:	af00      	add	r7, sp, #0
 8004f46:	4603      	mov	r3, r0
 8004f48:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;		/* Supports only drive 0 */
 8004f4a:	79fb      	ldrb	r3, [r7, #7]
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d001      	beq.n	8004f54 <USER_SPI_status+0x14>
 8004f50:	2301      	movs	r3, #1
 8004f52:	e002      	b.n	8004f5a <USER_SPI_status+0x1a>

	return Stat;	/* Return disk status */
 8004f54:	4b04      	ldr	r3, [pc, #16]	; (8004f68 <USER_SPI_status+0x28>)
 8004f56:	781b      	ldrb	r3, [r3, #0]
 8004f58:	b2db      	uxtb	r3, r3
}
 8004f5a:	4618      	mov	r0, r3
 8004f5c:	370c      	adds	r7, #12
 8004f5e:	46bd      	mov	sp, r7
 8004f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f64:	4770      	bx	lr
 8004f66:	bf00      	nop
 8004f68:	20000020 	.word	0x20000020

08004f6c <USER_SPI_read>:
	BYTE drv,		/* Physical drive number (0) */
	BYTE *buff,		/* Pointer to the data buffer to store read data */
	DWORD sector,	/* Start sector number (LBA) */
	UINT count		/* Number of sectors to read (1..128) */
)
{
 8004f6c:	b580      	push	{r7, lr}
 8004f6e:	b084      	sub	sp, #16
 8004f70:	af00      	add	r7, sp, #0
 8004f72:	60b9      	str	r1, [r7, #8]
 8004f74:	607a      	str	r2, [r7, #4]
 8004f76:	603b      	str	r3, [r7, #0]
 8004f78:	4603      	mov	r3, r0
 8004f7a:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 8004f7c:	7bfb      	ldrb	r3, [r7, #15]
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d102      	bne.n	8004f88 <USER_SPI_read+0x1c>
 8004f82:	683b      	ldr	r3, [r7, #0]
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	d101      	bne.n	8004f8c <USER_SPI_read+0x20>
 8004f88:	2304      	movs	r3, #4
 8004f8a:	e04d      	b.n	8005028 <USER_SPI_read+0xbc>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 8004f8c:	4b28      	ldr	r3, [pc, #160]	; (8005030 <USER_SPI_read+0xc4>)
 8004f8e:	781b      	ldrb	r3, [r3, #0]
 8004f90:	b2db      	uxtb	r3, r3
 8004f92:	f003 0301 	and.w	r3, r3, #1
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d001      	beq.n	8004f9e <USER_SPI_read+0x32>
 8004f9a:	2303      	movs	r3, #3
 8004f9c:	e044      	b.n	8005028 <USER_SPI_read+0xbc>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ot BA conversion (byte addressing cards) */
 8004f9e:	4b25      	ldr	r3, [pc, #148]	; (8005034 <USER_SPI_read+0xc8>)
 8004fa0:	781b      	ldrb	r3, [r3, #0]
 8004fa2:	f003 0308 	and.w	r3, r3, #8
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d102      	bne.n	8004fb0 <USER_SPI_read+0x44>
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	025b      	lsls	r3, r3, #9
 8004fae:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector read */
 8004fb0:	683b      	ldr	r3, [r7, #0]
 8004fb2:	2b01      	cmp	r3, #1
 8004fb4:	d111      	bne.n	8004fda <USER_SPI_read+0x6e>
		if ((send_cmd(CMD17, sector) == 0)	/* READ_SINGLE_BLOCK */
 8004fb6:	6879      	ldr	r1, [r7, #4]
 8004fb8:	2011      	movs	r0, #17
 8004fba:	f7ff fe66 	bl	8004c8a <send_cmd>
 8004fbe:	4603      	mov	r3, r0
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d129      	bne.n	8005018 <USER_SPI_read+0xac>
			&& rcvr_datablock(buff, 512)) {
 8004fc4:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004fc8:	68b8      	ldr	r0, [r7, #8]
 8004fca:	f7ff fe03 	bl	8004bd4 <rcvr_datablock>
 8004fce:	4603      	mov	r3, r0
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d021      	beq.n	8005018 <USER_SPI_read+0xac>
			count = 0;
 8004fd4:	2300      	movs	r3, #0
 8004fd6:	603b      	str	r3, [r7, #0]
 8004fd8:	e01e      	b.n	8005018 <USER_SPI_read+0xac>
		}
	}
	else {				/* Multiple sector read */
		if (send_cmd(CMD18, sector) == 0) {	/* READ_MULTIPLE_BLOCK */
 8004fda:	6879      	ldr	r1, [r7, #4]
 8004fdc:	2012      	movs	r0, #18
 8004fde:	f7ff fe54 	bl	8004c8a <send_cmd>
 8004fe2:	4603      	mov	r3, r0
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d117      	bne.n	8005018 <USER_SPI_read+0xac>
			do {
				if (!rcvr_datablock(buff, 512)) break;
 8004fe8:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004fec:	68b8      	ldr	r0, [r7, #8]
 8004fee:	f7ff fdf1 	bl	8004bd4 <rcvr_datablock>
 8004ff2:	4603      	mov	r3, r0
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d00a      	beq.n	800500e <USER_SPI_read+0xa2>
				buff += 512;
 8004ff8:	68bb      	ldr	r3, [r7, #8]
 8004ffa:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8004ffe:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8005000:	683b      	ldr	r3, [r7, #0]
 8005002:	3b01      	subs	r3, #1
 8005004:	603b      	str	r3, [r7, #0]
 8005006:	683b      	ldr	r3, [r7, #0]
 8005008:	2b00      	cmp	r3, #0
 800500a:	d1ed      	bne.n	8004fe8 <USER_SPI_read+0x7c>
 800500c:	e000      	b.n	8005010 <USER_SPI_read+0xa4>
				if (!rcvr_datablock(buff, 512)) break;
 800500e:	bf00      	nop
			send_cmd(CMD12, 0);				/* STOP_TRANSMISSION */
 8005010:	2100      	movs	r1, #0
 8005012:	200c      	movs	r0, #12
 8005014:	f7ff fe39 	bl	8004c8a <send_cmd>
		}
	}
	despiselect();
 8005018:	f7ff fdb4 	bl	8004b84 <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 800501c:	683b      	ldr	r3, [r7, #0]
 800501e:	2b00      	cmp	r3, #0
 8005020:	bf14      	ite	ne
 8005022:	2301      	movne	r3, #1
 8005024:	2300      	moveq	r3, #0
 8005026:	b2db      	uxtb	r3, r3
}
 8005028:	4618      	mov	r0, r3
 800502a:	3710      	adds	r7, #16
 800502c:	46bd      	mov	sp, r7
 800502e:	bd80      	pop	{r7, pc}
 8005030:	20000020 	.word	0x20000020
 8005034:	20000450 	.word	0x20000450

08005038 <USER_SPI_write>:
	BYTE drv,			/* Physical drive number (0) */
	const BYTE *buff,	/* Ponter to the data to write */
	DWORD sector,		/* Start sector number (LBA) */
	UINT count			/* Number of sectors to write (1..128) */
)
{
 8005038:	b580      	push	{r7, lr}
 800503a:	b084      	sub	sp, #16
 800503c:	af00      	add	r7, sp, #0
 800503e:	60b9      	str	r1, [r7, #8]
 8005040:	607a      	str	r2, [r7, #4]
 8005042:	603b      	str	r3, [r7, #0]
 8005044:	4603      	mov	r3, r0
 8005046:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 8005048:	7bfb      	ldrb	r3, [r7, #15]
 800504a:	2b00      	cmp	r3, #0
 800504c:	d102      	bne.n	8005054 <USER_SPI_write+0x1c>
 800504e:	683b      	ldr	r3, [r7, #0]
 8005050:	2b00      	cmp	r3, #0
 8005052:	d101      	bne.n	8005058 <USER_SPI_write+0x20>
 8005054:	2304      	movs	r3, #4
 8005056:	e063      	b.n	8005120 <USER_SPI_write+0xe8>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check drive status */
 8005058:	4b33      	ldr	r3, [pc, #204]	; (8005128 <USER_SPI_write+0xf0>)
 800505a:	781b      	ldrb	r3, [r3, #0]
 800505c:	b2db      	uxtb	r3, r3
 800505e:	f003 0301 	and.w	r3, r3, #1
 8005062:	2b00      	cmp	r3, #0
 8005064:	d001      	beq.n	800506a <USER_SPI_write+0x32>
 8005066:	2303      	movs	r3, #3
 8005068:	e05a      	b.n	8005120 <USER_SPI_write+0xe8>
	if (Stat & STA_PROTECT) return RES_WRPRT;	/* Check write protect */
 800506a:	4b2f      	ldr	r3, [pc, #188]	; (8005128 <USER_SPI_write+0xf0>)
 800506c:	781b      	ldrb	r3, [r3, #0]
 800506e:	b2db      	uxtb	r3, r3
 8005070:	f003 0304 	and.w	r3, r3, #4
 8005074:	2b00      	cmp	r3, #0
 8005076:	d001      	beq.n	800507c <USER_SPI_write+0x44>
 8005078:	2302      	movs	r3, #2
 800507a:	e051      	b.n	8005120 <USER_SPI_write+0xe8>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ==> BA conversion (byte addressing cards) */
 800507c:	4b2b      	ldr	r3, [pc, #172]	; (800512c <USER_SPI_write+0xf4>)
 800507e:	781b      	ldrb	r3, [r3, #0]
 8005080:	f003 0308 	and.w	r3, r3, #8
 8005084:	2b00      	cmp	r3, #0
 8005086:	d102      	bne.n	800508e <USER_SPI_write+0x56>
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	025b      	lsls	r3, r3, #9
 800508c:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector write */
 800508e:	683b      	ldr	r3, [r7, #0]
 8005090:	2b01      	cmp	r3, #1
 8005092:	d110      	bne.n	80050b6 <USER_SPI_write+0x7e>
		if ((send_cmd(CMD24, sector) == 0)	/* WRITE_BLOCK */
 8005094:	6879      	ldr	r1, [r7, #4]
 8005096:	2018      	movs	r0, #24
 8005098:	f7ff fdf7 	bl	8004c8a <send_cmd>
 800509c:	4603      	mov	r3, r0
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d136      	bne.n	8005110 <USER_SPI_write+0xd8>
			&& xmit_datablock(buff, 0xFE)) {
 80050a2:	21fe      	movs	r1, #254	; 0xfe
 80050a4:	68b8      	ldr	r0, [r7, #8]
 80050a6:	f7ff fdbe 	bl	8004c26 <xmit_datablock>
 80050aa:	4603      	mov	r3, r0
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	d02f      	beq.n	8005110 <USER_SPI_write+0xd8>
			count = 0;
 80050b0:	2300      	movs	r3, #0
 80050b2:	603b      	str	r3, [r7, #0]
 80050b4:	e02c      	b.n	8005110 <USER_SPI_write+0xd8>
		}
	}
	else {				/* Multiple sector write */
		if (CardType & CT_SDC) send_cmd(ACMD23, count);	/* Predefine number of sectors */
 80050b6:	4b1d      	ldr	r3, [pc, #116]	; (800512c <USER_SPI_write+0xf4>)
 80050b8:	781b      	ldrb	r3, [r3, #0]
 80050ba:	f003 0306 	and.w	r3, r3, #6
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d003      	beq.n	80050ca <USER_SPI_write+0x92>
 80050c2:	6839      	ldr	r1, [r7, #0]
 80050c4:	2097      	movs	r0, #151	; 0x97
 80050c6:	f7ff fde0 	bl	8004c8a <send_cmd>
		if (send_cmd(CMD25, sector) == 0) {	/* WRITE_MULTIPLE_BLOCK */
 80050ca:	6879      	ldr	r1, [r7, #4]
 80050cc:	2019      	movs	r0, #25
 80050ce:	f7ff fddc 	bl	8004c8a <send_cmd>
 80050d2:	4603      	mov	r3, r0
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d11b      	bne.n	8005110 <USER_SPI_write+0xd8>
			do {
				if (!xmit_datablock(buff, 0xFC)) break;
 80050d8:	21fc      	movs	r1, #252	; 0xfc
 80050da:	68b8      	ldr	r0, [r7, #8]
 80050dc:	f7ff fda3 	bl	8004c26 <xmit_datablock>
 80050e0:	4603      	mov	r3, r0
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d00a      	beq.n	80050fc <USER_SPI_write+0xc4>
				buff += 512;
 80050e6:	68bb      	ldr	r3, [r7, #8]
 80050e8:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80050ec:	60bb      	str	r3, [r7, #8]
			} while (--count);
 80050ee:	683b      	ldr	r3, [r7, #0]
 80050f0:	3b01      	subs	r3, #1
 80050f2:	603b      	str	r3, [r7, #0]
 80050f4:	683b      	ldr	r3, [r7, #0]
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d1ee      	bne.n	80050d8 <USER_SPI_write+0xa0>
 80050fa:	e000      	b.n	80050fe <USER_SPI_write+0xc6>
				if (!xmit_datablock(buff, 0xFC)) break;
 80050fc:	bf00      	nop
			if (!xmit_datablock(0, 0xFD)) count = 1;	/* STOP_TRAN token */
 80050fe:	21fd      	movs	r1, #253	; 0xfd
 8005100:	2000      	movs	r0, #0
 8005102:	f7ff fd90 	bl	8004c26 <xmit_datablock>
 8005106:	4603      	mov	r3, r0
 8005108:	2b00      	cmp	r3, #0
 800510a:	d101      	bne.n	8005110 <USER_SPI_write+0xd8>
 800510c:	2301      	movs	r3, #1
 800510e:	603b      	str	r3, [r7, #0]
		}
	}
	despiselect();
 8005110:	f7ff fd38 	bl	8004b84 <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 8005114:	683b      	ldr	r3, [r7, #0]
 8005116:	2b00      	cmp	r3, #0
 8005118:	bf14      	ite	ne
 800511a:	2301      	movne	r3, #1
 800511c:	2300      	moveq	r3, #0
 800511e:	b2db      	uxtb	r3, r3
}
 8005120:	4618      	mov	r0, r3
 8005122:	3710      	adds	r7, #16
 8005124:	46bd      	mov	sp, r7
 8005126:	bd80      	pop	{r7, pc}
 8005128:	20000020 	.word	0x20000020
 800512c:	20000450 	.word	0x20000450

08005130 <USER_SPI_ioctl>:
inline DRESULT USER_SPI_ioctl (
	BYTE drv,		/* Physical drive number (0) */
	BYTE cmd,		/* Control command code */
	void *buff		/* Pointer to the conrtol data */
)
{
 8005130:	b580      	push	{r7, lr}
 8005132:	b08c      	sub	sp, #48	; 0x30
 8005134:	af00      	add	r7, sp, #0
 8005136:	4603      	mov	r3, r0
 8005138:	603a      	str	r2, [r7, #0]
 800513a:	71fb      	strb	r3, [r7, #7]
 800513c:	460b      	mov	r3, r1
 800513e:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	BYTE n, csd[16];
	DWORD *dp, st, ed, csize;


	if (drv) return RES_PARERR;					/* Check parameter */
 8005140:	79fb      	ldrb	r3, [r7, #7]
 8005142:	2b00      	cmp	r3, #0
 8005144:	d001      	beq.n	800514a <USER_SPI_ioctl+0x1a>
 8005146:	2304      	movs	r3, #4
 8005148:	e15a      	b.n	8005400 <USER_SPI_ioctl+0x2d0>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 800514a:	4baf      	ldr	r3, [pc, #700]	; (8005408 <USER_SPI_ioctl+0x2d8>)
 800514c:	781b      	ldrb	r3, [r3, #0]
 800514e:	b2db      	uxtb	r3, r3
 8005150:	f003 0301 	and.w	r3, r3, #1
 8005154:	2b00      	cmp	r3, #0
 8005156:	d001      	beq.n	800515c <USER_SPI_ioctl+0x2c>
 8005158:	2303      	movs	r3, #3
 800515a:	e151      	b.n	8005400 <USER_SPI_ioctl+0x2d0>

	res = RES_ERROR;
 800515c:	2301      	movs	r3, #1
 800515e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	switch (cmd) {
 8005162:	79bb      	ldrb	r3, [r7, #6]
 8005164:	2b04      	cmp	r3, #4
 8005166:	f200 8136 	bhi.w	80053d6 <USER_SPI_ioctl+0x2a6>
 800516a:	a201      	add	r2, pc, #4	; (adr r2, 8005170 <USER_SPI_ioctl+0x40>)
 800516c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005170:	08005185 	.word	0x08005185
 8005174:	08005199 	.word	0x08005199
 8005178:	080053d7 	.word	0x080053d7
 800517c:	08005245 	.word	0x08005245
 8005180:	0800533b 	.word	0x0800533b
	case CTRL_SYNC :		/* Wait for end of internal write process of the drive */
		if (spiselect()) res = RES_OK;
 8005184:	f7ff fd0c 	bl	8004ba0 <spiselect>
 8005188:	4603      	mov	r3, r0
 800518a:	2b00      	cmp	r3, #0
 800518c:	f000 8127 	beq.w	80053de <USER_SPI_ioctl+0x2ae>
 8005190:	2300      	movs	r3, #0
 8005192:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		break;
 8005196:	e122      	b.n	80053de <USER_SPI_ioctl+0x2ae>

	case GET_SECTOR_COUNT :	/* Get drive capacity in unit of sector (DWORD) */
		if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {
 8005198:	2100      	movs	r1, #0
 800519a:	2009      	movs	r0, #9
 800519c:	f7ff fd75 	bl	8004c8a <send_cmd>
 80051a0:	4603      	mov	r3, r0
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	f040 811d 	bne.w	80053e2 <USER_SPI_ioctl+0x2b2>
 80051a8:	f107 030c 	add.w	r3, r7, #12
 80051ac:	2110      	movs	r1, #16
 80051ae:	4618      	mov	r0, r3
 80051b0:	f7ff fd10 	bl	8004bd4 <rcvr_datablock>
 80051b4:	4603      	mov	r3, r0
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	f000 8113 	beq.w	80053e2 <USER_SPI_ioctl+0x2b2>
			if ((csd[0] >> 6) == 1) {	/* SDC ver 2.00 */
 80051bc:	7b3b      	ldrb	r3, [r7, #12]
 80051be:	099b      	lsrs	r3, r3, #6
 80051c0:	b2db      	uxtb	r3, r3
 80051c2:	2b01      	cmp	r3, #1
 80051c4:	d111      	bne.n	80051ea <USER_SPI_ioctl+0xba>
				csize = csd[9] + ((WORD)csd[8] << 8) + ((DWORD)(csd[7] & 63) << 16) + 1;
 80051c6:	7d7b      	ldrb	r3, [r7, #21]
 80051c8:	461a      	mov	r2, r3
 80051ca:	7d3b      	ldrb	r3, [r7, #20]
 80051cc:	021b      	lsls	r3, r3, #8
 80051ce:	4413      	add	r3, r2
 80051d0:	461a      	mov	r2, r3
 80051d2:	7cfb      	ldrb	r3, [r7, #19]
 80051d4:	041b      	lsls	r3, r3, #16
 80051d6:	f403 137c 	and.w	r3, r3, #4128768	; 0x3f0000
 80051da:	4413      	add	r3, r2
 80051dc:	3301      	adds	r3, #1
 80051de:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << 10;
 80051e0:	69fb      	ldr	r3, [r7, #28]
 80051e2:	029a      	lsls	r2, r3, #10
 80051e4:	683b      	ldr	r3, [r7, #0]
 80051e6:	601a      	str	r2, [r3, #0]
 80051e8:	e028      	b.n	800523c <USER_SPI_ioctl+0x10c>
			} else {					/* SDC ver 1.XX or MMC ver 3 */
				n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 80051ea:	7c7b      	ldrb	r3, [r7, #17]
 80051ec:	f003 030f 	and.w	r3, r3, #15
 80051f0:	b2da      	uxtb	r2, r3
 80051f2:	7dbb      	ldrb	r3, [r7, #22]
 80051f4:	09db      	lsrs	r3, r3, #7
 80051f6:	b2db      	uxtb	r3, r3
 80051f8:	4413      	add	r3, r2
 80051fa:	b2da      	uxtb	r2, r3
 80051fc:	7d7b      	ldrb	r3, [r7, #21]
 80051fe:	005b      	lsls	r3, r3, #1
 8005200:	b2db      	uxtb	r3, r3
 8005202:	f003 0306 	and.w	r3, r3, #6
 8005206:	b2db      	uxtb	r3, r3
 8005208:	4413      	add	r3, r2
 800520a:	b2db      	uxtb	r3, r3
 800520c:	3302      	adds	r3, #2
 800520e:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
				csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
 8005212:	7d3b      	ldrb	r3, [r7, #20]
 8005214:	099b      	lsrs	r3, r3, #6
 8005216:	b2db      	uxtb	r3, r3
 8005218:	461a      	mov	r2, r3
 800521a:	7cfb      	ldrb	r3, [r7, #19]
 800521c:	009b      	lsls	r3, r3, #2
 800521e:	441a      	add	r2, r3
 8005220:	7cbb      	ldrb	r3, [r7, #18]
 8005222:	029b      	lsls	r3, r3, #10
 8005224:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005228:	4413      	add	r3, r2
 800522a:	3301      	adds	r3, #1
 800522c:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << (n - 9);
 800522e:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8005232:	3b09      	subs	r3, #9
 8005234:	69fa      	ldr	r2, [r7, #28]
 8005236:	409a      	lsls	r2, r3
 8005238:	683b      	ldr	r3, [r7, #0]
 800523a:	601a      	str	r2, [r3, #0]
			}
			res = RES_OK;
 800523c:	2300      	movs	r3, #0
 800523e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		}
		break;
 8005242:	e0ce      	b.n	80053e2 <USER_SPI_ioctl+0x2b2>

	case GET_BLOCK_SIZE :	/* Get erase block size in unit of sector (DWORD) */
		if (CardType & CT_SD2) {	/* SDC ver 2.00 */
 8005244:	4b71      	ldr	r3, [pc, #452]	; (800540c <USER_SPI_ioctl+0x2dc>)
 8005246:	781b      	ldrb	r3, [r3, #0]
 8005248:	f003 0304 	and.w	r3, r3, #4
 800524c:	2b00      	cmp	r3, #0
 800524e:	d031      	beq.n	80052b4 <USER_SPI_ioctl+0x184>
			if (send_cmd(ACMD13, 0) == 0) {	/* Read SD status */
 8005250:	2100      	movs	r1, #0
 8005252:	208d      	movs	r0, #141	; 0x8d
 8005254:	f7ff fd19 	bl	8004c8a <send_cmd>
 8005258:	4603      	mov	r3, r0
 800525a:	2b00      	cmp	r3, #0
 800525c:	f040 80c3 	bne.w	80053e6 <USER_SPI_ioctl+0x2b6>
				xchg_spi(0xFF);
 8005260:	20ff      	movs	r0, #255	; 0xff
 8005262:	f7ff fc25 	bl	8004ab0 <xchg_spi>
				if (rcvr_datablock(csd, 16)) {				/* Read partial block */
 8005266:	f107 030c 	add.w	r3, r7, #12
 800526a:	2110      	movs	r1, #16
 800526c:	4618      	mov	r0, r3
 800526e:	f7ff fcb1 	bl	8004bd4 <rcvr_datablock>
 8005272:	4603      	mov	r3, r0
 8005274:	2b00      	cmp	r3, #0
 8005276:	f000 80b6 	beq.w	80053e6 <USER_SPI_ioctl+0x2b6>
					for (n = 64 - 16; n; n--) xchg_spi(0xFF);	/* Purge trailing data */
 800527a:	2330      	movs	r3, #48	; 0x30
 800527c:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 8005280:	e007      	b.n	8005292 <USER_SPI_ioctl+0x162>
 8005282:	20ff      	movs	r0, #255	; 0xff
 8005284:	f7ff fc14 	bl	8004ab0 <xchg_spi>
 8005288:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800528c:	3b01      	subs	r3, #1
 800528e:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 8005292:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8005296:	2b00      	cmp	r3, #0
 8005298:	d1f3      	bne.n	8005282 <USER_SPI_ioctl+0x152>
					*(DWORD*)buff = 16UL << (csd[10] >> 4);
 800529a:	7dbb      	ldrb	r3, [r7, #22]
 800529c:	091b      	lsrs	r3, r3, #4
 800529e:	b2db      	uxtb	r3, r3
 80052a0:	461a      	mov	r2, r3
 80052a2:	2310      	movs	r3, #16
 80052a4:	fa03 f202 	lsl.w	r2, r3, r2
 80052a8:	683b      	ldr	r3, [r7, #0]
 80052aa:	601a      	str	r2, [r3, #0]
					res = RES_OK;
 80052ac:	2300      	movs	r3, #0
 80052ae:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
				}
				res = RES_OK;
			}
		}
		break;
 80052b2:	e098      	b.n	80053e6 <USER_SPI_ioctl+0x2b6>
			if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {	/* Read CSD */
 80052b4:	2100      	movs	r1, #0
 80052b6:	2009      	movs	r0, #9
 80052b8:	f7ff fce7 	bl	8004c8a <send_cmd>
 80052bc:	4603      	mov	r3, r0
 80052be:	2b00      	cmp	r3, #0
 80052c0:	f040 8091 	bne.w	80053e6 <USER_SPI_ioctl+0x2b6>
 80052c4:	f107 030c 	add.w	r3, r7, #12
 80052c8:	2110      	movs	r1, #16
 80052ca:	4618      	mov	r0, r3
 80052cc:	f7ff fc82 	bl	8004bd4 <rcvr_datablock>
 80052d0:	4603      	mov	r3, r0
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	f000 8087 	beq.w	80053e6 <USER_SPI_ioctl+0x2b6>
				if (CardType & CT_SD1) {	/* SDC ver 1.XX */
 80052d8:	4b4c      	ldr	r3, [pc, #304]	; (800540c <USER_SPI_ioctl+0x2dc>)
 80052da:	781b      	ldrb	r3, [r3, #0]
 80052dc:	f003 0302 	and.w	r3, r3, #2
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d012      	beq.n	800530a <USER_SPI_ioctl+0x1da>
					*(DWORD*)buff = (((csd[10] & 63) << 1) + ((WORD)(csd[11] & 128) >> 7) + 1) << ((csd[13] >> 6) - 1);
 80052e4:	7dbb      	ldrb	r3, [r7, #22]
 80052e6:	005b      	lsls	r3, r3, #1
 80052e8:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 80052ec:	7dfa      	ldrb	r2, [r7, #23]
 80052ee:	09d2      	lsrs	r2, r2, #7
 80052f0:	b2d2      	uxtb	r2, r2
 80052f2:	4413      	add	r3, r2
 80052f4:	1c5a      	adds	r2, r3, #1
 80052f6:	7e7b      	ldrb	r3, [r7, #25]
 80052f8:	099b      	lsrs	r3, r3, #6
 80052fa:	b2db      	uxtb	r3, r3
 80052fc:	3b01      	subs	r3, #1
 80052fe:	fa02 f303 	lsl.w	r3, r2, r3
 8005302:	461a      	mov	r2, r3
 8005304:	683b      	ldr	r3, [r7, #0]
 8005306:	601a      	str	r2, [r3, #0]
 8005308:	e013      	b.n	8005332 <USER_SPI_ioctl+0x202>
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
 800530a:	7dbb      	ldrb	r3, [r7, #22]
 800530c:	109b      	asrs	r3, r3, #2
 800530e:	b29b      	uxth	r3, r3
 8005310:	f003 031f 	and.w	r3, r3, #31
 8005314:	3301      	adds	r3, #1
 8005316:	7dfa      	ldrb	r2, [r7, #23]
 8005318:	00d2      	lsls	r2, r2, #3
 800531a:	f002 0218 	and.w	r2, r2, #24
 800531e:	7df9      	ldrb	r1, [r7, #23]
 8005320:	0949      	lsrs	r1, r1, #5
 8005322:	b2c9      	uxtb	r1, r1
 8005324:	440a      	add	r2, r1
 8005326:	3201      	adds	r2, #1
 8005328:	fb02 f303 	mul.w	r3, r2, r3
 800532c:	461a      	mov	r2, r3
 800532e:	683b      	ldr	r3, [r7, #0]
 8005330:	601a      	str	r2, [r3, #0]
				res = RES_OK;
 8005332:	2300      	movs	r3, #0
 8005334:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		break;
 8005338:	e055      	b.n	80053e6 <USER_SPI_ioctl+0x2b6>

	case CTRL_TRIM :	/* Erase a block of sectors (used when _USE_ERASE == 1) */
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 800533a:	4b34      	ldr	r3, [pc, #208]	; (800540c <USER_SPI_ioctl+0x2dc>)
 800533c:	781b      	ldrb	r3, [r3, #0]
 800533e:	f003 0306 	and.w	r3, r3, #6
 8005342:	2b00      	cmp	r3, #0
 8005344:	d051      	beq.n	80053ea <USER_SPI_ioctl+0x2ba>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 8005346:	f107 020c 	add.w	r2, r7, #12
 800534a:	79fb      	ldrb	r3, [r7, #7]
 800534c:	210b      	movs	r1, #11
 800534e:	4618      	mov	r0, r3
 8005350:	f7ff feee 	bl	8005130 <USER_SPI_ioctl>
 8005354:	4603      	mov	r3, r0
 8005356:	2b00      	cmp	r3, #0
 8005358:	d149      	bne.n	80053ee <USER_SPI_ioctl+0x2be>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 800535a:	7b3b      	ldrb	r3, [r7, #12]
 800535c:	099b      	lsrs	r3, r3, #6
 800535e:	b2db      	uxtb	r3, r3
 8005360:	2b00      	cmp	r3, #0
 8005362:	d104      	bne.n	800536e <USER_SPI_ioctl+0x23e>
 8005364:	7dbb      	ldrb	r3, [r7, #22]
 8005366:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800536a:	2b00      	cmp	r3, #0
 800536c:	d041      	beq.n	80053f2 <USER_SPI_ioctl+0x2c2>
		dp = buff; st = dp[0]; ed = dp[1];				/* Load sector block */
 800536e:	683b      	ldr	r3, [r7, #0]
 8005370:	623b      	str	r3, [r7, #32]
 8005372:	6a3b      	ldr	r3, [r7, #32]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	62bb      	str	r3, [r7, #40]	; 0x28
 8005378:	6a3b      	ldr	r3, [r7, #32]
 800537a:	685b      	ldr	r3, [r3, #4]
 800537c:	627b      	str	r3, [r7, #36]	; 0x24
		if (!(CardType & CT_BLOCK)) {
 800537e:	4b23      	ldr	r3, [pc, #140]	; (800540c <USER_SPI_ioctl+0x2dc>)
 8005380:	781b      	ldrb	r3, [r3, #0]
 8005382:	f003 0308 	and.w	r3, r3, #8
 8005386:	2b00      	cmp	r3, #0
 8005388:	d105      	bne.n	8005396 <USER_SPI_ioctl+0x266>
			st *= 512; ed *= 512;
 800538a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800538c:	025b      	lsls	r3, r3, #9
 800538e:	62bb      	str	r3, [r7, #40]	; 0x28
 8005390:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005392:	025b      	lsls	r3, r3, #9
 8005394:	627b      	str	r3, [r7, #36]	; 0x24
		}
		if (send_cmd(CMD32, st) == 0 && send_cmd(CMD33, ed) == 0 && send_cmd(CMD38, 0) == 0 && wait_ready(30000)) {	/* Erase sector block */
 8005396:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005398:	2020      	movs	r0, #32
 800539a:	f7ff fc76 	bl	8004c8a <send_cmd>
 800539e:	4603      	mov	r3, r0
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d128      	bne.n	80053f6 <USER_SPI_ioctl+0x2c6>
 80053a4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80053a6:	2021      	movs	r0, #33	; 0x21
 80053a8:	f7ff fc6f 	bl	8004c8a <send_cmd>
 80053ac:	4603      	mov	r3, r0
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d121      	bne.n	80053f6 <USER_SPI_ioctl+0x2c6>
 80053b2:	2100      	movs	r1, #0
 80053b4:	2026      	movs	r0, #38	; 0x26
 80053b6:	f7ff fc68 	bl	8004c8a <send_cmd>
 80053ba:	4603      	mov	r3, r0
 80053bc:	2b00      	cmp	r3, #0
 80053be:	d11a      	bne.n	80053f6 <USER_SPI_ioctl+0x2c6>
 80053c0:	f247 5030 	movw	r0, #30000	; 0x7530
 80053c4:	f7ff fbba 	bl	8004b3c <wait_ready>
 80053c8:	4603      	mov	r3, r0
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d013      	beq.n	80053f6 <USER_SPI_ioctl+0x2c6>
			res = RES_OK;	/* FatFs does not check result of this command */
 80053ce:	2300      	movs	r3, #0
 80053d0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		}
		break;
 80053d4:	e00f      	b.n	80053f6 <USER_SPI_ioctl+0x2c6>

	default:
		res = RES_PARERR;
 80053d6:	2304      	movs	r3, #4
 80053d8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80053dc:	e00c      	b.n	80053f8 <USER_SPI_ioctl+0x2c8>
		break;
 80053de:	bf00      	nop
 80053e0:	e00a      	b.n	80053f8 <USER_SPI_ioctl+0x2c8>
		break;
 80053e2:	bf00      	nop
 80053e4:	e008      	b.n	80053f8 <USER_SPI_ioctl+0x2c8>
		break;
 80053e6:	bf00      	nop
 80053e8:	e006      	b.n	80053f8 <USER_SPI_ioctl+0x2c8>
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 80053ea:	bf00      	nop
 80053ec:	e004      	b.n	80053f8 <USER_SPI_ioctl+0x2c8>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 80053ee:	bf00      	nop
 80053f0:	e002      	b.n	80053f8 <USER_SPI_ioctl+0x2c8>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 80053f2:	bf00      	nop
 80053f4:	e000      	b.n	80053f8 <USER_SPI_ioctl+0x2c8>
		break;
 80053f6:	bf00      	nop
	}

	despiselect();
 80053f8:	f7ff fbc4 	bl	8004b84 <despiselect>

	return res;
 80053fc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8005400:	4618      	mov	r0, r3
 8005402:	3730      	adds	r7, #48	; 0x30
 8005404:	46bd      	mov	sp, r7
 8005406:	bd80      	pop	{r7, pc}
 8005408:	20000020 	.word	0x20000020
 800540c:	20000450 	.word	0x20000450

08005410 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the paramter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8005410:	b480      	push	{r7}
 8005412:	b087      	sub	sp, #28
 8005414:	af00      	add	r7, sp, #0
 8005416:	60f8      	str	r0, [r7, #12]
 8005418:	60b9      	str	r1, [r7, #8]
 800541a:	4613      	mov	r3, r2
 800541c:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800541e:	2301      	movs	r3, #1
 8005420:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8005422:	2300      	movs	r3, #0
 8005424:	75bb      	strb	r3, [r7, #22]
  
  if(disk.nbr <= _VOLUMES)
 8005426:	4b1f      	ldr	r3, [pc, #124]	; (80054a4 <FATFS_LinkDriverEx+0x94>)
 8005428:	7a5b      	ldrb	r3, [r3, #9]
 800542a:	b2db      	uxtb	r3, r3
 800542c:	2b01      	cmp	r3, #1
 800542e:	d831      	bhi.n	8005494 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8005430:	4b1c      	ldr	r3, [pc, #112]	; (80054a4 <FATFS_LinkDriverEx+0x94>)
 8005432:	7a5b      	ldrb	r3, [r3, #9]
 8005434:	b2db      	uxtb	r3, r3
 8005436:	461a      	mov	r2, r3
 8005438:	4b1a      	ldr	r3, [pc, #104]	; (80054a4 <FATFS_LinkDriverEx+0x94>)
 800543a:	2100      	movs	r1, #0
 800543c:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;  
 800543e:	4b19      	ldr	r3, [pc, #100]	; (80054a4 <FATFS_LinkDriverEx+0x94>)
 8005440:	7a5b      	ldrb	r3, [r3, #9]
 8005442:	b2db      	uxtb	r3, r3
 8005444:	4a17      	ldr	r2, [pc, #92]	; (80054a4 <FATFS_LinkDriverEx+0x94>)
 8005446:	009b      	lsls	r3, r3, #2
 8005448:	4413      	add	r3, r2
 800544a:	68fa      	ldr	r2, [r7, #12]
 800544c:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;  
 800544e:	4b15      	ldr	r3, [pc, #84]	; (80054a4 <FATFS_LinkDriverEx+0x94>)
 8005450:	7a5b      	ldrb	r3, [r3, #9]
 8005452:	b2db      	uxtb	r3, r3
 8005454:	461a      	mov	r2, r3
 8005456:	4b13      	ldr	r3, [pc, #76]	; (80054a4 <FATFS_LinkDriverEx+0x94>)
 8005458:	4413      	add	r3, r2
 800545a:	79fa      	ldrb	r2, [r7, #7]
 800545c:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800545e:	4b11      	ldr	r3, [pc, #68]	; (80054a4 <FATFS_LinkDriverEx+0x94>)
 8005460:	7a5b      	ldrb	r3, [r3, #9]
 8005462:	b2db      	uxtb	r3, r3
 8005464:	1c5a      	adds	r2, r3, #1
 8005466:	b2d1      	uxtb	r1, r2
 8005468:	4a0e      	ldr	r2, [pc, #56]	; (80054a4 <FATFS_LinkDriverEx+0x94>)
 800546a:	7251      	strb	r1, [r2, #9]
 800546c:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800546e:	7dbb      	ldrb	r3, [r7, #22]
 8005470:	3330      	adds	r3, #48	; 0x30
 8005472:	b2da      	uxtb	r2, r3
 8005474:	68bb      	ldr	r3, [r7, #8]
 8005476:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8005478:	68bb      	ldr	r3, [r7, #8]
 800547a:	3301      	adds	r3, #1
 800547c:	223a      	movs	r2, #58	; 0x3a
 800547e:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8005480:	68bb      	ldr	r3, [r7, #8]
 8005482:	3302      	adds	r3, #2
 8005484:	222f      	movs	r2, #47	; 0x2f
 8005486:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8005488:	68bb      	ldr	r3, [r7, #8]
 800548a:	3303      	adds	r3, #3
 800548c:	2200      	movs	r2, #0
 800548e:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8005490:	2300      	movs	r3, #0
 8005492:	75fb      	strb	r3, [r7, #23]
  }
  
  return ret;
 8005494:	7dfb      	ldrb	r3, [r7, #23]
}
 8005496:	4618      	mov	r0, r3
 8005498:	371c      	adds	r7, #28
 800549a:	46bd      	mov	sp, r7
 800549c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054a0:	4770      	bx	lr
 80054a2:	bf00      	nop
 80054a4:	2000045c 	.word	0x2000045c

080054a8 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path 
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(Diskio_drvTypeDef *drv, char *path)
{
 80054a8:	b580      	push	{r7, lr}
 80054aa:	b082      	sub	sp, #8
 80054ac:	af00      	add	r7, sp, #0
 80054ae:	6078      	str	r0, [r7, #4]
 80054b0:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 80054b2:	2200      	movs	r2, #0
 80054b4:	6839      	ldr	r1, [r7, #0]
 80054b6:	6878      	ldr	r0, [r7, #4]
 80054b8:	f7ff ffaa 	bl	8005410 <FATFS_LinkDriverEx>
 80054bc:	4603      	mov	r3, r0
}
 80054be:	4618      	mov	r0, r3
 80054c0:	3708      	adds	r7, #8
 80054c2:	46bd      	mov	sp, r7
 80054c4:	bd80      	pop	{r7, pc}
	...

080054c8 <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80054c8:	b480      	push	{r7}
 80054ca:	b085      	sub	sp, #20
 80054cc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80054ce:	f3ef 8305 	mrs	r3, IPSR
 80054d2:	60bb      	str	r3, [r7, #8]
  return(result);
 80054d4:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d10f      	bne.n	80054fa <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80054da:	f3ef 8310 	mrs	r3, PRIMASK
 80054de:	607b      	str	r3, [r7, #4]
  return(result);
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d109      	bne.n	80054fa <osKernelInitialize+0x32>
 80054e6:	4b11      	ldr	r3, [pc, #68]	; (800552c <osKernelInitialize+0x64>)
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	2b02      	cmp	r3, #2
 80054ec:	d109      	bne.n	8005502 <osKernelInitialize+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80054ee:	f3ef 8311 	mrs	r3, BASEPRI
 80054f2:	603b      	str	r3, [r7, #0]
  return(result);
 80054f4:	683b      	ldr	r3, [r7, #0]
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d003      	beq.n	8005502 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 80054fa:	f06f 0305 	mvn.w	r3, #5
 80054fe:	60fb      	str	r3, [r7, #12]
 8005500:	e00c      	b.n	800551c <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8005502:	4b0a      	ldr	r3, [pc, #40]	; (800552c <osKernelInitialize+0x64>)
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	2b00      	cmp	r3, #0
 8005508:	d105      	bne.n	8005516 <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 800550a:	4b08      	ldr	r3, [pc, #32]	; (800552c <osKernelInitialize+0x64>)
 800550c:	2201      	movs	r2, #1
 800550e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8005510:	2300      	movs	r3, #0
 8005512:	60fb      	str	r3, [r7, #12]
 8005514:	e002      	b.n	800551c <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8005516:	f04f 33ff 	mov.w	r3, #4294967295
 800551a:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800551c:	68fb      	ldr	r3, [r7, #12]
}
 800551e:	4618      	mov	r0, r3
 8005520:	3714      	adds	r7, #20
 8005522:	46bd      	mov	sp, r7
 8005524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005528:	4770      	bx	lr
 800552a:	bf00      	nop
 800552c:	20000468 	.word	0x20000468

08005530 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8005530:	b580      	push	{r7, lr}
 8005532:	b084      	sub	sp, #16
 8005534:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005536:	f3ef 8305 	mrs	r3, IPSR
 800553a:	60bb      	str	r3, [r7, #8]
  return(result);
 800553c:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800553e:	2b00      	cmp	r3, #0
 8005540:	d10f      	bne.n	8005562 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005542:	f3ef 8310 	mrs	r3, PRIMASK
 8005546:	607b      	str	r3, [r7, #4]
  return(result);
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	2b00      	cmp	r3, #0
 800554c:	d109      	bne.n	8005562 <osKernelStart+0x32>
 800554e:	4b11      	ldr	r3, [pc, #68]	; (8005594 <osKernelStart+0x64>)
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	2b02      	cmp	r3, #2
 8005554:	d109      	bne.n	800556a <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005556:	f3ef 8311 	mrs	r3, BASEPRI
 800555a:	603b      	str	r3, [r7, #0]
  return(result);
 800555c:	683b      	ldr	r3, [r7, #0]
 800555e:	2b00      	cmp	r3, #0
 8005560:	d003      	beq.n	800556a <osKernelStart+0x3a>
    stat = osErrorISR;
 8005562:	f06f 0305 	mvn.w	r3, #5
 8005566:	60fb      	str	r3, [r7, #12]
 8005568:	e00e      	b.n	8005588 <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 800556a:	4b0a      	ldr	r3, [pc, #40]	; (8005594 <osKernelStart+0x64>)
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	2b01      	cmp	r3, #1
 8005570:	d107      	bne.n	8005582 <osKernelStart+0x52>
      KernelState = osKernelRunning;
 8005572:	4b08      	ldr	r3, [pc, #32]	; (8005594 <osKernelStart+0x64>)
 8005574:	2202      	movs	r2, #2
 8005576:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 8005578:	f001 f92a 	bl	80067d0 <vTaskStartScheduler>
      stat = osOK;
 800557c:	2300      	movs	r3, #0
 800557e:	60fb      	str	r3, [r7, #12]
 8005580:	e002      	b.n	8005588 <osKernelStart+0x58>
    } else {
      stat = osError;
 8005582:	f04f 33ff 	mov.w	r3, #4294967295
 8005586:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8005588:	68fb      	ldr	r3, [r7, #12]
}
 800558a:	4618      	mov	r0, r3
 800558c:	3710      	adds	r7, #16
 800558e:	46bd      	mov	sp, r7
 8005590:	bd80      	pop	{r7, pc}
 8005592:	bf00      	nop
 8005594:	20000468 	.word	0x20000468

08005598 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8005598:	b580      	push	{r7, lr}
 800559a:	b092      	sub	sp, #72	; 0x48
 800559c:	af04      	add	r7, sp, #16
 800559e:	60f8      	str	r0, [r7, #12]
 80055a0:	60b9      	str	r1, [r7, #8]
 80055a2:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80055a4:	2300      	movs	r3, #0
 80055a6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80055a8:	f3ef 8305 	mrs	r3, IPSR
 80055ac:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 80055ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  if (!IS_IRQ() && (func != NULL)) {
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	f040 8094 	bne.w	80056de <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80055b6:	f3ef 8310 	mrs	r3, PRIMASK
 80055ba:	623b      	str	r3, [r7, #32]
  return(result);
 80055bc:	6a3b      	ldr	r3, [r7, #32]
 80055be:	2b00      	cmp	r3, #0
 80055c0:	f040 808d 	bne.w	80056de <osThreadNew+0x146>
 80055c4:	4b48      	ldr	r3, [pc, #288]	; (80056e8 <osThreadNew+0x150>)
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	2b02      	cmp	r3, #2
 80055ca:	d106      	bne.n	80055da <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80055cc:	f3ef 8311 	mrs	r3, BASEPRI
 80055d0:	61fb      	str	r3, [r7, #28]
  return(result);
 80055d2:	69fb      	ldr	r3, [r7, #28]
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	f040 8082 	bne.w	80056de <osThreadNew+0x146>
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d07e      	beq.n	80056de <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 80055e0:	2380      	movs	r3, #128	; 0x80
 80055e2:	633b      	str	r3, [r7, #48]	; 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 80055e4:	2318      	movs	r3, #24
 80055e6:	62fb      	str	r3, [r7, #44]	; 0x2c

    empty = '\0';
 80055e8:	2300      	movs	r3, #0
 80055ea:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 80055ec:	f107 031b 	add.w	r3, r7, #27
 80055f0:	637b      	str	r3, [r7, #52]	; 0x34
    mem   = -1;
 80055f2:	f04f 33ff 	mov.w	r3, #4294967295
 80055f6:	62bb      	str	r3, [r7, #40]	; 0x28

    if (attr != NULL) {
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d045      	beq.n	800568a <osThreadNew+0xf2>
      if (attr->name != NULL) {
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	2b00      	cmp	r3, #0
 8005604:	d002      	beq.n	800560c <osThreadNew+0x74>
        name = attr->name;
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	637b      	str	r3, [r7, #52]	; 0x34
      }
      if (attr->priority != osPriorityNone) {
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	699b      	ldr	r3, [r3, #24]
 8005610:	2b00      	cmp	r3, #0
 8005612:	d002      	beq.n	800561a <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	699b      	ldr	r3, [r3, #24]
 8005618:	62fb      	str	r3, [r7, #44]	; 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800561a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800561c:	2b00      	cmp	r3, #0
 800561e:	d008      	beq.n	8005632 <osThreadNew+0x9a>
 8005620:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005622:	2b38      	cmp	r3, #56	; 0x38
 8005624:	d805      	bhi.n	8005632 <osThreadNew+0x9a>
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	685b      	ldr	r3, [r3, #4]
 800562a:	f003 0301 	and.w	r3, r3, #1
 800562e:	2b00      	cmp	r3, #0
 8005630:	d001      	beq.n	8005636 <osThreadNew+0x9e>
        return (NULL);
 8005632:	2300      	movs	r3, #0
 8005634:	e054      	b.n	80056e0 <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	695b      	ldr	r3, [r3, #20]
 800563a:	2b00      	cmp	r3, #0
 800563c:	d003      	beq.n	8005646 <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	695b      	ldr	r3, [r3, #20]
 8005642:	089b      	lsrs	r3, r3, #2
 8005644:	633b      	str	r3, [r7, #48]	; 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	689b      	ldr	r3, [r3, #8]
 800564a:	2b00      	cmp	r3, #0
 800564c:	d00e      	beq.n	800566c <osThreadNew+0xd4>
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	68db      	ldr	r3, [r3, #12]
 8005652:	2ba7      	cmp	r3, #167	; 0xa7
 8005654:	d90a      	bls.n	800566c <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800565a:	2b00      	cmp	r3, #0
 800565c:	d006      	beq.n	800566c <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	695b      	ldr	r3, [r3, #20]
 8005662:	2b00      	cmp	r3, #0
 8005664:	d002      	beq.n	800566c <osThreadNew+0xd4>
        mem = 1;
 8005666:	2301      	movs	r3, #1
 8005668:	62bb      	str	r3, [r7, #40]	; 0x28
 800566a:	e010      	b.n	800568e <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	689b      	ldr	r3, [r3, #8]
 8005670:	2b00      	cmp	r3, #0
 8005672:	d10c      	bne.n	800568e <osThreadNew+0xf6>
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	68db      	ldr	r3, [r3, #12]
 8005678:	2b00      	cmp	r3, #0
 800567a:	d108      	bne.n	800568e <osThreadNew+0xf6>
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	691b      	ldr	r3, [r3, #16]
 8005680:	2b00      	cmp	r3, #0
 8005682:	d104      	bne.n	800568e <osThreadNew+0xf6>
          mem = 0;
 8005684:	2300      	movs	r3, #0
 8005686:	62bb      	str	r3, [r7, #40]	; 0x28
 8005688:	e001      	b.n	800568e <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 800568a:	2300      	movs	r3, #0
 800568c:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    if (mem == 1) {
 800568e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005690:	2b01      	cmp	r3, #1
 8005692:	d110      	bne.n	80056b6 <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8005698:	687a      	ldr	r2, [r7, #4]
 800569a:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800569c:	9202      	str	r2, [sp, #8]
 800569e:	9301      	str	r3, [sp, #4]
 80056a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056a2:	9300      	str	r3, [sp, #0]
 80056a4:	68bb      	ldr	r3, [r7, #8]
 80056a6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80056a8:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80056aa:	68f8      	ldr	r0, [r7, #12]
 80056ac:	f000 feac 	bl	8006408 <xTaskCreateStatic>
 80056b0:	4603      	mov	r3, r0
 80056b2:	617b      	str	r3, [r7, #20]
 80056b4:	e013      	b.n	80056de <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 80056b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	d110      	bne.n	80056de <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80056bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056be:	b29a      	uxth	r2, r3
 80056c0:	f107 0314 	add.w	r3, r7, #20
 80056c4:	9301      	str	r3, [sp, #4]
 80056c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056c8:	9300      	str	r3, [sp, #0]
 80056ca:	68bb      	ldr	r3, [r7, #8]
 80056cc:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80056ce:	68f8      	ldr	r0, [r7, #12]
 80056d0:	f000 fef6 	bl	80064c0 <xTaskCreate>
 80056d4:	4603      	mov	r3, r0
 80056d6:	2b01      	cmp	r3, #1
 80056d8:	d001      	beq.n	80056de <osThreadNew+0x146>
          hTask = NULL;
 80056da:	2300      	movs	r3, #0
 80056dc:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 80056de:	697b      	ldr	r3, [r7, #20]
}
 80056e0:	4618      	mov	r0, r3
 80056e2:	3738      	adds	r7, #56	; 0x38
 80056e4:	46bd      	mov	sp, r7
 80056e6:	bd80      	pop	{r7, pc}
 80056e8:	20000468 	.word	0x20000468

080056ec <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 80056ec:	b580      	push	{r7, lr}
 80056ee:	b086      	sub	sp, #24
 80056f0:	af00      	add	r7, sp, #0
 80056f2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80056f4:	f3ef 8305 	mrs	r3, IPSR
 80056f8:	613b      	str	r3, [r7, #16]
  return(result);
 80056fa:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d10f      	bne.n	8005720 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005700:	f3ef 8310 	mrs	r3, PRIMASK
 8005704:	60fb      	str	r3, [r7, #12]
  return(result);
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	2b00      	cmp	r3, #0
 800570a:	d109      	bne.n	8005720 <osDelay+0x34>
 800570c:	4b0d      	ldr	r3, [pc, #52]	; (8005744 <osDelay+0x58>)
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	2b02      	cmp	r3, #2
 8005712:	d109      	bne.n	8005728 <osDelay+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005714:	f3ef 8311 	mrs	r3, BASEPRI
 8005718:	60bb      	str	r3, [r7, #8]
  return(result);
 800571a:	68bb      	ldr	r3, [r7, #8]
 800571c:	2b00      	cmp	r3, #0
 800571e:	d003      	beq.n	8005728 <osDelay+0x3c>
    stat = osErrorISR;
 8005720:	f06f 0305 	mvn.w	r3, #5
 8005724:	617b      	str	r3, [r7, #20]
 8005726:	e007      	b.n	8005738 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8005728:	2300      	movs	r3, #0
 800572a:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	2b00      	cmp	r3, #0
 8005730:	d002      	beq.n	8005738 <osDelay+0x4c>
      vTaskDelay(ticks);
 8005732:	6878      	ldr	r0, [r7, #4]
 8005734:	f001 f818 	bl	8006768 <vTaskDelay>
    }
  }

  return (stat);
 8005738:	697b      	ldr	r3, [r7, #20]
}
 800573a:	4618      	mov	r0, r3
 800573c:	3718      	adds	r7, #24
 800573e:	46bd      	mov	sp, r7
 8005740:	bd80      	pop	{r7, pc}
 8005742:	bf00      	nop
 8005744:	20000468 	.word	0x20000468

08005748 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8005748:	b480      	push	{r7}
 800574a:	b085      	sub	sp, #20
 800574c:	af00      	add	r7, sp, #0
 800574e:	60f8      	str	r0, [r7, #12]
 8005750:	60b9      	str	r1, [r7, #8]
 8005752:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	4a07      	ldr	r2, [pc, #28]	; (8005774 <vApplicationGetIdleTaskMemory+0x2c>)
 8005758:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800575a:	68bb      	ldr	r3, [r7, #8]
 800575c:	4a06      	ldr	r2, [pc, #24]	; (8005778 <vApplicationGetIdleTaskMemory+0x30>)
 800575e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	2280      	movs	r2, #128	; 0x80
 8005764:	601a      	str	r2, [r3, #0]
}
 8005766:	bf00      	nop
 8005768:	3714      	adds	r7, #20
 800576a:	46bd      	mov	sp, r7
 800576c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005770:	4770      	bx	lr
 8005772:	bf00      	nop
 8005774:	2000046c 	.word	0x2000046c
 8005778:	20000514 	.word	0x20000514

0800577c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800577c:	b480      	push	{r7}
 800577e:	b085      	sub	sp, #20
 8005780:	af00      	add	r7, sp, #0
 8005782:	60f8      	str	r0, [r7, #12]
 8005784:	60b9      	str	r1, [r7, #8]
 8005786:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	4a07      	ldr	r2, [pc, #28]	; (80057a8 <vApplicationGetTimerTaskMemory+0x2c>)
 800578c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800578e:	68bb      	ldr	r3, [r7, #8]
 8005790:	4a06      	ldr	r2, [pc, #24]	; (80057ac <vApplicationGetTimerTaskMemory+0x30>)
 8005792:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	f44f 7280 	mov.w	r2, #256	; 0x100
 800579a:	601a      	str	r2, [r3, #0]
}
 800579c:	bf00      	nop
 800579e:	3714      	adds	r7, #20
 80057a0:	46bd      	mov	sp, r7
 80057a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057a6:	4770      	bx	lr
 80057a8:	20000714 	.word	0x20000714
 80057ac:	200007bc 	.word	0x200007bc

080057b0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80057b0:	b480      	push	{r7}
 80057b2:	b083      	sub	sp, #12
 80057b4:	af00      	add	r7, sp, #0
 80057b6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	f103 0208 	add.w	r2, r3, #8
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	f04f 32ff 	mov.w	r2, #4294967295
 80057c8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	f103 0208 	add.w	r2, r3, #8
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	f103 0208 	add.w	r2, r3, #8
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	2200      	movs	r2, #0
 80057e2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80057e4:	bf00      	nop
 80057e6:	370c      	adds	r7, #12
 80057e8:	46bd      	mov	sp, r7
 80057ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ee:	4770      	bx	lr

080057f0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80057f0:	b480      	push	{r7}
 80057f2:	b083      	sub	sp, #12
 80057f4:	af00      	add	r7, sp, #0
 80057f6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	2200      	movs	r2, #0
 80057fc:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80057fe:	bf00      	nop
 8005800:	370c      	adds	r7, #12
 8005802:	46bd      	mov	sp, r7
 8005804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005808:	4770      	bx	lr

0800580a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800580a:	b480      	push	{r7}
 800580c:	b085      	sub	sp, #20
 800580e:	af00      	add	r7, sp, #0
 8005810:	6078      	str	r0, [r7, #4]
 8005812:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	685b      	ldr	r3, [r3, #4]
 8005818:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800581a:	683b      	ldr	r3, [r7, #0]
 800581c:	68fa      	ldr	r2, [r7, #12]
 800581e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	689a      	ldr	r2, [r3, #8]
 8005824:	683b      	ldr	r3, [r7, #0]
 8005826:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	689b      	ldr	r3, [r3, #8]
 800582c:	683a      	ldr	r2, [r7, #0]
 800582e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	683a      	ldr	r2, [r7, #0]
 8005834:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8005836:	683b      	ldr	r3, [r7, #0]
 8005838:	687a      	ldr	r2, [r7, #4]
 800583a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	1c5a      	adds	r2, r3, #1
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	601a      	str	r2, [r3, #0]
}
 8005846:	bf00      	nop
 8005848:	3714      	adds	r7, #20
 800584a:	46bd      	mov	sp, r7
 800584c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005850:	4770      	bx	lr

08005852 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005852:	b480      	push	{r7}
 8005854:	b085      	sub	sp, #20
 8005856:	af00      	add	r7, sp, #0
 8005858:	6078      	str	r0, [r7, #4]
 800585a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800585c:	683b      	ldr	r3, [r7, #0]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8005862:	68bb      	ldr	r3, [r7, #8]
 8005864:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005868:	d103      	bne.n	8005872 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	691b      	ldr	r3, [r3, #16]
 800586e:	60fb      	str	r3, [r7, #12]
 8005870:	e00c      	b.n	800588c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	3308      	adds	r3, #8
 8005876:	60fb      	str	r3, [r7, #12]
 8005878:	e002      	b.n	8005880 <vListInsert+0x2e>
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	685b      	ldr	r3, [r3, #4]
 800587e:	60fb      	str	r3, [r7, #12]
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	685b      	ldr	r3, [r3, #4]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	68ba      	ldr	r2, [r7, #8]
 8005888:	429a      	cmp	r2, r3
 800588a:	d2f6      	bcs.n	800587a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	685a      	ldr	r2, [r3, #4]
 8005890:	683b      	ldr	r3, [r7, #0]
 8005892:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005894:	683b      	ldr	r3, [r7, #0]
 8005896:	685b      	ldr	r3, [r3, #4]
 8005898:	683a      	ldr	r2, [r7, #0]
 800589a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800589c:	683b      	ldr	r3, [r7, #0]
 800589e:	68fa      	ldr	r2, [r7, #12]
 80058a0:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	683a      	ldr	r2, [r7, #0]
 80058a6:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80058a8:	683b      	ldr	r3, [r7, #0]
 80058aa:	687a      	ldr	r2, [r7, #4]
 80058ac:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	1c5a      	adds	r2, r3, #1
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	601a      	str	r2, [r3, #0]
}
 80058b8:	bf00      	nop
 80058ba:	3714      	adds	r7, #20
 80058bc:	46bd      	mov	sp, r7
 80058be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058c2:	4770      	bx	lr

080058c4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80058c4:	b480      	push	{r7}
 80058c6:	b085      	sub	sp, #20
 80058c8:	af00      	add	r7, sp, #0
 80058ca:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	691b      	ldr	r3, [r3, #16]
 80058d0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	685b      	ldr	r3, [r3, #4]
 80058d6:	687a      	ldr	r2, [r7, #4]
 80058d8:	6892      	ldr	r2, [r2, #8]
 80058da:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	689b      	ldr	r3, [r3, #8]
 80058e0:	687a      	ldr	r2, [r7, #4]
 80058e2:	6852      	ldr	r2, [r2, #4]
 80058e4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	685b      	ldr	r3, [r3, #4]
 80058ea:	687a      	ldr	r2, [r7, #4]
 80058ec:	429a      	cmp	r2, r3
 80058ee:	d103      	bne.n	80058f8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	689a      	ldr	r2, [r3, #8]
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	2200      	movs	r2, #0
 80058fc:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	1e5a      	subs	r2, r3, #1
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	681b      	ldr	r3, [r3, #0]
}
 800590c:	4618      	mov	r0, r3
 800590e:	3714      	adds	r7, #20
 8005910:	46bd      	mov	sp, r7
 8005912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005916:	4770      	bx	lr

08005918 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8005918:	b580      	push	{r7, lr}
 800591a:	b084      	sub	sp, #16
 800591c:	af00      	add	r7, sp, #0
 800591e:	6078      	str	r0, [r7, #4]
 8005920:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	2b00      	cmp	r3, #0
 800592a:	d10a      	bne.n	8005942 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800592c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005930:	f383 8811 	msr	BASEPRI, r3
 8005934:	f3bf 8f6f 	isb	sy
 8005938:	f3bf 8f4f 	dsb	sy
 800593c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800593e:	bf00      	nop
 8005940:	e7fe      	b.n	8005940 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8005942:	f002 f8c7 	bl	8007ad4 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	681a      	ldr	r2, [r3, #0]
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800594e:	68f9      	ldr	r1, [r7, #12]
 8005950:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005952:	fb01 f303 	mul.w	r3, r1, r3
 8005956:	441a      	add	r2, r3
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	2200      	movs	r2, #0
 8005960:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	681a      	ldr	r2, [r3, #0]
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	681a      	ldr	r2, [r3, #0]
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005972:	3b01      	subs	r3, #1
 8005974:	68f9      	ldr	r1, [r7, #12]
 8005976:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005978:	fb01 f303 	mul.w	r3, r1, r3
 800597c:	441a      	add	r2, r3
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	22ff      	movs	r2, #255	; 0xff
 8005986:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	22ff      	movs	r2, #255	; 0xff
 800598e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8005992:	683b      	ldr	r3, [r7, #0]
 8005994:	2b00      	cmp	r3, #0
 8005996:	d114      	bne.n	80059c2 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	691b      	ldr	r3, [r3, #16]
 800599c:	2b00      	cmp	r3, #0
 800599e:	d01a      	beq.n	80059d6 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	3310      	adds	r3, #16
 80059a4:	4618      	mov	r0, r3
 80059a6:	f001 f9b1 	bl	8006d0c <xTaskRemoveFromEventList>
 80059aa:	4603      	mov	r3, r0
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	d012      	beq.n	80059d6 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80059b0:	4b0c      	ldr	r3, [pc, #48]	; (80059e4 <xQueueGenericReset+0xcc>)
 80059b2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80059b6:	601a      	str	r2, [r3, #0]
 80059b8:	f3bf 8f4f 	dsb	sy
 80059bc:	f3bf 8f6f 	isb	sy
 80059c0:	e009      	b.n	80059d6 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	3310      	adds	r3, #16
 80059c6:	4618      	mov	r0, r3
 80059c8:	f7ff fef2 	bl	80057b0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	3324      	adds	r3, #36	; 0x24
 80059d0:	4618      	mov	r0, r3
 80059d2:	f7ff feed 	bl	80057b0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80059d6:	f002 f8ad 	bl	8007b34 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80059da:	2301      	movs	r3, #1
}
 80059dc:	4618      	mov	r0, r3
 80059de:	3710      	adds	r7, #16
 80059e0:	46bd      	mov	sp, r7
 80059e2:	bd80      	pop	{r7, pc}
 80059e4:	e000ed04 	.word	0xe000ed04

080059e8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80059e8:	b580      	push	{r7, lr}
 80059ea:	b08e      	sub	sp, #56	; 0x38
 80059ec:	af02      	add	r7, sp, #8
 80059ee:	60f8      	str	r0, [r7, #12]
 80059f0:	60b9      	str	r1, [r7, #8]
 80059f2:	607a      	str	r2, [r7, #4]
 80059f4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	d10a      	bne.n	8005a12 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 80059fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a00:	f383 8811 	msr	BASEPRI, r3
 8005a04:	f3bf 8f6f 	isb	sy
 8005a08:	f3bf 8f4f 	dsb	sy
 8005a0c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8005a0e:	bf00      	nop
 8005a10:	e7fe      	b.n	8005a10 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8005a12:	683b      	ldr	r3, [r7, #0]
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	d10a      	bne.n	8005a2e <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8005a18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a1c:	f383 8811 	msr	BASEPRI, r3
 8005a20:	f3bf 8f6f 	isb	sy
 8005a24:	f3bf 8f4f 	dsb	sy
 8005a28:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005a2a:	bf00      	nop
 8005a2c:	e7fe      	b.n	8005a2c <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	d002      	beq.n	8005a3a <xQueueGenericCreateStatic+0x52>
 8005a34:	68bb      	ldr	r3, [r7, #8]
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d001      	beq.n	8005a3e <xQueueGenericCreateStatic+0x56>
 8005a3a:	2301      	movs	r3, #1
 8005a3c:	e000      	b.n	8005a40 <xQueueGenericCreateStatic+0x58>
 8005a3e:	2300      	movs	r3, #0
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	d10a      	bne.n	8005a5a <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8005a44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a48:	f383 8811 	msr	BASEPRI, r3
 8005a4c:	f3bf 8f6f 	isb	sy
 8005a50:	f3bf 8f4f 	dsb	sy
 8005a54:	623b      	str	r3, [r7, #32]
}
 8005a56:	bf00      	nop
 8005a58:	e7fe      	b.n	8005a58 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	d102      	bne.n	8005a66 <xQueueGenericCreateStatic+0x7e>
 8005a60:	68bb      	ldr	r3, [r7, #8]
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d101      	bne.n	8005a6a <xQueueGenericCreateStatic+0x82>
 8005a66:	2301      	movs	r3, #1
 8005a68:	e000      	b.n	8005a6c <xQueueGenericCreateStatic+0x84>
 8005a6a:	2300      	movs	r3, #0
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	d10a      	bne.n	8005a86 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8005a70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a74:	f383 8811 	msr	BASEPRI, r3
 8005a78:	f3bf 8f6f 	isb	sy
 8005a7c:	f3bf 8f4f 	dsb	sy
 8005a80:	61fb      	str	r3, [r7, #28]
}
 8005a82:	bf00      	nop
 8005a84:	e7fe      	b.n	8005a84 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8005a86:	2354      	movs	r3, #84	; 0x54
 8005a88:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8005a8a:	697b      	ldr	r3, [r7, #20]
 8005a8c:	2b54      	cmp	r3, #84	; 0x54
 8005a8e:	d00a      	beq.n	8005aa6 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8005a90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a94:	f383 8811 	msr	BASEPRI, r3
 8005a98:	f3bf 8f6f 	isb	sy
 8005a9c:	f3bf 8f4f 	dsb	sy
 8005aa0:	61bb      	str	r3, [r7, #24]
}
 8005aa2:	bf00      	nop
 8005aa4:	e7fe      	b.n	8005aa4 <xQueueGenericCreateStatic+0xbc>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005aa6:	683b      	ldr	r3, [r7, #0]
 8005aa8:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8005aaa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	d00d      	beq.n	8005acc <xQueueGenericCreateStatic+0xe4>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8005ab0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ab2:	2201      	movs	r2, #1
 8005ab4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005ab8:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8005abc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005abe:	9300      	str	r3, [sp, #0]
 8005ac0:	4613      	mov	r3, r2
 8005ac2:	687a      	ldr	r2, [r7, #4]
 8005ac4:	68b9      	ldr	r1, [r7, #8]
 8005ac6:	68f8      	ldr	r0, [r7, #12]
 8005ac8:	f000 f805 	bl	8005ad6 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8005acc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8005ace:	4618      	mov	r0, r3
 8005ad0:	3730      	adds	r7, #48	; 0x30
 8005ad2:	46bd      	mov	sp, r7
 8005ad4:	bd80      	pop	{r7, pc}

08005ad6 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8005ad6:	b580      	push	{r7, lr}
 8005ad8:	b084      	sub	sp, #16
 8005ada:	af00      	add	r7, sp, #0
 8005adc:	60f8      	str	r0, [r7, #12]
 8005ade:	60b9      	str	r1, [r7, #8]
 8005ae0:	607a      	str	r2, [r7, #4]
 8005ae2:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8005ae4:	68bb      	ldr	r3, [r7, #8]
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d103      	bne.n	8005af2 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8005aea:	69bb      	ldr	r3, [r7, #24]
 8005aec:	69ba      	ldr	r2, [r7, #24]
 8005aee:	601a      	str	r2, [r3, #0]
 8005af0:	e002      	b.n	8005af8 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8005af2:	69bb      	ldr	r3, [r7, #24]
 8005af4:	687a      	ldr	r2, [r7, #4]
 8005af6:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8005af8:	69bb      	ldr	r3, [r7, #24]
 8005afa:	68fa      	ldr	r2, [r7, #12]
 8005afc:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8005afe:	69bb      	ldr	r3, [r7, #24]
 8005b00:	68ba      	ldr	r2, [r7, #8]
 8005b02:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8005b04:	2101      	movs	r1, #1
 8005b06:	69b8      	ldr	r0, [r7, #24]
 8005b08:	f7ff ff06 	bl	8005918 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8005b0c:	69bb      	ldr	r3, [r7, #24]
 8005b0e:	78fa      	ldrb	r2, [r7, #3]
 8005b10:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_TRACE_FACILITY */

	#if( configUSE_QUEUE_SETS == 1 )
	{
		pxNewQueue->pxQueueSetContainer = NULL;
 8005b14:	69bb      	ldr	r3, [r7, #24]
 8005b16:	2200      	movs	r2, #0
 8005b18:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8005b1a:	bf00      	nop
 8005b1c:	3710      	adds	r7, #16
 8005b1e:	46bd      	mov	sp, r7
 8005b20:	bd80      	pop	{r7, pc}
	...

08005b24 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8005b24:	b580      	push	{r7, lr}
 8005b26:	b08e      	sub	sp, #56	; 0x38
 8005b28:	af00      	add	r7, sp, #0
 8005b2a:	60f8      	str	r0, [r7, #12]
 8005b2c:	60b9      	str	r1, [r7, #8]
 8005b2e:	607a      	str	r2, [r7, #4]
 8005b30:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8005b32:	2300      	movs	r3, #0
 8005b34:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8005b3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	d10a      	bne.n	8005b56 <xQueueGenericSend+0x32>
	__asm volatile
 8005b40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b44:	f383 8811 	msr	BASEPRI, r3
 8005b48:	f3bf 8f6f 	isb	sy
 8005b4c:	f3bf 8f4f 	dsb	sy
 8005b50:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8005b52:	bf00      	nop
 8005b54:	e7fe      	b.n	8005b54 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005b56:	68bb      	ldr	r3, [r7, #8]
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	d103      	bne.n	8005b64 <xQueueGenericSend+0x40>
 8005b5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	d101      	bne.n	8005b68 <xQueueGenericSend+0x44>
 8005b64:	2301      	movs	r3, #1
 8005b66:	e000      	b.n	8005b6a <xQueueGenericSend+0x46>
 8005b68:	2300      	movs	r3, #0
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	d10a      	bne.n	8005b84 <xQueueGenericSend+0x60>
	__asm volatile
 8005b6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b72:	f383 8811 	msr	BASEPRI, r3
 8005b76:	f3bf 8f6f 	isb	sy
 8005b7a:	f3bf 8f4f 	dsb	sy
 8005b7e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005b80:	bf00      	nop
 8005b82:	e7fe      	b.n	8005b82 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005b84:	683b      	ldr	r3, [r7, #0]
 8005b86:	2b02      	cmp	r3, #2
 8005b88:	d103      	bne.n	8005b92 <xQueueGenericSend+0x6e>
 8005b8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b8e:	2b01      	cmp	r3, #1
 8005b90:	d101      	bne.n	8005b96 <xQueueGenericSend+0x72>
 8005b92:	2301      	movs	r3, #1
 8005b94:	e000      	b.n	8005b98 <xQueueGenericSend+0x74>
 8005b96:	2300      	movs	r3, #0
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	d10a      	bne.n	8005bb2 <xQueueGenericSend+0x8e>
	__asm volatile
 8005b9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ba0:	f383 8811 	msr	BASEPRI, r3
 8005ba4:	f3bf 8f6f 	isb	sy
 8005ba8:	f3bf 8f4f 	dsb	sy
 8005bac:	623b      	str	r3, [r7, #32]
}
 8005bae:	bf00      	nop
 8005bb0:	e7fe      	b.n	8005bb0 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005bb2:	f001 fa73 	bl	800709c <xTaskGetSchedulerState>
 8005bb6:	4603      	mov	r3, r0
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d102      	bne.n	8005bc2 <xQueueGenericSend+0x9e>
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d101      	bne.n	8005bc6 <xQueueGenericSend+0xa2>
 8005bc2:	2301      	movs	r3, #1
 8005bc4:	e000      	b.n	8005bc8 <xQueueGenericSend+0xa4>
 8005bc6:	2300      	movs	r3, #0
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	d10a      	bne.n	8005be2 <xQueueGenericSend+0xbe>
	__asm volatile
 8005bcc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bd0:	f383 8811 	msr	BASEPRI, r3
 8005bd4:	f3bf 8f6f 	isb	sy
 8005bd8:	f3bf 8f4f 	dsb	sy
 8005bdc:	61fb      	str	r3, [r7, #28]
}
 8005bde:	bf00      	nop
 8005be0:	e7fe      	b.n	8005be0 <xQueueGenericSend+0xbc>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005be2:	f001 ff77 	bl	8007ad4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005be6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005be8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005bea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005bee:	429a      	cmp	r2, r3
 8005bf0:	d302      	bcc.n	8005bf8 <xQueueGenericSend+0xd4>
 8005bf2:	683b      	ldr	r3, [r7, #0]
 8005bf4:	2b02      	cmp	r3, #2
 8005bf6:	d13d      	bne.n	8005c74 <xQueueGenericSend+0x150>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005bf8:	683a      	ldr	r2, [r7, #0]
 8005bfa:	68b9      	ldr	r1, [r7, #8]
 8005bfc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005bfe:	f000 fa2d 	bl	800605c <prvCopyDataToQueue>
 8005c02:	62f8      	str	r0, [r7, #44]	; 0x2c

				#if ( configUSE_QUEUE_SETS == 1 )
				{
					if( pxQueue->pxQueueSetContainer != NULL )
 8005c04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c06:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	d00f      	beq.n	8005c2c <xQueueGenericSend+0x108>
					{
						if( prvNotifyQueueSetContainer( pxQueue, xCopyPosition ) != pdFALSE )
 8005c0c:	6839      	ldr	r1, [r7, #0]
 8005c0e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005c10:	f000 fba0 	bl	8006354 <prvNotifyQueueSetContainer>
 8005c14:	4603      	mov	r3, r0
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d028      	beq.n	8005c6c <xQueueGenericSend+0x148>
						{
							/* The queue is a member of a queue set, and posting
							to the queue set caused a higher priority task to
							unblock. A context switch is required. */
							queueYIELD_IF_USING_PREEMPTION();
 8005c1a:	4b4a      	ldr	r3, [pc, #296]	; (8005d44 <xQueueGenericSend+0x220>)
 8005c1c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005c20:	601a      	str	r2, [r3, #0]
 8005c22:	f3bf 8f4f 	dsb	sy
 8005c26:	f3bf 8f6f 	isb	sy
 8005c2a:	e01f      	b.n	8005c6c <xQueueGenericSend+0x148>
					}
					else
					{
						/* If there was a task waiting for data to arrive on the
						queue then unblock it now. */
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005c2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	d010      	beq.n	8005c56 <xQueueGenericSend+0x132>
						{
							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005c34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c36:	3324      	adds	r3, #36	; 0x24
 8005c38:	4618      	mov	r0, r3
 8005c3a:	f001 f867 	bl	8006d0c <xTaskRemoveFromEventList>
 8005c3e:	4603      	mov	r3, r0
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	d013      	beq.n	8005c6c <xQueueGenericSend+0x148>
							{
								/* The unblocked task has a priority higher than
								our own so yield immediately.  Yes it is ok to
								do this from within the critical section - the
								kernel takes care of that. */
								queueYIELD_IF_USING_PREEMPTION();
 8005c44:	4b3f      	ldr	r3, [pc, #252]	; (8005d44 <xQueueGenericSend+0x220>)
 8005c46:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005c4a:	601a      	str	r2, [r3, #0]
 8005c4c:	f3bf 8f4f 	dsb	sy
 8005c50:	f3bf 8f6f 	isb	sy
 8005c54:	e00a      	b.n	8005c6c <xQueueGenericSend+0x148>
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
						}
						else if( xYieldRequired != pdFALSE )
 8005c56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	d007      	beq.n	8005c6c <xQueueGenericSend+0x148>
						{
							/* This path is a special case that will only get
							executed if the task was holding multiple mutexes
							and the mutexes were given back in an order that is
							different to that in which they were taken. */
							queueYIELD_IF_USING_PREEMPTION();
 8005c5c:	4b39      	ldr	r3, [pc, #228]	; (8005d44 <xQueueGenericSend+0x220>)
 8005c5e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005c62:	601a      	str	r2, [r3, #0]
 8005c64:	f3bf 8f4f 	dsb	sy
 8005c68:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8005c6c:	f001 ff62 	bl	8007b34 <vPortExitCritical>
				return pdPASS;
 8005c70:	2301      	movs	r3, #1
 8005c72:	e063      	b.n	8005d3c <xQueueGenericSend+0x218>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d103      	bne.n	8005c82 <xQueueGenericSend+0x15e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005c7a:	f001 ff5b 	bl	8007b34 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8005c7e:	2300      	movs	r3, #0
 8005c80:	e05c      	b.n	8005d3c <xQueueGenericSend+0x218>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005c82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	d106      	bne.n	8005c96 <xQueueGenericSend+0x172>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005c88:	f107 0314 	add.w	r3, r7, #20
 8005c8c:	4618      	mov	r0, r3
 8005c8e:	f001 f8a1 	bl	8006dd4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005c92:	2301      	movs	r3, #1
 8005c94:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005c96:	f001 ff4d 	bl	8007b34 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005c9a:	f000 fe09 	bl	80068b0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005c9e:	f001 ff19 	bl	8007ad4 <vPortEnterCritical>
 8005ca2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ca4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005ca8:	b25b      	sxtb	r3, r3
 8005caa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005cae:	d103      	bne.n	8005cb8 <xQueueGenericSend+0x194>
 8005cb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cb2:	2200      	movs	r2, #0
 8005cb4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005cb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cba:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005cbe:	b25b      	sxtb	r3, r3
 8005cc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005cc4:	d103      	bne.n	8005cce <xQueueGenericSend+0x1aa>
 8005cc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cc8:	2200      	movs	r2, #0
 8005cca:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005cce:	f001 ff31 	bl	8007b34 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005cd2:	1d3a      	adds	r2, r7, #4
 8005cd4:	f107 0314 	add.w	r3, r7, #20
 8005cd8:	4611      	mov	r1, r2
 8005cda:	4618      	mov	r0, r3
 8005cdc:	f001 f890 	bl	8006e00 <xTaskCheckForTimeOut>
 8005ce0:	4603      	mov	r3, r0
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d124      	bne.n	8005d30 <xQueueGenericSend+0x20c>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8005ce6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005ce8:	f000 fabe 	bl	8006268 <prvIsQueueFull>
 8005cec:	4603      	mov	r3, r0
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	d018      	beq.n	8005d24 <xQueueGenericSend+0x200>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8005cf2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cf4:	3310      	adds	r3, #16
 8005cf6:	687a      	ldr	r2, [r7, #4]
 8005cf8:	4611      	mov	r1, r2
 8005cfa:	4618      	mov	r0, r3
 8005cfc:	f000 ffb6 	bl	8006c6c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8005d00:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005d02:	f000 fa3b 	bl	800617c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8005d06:	f000 fde1 	bl	80068cc <xTaskResumeAll>
 8005d0a:	4603      	mov	r3, r0
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	f47f af68 	bne.w	8005be2 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8005d12:	4b0c      	ldr	r3, [pc, #48]	; (8005d44 <xQueueGenericSend+0x220>)
 8005d14:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005d18:	601a      	str	r2, [r3, #0]
 8005d1a:	f3bf 8f4f 	dsb	sy
 8005d1e:	f3bf 8f6f 	isb	sy
 8005d22:	e75e      	b.n	8005be2 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8005d24:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005d26:	f000 fa29 	bl	800617c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005d2a:	f000 fdcf 	bl	80068cc <xTaskResumeAll>
 8005d2e:	e758      	b.n	8005be2 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8005d30:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005d32:	f000 fa23 	bl	800617c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005d36:	f000 fdc9 	bl	80068cc <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8005d3a:	2300      	movs	r3, #0
		}
	}
}
 8005d3c:	4618      	mov	r0, r3
 8005d3e:	3738      	adds	r7, #56	; 0x38
 8005d40:	46bd      	mov	sp, r7
 8005d42:	bd80      	pop	{r7, pc}
 8005d44:	e000ed04 	.word	0xe000ed04

08005d48 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8005d48:	b580      	push	{r7, lr}
 8005d4a:	b08e      	sub	sp, #56	; 0x38
 8005d4c:	af00      	add	r7, sp, #0
 8005d4e:	60f8      	str	r0, [r7, #12]
 8005d50:	60b9      	str	r1, [r7, #8]
 8005d52:	607a      	str	r2, [r7, #4]
 8005d54:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8005d5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	d10a      	bne.n	8005d76 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8005d60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d64:	f383 8811 	msr	BASEPRI, r3
 8005d68:	f3bf 8f6f 	isb	sy
 8005d6c:	f3bf 8f4f 	dsb	sy
 8005d70:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005d72:	bf00      	nop
 8005d74:	e7fe      	b.n	8005d74 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005d76:	68bb      	ldr	r3, [r7, #8]
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	d103      	bne.n	8005d84 <xQueueGenericSendFromISR+0x3c>
 8005d7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	d101      	bne.n	8005d88 <xQueueGenericSendFromISR+0x40>
 8005d84:	2301      	movs	r3, #1
 8005d86:	e000      	b.n	8005d8a <xQueueGenericSendFromISR+0x42>
 8005d88:	2300      	movs	r3, #0
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d10a      	bne.n	8005da4 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8005d8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d92:	f383 8811 	msr	BASEPRI, r3
 8005d96:	f3bf 8f6f 	isb	sy
 8005d9a:	f3bf 8f4f 	dsb	sy
 8005d9e:	623b      	str	r3, [r7, #32]
}
 8005da0:	bf00      	nop
 8005da2:	e7fe      	b.n	8005da2 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005da4:	683b      	ldr	r3, [r7, #0]
 8005da6:	2b02      	cmp	r3, #2
 8005da8:	d103      	bne.n	8005db2 <xQueueGenericSendFromISR+0x6a>
 8005daa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005dac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005dae:	2b01      	cmp	r3, #1
 8005db0:	d101      	bne.n	8005db6 <xQueueGenericSendFromISR+0x6e>
 8005db2:	2301      	movs	r3, #1
 8005db4:	e000      	b.n	8005db8 <xQueueGenericSendFromISR+0x70>
 8005db6:	2300      	movs	r3, #0
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	d10a      	bne.n	8005dd2 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8005dbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005dc0:	f383 8811 	msr	BASEPRI, r3
 8005dc4:	f3bf 8f6f 	isb	sy
 8005dc8:	f3bf 8f4f 	dsb	sy
 8005dcc:	61fb      	str	r3, [r7, #28]
}
 8005dce:	bf00      	nop
 8005dd0:	e7fe      	b.n	8005dd0 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005dd2:	f001 ff61 	bl	8007c98 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8005dd6:	f3ef 8211 	mrs	r2, BASEPRI
 8005dda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005dde:	f383 8811 	msr	BASEPRI, r3
 8005de2:	f3bf 8f6f 	isb	sy
 8005de6:	f3bf 8f4f 	dsb	sy
 8005dea:	61ba      	str	r2, [r7, #24]
 8005dec:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8005dee:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005df0:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005df2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005df4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005df6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005df8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005dfa:	429a      	cmp	r2, r3
 8005dfc:	d302      	bcc.n	8005e04 <xQueueGenericSendFromISR+0xbc>
 8005dfe:	683b      	ldr	r3, [r7, #0]
 8005e00:	2b02      	cmp	r3, #2
 8005e02:	d13e      	bne.n	8005e82 <xQueueGenericSendFromISR+0x13a>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8005e04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e06:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005e0a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005e0e:	683a      	ldr	r2, [r7, #0]
 8005e10:	68b9      	ldr	r1, [r7, #8]
 8005e12:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005e14:	f000 f922 	bl	800605c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8005e18:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8005e1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e20:	d124      	bne.n	8005e6c <xQueueGenericSendFromISR+0x124>
			{
				#if ( configUSE_QUEUE_SETS == 1 )
				{
					if( pxQueue->pxQueueSetContainer != NULL )
 8005e22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e24:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d00d      	beq.n	8005e46 <xQueueGenericSendFromISR+0xfe>
					{
						if( prvNotifyQueueSetContainer( pxQueue, xCopyPosition ) != pdFALSE )
 8005e2a:	6839      	ldr	r1, [r7, #0]
 8005e2c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005e2e:	f000 fa91 	bl	8006354 <prvNotifyQueueSetContainer>
 8005e32:	4603      	mov	r3, r0
 8005e34:	2b00      	cmp	r3, #0
 8005e36:	d021      	beq.n	8005e7c <xQueueGenericSendFromISR+0x134>
						{
							/* The queue is a member of a queue set, and posting
							to the queue set caused a higher priority task to
							unblock.  A context switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	d01e      	beq.n	8005e7c <xQueueGenericSendFromISR+0x134>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	2201      	movs	r2, #1
 8005e42:	601a      	str	r2, [r3, #0]
 8005e44:	e01a      	b.n	8005e7c <xQueueGenericSendFromISR+0x134>
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else
					{
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005e46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	d016      	beq.n	8005e7c <xQueueGenericSendFromISR+0x134>
						{
							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005e4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e50:	3324      	adds	r3, #36	; 0x24
 8005e52:	4618      	mov	r0, r3
 8005e54:	f000 ff5a 	bl	8006d0c <xTaskRemoveFromEventList>
 8005e58:	4603      	mov	r3, r0
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	d00e      	beq.n	8005e7c <xQueueGenericSendFromISR+0x134>
							{
								/* The task waiting has a higher priority so
								record that a context switch is required. */
								if( pxHigherPriorityTaskWoken != NULL )
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	d00b      	beq.n	8005e7c <xQueueGenericSendFromISR+0x134>
								{
									*pxHigherPriorityTaskWoken = pdTRUE;
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	2201      	movs	r2, #1
 8005e68:	601a      	str	r2, [r3, #0]
 8005e6a:	e007      	b.n	8005e7c <xQueueGenericSendFromISR+0x134>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005e6c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005e70:	3301      	adds	r3, #1
 8005e72:	b2db      	uxtb	r3, r3
 8005e74:	b25a      	sxtb	r2, r3
 8005e76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e78:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8005e7c:	2301      	movs	r3, #1
 8005e7e:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8005e80:	e001      	b.n	8005e86 <xQueueGenericSendFromISR+0x13e>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8005e82:	2300      	movs	r3, #0
 8005e84:	637b      	str	r3, [r7, #52]	; 0x34
 8005e86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e88:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005e8a:	693b      	ldr	r3, [r7, #16]
 8005e8c:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8005e90:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005e92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8005e94:	4618      	mov	r0, r3
 8005e96:	3738      	adds	r7, #56	; 0x38
 8005e98:	46bd      	mov	sp, r7
 8005e9a:	bd80      	pop	{r7, pc}

08005e9c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8005e9c:	b580      	push	{r7, lr}
 8005e9e:	b08c      	sub	sp, #48	; 0x30
 8005ea0:	af00      	add	r7, sp, #0
 8005ea2:	60f8      	str	r0, [r7, #12]
 8005ea4:	60b9      	str	r1, [r7, #8]
 8005ea6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8005ea8:	2300      	movs	r3, #0
 8005eaa:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005eb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	d10a      	bne.n	8005ecc <xQueueReceive+0x30>
	__asm volatile
 8005eb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005eba:	f383 8811 	msr	BASEPRI, r3
 8005ebe:	f3bf 8f6f 	isb	sy
 8005ec2:	f3bf 8f4f 	dsb	sy
 8005ec6:	623b      	str	r3, [r7, #32]
}
 8005ec8:	bf00      	nop
 8005eca:	e7fe      	b.n	8005eca <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005ecc:	68bb      	ldr	r3, [r7, #8]
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	d103      	bne.n	8005eda <xQueueReceive+0x3e>
 8005ed2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ed4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d101      	bne.n	8005ede <xQueueReceive+0x42>
 8005eda:	2301      	movs	r3, #1
 8005edc:	e000      	b.n	8005ee0 <xQueueReceive+0x44>
 8005ede:	2300      	movs	r3, #0
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	d10a      	bne.n	8005efa <xQueueReceive+0x5e>
	__asm volatile
 8005ee4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ee8:	f383 8811 	msr	BASEPRI, r3
 8005eec:	f3bf 8f6f 	isb	sy
 8005ef0:	f3bf 8f4f 	dsb	sy
 8005ef4:	61fb      	str	r3, [r7, #28]
}
 8005ef6:	bf00      	nop
 8005ef8:	e7fe      	b.n	8005ef8 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005efa:	f001 f8cf 	bl	800709c <xTaskGetSchedulerState>
 8005efe:	4603      	mov	r3, r0
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	d102      	bne.n	8005f0a <xQueueReceive+0x6e>
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d101      	bne.n	8005f0e <xQueueReceive+0x72>
 8005f0a:	2301      	movs	r3, #1
 8005f0c:	e000      	b.n	8005f10 <xQueueReceive+0x74>
 8005f0e:	2300      	movs	r3, #0
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	d10a      	bne.n	8005f2a <xQueueReceive+0x8e>
	__asm volatile
 8005f14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f18:	f383 8811 	msr	BASEPRI, r3
 8005f1c:	f3bf 8f6f 	isb	sy
 8005f20:	f3bf 8f4f 	dsb	sy
 8005f24:	61bb      	str	r3, [r7, #24]
}
 8005f26:	bf00      	nop
 8005f28:	e7fe      	b.n	8005f28 <xQueueReceive+0x8c>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8005f2a:	f001 fdd3 	bl	8007ad4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005f2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f32:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005f34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d01f      	beq.n	8005f7a <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005f3a:	68b9      	ldr	r1, [r7, #8]
 8005f3c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005f3e:	f000 f8f7 	bl	8006130 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005f42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f44:	1e5a      	subs	r2, r3, #1
 8005f46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f48:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005f4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f4c:	691b      	ldr	r3, [r3, #16]
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	d00f      	beq.n	8005f72 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005f52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f54:	3310      	adds	r3, #16
 8005f56:	4618      	mov	r0, r3
 8005f58:	f000 fed8 	bl	8006d0c <xTaskRemoveFromEventList>
 8005f5c:	4603      	mov	r3, r0
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	d007      	beq.n	8005f72 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8005f62:	4b3d      	ldr	r3, [pc, #244]	; (8006058 <xQueueReceive+0x1bc>)
 8005f64:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005f68:	601a      	str	r2, [r3, #0]
 8005f6a:	f3bf 8f4f 	dsb	sy
 8005f6e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8005f72:	f001 fddf 	bl	8007b34 <vPortExitCritical>
				return pdPASS;
 8005f76:	2301      	movs	r3, #1
 8005f78:	e069      	b.n	800604e <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	2b00      	cmp	r3, #0
 8005f7e:	d103      	bne.n	8005f88 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005f80:	f001 fdd8 	bl	8007b34 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005f84:	2300      	movs	r3, #0
 8005f86:	e062      	b.n	800604e <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005f88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	d106      	bne.n	8005f9c <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005f8e:	f107 0310 	add.w	r3, r7, #16
 8005f92:	4618      	mov	r0, r3
 8005f94:	f000 ff1e 	bl	8006dd4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005f98:	2301      	movs	r3, #1
 8005f9a:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005f9c:	f001 fdca 	bl	8007b34 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005fa0:	f000 fc86 	bl	80068b0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005fa4:	f001 fd96 	bl	8007ad4 <vPortEnterCritical>
 8005fa8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005faa:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005fae:	b25b      	sxtb	r3, r3
 8005fb0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005fb4:	d103      	bne.n	8005fbe <xQueueReceive+0x122>
 8005fb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fb8:	2200      	movs	r2, #0
 8005fba:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005fbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fc0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005fc4:	b25b      	sxtb	r3, r3
 8005fc6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005fca:	d103      	bne.n	8005fd4 <xQueueReceive+0x138>
 8005fcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fce:	2200      	movs	r2, #0
 8005fd0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005fd4:	f001 fdae 	bl	8007b34 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005fd8:	1d3a      	adds	r2, r7, #4
 8005fda:	f107 0310 	add.w	r3, r7, #16
 8005fde:	4611      	mov	r1, r2
 8005fe0:	4618      	mov	r0, r3
 8005fe2:	f000 ff0d 	bl	8006e00 <xTaskCheckForTimeOut>
 8005fe6:	4603      	mov	r3, r0
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	d123      	bne.n	8006034 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005fec:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005fee:	f000 f925 	bl	800623c <prvIsQueueEmpty>
 8005ff2:	4603      	mov	r3, r0
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	d017      	beq.n	8006028 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005ff8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ffa:	3324      	adds	r3, #36	; 0x24
 8005ffc:	687a      	ldr	r2, [r7, #4]
 8005ffe:	4611      	mov	r1, r2
 8006000:	4618      	mov	r0, r3
 8006002:	f000 fe33 	bl	8006c6c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8006006:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006008:	f000 f8b8 	bl	800617c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800600c:	f000 fc5e 	bl	80068cc <xTaskResumeAll>
 8006010:	4603      	mov	r3, r0
 8006012:	2b00      	cmp	r3, #0
 8006014:	d189      	bne.n	8005f2a <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8006016:	4b10      	ldr	r3, [pc, #64]	; (8006058 <xQueueReceive+0x1bc>)
 8006018:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800601c:	601a      	str	r2, [r3, #0]
 800601e:	f3bf 8f4f 	dsb	sy
 8006022:	f3bf 8f6f 	isb	sy
 8006026:	e780      	b.n	8005f2a <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8006028:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800602a:	f000 f8a7 	bl	800617c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800602e:	f000 fc4d 	bl	80068cc <xTaskResumeAll>
 8006032:	e77a      	b.n	8005f2a <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8006034:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006036:	f000 f8a1 	bl	800617c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800603a:	f000 fc47 	bl	80068cc <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800603e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006040:	f000 f8fc 	bl	800623c <prvIsQueueEmpty>
 8006044:	4603      	mov	r3, r0
 8006046:	2b00      	cmp	r3, #0
 8006048:	f43f af6f 	beq.w	8005f2a <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800604c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 800604e:	4618      	mov	r0, r3
 8006050:	3730      	adds	r7, #48	; 0x30
 8006052:	46bd      	mov	sp, r7
 8006054:	bd80      	pop	{r7, pc}
 8006056:	bf00      	nop
 8006058:	e000ed04 	.word	0xe000ed04

0800605c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800605c:	b580      	push	{r7, lr}
 800605e:	b086      	sub	sp, #24
 8006060:	af00      	add	r7, sp, #0
 8006062:	60f8      	str	r0, [r7, #12]
 8006064:	60b9      	str	r1, [r7, #8]
 8006066:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8006068:	2300      	movs	r3, #0
 800606a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006070:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006076:	2b00      	cmp	r3, #0
 8006078:	d10d      	bne.n	8006096 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	2b00      	cmp	r3, #0
 8006080:	d14d      	bne.n	800611e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	685b      	ldr	r3, [r3, #4]
 8006086:	4618      	mov	r0, r3
 8006088:	f001 f826 	bl	80070d8 <xTaskPriorityDisinherit>
 800608c:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	2200      	movs	r2, #0
 8006092:	605a      	str	r2, [r3, #4]
 8006094:	e043      	b.n	800611e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	2b00      	cmp	r3, #0
 800609a:	d119      	bne.n	80060d0 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	6898      	ldr	r0, [r3, #8]
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060a4:	461a      	mov	r2, r3
 80060a6:	68b9      	ldr	r1, [r7, #8]
 80060a8:	f002 f894 	bl	80081d4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	689a      	ldr	r2, [r3, #8]
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060b4:	441a      	add	r2, r3
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	689a      	ldr	r2, [r3, #8]
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	685b      	ldr	r3, [r3, #4]
 80060c2:	429a      	cmp	r2, r3
 80060c4:	d32b      	bcc.n	800611e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	681a      	ldr	r2, [r3, #0]
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	609a      	str	r2, [r3, #8]
 80060ce:	e026      	b.n	800611e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	68d8      	ldr	r0, [r3, #12]
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060d8:	461a      	mov	r2, r3
 80060da:	68b9      	ldr	r1, [r7, #8]
 80060dc:	f002 f87a 	bl	80081d4 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	68da      	ldr	r2, [r3, #12]
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060e8:	425b      	negs	r3, r3
 80060ea:	441a      	add	r2, r3
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	68da      	ldr	r2, [r3, #12]
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	429a      	cmp	r2, r3
 80060fa:	d207      	bcs.n	800610c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	685a      	ldr	r2, [r3, #4]
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006104:	425b      	negs	r3, r3
 8006106:	441a      	add	r2, r3
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	2b02      	cmp	r3, #2
 8006110:	d105      	bne.n	800611e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006112:	693b      	ldr	r3, [r7, #16]
 8006114:	2b00      	cmp	r3, #0
 8006116:	d002      	beq.n	800611e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8006118:	693b      	ldr	r3, [r7, #16]
 800611a:	3b01      	subs	r3, #1
 800611c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800611e:	693b      	ldr	r3, [r7, #16]
 8006120:	1c5a      	adds	r2, r3, #1
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8006126:	697b      	ldr	r3, [r7, #20]
}
 8006128:	4618      	mov	r0, r3
 800612a:	3718      	adds	r7, #24
 800612c:	46bd      	mov	sp, r7
 800612e:	bd80      	pop	{r7, pc}

08006130 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8006130:	b580      	push	{r7, lr}
 8006132:	b082      	sub	sp, #8
 8006134:	af00      	add	r7, sp, #0
 8006136:	6078      	str	r0, [r7, #4]
 8006138:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800613e:	2b00      	cmp	r3, #0
 8006140:	d018      	beq.n	8006174 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	68da      	ldr	r2, [r3, #12]
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800614a:	441a      	add	r2, r3
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	68da      	ldr	r2, [r3, #12]
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	685b      	ldr	r3, [r3, #4]
 8006158:	429a      	cmp	r2, r3
 800615a:	d303      	bcc.n	8006164 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	681a      	ldr	r2, [r3, #0]
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	68d9      	ldr	r1, [r3, #12]
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800616c:	461a      	mov	r2, r3
 800616e:	6838      	ldr	r0, [r7, #0]
 8006170:	f002 f830 	bl	80081d4 <memcpy>
	}
}
 8006174:	bf00      	nop
 8006176:	3708      	adds	r7, #8
 8006178:	46bd      	mov	sp, r7
 800617a:	bd80      	pop	{r7, pc}

0800617c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800617c:	b580      	push	{r7, lr}
 800617e:	b084      	sub	sp, #16
 8006180:	af00      	add	r7, sp, #0
 8006182:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8006184:	f001 fca6 	bl	8007ad4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800618e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006190:	e01f      	b.n	80061d2 <prvUnlockQueue+0x56>
		{
			/* Data was posted while the queue was locked.  Are any tasks
			blocked waiting for data to become available? */
			#if ( configUSE_QUEUE_SETS == 1 )
			{
				if( pxQueue->pxQueueSetContainer != NULL )
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006196:	2b00      	cmp	r3, #0
 8006198:	d009      	beq.n	80061ae <prvUnlockQueue+0x32>
				{
					if( prvNotifyQueueSetContainer( pxQueue, queueSEND_TO_BACK ) != pdFALSE )
 800619a:	2100      	movs	r1, #0
 800619c:	6878      	ldr	r0, [r7, #4]
 800619e:	f000 f8d9 	bl	8006354 <prvNotifyQueueSetContainer>
 80061a2:	4603      	mov	r3, r0
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	d010      	beq.n	80061ca <prvUnlockQueue+0x4e>
					{
						/* The queue is a member of a queue set, and posting to
						the queue set caused a higher priority task to unblock.
						A context switch is required. */
						vTaskMissedYield();
 80061a8:	f000 fe8c 	bl	8006ec4 <vTaskMissedYield>
 80061ac:	e00d      	b.n	80061ca <prvUnlockQueue+0x4e>
				else
				{
					/* Tasks that are removed from the event list will get
					added to the pending ready list as the scheduler is still
					suspended. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	d012      	beq.n	80061dc <prvUnlockQueue+0x60>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	3324      	adds	r3, #36	; 0x24
 80061ba:	4618      	mov	r0, r3
 80061bc:	f000 fda6 	bl	8006d0c <xTaskRemoveFromEventList>
 80061c0:	4603      	mov	r3, r0
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d001      	beq.n	80061ca <prvUnlockQueue+0x4e>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							vTaskMissedYield();
 80061c6:	f000 fe7d 	bl	8006ec4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80061ca:	7bfb      	ldrb	r3, [r7, #15]
 80061cc:	3b01      	subs	r3, #1
 80061ce:	b2db      	uxtb	r3, r3
 80061d0:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80061d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	dcdb      	bgt.n	8006192 <prvUnlockQueue+0x16>
 80061da:	e000      	b.n	80061de <prvUnlockQueue+0x62>
						break;
 80061dc:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	22ff      	movs	r2, #255	; 0xff
 80061e2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80061e6:	f001 fca5 	bl	8007b34 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80061ea:	f001 fc73 	bl	8007ad4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80061f4:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80061f6:	e011      	b.n	800621c <prvUnlockQueue+0xa0>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	691b      	ldr	r3, [r3, #16]
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	d012      	beq.n	8006226 <prvUnlockQueue+0xaa>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	3310      	adds	r3, #16
 8006204:	4618      	mov	r0, r3
 8006206:	f000 fd81 	bl	8006d0c <xTaskRemoveFromEventList>
 800620a:	4603      	mov	r3, r0
 800620c:	2b00      	cmp	r3, #0
 800620e:	d001      	beq.n	8006214 <prvUnlockQueue+0x98>
				{
					vTaskMissedYield();
 8006210:	f000 fe58 	bl	8006ec4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8006214:	7bbb      	ldrb	r3, [r7, #14]
 8006216:	3b01      	subs	r3, #1
 8006218:	b2db      	uxtb	r3, r3
 800621a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800621c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006220:	2b00      	cmp	r3, #0
 8006222:	dce9      	bgt.n	80061f8 <prvUnlockQueue+0x7c>
 8006224:	e000      	b.n	8006228 <prvUnlockQueue+0xac>
			}
			else
			{
				break;
 8006226:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	22ff      	movs	r2, #255	; 0xff
 800622c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8006230:	f001 fc80 	bl	8007b34 <vPortExitCritical>
}
 8006234:	bf00      	nop
 8006236:	3710      	adds	r7, #16
 8006238:	46bd      	mov	sp, r7
 800623a:	bd80      	pop	{r7, pc}

0800623c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800623c:	b580      	push	{r7, lr}
 800623e:	b084      	sub	sp, #16
 8006240:	af00      	add	r7, sp, #0
 8006242:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006244:	f001 fc46 	bl	8007ad4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800624c:	2b00      	cmp	r3, #0
 800624e:	d102      	bne.n	8006256 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8006250:	2301      	movs	r3, #1
 8006252:	60fb      	str	r3, [r7, #12]
 8006254:	e001      	b.n	800625a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8006256:	2300      	movs	r3, #0
 8006258:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800625a:	f001 fc6b 	bl	8007b34 <vPortExitCritical>

	return xReturn;
 800625e:	68fb      	ldr	r3, [r7, #12]
}
 8006260:	4618      	mov	r0, r3
 8006262:	3710      	adds	r7, #16
 8006264:	46bd      	mov	sp, r7
 8006266:	bd80      	pop	{r7, pc}

08006268 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8006268:	b580      	push	{r7, lr}
 800626a:	b084      	sub	sp, #16
 800626c:	af00      	add	r7, sp, #0
 800626e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006270:	f001 fc30 	bl	8007ad4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800627c:	429a      	cmp	r2, r3
 800627e:	d102      	bne.n	8006286 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8006280:	2301      	movs	r3, #1
 8006282:	60fb      	str	r3, [r7, #12]
 8006284:	e001      	b.n	800628a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8006286:	2300      	movs	r3, #0
 8006288:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800628a:	f001 fc53 	bl	8007b34 <vPortExitCritical>

	return xReturn;
 800628e:	68fb      	ldr	r3, [r7, #12]
}
 8006290:	4618      	mov	r0, r3
 8006292:	3710      	adds	r7, #16
 8006294:	46bd      	mov	sp, r7
 8006296:	bd80      	pop	{r7, pc}

08006298 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8006298:	b480      	push	{r7}
 800629a:	b085      	sub	sp, #20
 800629c:	af00      	add	r7, sp, #0
 800629e:	6078      	str	r0, [r7, #4]
 80062a0:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80062a2:	2300      	movs	r3, #0
 80062a4:	60fb      	str	r3, [r7, #12]
 80062a6:	e014      	b.n	80062d2 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80062a8:	4a0f      	ldr	r2, [pc, #60]	; (80062e8 <vQueueAddToRegistry+0x50>)
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80062b0:	2b00      	cmp	r3, #0
 80062b2:	d10b      	bne.n	80062cc <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80062b4:	490c      	ldr	r1, [pc, #48]	; (80062e8 <vQueueAddToRegistry+0x50>)
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	683a      	ldr	r2, [r7, #0]
 80062ba:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80062be:	4a0a      	ldr	r2, [pc, #40]	; (80062e8 <vQueueAddToRegistry+0x50>)
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	00db      	lsls	r3, r3, #3
 80062c4:	4413      	add	r3, r2
 80062c6:	687a      	ldr	r2, [r7, #4]
 80062c8:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80062ca:	e006      	b.n	80062da <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	3301      	adds	r3, #1
 80062d0:	60fb      	str	r3, [r7, #12]
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	2b07      	cmp	r3, #7
 80062d6:	d9e7      	bls.n	80062a8 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80062d8:	bf00      	nop
 80062da:	bf00      	nop
 80062dc:	3714      	adds	r7, #20
 80062de:	46bd      	mov	sp, r7
 80062e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062e4:	4770      	bx	lr
 80062e6:	bf00      	nop
 80062e8:	20000bbc 	.word	0x20000bbc

080062ec <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80062ec:	b580      	push	{r7, lr}
 80062ee:	b086      	sub	sp, #24
 80062f0:	af00      	add	r7, sp, #0
 80062f2:	60f8      	str	r0, [r7, #12]
 80062f4:	60b9      	str	r1, [r7, #8]
 80062f6:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80062fc:	f001 fbea 	bl	8007ad4 <vPortEnterCritical>
 8006300:	697b      	ldr	r3, [r7, #20]
 8006302:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006306:	b25b      	sxtb	r3, r3
 8006308:	f1b3 3fff 	cmp.w	r3, #4294967295
 800630c:	d103      	bne.n	8006316 <vQueueWaitForMessageRestricted+0x2a>
 800630e:	697b      	ldr	r3, [r7, #20]
 8006310:	2200      	movs	r2, #0
 8006312:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006316:	697b      	ldr	r3, [r7, #20]
 8006318:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800631c:	b25b      	sxtb	r3, r3
 800631e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006322:	d103      	bne.n	800632c <vQueueWaitForMessageRestricted+0x40>
 8006324:	697b      	ldr	r3, [r7, #20]
 8006326:	2200      	movs	r2, #0
 8006328:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800632c:	f001 fc02 	bl	8007b34 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8006330:	697b      	ldr	r3, [r7, #20]
 8006332:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006334:	2b00      	cmp	r3, #0
 8006336:	d106      	bne.n	8006346 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8006338:	697b      	ldr	r3, [r7, #20]
 800633a:	3324      	adds	r3, #36	; 0x24
 800633c:	687a      	ldr	r2, [r7, #4]
 800633e:	68b9      	ldr	r1, [r7, #8]
 8006340:	4618      	mov	r0, r3
 8006342:	f000 fcb7 	bl	8006cb4 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8006346:	6978      	ldr	r0, [r7, #20]
 8006348:	f7ff ff18 	bl	800617c <prvUnlockQueue>
	}
 800634c:	bf00      	nop
 800634e:	3718      	adds	r7, #24
 8006350:	46bd      	mov	sp, r7
 8006352:	bd80      	pop	{r7, pc}

08006354 <prvNotifyQueueSetContainer>:
/*-----------------------------------------------------------*/

#if ( configUSE_QUEUE_SETS == 1 )

	static BaseType_t prvNotifyQueueSetContainer( const Queue_t * const pxQueue, const BaseType_t xCopyPosition )
	{
 8006354:	b580      	push	{r7, lr}
 8006356:	b088      	sub	sp, #32
 8006358:	af00      	add	r7, sp, #0
 800635a:	6078      	str	r0, [r7, #4]
 800635c:	6039      	str	r1, [r7, #0]
	Queue_t *pxQueueSetContainer = pxQueue->pxQueueSetContainer;
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006362:	61bb      	str	r3, [r7, #24]
	BaseType_t xReturn = pdFALSE;
 8006364:	2300      	movs	r3, #0
 8006366:	61fb      	str	r3, [r7, #28]

		/* This function must be called form a critical section. */

		configASSERT( pxQueueSetContainer );
 8006368:	69bb      	ldr	r3, [r7, #24]
 800636a:	2b00      	cmp	r3, #0
 800636c:	d10a      	bne.n	8006384 <prvNotifyQueueSetContainer+0x30>
	__asm volatile
 800636e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006372:	f383 8811 	msr	BASEPRI, r3
 8006376:	f3bf 8f6f 	isb	sy
 800637a:	f3bf 8f4f 	dsb	sy
 800637e:	613b      	str	r3, [r7, #16]
}
 8006380:	bf00      	nop
 8006382:	e7fe      	b.n	8006382 <prvNotifyQueueSetContainer+0x2e>
		configASSERT( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength );
 8006384:	69bb      	ldr	r3, [r7, #24]
 8006386:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006388:	69bb      	ldr	r3, [r7, #24]
 800638a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800638c:	429a      	cmp	r2, r3
 800638e:	d30a      	bcc.n	80063a6 <prvNotifyQueueSetContainer+0x52>
	__asm volatile
 8006390:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006394:	f383 8811 	msr	BASEPRI, r3
 8006398:	f3bf 8f6f 	isb	sy
 800639c:	f3bf 8f4f 	dsb	sy
 80063a0:	60fb      	str	r3, [r7, #12]
}
 80063a2:	bf00      	nop
 80063a4:	e7fe      	b.n	80063a4 <prvNotifyQueueSetContainer+0x50>

		if( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength )
 80063a6:	69bb      	ldr	r3, [r7, #24]
 80063a8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80063aa:	69bb      	ldr	r3, [r7, #24]
 80063ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80063ae:	429a      	cmp	r2, r3
 80063b0:	d225      	bcs.n	80063fe <prvNotifyQueueSetContainer+0xaa>
		{
			const int8_t cTxLock = pxQueueSetContainer->cTxLock;
 80063b2:	69bb      	ldr	r3, [r7, #24]
 80063b4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80063b8:	75fb      	strb	r3, [r7, #23]

			traceQUEUE_SEND( pxQueueSetContainer );

			/* The data copied is the handle of the queue that contains data. */
			xReturn = prvCopyDataToQueue( pxQueueSetContainer, &pxQueue, xCopyPosition );
 80063ba:	1d3b      	adds	r3, r7, #4
 80063bc:	683a      	ldr	r2, [r7, #0]
 80063be:	4619      	mov	r1, r3
 80063c0:	69b8      	ldr	r0, [r7, #24]
 80063c2:	f7ff fe4b 	bl	800605c <prvCopyDataToQueue>
 80063c6:	61f8      	str	r0, [r7, #28]

			if( cTxLock == queueUNLOCKED )
 80063c8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80063cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80063d0:	d10e      	bne.n	80063f0 <prvNotifyQueueSetContainer+0x9c>
			{
				if( listLIST_IS_EMPTY( &( pxQueueSetContainer->xTasksWaitingToReceive ) ) == pdFALSE )
 80063d2:	69bb      	ldr	r3, [r7, #24]
 80063d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	d011      	beq.n	80063fe <prvNotifyQueueSetContainer+0xaa>
				{
					if( xTaskRemoveFromEventList( &( pxQueueSetContainer->xTasksWaitingToReceive ) ) != pdFALSE )
 80063da:	69bb      	ldr	r3, [r7, #24]
 80063dc:	3324      	adds	r3, #36	; 0x24
 80063de:	4618      	mov	r0, r3
 80063e0:	f000 fc94 	bl	8006d0c <xTaskRemoveFromEventList>
 80063e4:	4603      	mov	r3, r0
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	d009      	beq.n	80063fe <prvNotifyQueueSetContainer+0xaa>
					{
						/* The task waiting has a higher priority. */
						xReturn = pdTRUE;
 80063ea:	2301      	movs	r3, #1
 80063ec:	61fb      	str	r3, [r7, #28]
 80063ee:	e006      	b.n	80063fe <prvNotifyQueueSetContainer+0xaa>
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else
			{
				pxQueueSetContainer->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80063f0:	7dfb      	ldrb	r3, [r7, #23]
 80063f2:	3301      	adds	r3, #1
 80063f4:	b2db      	uxtb	r3, r3
 80063f6:	b25a      	sxtb	r2, r3
 80063f8:	69bb      	ldr	r3, [r7, #24]
 80063fa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80063fe:	69fb      	ldr	r3, [r7, #28]
	}
 8006400:	4618      	mov	r0, r3
 8006402:	3720      	adds	r7, #32
 8006404:	46bd      	mov	sp, r7
 8006406:	bd80      	pop	{r7, pc}

08006408 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8006408:	b580      	push	{r7, lr}
 800640a:	b08e      	sub	sp, #56	; 0x38
 800640c:	af04      	add	r7, sp, #16
 800640e:	60f8      	str	r0, [r7, #12]
 8006410:	60b9      	str	r1, [r7, #8]
 8006412:	607a      	str	r2, [r7, #4]
 8006414:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8006416:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006418:	2b00      	cmp	r3, #0
 800641a:	d10a      	bne.n	8006432 <xTaskCreateStatic+0x2a>
	__asm volatile
 800641c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006420:	f383 8811 	msr	BASEPRI, r3
 8006424:	f3bf 8f6f 	isb	sy
 8006428:	f3bf 8f4f 	dsb	sy
 800642c:	623b      	str	r3, [r7, #32]
}
 800642e:	bf00      	nop
 8006430:	e7fe      	b.n	8006430 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8006432:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006434:	2b00      	cmp	r3, #0
 8006436:	d10a      	bne.n	800644e <xTaskCreateStatic+0x46>
	__asm volatile
 8006438:	f04f 0350 	mov.w	r3, #80	; 0x50
 800643c:	f383 8811 	msr	BASEPRI, r3
 8006440:	f3bf 8f6f 	isb	sy
 8006444:	f3bf 8f4f 	dsb	sy
 8006448:	61fb      	str	r3, [r7, #28]
}
 800644a:	bf00      	nop
 800644c:	e7fe      	b.n	800644c <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800644e:	23a8      	movs	r3, #168	; 0xa8
 8006450:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8006452:	693b      	ldr	r3, [r7, #16]
 8006454:	2ba8      	cmp	r3, #168	; 0xa8
 8006456:	d00a      	beq.n	800646e <xTaskCreateStatic+0x66>
	__asm volatile
 8006458:	f04f 0350 	mov.w	r3, #80	; 0x50
 800645c:	f383 8811 	msr	BASEPRI, r3
 8006460:	f3bf 8f6f 	isb	sy
 8006464:	f3bf 8f4f 	dsb	sy
 8006468:	61bb      	str	r3, [r7, #24]
}
 800646a:	bf00      	nop
 800646c:	e7fe      	b.n	800646c <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800646e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006470:	2b00      	cmp	r3, #0
 8006472:	d01e      	beq.n	80064b2 <xTaskCreateStatic+0xaa>
 8006474:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006476:	2b00      	cmp	r3, #0
 8006478:	d01b      	beq.n	80064b2 <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800647a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800647c:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800647e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006480:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006482:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8006484:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006486:	2202      	movs	r2, #2
 8006488:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800648c:	2300      	movs	r3, #0
 800648e:	9303      	str	r3, [sp, #12]
 8006490:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006492:	9302      	str	r3, [sp, #8]
 8006494:	f107 0314 	add.w	r3, r7, #20
 8006498:	9301      	str	r3, [sp, #4]
 800649a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800649c:	9300      	str	r3, [sp, #0]
 800649e:	683b      	ldr	r3, [r7, #0]
 80064a0:	687a      	ldr	r2, [r7, #4]
 80064a2:	68b9      	ldr	r1, [r7, #8]
 80064a4:	68f8      	ldr	r0, [r7, #12]
 80064a6:	f000 f851 	bl	800654c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80064aa:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80064ac:	f000 f8ec 	bl	8006688 <prvAddNewTaskToReadyList>
 80064b0:	e001      	b.n	80064b6 <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 80064b2:	2300      	movs	r3, #0
 80064b4:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80064b6:	697b      	ldr	r3, [r7, #20]
	}
 80064b8:	4618      	mov	r0, r3
 80064ba:	3728      	adds	r7, #40	; 0x28
 80064bc:	46bd      	mov	sp, r7
 80064be:	bd80      	pop	{r7, pc}

080064c0 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80064c0:	b580      	push	{r7, lr}
 80064c2:	b08c      	sub	sp, #48	; 0x30
 80064c4:	af04      	add	r7, sp, #16
 80064c6:	60f8      	str	r0, [r7, #12]
 80064c8:	60b9      	str	r1, [r7, #8]
 80064ca:	603b      	str	r3, [r7, #0]
 80064cc:	4613      	mov	r3, r2
 80064ce:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80064d0:	88fb      	ldrh	r3, [r7, #6]
 80064d2:	009b      	lsls	r3, r3, #2
 80064d4:	4618      	mov	r0, r3
 80064d6:	f001 fc1f 	bl	8007d18 <pvPortMalloc>
 80064da:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80064dc:	697b      	ldr	r3, [r7, #20]
 80064de:	2b00      	cmp	r3, #0
 80064e0:	d00e      	beq.n	8006500 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 80064e2:	20a8      	movs	r0, #168	; 0xa8
 80064e4:	f001 fc18 	bl	8007d18 <pvPortMalloc>
 80064e8:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80064ea:	69fb      	ldr	r3, [r7, #28]
 80064ec:	2b00      	cmp	r3, #0
 80064ee:	d003      	beq.n	80064f8 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80064f0:	69fb      	ldr	r3, [r7, #28]
 80064f2:	697a      	ldr	r2, [r7, #20]
 80064f4:	631a      	str	r2, [r3, #48]	; 0x30
 80064f6:	e005      	b.n	8006504 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80064f8:	6978      	ldr	r0, [r7, #20]
 80064fa:	f001 fcd1 	bl	8007ea0 <vPortFree>
 80064fe:	e001      	b.n	8006504 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8006500:	2300      	movs	r3, #0
 8006502:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8006504:	69fb      	ldr	r3, [r7, #28]
 8006506:	2b00      	cmp	r3, #0
 8006508:	d017      	beq.n	800653a <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800650a:	69fb      	ldr	r3, [r7, #28]
 800650c:	2200      	movs	r2, #0
 800650e:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8006512:	88fa      	ldrh	r2, [r7, #6]
 8006514:	2300      	movs	r3, #0
 8006516:	9303      	str	r3, [sp, #12]
 8006518:	69fb      	ldr	r3, [r7, #28]
 800651a:	9302      	str	r3, [sp, #8]
 800651c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800651e:	9301      	str	r3, [sp, #4]
 8006520:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006522:	9300      	str	r3, [sp, #0]
 8006524:	683b      	ldr	r3, [r7, #0]
 8006526:	68b9      	ldr	r1, [r7, #8]
 8006528:	68f8      	ldr	r0, [r7, #12]
 800652a:	f000 f80f 	bl	800654c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800652e:	69f8      	ldr	r0, [r7, #28]
 8006530:	f000 f8aa 	bl	8006688 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8006534:	2301      	movs	r3, #1
 8006536:	61bb      	str	r3, [r7, #24]
 8006538:	e002      	b.n	8006540 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800653a:	f04f 33ff 	mov.w	r3, #4294967295
 800653e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8006540:	69bb      	ldr	r3, [r7, #24]
	}
 8006542:	4618      	mov	r0, r3
 8006544:	3720      	adds	r7, #32
 8006546:	46bd      	mov	sp, r7
 8006548:	bd80      	pop	{r7, pc}
	...

0800654c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800654c:	b580      	push	{r7, lr}
 800654e:	b088      	sub	sp, #32
 8006550:	af00      	add	r7, sp, #0
 8006552:	60f8      	str	r0, [r7, #12]
 8006554:	60b9      	str	r1, [r7, #8]
 8006556:	607a      	str	r2, [r7, #4]
 8006558:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800655a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800655c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	009b      	lsls	r3, r3, #2
 8006562:	461a      	mov	r2, r3
 8006564:	21a5      	movs	r1, #165	; 0xa5
 8006566:	f001 fdb1 	bl	80080cc <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 800656a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800656c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8006574:	3b01      	subs	r3, #1
 8006576:	009b      	lsls	r3, r3, #2
 8006578:	4413      	add	r3, r2
 800657a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 800657c:	69bb      	ldr	r3, [r7, #24]
 800657e:	f023 0307 	bic.w	r3, r3, #7
 8006582:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8006584:	69bb      	ldr	r3, [r7, #24]
 8006586:	f003 0307 	and.w	r3, r3, #7
 800658a:	2b00      	cmp	r3, #0
 800658c:	d00a      	beq.n	80065a4 <prvInitialiseNewTask+0x58>
	__asm volatile
 800658e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006592:	f383 8811 	msr	BASEPRI, r3
 8006596:	f3bf 8f6f 	isb	sy
 800659a:	f3bf 8f4f 	dsb	sy
 800659e:	617b      	str	r3, [r7, #20]
}
 80065a0:	bf00      	nop
 80065a2:	e7fe      	b.n	80065a2 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80065a4:	2300      	movs	r3, #0
 80065a6:	61fb      	str	r3, [r7, #28]
 80065a8:	e012      	b.n	80065d0 <prvInitialiseNewTask+0x84>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80065aa:	68ba      	ldr	r2, [r7, #8]
 80065ac:	69fb      	ldr	r3, [r7, #28]
 80065ae:	4413      	add	r3, r2
 80065b0:	7819      	ldrb	r1, [r3, #0]
 80065b2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80065b4:	69fb      	ldr	r3, [r7, #28]
 80065b6:	4413      	add	r3, r2
 80065b8:	3334      	adds	r3, #52	; 0x34
 80065ba:	460a      	mov	r2, r1
 80065bc:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 80065be:	68ba      	ldr	r2, [r7, #8]
 80065c0:	69fb      	ldr	r3, [r7, #28]
 80065c2:	4413      	add	r3, r2
 80065c4:	781b      	ldrb	r3, [r3, #0]
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	d006      	beq.n	80065d8 <prvInitialiseNewTask+0x8c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80065ca:	69fb      	ldr	r3, [r7, #28]
 80065cc:	3301      	adds	r3, #1
 80065ce:	61fb      	str	r3, [r7, #28]
 80065d0:	69fb      	ldr	r3, [r7, #28]
 80065d2:	2b0f      	cmp	r3, #15
 80065d4:	d9e9      	bls.n	80065aa <prvInitialiseNewTask+0x5e>
 80065d6:	e000      	b.n	80065da <prvInitialiseNewTask+0x8e>
		{
			break;
 80065d8:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80065da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065dc:	2200      	movs	r2, #0
 80065de:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80065e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065e4:	2b37      	cmp	r3, #55	; 0x37
 80065e6:	d901      	bls.n	80065ec <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80065e8:	2337      	movs	r3, #55	; 0x37
 80065ea:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80065ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065ee:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80065f0:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80065f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065f4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80065f6:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80065f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065fa:	2200      	movs	r2, #0
 80065fc:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80065fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006600:	3304      	adds	r3, #4
 8006602:	4618      	mov	r0, r3
 8006604:	f7ff f8f4 	bl	80057f0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006608:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800660a:	3318      	adds	r3, #24
 800660c:	4618      	mov	r0, r3
 800660e:	f7ff f8ef 	bl	80057f0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8006612:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006614:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006616:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006618:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800661a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800661e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006620:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8006622:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006624:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006626:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8006628:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800662a:	2200      	movs	r2, #0
 800662c:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006630:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006632:	2200      	movs	r2, #0
 8006634:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8006638:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800663a:	3354      	adds	r3, #84	; 0x54
 800663c:	224c      	movs	r2, #76	; 0x4c
 800663e:	2100      	movs	r1, #0
 8006640:	4618      	mov	r0, r3
 8006642:	f001 fd43 	bl	80080cc <memset>
 8006646:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006648:	4a0c      	ldr	r2, [pc, #48]	; (800667c <prvInitialiseNewTask+0x130>)
 800664a:	659a      	str	r2, [r3, #88]	; 0x58
 800664c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800664e:	4a0c      	ldr	r2, [pc, #48]	; (8006680 <prvInitialiseNewTask+0x134>)
 8006650:	65da      	str	r2, [r3, #92]	; 0x5c
 8006652:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006654:	4a0b      	ldr	r2, [pc, #44]	; (8006684 <prvInitialiseNewTask+0x138>)
 8006656:	661a      	str	r2, [r3, #96]	; 0x60
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006658:	683a      	ldr	r2, [r7, #0]
 800665a:	68f9      	ldr	r1, [r7, #12]
 800665c:	69b8      	ldr	r0, [r7, #24]
 800665e:	f001 f90f 	bl	8007880 <pxPortInitialiseStack>
 8006662:	4602      	mov	r2, r0
 8006664:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006666:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8006668:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800666a:	2b00      	cmp	r3, #0
 800666c:	d002      	beq.n	8006674 <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800666e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006670:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006672:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006674:	bf00      	nop
 8006676:	3720      	adds	r7, #32
 8006678:	46bd      	mov	sp, r7
 800667a:	bd80      	pop	{r7, pc}
 800667c:	20001e4c 	.word	0x20001e4c
 8006680:	20001eb4 	.word	0x20001eb4
 8006684:	20001f1c 	.word	0x20001f1c

08006688 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8006688:	b580      	push	{r7, lr}
 800668a:	b082      	sub	sp, #8
 800668c:	af00      	add	r7, sp, #0
 800668e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8006690:	f001 fa20 	bl	8007ad4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8006694:	4b2d      	ldr	r3, [pc, #180]	; (800674c <prvAddNewTaskToReadyList+0xc4>)
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	3301      	adds	r3, #1
 800669a:	4a2c      	ldr	r2, [pc, #176]	; (800674c <prvAddNewTaskToReadyList+0xc4>)
 800669c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800669e:	4b2c      	ldr	r3, [pc, #176]	; (8006750 <prvAddNewTaskToReadyList+0xc8>)
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	d109      	bne.n	80066ba <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80066a6:	4a2a      	ldr	r2, [pc, #168]	; (8006750 <prvAddNewTaskToReadyList+0xc8>)
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80066ac:	4b27      	ldr	r3, [pc, #156]	; (800674c <prvAddNewTaskToReadyList+0xc4>)
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	2b01      	cmp	r3, #1
 80066b2:	d110      	bne.n	80066d6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80066b4:	f000 fc2a 	bl	8006f0c <prvInitialiseTaskLists>
 80066b8:	e00d      	b.n	80066d6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80066ba:	4b26      	ldr	r3, [pc, #152]	; (8006754 <prvAddNewTaskToReadyList+0xcc>)
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	2b00      	cmp	r3, #0
 80066c0:	d109      	bne.n	80066d6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80066c2:	4b23      	ldr	r3, [pc, #140]	; (8006750 <prvAddNewTaskToReadyList+0xc8>)
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066cc:	429a      	cmp	r2, r3
 80066ce:	d802      	bhi.n	80066d6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80066d0:	4a1f      	ldr	r2, [pc, #124]	; (8006750 <prvAddNewTaskToReadyList+0xc8>)
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80066d6:	4b20      	ldr	r3, [pc, #128]	; (8006758 <prvAddNewTaskToReadyList+0xd0>)
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	3301      	adds	r3, #1
 80066dc:	4a1e      	ldr	r2, [pc, #120]	; (8006758 <prvAddNewTaskToReadyList+0xd0>)
 80066de:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80066e0:	4b1d      	ldr	r3, [pc, #116]	; (8006758 <prvAddNewTaskToReadyList+0xd0>)
 80066e2:	681a      	ldr	r2, [r3, #0]
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80066ec:	4b1b      	ldr	r3, [pc, #108]	; (800675c <prvAddNewTaskToReadyList+0xd4>)
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	429a      	cmp	r2, r3
 80066f2:	d903      	bls.n	80066fc <prvAddNewTaskToReadyList+0x74>
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066f8:	4a18      	ldr	r2, [pc, #96]	; (800675c <prvAddNewTaskToReadyList+0xd4>)
 80066fa:	6013      	str	r3, [r2, #0]
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006700:	4613      	mov	r3, r2
 8006702:	009b      	lsls	r3, r3, #2
 8006704:	4413      	add	r3, r2
 8006706:	009b      	lsls	r3, r3, #2
 8006708:	4a15      	ldr	r2, [pc, #84]	; (8006760 <prvAddNewTaskToReadyList+0xd8>)
 800670a:	441a      	add	r2, r3
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	3304      	adds	r3, #4
 8006710:	4619      	mov	r1, r3
 8006712:	4610      	mov	r0, r2
 8006714:	f7ff f879 	bl	800580a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8006718:	f001 fa0c 	bl	8007b34 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800671c:	4b0d      	ldr	r3, [pc, #52]	; (8006754 <prvAddNewTaskToReadyList+0xcc>)
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	2b00      	cmp	r3, #0
 8006722:	d00e      	beq.n	8006742 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8006724:	4b0a      	ldr	r3, [pc, #40]	; (8006750 <prvAddNewTaskToReadyList+0xc8>)
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800672e:	429a      	cmp	r2, r3
 8006730:	d207      	bcs.n	8006742 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8006732:	4b0c      	ldr	r3, [pc, #48]	; (8006764 <prvAddNewTaskToReadyList+0xdc>)
 8006734:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006738:	601a      	str	r2, [r3, #0]
 800673a:	f3bf 8f4f 	dsb	sy
 800673e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006742:	bf00      	nop
 8006744:	3708      	adds	r7, #8
 8006746:	46bd      	mov	sp, r7
 8006748:	bd80      	pop	{r7, pc}
 800674a:	bf00      	nop
 800674c:	200010d0 	.word	0x200010d0
 8006750:	20000bfc 	.word	0x20000bfc
 8006754:	200010dc 	.word	0x200010dc
 8006758:	200010ec 	.word	0x200010ec
 800675c:	200010d8 	.word	0x200010d8
 8006760:	20000c00 	.word	0x20000c00
 8006764:	e000ed04 	.word	0xe000ed04

08006768 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8006768:	b580      	push	{r7, lr}
 800676a:	b084      	sub	sp, #16
 800676c:	af00      	add	r7, sp, #0
 800676e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8006770:	2300      	movs	r3, #0
 8006772:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	2b00      	cmp	r3, #0
 8006778:	d017      	beq.n	80067aa <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800677a:	4b13      	ldr	r3, [pc, #76]	; (80067c8 <vTaskDelay+0x60>)
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	2b00      	cmp	r3, #0
 8006780:	d00a      	beq.n	8006798 <vTaskDelay+0x30>
	__asm volatile
 8006782:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006786:	f383 8811 	msr	BASEPRI, r3
 800678a:	f3bf 8f6f 	isb	sy
 800678e:	f3bf 8f4f 	dsb	sy
 8006792:	60bb      	str	r3, [r7, #8]
}
 8006794:	bf00      	nop
 8006796:	e7fe      	b.n	8006796 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8006798:	f000 f88a 	bl	80068b0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800679c:	2100      	movs	r1, #0
 800679e:	6878      	ldr	r0, [r7, #4]
 80067a0:	f000 fd08 	bl	80071b4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80067a4:	f000 f892 	bl	80068cc <xTaskResumeAll>
 80067a8:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	2b00      	cmp	r3, #0
 80067ae:	d107      	bne.n	80067c0 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80067b0:	4b06      	ldr	r3, [pc, #24]	; (80067cc <vTaskDelay+0x64>)
 80067b2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80067b6:	601a      	str	r2, [r3, #0]
 80067b8:	f3bf 8f4f 	dsb	sy
 80067bc:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80067c0:	bf00      	nop
 80067c2:	3710      	adds	r7, #16
 80067c4:	46bd      	mov	sp, r7
 80067c6:	bd80      	pop	{r7, pc}
 80067c8:	200010f8 	.word	0x200010f8
 80067cc:	e000ed04 	.word	0xe000ed04

080067d0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80067d0:	b580      	push	{r7, lr}
 80067d2:	b08a      	sub	sp, #40	; 0x28
 80067d4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80067d6:	2300      	movs	r3, #0
 80067d8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80067da:	2300      	movs	r3, #0
 80067dc:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80067de:	463a      	mov	r2, r7
 80067e0:	1d39      	adds	r1, r7, #4
 80067e2:	f107 0308 	add.w	r3, r7, #8
 80067e6:	4618      	mov	r0, r3
 80067e8:	f7fe ffae 	bl	8005748 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80067ec:	6839      	ldr	r1, [r7, #0]
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	68ba      	ldr	r2, [r7, #8]
 80067f2:	9202      	str	r2, [sp, #8]
 80067f4:	9301      	str	r3, [sp, #4]
 80067f6:	2300      	movs	r3, #0
 80067f8:	9300      	str	r3, [sp, #0]
 80067fa:	2300      	movs	r3, #0
 80067fc:	460a      	mov	r2, r1
 80067fe:	4924      	ldr	r1, [pc, #144]	; (8006890 <vTaskStartScheduler+0xc0>)
 8006800:	4824      	ldr	r0, [pc, #144]	; (8006894 <vTaskStartScheduler+0xc4>)
 8006802:	f7ff fe01 	bl	8006408 <xTaskCreateStatic>
 8006806:	4603      	mov	r3, r0
 8006808:	4a23      	ldr	r2, [pc, #140]	; (8006898 <vTaskStartScheduler+0xc8>)
 800680a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800680c:	4b22      	ldr	r3, [pc, #136]	; (8006898 <vTaskStartScheduler+0xc8>)
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	2b00      	cmp	r3, #0
 8006812:	d002      	beq.n	800681a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8006814:	2301      	movs	r3, #1
 8006816:	617b      	str	r3, [r7, #20]
 8006818:	e001      	b.n	800681e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800681a:	2300      	movs	r3, #0
 800681c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800681e:	697b      	ldr	r3, [r7, #20]
 8006820:	2b01      	cmp	r3, #1
 8006822:	d102      	bne.n	800682a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8006824:	f000 fd1a 	bl	800725c <xTimerCreateTimerTask>
 8006828:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800682a:	697b      	ldr	r3, [r7, #20]
 800682c:	2b01      	cmp	r3, #1
 800682e:	d11b      	bne.n	8006868 <vTaskStartScheduler+0x98>
	__asm volatile
 8006830:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006834:	f383 8811 	msr	BASEPRI, r3
 8006838:	f3bf 8f6f 	isb	sy
 800683c:	f3bf 8f4f 	dsb	sy
 8006840:	613b      	str	r3, [r7, #16]
}
 8006842:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8006844:	4b15      	ldr	r3, [pc, #84]	; (800689c <vTaskStartScheduler+0xcc>)
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	3354      	adds	r3, #84	; 0x54
 800684a:	4a15      	ldr	r2, [pc, #84]	; (80068a0 <vTaskStartScheduler+0xd0>)
 800684c:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800684e:	4b15      	ldr	r3, [pc, #84]	; (80068a4 <vTaskStartScheduler+0xd4>)
 8006850:	f04f 32ff 	mov.w	r2, #4294967295
 8006854:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8006856:	4b14      	ldr	r3, [pc, #80]	; (80068a8 <vTaskStartScheduler+0xd8>)
 8006858:	2201      	movs	r2, #1
 800685a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 800685c:	4b13      	ldr	r3, [pc, #76]	; (80068ac <vTaskStartScheduler+0xdc>)
 800685e:	2200      	movs	r2, #0
 8006860:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8006862:	f001 f895 	bl	8007990 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8006866:	e00e      	b.n	8006886 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006868:	697b      	ldr	r3, [r7, #20]
 800686a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800686e:	d10a      	bne.n	8006886 <vTaskStartScheduler+0xb6>
	__asm volatile
 8006870:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006874:	f383 8811 	msr	BASEPRI, r3
 8006878:	f3bf 8f6f 	isb	sy
 800687c:	f3bf 8f4f 	dsb	sy
 8006880:	60fb      	str	r3, [r7, #12]
}
 8006882:	bf00      	nop
 8006884:	e7fe      	b.n	8006884 <vTaskStartScheduler+0xb4>
}
 8006886:	bf00      	nop
 8006888:	3718      	adds	r7, #24
 800688a:	46bd      	mov	sp, r7
 800688c:	bd80      	pop	{r7, pc}
 800688e:	bf00      	nop
 8006890:	080082c4 	.word	0x080082c4
 8006894:	08006edd 	.word	0x08006edd
 8006898:	200010f4 	.word	0x200010f4
 800689c:	20000bfc 	.word	0x20000bfc
 80068a0:	20000074 	.word	0x20000074
 80068a4:	200010f0 	.word	0x200010f0
 80068a8:	200010dc 	.word	0x200010dc
 80068ac:	200010d4 	.word	0x200010d4

080068b0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80068b0:	b480      	push	{r7}
 80068b2:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80068b4:	4b04      	ldr	r3, [pc, #16]	; (80068c8 <vTaskSuspendAll+0x18>)
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	3301      	adds	r3, #1
 80068ba:	4a03      	ldr	r2, [pc, #12]	; (80068c8 <vTaskSuspendAll+0x18>)
 80068bc:	6013      	str	r3, [r2, #0]
}
 80068be:	bf00      	nop
 80068c0:	46bd      	mov	sp, r7
 80068c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068c6:	4770      	bx	lr
 80068c8:	200010f8 	.word	0x200010f8

080068cc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80068cc:	b580      	push	{r7, lr}
 80068ce:	b084      	sub	sp, #16
 80068d0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80068d2:	2300      	movs	r3, #0
 80068d4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80068d6:	2300      	movs	r3, #0
 80068d8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80068da:	4b42      	ldr	r3, [pc, #264]	; (80069e4 <xTaskResumeAll+0x118>)
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	2b00      	cmp	r3, #0
 80068e0:	d10a      	bne.n	80068f8 <xTaskResumeAll+0x2c>
	__asm volatile
 80068e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068e6:	f383 8811 	msr	BASEPRI, r3
 80068ea:	f3bf 8f6f 	isb	sy
 80068ee:	f3bf 8f4f 	dsb	sy
 80068f2:	603b      	str	r3, [r7, #0]
}
 80068f4:	bf00      	nop
 80068f6:	e7fe      	b.n	80068f6 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80068f8:	f001 f8ec 	bl	8007ad4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80068fc:	4b39      	ldr	r3, [pc, #228]	; (80069e4 <xTaskResumeAll+0x118>)
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	3b01      	subs	r3, #1
 8006902:	4a38      	ldr	r2, [pc, #224]	; (80069e4 <xTaskResumeAll+0x118>)
 8006904:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006906:	4b37      	ldr	r3, [pc, #220]	; (80069e4 <xTaskResumeAll+0x118>)
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	2b00      	cmp	r3, #0
 800690c:	d162      	bne.n	80069d4 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800690e:	4b36      	ldr	r3, [pc, #216]	; (80069e8 <xTaskResumeAll+0x11c>)
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	2b00      	cmp	r3, #0
 8006914:	d05e      	beq.n	80069d4 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006916:	e02f      	b.n	8006978 <xTaskResumeAll+0xac>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8006918:	4b34      	ldr	r3, [pc, #208]	; (80069ec <xTaskResumeAll+0x120>)
 800691a:	68db      	ldr	r3, [r3, #12]
 800691c:	68db      	ldr	r3, [r3, #12]
 800691e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	3318      	adds	r3, #24
 8006924:	4618      	mov	r0, r3
 8006926:	f7fe ffcd 	bl	80058c4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800692a:	68fb      	ldr	r3, [r7, #12]
 800692c:	3304      	adds	r3, #4
 800692e:	4618      	mov	r0, r3
 8006930:	f7fe ffc8 	bl	80058c4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006934:	68fb      	ldr	r3, [r7, #12]
 8006936:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006938:	4b2d      	ldr	r3, [pc, #180]	; (80069f0 <xTaskResumeAll+0x124>)
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	429a      	cmp	r2, r3
 800693e:	d903      	bls.n	8006948 <xTaskResumeAll+0x7c>
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006944:	4a2a      	ldr	r2, [pc, #168]	; (80069f0 <xTaskResumeAll+0x124>)
 8006946:	6013      	str	r3, [r2, #0]
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800694c:	4613      	mov	r3, r2
 800694e:	009b      	lsls	r3, r3, #2
 8006950:	4413      	add	r3, r2
 8006952:	009b      	lsls	r3, r3, #2
 8006954:	4a27      	ldr	r2, [pc, #156]	; (80069f4 <xTaskResumeAll+0x128>)
 8006956:	441a      	add	r2, r3
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	3304      	adds	r3, #4
 800695c:	4619      	mov	r1, r3
 800695e:	4610      	mov	r0, r2
 8006960:	f7fe ff53 	bl	800580a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006968:	4b23      	ldr	r3, [pc, #140]	; (80069f8 <xTaskResumeAll+0x12c>)
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800696e:	429a      	cmp	r2, r3
 8006970:	d302      	bcc.n	8006978 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8006972:	4b22      	ldr	r3, [pc, #136]	; (80069fc <xTaskResumeAll+0x130>)
 8006974:	2201      	movs	r2, #1
 8006976:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006978:	4b1c      	ldr	r3, [pc, #112]	; (80069ec <xTaskResumeAll+0x120>)
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	2b00      	cmp	r3, #0
 800697e:	d1cb      	bne.n	8006918 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	2b00      	cmp	r3, #0
 8006984:	d001      	beq.n	800698a <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8006986:	f000 fb63 	bl	8007050 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800698a:	4b1d      	ldr	r3, [pc, #116]	; (8006a00 <xTaskResumeAll+0x134>)
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	2b00      	cmp	r3, #0
 8006994:	d010      	beq.n	80069b8 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8006996:	f000 f847 	bl	8006a28 <xTaskIncrementTick>
 800699a:	4603      	mov	r3, r0
 800699c:	2b00      	cmp	r3, #0
 800699e:	d002      	beq.n	80069a6 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 80069a0:	4b16      	ldr	r3, [pc, #88]	; (80069fc <xTaskResumeAll+0x130>)
 80069a2:	2201      	movs	r2, #1
 80069a4:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	3b01      	subs	r3, #1
 80069aa:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	d1f1      	bne.n	8006996 <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 80069b2:	4b13      	ldr	r3, [pc, #76]	; (8006a00 <xTaskResumeAll+0x134>)
 80069b4:	2200      	movs	r2, #0
 80069b6:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80069b8:	4b10      	ldr	r3, [pc, #64]	; (80069fc <xTaskResumeAll+0x130>)
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	2b00      	cmp	r3, #0
 80069be:	d009      	beq.n	80069d4 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80069c0:	2301      	movs	r3, #1
 80069c2:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80069c4:	4b0f      	ldr	r3, [pc, #60]	; (8006a04 <xTaskResumeAll+0x138>)
 80069c6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80069ca:	601a      	str	r2, [r3, #0]
 80069cc:	f3bf 8f4f 	dsb	sy
 80069d0:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80069d4:	f001 f8ae 	bl	8007b34 <vPortExitCritical>

	return xAlreadyYielded;
 80069d8:	68bb      	ldr	r3, [r7, #8]
}
 80069da:	4618      	mov	r0, r3
 80069dc:	3710      	adds	r7, #16
 80069de:	46bd      	mov	sp, r7
 80069e0:	bd80      	pop	{r7, pc}
 80069e2:	bf00      	nop
 80069e4:	200010f8 	.word	0x200010f8
 80069e8:	200010d0 	.word	0x200010d0
 80069ec:	20001090 	.word	0x20001090
 80069f0:	200010d8 	.word	0x200010d8
 80069f4:	20000c00 	.word	0x20000c00
 80069f8:	20000bfc 	.word	0x20000bfc
 80069fc:	200010e4 	.word	0x200010e4
 8006a00:	200010e0 	.word	0x200010e0
 8006a04:	e000ed04 	.word	0xe000ed04

08006a08 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8006a08:	b480      	push	{r7}
 8006a0a:	b083      	sub	sp, #12
 8006a0c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8006a0e:	4b05      	ldr	r3, [pc, #20]	; (8006a24 <xTaskGetTickCount+0x1c>)
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8006a14:	687b      	ldr	r3, [r7, #4]
}
 8006a16:	4618      	mov	r0, r3
 8006a18:	370c      	adds	r7, #12
 8006a1a:	46bd      	mov	sp, r7
 8006a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a20:	4770      	bx	lr
 8006a22:	bf00      	nop
 8006a24:	200010d4 	.word	0x200010d4

08006a28 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006a28:	b580      	push	{r7, lr}
 8006a2a:	b086      	sub	sp, #24
 8006a2c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8006a2e:	2300      	movs	r3, #0
 8006a30:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006a32:	4b51      	ldr	r3, [pc, #324]	; (8006b78 <xTaskIncrementTick+0x150>)
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	2b00      	cmp	r3, #0
 8006a38:	f040 808e 	bne.w	8006b58 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006a3c:	4b4f      	ldr	r3, [pc, #316]	; (8006b7c <xTaskIncrementTick+0x154>)
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	3301      	adds	r3, #1
 8006a42:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8006a44:	4a4d      	ldr	r2, [pc, #308]	; (8006b7c <xTaskIncrementTick+0x154>)
 8006a46:	693b      	ldr	r3, [r7, #16]
 8006a48:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8006a4a:	693b      	ldr	r3, [r7, #16]
 8006a4c:	2b00      	cmp	r3, #0
 8006a4e:	d120      	bne.n	8006a92 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8006a50:	4b4b      	ldr	r3, [pc, #300]	; (8006b80 <xTaskIncrementTick+0x158>)
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	2b00      	cmp	r3, #0
 8006a58:	d00a      	beq.n	8006a70 <xTaskIncrementTick+0x48>
	__asm volatile
 8006a5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a5e:	f383 8811 	msr	BASEPRI, r3
 8006a62:	f3bf 8f6f 	isb	sy
 8006a66:	f3bf 8f4f 	dsb	sy
 8006a6a:	603b      	str	r3, [r7, #0]
}
 8006a6c:	bf00      	nop
 8006a6e:	e7fe      	b.n	8006a6e <xTaskIncrementTick+0x46>
 8006a70:	4b43      	ldr	r3, [pc, #268]	; (8006b80 <xTaskIncrementTick+0x158>)
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	60fb      	str	r3, [r7, #12]
 8006a76:	4b43      	ldr	r3, [pc, #268]	; (8006b84 <xTaskIncrementTick+0x15c>)
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	4a41      	ldr	r2, [pc, #260]	; (8006b80 <xTaskIncrementTick+0x158>)
 8006a7c:	6013      	str	r3, [r2, #0]
 8006a7e:	4a41      	ldr	r2, [pc, #260]	; (8006b84 <xTaskIncrementTick+0x15c>)
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	6013      	str	r3, [r2, #0]
 8006a84:	4b40      	ldr	r3, [pc, #256]	; (8006b88 <xTaskIncrementTick+0x160>)
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	3301      	adds	r3, #1
 8006a8a:	4a3f      	ldr	r2, [pc, #252]	; (8006b88 <xTaskIncrementTick+0x160>)
 8006a8c:	6013      	str	r3, [r2, #0]
 8006a8e:	f000 fadf 	bl	8007050 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8006a92:	4b3e      	ldr	r3, [pc, #248]	; (8006b8c <xTaskIncrementTick+0x164>)
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	693a      	ldr	r2, [r7, #16]
 8006a98:	429a      	cmp	r2, r3
 8006a9a:	d34e      	bcc.n	8006b3a <xTaskIncrementTick+0x112>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006a9c:	4b38      	ldr	r3, [pc, #224]	; (8006b80 <xTaskIncrementTick+0x158>)
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	2b00      	cmp	r3, #0
 8006aa4:	d101      	bne.n	8006aaa <xTaskIncrementTick+0x82>
 8006aa6:	2301      	movs	r3, #1
 8006aa8:	e000      	b.n	8006aac <xTaskIncrementTick+0x84>
 8006aaa:	2300      	movs	r3, #0
 8006aac:	2b00      	cmp	r3, #0
 8006aae:	d004      	beq.n	8006aba <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006ab0:	4b36      	ldr	r3, [pc, #216]	; (8006b8c <xTaskIncrementTick+0x164>)
 8006ab2:	f04f 32ff 	mov.w	r2, #4294967295
 8006ab6:	601a      	str	r2, [r3, #0]
					break;
 8006ab8:	e03f      	b.n	8006b3a <xTaskIncrementTick+0x112>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8006aba:	4b31      	ldr	r3, [pc, #196]	; (8006b80 <xTaskIncrementTick+0x158>)
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	68db      	ldr	r3, [r3, #12]
 8006ac0:	68db      	ldr	r3, [r3, #12]
 8006ac2:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8006ac4:	68bb      	ldr	r3, [r7, #8]
 8006ac6:	685b      	ldr	r3, [r3, #4]
 8006ac8:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8006aca:	693a      	ldr	r2, [r7, #16]
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	429a      	cmp	r2, r3
 8006ad0:	d203      	bcs.n	8006ada <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8006ad2:	4a2e      	ldr	r2, [pc, #184]	; (8006b8c <xTaskIncrementTick+0x164>)
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	6013      	str	r3, [r2, #0]
						break;
 8006ad8:	e02f      	b.n	8006b3a <xTaskIncrementTick+0x112>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006ada:	68bb      	ldr	r3, [r7, #8]
 8006adc:	3304      	adds	r3, #4
 8006ade:	4618      	mov	r0, r3
 8006ae0:	f7fe fef0 	bl	80058c4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006ae4:	68bb      	ldr	r3, [r7, #8]
 8006ae6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ae8:	2b00      	cmp	r3, #0
 8006aea:	d004      	beq.n	8006af6 <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006aec:	68bb      	ldr	r3, [r7, #8]
 8006aee:	3318      	adds	r3, #24
 8006af0:	4618      	mov	r0, r3
 8006af2:	f7fe fee7 	bl	80058c4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8006af6:	68bb      	ldr	r3, [r7, #8]
 8006af8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006afa:	4b25      	ldr	r3, [pc, #148]	; (8006b90 <xTaskIncrementTick+0x168>)
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	429a      	cmp	r2, r3
 8006b00:	d903      	bls.n	8006b0a <xTaskIncrementTick+0xe2>
 8006b02:	68bb      	ldr	r3, [r7, #8]
 8006b04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b06:	4a22      	ldr	r2, [pc, #136]	; (8006b90 <xTaskIncrementTick+0x168>)
 8006b08:	6013      	str	r3, [r2, #0]
 8006b0a:	68bb      	ldr	r3, [r7, #8]
 8006b0c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006b0e:	4613      	mov	r3, r2
 8006b10:	009b      	lsls	r3, r3, #2
 8006b12:	4413      	add	r3, r2
 8006b14:	009b      	lsls	r3, r3, #2
 8006b16:	4a1f      	ldr	r2, [pc, #124]	; (8006b94 <xTaskIncrementTick+0x16c>)
 8006b18:	441a      	add	r2, r3
 8006b1a:	68bb      	ldr	r3, [r7, #8]
 8006b1c:	3304      	adds	r3, #4
 8006b1e:	4619      	mov	r1, r3
 8006b20:	4610      	mov	r0, r2
 8006b22:	f7fe fe72 	bl	800580a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006b26:	68bb      	ldr	r3, [r7, #8]
 8006b28:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006b2a:	4b1b      	ldr	r3, [pc, #108]	; (8006b98 <xTaskIncrementTick+0x170>)
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b30:	429a      	cmp	r2, r3
 8006b32:	d3b3      	bcc.n	8006a9c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8006b34:	2301      	movs	r3, #1
 8006b36:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006b38:	e7b0      	b.n	8006a9c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8006b3a:	4b17      	ldr	r3, [pc, #92]	; (8006b98 <xTaskIncrementTick+0x170>)
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006b40:	4914      	ldr	r1, [pc, #80]	; (8006b94 <xTaskIncrementTick+0x16c>)
 8006b42:	4613      	mov	r3, r2
 8006b44:	009b      	lsls	r3, r3, #2
 8006b46:	4413      	add	r3, r2
 8006b48:	009b      	lsls	r3, r3, #2
 8006b4a:	440b      	add	r3, r1
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	2b01      	cmp	r3, #1
 8006b50:	d907      	bls.n	8006b62 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8006b52:	2301      	movs	r3, #1
 8006b54:	617b      	str	r3, [r7, #20]
 8006b56:	e004      	b.n	8006b62 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8006b58:	4b10      	ldr	r3, [pc, #64]	; (8006b9c <xTaskIncrementTick+0x174>)
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	3301      	adds	r3, #1
 8006b5e:	4a0f      	ldr	r2, [pc, #60]	; (8006b9c <xTaskIncrementTick+0x174>)
 8006b60:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8006b62:	4b0f      	ldr	r3, [pc, #60]	; (8006ba0 <xTaskIncrementTick+0x178>)
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	2b00      	cmp	r3, #0
 8006b68:	d001      	beq.n	8006b6e <xTaskIncrementTick+0x146>
		{
			xSwitchRequired = pdTRUE;
 8006b6a:	2301      	movs	r3, #1
 8006b6c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8006b6e:	697b      	ldr	r3, [r7, #20]
}
 8006b70:	4618      	mov	r0, r3
 8006b72:	3718      	adds	r7, #24
 8006b74:	46bd      	mov	sp, r7
 8006b76:	bd80      	pop	{r7, pc}
 8006b78:	200010f8 	.word	0x200010f8
 8006b7c:	200010d4 	.word	0x200010d4
 8006b80:	20001088 	.word	0x20001088
 8006b84:	2000108c 	.word	0x2000108c
 8006b88:	200010e8 	.word	0x200010e8
 8006b8c:	200010f0 	.word	0x200010f0
 8006b90:	200010d8 	.word	0x200010d8
 8006b94:	20000c00 	.word	0x20000c00
 8006b98:	20000bfc 	.word	0x20000bfc
 8006b9c:	200010e0 	.word	0x200010e0
 8006ba0:	200010e4 	.word	0x200010e4

08006ba4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006ba4:	b480      	push	{r7}
 8006ba6:	b085      	sub	sp, #20
 8006ba8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8006baa:	4b2a      	ldr	r3, [pc, #168]	; (8006c54 <vTaskSwitchContext+0xb0>)
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	2b00      	cmp	r3, #0
 8006bb0:	d003      	beq.n	8006bba <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8006bb2:	4b29      	ldr	r3, [pc, #164]	; (8006c58 <vTaskSwitchContext+0xb4>)
 8006bb4:	2201      	movs	r2, #1
 8006bb6:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8006bb8:	e046      	b.n	8006c48 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 8006bba:	4b27      	ldr	r3, [pc, #156]	; (8006c58 <vTaskSwitchContext+0xb4>)
 8006bbc:	2200      	movs	r2, #0
 8006bbe:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8006bc0:	4b26      	ldr	r3, [pc, #152]	; (8006c5c <vTaskSwitchContext+0xb8>)
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	60fb      	str	r3, [r7, #12]
 8006bc6:	e010      	b.n	8006bea <vTaskSwitchContext+0x46>
 8006bc8:	68fb      	ldr	r3, [r7, #12]
 8006bca:	2b00      	cmp	r3, #0
 8006bcc:	d10a      	bne.n	8006be4 <vTaskSwitchContext+0x40>
	__asm volatile
 8006bce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006bd2:	f383 8811 	msr	BASEPRI, r3
 8006bd6:	f3bf 8f6f 	isb	sy
 8006bda:	f3bf 8f4f 	dsb	sy
 8006bde:	607b      	str	r3, [r7, #4]
}
 8006be0:	bf00      	nop
 8006be2:	e7fe      	b.n	8006be2 <vTaskSwitchContext+0x3e>
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	3b01      	subs	r3, #1
 8006be8:	60fb      	str	r3, [r7, #12]
 8006bea:	491d      	ldr	r1, [pc, #116]	; (8006c60 <vTaskSwitchContext+0xbc>)
 8006bec:	68fa      	ldr	r2, [r7, #12]
 8006bee:	4613      	mov	r3, r2
 8006bf0:	009b      	lsls	r3, r3, #2
 8006bf2:	4413      	add	r3, r2
 8006bf4:	009b      	lsls	r3, r3, #2
 8006bf6:	440b      	add	r3, r1
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	2b00      	cmp	r3, #0
 8006bfc:	d0e4      	beq.n	8006bc8 <vTaskSwitchContext+0x24>
 8006bfe:	68fa      	ldr	r2, [r7, #12]
 8006c00:	4613      	mov	r3, r2
 8006c02:	009b      	lsls	r3, r3, #2
 8006c04:	4413      	add	r3, r2
 8006c06:	009b      	lsls	r3, r3, #2
 8006c08:	4a15      	ldr	r2, [pc, #84]	; (8006c60 <vTaskSwitchContext+0xbc>)
 8006c0a:	4413      	add	r3, r2
 8006c0c:	60bb      	str	r3, [r7, #8]
 8006c0e:	68bb      	ldr	r3, [r7, #8]
 8006c10:	685b      	ldr	r3, [r3, #4]
 8006c12:	685a      	ldr	r2, [r3, #4]
 8006c14:	68bb      	ldr	r3, [r7, #8]
 8006c16:	605a      	str	r2, [r3, #4]
 8006c18:	68bb      	ldr	r3, [r7, #8]
 8006c1a:	685a      	ldr	r2, [r3, #4]
 8006c1c:	68bb      	ldr	r3, [r7, #8]
 8006c1e:	3308      	adds	r3, #8
 8006c20:	429a      	cmp	r2, r3
 8006c22:	d104      	bne.n	8006c2e <vTaskSwitchContext+0x8a>
 8006c24:	68bb      	ldr	r3, [r7, #8]
 8006c26:	685b      	ldr	r3, [r3, #4]
 8006c28:	685a      	ldr	r2, [r3, #4]
 8006c2a:	68bb      	ldr	r3, [r7, #8]
 8006c2c:	605a      	str	r2, [r3, #4]
 8006c2e:	68bb      	ldr	r3, [r7, #8]
 8006c30:	685b      	ldr	r3, [r3, #4]
 8006c32:	68db      	ldr	r3, [r3, #12]
 8006c34:	4a0b      	ldr	r2, [pc, #44]	; (8006c64 <vTaskSwitchContext+0xc0>)
 8006c36:	6013      	str	r3, [r2, #0]
 8006c38:	4a08      	ldr	r2, [pc, #32]	; (8006c5c <vTaskSwitchContext+0xb8>)
 8006c3a:	68fb      	ldr	r3, [r7, #12]
 8006c3c:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8006c3e:	4b09      	ldr	r3, [pc, #36]	; (8006c64 <vTaskSwitchContext+0xc0>)
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	3354      	adds	r3, #84	; 0x54
 8006c44:	4a08      	ldr	r2, [pc, #32]	; (8006c68 <vTaskSwitchContext+0xc4>)
 8006c46:	6013      	str	r3, [r2, #0]
}
 8006c48:	bf00      	nop
 8006c4a:	3714      	adds	r7, #20
 8006c4c:	46bd      	mov	sp, r7
 8006c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c52:	4770      	bx	lr
 8006c54:	200010f8 	.word	0x200010f8
 8006c58:	200010e4 	.word	0x200010e4
 8006c5c:	200010d8 	.word	0x200010d8
 8006c60:	20000c00 	.word	0x20000c00
 8006c64:	20000bfc 	.word	0x20000bfc
 8006c68:	20000074 	.word	0x20000074

08006c6c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8006c6c:	b580      	push	{r7, lr}
 8006c6e:	b084      	sub	sp, #16
 8006c70:	af00      	add	r7, sp, #0
 8006c72:	6078      	str	r0, [r7, #4]
 8006c74:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	2b00      	cmp	r3, #0
 8006c7a:	d10a      	bne.n	8006c92 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8006c7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c80:	f383 8811 	msr	BASEPRI, r3
 8006c84:	f3bf 8f6f 	isb	sy
 8006c88:	f3bf 8f4f 	dsb	sy
 8006c8c:	60fb      	str	r3, [r7, #12]
}
 8006c8e:	bf00      	nop
 8006c90:	e7fe      	b.n	8006c90 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006c92:	4b07      	ldr	r3, [pc, #28]	; (8006cb0 <vTaskPlaceOnEventList+0x44>)
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	3318      	adds	r3, #24
 8006c98:	4619      	mov	r1, r3
 8006c9a:	6878      	ldr	r0, [r7, #4]
 8006c9c:	f7fe fdd9 	bl	8005852 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006ca0:	2101      	movs	r1, #1
 8006ca2:	6838      	ldr	r0, [r7, #0]
 8006ca4:	f000 fa86 	bl	80071b4 <prvAddCurrentTaskToDelayedList>
}
 8006ca8:	bf00      	nop
 8006caa:	3710      	adds	r7, #16
 8006cac:	46bd      	mov	sp, r7
 8006cae:	bd80      	pop	{r7, pc}
 8006cb0:	20000bfc 	.word	0x20000bfc

08006cb4 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006cb4:	b580      	push	{r7, lr}
 8006cb6:	b086      	sub	sp, #24
 8006cb8:	af00      	add	r7, sp, #0
 8006cba:	60f8      	str	r0, [r7, #12]
 8006cbc:	60b9      	str	r1, [r7, #8]
 8006cbe:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8006cc0:	68fb      	ldr	r3, [r7, #12]
 8006cc2:	2b00      	cmp	r3, #0
 8006cc4:	d10a      	bne.n	8006cdc <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8006cc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cca:	f383 8811 	msr	BASEPRI, r3
 8006cce:	f3bf 8f6f 	isb	sy
 8006cd2:	f3bf 8f4f 	dsb	sy
 8006cd6:	617b      	str	r3, [r7, #20]
}
 8006cd8:	bf00      	nop
 8006cda:	e7fe      	b.n	8006cda <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006cdc:	4b0a      	ldr	r3, [pc, #40]	; (8006d08 <vTaskPlaceOnEventListRestricted+0x54>)
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	3318      	adds	r3, #24
 8006ce2:	4619      	mov	r1, r3
 8006ce4:	68f8      	ldr	r0, [r7, #12]
 8006ce6:	f7fe fd90 	bl	800580a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	2b00      	cmp	r3, #0
 8006cee:	d002      	beq.n	8006cf6 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8006cf0:	f04f 33ff 	mov.w	r3, #4294967295
 8006cf4:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8006cf6:	6879      	ldr	r1, [r7, #4]
 8006cf8:	68b8      	ldr	r0, [r7, #8]
 8006cfa:	f000 fa5b 	bl	80071b4 <prvAddCurrentTaskToDelayedList>
	}
 8006cfe:	bf00      	nop
 8006d00:	3718      	adds	r7, #24
 8006d02:	46bd      	mov	sp, r7
 8006d04:	bd80      	pop	{r7, pc}
 8006d06:	bf00      	nop
 8006d08:	20000bfc 	.word	0x20000bfc

08006d0c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8006d0c:	b580      	push	{r7, lr}
 8006d0e:	b086      	sub	sp, #24
 8006d10:	af00      	add	r7, sp, #0
 8006d12:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	68db      	ldr	r3, [r3, #12]
 8006d18:	68db      	ldr	r3, [r3, #12]
 8006d1a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8006d1c:	693b      	ldr	r3, [r7, #16]
 8006d1e:	2b00      	cmp	r3, #0
 8006d20:	d10a      	bne.n	8006d38 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8006d22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d26:	f383 8811 	msr	BASEPRI, r3
 8006d2a:	f3bf 8f6f 	isb	sy
 8006d2e:	f3bf 8f4f 	dsb	sy
 8006d32:	60fb      	str	r3, [r7, #12]
}
 8006d34:	bf00      	nop
 8006d36:	e7fe      	b.n	8006d36 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8006d38:	693b      	ldr	r3, [r7, #16]
 8006d3a:	3318      	adds	r3, #24
 8006d3c:	4618      	mov	r0, r3
 8006d3e:	f7fe fdc1 	bl	80058c4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006d42:	4b1e      	ldr	r3, [pc, #120]	; (8006dbc <xTaskRemoveFromEventList+0xb0>)
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	2b00      	cmp	r3, #0
 8006d48:	d11d      	bne.n	8006d86 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8006d4a:	693b      	ldr	r3, [r7, #16]
 8006d4c:	3304      	adds	r3, #4
 8006d4e:	4618      	mov	r0, r3
 8006d50:	f7fe fdb8 	bl	80058c4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8006d54:	693b      	ldr	r3, [r7, #16]
 8006d56:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006d58:	4b19      	ldr	r3, [pc, #100]	; (8006dc0 <xTaskRemoveFromEventList+0xb4>)
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	429a      	cmp	r2, r3
 8006d5e:	d903      	bls.n	8006d68 <xTaskRemoveFromEventList+0x5c>
 8006d60:	693b      	ldr	r3, [r7, #16]
 8006d62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d64:	4a16      	ldr	r2, [pc, #88]	; (8006dc0 <xTaskRemoveFromEventList+0xb4>)
 8006d66:	6013      	str	r3, [r2, #0]
 8006d68:	693b      	ldr	r3, [r7, #16]
 8006d6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006d6c:	4613      	mov	r3, r2
 8006d6e:	009b      	lsls	r3, r3, #2
 8006d70:	4413      	add	r3, r2
 8006d72:	009b      	lsls	r3, r3, #2
 8006d74:	4a13      	ldr	r2, [pc, #76]	; (8006dc4 <xTaskRemoveFromEventList+0xb8>)
 8006d76:	441a      	add	r2, r3
 8006d78:	693b      	ldr	r3, [r7, #16]
 8006d7a:	3304      	adds	r3, #4
 8006d7c:	4619      	mov	r1, r3
 8006d7e:	4610      	mov	r0, r2
 8006d80:	f7fe fd43 	bl	800580a <vListInsertEnd>
 8006d84:	e005      	b.n	8006d92 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8006d86:	693b      	ldr	r3, [r7, #16]
 8006d88:	3318      	adds	r3, #24
 8006d8a:	4619      	mov	r1, r3
 8006d8c:	480e      	ldr	r0, [pc, #56]	; (8006dc8 <xTaskRemoveFromEventList+0xbc>)
 8006d8e:	f7fe fd3c 	bl	800580a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006d92:	693b      	ldr	r3, [r7, #16]
 8006d94:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006d96:	4b0d      	ldr	r3, [pc, #52]	; (8006dcc <xTaskRemoveFromEventList+0xc0>)
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d9c:	429a      	cmp	r2, r3
 8006d9e:	d905      	bls.n	8006dac <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8006da0:	2301      	movs	r3, #1
 8006da2:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8006da4:	4b0a      	ldr	r3, [pc, #40]	; (8006dd0 <xTaskRemoveFromEventList+0xc4>)
 8006da6:	2201      	movs	r2, #1
 8006da8:	601a      	str	r2, [r3, #0]
 8006daa:	e001      	b.n	8006db0 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8006dac:	2300      	movs	r3, #0
 8006dae:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8006db0:	697b      	ldr	r3, [r7, #20]
}
 8006db2:	4618      	mov	r0, r3
 8006db4:	3718      	adds	r7, #24
 8006db6:	46bd      	mov	sp, r7
 8006db8:	bd80      	pop	{r7, pc}
 8006dba:	bf00      	nop
 8006dbc:	200010f8 	.word	0x200010f8
 8006dc0:	200010d8 	.word	0x200010d8
 8006dc4:	20000c00 	.word	0x20000c00
 8006dc8:	20001090 	.word	0x20001090
 8006dcc:	20000bfc 	.word	0x20000bfc
 8006dd0:	200010e4 	.word	0x200010e4

08006dd4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8006dd4:	b480      	push	{r7}
 8006dd6:	b083      	sub	sp, #12
 8006dd8:	af00      	add	r7, sp, #0
 8006dda:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8006ddc:	4b06      	ldr	r3, [pc, #24]	; (8006df8 <vTaskInternalSetTimeOutState+0x24>)
 8006dde:	681a      	ldr	r2, [r3, #0]
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8006de4:	4b05      	ldr	r3, [pc, #20]	; (8006dfc <vTaskInternalSetTimeOutState+0x28>)
 8006de6:	681a      	ldr	r2, [r3, #0]
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	605a      	str	r2, [r3, #4]
}
 8006dec:	bf00      	nop
 8006dee:	370c      	adds	r7, #12
 8006df0:	46bd      	mov	sp, r7
 8006df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006df6:	4770      	bx	lr
 8006df8:	200010e8 	.word	0x200010e8
 8006dfc:	200010d4 	.word	0x200010d4

08006e00 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8006e00:	b580      	push	{r7, lr}
 8006e02:	b088      	sub	sp, #32
 8006e04:	af00      	add	r7, sp, #0
 8006e06:	6078      	str	r0, [r7, #4]
 8006e08:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	2b00      	cmp	r3, #0
 8006e0e:	d10a      	bne.n	8006e26 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8006e10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e14:	f383 8811 	msr	BASEPRI, r3
 8006e18:	f3bf 8f6f 	isb	sy
 8006e1c:	f3bf 8f4f 	dsb	sy
 8006e20:	613b      	str	r3, [r7, #16]
}
 8006e22:	bf00      	nop
 8006e24:	e7fe      	b.n	8006e24 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8006e26:	683b      	ldr	r3, [r7, #0]
 8006e28:	2b00      	cmp	r3, #0
 8006e2a:	d10a      	bne.n	8006e42 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8006e2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e30:	f383 8811 	msr	BASEPRI, r3
 8006e34:	f3bf 8f6f 	isb	sy
 8006e38:	f3bf 8f4f 	dsb	sy
 8006e3c:	60fb      	str	r3, [r7, #12]
}
 8006e3e:	bf00      	nop
 8006e40:	e7fe      	b.n	8006e40 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8006e42:	f000 fe47 	bl	8007ad4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8006e46:	4b1d      	ldr	r3, [pc, #116]	; (8006ebc <xTaskCheckForTimeOut+0xbc>)
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	685b      	ldr	r3, [r3, #4]
 8006e50:	69ba      	ldr	r2, [r7, #24]
 8006e52:	1ad3      	subs	r3, r2, r3
 8006e54:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8006e56:	683b      	ldr	r3, [r7, #0]
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e5e:	d102      	bne.n	8006e66 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8006e60:	2300      	movs	r3, #0
 8006e62:	61fb      	str	r3, [r7, #28]
 8006e64:	e023      	b.n	8006eae <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	681a      	ldr	r2, [r3, #0]
 8006e6a:	4b15      	ldr	r3, [pc, #84]	; (8006ec0 <xTaskCheckForTimeOut+0xc0>)
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	429a      	cmp	r2, r3
 8006e70:	d007      	beq.n	8006e82 <xTaskCheckForTimeOut+0x82>
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	685b      	ldr	r3, [r3, #4]
 8006e76:	69ba      	ldr	r2, [r7, #24]
 8006e78:	429a      	cmp	r2, r3
 8006e7a:	d302      	bcc.n	8006e82 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8006e7c:	2301      	movs	r3, #1
 8006e7e:	61fb      	str	r3, [r7, #28]
 8006e80:	e015      	b.n	8006eae <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8006e82:	683b      	ldr	r3, [r7, #0]
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	697a      	ldr	r2, [r7, #20]
 8006e88:	429a      	cmp	r2, r3
 8006e8a:	d20b      	bcs.n	8006ea4 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8006e8c:	683b      	ldr	r3, [r7, #0]
 8006e8e:	681a      	ldr	r2, [r3, #0]
 8006e90:	697b      	ldr	r3, [r7, #20]
 8006e92:	1ad2      	subs	r2, r2, r3
 8006e94:	683b      	ldr	r3, [r7, #0]
 8006e96:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8006e98:	6878      	ldr	r0, [r7, #4]
 8006e9a:	f7ff ff9b 	bl	8006dd4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8006e9e:	2300      	movs	r3, #0
 8006ea0:	61fb      	str	r3, [r7, #28]
 8006ea2:	e004      	b.n	8006eae <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8006ea4:	683b      	ldr	r3, [r7, #0]
 8006ea6:	2200      	movs	r2, #0
 8006ea8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8006eaa:	2301      	movs	r3, #1
 8006eac:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8006eae:	f000 fe41 	bl	8007b34 <vPortExitCritical>

	return xReturn;
 8006eb2:	69fb      	ldr	r3, [r7, #28]
}
 8006eb4:	4618      	mov	r0, r3
 8006eb6:	3720      	adds	r7, #32
 8006eb8:	46bd      	mov	sp, r7
 8006eba:	bd80      	pop	{r7, pc}
 8006ebc:	200010d4 	.word	0x200010d4
 8006ec0:	200010e8 	.word	0x200010e8

08006ec4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8006ec4:	b480      	push	{r7}
 8006ec6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8006ec8:	4b03      	ldr	r3, [pc, #12]	; (8006ed8 <vTaskMissedYield+0x14>)
 8006eca:	2201      	movs	r2, #1
 8006ecc:	601a      	str	r2, [r3, #0]
}
 8006ece:	bf00      	nop
 8006ed0:	46bd      	mov	sp, r7
 8006ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ed6:	4770      	bx	lr
 8006ed8:	200010e4 	.word	0x200010e4

08006edc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8006edc:	b580      	push	{r7, lr}
 8006ede:	b082      	sub	sp, #8
 8006ee0:	af00      	add	r7, sp, #0
 8006ee2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8006ee4:	f000 f852 	bl	8006f8c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006ee8:	4b06      	ldr	r3, [pc, #24]	; (8006f04 <prvIdleTask+0x28>)
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	2b01      	cmp	r3, #1
 8006eee:	d9f9      	bls.n	8006ee4 <prvIdleTask+0x8>
			{
				taskYIELD();
 8006ef0:	4b05      	ldr	r3, [pc, #20]	; (8006f08 <prvIdleTask+0x2c>)
 8006ef2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006ef6:	601a      	str	r2, [r3, #0]
 8006ef8:	f3bf 8f4f 	dsb	sy
 8006efc:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8006f00:	e7f0      	b.n	8006ee4 <prvIdleTask+0x8>
 8006f02:	bf00      	nop
 8006f04:	20000c00 	.word	0x20000c00
 8006f08:	e000ed04 	.word	0xe000ed04

08006f0c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8006f0c:	b580      	push	{r7, lr}
 8006f0e:	b082      	sub	sp, #8
 8006f10:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006f12:	2300      	movs	r3, #0
 8006f14:	607b      	str	r3, [r7, #4]
 8006f16:	e00c      	b.n	8006f32 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006f18:	687a      	ldr	r2, [r7, #4]
 8006f1a:	4613      	mov	r3, r2
 8006f1c:	009b      	lsls	r3, r3, #2
 8006f1e:	4413      	add	r3, r2
 8006f20:	009b      	lsls	r3, r3, #2
 8006f22:	4a12      	ldr	r2, [pc, #72]	; (8006f6c <prvInitialiseTaskLists+0x60>)
 8006f24:	4413      	add	r3, r2
 8006f26:	4618      	mov	r0, r3
 8006f28:	f7fe fc42 	bl	80057b0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	3301      	adds	r3, #1
 8006f30:	607b      	str	r3, [r7, #4]
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	2b37      	cmp	r3, #55	; 0x37
 8006f36:	d9ef      	bls.n	8006f18 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8006f38:	480d      	ldr	r0, [pc, #52]	; (8006f70 <prvInitialiseTaskLists+0x64>)
 8006f3a:	f7fe fc39 	bl	80057b0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8006f3e:	480d      	ldr	r0, [pc, #52]	; (8006f74 <prvInitialiseTaskLists+0x68>)
 8006f40:	f7fe fc36 	bl	80057b0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8006f44:	480c      	ldr	r0, [pc, #48]	; (8006f78 <prvInitialiseTaskLists+0x6c>)
 8006f46:	f7fe fc33 	bl	80057b0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8006f4a:	480c      	ldr	r0, [pc, #48]	; (8006f7c <prvInitialiseTaskLists+0x70>)
 8006f4c:	f7fe fc30 	bl	80057b0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8006f50:	480b      	ldr	r0, [pc, #44]	; (8006f80 <prvInitialiseTaskLists+0x74>)
 8006f52:	f7fe fc2d 	bl	80057b0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8006f56:	4b0b      	ldr	r3, [pc, #44]	; (8006f84 <prvInitialiseTaskLists+0x78>)
 8006f58:	4a05      	ldr	r2, [pc, #20]	; (8006f70 <prvInitialiseTaskLists+0x64>)
 8006f5a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006f5c:	4b0a      	ldr	r3, [pc, #40]	; (8006f88 <prvInitialiseTaskLists+0x7c>)
 8006f5e:	4a05      	ldr	r2, [pc, #20]	; (8006f74 <prvInitialiseTaskLists+0x68>)
 8006f60:	601a      	str	r2, [r3, #0]
}
 8006f62:	bf00      	nop
 8006f64:	3708      	adds	r7, #8
 8006f66:	46bd      	mov	sp, r7
 8006f68:	bd80      	pop	{r7, pc}
 8006f6a:	bf00      	nop
 8006f6c:	20000c00 	.word	0x20000c00
 8006f70:	20001060 	.word	0x20001060
 8006f74:	20001074 	.word	0x20001074
 8006f78:	20001090 	.word	0x20001090
 8006f7c:	200010a4 	.word	0x200010a4
 8006f80:	200010bc 	.word	0x200010bc
 8006f84:	20001088 	.word	0x20001088
 8006f88:	2000108c 	.word	0x2000108c

08006f8c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8006f8c:	b580      	push	{r7, lr}
 8006f8e:	b082      	sub	sp, #8
 8006f90:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006f92:	e019      	b.n	8006fc8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8006f94:	f000 fd9e 	bl	8007ad4 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8006f98:	4b10      	ldr	r3, [pc, #64]	; (8006fdc <prvCheckTasksWaitingTermination+0x50>)
 8006f9a:	68db      	ldr	r3, [r3, #12]
 8006f9c:	68db      	ldr	r3, [r3, #12]
 8006f9e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	3304      	adds	r3, #4
 8006fa4:	4618      	mov	r0, r3
 8006fa6:	f7fe fc8d 	bl	80058c4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8006faa:	4b0d      	ldr	r3, [pc, #52]	; (8006fe0 <prvCheckTasksWaitingTermination+0x54>)
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	3b01      	subs	r3, #1
 8006fb0:	4a0b      	ldr	r2, [pc, #44]	; (8006fe0 <prvCheckTasksWaitingTermination+0x54>)
 8006fb2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8006fb4:	4b0b      	ldr	r3, [pc, #44]	; (8006fe4 <prvCheckTasksWaitingTermination+0x58>)
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	3b01      	subs	r3, #1
 8006fba:	4a0a      	ldr	r2, [pc, #40]	; (8006fe4 <prvCheckTasksWaitingTermination+0x58>)
 8006fbc:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8006fbe:	f000 fdb9 	bl	8007b34 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8006fc2:	6878      	ldr	r0, [r7, #4]
 8006fc4:	f000 f810 	bl	8006fe8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006fc8:	4b06      	ldr	r3, [pc, #24]	; (8006fe4 <prvCheckTasksWaitingTermination+0x58>)
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	2b00      	cmp	r3, #0
 8006fce:	d1e1      	bne.n	8006f94 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8006fd0:	bf00      	nop
 8006fd2:	bf00      	nop
 8006fd4:	3708      	adds	r7, #8
 8006fd6:	46bd      	mov	sp, r7
 8006fd8:	bd80      	pop	{r7, pc}
 8006fda:	bf00      	nop
 8006fdc:	200010a4 	.word	0x200010a4
 8006fe0:	200010d0 	.word	0x200010d0
 8006fe4:	200010b8 	.word	0x200010b8

08006fe8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8006fe8:	b580      	push	{r7, lr}
 8006fea:	b084      	sub	sp, #16
 8006fec:	af00      	add	r7, sp, #0
 8006fee:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	3354      	adds	r3, #84	; 0x54
 8006ff4:	4618      	mov	r0, r3
 8006ff6:	f001 f871 	bl	80080dc <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 8007000:	2b00      	cmp	r3, #0
 8007002:	d108      	bne.n	8007016 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007008:	4618      	mov	r0, r3
 800700a:	f000 ff49 	bl	8007ea0 <vPortFree>
				vPortFree( pxTCB );
 800700e:	6878      	ldr	r0, [r7, #4]
 8007010:	f000 ff46 	bl	8007ea0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8007014:	e018      	b.n	8007048 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 800701c:	2b01      	cmp	r3, #1
 800701e:	d103      	bne.n	8007028 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8007020:	6878      	ldr	r0, [r7, #4]
 8007022:	f000 ff3d 	bl	8007ea0 <vPortFree>
	}
 8007026:	e00f      	b.n	8007048 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 800702e:	2b02      	cmp	r3, #2
 8007030:	d00a      	beq.n	8007048 <prvDeleteTCB+0x60>
	__asm volatile
 8007032:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007036:	f383 8811 	msr	BASEPRI, r3
 800703a:	f3bf 8f6f 	isb	sy
 800703e:	f3bf 8f4f 	dsb	sy
 8007042:	60fb      	str	r3, [r7, #12]
}
 8007044:	bf00      	nop
 8007046:	e7fe      	b.n	8007046 <prvDeleteTCB+0x5e>
	}
 8007048:	bf00      	nop
 800704a:	3710      	adds	r7, #16
 800704c:	46bd      	mov	sp, r7
 800704e:	bd80      	pop	{r7, pc}

08007050 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8007050:	b480      	push	{r7}
 8007052:	b083      	sub	sp, #12
 8007054:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007056:	4b0f      	ldr	r3, [pc, #60]	; (8007094 <prvResetNextTaskUnblockTime+0x44>)
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	2b00      	cmp	r3, #0
 800705e:	d101      	bne.n	8007064 <prvResetNextTaskUnblockTime+0x14>
 8007060:	2301      	movs	r3, #1
 8007062:	e000      	b.n	8007066 <prvResetNextTaskUnblockTime+0x16>
 8007064:	2300      	movs	r3, #0
 8007066:	2b00      	cmp	r3, #0
 8007068:	d004      	beq.n	8007074 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800706a:	4b0b      	ldr	r3, [pc, #44]	; (8007098 <prvResetNextTaskUnblockTime+0x48>)
 800706c:	f04f 32ff 	mov.w	r2, #4294967295
 8007070:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8007072:	e008      	b.n	8007086 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8007074:	4b07      	ldr	r3, [pc, #28]	; (8007094 <prvResetNextTaskUnblockTime+0x44>)
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	68db      	ldr	r3, [r3, #12]
 800707a:	68db      	ldr	r3, [r3, #12]
 800707c:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	685b      	ldr	r3, [r3, #4]
 8007082:	4a05      	ldr	r2, [pc, #20]	; (8007098 <prvResetNextTaskUnblockTime+0x48>)
 8007084:	6013      	str	r3, [r2, #0]
}
 8007086:	bf00      	nop
 8007088:	370c      	adds	r7, #12
 800708a:	46bd      	mov	sp, r7
 800708c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007090:	4770      	bx	lr
 8007092:	bf00      	nop
 8007094:	20001088 	.word	0x20001088
 8007098:	200010f0 	.word	0x200010f0

0800709c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800709c:	b480      	push	{r7}
 800709e:	b083      	sub	sp, #12
 80070a0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80070a2:	4b0b      	ldr	r3, [pc, #44]	; (80070d0 <xTaskGetSchedulerState+0x34>)
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	2b00      	cmp	r3, #0
 80070a8:	d102      	bne.n	80070b0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80070aa:	2301      	movs	r3, #1
 80070ac:	607b      	str	r3, [r7, #4]
 80070ae:	e008      	b.n	80070c2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80070b0:	4b08      	ldr	r3, [pc, #32]	; (80070d4 <xTaskGetSchedulerState+0x38>)
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	2b00      	cmp	r3, #0
 80070b6:	d102      	bne.n	80070be <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80070b8:	2302      	movs	r3, #2
 80070ba:	607b      	str	r3, [r7, #4]
 80070bc:	e001      	b.n	80070c2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80070be:	2300      	movs	r3, #0
 80070c0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80070c2:	687b      	ldr	r3, [r7, #4]
	}
 80070c4:	4618      	mov	r0, r3
 80070c6:	370c      	adds	r7, #12
 80070c8:	46bd      	mov	sp, r7
 80070ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ce:	4770      	bx	lr
 80070d0:	200010dc 	.word	0x200010dc
 80070d4:	200010f8 	.word	0x200010f8

080070d8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80070d8:	b580      	push	{r7, lr}
 80070da:	b086      	sub	sp, #24
 80070dc:	af00      	add	r7, sp, #0
 80070de:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80070e4:	2300      	movs	r3, #0
 80070e6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	2b00      	cmp	r3, #0
 80070ec:	d056      	beq.n	800719c <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80070ee:	4b2e      	ldr	r3, [pc, #184]	; (80071a8 <xTaskPriorityDisinherit+0xd0>)
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	693a      	ldr	r2, [r7, #16]
 80070f4:	429a      	cmp	r2, r3
 80070f6:	d00a      	beq.n	800710e <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80070f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070fc:	f383 8811 	msr	BASEPRI, r3
 8007100:	f3bf 8f6f 	isb	sy
 8007104:	f3bf 8f4f 	dsb	sy
 8007108:	60fb      	str	r3, [r7, #12]
}
 800710a:	bf00      	nop
 800710c:	e7fe      	b.n	800710c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800710e:	693b      	ldr	r3, [r7, #16]
 8007110:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007112:	2b00      	cmp	r3, #0
 8007114:	d10a      	bne.n	800712c <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8007116:	f04f 0350 	mov.w	r3, #80	; 0x50
 800711a:	f383 8811 	msr	BASEPRI, r3
 800711e:	f3bf 8f6f 	isb	sy
 8007122:	f3bf 8f4f 	dsb	sy
 8007126:	60bb      	str	r3, [r7, #8]
}
 8007128:	bf00      	nop
 800712a:	e7fe      	b.n	800712a <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800712c:	693b      	ldr	r3, [r7, #16]
 800712e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007130:	1e5a      	subs	r2, r3, #1
 8007132:	693b      	ldr	r3, [r7, #16]
 8007134:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8007136:	693b      	ldr	r3, [r7, #16]
 8007138:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800713a:	693b      	ldr	r3, [r7, #16]
 800713c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800713e:	429a      	cmp	r2, r3
 8007140:	d02c      	beq.n	800719c <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8007142:	693b      	ldr	r3, [r7, #16]
 8007144:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007146:	2b00      	cmp	r3, #0
 8007148:	d128      	bne.n	800719c <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800714a:	693b      	ldr	r3, [r7, #16]
 800714c:	3304      	adds	r3, #4
 800714e:	4618      	mov	r0, r3
 8007150:	f7fe fbb8 	bl	80058c4 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8007154:	693b      	ldr	r3, [r7, #16]
 8007156:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007158:	693b      	ldr	r3, [r7, #16]
 800715a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800715c:	693b      	ldr	r3, [r7, #16]
 800715e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007160:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8007164:	693b      	ldr	r3, [r7, #16]
 8007166:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8007168:	693b      	ldr	r3, [r7, #16]
 800716a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800716c:	4b0f      	ldr	r3, [pc, #60]	; (80071ac <xTaskPriorityDisinherit+0xd4>)
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	429a      	cmp	r2, r3
 8007172:	d903      	bls.n	800717c <xTaskPriorityDisinherit+0xa4>
 8007174:	693b      	ldr	r3, [r7, #16]
 8007176:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007178:	4a0c      	ldr	r2, [pc, #48]	; (80071ac <xTaskPriorityDisinherit+0xd4>)
 800717a:	6013      	str	r3, [r2, #0]
 800717c:	693b      	ldr	r3, [r7, #16]
 800717e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007180:	4613      	mov	r3, r2
 8007182:	009b      	lsls	r3, r3, #2
 8007184:	4413      	add	r3, r2
 8007186:	009b      	lsls	r3, r3, #2
 8007188:	4a09      	ldr	r2, [pc, #36]	; (80071b0 <xTaskPriorityDisinherit+0xd8>)
 800718a:	441a      	add	r2, r3
 800718c:	693b      	ldr	r3, [r7, #16]
 800718e:	3304      	adds	r3, #4
 8007190:	4619      	mov	r1, r3
 8007192:	4610      	mov	r0, r2
 8007194:	f7fe fb39 	bl	800580a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8007198:	2301      	movs	r3, #1
 800719a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800719c:	697b      	ldr	r3, [r7, #20]
	}
 800719e:	4618      	mov	r0, r3
 80071a0:	3718      	adds	r7, #24
 80071a2:	46bd      	mov	sp, r7
 80071a4:	bd80      	pop	{r7, pc}
 80071a6:	bf00      	nop
 80071a8:	20000bfc 	.word	0x20000bfc
 80071ac:	200010d8 	.word	0x200010d8
 80071b0:	20000c00 	.word	0x20000c00

080071b4 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80071b4:	b580      	push	{r7, lr}
 80071b6:	b084      	sub	sp, #16
 80071b8:	af00      	add	r7, sp, #0
 80071ba:	6078      	str	r0, [r7, #4]
 80071bc:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80071be:	4b21      	ldr	r3, [pc, #132]	; (8007244 <prvAddCurrentTaskToDelayedList+0x90>)
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80071c4:	4b20      	ldr	r3, [pc, #128]	; (8007248 <prvAddCurrentTaskToDelayedList+0x94>)
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	3304      	adds	r3, #4
 80071ca:	4618      	mov	r0, r3
 80071cc:	f7fe fb7a 	bl	80058c4 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80071d6:	d10a      	bne.n	80071ee <prvAddCurrentTaskToDelayedList+0x3a>
 80071d8:	683b      	ldr	r3, [r7, #0]
 80071da:	2b00      	cmp	r3, #0
 80071dc:	d007      	beq.n	80071ee <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80071de:	4b1a      	ldr	r3, [pc, #104]	; (8007248 <prvAddCurrentTaskToDelayedList+0x94>)
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	3304      	adds	r3, #4
 80071e4:	4619      	mov	r1, r3
 80071e6:	4819      	ldr	r0, [pc, #100]	; (800724c <prvAddCurrentTaskToDelayedList+0x98>)
 80071e8:	f7fe fb0f 	bl	800580a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80071ec:	e026      	b.n	800723c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80071ee:	68fa      	ldr	r2, [r7, #12]
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	4413      	add	r3, r2
 80071f4:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80071f6:	4b14      	ldr	r3, [pc, #80]	; (8007248 <prvAddCurrentTaskToDelayedList+0x94>)
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	68ba      	ldr	r2, [r7, #8]
 80071fc:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80071fe:	68ba      	ldr	r2, [r7, #8]
 8007200:	68fb      	ldr	r3, [r7, #12]
 8007202:	429a      	cmp	r2, r3
 8007204:	d209      	bcs.n	800721a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007206:	4b12      	ldr	r3, [pc, #72]	; (8007250 <prvAddCurrentTaskToDelayedList+0x9c>)
 8007208:	681a      	ldr	r2, [r3, #0]
 800720a:	4b0f      	ldr	r3, [pc, #60]	; (8007248 <prvAddCurrentTaskToDelayedList+0x94>)
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	3304      	adds	r3, #4
 8007210:	4619      	mov	r1, r3
 8007212:	4610      	mov	r0, r2
 8007214:	f7fe fb1d 	bl	8005852 <vListInsert>
}
 8007218:	e010      	b.n	800723c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800721a:	4b0e      	ldr	r3, [pc, #56]	; (8007254 <prvAddCurrentTaskToDelayedList+0xa0>)
 800721c:	681a      	ldr	r2, [r3, #0]
 800721e:	4b0a      	ldr	r3, [pc, #40]	; (8007248 <prvAddCurrentTaskToDelayedList+0x94>)
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	3304      	adds	r3, #4
 8007224:	4619      	mov	r1, r3
 8007226:	4610      	mov	r0, r2
 8007228:	f7fe fb13 	bl	8005852 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800722c:	4b0a      	ldr	r3, [pc, #40]	; (8007258 <prvAddCurrentTaskToDelayedList+0xa4>)
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	68ba      	ldr	r2, [r7, #8]
 8007232:	429a      	cmp	r2, r3
 8007234:	d202      	bcs.n	800723c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8007236:	4a08      	ldr	r2, [pc, #32]	; (8007258 <prvAddCurrentTaskToDelayedList+0xa4>)
 8007238:	68bb      	ldr	r3, [r7, #8]
 800723a:	6013      	str	r3, [r2, #0]
}
 800723c:	bf00      	nop
 800723e:	3710      	adds	r7, #16
 8007240:	46bd      	mov	sp, r7
 8007242:	bd80      	pop	{r7, pc}
 8007244:	200010d4 	.word	0x200010d4
 8007248:	20000bfc 	.word	0x20000bfc
 800724c:	200010bc 	.word	0x200010bc
 8007250:	2000108c 	.word	0x2000108c
 8007254:	20001088 	.word	0x20001088
 8007258:	200010f0 	.word	0x200010f0

0800725c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800725c:	b580      	push	{r7, lr}
 800725e:	b08a      	sub	sp, #40	; 0x28
 8007260:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8007262:	2300      	movs	r3, #0
 8007264:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8007266:	f000 facb 	bl	8007800 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800726a:	4b1c      	ldr	r3, [pc, #112]	; (80072dc <xTimerCreateTimerTask+0x80>)
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	2b00      	cmp	r3, #0
 8007270:	d021      	beq.n	80072b6 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8007272:	2300      	movs	r3, #0
 8007274:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8007276:	2300      	movs	r3, #0
 8007278:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800727a:	1d3a      	adds	r2, r7, #4
 800727c:	f107 0108 	add.w	r1, r7, #8
 8007280:	f107 030c 	add.w	r3, r7, #12
 8007284:	4618      	mov	r0, r3
 8007286:	f7fe fa79 	bl	800577c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800728a:	6879      	ldr	r1, [r7, #4]
 800728c:	68bb      	ldr	r3, [r7, #8]
 800728e:	68fa      	ldr	r2, [r7, #12]
 8007290:	9202      	str	r2, [sp, #8]
 8007292:	9301      	str	r3, [sp, #4]
 8007294:	2302      	movs	r3, #2
 8007296:	9300      	str	r3, [sp, #0]
 8007298:	2300      	movs	r3, #0
 800729a:	460a      	mov	r2, r1
 800729c:	4910      	ldr	r1, [pc, #64]	; (80072e0 <xTimerCreateTimerTask+0x84>)
 800729e:	4811      	ldr	r0, [pc, #68]	; (80072e4 <xTimerCreateTimerTask+0x88>)
 80072a0:	f7ff f8b2 	bl	8006408 <xTaskCreateStatic>
 80072a4:	4603      	mov	r3, r0
 80072a6:	4a10      	ldr	r2, [pc, #64]	; (80072e8 <xTimerCreateTimerTask+0x8c>)
 80072a8:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80072aa:	4b0f      	ldr	r3, [pc, #60]	; (80072e8 <xTimerCreateTimerTask+0x8c>)
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	2b00      	cmp	r3, #0
 80072b0:	d001      	beq.n	80072b6 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80072b2:	2301      	movs	r3, #1
 80072b4:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80072b6:	697b      	ldr	r3, [r7, #20]
 80072b8:	2b00      	cmp	r3, #0
 80072ba:	d10a      	bne.n	80072d2 <xTimerCreateTimerTask+0x76>
	__asm volatile
 80072bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072c0:	f383 8811 	msr	BASEPRI, r3
 80072c4:	f3bf 8f6f 	isb	sy
 80072c8:	f3bf 8f4f 	dsb	sy
 80072cc:	613b      	str	r3, [r7, #16]
}
 80072ce:	bf00      	nop
 80072d0:	e7fe      	b.n	80072d0 <xTimerCreateTimerTask+0x74>
	return xReturn;
 80072d2:	697b      	ldr	r3, [r7, #20]
}
 80072d4:	4618      	mov	r0, r3
 80072d6:	3718      	adds	r7, #24
 80072d8:	46bd      	mov	sp, r7
 80072da:	bd80      	pop	{r7, pc}
 80072dc:	2000112c 	.word	0x2000112c
 80072e0:	080082cc 	.word	0x080082cc
 80072e4:	08007409 	.word	0x08007409
 80072e8:	20001130 	.word	0x20001130

080072ec <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80072ec:	b580      	push	{r7, lr}
 80072ee:	b08a      	sub	sp, #40	; 0x28
 80072f0:	af00      	add	r7, sp, #0
 80072f2:	60f8      	str	r0, [r7, #12]
 80072f4:	60b9      	str	r1, [r7, #8]
 80072f6:	607a      	str	r2, [r7, #4]
 80072f8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80072fa:	2300      	movs	r3, #0
 80072fc:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80072fe:	68fb      	ldr	r3, [r7, #12]
 8007300:	2b00      	cmp	r3, #0
 8007302:	d10a      	bne.n	800731a <xTimerGenericCommand+0x2e>
	__asm volatile
 8007304:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007308:	f383 8811 	msr	BASEPRI, r3
 800730c:	f3bf 8f6f 	isb	sy
 8007310:	f3bf 8f4f 	dsb	sy
 8007314:	623b      	str	r3, [r7, #32]
}
 8007316:	bf00      	nop
 8007318:	e7fe      	b.n	8007318 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800731a:	4b1a      	ldr	r3, [pc, #104]	; (8007384 <xTimerGenericCommand+0x98>)
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	2b00      	cmp	r3, #0
 8007320:	d02a      	beq.n	8007378 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8007322:	68bb      	ldr	r3, [r7, #8]
 8007324:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 800732a:	68fb      	ldr	r3, [r7, #12]
 800732c:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800732e:	68bb      	ldr	r3, [r7, #8]
 8007330:	2b05      	cmp	r3, #5
 8007332:	dc18      	bgt.n	8007366 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8007334:	f7ff feb2 	bl	800709c <xTaskGetSchedulerState>
 8007338:	4603      	mov	r3, r0
 800733a:	2b02      	cmp	r3, #2
 800733c:	d109      	bne.n	8007352 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800733e:	4b11      	ldr	r3, [pc, #68]	; (8007384 <xTimerGenericCommand+0x98>)
 8007340:	6818      	ldr	r0, [r3, #0]
 8007342:	f107 0110 	add.w	r1, r7, #16
 8007346:	2300      	movs	r3, #0
 8007348:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800734a:	f7fe fbeb 	bl	8005b24 <xQueueGenericSend>
 800734e:	6278      	str	r0, [r7, #36]	; 0x24
 8007350:	e012      	b.n	8007378 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8007352:	4b0c      	ldr	r3, [pc, #48]	; (8007384 <xTimerGenericCommand+0x98>)
 8007354:	6818      	ldr	r0, [r3, #0]
 8007356:	f107 0110 	add.w	r1, r7, #16
 800735a:	2300      	movs	r3, #0
 800735c:	2200      	movs	r2, #0
 800735e:	f7fe fbe1 	bl	8005b24 <xQueueGenericSend>
 8007362:	6278      	str	r0, [r7, #36]	; 0x24
 8007364:	e008      	b.n	8007378 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8007366:	4b07      	ldr	r3, [pc, #28]	; (8007384 <xTimerGenericCommand+0x98>)
 8007368:	6818      	ldr	r0, [r3, #0]
 800736a:	f107 0110 	add.w	r1, r7, #16
 800736e:	2300      	movs	r3, #0
 8007370:	683a      	ldr	r2, [r7, #0]
 8007372:	f7fe fce9 	bl	8005d48 <xQueueGenericSendFromISR>
 8007376:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8007378:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800737a:	4618      	mov	r0, r3
 800737c:	3728      	adds	r7, #40	; 0x28
 800737e:	46bd      	mov	sp, r7
 8007380:	bd80      	pop	{r7, pc}
 8007382:	bf00      	nop
 8007384:	2000112c 	.word	0x2000112c

08007388 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8007388:	b580      	push	{r7, lr}
 800738a:	b088      	sub	sp, #32
 800738c:	af02      	add	r7, sp, #8
 800738e:	6078      	str	r0, [r7, #4]
 8007390:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007392:	4b1c      	ldr	r3, [pc, #112]	; (8007404 <prvProcessExpiredTimer+0x7c>)
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	68db      	ldr	r3, [r3, #12]
 8007398:	68db      	ldr	r3, [r3, #12]
 800739a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800739c:	697b      	ldr	r3, [r7, #20]
 800739e:	3304      	adds	r3, #4
 80073a0:	4618      	mov	r0, r3
 80073a2:	f7fe fa8f 	bl	80058c4 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 80073a6:	697b      	ldr	r3, [r7, #20]
 80073a8:	69db      	ldr	r3, [r3, #28]
 80073aa:	2b01      	cmp	r3, #1
 80073ac:	d122      	bne.n	80073f4 <prvProcessExpiredTimer+0x6c>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80073ae:	697b      	ldr	r3, [r7, #20]
 80073b0:	699a      	ldr	r2, [r3, #24]
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	18d1      	adds	r1, r2, r3
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	683a      	ldr	r2, [r7, #0]
 80073ba:	6978      	ldr	r0, [r7, #20]
 80073bc:	f000 f8c8 	bl	8007550 <prvInsertTimerInActiveList>
 80073c0:	4603      	mov	r3, r0
 80073c2:	2b00      	cmp	r3, #0
 80073c4:	d016      	beq.n	80073f4 <prvProcessExpiredTimer+0x6c>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80073c6:	2300      	movs	r3, #0
 80073c8:	9300      	str	r3, [sp, #0]
 80073ca:	2300      	movs	r3, #0
 80073cc:	687a      	ldr	r2, [r7, #4]
 80073ce:	2100      	movs	r1, #0
 80073d0:	6978      	ldr	r0, [r7, #20]
 80073d2:	f7ff ff8b 	bl	80072ec <xTimerGenericCommand>
 80073d6:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80073d8:	693b      	ldr	r3, [r7, #16]
 80073da:	2b00      	cmp	r3, #0
 80073dc:	d10a      	bne.n	80073f4 <prvProcessExpiredTimer+0x6c>
	__asm volatile
 80073de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073e2:	f383 8811 	msr	BASEPRI, r3
 80073e6:	f3bf 8f6f 	isb	sy
 80073ea:	f3bf 8f4f 	dsb	sy
 80073ee:	60fb      	str	r3, [r7, #12]
}
 80073f0:	bf00      	nop
 80073f2:	e7fe      	b.n	80073f2 <prvProcessExpiredTimer+0x6a>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80073f4:	697b      	ldr	r3, [r7, #20]
 80073f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073f8:	6978      	ldr	r0, [r7, #20]
 80073fa:	4798      	blx	r3
}
 80073fc:	bf00      	nop
 80073fe:	3718      	adds	r7, #24
 8007400:	46bd      	mov	sp, r7
 8007402:	bd80      	pop	{r7, pc}
 8007404:	20001124 	.word	0x20001124

08007408 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 8007408:	b580      	push	{r7, lr}
 800740a:	b084      	sub	sp, #16
 800740c:	af00      	add	r7, sp, #0
 800740e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007410:	f107 0308 	add.w	r3, r7, #8
 8007414:	4618      	mov	r0, r3
 8007416:	f000 f857 	bl	80074c8 <prvGetNextExpireTime>
 800741a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800741c:	68bb      	ldr	r3, [r7, #8]
 800741e:	4619      	mov	r1, r3
 8007420:	68f8      	ldr	r0, [r7, #12]
 8007422:	f000 f803 	bl	800742c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8007426:	f000 f8d5 	bl	80075d4 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800742a:	e7f1      	b.n	8007410 <prvTimerTask+0x8>

0800742c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800742c:	b580      	push	{r7, lr}
 800742e:	b084      	sub	sp, #16
 8007430:	af00      	add	r7, sp, #0
 8007432:	6078      	str	r0, [r7, #4]
 8007434:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8007436:	f7ff fa3b 	bl	80068b0 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800743a:	f107 0308 	add.w	r3, r7, #8
 800743e:	4618      	mov	r0, r3
 8007440:	f000 f866 	bl	8007510 <prvSampleTimeNow>
 8007444:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8007446:	68bb      	ldr	r3, [r7, #8]
 8007448:	2b00      	cmp	r3, #0
 800744a:	d130      	bne.n	80074ae <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800744c:	683b      	ldr	r3, [r7, #0]
 800744e:	2b00      	cmp	r3, #0
 8007450:	d10a      	bne.n	8007468 <prvProcessTimerOrBlockTask+0x3c>
 8007452:	687a      	ldr	r2, [r7, #4]
 8007454:	68fb      	ldr	r3, [r7, #12]
 8007456:	429a      	cmp	r2, r3
 8007458:	d806      	bhi.n	8007468 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800745a:	f7ff fa37 	bl	80068cc <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800745e:	68f9      	ldr	r1, [r7, #12]
 8007460:	6878      	ldr	r0, [r7, #4]
 8007462:	f7ff ff91 	bl	8007388 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8007466:	e024      	b.n	80074b2 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8007468:	683b      	ldr	r3, [r7, #0]
 800746a:	2b00      	cmp	r3, #0
 800746c:	d008      	beq.n	8007480 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800746e:	4b13      	ldr	r3, [pc, #76]	; (80074bc <prvProcessTimerOrBlockTask+0x90>)
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	2b00      	cmp	r3, #0
 8007476:	bf0c      	ite	eq
 8007478:	2301      	moveq	r3, #1
 800747a:	2300      	movne	r3, #0
 800747c:	b2db      	uxtb	r3, r3
 800747e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8007480:	4b0f      	ldr	r3, [pc, #60]	; (80074c0 <prvProcessTimerOrBlockTask+0x94>)
 8007482:	6818      	ldr	r0, [r3, #0]
 8007484:	687a      	ldr	r2, [r7, #4]
 8007486:	68fb      	ldr	r3, [r7, #12]
 8007488:	1ad3      	subs	r3, r2, r3
 800748a:	683a      	ldr	r2, [r7, #0]
 800748c:	4619      	mov	r1, r3
 800748e:	f7fe ff2d 	bl	80062ec <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8007492:	f7ff fa1b 	bl	80068cc <xTaskResumeAll>
 8007496:	4603      	mov	r3, r0
 8007498:	2b00      	cmp	r3, #0
 800749a:	d10a      	bne.n	80074b2 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800749c:	4b09      	ldr	r3, [pc, #36]	; (80074c4 <prvProcessTimerOrBlockTask+0x98>)
 800749e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80074a2:	601a      	str	r2, [r3, #0]
 80074a4:	f3bf 8f4f 	dsb	sy
 80074a8:	f3bf 8f6f 	isb	sy
}
 80074ac:	e001      	b.n	80074b2 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80074ae:	f7ff fa0d 	bl	80068cc <xTaskResumeAll>
}
 80074b2:	bf00      	nop
 80074b4:	3710      	adds	r7, #16
 80074b6:	46bd      	mov	sp, r7
 80074b8:	bd80      	pop	{r7, pc}
 80074ba:	bf00      	nop
 80074bc:	20001128 	.word	0x20001128
 80074c0:	2000112c 	.word	0x2000112c
 80074c4:	e000ed04 	.word	0xe000ed04

080074c8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80074c8:	b480      	push	{r7}
 80074ca:	b085      	sub	sp, #20
 80074cc:	af00      	add	r7, sp, #0
 80074ce:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80074d0:	4b0e      	ldr	r3, [pc, #56]	; (800750c <prvGetNextExpireTime+0x44>)
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	681b      	ldr	r3, [r3, #0]
 80074d6:	2b00      	cmp	r3, #0
 80074d8:	bf0c      	ite	eq
 80074da:	2301      	moveq	r3, #1
 80074dc:	2300      	movne	r3, #0
 80074de:	b2db      	uxtb	r3, r3
 80074e0:	461a      	mov	r2, r3
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	2b00      	cmp	r3, #0
 80074ec:	d105      	bne.n	80074fa <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80074ee:	4b07      	ldr	r3, [pc, #28]	; (800750c <prvGetNextExpireTime+0x44>)
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	68db      	ldr	r3, [r3, #12]
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	60fb      	str	r3, [r7, #12]
 80074f8:	e001      	b.n	80074fe <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80074fa:	2300      	movs	r3, #0
 80074fc:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80074fe:	68fb      	ldr	r3, [r7, #12]
}
 8007500:	4618      	mov	r0, r3
 8007502:	3714      	adds	r7, #20
 8007504:	46bd      	mov	sp, r7
 8007506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800750a:	4770      	bx	lr
 800750c:	20001124 	.word	0x20001124

08007510 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8007510:	b580      	push	{r7, lr}
 8007512:	b084      	sub	sp, #16
 8007514:	af00      	add	r7, sp, #0
 8007516:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8007518:	f7ff fa76 	bl	8006a08 <xTaskGetTickCount>
 800751c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800751e:	4b0b      	ldr	r3, [pc, #44]	; (800754c <prvSampleTimeNow+0x3c>)
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	68fa      	ldr	r2, [r7, #12]
 8007524:	429a      	cmp	r2, r3
 8007526:	d205      	bcs.n	8007534 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8007528:	f000 f908 	bl	800773c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	2201      	movs	r2, #1
 8007530:	601a      	str	r2, [r3, #0]
 8007532:	e002      	b.n	800753a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	2200      	movs	r2, #0
 8007538:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800753a:	4a04      	ldr	r2, [pc, #16]	; (800754c <prvSampleTimeNow+0x3c>)
 800753c:	68fb      	ldr	r3, [r7, #12]
 800753e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8007540:	68fb      	ldr	r3, [r7, #12]
}
 8007542:	4618      	mov	r0, r3
 8007544:	3710      	adds	r7, #16
 8007546:	46bd      	mov	sp, r7
 8007548:	bd80      	pop	{r7, pc}
 800754a:	bf00      	nop
 800754c:	20001134 	.word	0x20001134

08007550 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8007550:	b580      	push	{r7, lr}
 8007552:	b086      	sub	sp, #24
 8007554:	af00      	add	r7, sp, #0
 8007556:	60f8      	str	r0, [r7, #12]
 8007558:	60b9      	str	r1, [r7, #8]
 800755a:	607a      	str	r2, [r7, #4]
 800755c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800755e:	2300      	movs	r3, #0
 8007560:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8007562:	68fb      	ldr	r3, [r7, #12]
 8007564:	68ba      	ldr	r2, [r7, #8]
 8007566:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007568:	68fb      	ldr	r3, [r7, #12]
 800756a:	68fa      	ldr	r2, [r7, #12]
 800756c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800756e:	68ba      	ldr	r2, [r7, #8]
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	429a      	cmp	r2, r3
 8007574:	d812      	bhi.n	800759c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007576:	687a      	ldr	r2, [r7, #4]
 8007578:	683b      	ldr	r3, [r7, #0]
 800757a:	1ad2      	subs	r2, r2, r3
 800757c:	68fb      	ldr	r3, [r7, #12]
 800757e:	699b      	ldr	r3, [r3, #24]
 8007580:	429a      	cmp	r2, r3
 8007582:	d302      	bcc.n	800758a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8007584:	2301      	movs	r3, #1
 8007586:	617b      	str	r3, [r7, #20]
 8007588:	e01b      	b.n	80075c2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800758a:	4b10      	ldr	r3, [pc, #64]	; (80075cc <prvInsertTimerInActiveList+0x7c>)
 800758c:	681a      	ldr	r2, [r3, #0]
 800758e:	68fb      	ldr	r3, [r7, #12]
 8007590:	3304      	adds	r3, #4
 8007592:	4619      	mov	r1, r3
 8007594:	4610      	mov	r0, r2
 8007596:	f7fe f95c 	bl	8005852 <vListInsert>
 800759a:	e012      	b.n	80075c2 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800759c:	687a      	ldr	r2, [r7, #4]
 800759e:	683b      	ldr	r3, [r7, #0]
 80075a0:	429a      	cmp	r2, r3
 80075a2:	d206      	bcs.n	80075b2 <prvInsertTimerInActiveList+0x62>
 80075a4:	68ba      	ldr	r2, [r7, #8]
 80075a6:	683b      	ldr	r3, [r7, #0]
 80075a8:	429a      	cmp	r2, r3
 80075aa:	d302      	bcc.n	80075b2 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80075ac:	2301      	movs	r3, #1
 80075ae:	617b      	str	r3, [r7, #20]
 80075b0:	e007      	b.n	80075c2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80075b2:	4b07      	ldr	r3, [pc, #28]	; (80075d0 <prvInsertTimerInActiveList+0x80>)
 80075b4:	681a      	ldr	r2, [r3, #0]
 80075b6:	68fb      	ldr	r3, [r7, #12]
 80075b8:	3304      	adds	r3, #4
 80075ba:	4619      	mov	r1, r3
 80075bc:	4610      	mov	r0, r2
 80075be:	f7fe f948 	bl	8005852 <vListInsert>
		}
	}

	return xProcessTimerNow;
 80075c2:	697b      	ldr	r3, [r7, #20]
}
 80075c4:	4618      	mov	r0, r3
 80075c6:	3718      	adds	r7, #24
 80075c8:	46bd      	mov	sp, r7
 80075ca:	bd80      	pop	{r7, pc}
 80075cc:	20001128 	.word	0x20001128
 80075d0:	20001124 	.word	0x20001124

080075d4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80075d4:	b580      	push	{r7, lr}
 80075d6:	b08e      	sub	sp, #56	; 0x38
 80075d8:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80075da:	e09d      	b.n	8007718 <prvProcessReceivedCommands+0x144>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	2b00      	cmp	r3, #0
 80075e0:	da18      	bge.n	8007614 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80075e2:	1d3b      	adds	r3, r7, #4
 80075e4:	3304      	adds	r3, #4
 80075e6:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80075e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80075ea:	2b00      	cmp	r3, #0
 80075ec:	d10a      	bne.n	8007604 <prvProcessReceivedCommands+0x30>
	__asm volatile
 80075ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075f2:	f383 8811 	msr	BASEPRI, r3
 80075f6:	f3bf 8f6f 	isb	sy
 80075fa:	f3bf 8f4f 	dsb	sy
 80075fe:	61fb      	str	r3, [r7, #28]
}
 8007600:	bf00      	nop
 8007602:	e7fe      	b.n	8007602 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8007604:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800760a:	6850      	ldr	r0, [r2, #4]
 800760c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800760e:	6892      	ldr	r2, [r2, #8]
 8007610:	4611      	mov	r1, r2
 8007612:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	2b00      	cmp	r3, #0
 8007618:	db7e      	blt.n	8007718 <prvProcessReceivedCommands+0x144>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800761a:	68fb      	ldr	r3, [r7, #12]
 800761c:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800761e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007620:	695b      	ldr	r3, [r3, #20]
 8007622:	2b00      	cmp	r3, #0
 8007624:	d004      	beq.n	8007630 <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007626:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007628:	3304      	adds	r3, #4
 800762a:	4618      	mov	r0, r3
 800762c:	f7fe f94a 	bl	80058c4 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007630:	463b      	mov	r3, r7
 8007632:	4618      	mov	r0, r3
 8007634:	f7ff ff6c 	bl	8007510 <prvSampleTimeNow>
 8007638:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	2b09      	cmp	r3, #9
 800763e:	d86a      	bhi.n	8007716 <prvProcessReceivedCommands+0x142>
 8007640:	a201      	add	r2, pc, #4	; (adr r2, 8007648 <prvProcessReceivedCommands+0x74>)
 8007642:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007646:	bf00      	nop
 8007648:	08007671 	.word	0x08007671
 800764c:	08007671 	.word	0x08007671
 8007650:	08007671 	.word	0x08007671
 8007654:	08007719 	.word	0x08007719
 8007658:	080076cd 	.word	0x080076cd
 800765c:	08007705 	.word	0x08007705
 8007660:	08007671 	.word	0x08007671
 8007664:	08007671 	.word	0x08007671
 8007668:	08007719 	.word	0x08007719
 800766c:	080076cd 	.word	0x080076cd
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8007670:	68ba      	ldr	r2, [r7, #8]
 8007672:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007674:	699b      	ldr	r3, [r3, #24]
 8007676:	18d1      	adds	r1, r2, r3
 8007678:	68bb      	ldr	r3, [r7, #8]
 800767a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800767c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800767e:	f7ff ff67 	bl	8007550 <prvInsertTimerInActiveList>
 8007682:	4603      	mov	r3, r0
 8007684:	2b00      	cmp	r3, #0
 8007686:	d047      	beq.n	8007718 <prvProcessReceivedCommands+0x144>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007688:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800768a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800768c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800768e:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8007690:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007692:	69db      	ldr	r3, [r3, #28]
 8007694:	2b01      	cmp	r3, #1
 8007696:	d13f      	bne.n	8007718 <prvProcessReceivedCommands+0x144>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8007698:	68ba      	ldr	r2, [r7, #8]
 800769a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800769c:	699b      	ldr	r3, [r3, #24]
 800769e:	441a      	add	r2, r3
 80076a0:	2300      	movs	r3, #0
 80076a2:	9300      	str	r3, [sp, #0]
 80076a4:	2300      	movs	r3, #0
 80076a6:	2100      	movs	r1, #0
 80076a8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80076aa:	f7ff fe1f 	bl	80072ec <xTimerGenericCommand>
 80076ae:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80076b0:	6a3b      	ldr	r3, [r7, #32]
 80076b2:	2b00      	cmp	r3, #0
 80076b4:	d130      	bne.n	8007718 <prvProcessReceivedCommands+0x144>
	__asm volatile
 80076b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076ba:	f383 8811 	msr	BASEPRI, r3
 80076be:	f3bf 8f6f 	isb	sy
 80076c2:	f3bf 8f4f 	dsb	sy
 80076c6:	61bb      	str	r3, [r7, #24]
}
 80076c8:	bf00      	nop
 80076ca:	e7fe      	b.n	80076ca <prvProcessReceivedCommands+0xf6>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80076cc:	68ba      	ldr	r2, [r7, #8]
 80076ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076d0:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80076d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076d4:	699b      	ldr	r3, [r3, #24]
 80076d6:	2b00      	cmp	r3, #0
 80076d8:	d10a      	bne.n	80076f0 <prvProcessReceivedCommands+0x11c>
	__asm volatile
 80076da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076de:	f383 8811 	msr	BASEPRI, r3
 80076e2:	f3bf 8f6f 	isb	sy
 80076e6:	f3bf 8f4f 	dsb	sy
 80076ea:	617b      	str	r3, [r7, #20]
}
 80076ec:	bf00      	nop
 80076ee:	e7fe      	b.n	80076ee <prvProcessReceivedCommands+0x11a>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80076f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076f2:	699a      	ldr	r2, [r3, #24]
 80076f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076f6:	18d1      	adds	r1, r2, r3
 80076f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80076fc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80076fe:	f7ff ff27 	bl	8007550 <prvInsertTimerInActiveList>
					break;
 8007702:	e009      	b.n	8007718 <prvProcessReceivedCommands+0x144>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8007704:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007706:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800770a:	2b00      	cmp	r3, #0
 800770c:	d104      	bne.n	8007718 <prvProcessReceivedCommands+0x144>
						{
							vPortFree( pxTimer );
 800770e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007710:	f000 fbc6 	bl	8007ea0 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8007714:	e000      	b.n	8007718 <prvProcessReceivedCommands+0x144>

				default	:
					/* Don't expect to get here. */
					break;
 8007716:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007718:	4b07      	ldr	r3, [pc, #28]	; (8007738 <prvProcessReceivedCommands+0x164>)
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	1d39      	adds	r1, r7, #4
 800771e:	2200      	movs	r2, #0
 8007720:	4618      	mov	r0, r3
 8007722:	f7fe fbbb 	bl	8005e9c <xQueueReceive>
 8007726:	4603      	mov	r3, r0
 8007728:	2b00      	cmp	r3, #0
 800772a:	f47f af57 	bne.w	80075dc <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800772e:	bf00      	nop
 8007730:	bf00      	nop
 8007732:	3730      	adds	r7, #48	; 0x30
 8007734:	46bd      	mov	sp, r7
 8007736:	bd80      	pop	{r7, pc}
 8007738:	2000112c 	.word	0x2000112c

0800773c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800773c:	b580      	push	{r7, lr}
 800773e:	b088      	sub	sp, #32
 8007740:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007742:	e045      	b.n	80077d0 <prvSwitchTimerLists+0x94>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007744:	4b2c      	ldr	r3, [pc, #176]	; (80077f8 <prvSwitchTimerLists+0xbc>)
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	68db      	ldr	r3, [r3, #12]
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800774e:	4b2a      	ldr	r3, [pc, #168]	; (80077f8 <prvSwitchTimerLists+0xbc>)
 8007750:	681b      	ldr	r3, [r3, #0]
 8007752:	68db      	ldr	r3, [r3, #12]
 8007754:	68db      	ldr	r3, [r3, #12]
 8007756:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007758:	68fb      	ldr	r3, [r7, #12]
 800775a:	3304      	adds	r3, #4
 800775c:	4618      	mov	r0, r3
 800775e:	f7fe f8b1 	bl	80058c4 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007762:	68fb      	ldr	r3, [r7, #12]
 8007764:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007766:	68f8      	ldr	r0, [r7, #12]
 8007768:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800776a:	68fb      	ldr	r3, [r7, #12]
 800776c:	69db      	ldr	r3, [r3, #28]
 800776e:	2b01      	cmp	r3, #1
 8007770:	d12e      	bne.n	80077d0 <prvSwitchTimerLists+0x94>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8007772:	68fb      	ldr	r3, [r7, #12]
 8007774:	699b      	ldr	r3, [r3, #24]
 8007776:	693a      	ldr	r2, [r7, #16]
 8007778:	4413      	add	r3, r2
 800777a:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800777c:	68ba      	ldr	r2, [r7, #8]
 800777e:	693b      	ldr	r3, [r7, #16]
 8007780:	429a      	cmp	r2, r3
 8007782:	d90e      	bls.n	80077a2 <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8007784:	68fb      	ldr	r3, [r7, #12]
 8007786:	68ba      	ldr	r2, [r7, #8]
 8007788:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800778a:	68fb      	ldr	r3, [r7, #12]
 800778c:	68fa      	ldr	r2, [r7, #12]
 800778e:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007790:	4b19      	ldr	r3, [pc, #100]	; (80077f8 <prvSwitchTimerLists+0xbc>)
 8007792:	681a      	ldr	r2, [r3, #0]
 8007794:	68fb      	ldr	r3, [r7, #12]
 8007796:	3304      	adds	r3, #4
 8007798:	4619      	mov	r1, r3
 800779a:	4610      	mov	r0, r2
 800779c:	f7fe f859 	bl	8005852 <vListInsert>
 80077a0:	e016      	b.n	80077d0 <prvSwitchTimerLists+0x94>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80077a2:	2300      	movs	r3, #0
 80077a4:	9300      	str	r3, [sp, #0]
 80077a6:	2300      	movs	r3, #0
 80077a8:	693a      	ldr	r2, [r7, #16]
 80077aa:	2100      	movs	r1, #0
 80077ac:	68f8      	ldr	r0, [r7, #12]
 80077ae:	f7ff fd9d 	bl	80072ec <xTimerGenericCommand>
 80077b2:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	2b00      	cmp	r3, #0
 80077b8:	d10a      	bne.n	80077d0 <prvSwitchTimerLists+0x94>
	__asm volatile
 80077ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077be:	f383 8811 	msr	BASEPRI, r3
 80077c2:	f3bf 8f6f 	isb	sy
 80077c6:	f3bf 8f4f 	dsb	sy
 80077ca:	603b      	str	r3, [r7, #0]
}
 80077cc:	bf00      	nop
 80077ce:	e7fe      	b.n	80077ce <prvSwitchTimerLists+0x92>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80077d0:	4b09      	ldr	r3, [pc, #36]	; (80077f8 <prvSwitchTimerLists+0xbc>)
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	681b      	ldr	r3, [r3, #0]
 80077d6:	2b00      	cmp	r3, #0
 80077d8:	d1b4      	bne.n	8007744 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80077da:	4b07      	ldr	r3, [pc, #28]	; (80077f8 <prvSwitchTimerLists+0xbc>)
 80077dc:	681b      	ldr	r3, [r3, #0]
 80077de:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80077e0:	4b06      	ldr	r3, [pc, #24]	; (80077fc <prvSwitchTimerLists+0xc0>)
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	4a04      	ldr	r2, [pc, #16]	; (80077f8 <prvSwitchTimerLists+0xbc>)
 80077e6:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80077e8:	4a04      	ldr	r2, [pc, #16]	; (80077fc <prvSwitchTimerLists+0xc0>)
 80077ea:	697b      	ldr	r3, [r7, #20]
 80077ec:	6013      	str	r3, [r2, #0]
}
 80077ee:	bf00      	nop
 80077f0:	3718      	adds	r7, #24
 80077f2:	46bd      	mov	sp, r7
 80077f4:	bd80      	pop	{r7, pc}
 80077f6:	bf00      	nop
 80077f8:	20001124 	.word	0x20001124
 80077fc:	20001128 	.word	0x20001128

08007800 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8007800:	b580      	push	{r7, lr}
 8007802:	b082      	sub	sp, #8
 8007804:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8007806:	f000 f965 	bl	8007ad4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800780a:	4b15      	ldr	r3, [pc, #84]	; (8007860 <prvCheckForValidListAndQueue+0x60>)
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	2b00      	cmp	r3, #0
 8007810:	d120      	bne.n	8007854 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8007812:	4814      	ldr	r0, [pc, #80]	; (8007864 <prvCheckForValidListAndQueue+0x64>)
 8007814:	f7fd ffcc 	bl	80057b0 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8007818:	4813      	ldr	r0, [pc, #76]	; (8007868 <prvCheckForValidListAndQueue+0x68>)
 800781a:	f7fd ffc9 	bl	80057b0 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800781e:	4b13      	ldr	r3, [pc, #76]	; (800786c <prvCheckForValidListAndQueue+0x6c>)
 8007820:	4a10      	ldr	r2, [pc, #64]	; (8007864 <prvCheckForValidListAndQueue+0x64>)
 8007822:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8007824:	4b12      	ldr	r3, [pc, #72]	; (8007870 <prvCheckForValidListAndQueue+0x70>)
 8007826:	4a10      	ldr	r2, [pc, #64]	; (8007868 <prvCheckForValidListAndQueue+0x68>)
 8007828:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800782a:	2300      	movs	r3, #0
 800782c:	9300      	str	r3, [sp, #0]
 800782e:	4b11      	ldr	r3, [pc, #68]	; (8007874 <prvCheckForValidListAndQueue+0x74>)
 8007830:	4a11      	ldr	r2, [pc, #68]	; (8007878 <prvCheckForValidListAndQueue+0x78>)
 8007832:	2110      	movs	r1, #16
 8007834:	200a      	movs	r0, #10
 8007836:	f7fe f8d7 	bl	80059e8 <xQueueGenericCreateStatic>
 800783a:	4603      	mov	r3, r0
 800783c:	4a08      	ldr	r2, [pc, #32]	; (8007860 <prvCheckForValidListAndQueue+0x60>)
 800783e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8007840:	4b07      	ldr	r3, [pc, #28]	; (8007860 <prvCheckForValidListAndQueue+0x60>)
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	2b00      	cmp	r3, #0
 8007846:	d005      	beq.n	8007854 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8007848:	4b05      	ldr	r3, [pc, #20]	; (8007860 <prvCheckForValidListAndQueue+0x60>)
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	490b      	ldr	r1, [pc, #44]	; (800787c <prvCheckForValidListAndQueue+0x7c>)
 800784e:	4618      	mov	r0, r3
 8007850:	f7fe fd22 	bl	8006298 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007854:	f000 f96e 	bl	8007b34 <vPortExitCritical>
}
 8007858:	bf00      	nop
 800785a:	46bd      	mov	sp, r7
 800785c:	bd80      	pop	{r7, pc}
 800785e:	bf00      	nop
 8007860:	2000112c 	.word	0x2000112c
 8007864:	200010fc 	.word	0x200010fc
 8007868:	20001110 	.word	0x20001110
 800786c:	20001124 	.word	0x20001124
 8007870:	20001128 	.word	0x20001128
 8007874:	200011d8 	.word	0x200011d8
 8007878:	20001138 	.word	0x20001138
 800787c:	080082d4 	.word	0x080082d4

08007880 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8007880:	b480      	push	{r7}
 8007882:	b085      	sub	sp, #20
 8007884:	af00      	add	r7, sp, #0
 8007886:	60f8      	str	r0, [r7, #12]
 8007888:	60b9      	str	r1, [r7, #8]
 800788a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800788c:	68fb      	ldr	r3, [r7, #12]
 800788e:	3b04      	subs	r3, #4
 8007890:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8007892:	68fb      	ldr	r3, [r7, #12]
 8007894:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8007898:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800789a:	68fb      	ldr	r3, [r7, #12]
 800789c:	3b04      	subs	r3, #4
 800789e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80078a0:	68bb      	ldr	r3, [r7, #8]
 80078a2:	f023 0201 	bic.w	r2, r3, #1
 80078a6:	68fb      	ldr	r3, [r7, #12]
 80078a8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80078aa:	68fb      	ldr	r3, [r7, #12]
 80078ac:	3b04      	subs	r3, #4
 80078ae:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80078b0:	4a0c      	ldr	r2, [pc, #48]	; (80078e4 <pxPortInitialiseStack+0x64>)
 80078b2:	68fb      	ldr	r3, [r7, #12]
 80078b4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80078b6:	68fb      	ldr	r3, [r7, #12]
 80078b8:	3b14      	subs	r3, #20
 80078ba:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80078bc:	687a      	ldr	r2, [r7, #4]
 80078be:	68fb      	ldr	r3, [r7, #12]
 80078c0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80078c2:	68fb      	ldr	r3, [r7, #12]
 80078c4:	3b04      	subs	r3, #4
 80078c6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80078c8:	68fb      	ldr	r3, [r7, #12]
 80078ca:	f06f 0202 	mvn.w	r2, #2
 80078ce:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80078d0:	68fb      	ldr	r3, [r7, #12]
 80078d2:	3b20      	subs	r3, #32
 80078d4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80078d6:	68fb      	ldr	r3, [r7, #12]
}
 80078d8:	4618      	mov	r0, r3
 80078da:	3714      	adds	r7, #20
 80078dc:	46bd      	mov	sp, r7
 80078de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078e2:	4770      	bx	lr
 80078e4:	080078e9 	.word	0x080078e9

080078e8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80078e8:	b480      	push	{r7}
 80078ea:	b085      	sub	sp, #20
 80078ec:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80078ee:	2300      	movs	r3, #0
 80078f0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80078f2:	4b12      	ldr	r3, [pc, #72]	; (800793c <prvTaskExitError+0x54>)
 80078f4:	681b      	ldr	r3, [r3, #0]
 80078f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80078fa:	d00a      	beq.n	8007912 <prvTaskExitError+0x2a>
	__asm volatile
 80078fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007900:	f383 8811 	msr	BASEPRI, r3
 8007904:	f3bf 8f6f 	isb	sy
 8007908:	f3bf 8f4f 	dsb	sy
 800790c:	60fb      	str	r3, [r7, #12]
}
 800790e:	bf00      	nop
 8007910:	e7fe      	b.n	8007910 <prvTaskExitError+0x28>
	__asm volatile
 8007912:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007916:	f383 8811 	msr	BASEPRI, r3
 800791a:	f3bf 8f6f 	isb	sy
 800791e:	f3bf 8f4f 	dsb	sy
 8007922:	60bb      	str	r3, [r7, #8]
}
 8007924:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8007926:	bf00      	nop
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	2b00      	cmp	r3, #0
 800792c:	d0fc      	beq.n	8007928 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800792e:	bf00      	nop
 8007930:	bf00      	nop
 8007932:	3714      	adds	r7, #20
 8007934:	46bd      	mov	sp, r7
 8007936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800793a:	4770      	bx	lr
 800793c:	20000024 	.word	0x20000024

08007940 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007940:	4b07      	ldr	r3, [pc, #28]	; (8007960 <pxCurrentTCBConst2>)
 8007942:	6819      	ldr	r1, [r3, #0]
 8007944:	6808      	ldr	r0, [r1, #0]
 8007946:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800794a:	f380 8809 	msr	PSP, r0
 800794e:	f3bf 8f6f 	isb	sy
 8007952:	f04f 0000 	mov.w	r0, #0
 8007956:	f380 8811 	msr	BASEPRI, r0
 800795a:	4770      	bx	lr
 800795c:	f3af 8000 	nop.w

08007960 <pxCurrentTCBConst2>:
 8007960:	20000bfc 	.word	0x20000bfc
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007964:	bf00      	nop
 8007966:	bf00      	nop

08007968 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8007968:	4808      	ldr	r0, [pc, #32]	; (800798c <prvPortStartFirstTask+0x24>)
 800796a:	6800      	ldr	r0, [r0, #0]
 800796c:	6800      	ldr	r0, [r0, #0]
 800796e:	f380 8808 	msr	MSP, r0
 8007972:	f04f 0000 	mov.w	r0, #0
 8007976:	f380 8814 	msr	CONTROL, r0
 800797a:	b662      	cpsie	i
 800797c:	b661      	cpsie	f
 800797e:	f3bf 8f4f 	dsb	sy
 8007982:	f3bf 8f6f 	isb	sy
 8007986:	df00      	svc	0
 8007988:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800798a:	bf00      	nop
 800798c:	e000ed08 	.word	0xe000ed08

08007990 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007990:	b580      	push	{r7, lr}
 8007992:	b086      	sub	sp, #24
 8007994:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8007996:	4b46      	ldr	r3, [pc, #280]	; (8007ab0 <xPortStartScheduler+0x120>)
 8007998:	681b      	ldr	r3, [r3, #0]
 800799a:	4a46      	ldr	r2, [pc, #280]	; (8007ab4 <xPortStartScheduler+0x124>)
 800799c:	4293      	cmp	r3, r2
 800799e:	d10a      	bne.n	80079b6 <xPortStartScheduler+0x26>
	__asm volatile
 80079a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079a4:	f383 8811 	msr	BASEPRI, r3
 80079a8:	f3bf 8f6f 	isb	sy
 80079ac:	f3bf 8f4f 	dsb	sy
 80079b0:	613b      	str	r3, [r7, #16]
}
 80079b2:	bf00      	nop
 80079b4:	e7fe      	b.n	80079b4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80079b6:	4b3e      	ldr	r3, [pc, #248]	; (8007ab0 <xPortStartScheduler+0x120>)
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	4a3f      	ldr	r2, [pc, #252]	; (8007ab8 <xPortStartScheduler+0x128>)
 80079bc:	4293      	cmp	r3, r2
 80079be:	d10a      	bne.n	80079d6 <xPortStartScheduler+0x46>
	__asm volatile
 80079c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079c4:	f383 8811 	msr	BASEPRI, r3
 80079c8:	f3bf 8f6f 	isb	sy
 80079cc:	f3bf 8f4f 	dsb	sy
 80079d0:	60fb      	str	r3, [r7, #12]
}
 80079d2:	bf00      	nop
 80079d4:	e7fe      	b.n	80079d4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80079d6:	4b39      	ldr	r3, [pc, #228]	; (8007abc <xPortStartScheduler+0x12c>)
 80079d8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80079da:	697b      	ldr	r3, [r7, #20]
 80079dc:	781b      	ldrb	r3, [r3, #0]
 80079de:	b2db      	uxtb	r3, r3
 80079e0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80079e2:	697b      	ldr	r3, [r7, #20]
 80079e4:	22ff      	movs	r2, #255	; 0xff
 80079e6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80079e8:	697b      	ldr	r3, [r7, #20]
 80079ea:	781b      	ldrb	r3, [r3, #0]
 80079ec:	b2db      	uxtb	r3, r3
 80079ee:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80079f0:	78fb      	ldrb	r3, [r7, #3]
 80079f2:	b2db      	uxtb	r3, r3
 80079f4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80079f8:	b2da      	uxtb	r2, r3
 80079fa:	4b31      	ldr	r3, [pc, #196]	; (8007ac0 <xPortStartScheduler+0x130>)
 80079fc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80079fe:	4b31      	ldr	r3, [pc, #196]	; (8007ac4 <xPortStartScheduler+0x134>)
 8007a00:	2207      	movs	r2, #7
 8007a02:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007a04:	e009      	b.n	8007a1a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8007a06:	4b2f      	ldr	r3, [pc, #188]	; (8007ac4 <xPortStartScheduler+0x134>)
 8007a08:	681b      	ldr	r3, [r3, #0]
 8007a0a:	3b01      	subs	r3, #1
 8007a0c:	4a2d      	ldr	r2, [pc, #180]	; (8007ac4 <xPortStartScheduler+0x134>)
 8007a0e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007a10:	78fb      	ldrb	r3, [r7, #3]
 8007a12:	b2db      	uxtb	r3, r3
 8007a14:	005b      	lsls	r3, r3, #1
 8007a16:	b2db      	uxtb	r3, r3
 8007a18:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007a1a:	78fb      	ldrb	r3, [r7, #3]
 8007a1c:	b2db      	uxtb	r3, r3
 8007a1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007a22:	2b80      	cmp	r3, #128	; 0x80
 8007a24:	d0ef      	beq.n	8007a06 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8007a26:	4b27      	ldr	r3, [pc, #156]	; (8007ac4 <xPortStartScheduler+0x134>)
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	f1c3 0307 	rsb	r3, r3, #7
 8007a2e:	2b04      	cmp	r3, #4
 8007a30:	d00a      	beq.n	8007a48 <xPortStartScheduler+0xb8>
	__asm volatile
 8007a32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a36:	f383 8811 	msr	BASEPRI, r3
 8007a3a:	f3bf 8f6f 	isb	sy
 8007a3e:	f3bf 8f4f 	dsb	sy
 8007a42:	60bb      	str	r3, [r7, #8]
}
 8007a44:	bf00      	nop
 8007a46:	e7fe      	b.n	8007a46 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8007a48:	4b1e      	ldr	r3, [pc, #120]	; (8007ac4 <xPortStartScheduler+0x134>)
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	021b      	lsls	r3, r3, #8
 8007a4e:	4a1d      	ldr	r2, [pc, #116]	; (8007ac4 <xPortStartScheduler+0x134>)
 8007a50:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007a52:	4b1c      	ldr	r3, [pc, #112]	; (8007ac4 <xPortStartScheduler+0x134>)
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007a5a:	4a1a      	ldr	r2, [pc, #104]	; (8007ac4 <xPortStartScheduler+0x134>)
 8007a5c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	b2da      	uxtb	r2, r3
 8007a62:	697b      	ldr	r3, [r7, #20]
 8007a64:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8007a66:	4b18      	ldr	r3, [pc, #96]	; (8007ac8 <xPortStartScheduler+0x138>)
 8007a68:	681b      	ldr	r3, [r3, #0]
 8007a6a:	4a17      	ldr	r2, [pc, #92]	; (8007ac8 <xPortStartScheduler+0x138>)
 8007a6c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007a70:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8007a72:	4b15      	ldr	r3, [pc, #84]	; (8007ac8 <xPortStartScheduler+0x138>)
 8007a74:	681b      	ldr	r3, [r3, #0]
 8007a76:	4a14      	ldr	r2, [pc, #80]	; (8007ac8 <xPortStartScheduler+0x138>)
 8007a78:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8007a7c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8007a7e:	f000 f8dd 	bl	8007c3c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8007a82:	4b12      	ldr	r3, [pc, #72]	; (8007acc <xPortStartScheduler+0x13c>)
 8007a84:	2200      	movs	r2, #0
 8007a86:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8007a88:	f000 f8fc 	bl	8007c84 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8007a8c:	4b10      	ldr	r3, [pc, #64]	; (8007ad0 <xPortStartScheduler+0x140>)
 8007a8e:	681b      	ldr	r3, [r3, #0]
 8007a90:	4a0f      	ldr	r2, [pc, #60]	; (8007ad0 <xPortStartScheduler+0x140>)
 8007a92:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8007a96:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8007a98:	f7ff ff66 	bl	8007968 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8007a9c:	f7ff f882 	bl	8006ba4 <vTaskSwitchContext>
	prvTaskExitError();
 8007aa0:	f7ff ff22 	bl	80078e8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8007aa4:	2300      	movs	r3, #0
}
 8007aa6:	4618      	mov	r0, r3
 8007aa8:	3718      	adds	r7, #24
 8007aaa:	46bd      	mov	sp, r7
 8007aac:	bd80      	pop	{r7, pc}
 8007aae:	bf00      	nop
 8007ab0:	e000ed00 	.word	0xe000ed00
 8007ab4:	410fc271 	.word	0x410fc271
 8007ab8:	410fc270 	.word	0x410fc270
 8007abc:	e000e400 	.word	0xe000e400
 8007ac0:	2000122c 	.word	0x2000122c
 8007ac4:	20001230 	.word	0x20001230
 8007ac8:	e000ed20 	.word	0xe000ed20
 8007acc:	20000024 	.word	0x20000024
 8007ad0:	e000ef34 	.word	0xe000ef34

08007ad4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8007ad4:	b480      	push	{r7}
 8007ad6:	b083      	sub	sp, #12
 8007ad8:	af00      	add	r7, sp, #0
	__asm volatile
 8007ada:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ade:	f383 8811 	msr	BASEPRI, r3
 8007ae2:	f3bf 8f6f 	isb	sy
 8007ae6:	f3bf 8f4f 	dsb	sy
 8007aea:	607b      	str	r3, [r7, #4]
}
 8007aec:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8007aee:	4b0f      	ldr	r3, [pc, #60]	; (8007b2c <vPortEnterCritical+0x58>)
 8007af0:	681b      	ldr	r3, [r3, #0]
 8007af2:	3301      	adds	r3, #1
 8007af4:	4a0d      	ldr	r2, [pc, #52]	; (8007b2c <vPortEnterCritical+0x58>)
 8007af6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8007af8:	4b0c      	ldr	r3, [pc, #48]	; (8007b2c <vPortEnterCritical+0x58>)
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	2b01      	cmp	r3, #1
 8007afe:	d10f      	bne.n	8007b20 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007b00:	4b0b      	ldr	r3, [pc, #44]	; (8007b30 <vPortEnterCritical+0x5c>)
 8007b02:	681b      	ldr	r3, [r3, #0]
 8007b04:	b2db      	uxtb	r3, r3
 8007b06:	2b00      	cmp	r3, #0
 8007b08:	d00a      	beq.n	8007b20 <vPortEnterCritical+0x4c>
	__asm volatile
 8007b0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b0e:	f383 8811 	msr	BASEPRI, r3
 8007b12:	f3bf 8f6f 	isb	sy
 8007b16:	f3bf 8f4f 	dsb	sy
 8007b1a:	603b      	str	r3, [r7, #0]
}
 8007b1c:	bf00      	nop
 8007b1e:	e7fe      	b.n	8007b1e <vPortEnterCritical+0x4a>
	}
}
 8007b20:	bf00      	nop
 8007b22:	370c      	adds	r7, #12
 8007b24:	46bd      	mov	sp, r7
 8007b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b2a:	4770      	bx	lr
 8007b2c:	20000024 	.word	0x20000024
 8007b30:	e000ed04 	.word	0xe000ed04

08007b34 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8007b34:	b480      	push	{r7}
 8007b36:	b083      	sub	sp, #12
 8007b38:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8007b3a:	4b12      	ldr	r3, [pc, #72]	; (8007b84 <vPortExitCritical+0x50>)
 8007b3c:	681b      	ldr	r3, [r3, #0]
 8007b3e:	2b00      	cmp	r3, #0
 8007b40:	d10a      	bne.n	8007b58 <vPortExitCritical+0x24>
	__asm volatile
 8007b42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b46:	f383 8811 	msr	BASEPRI, r3
 8007b4a:	f3bf 8f6f 	isb	sy
 8007b4e:	f3bf 8f4f 	dsb	sy
 8007b52:	607b      	str	r3, [r7, #4]
}
 8007b54:	bf00      	nop
 8007b56:	e7fe      	b.n	8007b56 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8007b58:	4b0a      	ldr	r3, [pc, #40]	; (8007b84 <vPortExitCritical+0x50>)
 8007b5a:	681b      	ldr	r3, [r3, #0]
 8007b5c:	3b01      	subs	r3, #1
 8007b5e:	4a09      	ldr	r2, [pc, #36]	; (8007b84 <vPortExitCritical+0x50>)
 8007b60:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8007b62:	4b08      	ldr	r3, [pc, #32]	; (8007b84 <vPortExitCritical+0x50>)
 8007b64:	681b      	ldr	r3, [r3, #0]
 8007b66:	2b00      	cmp	r3, #0
 8007b68:	d105      	bne.n	8007b76 <vPortExitCritical+0x42>
 8007b6a:	2300      	movs	r3, #0
 8007b6c:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007b6e:	683b      	ldr	r3, [r7, #0]
 8007b70:	f383 8811 	msr	BASEPRI, r3
}
 8007b74:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8007b76:	bf00      	nop
 8007b78:	370c      	adds	r7, #12
 8007b7a:	46bd      	mov	sp, r7
 8007b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b80:	4770      	bx	lr
 8007b82:	bf00      	nop
 8007b84:	20000024 	.word	0x20000024
	...

08007b90 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007b90:	f3ef 8009 	mrs	r0, PSP
 8007b94:	f3bf 8f6f 	isb	sy
 8007b98:	4b15      	ldr	r3, [pc, #84]	; (8007bf0 <pxCurrentTCBConst>)
 8007b9a:	681a      	ldr	r2, [r3, #0]
 8007b9c:	f01e 0f10 	tst.w	lr, #16
 8007ba0:	bf08      	it	eq
 8007ba2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8007ba6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007baa:	6010      	str	r0, [r2, #0]
 8007bac:	e92d 0009 	stmdb	sp!, {r0, r3}
 8007bb0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8007bb4:	f380 8811 	msr	BASEPRI, r0
 8007bb8:	f3bf 8f4f 	dsb	sy
 8007bbc:	f3bf 8f6f 	isb	sy
 8007bc0:	f7fe fff0 	bl	8006ba4 <vTaskSwitchContext>
 8007bc4:	f04f 0000 	mov.w	r0, #0
 8007bc8:	f380 8811 	msr	BASEPRI, r0
 8007bcc:	bc09      	pop	{r0, r3}
 8007bce:	6819      	ldr	r1, [r3, #0]
 8007bd0:	6808      	ldr	r0, [r1, #0]
 8007bd2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007bd6:	f01e 0f10 	tst.w	lr, #16
 8007bda:	bf08      	it	eq
 8007bdc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007be0:	f380 8809 	msr	PSP, r0
 8007be4:	f3bf 8f6f 	isb	sy
 8007be8:	4770      	bx	lr
 8007bea:	bf00      	nop
 8007bec:	f3af 8000 	nop.w

08007bf0 <pxCurrentTCBConst>:
 8007bf0:	20000bfc 	.word	0x20000bfc
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007bf4:	bf00      	nop
 8007bf6:	bf00      	nop

08007bf8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007bf8:	b580      	push	{r7, lr}
 8007bfa:	b082      	sub	sp, #8
 8007bfc:	af00      	add	r7, sp, #0
	__asm volatile
 8007bfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c02:	f383 8811 	msr	BASEPRI, r3
 8007c06:	f3bf 8f6f 	isb	sy
 8007c0a:	f3bf 8f4f 	dsb	sy
 8007c0e:	607b      	str	r3, [r7, #4]
}
 8007c10:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007c12:	f7fe ff09 	bl	8006a28 <xTaskIncrementTick>
 8007c16:	4603      	mov	r3, r0
 8007c18:	2b00      	cmp	r3, #0
 8007c1a:	d003      	beq.n	8007c24 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8007c1c:	4b06      	ldr	r3, [pc, #24]	; (8007c38 <SysTick_Handler+0x40>)
 8007c1e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007c22:	601a      	str	r2, [r3, #0]
 8007c24:	2300      	movs	r3, #0
 8007c26:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007c28:	683b      	ldr	r3, [r7, #0]
 8007c2a:	f383 8811 	msr	BASEPRI, r3
}
 8007c2e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8007c30:	bf00      	nop
 8007c32:	3708      	adds	r7, #8
 8007c34:	46bd      	mov	sp, r7
 8007c36:	bd80      	pop	{r7, pc}
 8007c38:	e000ed04 	.word	0xe000ed04

08007c3c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8007c3c:	b480      	push	{r7}
 8007c3e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007c40:	4b0b      	ldr	r3, [pc, #44]	; (8007c70 <vPortSetupTimerInterrupt+0x34>)
 8007c42:	2200      	movs	r2, #0
 8007c44:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007c46:	4b0b      	ldr	r3, [pc, #44]	; (8007c74 <vPortSetupTimerInterrupt+0x38>)
 8007c48:	2200      	movs	r2, #0
 8007c4a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8007c4c:	4b0a      	ldr	r3, [pc, #40]	; (8007c78 <vPortSetupTimerInterrupt+0x3c>)
 8007c4e:	681b      	ldr	r3, [r3, #0]
 8007c50:	4a0a      	ldr	r2, [pc, #40]	; (8007c7c <vPortSetupTimerInterrupt+0x40>)
 8007c52:	fba2 2303 	umull	r2, r3, r2, r3
 8007c56:	099b      	lsrs	r3, r3, #6
 8007c58:	4a09      	ldr	r2, [pc, #36]	; (8007c80 <vPortSetupTimerInterrupt+0x44>)
 8007c5a:	3b01      	subs	r3, #1
 8007c5c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8007c5e:	4b04      	ldr	r3, [pc, #16]	; (8007c70 <vPortSetupTimerInterrupt+0x34>)
 8007c60:	2207      	movs	r2, #7
 8007c62:	601a      	str	r2, [r3, #0]
}
 8007c64:	bf00      	nop
 8007c66:	46bd      	mov	sp, r7
 8007c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c6c:	4770      	bx	lr
 8007c6e:	bf00      	nop
 8007c70:	e000e010 	.word	0xe000e010
 8007c74:	e000e018 	.word	0xe000e018
 8007c78:	20000000 	.word	0x20000000
 8007c7c:	10624dd3 	.word	0x10624dd3
 8007c80:	e000e014 	.word	0xe000e014

08007c84 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8007c84:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8007c94 <vPortEnableVFP+0x10>
 8007c88:	6801      	ldr	r1, [r0, #0]
 8007c8a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8007c8e:	6001      	str	r1, [r0, #0]
 8007c90:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8007c92:	bf00      	nop
 8007c94:	e000ed88 	.word	0xe000ed88

08007c98 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8007c98:	b480      	push	{r7}
 8007c9a:	b085      	sub	sp, #20
 8007c9c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8007c9e:	f3ef 8305 	mrs	r3, IPSR
 8007ca2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8007ca4:	68fb      	ldr	r3, [r7, #12]
 8007ca6:	2b0f      	cmp	r3, #15
 8007ca8:	d914      	bls.n	8007cd4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8007caa:	4a17      	ldr	r2, [pc, #92]	; (8007d08 <vPortValidateInterruptPriority+0x70>)
 8007cac:	68fb      	ldr	r3, [r7, #12]
 8007cae:	4413      	add	r3, r2
 8007cb0:	781b      	ldrb	r3, [r3, #0]
 8007cb2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8007cb4:	4b15      	ldr	r3, [pc, #84]	; (8007d0c <vPortValidateInterruptPriority+0x74>)
 8007cb6:	781b      	ldrb	r3, [r3, #0]
 8007cb8:	7afa      	ldrb	r2, [r7, #11]
 8007cba:	429a      	cmp	r2, r3
 8007cbc:	d20a      	bcs.n	8007cd4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8007cbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007cc2:	f383 8811 	msr	BASEPRI, r3
 8007cc6:	f3bf 8f6f 	isb	sy
 8007cca:	f3bf 8f4f 	dsb	sy
 8007cce:	607b      	str	r3, [r7, #4]
}
 8007cd0:	bf00      	nop
 8007cd2:	e7fe      	b.n	8007cd2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8007cd4:	4b0e      	ldr	r3, [pc, #56]	; (8007d10 <vPortValidateInterruptPriority+0x78>)
 8007cd6:	681b      	ldr	r3, [r3, #0]
 8007cd8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8007cdc:	4b0d      	ldr	r3, [pc, #52]	; (8007d14 <vPortValidateInterruptPriority+0x7c>)
 8007cde:	681b      	ldr	r3, [r3, #0]
 8007ce0:	429a      	cmp	r2, r3
 8007ce2:	d90a      	bls.n	8007cfa <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8007ce4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ce8:	f383 8811 	msr	BASEPRI, r3
 8007cec:	f3bf 8f6f 	isb	sy
 8007cf0:	f3bf 8f4f 	dsb	sy
 8007cf4:	603b      	str	r3, [r7, #0]
}
 8007cf6:	bf00      	nop
 8007cf8:	e7fe      	b.n	8007cf8 <vPortValidateInterruptPriority+0x60>
	}
 8007cfa:	bf00      	nop
 8007cfc:	3714      	adds	r7, #20
 8007cfe:	46bd      	mov	sp, r7
 8007d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d04:	4770      	bx	lr
 8007d06:	bf00      	nop
 8007d08:	e000e3f0 	.word	0xe000e3f0
 8007d0c:	2000122c 	.word	0x2000122c
 8007d10:	e000ed0c 	.word	0xe000ed0c
 8007d14:	20001230 	.word	0x20001230

08007d18 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8007d18:	b580      	push	{r7, lr}
 8007d1a:	b08a      	sub	sp, #40	; 0x28
 8007d1c:	af00      	add	r7, sp, #0
 8007d1e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8007d20:	2300      	movs	r3, #0
 8007d22:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8007d24:	f7fe fdc4 	bl	80068b0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8007d28:	4b58      	ldr	r3, [pc, #352]	; (8007e8c <pvPortMalloc+0x174>)
 8007d2a:	681b      	ldr	r3, [r3, #0]
 8007d2c:	2b00      	cmp	r3, #0
 8007d2e:	d101      	bne.n	8007d34 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8007d30:	f000 f910 	bl	8007f54 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007d34:	4b56      	ldr	r3, [pc, #344]	; (8007e90 <pvPortMalloc+0x178>)
 8007d36:	681a      	ldr	r2, [r3, #0]
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	4013      	ands	r3, r2
 8007d3c:	2b00      	cmp	r3, #0
 8007d3e:	f040 808e 	bne.w	8007e5e <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	2b00      	cmp	r3, #0
 8007d46:	d01d      	beq.n	8007d84 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8007d48:	2208      	movs	r2, #8
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	4413      	add	r3, r2
 8007d4e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	f003 0307 	and.w	r3, r3, #7
 8007d56:	2b00      	cmp	r3, #0
 8007d58:	d014      	beq.n	8007d84 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	f023 0307 	bic.w	r3, r3, #7
 8007d60:	3308      	adds	r3, #8
 8007d62:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	f003 0307 	and.w	r3, r3, #7
 8007d6a:	2b00      	cmp	r3, #0
 8007d6c:	d00a      	beq.n	8007d84 <pvPortMalloc+0x6c>
	__asm volatile
 8007d6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d72:	f383 8811 	msr	BASEPRI, r3
 8007d76:	f3bf 8f6f 	isb	sy
 8007d7a:	f3bf 8f4f 	dsb	sy
 8007d7e:	617b      	str	r3, [r7, #20]
}
 8007d80:	bf00      	nop
 8007d82:	e7fe      	b.n	8007d82 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	2b00      	cmp	r3, #0
 8007d88:	d069      	beq.n	8007e5e <pvPortMalloc+0x146>
 8007d8a:	4b42      	ldr	r3, [pc, #264]	; (8007e94 <pvPortMalloc+0x17c>)
 8007d8c:	681b      	ldr	r3, [r3, #0]
 8007d8e:	687a      	ldr	r2, [r7, #4]
 8007d90:	429a      	cmp	r2, r3
 8007d92:	d864      	bhi.n	8007e5e <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8007d94:	4b40      	ldr	r3, [pc, #256]	; (8007e98 <pvPortMalloc+0x180>)
 8007d96:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8007d98:	4b3f      	ldr	r3, [pc, #252]	; (8007e98 <pvPortMalloc+0x180>)
 8007d9a:	681b      	ldr	r3, [r3, #0]
 8007d9c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007d9e:	e004      	b.n	8007daa <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8007da0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007da2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8007da4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007da6:	681b      	ldr	r3, [r3, #0]
 8007da8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007daa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007dac:	685b      	ldr	r3, [r3, #4]
 8007dae:	687a      	ldr	r2, [r7, #4]
 8007db0:	429a      	cmp	r2, r3
 8007db2:	d903      	bls.n	8007dbc <pvPortMalloc+0xa4>
 8007db4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007db6:	681b      	ldr	r3, [r3, #0]
 8007db8:	2b00      	cmp	r3, #0
 8007dba:	d1f1      	bne.n	8007da0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8007dbc:	4b33      	ldr	r3, [pc, #204]	; (8007e8c <pvPortMalloc+0x174>)
 8007dbe:	681b      	ldr	r3, [r3, #0]
 8007dc0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007dc2:	429a      	cmp	r2, r3
 8007dc4:	d04b      	beq.n	8007e5e <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007dc6:	6a3b      	ldr	r3, [r7, #32]
 8007dc8:	681b      	ldr	r3, [r3, #0]
 8007dca:	2208      	movs	r2, #8
 8007dcc:	4413      	add	r3, r2
 8007dce:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007dd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007dd2:	681a      	ldr	r2, [r3, #0]
 8007dd4:	6a3b      	ldr	r3, [r7, #32]
 8007dd6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8007dd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007dda:	685a      	ldr	r2, [r3, #4]
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	1ad2      	subs	r2, r2, r3
 8007de0:	2308      	movs	r3, #8
 8007de2:	005b      	lsls	r3, r3, #1
 8007de4:	429a      	cmp	r2, r3
 8007de6:	d91f      	bls.n	8007e28 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8007de8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	4413      	add	r3, r2
 8007dee:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007df0:	69bb      	ldr	r3, [r7, #24]
 8007df2:	f003 0307 	and.w	r3, r3, #7
 8007df6:	2b00      	cmp	r3, #0
 8007df8:	d00a      	beq.n	8007e10 <pvPortMalloc+0xf8>
	__asm volatile
 8007dfa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007dfe:	f383 8811 	msr	BASEPRI, r3
 8007e02:	f3bf 8f6f 	isb	sy
 8007e06:	f3bf 8f4f 	dsb	sy
 8007e0a:	613b      	str	r3, [r7, #16]
}
 8007e0c:	bf00      	nop
 8007e0e:	e7fe      	b.n	8007e0e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007e10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e12:	685a      	ldr	r2, [r3, #4]
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	1ad2      	subs	r2, r2, r3
 8007e18:	69bb      	ldr	r3, [r7, #24]
 8007e1a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8007e1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e1e:	687a      	ldr	r2, [r7, #4]
 8007e20:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8007e22:	69b8      	ldr	r0, [r7, #24]
 8007e24:	f000 f8f8 	bl	8008018 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007e28:	4b1a      	ldr	r3, [pc, #104]	; (8007e94 <pvPortMalloc+0x17c>)
 8007e2a:	681a      	ldr	r2, [r3, #0]
 8007e2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e2e:	685b      	ldr	r3, [r3, #4]
 8007e30:	1ad3      	subs	r3, r2, r3
 8007e32:	4a18      	ldr	r2, [pc, #96]	; (8007e94 <pvPortMalloc+0x17c>)
 8007e34:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8007e36:	4b17      	ldr	r3, [pc, #92]	; (8007e94 <pvPortMalloc+0x17c>)
 8007e38:	681a      	ldr	r2, [r3, #0]
 8007e3a:	4b18      	ldr	r3, [pc, #96]	; (8007e9c <pvPortMalloc+0x184>)
 8007e3c:	681b      	ldr	r3, [r3, #0]
 8007e3e:	429a      	cmp	r2, r3
 8007e40:	d203      	bcs.n	8007e4a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8007e42:	4b14      	ldr	r3, [pc, #80]	; (8007e94 <pvPortMalloc+0x17c>)
 8007e44:	681b      	ldr	r3, [r3, #0]
 8007e46:	4a15      	ldr	r2, [pc, #84]	; (8007e9c <pvPortMalloc+0x184>)
 8007e48:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8007e4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e4c:	685a      	ldr	r2, [r3, #4]
 8007e4e:	4b10      	ldr	r3, [pc, #64]	; (8007e90 <pvPortMalloc+0x178>)
 8007e50:	681b      	ldr	r3, [r3, #0]
 8007e52:	431a      	orrs	r2, r3
 8007e54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e56:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8007e58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e5a:	2200      	movs	r2, #0
 8007e5c:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8007e5e:	f7fe fd35 	bl	80068cc <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8007e62:	69fb      	ldr	r3, [r7, #28]
 8007e64:	f003 0307 	and.w	r3, r3, #7
 8007e68:	2b00      	cmp	r3, #0
 8007e6a:	d00a      	beq.n	8007e82 <pvPortMalloc+0x16a>
	__asm volatile
 8007e6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e70:	f383 8811 	msr	BASEPRI, r3
 8007e74:	f3bf 8f6f 	isb	sy
 8007e78:	f3bf 8f4f 	dsb	sy
 8007e7c:	60fb      	str	r3, [r7, #12]
}
 8007e7e:	bf00      	nop
 8007e80:	e7fe      	b.n	8007e80 <pvPortMalloc+0x168>
	return pvReturn;
 8007e82:	69fb      	ldr	r3, [r7, #28]
}
 8007e84:	4618      	mov	r0, r3
 8007e86:	3728      	adds	r7, #40	; 0x28
 8007e88:	46bd      	mov	sp, r7
 8007e8a:	bd80      	pop	{r7, pc}
 8007e8c:	20001e3c 	.word	0x20001e3c
 8007e90:	20001e48 	.word	0x20001e48
 8007e94:	20001e40 	.word	0x20001e40
 8007e98:	20001e34 	.word	0x20001e34
 8007e9c:	20001e44 	.word	0x20001e44

08007ea0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007ea0:	b580      	push	{r7, lr}
 8007ea2:	b086      	sub	sp, #24
 8007ea4:	af00      	add	r7, sp, #0
 8007ea6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	2b00      	cmp	r3, #0
 8007eb0:	d048      	beq.n	8007f44 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8007eb2:	2308      	movs	r3, #8
 8007eb4:	425b      	negs	r3, r3
 8007eb6:	697a      	ldr	r2, [r7, #20]
 8007eb8:	4413      	add	r3, r2
 8007eba:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8007ebc:	697b      	ldr	r3, [r7, #20]
 8007ebe:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007ec0:	693b      	ldr	r3, [r7, #16]
 8007ec2:	685a      	ldr	r2, [r3, #4]
 8007ec4:	4b21      	ldr	r3, [pc, #132]	; (8007f4c <vPortFree+0xac>)
 8007ec6:	681b      	ldr	r3, [r3, #0]
 8007ec8:	4013      	ands	r3, r2
 8007eca:	2b00      	cmp	r3, #0
 8007ecc:	d10a      	bne.n	8007ee4 <vPortFree+0x44>
	__asm volatile
 8007ece:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ed2:	f383 8811 	msr	BASEPRI, r3
 8007ed6:	f3bf 8f6f 	isb	sy
 8007eda:	f3bf 8f4f 	dsb	sy
 8007ede:	60fb      	str	r3, [r7, #12]
}
 8007ee0:	bf00      	nop
 8007ee2:	e7fe      	b.n	8007ee2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007ee4:	693b      	ldr	r3, [r7, #16]
 8007ee6:	681b      	ldr	r3, [r3, #0]
 8007ee8:	2b00      	cmp	r3, #0
 8007eea:	d00a      	beq.n	8007f02 <vPortFree+0x62>
	__asm volatile
 8007eec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ef0:	f383 8811 	msr	BASEPRI, r3
 8007ef4:	f3bf 8f6f 	isb	sy
 8007ef8:	f3bf 8f4f 	dsb	sy
 8007efc:	60bb      	str	r3, [r7, #8]
}
 8007efe:	bf00      	nop
 8007f00:	e7fe      	b.n	8007f00 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8007f02:	693b      	ldr	r3, [r7, #16]
 8007f04:	685a      	ldr	r2, [r3, #4]
 8007f06:	4b11      	ldr	r3, [pc, #68]	; (8007f4c <vPortFree+0xac>)
 8007f08:	681b      	ldr	r3, [r3, #0]
 8007f0a:	4013      	ands	r3, r2
 8007f0c:	2b00      	cmp	r3, #0
 8007f0e:	d019      	beq.n	8007f44 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8007f10:	693b      	ldr	r3, [r7, #16]
 8007f12:	681b      	ldr	r3, [r3, #0]
 8007f14:	2b00      	cmp	r3, #0
 8007f16:	d115      	bne.n	8007f44 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007f18:	693b      	ldr	r3, [r7, #16]
 8007f1a:	685a      	ldr	r2, [r3, #4]
 8007f1c:	4b0b      	ldr	r3, [pc, #44]	; (8007f4c <vPortFree+0xac>)
 8007f1e:	681b      	ldr	r3, [r3, #0]
 8007f20:	43db      	mvns	r3, r3
 8007f22:	401a      	ands	r2, r3
 8007f24:	693b      	ldr	r3, [r7, #16]
 8007f26:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8007f28:	f7fe fcc2 	bl	80068b0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8007f2c:	693b      	ldr	r3, [r7, #16]
 8007f2e:	685a      	ldr	r2, [r3, #4]
 8007f30:	4b07      	ldr	r3, [pc, #28]	; (8007f50 <vPortFree+0xb0>)
 8007f32:	681b      	ldr	r3, [r3, #0]
 8007f34:	4413      	add	r3, r2
 8007f36:	4a06      	ldr	r2, [pc, #24]	; (8007f50 <vPortFree+0xb0>)
 8007f38:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8007f3a:	6938      	ldr	r0, [r7, #16]
 8007f3c:	f000 f86c 	bl	8008018 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8007f40:	f7fe fcc4 	bl	80068cc <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8007f44:	bf00      	nop
 8007f46:	3718      	adds	r7, #24
 8007f48:	46bd      	mov	sp, r7
 8007f4a:	bd80      	pop	{r7, pc}
 8007f4c:	20001e48 	.word	0x20001e48
 8007f50:	20001e40 	.word	0x20001e40

08007f54 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8007f54:	b480      	push	{r7}
 8007f56:	b085      	sub	sp, #20
 8007f58:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8007f5a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8007f5e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8007f60:	4b27      	ldr	r3, [pc, #156]	; (8008000 <prvHeapInit+0xac>)
 8007f62:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007f64:	68fb      	ldr	r3, [r7, #12]
 8007f66:	f003 0307 	and.w	r3, r3, #7
 8007f6a:	2b00      	cmp	r3, #0
 8007f6c:	d00c      	beq.n	8007f88 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8007f6e:	68fb      	ldr	r3, [r7, #12]
 8007f70:	3307      	adds	r3, #7
 8007f72:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007f74:	68fb      	ldr	r3, [r7, #12]
 8007f76:	f023 0307 	bic.w	r3, r3, #7
 8007f7a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8007f7c:	68ba      	ldr	r2, [r7, #8]
 8007f7e:	68fb      	ldr	r3, [r7, #12]
 8007f80:	1ad3      	subs	r3, r2, r3
 8007f82:	4a1f      	ldr	r2, [pc, #124]	; (8008000 <prvHeapInit+0xac>)
 8007f84:	4413      	add	r3, r2
 8007f86:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007f88:	68fb      	ldr	r3, [r7, #12]
 8007f8a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8007f8c:	4a1d      	ldr	r2, [pc, #116]	; (8008004 <prvHeapInit+0xb0>)
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8007f92:	4b1c      	ldr	r3, [pc, #112]	; (8008004 <prvHeapInit+0xb0>)
 8007f94:	2200      	movs	r2, #0
 8007f96:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	68ba      	ldr	r2, [r7, #8]
 8007f9c:	4413      	add	r3, r2
 8007f9e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8007fa0:	2208      	movs	r2, #8
 8007fa2:	68fb      	ldr	r3, [r7, #12]
 8007fa4:	1a9b      	subs	r3, r3, r2
 8007fa6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007fa8:	68fb      	ldr	r3, [r7, #12]
 8007faa:	f023 0307 	bic.w	r3, r3, #7
 8007fae:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8007fb0:	68fb      	ldr	r3, [r7, #12]
 8007fb2:	4a15      	ldr	r2, [pc, #84]	; (8008008 <prvHeapInit+0xb4>)
 8007fb4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8007fb6:	4b14      	ldr	r3, [pc, #80]	; (8008008 <prvHeapInit+0xb4>)
 8007fb8:	681b      	ldr	r3, [r3, #0]
 8007fba:	2200      	movs	r2, #0
 8007fbc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8007fbe:	4b12      	ldr	r3, [pc, #72]	; (8008008 <prvHeapInit+0xb4>)
 8007fc0:	681b      	ldr	r3, [r3, #0]
 8007fc2:	2200      	movs	r2, #0
 8007fc4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8007fca:	683b      	ldr	r3, [r7, #0]
 8007fcc:	68fa      	ldr	r2, [r7, #12]
 8007fce:	1ad2      	subs	r2, r2, r3
 8007fd0:	683b      	ldr	r3, [r7, #0]
 8007fd2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007fd4:	4b0c      	ldr	r3, [pc, #48]	; (8008008 <prvHeapInit+0xb4>)
 8007fd6:	681a      	ldr	r2, [r3, #0]
 8007fd8:	683b      	ldr	r3, [r7, #0]
 8007fda:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007fdc:	683b      	ldr	r3, [r7, #0]
 8007fde:	685b      	ldr	r3, [r3, #4]
 8007fe0:	4a0a      	ldr	r2, [pc, #40]	; (800800c <prvHeapInit+0xb8>)
 8007fe2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007fe4:	683b      	ldr	r3, [r7, #0]
 8007fe6:	685b      	ldr	r3, [r3, #4]
 8007fe8:	4a09      	ldr	r2, [pc, #36]	; (8008010 <prvHeapInit+0xbc>)
 8007fea:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8007fec:	4b09      	ldr	r3, [pc, #36]	; (8008014 <prvHeapInit+0xc0>)
 8007fee:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8007ff2:	601a      	str	r2, [r3, #0]
}
 8007ff4:	bf00      	nop
 8007ff6:	3714      	adds	r7, #20
 8007ff8:	46bd      	mov	sp, r7
 8007ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ffe:	4770      	bx	lr
 8008000:	20001234 	.word	0x20001234
 8008004:	20001e34 	.word	0x20001e34
 8008008:	20001e3c 	.word	0x20001e3c
 800800c:	20001e44 	.word	0x20001e44
 8008010:	20001e40 	.word	0x20001e40
 8008014:	20001e48 	.word	0x20001e48

08008018 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8008018:	b480      	push	{r7}
 800801a:	b085      	sub	sp, #20
 800801c:	af00      	add	r7, sp, #0
 800801e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8008020:	4b28      	ldr	r3, [pc, #160]	; (80080c4 <prvInsertBlockIntoFreeList+0xac>)
 8008022:	60fb      	str	r3, [r7, #12]
 8008024:	e002      	b.n	800802c <prvInsertBlockIntoFreeList+0x14>
 8008026:	68fb      	ldr	r3, [r7, #12]
 8008028:	681b      	ldr	r3, [r3, #0]
 800802a:	60fb      	str	r3, [r7, #12]
 800802c:	68fb      	ldr	r3, [r7, #12]
 800802e:	681b      	ldr	r3, [r3, #0]
 8008030:	687a      	ldr	r2, [r7, #4]
 8008032:	429a      	cmp	r2, r3
 8008034:	d8f7      	bhi.n	8008026 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8008036:	68fb      	ldr	r3, [r7, #12]
 8008038:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800803a:	68fb      	ldr	r3, [r7, #12]
 800803c:	685b      	ldr	r3, [r3, #4]
 800803e:	68ba      	ldr	r2, [r7, #8]
 8008040:	4413      	add	r3, r2
 8008042:	687a      	ldr	r2, [r7, #4]
 8008044:	429a      	cmp	r2, r3
 8008046:	d108      	bne.n	800805a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8008048:	68fb      	ldr	r3, [r7, #12]
 800804a:	685a      	ldr	r2, [r3, #4]
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	685b      	ldr	r3, [r3, #4]
 8008050:	441a      	add	r2, r3
 8008052:	68fb      	ldr	r3, [r7, #12]
 8008054:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8008056:	68fb      	ldr	r3, [r7, #12]
 8008058:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	685b      	ldr	r3, [r3, #4]
 8008062:	68ba      	ldr	r2, [r7, #8]
 8008064:	441a      	add	r2, r3
 8008066:	68fb      	ldr	r3, [r7, #12]
 8008068:	681b      	ldr	r3, [r3, #0]
 800806a:	429a      	cmp	r2, r3
 800806c:	d118      	bne.n	80080a0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800806e:	68fb      	ldr	r3, [r7, #12]
 8008070:	681a      	ldr	r2, [r3, #0]
 8008072:	4b15      	ldr	r3, [pc, #84]	; (80080c8 <prvInsertBlockIntoFreeList+0xb0>)
 8008074:	681b      	ldr	r3, [r3, #0]
 8008076:	429a      	cmp	r2, r3
 8008078:	d00d      	beq.n	8008096 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	685a      	ldr	r2, [r3, #4]
 800807e:	68fb      	ldr	r3, [r7, #12]
 8008080:	681b      	ldr	r3, [r3, #0]
 8008082:	685b      	ldr	r3, [r3, #4]
 8008084:	441a      	add	r2, r3
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800808a:	68fb      	ldr	r3, [r7, #12]
 800808c:	681b      	ldr	r3, [r3, #0]
 800808e:	681a      	ldr	r2, [r3, #0]
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	601a      	str	r2, [r3, #0]
 8008094:	e008      	b.n	80080a8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8008096:	4b0c      	ldr	r3, [pc, #48]	; (80080c8 <prvInsertBlockIntoFreeList+0xb0>)
 8008098:	681a      	ldr	r2, [r3, #0]
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	601a      	str	r2, [r3, #0]
 800809e:	e003      	b.n	80080a8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80080a0:	68fb      	ldr	r3, [r7, #12]
 80080a2:	681a      	ldr	r2, [r3, #0]
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80080a8:	68fa      	ldr	r2, [r7, #12]
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	429a      	cmp	r2, r3
 80080ae:	d002      	beq.n	80080b6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80080b0:	68fb      	ldr	r3, [r7, #12]
 80080b2:	687a      	ldr	r2, [r7, #4]
 80080b4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80080b6:	bf00      	nop
 80080b8:	3714      	adds	r7, #20
 80080ba:	46bd      	mov	sp, r7
 80080bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080c0:	4770      	bx	lr
 80080c2:	bf00      	nop
 80080c4:	20001e34 	.word	0x20001e34
 80080c8:	20001e3c 	.word	0x20001e3c

080080cc <memset>:
 80080cc:	4402      	add	r2, r0
 80080ce:	4603      	mov	r3, r0
 80080d0:	4293      	cmp	r3, r2
 80080d2:	d100      	bne.n	80080d6 <memset+0xa>
 80080d4:	4770      	bx	lr
 80080d6:	f803 1b01 	strb.w	r1, [r3], #1
 80080da:	e7f9      	b.n	80080d0 <memset+0x4>

080080dc <_reclaim_reent>:
 80080dc:	4b29      	ldr	r3, [pc, #164]	; (8008184 <_reclaim_reent+0xa8>)
 80080de:	681b      	ldr	r3, [r3, #0]
 80080e0:	4283      	cmp	r3, r0
 80080e2:	b570      	push	{r4, r5, r6, lr}
 80080e4:	4604      	mov	r4, r0
 80080e6:	d04b      	beq.n	8008180 <_reclaim_reent+0xa4>
 80080e8:	69c3      	ldr	r3, [r0, #28]
 80080ea:	b143      	cbz	r3, 80080fe <_reclaim_reent+0x22>
 80080ec:	68db      	ldr	r3, [r3, #12]
 80080ee:	2b00      	cmp	r3, #0
 80080f0:	d144      	bne.n	800817c <_reclaim_reent+0xa0>
 80080f2:	69e3      	ldr	r3, [r4, #28]
 80080f4:	6819      	ldr	r1, [r3, #0]
 80080f6:	b111      	cbz	r1, 80080fe <_reclaim_reent+0x22>
 80080f8:	4620      	mov	r0, r4
 80080fa:	f000 f879 	bl	80081f0 <_free_r>
 80080fe:	6961      	ldr	r1, [r4, #20]
 8008100:	b111      	cbz	r1, 8008108 <_reclaim_reent+0x2c>
 8008102:	4620      	mov	r0, r4
 8008104:	f000 f874 	bl	80081f0 <_free_r>
 8008108:	69e1      	ldr	r1, [r4, #28]
 800810a:	b111      	cbz	r1, 8008112 <_reclaim_reent+0x36>
 800810c:	4620      	mov	r0, r4
 800810e:	f000 f86f 	bl	80081f0 <_free_r>
 8008112:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8008114:	b111      	cbz	r1, 800811c <_reclaim_reent+0x40>
 8008116:	4620      	mov	r0, r4
 8008118:	f000 f86a 	bl	80081f0 <_free_r>
 800811c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800811e:	b111      	cbz	r1, 8008126 <_reclaim_reent+0x4a>
 8008120:	4620      	mov	r0, r4
 8008122:	f000 f865 	bl	80081f0 <_free_r>
 8008126:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8008128:	b111      	cbz	r1, 8008130 <_reclaim_reent+0x54>
 800812a:	4620      	mov	r0, r4
 800812c:	f000 f860 	bl	80081f0 <_free_r>
 8008130:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8008132:	b111      	cbz	r1, 800813a <_reclaim_reent+0x5e>
 8008134:	4620      	mov	r0, r4
 8008136:	f000 f85b 	bl	80081f0 <_free_r>
 800813a:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800813c:	b111      	cbz	r1, 8008144 <_reclaim_reent+0x68>
 800813e:	4620      	mov	r0, r4
 8008140:	f000 f856 	bl	80081f0 <_free_r>
 8008144:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8008146:	b111      	cbz	r1, 800814e <_reclaim_reent+0x72>
 8008148:	4620      	mov	r0, r4
 800814a:	f000 f851 	bl	80081f0 <_free_r>
 800814e:	6a23      	ldr	r3, [r4, #32]
 8008150:	b1b3      	cbz	r3, 8008180 <_reclaim_reent+0xa4>
 8008152:	4620      	mov	r0, r4
 8008154:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8008158:	4718      	bx	r3
 800815a:	5949      	ldr	r1, [r1, r5]
 800815c:	b941      	cbnz	r1, 8008170 <_reclaim_reent+0x94>
 800815e:	3504      	adds	r5, #4
 8008160:	69e3      	ldr	r3, [r4, #28]
 8008162:	2d80      	cmp	r5, #128	; 0x80
 8008164:	68d9      	ldr	r1, [r3, #12]
 8008166:	d1f8      	bne.n	800815a <_reclaim_reent+0x7e>
 8008168:	4620      	mov	r0, r4
 800816a:	f000 f841 	bl	80081f0 <_free_r>
 800816e:	e7c0      	b.n	80080f2 <_reclaim_reent+0x16>
 8008170:	680e      	ldr	r6, [r1, #0]
 8008172:	4620      	mov	r0, r4
 8008174:	f000 f83c 	bl	80081f0 <_free_r>
 8008178:	4631      	mov	r1, r6
 800817a:	e7ef      	b.n	800815c <_reclaim_reent+0x80>
 800817c:	2500      	movs	r5, #0
 800817e:	e7ef      	b.n	8008160 <_reclaim_reent+0x84>
 8008180:	bd70      	pop	{r4, r5, r6, pc}
 8008182:	bf00      	nop
 8008184:	20000074 	.word	0x20000074

08008188 <__libc_init_array>:
 8008188:	b570      	push	{r4, r5, r6, lr}
 800818a:	4d0d      	ldr	r5, [pc, #52]	; (80081c0 <__libc_init_array+0x38>)
 800818c:	4c0d      	ldr	r4, [pc, #52]	; (80081c4 <__libc_init_array+0x3c>)
 800818e:	1b64      	subs	r4, r4, r5
 8008190:	10a4      	asrs	r4, r4, #2
 8008192:	2600      	movs	r6, #0
 8008194:	42a6      	cmp	r6, r4
 8008196:	d109      	bne.n	80081ac <__libc_init_array+0x24>
 8008198:	4d0b      	ldr	r5, [pc, #44]	; (80081c8 <__libc_init_array+0x40>)
 800819a:	4c0c      	ldr	r4, [pc, #48]	; (80081cc <__libc_init_array+0x44>)
 800819c:	f000 f880 	bl	80082a0 <_init>
 80081a0:	1b64      	subs	r4, r4, r5
 80081a2:	10a4      	asrs	r4, r4, #2
 80081a4:	2600      	movs	r6, #0
 80081a6:	42a6      	cmp	r6, r4
 80081a8:	d105      	bne.n	80081b6 <__libc_init_array+0x2e>
 80081aa:	bd70      	pop	{r4, r5, r6, pc}
 80081ac:	f855 3b04 	ldr.w	r3, [r5], #4
 80081b0:	4798      	blx	r3
 80081b2:	3601      	adds	r6, #1
 80081b4:	e7ee      	b.n	8008194 <__libc_init_array+0xc>
 80081b6:	f855 3b04 	ldr.w	r3, [r5], #4
 80081ba:	4798      	blx	r3
 80081bc:	3601      	adds	r6, #1
 80081be:	e7f2      	b.n	80081a6 <__libc_init_array+0x1e>
 80081c0:	08008338 	.word	0x08008338
 80081c4:	08008338 	.word	0x08008338
 80081c8:	08008338 	.word	0x08008338
 80081cc:	0800833c 	.word	0x0800833c

080081d0 <__retarget_lock_acquire_recursive>:
 80081d0:	4770      	bx	lr

080081d2 <__retarget_lock_release_recursive>:
 80081d2:	4770      	bx	lr

080081d4 <memcpy>:
 80081d4:	440a      	add	r2, r1
 80081d6:	4291      	cmp	r1, r2
 80081d8:	f100 33ff 	add.w	r3, r0, #4294967295
 80081dc:	d100      	bne.n	80081e0 <memcpy+0xc>
 80081de:	4770      	bx	lr
 80081e0:	b510      	push	{r4, lr}
 80081e2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80081e6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80081ea:	4291      	cmp	r1, r2
 80081ec:	d1f9      	bne.n	80081e2 <memcpy+0xe>
 80081ee:	bd10      	pop	{r4, pc}

080081f0 <_free_r>:
 80081f0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80081f2:	2900      	cmp	r1, #0
 80081f4:	d044      	beq.n	8008280 <_free_r+0x90>
 80081f6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80081fa:	9001      	str	r0, [sp, #4]
 80081fc:	2b00      	cmp	r3, #0
 80081fe:	f1a1 0404 	sub.w	r4, r1, #4
 8008202:	bfb8      	it	lt
 8008204:	18e4      	addlt	r4, r4, r3
 8008206:	f000 f83f 	bl	8008288 <__malloc_lock>
 800820a:	4a1e      	ldr	r2, [pc, #120]	; (8008284 <_free_r+0x94>)
 800820c:	9801      	ldr	r0, [sp, #4]
 800820e:	6813      	ldr	r3, [r2, #0]
 8008210:	b933      	cbnz	r3, 8008220 <_free_r+0x30>
 8008212:	6063      	str	r3, [r4, #4]
 8008214:	6014      	str	r4, [r2, #0]
 8008216:	b003      	add	sp, #12
 8008218:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800821c:	f000 b83a 	b.w	8008294 <__malloc_unlock>
 8008220:	42a3      	cmp	r3, r4
 8008222:	d908      	bls.n	8008236 <_free_r+0x46>
 8008224:	6825      	ldr	r5, [r4, #0]
 8008226:	1961      	adds	r1, r4, r5
 8008228:	428b      	cmp	r3, r1
 800822a:	bf01      	itttt	eq
 800822c:	6819      	ldreq	r1, [r3, #0]
 800822e:	685b      	ldreq	r3, [r3, #4]
 8008230:	1949      	addeq	r1, r1, r5
 8008232:	6021      	streq	r1, [r4, #0]
 8008234:	e7ed      	b.n	8008212 <_free_r+0x22>
 8008236:	461a      	mov	r2, r3
 8008238:	685b      	ldr	r3, [r3, #4]
 800823a:	b10b      	cbz	r3, 8008240 <_free_r+0x50>
 800823c:	42a3      	cmp	r3, r4
 800823e:	d9fa      	bls.n	8008236 <_free_r+0x46>
 8008240:	6811      	ldr	r1, [r2, #0]
 8008242:	1855      	adds	r5, r2, r1
 8008244:	42a5      	cmp	r5, r4
 8008246:	d10b      	bne.n	8008260 <_free_r+0x70>
 8008248:	6824      	ldr	r4, [r4, #0]
 800824a:	4421      	add	r1, r4
 800824c:	1854      	adds	r4, r2, r1
 800824e:	42a3      	cmp	r3, r4
 8008250:	6011      	str	r1, [r2, #0]
 8008252:	d1e0      	bne.n	8008216 <_free_r+0x26>
 8008254:	681c      	ldr	r4, [r3, #0]
 8008256:	685b      	ldr	r3, [r3, #4]
 8008258:	6053      	str	r3, [r2, #4]
 800825a:	440c      	add	r4, r1
 800825c:	6014      	str	r4, [r2, #0]
 800825e:	e7da      	b.n	8008216 <_free_r+0x26>
 8008260:	d902      	bls.n	8008268 <_free_r+0x78>
 8008262:	230c      	movs	r3, #12
 8008264:	6003      	str	r3, [r0, #0]
 8008266:	e7d6      	b.n	8008216 <_free_r+0x26>
 8008268:	6825      	ldr	r5, [r4, #0]
 800826a:	1961      	adds	r1, r4, r5
 800826c:	428b      	cmp	r3, r1
 800826e:	bf04      	itt	eq
 8008270:	6819      	ldreq	r1, [r3, #0]
 8008272:	685b      	ldreq	r3, [r3, #4]
 8008274:	6063      	str	r3, [r4, #4]
 8008276:	bf04      	itt	eq
 8008278:	1949      	addeq	r1, r1, r5
 800827a:	6021      	streq	r1, [r4, #0]
 800827c:	6054      	str	r4, [r2, #4]
 800827e:	e7ca      	b.n	8008216 <_free_r+0x26>
 8008280:	b003      	add	sp, #12
 8008282:	bd30      	pop	{r4, r5, pc}
 8008284:	20001f88 	.word	0x20001f88

08008288 <__malloc_lock>:
 8008288:	4801      	ldr	r0, [pc, #4]	; (8008290 <__malloc_lock+0x8>)
 800828a:	f7ff bfa1 	b.w	80081d0 <__retarget_lock_acquire_recursive>
 800828e:	bf00      	nop
 8008290:	20001f84 	.word	0x20001f84

08008294 <__malloc_unlock>:
 8008294:	4801      	ldr	r0, [pc, #4]	; (800829c <__malloc_unlock+0x8>)
 8008296:	f7ff bf9c 	b.w	80081d2 <__retarget_lock_release_recursive>
 800829a:	bf00      	nop
 800829c:	20001f84 	.word	0x20001f84

080082a0 <_init>:
 80082a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80082a2:	bf00      	nop
 80082a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80082a6:	bc08      	pop	{r3}
 80082a8:	469e      	mov	lr, r3
 80082aa:	4770      	bx	lr

080082ac <_fini>:
 80082ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80082ae:	bf00      	nop
 80082b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80082b2:	bc08      	pop	{r3}
 80082b4:	469e      	mov	lr, r3
 80082b6:	4770      	bx	lr
