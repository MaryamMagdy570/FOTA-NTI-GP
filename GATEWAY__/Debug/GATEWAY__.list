
GATEWAY__.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d2d4  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000288  0800d474  0800d474  0001d474  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d6fc  0800d6fc  00020094  2**0
                  CONTENTS
  4 .ARM          00000000  0800d6fc  0800d6fc  00020094  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800d6fc  0800d6fc  00020094  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d6fc  0800d6fc  0001d6fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d700  0800d700  0001d700  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000094  20000000  0800d704  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020094  2**0
                  CONTENTS
 10 .bss          00002eec  20000094  20000094  00020094  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20002f80  20002f80  00020094  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020094  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  000200c4  2**0
                  CONTENTS, READONLY
 14 .debug_info   000213ff  00000000  00000000  00020107  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 0000468d  00000000  00000000  00041506  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001a68  00000000  00000000  00045b98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 0000149b  00000000  00000000  00047600  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0002471a  00000000  00000000  00048a9b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00022984  00000000  00000000  0006d1b5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000d8471  00000000  00000000  0008fb39  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00007198  00000000  00000000  00167fac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000058  00000000  00000000  0016f144  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000094 	.word	0x20000094
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800d45c 	.word	0x0800d45c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000098 	.word	0x20000098
 80001dc:	0800d45c 	.word	0x0800d45c

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <vRecord_TimerCallBack>:
/* USER CODE BEGIN Application */

/*@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@*/
/* ISRs code -----------------------------------------------------------------*/
void vRecord_TimerCallBack(TimerHandle_t Bump_Dist_Timer)
{}
 80001f0:	b480      	push	{r7}
 80001f2:	b083      	sub	sp, #12
 80001f4:	af00      	add	r7, sp, #0
 80001f6:	6078      	str	r0, [r7, #4]
 80001f8:	bf00      	nop
 80001fa:	370c      	adds	r7, #12
 80001fc:	46bd      	mov	sp, r7
 80001fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000202:	4770      	bx	lr

08000204 <Check_Validity_Task_Func>:
/*@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@*/

/*@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@*/
/* General Branch code -------------------------------------------------------*/
void Check_Validity_Task_Func(void * pvParameters)
{
 8000204:	b480      	push	{r7}
 8000206:	b083      	sub	sp, #12
 8000208:	af00      	add	r7, sp, #0
 800020a:	6078      	str	r0, [r7, #4]
	while(1)
 800020c:	e7fe      	b.n	800020c <Check_Validity_Task_Func+0x8>

0800020e <Init_Deinit_Reset_Task_Func>:
/*@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@*/

/*@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@*/
/* General Control Branch code -----------------------------------------------*/
void Init_Deinit_Reset_Task_Func(void * pvParameters)
{
 800020e:	b480      	push	{r7}
 8000210:	b083      	sub	sp, #12
 8000212:	af00      	add	r7, sp, #0
 8000214:	6078      	str	r0, [r7, #4]
	while(1)
 8000216:	e7fe      	b.n	8000216 <Init_Deinit_Reset_Task_Func+0x8>

08000218 <Control_Branch_Task_Func>:
	{

	}
}
void Control_Branch_Task_Func(void * pvParameters)
{
 8000218:	b480      	push	{r7}
 800021a:	b083      	sub	sp, #12
 800021c:	af00      	add	r7, sp, #0
 800021e:	6078      	str	r0, [r7, #4]
	while(1)
 8000220:	e7fe      	b.n	8000220 <Control_Branch_Task_Func+0x8>

08000222 <Control_DMA_Task_Func>:
	{

	}
}
void Control_DMA_Task_Func(void * pvParameters)
{
 8000222:	b480      	push	{r7}
 8000224:	b083      	sub	sp, #12
 8000226:	af00      	add	r7, sp, #0
 8000228:	6078      	str	r0, [r7, #4]
	while(1)
 800022a:	e7fe      	b.n	800022a <Control_DMA_Task_Func+0x8>

0800022c <Manage_ESP_Task_Func>:

/*@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@*/
/* ESP Branch code -----------------------------------------------------------*/

void Manage_ESP_Task_Func(void * pvParameters)
{
 800022c:	b580      	push	{r7, lr}
 800022e:	b0a4      	sub	sp, #144	; 0x90
 8000230:	af00      	add	r7, sp, #0
 8000232:	6078      	str	r0, [r7, #4]
  //xSemaphoreTake()
  uint8_t receive_buffer[128];
  uint16_t blocks_num=0;
 8000234:	2300      	movs	r3, #0
 8000236:	81fb      	strh	r3, [r7, #14]
  uint8_t ack=0;
 8000238:	2300      	movs	r3, #0
 800023a:	737b      	strb	r3, [r7, #13]
  while(1)
  {



    if (xSemaphoreTake(Manage_ESP_Semph,100))
 800023c:	4b30      	ldr	r3, [pc, #192]	; (8000300 <Manage_ESP_Task_Func+0xd4>)
 800023e:	681b      	ldr	r3, [r3, #0]
 8000240:	2164      	movs	r1, #100	; 0x64
 8000242:	4618      	mov	r0, r3
 8000244:	f00a fcee 	bl	800ac24 <xQueueSemaphoreTake>
 8000248:	4603      	mov	r3, r0
 800024a:	2b00      	cmp	r3, #0
 800024c:	d0f6      	beq.n	800023c <Manage_ESP_Task_Func+0x10>
    {

      xQueueReceive(queue_sizefromsec, (uint8_t*)(&blocks_num), 100);
 800024e:	4b2d      	ldr	r3, [pc, #180]	; (8000304 <Manage_ESP_Task_Func+0xd8>)
 8000250:	681b      	ldr	r3, [r3, #0]
 8000252:	f107 010e 	add.w	r1, r7, #14
 8000256:	2264      	movs	r2, #100	; 0x64
 8000258:	4618      	mov	r0, r3
 800025a:	f00a fc03 	bl	800aa64 <xQueueReceive>

      if (xSemaphoreTake(Receive_Data_Semph,100))
 800025e:	4b2a      	ldr	r3, [pc, #168]	; (8000308 <Manage_ESP_Task_Func+0xdc>)
 8000260:	681b      	ldr	r3, [r3, #0]
 8000262:	2164      	movs	r1, #100	; 0x64
 8000264:	4618      	mov	r0, r3
 8000266:	f00a fcdd 	bl	800ac24 <xQueueSemaphoreTake>
 800026a:	4603      	mov	r3, r0
 800026c:	2b00      	cmp	r3, #0
 800026e:	d0e5      	beq.n	800023c <Manage_ESP_Task_Func+0x10>
      {

        while (blocks_num)
 8000270:	e041      	b.n	80002f6 <Manage_ESP_Task_Func+0xca>
        {
          if (uxQueueMessagesWaiting(OUT_S_E_MSD_MESP_Queue) > 0)
 8000272:	4b26      	ldr	r3, [pc, #152]	; (800030c <Manage_ESP_Task_Func+0xe0>)
 8000274:	681b      	ldr	r3, [r3, #0]
 8000276:	4618      	mov	r0, r3
 8000278:	f00a fde0 	bl	800ae3c <uxQueueMessagesWaiting>
 800027c:	4603      	mov	r3, r0
 800027e:	2b00      	cmp	r3, #0
 8000280:	d01d      	beq.n	80002be <Manage_ESP_Task_Func+0x92>
          {
            xQueueReceive(OUT_S_E_MSD_MESP_Queue,&ack,100/*block time*/);
 8000282:	4b22      	ldr	r3, [pc, #136]	; (800030c <Manage_ESP_Task_Func+0xe0>)
 8000284:	681b      	ldr	r3, [r3, #0]
 8000286:	f107 010d 	add.w	r1, r7, #13
 800028a:	2264      	movs	r2, #100	; 0x64
 800028c:	4618      	mov	r0, r3
 800028e:	f00a fbe9 	bl	800aa64 <xQueueReceive>
            xQueueSend(queue_send_ack_to_esp,&ack,100/*block time*/);
 8000292:	4b1f      	ldr	r3, [pc, #124]	; (8000310 <Manage_ESP_Task_Func+0xe4>)
 8000294:	6818      	ldr	r0, [r3, #0]
 8000296:	f107 010d 	add.w	r1, r7, #13
 800029a:	2300      	movs	r3, #0
 800029c:	2264      	movs	r2, #100	; 0x64
 800029e:	f00a fa25 	bl	800a6ec <xQueueGenericSend>
            xSemaphoreGive(Send_MESP_Semph);
 80002a2:	4b1c      	ldr	r3, [pc, #112]	; (8000314 <Manage_ESP_Task_Func+0xe8>)
 80002a4:	6818      	ldr	r0, [r3, #0]
 80002a6:	2300      	movs	r3, #0
 80002a8:	2200      	movs	r2, #0
 80002aa:	2100      	movs	r1, #0
 80002ac:	f00a fa1e 	bl	800a6ec <xQueueGenericSend>
            xSemaphoreGive(Receive_MESP_Semph);
 80002b0:	4b19      	ldr	r3, [pc, #100]	; (8000318 <Manage_ESP_Task_Func+0xec>)
 80002b2:	6818      	ldr	r0, [r3, #0]
 80002b4:	2300      	movs	r3, #0
 80002b6:	2200      	movs	r2, #0
 80002b8:	2100      	movs	r1, #0
 80002ba:	f00a fa17 	bl	800a6ec <xQueueGenericSend>

          }
          if (uxQueueMessagesWaiting(IN_E_Receive_MESP_Queue) > 0)
 80002be:	4b17      	ldr	r3, [pc, #92]	; (800031c <Manage_ESP_Task_Func+0xf0>)
 80002c0:	681b      	ldr	r3, [r3, #0]
 80002c2:	4618      	mov	r0, r3
 80002c4:	f00a fdba 	bl	800ae3c <uxQueueMessagesWaiting>
 80002c8:	4603      	mov	r3, r0
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d013      	beq.n	80002f6 <Manage_ESP_Task_Func+0xca>
          {
            xQueueReceive(IN_E_Receive_MESP_Queue, receive_buffer, 100/*block time*/);
 80002ce:	4b13      	ldr	r3, [pc, #76]	; (800031c <Manage_ESP_Task_Func+0xf0>)
 80002d0:	681b      	ldr	r3, [r3, #0]
 80002d2:	f107 0110 	add.w	r1, r7, #16
 80002d6:	2264      	movs	r2, #100	; 0x64
 80002d8:	4618      	mov	r0, r3
 80002da:	f00a fbc3 	bl	800aa64 <xQueueReceive>
            blocks_num--;
 80002de:	89fb      	ldrh	r3, [r7, #14]
 80002e0:	3b01      	subs	r3, #1
 80002e2:	b29b      	uxth	r3, r3
 80002e4:	81fb      	strh	r3, [r7, #14]
            xQueueSend(OUT_E_S_MESP_MSD_Queue, receive_buffer, 100/*block time*/);
 80002e6:	4b0e      	ldr	r3, [pc, #56]	; (8000320 <Manage_ESP_Task_Func+0xf4>)
 80002e8:	6818      	ldr	r0, [r3, #0]
 80002ea:	f107 0110 	add.w	r1, r7, #16
 80002ee:	2300      	movs	r3, #0
 80002f0:	2264      	movs	r2, #100	; 0x64
 80002f2:	f00a f9fb 	bl	800a6ec <xQueueGenericSend>
        while (blocks_num)
 80002f6:	89fb      	ldrh	r3, [r7, #14]
 80002f8:	2b00      	cmp	r3, #0
 80002fa:	d1ba      	bne.n	8000272 <Manage_ESP_Task_Func+0x46>
    if (xSemaphoreTake(Manage_ESP_Semph,100))
 80002fc:	e79e      	b.n	800023c <Manage_ESP_Task_Func+0x10>
 80002fe:	bf00      	nop
 8000300:	2000015c 	.word	0x2000015c
 8000304:	20000110 	.word	0x20000110
 8000308:	20000160 	.word	0x20000160
 800030c:	200000f4 	.word	0x200000f4
 8000310:	20000114 	.word	0x20000114
 8000314:	20000164 	.word	0x20000164
 8000318:	20000168 	.word	0x20000168
 800031c:	20000108 	.word	0x20000108
 8000320:	200000f0 	.word	0x200000f0

08000324 <Send_to_ESP_Task_Func>:
    }
  }
}

void Send_to_ESP_Task_Func(void * pvParameters)
{
 8000324:	b580      	push	{r7, lr}
 8000326:	b084      	sub	sp, #16
 8000328:	af00      	add	r7, sp, #0
 800032a:	6078      	str	r0, [r7, #4]
  uint8_t ack='A';
 800032c:	2341      	movs	r3, #65	; 0x41
 800032e:	73bb      	strb	r3, [r7, #14]
  HAL_StatusTypeDef state =HAL_OK;
 8000330:	2300      	movs	r3, #0
 8000332:	73fb      	strb	r3, [r7, #15]
  while(1)
  {
    if(xSemaphoreTake(Send_MESP_Semph,100/*block time*/))
 8000334:	4b14      	ldr	r3, [pc, #80]	; (8000388 <Send_to_ESP_Task_Func+0x64>)
 8000336:	681b      	ldr	r3, [r3, #0]
 8000338:	2164      	movs	r1, #100	; 0x64
 800033a:	4618      	mov	r0, r3
 800033c:	f00a fc72 	bl	800ac24 <xQueueSemaphoreTake>
 8000340:	4603      	mov	r3, r0
 8000342:	2b00      	cmp	r3, #0
 8000344:	d0f6      	beq.n	8000334 <Send_to_ESP_Task_Func+0x10>
    {
      if (uxQueueMessagesWaiting(queue_send_ack_to_esp) > 0)
 8000346:	4b11      	ldr	r3, [pc, #68]	; (800038c <Send_to_ESP_Task_Func+0x68>)
 8000348:	681b      	ldr	r3, [r3, #0]
 800034a:	4618      	mov	r0, r3
 800034c:	f00a fd76 	bl	800ae3c <uxQueueMessagesWaiting>
 8000350:	4603      	mov	r3, r0
 8000352:	2b00      	cmp	r3, #0
 8000354:	d0ee      	beq.n	8000334 <Send_to_ESP_Task_Func+0x10>
      {
        xQueueReceive(queue_send_ack_to_esp, &ack, 100/*block time*/);
 8000356:	4b0d      	ldr	r3, [pc, #52]	; (800038c <Send_to_ESP_Task_Func+0x68>)
 8000358:	681b      	ldr	r3, [r3, #0]
 800035a:	f107 010e 	add.w	r1, r7, #14
 800035e:	2264      	movs	r2, #100	; 0x64
 8000360:	4618      	mov	r0, r3
 8000362:	f00a fb7f 	bl	800aa64 <xQueueReceive>
        state=HAL_UART_Transmit(&huart1,&ack,1,10000);
 8000366:	f107 010e 	add.w	r1, r7, #14
 800036a:	f242 7310 	movw	r3, #10000	; 0x2710
 800036e:	2201      	movs	r2, #1
 8000370:	4807      	ldr	r0, [pc, #28]	; (8000390 <Send_to_ESP_Task_Func+0x6c>)
 8000372:	f005 f8ad 	bl	80054d0 <HAL_UART_Transmit>
 8000376:	4603      	mov	r3, r0
 8000378:	73fb      	strb	r3, [r7, #15]
        if (state != HAL_OK)
 800037a:	7bfb      	ldrb	r3, [r7, #15]
 800037c:	2b00      	cmp	r3, #0
 800037e:	d0d9      	beq.n	8000334 <Send_to_ESP_Task_Func+0x10>
        {
          Error_Handler();
 8000380:	f001 fbe2 	bl	8001b48 <Error_Handler>
    if(xSemaphoreTake(Send_MESP_Semph,100/*block time*/))
 8000384:	e7d6      	b.n	8000334 <Send_to_ESP_Task_Func+0x10>
 8000386:	bf00      	nop
 8000388:	20000164 	.word	0x20000164
 800038c:	20000114 	.word	0x20000114
 8000390:	20001230 	.word	0x20001230

08000394 <Receive_from_ESP_Task_Func>:
      }
    }
  }
}
void Receive_from_ESP_Task_Func(void * pvParameters)
{
 8000394:	b580      	push	{r7, lr}
 8000396:	b0a4      	sub	sp, #144	; 0x90
 8000398:	af00      	add	r7, sp, #0
 800039a:	6078      	str	r0, [r7, #4]
  uint8_t block[128];
  HAL_StatusTypeDef state =HAL_OK;
 800039c:	2300      	movs	r3, #0
 800039e:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
  while(1)
  {
    if(xSemaphoreTake(Receive_MESP_Semph,100/*block time*/))
 80003a2:	4b12      	ldr	r3, [pc, #72]	; (80003ec <Receive_from_ESP_Task_Func+0x58>)
 80003a4:	681b      	ldr	r3, [r3, #0]
 80003a6:	2164      	movs	r1, #100	; 0x64
 80003a8:	4618      	mov	r0, r3
 80003aa:	f00a fc3b 	bl	800ac24 <xQueueSemaphoreTake>
 80003ae:	4603      	mov	r3, r0
 80003b0:	2b00      	cmp	r3, #0
 80003b2:	d0f6      	beq.n	80003a2 <Receive_from_ESP_Task_Func+0xe>
    {

      state=HAL_UART_Receive(&huart1, block,/*block size */128,HAL_MAX_DELAY);
 80003b4:	f107 010c 	add.w	r1, r7, #12
 80003b8:	f04f 33ff 	mov.w	r3, #4294967295
 80003bc:	2280      	movs	r2, #128	; 0x80
 80003be:	480c      	ldr	r0, [pc, #48]	; (80003f0 <Receive_from_ESP_Task_Func+0x5c>)
 80003c0:	f005 f910 	bl	80055e4 <HAL_UART_Receive>
 80003c4:	4603      	mov	r3, r0
 80003c6:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
      // check status then send the queue
      if (state != HAL_OK)
 80003ca:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 80003ce:	2b00      	cmp	r3, #0
 80003d0:	d002      	beq.n	80003d8 <Receive_from_ESP_Task_Func+0x44>
      {
        Error_Handler();
 80003d2:	f001 fbb9 	bl	8001b48 <Error_Handler>
 80003d6:	e7e4      	b.n	80003a2 <Receive_from_ESP_Task_Func+0xe>
      }
      else
      {
        xQueueSend(IN_E_MESP_Send_Queue,block, 100/*block time*/);
 80003d8:	4b06      	ldr	r3, [pc, #24]	; (80003f4 <Receive_from_ESP_Task_Func+0x60>)
 80003da:	6818      	ldr	r0, [r3, #0]
 80003dc:	f107 010c 	add.w	r1, r7, #12
 80003e0:	2300      	movs	r3, #0
 80003e2:	2264      	movs	r2, #100	; 0x64
 80003e4:	f00a f982 	bl	800a6ec <xQueueGenericSend>
    if(xSemaphoreTake(Receive_MESP_Semph,100/*block time*/))
 80003e8:	e7db      	b.n	80003a2 <Receive_from_ESP_Task_Func+0xe>
 80003ea:	bf00      	nop
 80003ec:	20000168 	.word	0x20000168
 80003f0:	20001230 	.word	0x20001230
 80003f4:	2000010c 	.word	0x2000010c

080003f8 <Manage_SD_Task_Func>:
FIL Current_File_Handle_for_Read;
FIL Current_File_Handle_for_Write;
FRESULT fres; // ONLY USED FOR DEBUGGING
// SD TASKS
void Manage_SD_Task_Func(void * pvParameters)
{
 80003f8:	b580      	push	{r7, lr}
 80003fa:	f5ad 7d40 	sub.w	sp, sp, #768	; 0x300
 80003fe:	af00      	add	r7, sp, #0
 8000400:	f507 7340 	add.w	r3, r7, #768	; 0x300
 8000404:	f5a3 733f 	sub.w	r3, r3, #764	; 0x2fc
 8000408:	6018      	str	r0, [r3, #0]
	QueueHandle_t local_Queue = NULL;
 800040a:	2300      	movs	r3, #0
 800040c:	f8c7 32fc 	str.w	r3, [r7, #764]	; 0x2fc

	uint8_t	MNet_SelectNode_localBuffer[5]	= {0};
 8000410:	2300      	movs	r3, #0
 8000412:	f8c7 32f4 	str.w	r3, [r7, #756]	; 0x2f4
 8000416:	2300      	movs	r3, #0
 8000418:	f887 32f8 	strb.w	r3, [r7, #760]	; 0x2f8
	uint8_t	ESP_Record_localBuffer[128] = {0};
 800041c:	2300      	movs	r3, #0
 800041e:	f8c7 3274 	str.w	r3, [r7, #628]	; 0x274
 8000422:	f507 731e 	add.w	r3, r7, #632	; 0x278
 8000426:	227c      	movs	r2, #124	; 0x7c
 8000428:	2100      	movs	r1, #0
 800042a:	4618      	mov	r0, r3
 800042c:	f00c ff16 	bl	800d25c <memset>
	uint8_t	ESP_SelectNode_localBuffer 	= 0;
 8000430:	2300      	movs	r3, #0
 8000432:	f887 3273 	strb.w	r3, [r7, #627]	; 0x273
	uint8_t	MConn_REQUEST_localBuffer[2] = {0};
 8000436:	2300      	movs	r3, #0
 8000438:	f8a7 3270 	strh.w	r3, [r7, #624]	; 0x270
	uint8_t	SD_Receive_MConn_Record_localBuffer[50] = {0};
 800043c:	2300      	movs	r3, #0
 800043e:	f8c7 323c 	str.w	r3, [r7, #572]	; 0x23c
 8000442:	f507 7310 	add.w	r3, r7, #576	; 0x240
 8000446:	222e      	movs	r2, #46	; 0x2e
 8000448:	2100      	movs	r1, #0
 800044a:	4618      	mov	r0, r3
 800044c:	f00c ff06 	bl	800d25c <memset>
	uint8_t	ACK_Buffer = 0;
 8000450:	2300      	movs	r3, #0
 8000452:	f887 323b 	strb.w	r3, [r7, #571]	; 0x23b

	FATFS FatFs; 	//Fatfs handle
	//SD MOUNT
	fres = f_mount(&FatFs, "", 1); //1=mount now
 8000456:	f107 0308 	add.w	r3, r7, #8
 800045a:	2201      	movs	r2, #1
 800045c:	49c8      	ldr	r1, [pc, #800]	; (8000780 <Manage_SD_Task_Func+0x388>)
 800045e:	4618      	mov	r0, r3
 8000460:	f008 fc62 	bl	8008d28 <f_mount>
 8000464:	4603      	mov	r3, r0
 8000466:	461a      	mov	r2, r3
 8000468:	4bc6      	ldr	r3, [pc, #792]	; (8000784 <Manage_SD_Task_Func+0x38c>)
 800046a:	701a      	strb	r2, [r3, #0]


	while(1)
	{

		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_2);
 800046c:	2104      	movs	r1, #4
 800046e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000472:	f002 fa6f 	bl	8002954 <HAL_GPIO_TogglePin>
	// check which queue has received new data.
	local_Queue = xQueueSelectFromSet(MSD_QueueSet, portMAX_DELAY);
 8000476:	4bc4      	ldr	r3, [pc, #784]	; (8000788 <Manage_SD_Task_Func+0x390>)
 8000478:	681b      	ldr	r3, [r3, #0]
 800047a:	f04f 31ff 	mov.w	r1, #4294967295
 800047e:	4618      	mov	r0, r3
 8000480:	f00a febe 	bl	800b200 <xQueueSelectFromSet>
 8000484:	f8c7 02fc 	str.w	r0, [r7, #764]	; 0x2fc
	if (local_Queue == IN_S_Receive_MSD_Queue) //Receive from SD_Receive task
 8000488:	4bc0      	ldr	r3, [pc, #768]	; (800078c <Manage_SD_Task_Func+0x394>)
 800048a:	681b      	ldr	r3, [r3, #0]
 800048c:	f8d7 22fc 	ldr.w	r2, [r7, #764]	; 0x2fc
 8000490:	429a      	cmp	r2, r3
 8000492:	d111      	bne.n	80004b8 <Manage_SD_Task_Func+0xc0>
	{
		// Receive record from SD_Receive task
		xQueueReceive(local_Queue, SD_Receive_MConn_Record_localBuffer, portMAX_DELAY);
 8000494:	f507 730f 	add.w	r3, r7, #572	; 0x23c
 8000498:	f04f 32ff 	mov.w	r2, #4294967295
 800049c:	4619      	mov	r1, r3
 800049e:	f8d7 02fc 	ldr.w	r0, [r7, #764]	; 0x2fc
 80004a2:	f00a fadf 	bl	800aa64 <xQueueReceive>

		// SEND RECORD TO MCONN
		xQueueSend(OUT_S_N_MSD_MConn_Queue,SD_Receive_MConn_Record_localBuffer,0);
 80004a6:	4bba      	ldr	r3, [pc, #744]	; (8000790 <Manage_SD_Task_Func+0x398>)
 80004a8:	6818      	ldr	r0, [r3, #0]
 80004aa:	f507 710f 	add.w	r1, r7, #572	; 0x23c
 80004ae:	2300      	movs	r3, #0
 80004b0:	2200      	movs	r2, #0
 80004b2:	f00a f91b 	bl	800a6ec <xQueueGenericSend>
 80004b6:	e7d9      	b.n	800046c <Manage_SD_Task_Func+0x74>

	}
	else if (local_Queue == OUT_N_S_MConn_MSD_Queue)	 // request to open or close file of request record
 80004b8:	4bb6      	ldr	r3, [pc, #728]	; (8000794 <Manage_SD_Task_Func+0x39c>)
 80004ba:	681b      	ldr	r3, [r3, #0]
 80004bc:	f8d7 22fc 	ldr.w	r2, [r7, #764]	; 0x2fc
 80004c0:	429a      	cmp	r2, r3
 80004c2:	f040 8124 	bne.w	800070e <Manage_SD_Task_Func+0x316>
	{
		xQueueReceive(local_Queue, MConn_REQUEST_localBuffer, portMAX_DELAY);
 80004c6:	f507 731c 	add.w	r3, r7, #624	; 0x270
 80004ca:	f04f 32ff 	mov.w	r2, #4294967295
 80004ce:	4619      	mov	r1, r3
 80004d0:	f8d7 02fc 	ldr.w	r0, [r7, #764]	; 0x2fc
 80004d4:	f00a fac6 	bl	800aa64 <xQueueReceive>

		switch(MConn_REQUEST_localBuffer[0])
 80004d8:	f897 3270 	ldrb.w	r3, [r7, #624]	; 0x270
 80004dc:	2b0e      	cmp	r3, #14
 80004de:	f200 8217 	bhi.w	8000910 <Manage_SD_Task_Func+0x518>
 80004e2:	a201      	add	r2, pc, #4	; (adr r2, 80004e8 <Manage_SD_Task_Func+0xf0>)
 80004e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80004e8:	08000525 	.word	0x08000525
 80004ec:	08000547 	.word	0x08000547
 80004f0:	08000569 	.word	0x08000569
 80004f4:	0800058b 	.word	0x0800058b
 80004f8:	080005ad 	.word	0x080005ad
 80004fc:	08000679 	.word	0x08000679
 8000500:	08000697 	.word	0x08000697
 8000504:	080006b5 	.word	0x080006b5
 8000508:	080006d3 	.word	0x080006d3
 800050c:	080006f1 	.word	0x080006f1
 8000510:	080005cf 	.word	0x080005cf
 8000514:	080005f1 	.word	0x080005f1
 8000518:	08000613 	.word	0x08000613
 800051c:	08000635 	.word	0x08000635
 8000520:	08000657 	.word	0x08000657
		{
			case 0 :fres = f_open(&fil1, "NODE1.txt", FA_READ );
 8000524:	2201      	movs	r2, #1
 8000526:	499c      	ldr	r1, [pc, #624]	; (8000798 <Manage_SD_Task_Func+0x3a0>)
 8000528:	489c      	ldr	r0, [pc, #624]	; (800079c <Manage_SD_Task_Func+0x3a4>)
 800052a:	f008 fc45 	bl	8008db8 <f_open>
 800052e:	4603      	mov	r3, r0
 8000530:	461a      	mov	r2, r3
 8000532:	4b94      	ldr	r3, [pc, #592]	; (8000784 <Manage_SD_Task_Func+0x38c>)
 8000534:	701a      	strb	r2, [r3, #0]
					xSemaphoreGive(IN_S_MNSD_Receive_Semph);
 8000536:	4b9a      	ldr	r3, [pc, #616]	; (80007a0 <Manage_SD_Task_Func+0x3a8>)
 8000538:	6818      	ldr	r0, [r3, #0]
 800053a:	2300      	movs	r3, #0
 800053c:	2200      	movs	r2, #0
 800053e:	2100      	movs	r1, #0
 8000540:	f00a f8d4 	bl	800a6ec <xQueueGenericSend>
					break;
 8000544:	e1e7      	b.n	8000916 <Manage_SD_Task_Func+0x51e>
			case 1:	fres = f_open(&fil2, "NODE2.txt", FA_READ );
 8000546:	2201      	movs	r2, #1
 8000548:	4996      	ldr	r1, [pc, #600]	; (80007a4 <Manage_SD_Task_Func+0x3ac>)
 800054a:	4897      	ldr	r0, [pc, #604]	; (80007a8 <Manage_SD_Task_Func+0x3b0>)
 800054c:	f008 fc34 	bl	8008db8 <f_open>
 8000550:	4603      	mov	r3, r0
 8000552:	461a      	mov	r2, r3
 8000554:	4b8b      	ldr	r3, [pc, #556]	; (8000784 <Manage_SD_Task_Func+0x38c>)
 8000556:	701a      	strb	r2, [r3, #0]
					xSemaphoreGive(IN_S_MNSD_Receive_Semph);
 8000558:	4b91      	ldr	r3, [pc, #580]	; (80007a0 <Manage_SD_Task_Func+0x3a8>)
 800055a:	6818      	ldr	r0, [r3, #0]
 800055c:	2300      	movs	r3, #0
 800055e:	2200      	movs	r2, #0
 8000560:	2100      	movs	r1, #0
 8000562:	f00a f8c3 	bl	800a6ec <xQueueGenericSend>
					break;
 8000566:	e1d6      	b.n	8000916 <Manage_SD_Task_Func+0x51e>
			case 2:	fres = f_open(&fil3, "NODE3.txt", FA_READ );
 8000568:	2201      	movs	r2, #1
 800056a:	4990      	ldr	r1, [pc, #576]	; (80007ac <Manage_SD_Task_Func+0x3b4>)
 800056c:	4890      	ldr	r0, [pc, #576]	; (80007b0 <Manage_SD_Task_Func+0x3b8>)
 800056e:	f008 fc23 	bl	8008db8 <f_open>
 8000572:	4603      	mov	r3, r0
 8000574:	461a      	mov	r2, r3
 8000576:	4b83      	ldr	r3, [pc, #524]	; (8000784 <Manage_SD_Task_Func+0x38c>)
 8000578:	701a      	strb	r2, [r3, #0]
					xSemaphoreGive(IN_S_MNSD_Receive_Semph);
 800057a:	4b89      	ldr	r3, [pc, #548]	; (80007a0 <Manage_SD_Task_Func+0x3a8>)
 800057c:	6818      	ldr	r0, [r3, #0]
 800057e:	2300      	movs	r3, #0
 8000580:	2200      	movs	r2, #0
 8000582:	2100      	movs	r1, #0
 8000584:	f00a f8b2 	bl	800a6ec <xQueueGenericSend>
					break;
 8000588:	e1c5      	b.n	8000916 <Manage_SD_Task_Func+0x51e>
			case 3:	fres = f_open(&fil4, "NODE4.txt", FA_READ );
 800058a:	2201      	movs	r2, #1
 800058c:	4989      	ldr	r1, [pc, #548]	; (80007b4 <Manage_SD_Task_Func+0x3bc>)
 800058e:	488a      	ldr	r0, [pc, #552]	; (80007b8 <Manage_SD_Task_Func+0x3c0>)
 8000590:	f008 fc12 	bl	8008db8 <f_open>
 8000594:	4603      	mov	r3, r0
 8000596:	461a      	mov	r2, r3
 8000598:	4b7a      	ldr	r3, [pc, #488]	; (8000784 <Manage_SD_Task_Func+0x38c>)
 800059a:	701a      	strb	r2, [r3, #0]
					xSemaphoreGive(IN_S_MNSD_Receive_Semph);
 800059c:	4b80      	ldr	r3, [pc, #512]	; (80007a0 <Manage_SD_Task_Func+0x3a8>)
 800059e:	6818      	ldr	r0, [r3, #0]
 80005a0:	2300      	movs	r3, #0
 80005a2:	2200      	movs	r2, #0
 80005a4:	2100      	movs	r1, #0
 80005a6:	f00a f8a1 	bl	800a6ec <xQueueGenericSend>
					break;
 80005aa:	e1b4      	b.n	8000916 <Manage_SD_Task_Func+0x51e>
			case 4:	fres = f_open(&fil5, "NODE5.txt", FA_READ );
 80005ac:	2201      	movs	r2, #1
 80005ae:	4983      	ldr	r1, [pc, #524]	; (80007bc <Manage_SD_Task_Func+0x3c4>)
 80005b0:	4883      	ldr	r0, [pc, #524]	; (80007c0 <Manage_SD_Task_Func+0x3c8>)
 80005b2:	f008 fc01 	bl	8008db8 <f_open>
 80005b6:	4603      	mov	r3, r0
 80005b8:	461a      	mov	r2, r3
 80005ba:	4b72      	ldr	r3, [pc, #456]	; (8000784 <Manage_SD_Task_Func+0x38c>)
 80005bc:	701a      	strb	r2, [r3, #0]
					xSemaphoreGive(IN_S_MNSD_Receive_Semph);
 80005be:	4b78      	ldr	r3, [pc, #480]	; (80007a0 <Manage_SD_Task_Func+0x3a8>)
 80005c0:	6818      	ldr	r0, [r3, #0]
 80005c2:	2300      	movs	r3, #0
 80005c4:	2200      	movs	r2, #0
 80005c6:	2100      	movs	r1, #0
 80005c8:	f00a f890 	bl	800a6ec <xQueueGenericSend>
					break;
 80005cc:	e1a3      	b.n	8000916 <Manage_SD_Task_Func+0x51e>

			case 10: Current_File_Handle_for_Read = fil1;
 80005ce:	4a7d      	ldr	r2, [pc, #500]	; (80007c4 <Manage_SD_Task_Func+0x3cc>)
 80005d0:	4b72      	ldr	r3, [pc, #456]	; (800079c <Manage_SD_Task_Func+0x3a4>)
 80005d2:	4610      	mov	r0, r2
 80005d4:	4619      	mov	r1, r3
 80005d6:	f44f 730b 	mov.w	r3, #556	; 0x22c
 80005da:	461a      	mov	r2, r3
 80005dc:	f00c fed8 	bl	800d390 <memcpy>
					 xSemaphoreGive(IN_S_MNSD_Receive_Semph);// give the semaphore that trigger the Manage SD task
 80005e0:	4b6f      	ldr	r3, [pc, #444]	; (80007a0 <Manage_SD_Task_Func+0x3a8>)
 80005e2:	6818      	ldr	r0, [r3, #0]
 80005e4:	2300      	movs	r3, #0
 80005e6:	2200      	movs	r2, #0
 80005e8:	2100      	movs	r1, #0
 80005ea:	f00a f87f 	bl	800a6ec <xQueueGenericSend>
					 break;
 80005ee:	e192      	b.n	8000916 <Manage_SD_Task_Func+0x51e>
			case 11: Current_File_Handle_for_Read = fil2;
 80005f0:	4a74      	ldr	r2, [pc, #464]	; (80007c4 <Manage_SD_Task_Func+0x3cc>)
 80005f2:	4b6d      	ldr	r3, [pc, #436]	; (80007a8 <Manage_SD_Task_Func+0x3b0>)
 80005f4:	4610      	mov	r0, r2
 80005f6:	4619      	mov	r1, r3
 80005f8:	f44f 730b 	mov.w	r3, #556	; 0x22c
 80005fc:	461a      	mov	r2, r3
 80005fe:	f00c fec7 	bl	800d390 <memcpy>
					 xSemaphoreGive(IN_S_MNSD_Receive_Semph);// give the semaphore that trigger the Manage SD task
 8000602:	4b67      	ldr	r3, [pc, #412]	; (80007a0 <Manage_SD_Task_Func+0x3a8>)
 8000604:	6818      	ldr	r0, [r3, #0]
 8000606:	2300      	movs	r3, #0
 8000608:	2200      	movs	r2, #0
 800060a:	2100      	movs	r1, #0
 800060c:	f00a f86e 	bl	800a6ec <xQueueGenericSend>
					 break;
 8000610:	e181      	b.n	8000916 <Manage_SD_Task_Func+0x51e>
			case 12: Current_File_Handle_for_Read = fil3;
 8000612:	4a6c      	ldr	r2, [pc, #432]	; (80007c4 <Manage_SD_Task_Func+0x3cc>)
 8000614:	4b66      	ldr	r3, [pc, #408]	; (80007b0 <Manage_SD_Task_Func+0x3b8>)
 8000616:	4610      	mov	r0, r2
 8000618:	4619      	mov	r1, r3
 800061a:	f44f 730b 	mov.w	r3, #556	; 0x22c
 800061e:	461a      	mov	r2, r3
 8000620:	f00c feb6 	bl	800d390 <memcpy>
					 xSemaphoreGive(IN_S_MNSD_Receive_Semph);// give the semaphore that trigger the Manage SD task
 8000624:	4b5e      	ldr	r3, [pc, #376]	; (80007a0 <Manage_SD_Task_Func+0x3a8>)
 8000626:	6818      	ldr	r0, [r3, #0]
 8000628:	2300      	movs	r3, #0
 800062a:	2200      	movs	r2, #0
 800062c:	2100      	movs	r1, #0
 800062e:	f00a f85d 	bl	800a6ec <xQueueGenericSend>
					 break;
 8000632:	e170      	b.n	8000916 <Manage_SD_Task_Func+0x51e>
			case 13: Current_File_Handle_for_Read = fil4;
 8000634:	4a63      	ldr	r2, [pc, #396]	; (80007c4 <Manage_SD_Task_Func+0x3cc>)
 8000636:	4b60      	ldr	r3, [pc, #384]	; (80007b8 <Manage_SD_Task_Func+0x3c0>)
 8000638:	4610      	mov	r0, r2
 800063a:	4619      	mov	r1, r3
 800063c:	f44f 730b 	mov.w	r3, #556	; 0x22c
 8000640:	461a      	mov	r2, r3
 8000642:	f00c fea5 	bl	800d390 <memcpy>
					 xSemaphoreGive(IN_S_MNSD_Receive_Semph);// give the semaphore that trigger the Manage SD task
 8000646:	4b56      	ldr	r3, [pc, #344]	; (80007a0 <Manage_SD_Task_Func+0x3a8>)
 8000648:	6818      	ldr	r0, [r3, #0]
 800064a:	2300      	movs	r3, #0
 800064c:	2200      	movs	r2, #0
 800064e:	2100      	movs	r1, #0
 8000650:	f00a f84c 	bl	800a6ec <xQueueGenericSend>
					 break;
 8000654:	e15f      	b.n	8000916 <Manage_SD_Task_Func+0x51e>
			case 14: Current_File_Handle_for_Read = fil5;
 8000656:	4a5b      	ldr	r2, [pc, #364]	; (80007c4 <Manage_SD_Task_Func+0x3cc>)
 8000658:	4b59      	ldr	r3, [pc, #356]	; (80007c0 <Manage_SD_Task_Func+0x3c8>)
 800065a:	4610      	mov	r0, r2
 800065c:	4619      	mov	r1, r3
 800065e:	f44f 730b 	mov.w	r3, #556	; 0x22c
 8000662:	461a      	mov	r2, r3
 8000664:	f00c fe94 	bl	800d390 <memcpy>
					 xSemaphoreGive(IN_S_MNSD_Receive_Semph);// give the semaphore that trigger the Manage SD task
 8000668:	4b4d      	ldr	r3, [pc, #308]	; (80007a0 <Manage_SD_Task_Func+0x3a8>)
 800066a:	6818      	ldr	r0, [r3, #0]
 800066c:	2300      	movs	r3, #0
 800066e:	2200      	movs	r2, #0
 8000670:	2100      	movs	r1, #0
 8000672:	f00a f83b 	bl	800a6ec <xQueueGenericSend>
					 break;
 8000676:	e14e      	b.n	8000916 <Manage_SD_Task_Func+0x51e>

			case 5:	f_close(&fil1);
 8000678:	4848      	ldr	r0, [pc, #288]	; (800079c <Manage_SD_Task_Func+0x3a4>)
 800067a:	f009 f9e8 	bl	8009a4e <f_close>
					MNet_SelectNode_localBuffer[0] = 0;
 800067e:	2300      	movs	r3, #0
 8000680:	f887 32f4 	strb.w	r3, [r7, #756]	; 0x2f4
					xQueueSend(OUT_S_N_MSD_MNet_Queue ,MNet_SelectNode_localBuffer,0);
 8000684:	4b50      	ldr	r3, [pc, #320]	; (80007c8 <Manage_SD_Task_Func+0x3d0>)
 8000686:	6818      	ldr	r0, [r3, #0]
 8000688:	f507 713d 	add.w	r1, r7, #756	; 0x2f4
 800068c:	2300      	movs	r3, #0
 800068e:	2200      	movs	r2, #0
 8000690:	f00a f82c 	bl	800a6ec <xQueueGenericSend>
					break;
 8000694:	e13f      	b.n	8000916 <Manage_SD_Task_Func+0x51e>
			case 6:	f_close(&fil2);
 8000696:	4844      	ldr	r0, [pc, #272]	; (80007a8 <Manage_SD_Task_Func+0x3b0>)
 8000698:	f009 f9d9 	bl	8009a4e <f_close>
					MNet_SelectNode_localBuffer[1] = 0;
 800069c:	2300      	movs	r3, #0
 800069e:	f887 32f5 	strb.w	r3, [r7, #757]	; 0x2f5
					xQueueSend(OUT_S_N_MSD_MNet_Queue ,MNet_SelectNode_localBuffer,0);
 80006a2:	4b49      	ldr	r3, [pc, #292]	; (80007c8 <Manage_SD_Task_Func+0x3d0>)
 80006a4:	6818      	ldr	r0, [r3, #0]
 80006a6:	f507 713d 	add.w	r1, r7, #756	; 0x2f4
 80006aa:	2300      	movs	r3, #0
 80006ac:	2200      	movs	r2, #0
 80006ae:	f00a f81d 	bl	800a6ec <xQueueGenericSend>
					break;
 80006b2:	e130      	b.n	8000916 <Manage_SD_Task_Func+0x51e>
			case 7:	f_close(&fil3);
 80006b4:	483e      	ldr	r0, [pc, #248]	; (80007b0 <Manage_SD_Task_Func+0x3b8>)
 80006b6:	f009 f9ca 	bl	8009a4e <f_close>
					MNet_SelectNode_localBuffer[2] = 0;
 80006ba:	2300      	movs	r3, #0
 80006bc:	f887 32f6 	strb.w	r3, [r7, #758]	; 0x2f6
					xQueueSend(OUT_S_N_MSD_MNet_Queue ,MNet_SelectNode_localBuffer,0);
 80006c0:	4b41      	ldr	r3, [pc, #260]	; (80007c8 <Manage_SD_Task_Func+0x3d0>)
 80006c2:	6818      	ldr	r0, [r3, #0]
 80006c4:	f507 713d 	add.w	r1, r7, #756	; 0x2f4
 80006c8:	2300      	movs	r3, #0
 80006ca:	2200      	movs	r2, #0
 80006cc:	f00a f80e 	bl	800a6ec <xQueueGenericSend>
					break;
 80006d0:	e121      	b.n	8000916 <Manage_SD_Task_Func+0x51e>
			case 8:	f_close(&fil4);
 80006d2:	4839      	ldr	r0, [pc, #228]	; (80007b8 <Manage_SD_Task_Func+0x3c0>)
 80006d4:	f009 f9bb 	bl	8009a4e <f_close>
					MNet_SelectNode_localBuffer[3] = 0;
 80006d8:	2300      	movs	r3, #0
 80006da:	f887 32f7 	strb.w	r3, [r7, #759]	; 0x2f7
					xQueueSend(OUT_S_N_MSD_MNet_Queue ,MNet_SelectNode_localBuffer,0);
 80006de:	4b3a      	ldr	r3, [pc, #232]	; (80007c8 <Manage_SD_Task_Func+0x3d0>)
 80006e0:	6818      	ldr	r0, [r3, #0]
 80006e2:	f507 713d 	add.w	r1, r7, #756	; 0x2f4
 80006e6:	2300      	movs	r3, #0
 80006e8:	2200      	movs	r2, #0
 80006ea:	f009 ffff 	bl	800a6ec <xQueueGenericSend>
					break;
 80006ee:	e112      	b.n	8000916 <Manage_SD_Task_Func+0x51e>
			case 9:	f_close(&fil5);
 80006f0:	4833      	ldr	r0, [pc, #204]	; (80007c0 <Manage_SD_Task_Func+0x3c8>)
 80006f2:	f009 f9ac 	bl	8009a4e <f_close>
					MNet_SelectNode_localBuffer[4] = 0;
 80006f6:	2300      	movs	r3, #0
 80006f8:	f887 32f8 	strb.w	r3, [r7, #760]	; 0x2f8
					xQueueSend(OUT_S_N_MSD_MNet_Queue ,MNet_SelectNode_localBuffer,0);
 80006fc:	4b32      	ldr	r3, [pc, #200]	; (80007c8 <Manage_SD_Task_Func+0x3d0>)
 80006fe:	6818      	ldr	r0, [r3, #0]
 8000700:	f507 713d 	add.w	r1, r7, #756	; 0x2f4
 8000704:	2300      	movs	r3, #0
 8000706:	2200      	movs	r2, #0
 8000708:	f009 fff0 	bl	800a6ec <xQueueGenericSend>
					break;
 800070c:	e103      	b.n	8000916 <Manage_SD_Task_Func+0x51e>

				default: break;
		}
	}
	else if (local_Queue == S_Sec_ESP_TO_MSD_Queue)   // esp select the node
 800070e:	4b2f      	ldr	r3, [pc, #188]	; (80007cc <Manage_SD_Task_Func+0x3d4>)
 8000710:	681b      	ldr	r3, [r3, #0]
 8000712:	f8d7 22fc 	ldr.w	r2, [r7, #764]	; 0x2fc
 8000716:	429a      	cmp	r2, r3
 8000718:	f040 80b4 	bne.w	8000884 <Manage_SD_Task_Func+0x48c>
	{
			//recieve the selected node number
			xQueueReceive(local_Queue, &ESP_SelectNode_localBuffer, portMAX_DELAY);
 800071c:	f207 2373 	addw	r3, r7, #627	; 0x273
 8000720:	f04f 32ff 	mov.w	r2, #4294967295
 8000724:	4619      	mov	r1, r3
 8000726:	f8d7 02fc 	ldr.w	r0, [r7, #764]	; 0x2fc
 800072a:	f00a f99b 	bl	800aa64 <xQueueReceive>
			switch (ESP_SelectNode_localBuffer)
 800072e:	f897 3273 	ldrb.w	r3, [r7, #627]	; 0x273
 8000732:	3b01      	subs	r3, #1
 8000734:	2b04      	cmp	r3, #4
 8000736:	f200 80ed 	bhi.w	8000914 <Manage_SD_Task_Func+0x51c>
 800073a:	a201      	add	r2, pc, #4	; (adr r2, 8000740 <Manage_SD_Task_Func+0x348>)
 800073c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000740:	08000755 	.word	0x08000755
 8000744:	080007d5 	.word	0x080007d5
 8000748:	08000801 	.word	0x08000801
 800074c:	0800082d 	.word	0x0800082d
 8000750:	08000859 	.word	0x08000859
			{
			  case 1: 	fres = f_open(&fil1, "NODE1.txt", FA_WRITE | FA_CREATE_ALWAYS);
 8000754:	220a      	movs	r2, #10
 8000756:	4910      	ldr	r1, [pc, #64]	; (8000798 <Manage_SD_Task_Func+0x3a0>)
 8000758:	4810      	ldr	r0, [pc, #64]	; (800079c <Manage_SD_Task_Func+0x3a4>)
 800075a:	f008 fb2d 	bl	8008db8 <f_open>
 800075e:	4603      	mov	r3, r0
 8000760:	461a      	mov	r2, r3
 8000762:	4b08      	ldr	r3, [pc, #32]	; (8000784 <Manage_SD_Task_Func+0x38c>)
 8000764:	701a      	strb	r2, [r3, #0]
							Current_File_Handle_for_Write = fil1;
 8000766:	4a1a      	ldr	r2, [pc, #104]	; (80007d0 <Manage_SD_Task_Func+0x3d8>)
 8000768:	4b0c      	ldr	r3, [pc, #48]	; (800079c <Manage_SD_Task_Func+0x3a4>)
 800076a:	4610      	mov	r0, r2
 800076c:	4619      	mov	r1, r3
 800076e:	f44f 730b 	mov.w	r3, #556	; 0x22c
 8000772:	461a      	mov	r2, r3
 8000774:	f00c fe0c 	bl	800d390 <memcpy>
							MNet_SelectNode_localBuffer[0] = 1;
 8000778:	2301      	movs	r3, #1
 800077a:	f887 32f4 	strb.w	r3, [r7, #756]	; 0x2f4
							break;
 800077e:	e0ca      	b.n	8000916 <Manage_SD_Task_Func+0x51e>
 8000780:	0800d474 	.word	0x0800d474
 8000784:	200010b4 	.word	0x200010b4
 8000788:	20000154 	.word	0x20000154
 800078c:	20000118 	.word	0x20000118
 8000790:	200000fc 	.word	0x200000fc
 8000794:	20000100 	.word	0x20000100
 8000798:	0800d478 	.word	0x0800d478
 800079c:	20000180 	.word	0x20000180
 80007a0:	2000016c 	.word	0x2000016c
 80007a4:	0800d484 	.word	0x0800d484
 80007a8:	200003ac 	.word	0x200003ac
 80007ac:	0800d490 	.word	0x0800d490
 80007b0:	200005d8 	.word	0x200005d8
 80007b4:	0800d49c 	.word	0x0800d49c
 80007b8:	20000804 	.word	0x20000804
 80007bc:	0800d4a8 	.word	0x0800d4a8
 80007c0:	20000a30 	.word	0x20000a30
 80007c4:	20000c5c 	.word	0x20000c5c
 80007c8:	200000f8 	.word	0x200000f8
 80007cc:	200000ec 	.word	0x200000ec
 80007d0:	20000e88 	.word	0x20000e88
			  case 2: 	fres = f_open(&fil2, "NODE2.txt", FA_WRITE | FA_CREATE_ALWAYS);
 80007d4:	220a      	movs	r2, #10
 80007d6:	4950      	ldr	r1, [pc, #320]	; (8000918 <Manage_SD_Task_Func+0x520>)
 80007d8:	4850      	ldr	r0, [pc, #320]	; (800091c <Manage_SD_Task_Func+0x524>)
 80007da:	f008 faed 	bl	8008db8 <f_open>
 80007de:	4603      	mov	r3, r0
 80007e0:	461a      	mov	r2, r3
 80007e2:	4b4f      	ldr	r3, [pc, #316]	; (8000920 <Manage_SD_Task_Func+0x528>)
 80007e4:	701a      	strb	r2, [r3, #0]
							Current_File_Handle_for_Write = fil2;
 80007e6:	4a4f      	ldr	r2, [pc, #316]	; (8000924 <Manage_SD_Task_Func+0x52c>)
 80007e8:	4b4c      	ldr	r3, [pc, #304]	; (800091c <Manage_SD_Task_Func+0x524>)
 80007ea:	4610      	mov	r0, r2
 80007ec:	4619      	mov	r1, r3
 80007ee:	f44f 730b 	mov.w	r3, #556	; 0x22c
 80007f2:	461a      	mov	r2, r3
 80007f4:	f00c fdcc 	bl	800d390 <memcpy>
							MNet_SelectNode_localBuffer[1] = 1;
 80007f8:	2301      	movs	r3, #1
 80007fa:	f887 32f5 	strb.w	r3, [r7, #757]	; 0x2f5
							break;
 80007fe:	e08a      	b.n	8000916 <Manage_SD_Task_Func+0x51e>
			  case 3: 	fres = f_open(&fil3, "NODE3.txt", FA_WRITE | FA_CREATE_ALWAYS);
 8000800:	220a      	movs	r2, #10
 8000802:	4949      	ldr	r1, [pc, #292]	; (8000928 <Manage_SD_Task_Func+0x530>)
 8000804:	4849      	ldr	r0, [pc, #292]	; (800092c <Manage_SD_Task_Func+0x534>)
 8000806:	f008 fad7 	bl	8008db8 <f_open>
 800080a:	4603      	mov	r3, r0
 800080c:	461a      	mov	r2, r3
 800080e:	4b44      	ldr	r3, [pc, #272]	; (8000920 <Manage_SD_Task_Func+0x528>)
 8000810:	701a      	strb	r2, [r3, #0]
							Current_File_Handle_for_Write = fil3;
 8000812:	4a44      	ldr	r2, [pc, #272]	; (8000924 <Manage_SD_Task_Func+0x52c>)
 8000814:	4b45      	ldr	r3, [pc, #276]	; (800092c <Manage_SD_Task_Func+0x534>)
 8000816:	4610      	mov	r0, r2
 8000818:	4619      	mov	r1, r3
 800081a:	f44f 730b 	mov.w	r3, #556	; 0x22c
 800081e:	461a      	mov	r2, r3
 8000820:	f00c fdb6 	bl	800d390 <memcpy>
							MNet_SelectNode_localBuffer[2] = 1;
 8000824:	2301      	movs	r3, #1
 8000826:	f887 32f6 	strb.w	r3, [r7, #758]	; 0x2f6
							break;
 800082a:	e074      	b.n	8000916 <Manage_SD_Task_Func+0x51e>
			  case 4: 	fres = f_open(&fil4, "NODE4.txt", FA_WRITE | FA_CREATE_ALWAYS);
 800082c:	220a      	movs	r2, #10
 800082e:	4940      	ldr	r1, [pc, #256]	; (8000930 <Manage_SD_Task_Func+0x538>)
 8000830:	4840      	ldr	r0, [pc, #256]	; (8000934 <Manage_SD_Task_Func+0x53c>)
 8000832:	f008 fac1 	bl	8008db8 <f_open>
 8000836:	4603      	mov	r3, r0
 8000838:	461a      	mov	r2, r3
 800083a:	4b39      	ldr	r3, [pc, #228]	; (8000920 <Manage_SD_Task_Func+0x528>)
 800083c:	701a      	strb	r2, [r3, #0]
							Current_File_Handle_for_Write = fil4;
 800083e:	4a39      	ldr	r2, [pc, #228]	; (8000924 <Manage_SD_Task_Func+0x52c>)
 8000840:	4b3c      	ldr	r3, [pc, #240]	; (8000934 <Manage_SD_Task_Func+0x53c>)
 8000842:	4610      	mov	r0, r2
 8000844:	4619      	mov	r1, r3
 8000846:	f44f 730b 	mov.w	r3, #556	; 0x22c
 800084a:	461a      	mov	r2, r3
 800084c:	f00c fda0 	bl	800d390 <memcpy>
							MNet_SelectNode_localBuffer[3] = 1;
 8000850:	2301      	movs	r3, #1
 8000852:	f887 32f7 	strb.w	r3, [r7, #759]	; 0x2f7
							break;
 8000856:	e05e      	b.n	8000916 <Manage_SD_Task_Func+0x51e>
			  case 5: 	fres = f_open(&fil5, "NODE5.txt", FA_WRITE | FA_CREATE_ALWAYS);
 8000858:	220a      	movs	r2, #10
 800085a:	4937      	ldr	r1, [pc, #220]	; (8000938 <Manage_SD_Task_Func+0x540>)
 800085c:	4837      	ldr	r0, [pc, #220]	; (800093c <Manage_SD_Task_Func+0x544>)
 800085e:	f008 faab 	bl	8008db8 <f_open>
 8000862:	4603      	mov	r3, r0
 8000864:	461a      	mov	r2, r3
 8000866:	4b2e      	ldr	r3, [pc, #184]	; (8000920 <Manage_SD_Task_Func+0x528>)
 8000868:	701a      	strb	r2, [r3, #0]
							Current_File_Handle_for_Write = fil5;
 800086a:	4a2e      	ldr	r2, [pc, #184]	; (8000924 <Manage_SD_Task_Func+0x52c>)
 800086c:	4b33      	ldr	r3, [pc, #204]	; (800093c <Manage_SD_Task_Func+0x544>)
 800086e:	4610      	mov	r0, r2
 8000870:	4619      	mov	r1, r3
 8000872:	f44f 730b 	mov.w	r3, #556	; 0x22c
 8000876:	461a      	mov	r2, r3
 8000878:	f00c fd8a 	bl	800d390 <memcpy>
							MNet_SelectNode_localBuffer[4] = 1;
 800087c:	2301      	movs	r3, #1
 800087e:	f887 32f8 	strb.w	r3, [r7, #760]	; 0x2f8
							break;
 8000882:	e048      	b.n	8000916 <Manage_SD_Task_Func+0x51e>
				default:  break;
			}
	}
	else if (local_Queue == OUT_E_S_MESP_MSD_Queue )		 // un completed yet
 8000884:	4b2e      	ldr	r3, [pc, #184]	; (8000940 <Manage_SD_Task_Func+0x548>)
 8000886:	681b      	ldr	r3, [r3, #0]
 8000888:	f8d7 22fc 	ldr.w	r2, [r7, #764]	; 0x2fc
 800088c:	429a      	cmp	r2, r3
 800088e:	d111      	bne.n	80008b4 <Manage_SD_Task_Func+0x4bc>
	{
			// receive the block of records from esp_manage
			xQueueReceive(local_Queue, ESP_Record_localBuffer, portMAX_DELAY);
 8000890:	f507 731d 	add.w	r3, r7, #628	; 0x274
 8000894:	f04f 32ff 	mov.w	r2, #4294967295
 8000898:	4619      	mov	r1, r3
 800089a:	f8d7 02fc 	ldr.w	r0, [r7, #764]	; 0x2fc
 800089e:	f00a f8e1 	bl	800aa64 <xQueueReceive>

			// send data from buffer to send to sd task
			xQueueSend(IN_S_MSD_Send_Queue,ESP_Record_localBuffer,0);
 80008a2:	4b28      	ldr	r3, [pc, #160]	; (8000944 <Manage_SD_Task_Func+0x54c>)
 80008a4:	6818      	ldr	r0, [r3, #0]
 80008a6:	f507 711d 	add.w	r1, r7, #628	; 0x274
 80008aa:	2300      	movs	r3, #0
 80008ac:	2200      	movs	r2, #0
 80008ae:	f009 ff1d 	bl	800a6ec <xQueueGenericSend>
 80008b2:	e5db      	b.n	800046c <Manage_SD_Task_Func+0x74>
	}
	else if (local_Queue == IN_S_Send_MSD_Queue)
 80008b4:	4b24      	ldr	r3, [pc, #144]	; (8000948 <Manage_SD_Task_Func+0x550>)
 80008b6:	681b      	ldr	r3, [r3, #0]
 80008b8:	f8d7 22fc 	ldr.w	r2, [r7, #764]	; 0x2fc
 80008bc:	429a      	cmp	r2, r3
 80008be:	f47f add5 	bne.w	800046c <Manage_SD_Task_Func+0x74>
	{
		// recieve A or C
		xQueueReceive(local_Queue, &ACK_Buffer, portMAX_DELAY);
 80008c2:	f207 233b 	addw	r3, r7, #571	; 0x23b
 80008c6:	f04f 32ff 	mov.w	r2, #4294967295
 80008ca:	4619      	mov	r1, r3
 80008cc:	f8d7 02fc 	ldr.w	r0, [r7, #764]	; 0x2fc
 80008d0:	f00a f8c8 	bl	800aa64 <xQueueReceive>
		if (ACK_Buffer == 'A')
 80008d4:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
 80008d8:	2b41      	cmp	r3, #65	; 0x41
 80008da:	d108      	bne.n	80008ee <Manage_SD_Task_Func+0x4f6>
		{
			xQueueSend(OUT_S_E_MSD_MESP_Queue,&ACK_Buffer,0);
 80008dc:	4b1b      	ldr	r3, [pc, #108]	; (800094c <Manage_SD_Task_Func+0x554>)
 80008de:	6818      	ldr	r0, [r3, #0]
 80008e0:	f207 213b 	addw	r1, r7, #571	; 0x23b
 80008e4:	2300      	movs	r3, #0
 80008e6:	2200      	movs	r2, #0
 80008e8:	f009 ff00 	bl	800a6ec <xQueueGenericSend>
 80008ec:	e5be      	b.n	800046c <Manage_SD_Task_Func+0x74>
		}
		else if (ACK_Buffer == 'C')
 80008ee:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
 80008f2:	2b43      	cmp	r3, #67	; 0x43
 80008f4:	f47f adba 	bne.w	800046c <Manage_SD_Task_Func+0x74>
		{
			f_close(&Current_File_Handle_for_Write);
 80008f8:	480a      	ldr	r0, [pc, #40]	; (8000924 <Manage_SD_Task_Func+0x52c>)
 80008fa:	f009 f8a8 	bl	8009a4e <f_close>
			xQueueSend(OUT_S_N_MSD_MNet_Queue,MNet_SelectNode_localBuffer,0);
 80008fe:	4b14      	ldr	r3, [pc, #80]	; (8000950 <Manage_SD_Task_Func+0x558>)
 8000900:	6818      	ldr	r0, [r3, #0]
 8000902:	f507 713d 	add.w	r1, r7, #756	; 0x2f4
 8000906:	2300      	movs	r3, #0
 8000908:	2200      	movs	r2, #0
 800090a:	f009 feef 	bl	800a6ec <xQueueGenericSend>
 800090e:	e5ad      	b.n	800046c <Manage_SD_Task_Func+0x74>
				default: break;
 8000910:	bf00      	nop
 8000912:	e5ab      	b.n	800046c <Manage_SD_Task_Func+0x74>
				default:  break;
 8000914:	bf00      	nop
		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_2);
 8000916:	e5a9      	b.n	800046c <Manage_SD_Task_Func+0x74>
 8000918:	0800d484 	.word	0x0800d484
 800091c:	200003ac 	.word	0x200003ac
 8000920:	200010b4 	.word	0x200010b4
 8000924:	20000e88 	.word	0x20000e88
 8000928:	0800d490 	.word	0x0800d490
 800092c:	200005d8 	.word	0x200005d8
 8000930:	0800d49c 	.word	0x0800d49c
 8000934:	20000804 	.word	0x20000804
 8000938:	0800d4a8 	.word	0x0800d4a8
 800093c:	20000a30 	.word	0x20000a30
 8000940:	200000f0 	.word	0x200000f0
 8000944:	2000011c 	.word	0x2000011c
 8000948:	20000120 	.word	0x20000120
 800094c:	200000f4 	.word	0x200000f4
 8000950:	200000f8 	.word	0x200000f8

08000954 <Send_to_SD_Task_Func>:
	}
}


void Send_to_SD_Task_Func(void * pvParameters)   //write
{
 8000954:	b580      	push	{r7, lr}
 8000956:	b0a6      	sub	sp, #152	; 0x98
 8000958:	af00      	add	r7, sp, #0
 800095a:	6078      	str	r0, [r7, #4]
	BYTE Record_localWriteBuffer[128];
	uint8_t dataLength = 0;
 800095c:	2300      	movs	r3, #0
 800095e:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
	uint8_t ACK;
    UINT bytesWrote;
	while(1)
	{
		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_10);
 8000962:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000966:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800096a:	f001 fff3 	bl	8002954 <HAL_GPIO_TogglePin>

		// receive the data from sd_manage into the local buffer.
		xQueueReceive(IN_S_MSD_Send_Queue, Record_localWriteBuffer, portMAX_DELAY);
 800096e:	4b1d      	ldr	r3, [pc, #116]	; (80009e4 <Send_to_SD_Task_Func+0x90>)
 8000970:	681b      	ldr	r3, [r3, #0]
 8000972:	f107 0114 	add.w	r1, r7, #20
 8000976:	f04f 32ff 	mov.w	r2, #4294967295
 800097a:	4618      	mov	r0, r3
 800097c:	f00a f872 	bl	800aa64 <xQueueReceive>

		// getting length of data
		dataLength = strlen((const char *)Record_localWriteBuffer);
 8000980:	f107 0314 	add.w	r3, r7, #20
 8000984:	4618      	mov	r0, r3
 8000986:	f7ff fc2b 	bl	80001e0 <strlen>
 800098a:	4603      	mov	r3, r0
 800098c:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97

		// send the data from local buffer to SD card
		fres = f_write(&Current_File_Handle_for_Write, Record_localWriteBuffer, dataLength , &bytesWrote);
 8000990:	f897 2097 	ldrb.w	r2, [r7, #151]	; 0x97
 8000994:	f107 030c 	add.w	r3, r7, #12
 8000998:	f107 0114 	add.w	r1, r7, #20
 800099c:	4812      	ldr	r0, [pc, #72]	; (80009e8 <Send_to_SD_Task_Func+0x94>)
 800099e:	f008 fdef 	bl	8009580 <f_write>
 80009a2:	4603      	mov	r3, r0
 80009a4:	461a      	mov	r2, r3
 80009a6:	4b11      	ldr	r3, [pc, #68]	; (80009ec <Send_to_SD_Task_Func+0x98>)
 80009a8:	701a      	strb	r2, [r3, #0]


		if (bytesWrote == 128)
 80009aa:	68fb      	ldr	r3, [r7, #12]
 80009ac:	2b80      	cmp	r3, #128	; 0x80
 80009ae:	d10a      	bne.n	80009c6 <Send_to_SD_Task_Func+0x72>
		{
			ACK = 'A';
 80009b0:	2341      	movs	r3, #65	; 0x41
 80009b2:	74fb      	strb	r3, [r7, #19]
			xQueueSend(IN_S_Send_MSD_Queue,&ACK,0);
 80009b4:	4b0e      	ldr	r3, [pc, #56]	; (80009f0 <Send_to_SD_Task_Func+0x9c>)
 80009b6:	6818      	ldr	r0, [r3, #0]
 80009b8:	f107 0113 	add.w	r1, r7, #19
 80009bc:	2300      	movs	r3, #0
 80009be:	2200      	movs	r2, #0
 80009c0:	f009 fe94 	bl	800a6ec <xQueueGenericSend>
 80009c4:	e7cd      	b.n	8000962 <Send_to_SD_Task_Func+0xe>
		}
		else if (bytesWrote < 128)
 80009c6:	68fb      	ldr	r3, [r7, #12]
 80009c8:	2b7f      	cmp	r3, #127	; 0x7f
 80009ca:	d8ca      	bhi.n	8000962 <Send_to_SD_Task_Func+0xe>
		{
			ACK = 'C';
 80009cc:	2343      	movs	r3, #67	; 0x43
 80009ce:	74fb      	strb	r3, [r7, #19]
			xQueueSend(IN_S_Send_MSD_Queue,&ACK,0);
 80009d0:	4b07      	ldr	r3, [pc, #28]	; (80009f0 <Send_to_SD_Task_Func+0x9c>)
 80009d2:	6818      	ldr	r0, [r3, #0]
 80009d4:	f107 0113 	add.w	r1, r7, #19
 80009d8:	2300      	movs	r3, #0
 80009da:	2200      	movs	r2, #0
 80009dc:	f009 fe86 	bl	800a6ec <xQueueGenericSend>
		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_10);
 80009e0:	e7bf      	b.n	8000962 <Send_to_SD_Task_Func+0xe>
 80009e2:	bf00      	nop
 80009e4:	2000011c 	.word	0x2000011c
 80009e8:	20000e88 	.word	0x20000e88
 80009ec:	200010b4 	.word	0x200010b4
 80009f0:	20000120 	.word	0x20000120

080009f4 <Receive_from_SD_Task_Func>:
		}
	}
}

void Receive_from_SD_Task_Func(void * pvParameters)   //read
{
 80009f4:	b580      	push	{r7, lr}
 80009f6:	b0a0      	sub	sp, #128	; 0x80
 80009f8:	af00      	add	r7, sp, #0
 80009fa:	6078      	str	r0, [r7, #4]
  UINT bytesRead = 0;
 80009fc:	2300      	movs	r3, #0
 80009fe:	673b      	str	r3, [r7, #112]	; 0x70

	while(1)
	{
		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_3);
 8000a00:	2108      	movs	r1, #8
 8000a02:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a06:	f001 ffa5 	bl	8002954 <HAL_GPIO_TogglePin>
			// take the triggering semaphore
			xSemaphoreTake(IN_S_MNSD_Receive_Semph, portMAX_DELAY);
 8000a0a:	4b2f      	ldr	r3, [pc, #188]	; (8000ac8 <Receive_from_SD_Task_Func+0xd4>)
 8000a0c:	681b      	ldr	r3, [r3, #0]
 8000a0e:	f04f 31ff 	mov.w	r1, #4294967295
 8000a12:	4618      	mov	r0, r3
 8000a14:	f00a f906 	bl	800ac24 <xQueueSemaphoreTake>

			// clearing buffers
			uint8_t Record_localReadBuffer[50]={0};
 8000a18:	2300      	movs	r3, #0
 8000a1a:	60bb      	str	r3, [r7, #8]
 8000a1c:	f107 030c 	add.w	r3, r7, #12
 8000a20:	222e      	movs	r2, #46	; 0x2e
 8000a22:	2100      	movs	r1, #0
 8000a24:	4618      	mov	r0, r3
 8000a26:	f00c fc19 	bl	800d25c <memset>
			uint8_t Temp_localReadBuffer[50]={0};
 8000a2a:	2300      	movs	r3, #0
 8000a2c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000a2e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000a32:	222e      	movs	r2, #46	; 0x2e
 8000a34:	2100      	movs	r1, #0
 8000a36:	4618      	mov	r0, r3
 8000a38:	f00c fc10 	bl	800d25c <memset>

    	// Read data from the file into the buffer
			fres = f_read(&Current_File_Handle_for_Read, Temp_localReadBuffer,49, &bytesRead);
 8000a3c:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000a40:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 8000a44:	2231      	movs	r2, #49	; 0x31
 8000a46:	4821      	ldr	r0, [pc, #132]	; (8000acc <Receive_from_SD_Task_Func+0xd8>)
 8000a48:	f008 fc2f 	bl	80092aa <f_read>
 8000a4c:	4603      	mov	r3, r0
 8000a4e:	461a      	mov	r2, r3
 8000a50:	4b1f      	ldr	r3, [pc, #124]	; (8000ad0 <Receive_from_SD_Task_Func+0xdc>)
 8000a52:	701a      	strb	r2, [r3, #0]

   	 	Temp_localReadBuffer[bytesRead] = '\0'; // Null-terminate the buffer
 8000a54:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8000a56:	3380      	adds	r3, #128	; 0x80
 8000a58:	443b      	add	r3, r7
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	f803 2c44 	strb.w	r2, [r3, #-68]

    	char* sequencePos = strstr((char*)Temp_localReadBuffer, "\r\n"); // Search for "\r\n" sequence
 8000a60:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000a64:	491b      	ldr	r1, [pc, #108]	; (8000ad4 <Receive_from_SD_Task_Func+0xe0>)
 8000a66:	4618      	mov	r0, r3
 8000a68:	f00c fc00 	bl	800d26c <strstr>
 8000a6c:	67f8      	str	r0, [r7, #124]	; 0x7c

			// Calculate the length until the "\r\n" sequence
			int lengthUntilSequence = sequencePos - (char*)Temp_localReadBuffer;
 8000a6e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000a72:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8000a74:	1ad3      	subs	r3, r2, r3
 8000a76:	67bb      	str	r3, [r7, #120]	; 0x78

			// Move the file pointer after the "\r\n" sequence for the next read
			int newPosition = f_tell(&Current_File_Handle_for_Read) - (bytesRead - lengthUntilSequence) + 2;
 8000a78:	4b14      	ldr	r3, [pc, #80]	; (8000acc <Receive_from_SD_Task_Func+0xd8>)
 8000a7a:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8000a7e:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8000a80:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8000a82:	1acb      	subs	r3, r1, r3
 8000a84:	4413      	add	r3, r2
 8000a86:	3302      	adds	r3, #2
 8000a88:	677b      	str	r3, [r7, #116]	; 0x74

			if (newPosition >= 0)
 8000a8a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8000a8c:	2b00      	cmp	r3, #0
 8000a8e:	db04      	blt.n	8000a9a <Receive_from_SD_Task_Func+0xa6>
			{
				f_lseek(&Current_File_Handle_for_Read, newPosition);
 8000a90:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8000a92:	4619      	mov	r1, r3
 8000a94:	480d      	ldr	r0, [pc, #52]	; (8000acc <Receive_from_SD_Task_Func+0xd8>)
 8000a96:	f009 f802 	bl	8009a9e <f_lseek>
			}
			else
			{}

			memcpy(Record_localReadBuffer, Temp_localReadBuffer, lengthUntilSequence);
 8000a9a:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8000a9c:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 8000aa0:	f107 0308 	add.w	r3, r7, #8
 8000aa4:	4618      	mov	r0, r3
 8000aa6:	f00c fc73 	bl	800d390 <memcpy>
			Record_localReadBuffer[lengthUntilSequence] = '#';
 8000aaa:	f107 0208 	add.w	r2, r7, #8
 8000aae:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8000ab0:	4413      	add	r3, r2
 8000ab2:	2223      	movs	r2, #35	; 0x23
 8000ab4:	701a      	strb	r2, [r3, #0]

			// send the data from local buffer to the manage connection task.
			xQueueSend(IN_S_Receive_MSD_Queue,Record_localReadBuffer,0);
 8000ab6:	4b08      	ldr	r3, [pc, #32]	; (8000ad8 <Receive_from_SD_Task_Func+0xe4>)
 8000ab8:	6818      	ldr	r0, [r3, #0]
 8000aba:	f107 0108 	add.w	r1, r7, #8
 8000abe:	2300      	movs	r3, #0
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	f009 fe13 	bl	800a6ec <xQueueGenericSend>
	{
 8000ac6:	e79b      	b.n	8000a00 <Receive_from_SD_Task_Func+0xc>
 8000ac8:	2000016c 	.word	0x2000016c
 8000acc:	20000c5c 	.word	0x20000c5c
 8000ad0:	200010b4 	.word	0x200010b4
 8000ad4:	0800d4b4 	.word	0x0800d4b4
 8000ad8:	20000118 	.word	0x20000118

08000adc <Check_Network_Task_Func>:
/* Main Nodes Branch code ----------------------------------------------------*/
uint8_t flag_address_buffer_update = 0;
//uint8_t slave_address_buffer[MAX_SLAVE_COUNT]={0x50,0x51,0x52,0x53,0x54};
uint8_t slave_address_buffer[1] ={ 0x50};
void Check_Network_Task_Func(void * pvParameters)
{
 8000adc:	b580      	push	{r7, lr}
 8000ade:	b084      	sub	sp, #16
 8000ae0:	af00      	add	r7, sp, #0
 8000ae2:	6078      	str	r0, [r7, #4]
  uint8_t slaves_connected[MAX_SLAVE_COUNT]={0};
 8000ae4:	2300      	movs	r3, #0
 8000ae6:	733b      	strb	r3, [r7, #12]
    uint8_t request = 0xAA;
 8000ae8:	23aa      	movs	r3, #170	; 0xaa
 8000aea:	72fb      	strb	r3, [r7, #11]
    uint8_t data_from_slave;
 //   uint8_t slave_index = 0;
 while(1)
 {
  //i2c transmit with slave address = 0x00
 xQueueSend(IN_N_CheckNet_Send_Queue, &request,0);
 8000aec:	4b16      	ldr	r3, [pc, #88]	; (8000b48 <Check_Network_Task_Func+0x6c>)
 8000aee:	6818      	ldr	r0, [r3, #0]
 8000af0:	f107 010b 	add.w	r1, r7, #11
 8000af4:	2300      	movs	r3, #0
 8000af6:	2200      	movs	r2, #0
 8000af8:	f009 fdf8 	bl	800a6ec <xQueueGenericSend>
   // receive from i2c slave their addresses
 xQueueReceive(IN_N_Receive_CheckNet_Queue,&data_from_slave ,0);
 8000afc:	4b13      	ldr	r3, [pc, #76]	; (8000b4c <Check_Network_Task_Func+0x70>)
 8000afe:	681b      	ldr	r3, [r3, #0]
 8000b00:	f107 010a 	add.w	r1, r7, #10
 8000b04:	2200      	movs	r2, #0
 8000b06:	4618      	mov	r0, r3
 8000b08:	f009 ffac 	bl	800aa64 <xQueueReceive>

 /*** store slave address in slave_address_buffer ***/
 for(uint8_t node_id=0; node_id < MAX_SLAVE_COUNT;node_id++)
 8000b0c:	2300      	movs	r3, #0
 8000b0e:	73fb      	strb	r3, [r7, #15]
 8000b10:	e00e      	b.n	8000b30 <Check_Network_Task_Func+0x54>
 {
  if (slave_address_buffer[node_id]==data_from_slave)
 8000b12:	7bfb      	ldrb	r3, [r7, #15]
 8000b14:	4a0e      	ldr	r2, [pc, #56]	; (8000b50 <Check_Network_Task_Func+0x74>)
 8000b16:	5cd2      	ldrb	r2, [r2, r3]
 8000b18:	7abb      	ldrb	r3, [r7, #10]
 8000b1a:	429a      	cmp	r2, r3
 8000b1c:	d105      	bne.n	8000b2a <Check_Network_Task_Func+0x4e>
    slaves_connected[node_id]=1;
 8000b1e:	7bfb      	ldrb	r3, [r7, #15]
 8000b20:	3310      	adds	r3, #16
 8000b22:	443b      	add	r3, r7
 8000b24:	2201      	movs	r2, #1
 8000b26:	f803 2c04 	strb.w	r2, [r3, #-4]
 for(uint8_t node_id=0; node_id < MAX_SLAVE_COUNT;node_id++)
 8000b2a:	7bfb      	ldrb	r3, [r7, #15]
 8000b2c:	3301      	adds	r3, #1
 8000b2e:	73fb      	strb	r3, [r7, #15]
 8000b30:	7bfb      	ldrb	r3, [r7, #15]
 8000b32:	2b00      	cmp	r3, #0
 8000b34:	d0ed      	beq.n	8000b12 <Check_Network_Task_Func+0x36>
 }
//send the buffer to manage network using queue
 xQueueSend(IN_N_CheckNet_MNetwork_Queue ,slaves_connected,0);
 8000b36:	4b07      	ldr	r3, [pc, #28]	; (8000b54 <Check_Network_Task_Func+0x78>)
 8000b38:	6818      	ldr	r0, [r3, #0]
 8000b3a:	f107 010c 	add.w	r1, r7, #12
 8000b3e:	2300      	movs	r3, #0
 8000b40:	2200      	movs	r2, #0
 8000b42:	f009 fdd3 	bl	800a6ec <xQueueGenericSend>
 xQueueSend(IN_N_CheckNet_Send_Queue, &request,0);
 8000b46:	e7d1      	b.n	8000aec <Check_Network_Task_Func+0x10>
 8000b48:	2000013c 	.word	0x2000013c
 8000b4c:	20000138 	.word	0x20000138
 8000b50:	20000018 	.word	0x20000018
 8000b54:	20000148 	.word	0x20000148

08000b58 <Manage_Network_Task_Func>:
 }
}
void Manage_Network_Task_Func(void * pvParameters)
{
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	b086      	sub	sp, #24
 8000b5c:	af00      	add	r7, sp, #0
 8000b5e:	6078      	str	r0, [r7, #4]
  uint8_t slaves_connected[MAX_SLAVE_COUNT];
  uint8_t update_node_buffer[MAX_SLAVE_COUNT];
  uint8_t  request_for_update = 0xBB;
 8000b60:	23bb      	movs	r3, #187	; 0xbb
 8000b62:	73fb      	strb	r3, [r7, #15]
  uint8_t node_id;
  uint8_t StateSUM;
 while(1)
 {
   //get the connected slaves from check network
   if (flag_address_buffer_update == 0)
 8000b64:	4b41      	ldr	r3, [pc, #260]	; (8000c6c <Manage_Network_Task_Func+0x114>)
 8000b66:	781b      	ldrb	r3, [r3, #0]
 8000b68:	2b00      	cmp	r3, #0
 8000b6a:	d10c      	bne.n	8000b86 <Manage_Network_Task_Func+0x2e>
   {
   xQueueReceive(IN_N_CheckNet_MNetwork_Queue ,slaves_connected,portMAX_DELAY);
 8000b6c:	4b40      	ldr	r3, [pc, #256]	; (8000c70 <Manage_Network_Task_Func+0x118>)
 8000b6e:	681b      	ldr	r3, [r3, #0]
 8000b70:	f107 0114 	add.w	r1, r7, #20
 8000b74:	f04f 32ff 	mov.w	r2, #4294967295
 8000b78:	4618      	mov	r0, r3
 8000b7a:	f009 ff73 	bl	800aa64 <xQueueReceive>
   flag_address_buffer_update = 1; //trigger it only once
 8000b7e:	4b3b      	ldr	r3, [pc, #236]	; (8000c6c <Manage_Network_Task_Func+0x114>)
 8000b80:	2201      	movs	r2, #1
 8000b82:	701a      	strb	r2, [r3, #0]
 8000b84:	e7ee      	b.n	8000b64 <Manage_Network_Task_Func+0xc>
   }
   else
   {
  if (uxQueueMessagesWaiting(OUT_S_N_MSD_MNet_Queue) > 0) //check if there is update in queue
 8000b86:	4b3b      	ldr	r3, [pc, #236]	; (8000c74 <Manage_Network_Task_Func+0x11c>)
 8000b88:	681b      	ldr	r3, [r3, #0]
 8000b8a:	4618      	mov	r0, r3
 8000b8c:	f00a f956 	bl	800ae3c <uxQueueMessagesWaiting>
 8000b90:	4603      	mov	r3, r0
 8000b92:	2b00      	cmp	r3, #0
 8000b94:	d066      	beq.n	8000c64 <Manage_Network_Task_Func+0x10c>
       {
         //get the nodeS i want to update from sd card
         xQueueReceive(OUT_S_N_MSD_MNet_Queue ,update_node_buffer,0);
 8000b96:	4b37      	ldr	r3, [pc, #220]	; (8000c74 <Manage_Network_Task_Func+0x11c>)
 8000b98:	681b      	ldr	r3, [r3, #0]
 8000b9a:	f107 0110 	add.w	r1, r7, #16
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	4618      	mov	r0, r3
 8000ba2:	f009 ff5f 	bl	800aa64 <xQueueReceive>
         StateSUM = 0;
 8000ba6:	2300      	movs	r3, #0
 8000ba8:	75bb      	strb	r3, [r7, #22]
         for(uint8_t node_id=0; node_id < 5;node_id++)
 8000baa:	2300      	movs	r3, #0
 8000bac:	757b      	strb	r3, [r7, #21]
 8000bae:	e00a      	b.n	8000bc6 <Manage_Network_Task_Func+0x6e>
         {
           StateSUM += update_node_buffer[node_id];
 8000bb0:	7d7b      	ldrb	r3, [r7, #21]
 8000bb2:	3318      	adds	r3, #24
 8000bb4:	443b      	add	r3, r7
 8000bb6:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 8000bba:	7dbb      	ldrb	r3, [r7, #22]
 8000bbc:	4413      	add	r3, r2
 8000bbe:	75bb      	strb	r3, [r7, #22]
         for(uint8_t node_id=0; node_id < 5;node_id++)
 8000bc0:	7d7b      	ldrb	r3, [r7, #21]
 8000bc2:	3301      	adds	r3, #1
 8000bc4:	757b      	strb	r3, [r7, #21]
 8000bc6:	7d7b      	ldrb	r3, [r7, #21]
 8000bc8:	2b04      	cmp	r3, #4
 8000bca:	d9f1      	bls.n	8000bb0 <Manage_Network_Task_Func+0x58>
         }
       }
   while(StateSUM > 0)
 8000bcc:	e04a      	b.n	8000c64 <Manage_Network_Task_Func+0x10c>
   {
     if (uxQueueMessagesWaiting(OUT_S_N_MSD_MNet_Queue) > 0)
 8000bce:	4b29      	ldr	r3, [pc, #164]	; (8000c74 <Manage_Network_Task_Func+0x11c>)
 8000bd0:	681b      	ldr	r3, [r3, #0]
 8000bd2:	4618      	mov	r0, r3
 8000bd4:	f00a f932 	bl	800ae3c <uxQueueMessagesWaiting>
 8000bd8:	4603      	mov	r3, r0
 8000bda:	2b00      	cmp	r3, #0
 8000bdc:	d01a      	beq.n	8000c14 <Manage_Network_Task_Func+0xbc>
     {
       //get the nodeS i want to update from sd card
       xQueueReceive(OUT_S_N_MSD_MNet_Queue ,update_node_buffer,0);
 8000bde:	4b25      	ldr	r3, [pc, #148]	; (8000c74 <Manage_Network_Task_Func+0x11c>)
 8000be0:	681b      	ldr	r3, [r3, #0]
 8000be2:	f107 0110 	add.w	r1, r7, #16
 8000be6:	2200      	movs	r2, #0
 8000be8:	4618      	mov	r0, r3
 8000bea:	f009 ff3b 	bl	800aa64 <xQueueReceive>
       StateSUM = 0;
 8000bee:	2300      	movs	r3, #0
 8000bf0:	75bb      	strb	r3, [r7, #22]
       for(node_id=0; node_id < MAX_SLAVE_COUNT;node_id++)
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	75fb      	strb	r3, [r7, #23]
 8000bf6:	e00a      	b.n	8000c0e <Manage_Network_Task_Func+0xb6>
       {
         StateSUM += update_node_buffer[node_id];
 8000bf8:	7dfb      	ldrb	r3, [r7, #23]
 8000bfa:	3318      	adds	r3, #24
 8000bfc:	443b      	add	r3, r7
 8000bfe:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 8000c02:	7dbb      	ldrb	r3, [r7, #22]
 8000c04:	4413      	add	r3, r2
 8000c06:	75bb      	strb	r3, [r7, #22]
       for(node_id=0; node_id < MAX_SLAVE_COUNT;node_id++)
 8000c08:	7dfb      	ldrb	r3, [r7, #23]
 8000c0a:	3301      	adds	r3, #1
 8000c0c:	75fb      	strb	r3, [r7, #23]
 8000c0e:	7dfb      	ldrb	r3, [r7, #23]
 8000c10:	2b00      	cmp	r3, #0
 8000c12:	d0f1      	beq.n	8000bf8 <Manage_Network_Task_Func+0xa0>
       }
     }
     for(node_id=0 ; node_id<MAX_SLAVE_COUNT;node_id++)
 8000c14:	2300      	movs	r3, #0
 8000c16:	75fb      	strb	r3, [r7, #23]
 8000c18:	e021      	b.n	8000c5e <Manage_Network_Task_Func+0x106>
        {
          if((update_node_buffer[node_id]==1)&&(slaves_connected[node_id]==1))
 8000c1a:	7dfb      	ldrb	r3, [r7, #23]
 8000c1c:	3318      	adds	r3, #24
 8000c1e:	443b      	add	r3, r7
 8000c20:	f813 3c08 	ldrb.w	r3, [r3, #-8]
 8000c24:	2b01      	cmp	r3, #1
 8000c26:	d117      	bne.n	8000c58 <Manage_Network_Task_Func+0x100>
 8000c28:	7dfb      	ldrb	r3, [r7, #23]
 8000c2a:	3318      	adds	r3, #24
 8000c2c:	443b      	add	r3, r7
 8000c2e:	f813 3c04 	ldrb.w	r3, [r3, #-4]
 8000c32:	2b01      	cmp	r3, #1
 8000c34:	d110      	bne.n	8000c58 <Manage_Network_Task_Func+0x100>
          {
            //SEND THE NODE TO MCONN TASK
         //   xQueueSend(IN_N_MNetwork_MConn_Queue ,&node_id,0);
            //SEND THE SLAVE ADDRESS OF THE NODE TO SEND TASK
            xQueueSend(IN_N_MNetwork_Send_Queue ,&slave_address_buffer[node_id],0);
 8000c36:	4b10      	ldr	r3, [pc, #64]	; (8000c78 <Manage_Network_Task_Func+0x120>)
 8000c38:	6818      	ldr	r0, [r3, #0]
 8000c3a:	7dfb      	ldrb	r3, [r7, #23]
 8000c3c:	4a0f      	ldr	r2, [pc, #60]	; (8000c7c <Manage_Network_Task_Func+0x124>)
 8000c3e:	1899      	adds	r1, r3, r2
 8000c40:	2300      	movs	r3, #0
 8000c42:	2200      	movs	r2, #0
 8000c44:	f009 fd52 	bl	800a6ec <xQueueGenericSend>
            xQueueSend(IN_N_MNetwork_Send_Queue_2 ,&request_for_update,0);
 8000c48:	4b0d      	ldr	r3, [pc, #52]	; (8000c80 <Manage_Network_Task_Func+0x128>)
 8000c4a:	6818      	ldr	r0, [r3, #0]
 8000c4c:	f107 010f 	add.w	r1, r7, #15
 8000c50:	2300      	movs	r3, #0
 8000c52:	2200      	movs	r2, #0
 8000c54:	f009 fd4a 	bl	800a6ec <xQueueGenericSend>
     for(node_id=0 ; node_id<MAX_SLAVE_COUNT;node_id++)
 8000c58:	7dfb      	ldrb	r3, [r7, #23]
 8000c5a:	3301      	adds	r3, #1
 8000c5c:	75fb      	strb	r3, [r7, #23]
 8000c5e:	7dfb      	ldrb	r3, [r7, #23]
 8000c60:	2b00      	cmp	r3, #0
 8000c62:	d0da      	beq.n	8000c1a <Manage_Network_Task_Func+0xc2>
   while(StateSUM > 0)
 8000c64:	7dbb      	ldrb	r3, [r7, #22]
 8000c66:	2b00      	cmp	r3, #0
 8000c68:	d1b1      	bne.n	8000bce <Manage_Network_Task_Func+0x76>
   if (flag_address_buffer_update == 0)
 8000c6a:	e77b      	b.n	8000b64 <Manage_Network_Task_Func+0xc>
 8000c6c:	200010b5 	.word	0x200010b5
 8000c70:	20000148 	.word	0x20000148
 8000c74:	200000f8 	.word	0x200000f8
 8000c78:	20000140 	.word	0x20000140
 8000c7c:	20000018 	.word	0x20000018
 8000c80:	20000144 	.word	0x20000144

08000c84 <Manage_Connection_Task_Func>:
  }/*else*/

 }
}
void Manage_Connection_Task_Func(void * pvParameters)
{
 8000c84:	b580      	push	{r7, lr}
 8000c86:	b0a0      	sub	sp, #128	; 0x80
 8000c88:	af00      	add	r7, sp, #0
 8000c8a:	6078      	str	r0, [r7, #4]
 uint8_t   record_localBuffer[2][50];
 uint8_t   MSD_ack_Buffer[2];
 uint8_t   ack_localBuffer[2];
 bool    swing = 0;
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 uint8_t   recordSize = 0;
 8000c92:	2300      	movs	r3, #0
 8000c94:	f887 307e 	strb.w	r3, [r7, #126]	; 0x7e
 uint8_t   oldSize = 3;  // the size of the Info starting message.
 8000c98:	2303      	movs	r3, #3
 8000c9a:	72fb      	strb	r3, [r7, #11]
 uint8_t   var = 0;
 8000c9c:	2300      	movs	r3, #0
 8000c9e:	f887 307d 	strb.w	r3, [r7, #125]	; 0x7d
 static int16_t record_Counter = -1;

 while(1)
 {
        /* receive from Node :  */
  xQueueReceive(IN_N_Receive_MConn_Queue_1, &ack_localBuffer[0], portMAX_DELAY);  // store the acknowledge inside a local buffer.
 8000ca2:	4bca      	ldr	r3, [pc, #808]	; (8000fcc <Manage_Connection_Task_Func+0x348>)
 8000ca4:	681b      	ldr	r3, [r3, #0]
 8000ca6:	f107 010c 	add.w	r1, r7, #12
 8000caa:	f04f 32ff 	mov.w	r2, #4294967295
 8000cae:	4618      	mov	r0, r3
 8000cb0:	f009 fed8 	bl	800aa64 <xQueueReceive>
  xQueueReceive(IN_N_Receive_MConn_Queue_2, &ack_localBuffer[1], 0);  // store the Node Number.
 8000cb4:	4bc6      	ldr	r3, [pc, #792]	; (8000fd0 <Manage_Connection_Task_Func+0x34c>)
 8000cb6:	6818      	ldr	r0, [r3, #0]
 8000cb8:	f107 030c 	add.w	r3, r7, #12
 8000cbc:	3301      	adds	r3, #1
 8000cbe:	2200      	movs	r2, #0
 8000cc0:	4619      	mov	r1, r3
 8000cc2:	f009 fecf 	bl	800aa64 <xQueueReceive>
  // switch on acks value.
  switch (ack_localBuffer[0])
 8000cc6:	7b3b      	ldrb	r3, [r7, #12]
 8000cc8:	3b01      	subs	r3, #1
 8000cca:	2b06      	cmp	r3, #6
 8000ccc:	d86b      	bhi.n	8000da6 <Manage_Connection_Task_Func+0x122>
 8000cce:	a201      	add	r2, pc, #4	; (adr r2, 8000cd4 <Manage_Connection_Task_Func+0x50>)
 8000cd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000cd4:	08000cf1 	.word	0x08000cf1
 8000cd8:	08000d0d 	.word	0x08000d0d
 8000cdc:	08000d29 	.word	0x08000d29
 8000ce0:	08000d45 	.word	0x08000d45
 8000ce4:	08000da7 	.word	0x08000da7
 8000ce8:	08000d61 	.word	0x08000d61
 8000cec:	08000d7d 	.word	0x08000d7d
  {
   case  0x01:  // Start connection.
    /*  1- ask the SD for starting information {Number of Records(2-Bytes),First record size(1-Byte)}.   */
    MSD_ack_Buffer[0] = FILE_OPEN[ack_localBuffer[1]];
 8000cf0:	7b7b      	ldrb	r3, [r7, #13]
 8000cf2:	461a      	mov	r2, r3
 8000cf4:	4bb7      	ldr	r3, [pc, #732]	; (8000fd4 <Manage_Connection_Task_Func+0x350>)
 8000cf6:	5c9b      	ldrb	r3, [r3, r2]
 8000cf8:	743b      	strb	r3, [r7, #16]
    xQueueSend(OUT_N_S_MConn_MSD_Queue,MSD_ack_Buffer,0);  // give the ACK that Open File in the SD task
 8000cfa:	4bb7      	ldr	r3, [pc, #732]	; (8000fd8 <Manage_Connection_Task_Func+0x354>)
 8000cfc:	6818      	ldr	r0, [r3, #0]
 8000cfe:	f107 0110 	add.w	r1, r7, #16
 8000d02:	2300      	movs	r3, #0
 8000d04:	2200      	movs	r2, #0
 8000d06:	f009 fcf1 	bl	800a6ec <xQueueGenericSend>
    break;
 8000d0a:	e04d      	b.n	8000da8 <Manage_Connection_Task_Func+0x124>

   case  0x02:  // Accepted ACK for new Image, ask the SD for the First Record.
    MSD_ack_Buffer[0] = FILE_RECORD[ack_localBuffer[1]]; // third record.
 8000d0c:	7b7b      	ldrb	r3, [r7, #13]
 8000d0e:	461a      	mov	r2, r3
 8000d10:	4bb2      	ldr	r3, [pc, #712]	; (8000fdc <Manage_Connection_Task_Func+0x358>)
 8000d12:	5c9b      	ldrb	r3, [r3, r2]
 8000d14:	743b      	strb	r3, [r7, #16]
    xQueueSend(OUT_N_S_MConn_MSD_Queue,MSD_ack_Buffer,0);
 8000d16:	4bb0      	ldr	r3, [pc, #704]	; (8000fd8 <Manage_Connection_Task_Func+0x354>)
 8000d18:	6818      	ldr	r0, [r3, #0]
 8000d1a:	f107 0110 	add.w	r1, r7, #16
 8000d1e:	2300      	movs	r3, #0
 8000d20:	2200      	movs	r2, #0
 8000d22:	f009 fce3 	bl	800a6ec <xQueueGenericSend>
    break;
 8000d26:	e03f      	b.n	8000da8 <Manage_Connection_Task_Func+0x124>

   case  0x03:  // Not Accepted n_ack for new Image, Delete the Image and inform the Server.
    MSD_ack_Buffer[0] = FILE_CLOSE[ack_localBuffer[1]];
 8000d28:	7b7b      	ldrb	r3, [r7, #13]
 8000d2a:	461a      	mov	r2, r3
 8000d2c:	4bac      	ldr	r3, [pc, #688]	; (8000fe0 <Manage_Connection_Task_Func+0x35c>)
 8000d2e:	5c9b      	ldrb	r3, [r3, r2]
 8000d30:	743b      	strb	r3, [r7, #16]
    xQueueSend(OUT_N_S_MConn_MSD_Queue,MSD_ack_Buffer,0);
 8000d32:	4ba9      	ldr	r3, [pc, #676]	; (8000fd8 <Manage_Connection_Task_Func+0x354>)
 8000d34:	6818      	ldr	r0, [r3, #0]
 8000d36:	f107 0110 	add.w	r1, r7, #16
 8000d3a:	2300      	movs	r3, #0
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	f009 fcd5 	bl	800a6ec <xQueueGenericSend>
    break;
 8000d42:	e031      	b.n	8000da8 <Manage_Connection_Task_Func+0x124>

   case  0x04: // Send the next record.
    MSD_ack_Buffer[0] = FILE_RECORD[ack_localBuffer[1]]; // next record.
 8000d44:	7b7b      	ldrb	r3, [r7, #13]
 8000d46:	461a      	mov	r2, r3
 8000d48:	4ba4      	ldr	r3, [pc, #656]	; (8000fdc <Manage_Connection_Task_Func+0x358>)
 8000d4a:	5c9b      	ldrb	r3, [r3, r2]
 8000d4c:	743b      	strb	r3, [r7, #16]
    xQueueSend(OUT_N_S_MConn_MSD_Queue,MSD_ack_Buffer,0);
 8000d4e:	4ba2      	ldr	r3, [pc, #648]	; (8000fd8 <Manage_Connection_Task_Func+0x354>)
 8000d50:	6818      	ldr	r0, [r3, #0]
 8000d52:	f107 0110 	add.w	r1, r7, #16
 8000d56:	2300      	movs	r3, #0
 8000d58:	2200      	movs	r2, #0
 8000d5a:	f009 fcc7 	bl	800a6ec <xQueueGenericSend>
    break;
 8000d5e:	e023      	b.n	8000da8 <Manage_Connection_Task_Func+0x124>

   case  0x06: // process Failed.
    // stop and end the process.
    MSD_ack_Buffer[0] = FILE_CLOSE[ack_localBuffer[1]];
 8000d60:	7b7b      	ldrb	r3, [r7, #13]
 8000d62:	461a      	mov	r2, r3
 8000d64:	4b9e      	ldr	r3, [pc, #632]	; (8000fe0 <Manage_Connection_Task_Func+0x35c>)
 8000d66:	5c9b      	ldrb	r3, [r3, r2]
 8000d68:	743b      	strb	r3, [r7, #16]
    xQueueSend(OUT_N_S_MConn_MSD_Queue,MSD_ack_Buffer,0);
 8000d6a:	4b9b      	ldr	r3, [pc, #620]	; (8000fd8 <Manage_Connection_Task_Func+0x354>)
 8000d6c:	6818      	ldr	r0, [r3, #0]
 8000d6e:	f107 0110 	add.w	r1, r7, #16
 8000d72:	2300      	movs	r3, #0
 8000d74:	2200      	movs	r2, #0
 8000d76:	f009 fcb9 	bl	800a6ec <xQueueGenericSend>
    break;
 8000d7a:	e015      	b.n	8000da8 <Manage_Connection_Task_Func+0x124>

   case  0x07: // End Process successfully.
    ResetBranch();
 8000d7c:	f000 fa1a 	bl	80011b4 <ResetBranch>
    record_Counter = 0;
 8000d80:	4b98      	ldr	r3, [pc, #608]	; (8000fe4 <Manage_Connection_Task_Func+0x360>)
 8000d82:	2200      	movs	r2, #0
 8000d84:	801a      	strh	r2, [r3, #0]
    oldSize = 3;
 8000d86:	2303      	movs	r3, #3
 8000d88:	72fb      	strb	r3, [r7, #11]
    // send the end ACK to the MSD task.
    MSD_ack_Buffer[0] = FILE_CLOSE[ack_localBuffer[1]];
 8000d8a:	7b7b      	ldrb	r3, [r7, #13]
 8000d8c:	461a      	mov	r2, r3
 8000d8e:	4b94      	ldr	r3, [pc, #592]	; (8000fe0 <Manage_Connection_Task_Func+0x35c>)
 8000d90:	5c9b      	ldrb	r3, [r3, r2]
 8000d92:	743b      	strb	r3, [r7, #16]
    xQueueSend(OUT_N_S_MConn_MSD_Queue,MSD_ack_Buffer,0);
 8000d94:	4b90      	ldr	r3, [pc, #576]	; (8000fd8 <Manage_Connection_Task_Func+0x354>)
 8000d96:	6818      	ldr	r0, [r3, #0]
 8000d98:	f107 0110 	add.w	r1, r7, #16
 8000d9c:	2300      	movs	r3, #0
 8000d9e:	2200      	movs	r2, #0
 8000da0:	f009 fca4 	bl	800a6ec <xQueueGenericSend>
    break;
 8000da4:	e000      	b.n	8000da8 <Manage_Connection_Task_Func+0x124>

   default:
    break;
 8000da6:	bf00      	nop
  }
  if (record_Counter < 1) // for sending first line in communication process, and the first record.
 8000da8:	4b8e      	ldr	r3, [pc, #568]	; (8000fe4 <Manage_Connection_Task_Func+0x360>)
 8000daa:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000dae:	2b00      	cmp	r3, #0
 8000db0:	f300 80b2 	bgt.w	8000f18 <Manage_Connection_Task_Func+0x294>
    {
              // 2- store the information inside a local buffer.
     xQueueReceive(OUT_S_N_MSD_MConn_Queue, record_localBuffer[!swing], portMAX_DELAY);
 8000db4:	4b8c      	ldr	r3, [pc, #560]	; (8000fe8 <Manage_Connection_Task_Func+0x364>)
 8000db6:	6818      	ldr	r0, [r3, #0]
 8000db8:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8000dbc:	f083 0301 	eor.w	r3, r3, #1
 8000dc0:	b2db      	uxtb	r3, r3
 8000dc2:	4619      	mov	r1, r3
 8000dc4:	f107 0214 	add.w	r2, r7, #20
 8000dc8:	2332      	movs	r3, #50	; 0x32
 8000dca:	fb01 f303 	mul.w	r3, r1, r3
 8000dce:	4413      	add	r3, r2
 8000dd0:	f04f 32ff 	mov.w	r2, #4294967295
 8000dd4:	4619      	mov	r1, r3
 8000dd6:	f009 fe45 	bl	800aa64 <xQueueReceive>

              // 3- ask for the first record.
              MSD_ack_Buffer[0] = FILE_RECORD[0];
 8000dda:	4b80      	ldr	r3, [pc, #512]	; (8000fdc <Manage_Connection_Task_Func+0x358>)
 8000ddc:	781b      	ldrb	r3, [r3, #0]
 8000dde:	743b      	strb	r3, [r7, #16]
     xQueueSend(OUT_N_S_MConn_MSD_Queue,MSD_ack_Buffer,0);
 8000de0:	4b7d      	ldr	r3, [pc, #500]	; (8000fd8 <Manage_Connection_Task_Func+0x354>)
 8000de2:	6818      	ldr	r0, [r3, #0]
 8000de4:	f107 0110 	add.w	r1, r7, #16
 8000de8:	2300      	movs	r3, #0
 8000dea:	2200      	movs	r2, #0
 8000dec:	f009 fc7e 	bl	800a6ec <xQueueGenericSend>

              // 4- store the first record inside a local buffer.
        xQueueReceive(OUT_S_N_MSD_MConn_Queue, record_localBuffer[swing],portMAX_DELAY);
 8000df0:	4b7d      	ldr	r3, [pc, #500]	; (8000fe8 <Manage_Connection_Task_Func+0x364>)
 8000df2:	6818      	ldr	r0, [r3, #0]
 8000df4:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8000df8:	f107 0214 	add.w	r2, r7, #20
 8000dfc:	2132      	movs	r1, #50	; 0x32
 8000dfe:	fb01 f303 	mul.w	r3, r1, r3
 8000e02:	4413      	add	r3, r2
 8000e04:	f04f 32ff 	mov.w	r2, #4294967295
 8000e08:	4619      	mov	r1, r3
 8000e0a:	f009 fe2b 	bl	800aa64 <xQueueReceive>

              // 5- count the size of the first record.
        while(record_localBuffer[swing][var] != '#')
 8000e0e:	e004      	b.n	8000e1a <Manage_Connection_Task_Func+0x196>
        {
         recordSize++;
 8000e10:	f897 307e 	ldrb.w	r3, [r7, #126]	; 0x7e
 8000e14:	3301      	adds	r3, #1
 8000e16:	f887 307e 	strb.w	r3, [r7, #126]	; 0x7e
        while(record_localBuffer[swing][var] != '#')
 8000e1a:	f897 207f 	ldrb.w	r2, [r7, #127]	; 0x7f
 8000e1e:	f897 307d 	ldrb.w	r3, [r7, #125]	; 0x7d
 8000e22:	2132      	movs	r1, #50	; 0x32
 8000e24:	fb01 f202 	mul.w	r2, r1, r2
 8000e28:	3280      	adds	r2, #128	; 0x80
 8000e2a:	443a      	add	r2, r7
 8000e2c:	4413      	add	r3, r2
 8000e2e:	3b6c      	subs	r3, #108	; 0x6c
 8000e30:	781b      	ldrb	r3, [r3, #0]
 8000e32:	2b23      	cmp	r3, #35	; 0x23
 8000e34:	d1ec      	bne.n	8000e10 <Manage_Connection_Task_Func+0x18c>
        }
        var = 0; // return the var value to zero.
 8000e36:	2300      	movs	r3, #0
 8000e38:	f887 307d 	strb.w	r3, [r7, #125]	; 0x7d

              // 6- load the record size inside the !swing buffer.
        record_localBuffer[!swing][oldSize] = recordSize;
 8000e3c:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8000e40:	f083 0301 	eor.w	r3, r3, #1
 8000e44:	b2db      	uxtb	r3, r3
 8000e46:	4619      	mov	r1, r3
 8000e48:	7afb      	ldrb	r3, [r7, #11]
 8000e4a:	461a      	mov	r2, r3
 8000e4c:	2332      	movs	r3, #50	; 0x32
 8000e4e:	fb01 f303 	mul.w	r3, r1, r3
 8000e52:	3380      	adds	r3, #128	; 0x80
 8000e54:	443b      	add	r3, r7
 8000e56:	4413      	add	r3, r2
 8000e58:	3b6c      	subs	r3, #108	; 0x6c
 8000e5a:	f897 207e 	ldrb.w	r2, [r7, #126]	; 0x7e
 8000e5e:	701a      	strb	r2, [r3, #0]

              // 7- send the size of the message.
        oldSize++;
 8000e60:	7afb      	ldrb	r3, [r7, #11]
 8000e62:	3301      	adds	r3, #1
 8000e64:	b2db      	uxtb	r3, r3
 8000e66:	72fb      	strb	r3, [r7, #11]
        xQueueSend(IN_N_MConn_Send_Queue_2,&oldSize,0);
 8000e68:	4b60      	ldr	r3, [pc, #384]	; (8000fec <Manage_Connection_Task_Func+0x368>)
 8000e6a:	6818      	ldr	r0, [r3, #0]
 8000e6c:	f107 010b 	add.w	r1, r7, #11
 8000e70:	2300      	movs	r3, #0
 8000e72:	2200      	movs	r2, #0
 8000e74:	f009 fc3a 	bl	800a6ec <xQueueGenericSend>

        // 8- send the old record and the size of this record and the new one to the send task.
        xQueueSend(IN_N_MConn_Send_Queue_1,record_localBuffer[!swing],0);
 8000e78:	4b5d      	ldr	r3, [pc, #372]	; (8000ff0 <Manage_Connection_Task_Func+0x36c>)
 8000e7a:	6818      	ldr	r0, [r3, #0]
 8000e7c:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8000e80:	f083 0301 	eor.w	r3, r3, #1
 8000e84:	b2db      	uxtb	r3, r3
 8000e86:	4619      	mov	r1, r3
 8000e88:	f107 0214 	add.w	r2, r7, #20
 8000e8c:	2332      	movs	r3, #50	; 0x32
 8000e8e:	fb01 f303 	mul.w	r3, r1, r3
 8000e92:	18d1      	adds	r1, r2, r3
 8000e94:	2300      	movs	r3, #0
 8000e96:	2200      	movs	r2, #0
 8000e98:	f009 fc28 	bl	800a6ec <xQueueGenericSend>

        // 9- clear the buffer and change the values.
        for (uint8_t var_l = 0; var_l < oldSize; ++var_l)
 8000e9c:	2300      	movs	r3, #0
 8000e9e:	f887 307c 	strb.w	r3, [r7, #124]	; 0x7c
 8000ea2:	e015      	b.n	8000ed0 <Manage_Connection_Task_Func+0x24c>
              {
         record_localBuffer[!swing][var_l] = 0;
 8000ea4:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8000ea8:	f083 0301 	eor.w	r3, r3, #1
 8000eac:	b2db      	uxtb	r3, r3
 8000eae:	4619      	mov	r1, r3
 8000eb0:	f897 307c 	ldrb.w	r3, [r7, #124]	; 0x7c
 8000eb4:	2232      	movs	r2, #50	; 0x32
 8000eb6:	fb01 f202 	mul.w	r2, r1, r2
 8000eba:	3280      	adds	r2, #128	; 0x80
 8000ebc:	443a      	add	r2, r7
 8000ebe:	4413      	add	r3, r2
 8000ec0:	3b6c      	subs	r3, #108	; 0x6c
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	701a      	strb	r2, [r3, #0]
        for (uint8_t var_l = 0; var_l < oldSize; ++var_l)
 8000ec6:	f897 307c 	ldrb.w	r3, [r7, #124]	; 0x7c
 8000eca:	3301      	adds	r3, #1
 8000ecc:	f887 307c 	strb.w	r3, [r7, #124]	; 0x7c
 8000ed0:	7afb      	ldrb	r3, [r7, #11]
 8000ed2:	f897 207c 	ldrb.w	r2, [r7, #124]	; 0x7c
 8000ed6:	429a      	cmp	r2, r3
 8000ed8:	d3e4      	bcc.n	8000ea4 <Manage_Connection_Task_Func+0x220>
        }
        swing = !swing; // Flip the swing value.
 8000eda:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	bf14      	ite	ne
 8000ee2:	2301      	movne	r3, #1
 8000ee4:	2300      	moveq	r3, #0
 8000ee6:	b2db      	uxtb	r3, r3
 8000ee8:	f083 0301 	eor.w	r3, r3, #1
 8000eec:	b2db      	uxtb	r3, r3
 8000eee:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8000ef2:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8000ef6:	f003 0301 	and.w	r3, r3, #1
 8000efa:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
        oldSize = recordSize; // store the recordsize as the oldsize.
 8000efe:	f897 307e 	ldrb.w	r3, [r7, #126]	; 0x7e
 8000f02:	72fb      	strb	r3, [r7, #11]

              // 10- Update the record number, it will be 1;
     record_Counter += 2;
 8000f04:	4b37      	ldr	r3, [pc, #220]	; (8000fe4 <Manage_Connection_Task_Func+0x360>)
 8000f06:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000f0a:	b29b      	uxth	r3, r3
 8000f0c:	3302      	adds	r3, #2
 8000f0e:	b29b      	uxth	r3, r3
 8000f10:	b21a      	sxth	r2, r3
 8000f12:	4b34      	ldr	r3, [pc, #208]	; (8000fe4 <Manage_Connection_Task_Func+0x360>)
 8000f14:	801a      	strh	r2, [r3, #0]
 8000f16:	e6c4      	b.n	8000ca2 <Manage_Connection_Task_Func+0x1e>
          }
  else
          {
              // 11- store the record inside a local buffer.
     xQueueReceive(OUT_S_N_MSD_MConn_Queue, record_localBuffer[swing], 0);
 8000f18:	4b33      	ldr	r3, [pc, #204]	; (8000fe8 <Manage_Connection_Task_Func+0x364>)
 8000f1a:	6818      	ldr	r0, [r3, #0]
 8000f1c:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8000f20:	f107 0214 	add.w	r2, r7, #20
 8000f24:	2132      	movs	r1, #50	; 0x32
 8000f26:	fb01 f303 	mul.w	r3, r1, r3
 8000f2a:	4413      	add	r3, r2
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	4619      	mov	r1, r3
 8000f30:	f009 fd98 	bl	800aa64 <xQueueReceive>

     // 12- count the record size.
     while(record_localBuffer[swing][var] != '#') {
 8000f34:	e004      	b.n	8000f40 <Manage_Connection_Task_Func+0x2bc>
      recordSize++;
 8000f36:	f897 307e 	ldrb.w	r3, [r7, #126]	; 0x7e
 8000f3a:	3301      	adds	r3, #1
 8000f3c:	f887 307e 	strb.w	r3, [r7, #126]	; 0x7e
     while(record_localBuffer[swing][var] != '#') {
 8000f40:	f897 207f 	ldrb.w	r2, [r7, #127]	; 0x7f
 8000f44:	f897 307d 	ldrb.w	r3, [r7, #125]	; 0x7d
 8000f48:	2132      	movs	r1, #50	; 0x32
 8000f4a:	fb01 f202 	mul.w	r2, r1, r2
 8000f4e:	3280      	adds	r2, #128	; 0x80
 8000f50:	443a      	add	r2, r7
 8000f52:	4413      	add	r3, r2
 8000f54:	3b6c      	subs	r3, #108	; 0x6c
 8000f56:	781b      	ldrb	r3, [r3, #0]
 8000f58:	2b23      	cmp	r3, #35	; 0x23
 8000f5a:	d1ec      	bne.n	8000f36 <Manage_Connection_Task_Func+0x2b2>
     }
     var = 0; // return the var value to zero.
 8000f5c:	2300      	movs	r3, #0
 8000f5e:	f887 307d 	strb.w	r3, [r7, #125]	; 0x7d

              // 13- store the size in the previous record.
     record_localBuffer[!swing][oldSize] = recordSize;
 8000f62:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8000f66:	f083 0301 	eor.w	r3, r3, #1
 8000f6a:	b2db      	uxtb	r3, r3
 8000f6c:	4619      	mov	r1, r3
 8000f6e:	7afb      	ldrb	r3, [r7, #11]
 8000f70:	461a      	mov	r2, r3
 8000f72:	2332      	movs	r3, #50	; 0x32
 8000f74:	fb01 f303 	mul.w	r3, r1, r3
 8000f78:	3380      	adds	r3, #128	; 0x80
 8000f7a:	443b      	add	r3, r7
 8000f7c:	4413      	add	r3, r2
 8000f7e:	3b6c      	subs	r3, #108	; 0x6c
 8000f80:	f897 207e 	ldrb.w	r2, [r7, #126]	; 0x7e
 8000f84:	701a      	strb	r2, [r3, #0]

     // 14- send the size of the message.
        oldSize++;
 8000f86:	7afb      	ldrb	r3, [r7, #11]
 8000f88:	3301      	adds	r3, #1
 8000f8a:	b2db      	uxtb	r3, r3
 8000f8c:	72fb      	strb	r3, [r7, #11]
        xQueueSend(IN_N_MConn_Send_Queue_2,&oldSize,0);
 8000f8e:	4b17      	ldr	r3, [pc, #92]	; (8000fec <Manage_Connection_Task_Func+0x368>)
 8000f90:	6818      	ldr	r0, [r3, #0]
 8000f92:	f107 010b 	add.w	r1, r7, #11
 8000f96:	2300      	movs	r3, #0
 8000f98:	2200      	movs	r2, #0
 8000f9a:	f009 fba7 	bl	800a6ec <xQueueGenericSend>

        // 15- send the old record and the size of this record and the new one to the send task.
        xQueueSend(IN_N_MConn_Send_Queue_1,record_localBuffer[!swing],0);
 8000f9e:	4b14      	ldr	r3, [pc, #80]	; (8000ff0 <Manage_Connection_Task_Func+0x36c>)
 8000fa0:	6818      	ldr	r0, [r3, #0]
 8000fa2:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8000fa6:	f083 0301 	eor.w	r3, r3, #1
 8000faa:	b2db      	uxtb	r3, r3
 8000fac:	4619      	mov	r1, r3
 8000fae:	f107 0214 	add.w	r2, r7, #20
 8000fb2:	2332      	movs	r3, #50	; 0x32
 8000fb4:	fb01 f303 	mul.w	r3, r1, r3
 8000fb8:	18d1      	adds	r1, r2, r3
 8000fba:	2300      	movs	r3, #0
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	f009 fb95 	bl	800a6ec <xQueueGenericSend>

     // 16- clear the buffer and change the values.
     for (uint8_t var_l = 0; var_l < oldSize; ++var_l) {
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 8000fc8:	e02a      	b.n	8001020 <Manage_Connection_Task_Func+0x39c>
 8000fca:	bf00      	nop
 8000fcc:	20000128 	.word	0x20000128
 8000fd0:	2000012c 	.word	0x2000012c
 8000fd4:	20000000 	.word	0x20000000
 8000fd8:	20000100 	.word	0x20000100
 8000fdc:	20000010 	.word	0x20000010
 8000fe0:	20000008 	.word	0x20000008
 8000fe4:	2000001a 	.word	0x2000001a
 8000fe8:	200000fc 	.word	0x200000fc
 8000fec:	20000134 	.word	0x20000134
 8000ff0:	20000130 	.word	0x20000130
      record_localBuffer[!swing][var_l] = 0;
 8000ff4:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8000ff8:	f083 0301 	eor.w	r3, r3, #1
 8000ffc:	b2db      	uxtb	r3, r3
 8000ffe:	4619      	mov	r1, r3
 8001000:	f897 307b 	ldrb.w	r3, [r7, #123]	; 0x7b
 8001004:	2232      	movs	r2, #50	; 0x32
 8001006:	fb01 f202 	mul.w	r2, r1, r2
 800100a:	3280      	adds	r2, #128	; 0x80
 800100c:	443a      	add	r2, r7
 800100e:	4413      	add	r3, r2
 8001010:	3b6c      	subs	r3, #108	; 0x6c
 8001012:	2200      	movs	r2, #0
 8001014:	701a      	strb	r2, [r3, #0]
     for (uint8_t var_l = 0; var_l < oldSize; ++var_l) {
 8001016:	f897 307b 	ldrb.w	r3, [r7, #123]	; 0x7b
 800101a:	3301      	adds	r3, #1
 800101c:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 8001020:	7afb      	ldrb	r3, [r7, #11]
 8001022:	f897 207b 	ldrb.w	r2, [r7, #123]	; 0x7b
 8001026:	429a      	cmp	r2, r3
 8001028:	d3e4      	bcc.n	8000ff4 <Manage_Connection_Task_Func+0x370>
     }
     swing = !swing; // Flip the swing value.
 800102a:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800102e:	2b00      	cmp	r3, #0
 8001030:	bf14      	ite	ne
 8001032:	2301      	movne	r3, #1
 8001034:	2300      	moveq	r3, #0
 8001036:	b2db      	uxtb	r3, r3
 8001038:	f083 0301 	eor.w	r3, r3, #1
 800103c:	b2db      	uxtb	r3, r3
 800103e:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8001042:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8001046:	f003 0301 	and.w	r3, r3, #1
 800104a:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
     oldSize = recordSize; // store the recordsize as the oldsize.
 800104e:	f897 307e 	ldrb.w	r3, [r7, #126]	; 0x7e
 8001052:	72fb      	strb	r3, [r7, #11]
  xQueueReceive(IN_N_Receive_MConn_Queue_1, &ack_localBuffer[0], portMAX_DELAY);  // store the acknowledge inside a local buffer.
 8001054:	e625      	b.n	8000ca2 <Manage_Connection_Task_Func+0x1e>
 8001056:	bf00      	nop

08001058 <Send_to_Node_Task_Func>:
          }
      }
  }
void Send_to_Node_Task_Func(void * pvParameters)
{
 8001058:	b580      	push	{r7, lr}
 800105a:	b092      	sub	sp, #72	; 0x48
 800105c:	af00      	add	r7, sp, #0
 800105e:	6078      	str	r0, [r7, #4]
 QueueSetMemberHandle_t  local_Queue = NULL;
 8001060:	2300      	movs	r3, #0
 8001062:	647b      	str	r3, [r7, #68]	; 0x44
 uint8_t   DevAddress = 0;
 8001064:	2300      	movs	r3, #0
 8001066:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
    uint8_t   Request = 0;
 800106a:	2300      	movs	r3, #0
 800106c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 uint8_t   record_localBuffer[50];
 uint8_t   record_Size;
 while(1)
 {
  // receive the data from the Queue.
  local_Queue = xQueueSelectFromSet(N_Send_QueueSet, portMAX_DELAY);
 8001070:	4b2f      	ldr	r3, [pc, #188]	; (8001130 <Send_to_Node_Task_Func+0xd8>)
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	f04f 31ff 	mov.w	r1, #4294967295
 8001078:	4618      	mov	r0, r3
 800107a:	f00a f8c1 	bl	800b200 <xQueueSelectFromSet>
 800107e:	6478      	str	r0, [r7, #68]	; 0x44
  if (local_Queue == IN_N_MConn_Send_Queue_1)
 8001080:	4b2c      	ldr	r3, [pc, #176]	; (8001134 <Send_to_Node_Task_Func+0xdc>)
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8001086:	429a      	cmp	r2, r3
 8001088:	d118      	bne.n	80010bc <Send_to_Node_Task_Func+0x64>
  {
            // 1- receive the data from the manage connection task.
   xQueueReceive(IN_N_MConn_Send_Queue_1, record_localBuffer, 0);
 800108a:	4b2a      	ldr	r3, [pc, #168]	; (8001134 <Send_to_Node_Task_Func+0xdc>)
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	f107 0110 	add.w	r1, r7, #16
 8001092:	2200      	movs	r2, #0
 8001094:	4618      	mov	r0, r3
 8001096:	f009 fce5 	bl	800aa64 <xQueueReceive>

            // 1- receive the data size from the manage connection task.
   xQueueReceive(IN_N_MConn_Send_Queue_2, &record_Size, 0);
 800109a:	4b27      	ldr	r3, [pc, #156]	; (8001138 <Send_to_Node_Task_Func+0xe0>)
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	f107 010f 	add.w	r1, r7, #15
 80010a2:	2200      	movs	r2, #0
 80010a4:	4618      	mov	r0, r3
 80010a6:	f009 fcdd 	bl	800aa64 <xQueueReceive>

   // 3- send the data.
   HAL_UART_Transmit_DMA(&huart1, record_localBuffer, record_Size);
 80010aa:	7bfb      	ldrb	r3, [r7, #15]
 80010ac:	b29a      	uxth	r2, r3
 80010ae:	f107 0310 	add.w	r3, r7, #16
 80010b2:	4619      	mov	r1, r3
 80010b4:	4821      	ldr	r0, [pc, #132]	; (800113c <Send_to_Node_Task_Func+0xe4>)
 80010b6:	f004 fb5f 	bl	8005778 <HAL_UART_Transmit_DMA>
 80010ba:	e7d9      	b.n	8001070 <Send_to_Node_Task_Func+0x18>
  }
        else if (local_Queue == IN_N_MNetwork_Send_Queue) // configuration for the send task.
 80010bc:	4b20      	ldr	r3, [pc, #128]	; (8001140 <Send_to_Node_Task_Func+0xe8>)
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80010c2:	429a      	cmp	r2, r3
 80010c4:	d11f      	bne.n	8001106 <Send_to_Node_Task_Func+0xae>
  {
            // receive the new address and change the address value.
   xQueueReceive(IN_N_MNetwork_Send_Queue, &DevAddress, 0);
 80010c6:	4b1e      	ldr	r3, [pc, #120]	; (8001140 <Send_to_Node_Task_Func+0xe8>)
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	f107 0143 	add.w	r1, r7, #67	; 0x43
 80010ce:	2200      	movs	r2, #0
 80010d0:	4618      	mov	r0, r3
 80010d2:	f009 fcc7 	bl	800aa64 <xQueueReceive>
            if(uxQueueMessagesWaiting(IN_N_MNetwork_Send_Queue_2) > 0)
 80010d6:	4b1b      	ldr	r3, [pc, #108]	; (8001144 <Send_to_Node_Task_Func+0xec>)
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	4618      	mov	r0, r3
 80010dc:	f009 feae 	bl	800ae3c <uxQueueMessagesWaiting>
 80010e0:	4603      	mov	r3, r0
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d0c4      	beq.n	8001070 <Send_to_Node_Task_Func+0x18>
            {
                // receive the new address and change the address value.
       xQueueReceive(IN_N_MNetwork_Send_Queue_2, &Request, 0);
 80010e6:	4b17      	ldr	r3, [pc, #92]	; (8001144 <Send_to_Node_Task_Func+0xec>)
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	f107 0142 	add.w	r1, r7, #66	; 0x42
 80010ee:	2200      	movs	r2, #0
 80010f0:	4618      	mov	r0, r3
 80010f2:	f009 fcb7 	bl	800aa64 <xQueueReceive>
                // send the data.
       HAL_UART_Transmit_DMA(&huart1, &Request, 1);
 80010f6:	f107 0342 	add.w	r3, r7, #66	; 0x42
 80010fa:	2201      	movs	r2, #1
 80010fc:	4619      	mov	r1, r3
 80010fe:	480f      	ldr	r0, [pc, #60]	; (800113c <Send_to_Node_Task_Func+0xe4>)
 8001100:	f004 fb3a 	bl	8005778 <HAL_UART_Transmit_DMA>
 8001104:	e7b4      	b.n	8001070 <Send_to_Node_Task_Func+0x18>
            }
  }
  else if (local_Queue == IN_N_CheckNet_Send_Queue)
 8001106:	4b10      	ldr	r3, [pc, #64]	; (8001148 <Send_to_Node_Task_Func+0xf0>)
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800110c:	429a      	cmp	r2, r3
 800110e:	d1af      	bne.n	8001070 <Send_to_Node_Task_Func+0x18>
  {
            // General call to recognize the nodes in the Network.
   xQueueReceive(IN_N_CheckNet_Send_Queue, &Request, 0);
 8001110:	4b0d      	ldr	r3, [pc, #52]	; (8001148 <Send_to_Node_Task_Func+0xf0>)
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	f107 0142 	add.w	r1, r7, #66	; 0x42
 8001118:	2200      	movs	r2, #0
 800111a:	4618      	mov	r0, r3
 800111c:	f009 fca2 	bl	800aa64 <xQueueReceive>
   // send the data.
   HAL_UART_Transmit_DMA(&huart1, &Request, 1);
 8001120:	f107 0342 	add.w	r3, r7, #66	; 0x42
 8001124:	2201      	movs	r2, #1
 8001126:	4619      	mov	r1, r3
 8001128:	4804      	ldr	r0, [pc, #16]	; (800113c <Send_to_Node_Task_Func+0xe4>)
 800112a:	f004 fb25 	bl	8005778 <HAL_UART_Transmit_DMA>
  local_Queue = xQueueSelectFromSet(N_Send_QueueSet, portMAX_DELAY);
 800112e:	e79f      	b.n	8001070 <Send_to_Node_Task_Func+0x18>
 8001130:	20000150 	.word	0x20000150
 8001134:	20000130 	.word	0x20000130
 8001138:	20000134 	.word	0x20000134
 800113c:	20001230 	.word	0x20001230
 8001140:	20000140 	.word	0x20000140
 8001144:	20000144 	.word	0x20000144
 8001148:	2000013c 	.word	0x2000013c

0800114c <Receive_from_Node_Task_Func>:
 }
}
// Global buffer that will rstore the coming ACKs.
uint8_t  ack_localBuffer[2];
void Receive_from_Node_Task_Func(void * pvParameters)
{
 800114c:	b580      	push	{r7, lr}
 800114e:	b084      	sub	sp, #16
 8001150:	af00      	add	r7, sp, #0
 8001152:	6078      	str	r0, [r7, #4]
 uint8_t  NodeNum;
    HAL_UART_Receive_DMA(&huart1, ack_localBuffer, 2);
 8001154:	2202      	movs	r2, #2
 8001156:	4911      	ldr	r1, [pc, #68]	; (800119c <Receive_from_Node_Task_Func+0x50>)
 8001158:	4811      	ldr	r0, [pc, #68]	; (80011a0 <Receive_from_Node_Task_Func+0x54>)
 800115a:	f004 fb89 	bl	8005870 <HAL_UART_Receive_DMA>
 while(1)
 {
  // 1- store the received data into the local buffer the max size is 2.
  xSemaphoreTake(IN_N_Receive_TRIG_Semaph , portMAX_DELAY);
 800115e:	4b11      	ldr	r3, [pc, #68]	; (80011a4 <Receive_from_Node_Task_Func+0x58>)
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	f04f 31ff 	mov.w	r1, #4294967295
 8001166:	4618      	mov	r0, r3
 8001168:	f009 fd5c 	bl	800ac24 <xQueueSemaphoreTake>

        // 2- get the Node ID from the Address value, and send it to the Manage Connection.
  NodeNum = ack_localBuffer[0];
 800116c:	4b0b      	ldr	r3, [pc, #44]	; (800119c <Receive_from_Node_Task_Func+0x50>)
 800116e:	781b      	ldrb	r3, [r3, #0]
 8001170:	73fb      	strb	r3, [r7, #15]
  xQueueSend(IN_N_Receive_MConn_Queue_2,&NodeNum,0);
 8001172:	4b0d      	ldr	r3, [pc, #52]	; (80011a8 <Receive_from_Node_Task_Func+0x5c>)
 8001174:	6818      	ldr	r0, [r3, #0]
 8001176:	f107 010f 	add.w	r1, r7, #15
 800117a:	2300      	movs	r3, #0
 800117c:	2200      	movs	r2, #0
 800117e:	f009 fab5 	bl	800a6ec <xQueueGenericSend>

  // 3- send the data to the manage connection task.
  xQueueSend(IN_N_Receive_MConn_Queue_1,&ack_localBuffer[1],0);
 8001182:	4b0a      	ldr	r3, [pc, #40]	; (80011ac <Receive_from_Node_Task_Func+0x60>)
 8001184:	6818      	ldr	r0, [r3, #0]
 8001186:	2300      	movs	r3, #0
 8001188:	2200      	movs	r2, #0
 800118a:	4909      	ldr	r1, [pc, #36]	; (80011b0 <Receive_from_Node_Task_Func+0x64>)
 800118c:	f009 faae 	bl	800a6ec <xQueueGenericSend>

        // 4- Restart the receiving again.
        HAL_UART_Receive_DMA(&huart1, ack_localBuffer, 2);
 8001190:	2202      	movs	r2, #2
 8001192:	4902      	ldr	r1, [pc, #8]	; (800119c <Receive_from_Node_Task_Func+0x50>)
 8001194:	4802      	ldr	r0, [pc, #8]	; (80011a0 <Receive_from_Node_Task_Func+0x54>)
 8001196:	f004 fb6b 	bl	8005870 <HAL_UART_Receive_DMA>
  xSemaphoreTake(IN_N_Receive_TRIG_Semaph , portMAX_DELAY);
 800119a:	e7e0      	b.n	800115e <Receive_from_Node_Task_Func+0x12>
 800119c:	200010b8 	.word	0x200010b8
 80011a0:	20001230 	.word	0x20001230
 80011a4:	20000178 	.word	0x20000178
 80011a8:	2000012c 	.word	0x2000012c
 80011ac:	20000128 	.word	0x20000128
 80011b0:	200010b9 	.word	0x200010b9

080011b4 <ResetBranch>:
 xSemaphoreGiveFromISR(IN_N_Receive_TRIG_Semaph, &xYieldRequired); // trigger the semaphore.
 portYIELD_FROM_ISR( xYieldRequired ); //Return to the RTOS.
}
/*----------------------------------------------------------------------------*/
void ResetBranch(void)
{
 80011b4:	b480      	push	{r7}
 80011b6:	af00      	add	r7, sp, #0
 flag_address_buffer_update=0;
 80011b8:	4b03      	ldr	r3, [pc, #12]	; (80011c8 <ResetBranch+0x14>)
 80011ba:	2200      	movs	r2, #0
 80011bc:	701a      	strb	r2, [r3, #0]
}
 80011be:	bf00      	nop
 80011c0:	46bd      	mov	sp, r7
 80011c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c6:	4770      	bx	lr
 80011c8:	200010b5 	.word	0x200010b5

080011cc <MX_FREERTOS_Init>:

/*@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@*/

/* USER CODE END Application */
void MX_FREERTOS_Init(void) {
 80011cc:	b580      	push	{r7, lr}
 80011ce:	b084      	sub	sp, #16
 80011d0:	af02      	add	r7, sp, #8
  /* USER CODE END Init */

  /* USER CODE BEGIN RTOS_SEMAPHORES */
  /* add semaphores, ... */
	// General Branches
	OUT_N_S_MConn_MNSD_Semph = xSemaphoreCreateBinary();
 80011d2:	2203      	movs	r2, #3
 80011d4:	2100      	movs	r1, #0
 80011d6:	2001      	movs	r0, #1
 80011d8:	f009 fa23 	bl	800a622 <xQueueGenericCreate>
 80011dc:	4603      	mov	r3, r0
 80011de:	4ac0      	ldr	r2, [pc, #768]	; (80014e0 <MX_FREERTOS_Init+0x314>)
 80011e0:	6013      	str	r3, [r2, #0]
	IN_S_MNSD_Receive_Semph	 = xSemaphoreCreateBinary();
 80011e2:	2203      	movs	r2, #3
 80011e4:	2100      	movs	r1, #0
 80011e6:	2001      	movs	r0, #1
 80011e8:	f009 fa1b 	bl	800a622 <xQueueGenericCreate>
 80011ec:	4603      	mov	r3, r0
 80011ee:	4abd      	ldr	r2, [pc, #756]	; (80014e4 <MX_FREERTOS_Init+0x318>)
 80011f0:	6013      	str	r3, [r2, #0]
	// General control
	// ESP
	Manage_ESP_Semph= xSemaphoreCreateBinary();;
 80011f2:	2203      	movs	r2, #3
 80011f4:	2100      	movs	r1, #0
 80011f6:	2001      	movs	r0, #1
 80011f8:	f009 fa13 	bl	800a622 <xQueueGenericCreate>
 80011fc:	4603      	mov	r3, r0
 80011fe:	4aba      	ldr	r2, [pc, #744]	; (80014e8 <MX_FREERTOS_Init+0x31c>)
 8001200:	6013      	str	r3, [r2, #0]
	Receive_Data_Semph= xSemaphoreCreateBinary();;
 8001202:	2203      	movs	r2, #3
 8001204:	2100      	movs	r1, #0
 8001206:	2001      	movs	r0, #1
 8001208:	f009 fa0b 	bl	800a622 <xQueueGenericCreate>
 800120c:	4603      	mov	r3, r0
 800120e:	4ab7      	ldr	r2, [pc, #732]	; (80014ec <MX_FREERTOS_Init+0x320>)
 8001210:	6013      	str	r3, [r2, #0]
	Send_MESP_Semph= xSemaphoreCreateBinary();;
 8001212:	2203      	movs	r2, #3
 8001214:	2100      	movs	r1, #0
 8001216:	2001      	movs	r0, #1
 8001218:	f009 fa03 	bl	800a622 <xQueueGenericCreate>
 800121c:	4603      	mov	r3, r0
 800121e:	4ab4      	ldr	r2, [pc, #720]	; (80014f0 <MX_FREERTOS_Init+0x324>)
 8001220:	6013      	str	r3, [r2, #0]
	Receive_MESP_Semph= xSemaphoreCreateBinary();;
 8001222:	2203      	movs	r2, #3
 8001224:	2100      	movs	r1, #0
 8001226:	2001      	movs	r0, #1
 8001228:	f009 f9fb 	bl	800a622 <xQueueGenericCreate>
 800122c:	4603      	mov	r3, r0
 800122e:	4ab1      	ldr	r2, [pc, #708]	; (80014f4 <MX_FREERTOS_Init+0x328>)
 8001230:	6013      	str	r3, [r2, #0]
	// SD

	// Nodes
	IN_N_CheckNet_Semph = xSemaphoreCreateBinary();
 8001232:	2203      	movs	r2, #3
 8001234:	2100      	movs	r1, #0
 8001236:	2001      	movs	r0, #1
 8001238:	f009 f9f3 	bl	800a622 <xQueueGenericCreate>
 800123c:	4603      	mov	r3, r0
 800123e:	4aae      	ldr	r2, [pc, #696]	; (80014f8 <MX_FREERTOS_Init+0x32c>)
 8001240:	6013      	str	r3, [r2, #0]
	IN_N_MConn_MNet_Semph = xSemaphoreCreateBinary();
 8001242:	2203      	movs	r2, #3
 8001244:	2100      	movs	r1, #0
 8001246:	2001      	movs	r0, #1
 8001248:	f009 f9eb 	bl	800a622 <xQueueGenericCreate>
 800124c:	4603      	mov	r3, r0
 800124e:	4aab      	ldr	r2, [pc, #684]	; (80014fc <MX_FREERTOS_Init+0x330>)
 8001250:	6013      	str	r3, [r2, #0]
	IN_N_Receive_TRIG_Semaph = xSemaphoreCreateBinary();
 8001252:	2203      	movs	r2, #3
 8001254:	2100      	movs	r1, #0
 8001256:	2001      	movs	r0, #1
 8001258:	f009 f9e3 	bl	800a622 <xQueueGenericCreate>
 800125c:	4603      	mov	r3, r0
 800125e:	4aa8      	ldr	r2, [pc, #672]	; (8001500 <MX_FREERTOS_Init+0x334>)
 8001260:	6013      	str	r3, [r2, #0]
  /* USER CODE END RTOS_SEMAPHORES */

  /* USER CODE BEGIN RTOS_TIMERS */
  /* start timers, add new ones, ... */
	Record_Timer = xTimerCreate("Record Timer", _1S_, pdTRUE, NULL, &vRecord_TimerCallBack ); // the periodic will change according to the flashing speed.
 8001262:	4ba8      	ldr	r3, [pc, #672]	; (8001504 <MX_FREERTOS_Init+0x338>)
 8001264:	9300      	str	r3, [sp, #0]
 8001266:	2300      	movs	r3, #0
 8001268:	2201      	movs	r2, #1
 800126a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800126e:	48a6      	ldr	r0, [pc, #664]	; (8001508 <MX_FREERTOS_Init+0x33c>)
 8001270:	f00b f8ac 	bl	800c3cc <xTimerCreate>
 8001274:	4603      	mov	r3, r0
 8001276:	4aa5      	ldr	r2, [pc, #660]	; (800150c <MX_FREERTOS_Init+0x340>)
 8001278:	6013      	str	r3, [r2, #0]
  /* USER CODE END RTOS_TIMERS */

  /* USER CODE BEGIN RTOS_QUEUES */
  /* add queues, ... */
	// General Branches
	S_Sec_ESP_TO_MSD_Queue	= xQueueCreate(1,sizeof(uint8_t));
 800127a:	2200      	movs	r2, #0
 800127c:	2101      	movs	r1, #1
 800127e:	2001      	movs	r0, #1
 8001280:	f009 f9cf 	bl	800a622 <xQueueGenericCreate>
 8001284:	4603      	mov	r3, r0
 8001286:	4aa2      	ldr	r2, [pc, #648]	; (8001510 <MX_FREERTOS_Init+0x344>)
 8001288:	6013      	str	r3, [r2, #0]
	OUT_S_E_MSD_MESP_Queue 	= xQueueCreate(2,sizeof(uint8_t));
 800128a:	2200      	movs	r2, #0
 800128c:	2101      	movs	r1, #1
 800128e:	2002      	movs	r0, #2
 8001290:	f009 f9c7 	bl	800a622 <xQueueGenericCreate>
 8001294:	4603      	mov	r3, r0
 8001296:	4a9f      	ldr	r2, [pc, #636]	; (8001514 <MX_FREERTOS_Init+0x348>)
 8001298:	6013      	str	r3, [r2, #0]
	OUT_E_S_MESP_MSD_Queue 	= xQueueCreate(2,sizeof(uint8_t));
 800129a:	2200      	movs	r2, #0
 800129c:	2101      	movs	r1, #1
 800129e:	2002      	movs	r0, #2
 80012a0:	f009 f9bf 	bl	800a622 <xQueueGenericCreate>
 80012a4:	4603      	mov	r3, r0
 80012a6:	4a9c      	ldr	r2, [pc, #624]	; (8001518 <MX_FREERTOS_Init+0x34c>)
 80012a8:	6013      	str	r3, [r2, #0]
	OUT_S_N_MSD_MNet_Queue 	= xQueueCreate(2,sizeof(uint8_t));
 80012aa:	2200      	movs	r2, #0
 80012ac:	2101      	movs	r1, #1
 80012ae:	2002      	movs	r0, #2
 80012b0:	f009 f9b7 	bl	800a622 <xQueueGenericCreate>
 80012b4:	4603      	mov	r3, r0
 80012b6:	4a99      	ldr	r2, [pc, #612]	; (800151c <MX_FREERTOS_Init+0x350>)
 80012b8:	6013      	str	r3, [r2, #0]
	OUT_S_N_MSD_MConn_Queue = xQueueCreate(2,sizeof(uint8_t));
 80012ba:	2200      	movs	r2, #0
 80012bc:	2101      	movs	r1, #1
 80012be:	2002      	movs	r0, #2
 80012c0:	f009 f9af 	bl	800a622 <xQueueGenericCreate>
 80012c4:	4603      	mov	r3, r0
 80012c6:	4a96      	ldr	r2, [pc, #600]	; (8001520 <MX_FREERTOS_Init+0x354>)
 80012c8:	6013      	str	r3, [r2, #0]
	OUT_N_S_MConn_MSD_Queue	= xQueueCreate(2,sizeof(uint8_t));
 80012ca:	2200      	movs	r2, #0
 80012cc:	2101      	movs	r1, #1
 80012ce:	2002      	movs	r0, #2
 80012d0:	f009 f9a7 	bl	800a622 <xQueueGenericCreate>
 80012d4:	4603      	mov	r3, r0
 80012d6:	4a93      	ldr	r2, [pc, #588]	; (8001524 <MX_FREERTOS_Init+0x358>)
 80012d8:	6013      	str	r3, [r2, #0]
	// General control
	IN_G_CBranch_CDMA_Queue = xQueueCreate(2,sizeof(uint8_t));
 80012da:	2200      	movs	r2, #0
 80012dc:	2101      	movs	r1, #1
 80012de:	2002      	movs	r0, #2
 80012e0:	f009 f99f 	bl	800a622 <xQueueGenericCreate>
 80012e4:	4603      	mov	r3, r0
 80012e6:	4a90      	ldr	r2, [pc, #576]	; (8001528 <MX_FREERTOS_Init+0x35c>)
 80012e8:	6013      	str	r3, [r2, #0]
	// ESP
	IN_E_Receive_MESP_Queue = xQueueCreate(128,sizeof(uint8_t));
 80012ea:	2200      	movs	r2, #0
 80012ec:	2101      	movs	r1, #1
 80012ee:	2080      	movs	r0, #128	; 0x80
 80012f0:	f009 f997 	bl	800a622 <xQueueGenericCreate>
 80012f4:	4603      	mov	r3, r0
 80012f6:	4a8d      	ldr	r2, [pc, #564]	; (800152c <MX_FREERTOS_Init+0x360>)
 80012f8:	6013      	str	r3, [r2, #0]
	IN_E_MESP_Send_Queue    = xQueueCreate(128,sizeof(uint8_t));
 80012fa:	2200      	movs	r2, #0
 80012fc:	2101      	movs	r1, #1
 80012fe:	2080      	movs	r0, #128	; 0x80
 8001300:	f009 f98f 	bl	800a622 <xQueueGenericCreate>
 8001304:	4603      	mov	r3, r0
 8001306:	4a8a      	ldr	r2, [pc, #552]	; (8001530 <MX_FREERTOS_Init+0x364>)
 8001308:	6013      	str	r3, [r2, #0]
	queue_sizefromsec    = xQueueCreate(1,sizeof(uint8_t));
 800130a:	2200      	movs	r2, #0
 800130c:	2101      	movs	r1, #1
 800130e:	2001      	movs	r0, #1
 8001310:	f009 f987 	bl	800a622 <xQueueGenericCreate>
 8001314:	4603      	mov	r3, r0
 8001316:	4a87      	ldr	r2, [pc, #540]	; (8001534 <MX_FREERTOS_Init+0x368>)
 8001318:	6013      	str	r3, [r2, #0]
	queue_send_ack_to_esp    = xQueueCreate(1,sizeof(uint8_t));
 800131a:	2200      	movs	r2, #0
 800131c:	2101      	movs	r1, #1
 800131e:	2001      	movs	r0, #1
 8001320:	f009 f97f 	bl	800a622 <xQueueGenericCreate>
 8001324:	4603      	mov	r3, r0
 8001326:	4a84      	ldr	r2, [pc, #528]	; (8001538 <MX_FREERTOS_Init+0x36c>)
 8001328:	6013      	str	r3, [r2, #0]
	// SD
	IN_S_Receive_MSD_Queue 	= xQueueCreate(50,sizeof(uint8_t));
 800132a:	2200      	movs	r2, #0
 800132c:	2101      	movs	r1, #1
 800132e:	2032      	movs	r0, #50	; 0x32
 8001330:	f009 f977 	bl	800a622 <xQueueGenericCreate>
 8001334:	4603      	mov	r3, r0
 8001336:	4a81      	ldr	r2, [pc, #516]	; (800153c <MX_FREERTOS_Init+0x370>)
 8001338:	6013      	str	r3, [r2, #0]
	IN_S_MSD_Send_Queue 	= xQueueCreate(128,sizeof(uint8_t));
 800133a:	2200      	movs	r2, #0
 800133c:	2101      	movs	r1, #1
 800133e:	2080      	movs	r0, #128	; 0x80
 8001340:	f009 f96f 	bl	800a622 <xQueueGenericCreate>
 8001344:	4603      	mov	r3, r0
 8001346:	4a7e      	ldr	r2, [pc, #504]	; (8001540 <MX_FREERTOS_Init+0x374>)
 8001348:	6013      	str	r3, [r2, #0]
	IN_S_Send_MSD_Queue 	= xQueueCreate(1,sizeof(uint8_t));
 800134a:	2200      	movs	r2, #0
 800134c:	2101      	movs	r1, #1
 800134e:	2001      	movs	r0, #1
 8001350:	f009 f967 	bl	800a622 <xQueueGenericCreate>
 8001354:	4603      	mov	r3, r0
 8001356:	4a7b      	ldr	r2, [pc, #492]	; (8001544 <MX_FREERTOS_Init+0x378>)
 8001358:	6013      	str	r3, [r2, #0]
	// Nodes
	IN_N_MNetwork_MConn_Queue   = xQueueCreate(1,sizeof(uint8_t));
 800135a:	2200      	movs	r2, #0
 800135c:	2101      	movs	r1, #1
 800135e:	2001      	movs	r0, #1
 8001360:	f009 f95f 	bl	800a622 <xQueueGenericCreate>
 8001364:	4603      	mov	r3, r0
 8001366:	4a78      	ldr	r2, [pc, #480]	; (8001548 <MX_FREERTOS_Init+0x37c>)
 8001368:	6013      	str	r3, [r2, #0]
	IN_N_Receive_MConn_Queue_1  = xQueueCreate(2,sizeof(uint8_t));
 800136a:	2200      	movs	r2, #0
 800136c:	2101      	movs	r1, #1
 800136e:	2002      	movs	r0, #2
 8001370:	f009 f957 	bl	800a622 <xQueueGenericCreate>
 8001374:	4603      	mov	r3, r0
 8001376:	4a75      	ldr	r2, [pc, #468]	; (800154c <MX_FREERTOS_Init+0x380>)
 8001378:	6013      	str	r3, [r2, #0]
	IN_N_Receive_MConn_Queue_2	= xQueueCreate(1,sizeof(uint8_t));
 800137a:	2200      	movs	r2, #0
 800137c:	2101      	movs	r1, #1
 800137e:	2001      	movs	r0, #1
 8001380:	f009 f94f 	bl	800a622 <xQueueGenericCreate>
 8001384:	4603      	mov	r3, r0
 8001386:	4a72      	ldr	r2, [pc, #456]	; (8001550 <MX_FREERTOS_Init+0x384>)
 8001388:	6013      	str	r3, [r2, #0]
	IN_N_MConn_Send_Queue_1 	= xQueueCreate(2,sizeof(uint8_t));
 800138a:	2200      	movs	r2, #0
 800138c:	2101      	movs	r1, #1
 800138e:	2002      	movs	r0, #2
 8001390:	f009 f947 	bl	800a622 <xQueueGenericCreate>
 8001394:	4603      	mov	r3, r0
 8001396:	4a6f      	ldr	r2, [pc, #444]	; (8001554 <MX_FREERTOS_Init+0x388>)
 8001398:	6013      	str	r3, [r2, #0]
	IN_N_MConn_Send_Queue_2	    = xQueueCreate(1,sizeof(uint8_t));
 800139a:	2200      	movs	r2, #0
 800139c:	2101      	movs	r1, #1
 800139e:	2001      	movs	r0, #1
 80013a0:	f009 f93f 	bl	800a622 <xQueueGenericCreate>
 80013a4:	4603      	mov	r3, r0
 80013a6:	4a6c      	ldr	r2, [pc, #432]	; (8001558 <MX_FREERTOS_Init+0x38c>)
 80013a8:	6013      	str	r3, [r2, #0]
	IN_N_Receive_CheckNet_Queue = xQueueCreate(1,sizeof(uint8_t));
 80013aa:	2200      	movs	r2, #0
 80013ac:	2101      	movs	r1, #1
 80013ae:	2001      	movs	r0, #1
 80013b0:	f009 f937 	bl	800a622 <xQueueGenericCreate>
 80013b4:	4603      	mov	r3, r0
 80013b6:	4a69      	ldr	r2, [pc, #420]	; (800155c <MX_FREERTOS_Init+0x390>)
 80013b8:	6013      	str	r3, [r2, #0]
	IN_N_CheckNet_Send_Queue   = xQueueCreate(1,sizeof(uint8_t));
 80013ba:	2200      	movs	r2, #0
 80013bc:	2101      	movs	r1, #1
 80013be:	2001      	movs	r0, #1
 80013c0:	f009 f92f 	bl	800a622 <xQueueGenericCreate>
 80013c4:	4603      	mov	r3, r0
 80013c6:	4a66      	ldr	r2, [pc, #408]	; (8001560 <MX_FREERTOS_Init+0x394>)
 80013c8:	6013      	str	r3, [r2, #0]
	IN_N_MNetwork_Send_Queue    = xQueueCreate(1,sizeof(uint8_t));
 80013ca:	2200      	movs	r2, #0
 80013cc:	2101      	movs	r1, #1
 80013ce:	2001      	movs	r0, #1
 80013d0:	f009 f927 	bl	800a622 <xQueueGenericCreate>
 80013d4:	4603      	mov	r3, r0
 80013d6:	4a63      	ldr	r2, [pc, #396]	; (8001564 <MX_FREERTOS_Init+0x398>)
 80013d8:	6013      	str	r3, [r2, #0]
	IN_N_MNetwork_Send_Queue_2 = xQueueCreate(1,sizeof(uint8_t));
 80013da:	2200      	movs	r2, #0
 80013dc:	2101      	movs	r1, #1
 80013de:	2001      	movs	r0, #1
 80013e0:	f009 f91f 	bl	800a622 <xQueueGenericCreate>
 80013e4:	4603      	mov	r3, r0
 80013e6:	4a60      	ldr	r2, [pc, #384]	; (8001568 <MX_FREERTOS_Init+0x39c>)
 80013e8:	6013      	str	r3, [r2, #0]
	IN_N_CheckNet_MNetwork_Queue= xQueueCreate(1,sizeof(uint8_t));
 80013ea:	2200      	movs	r2, #0
 80013ec:	2101      	movs	r1, #1
 80013ee:	2001      	movs	r0, #1
 80013f0:	f009 f917 	bl	800a622 <xQueueGenericCreate>
 80013f4:	4603      	mov	r3, r0
 80013f6:	4a5d      	ldr	r2, [pc, #372]	; (800156c <MX_FREERTOS_Init+0x3a0>)
 80013f8:	6013      	str	r3, [r2, #0]
	// QueueSet.
	MConn_QueueSet			= xQueueCreateSet(MConn_QueueSet_Size);
 80013fa:	2032      	movs	r0, #50	; 0x32
 80013fc:	f009 fed0 	bl	800b1a0 <xQueueCreateSet>
 8001400:	4603      	mov	r3, r0
 8001402:	4a5b      	ldr	r2, [pc, #364]	; (8001570 <MX_FREERTOS_Init+0x3a4>)
 8001404:	6013      	str	r3, [r2, #0]
	N_Send_QueueSet 		= xQueueCreateSet(N_Send_QueueSet_Size);
 8001406:	2032      	movs	r0, #50	; 0x32
 8001408:	f009 feca 	bl	800b1a0 <xQueueCreateSet>
 800140c:	4603      	mov	r3, r0
 800140e:	4a59      	ldr	r2, [pc, #356]	; (8001574 <MX_FREERTOS_Init+0x3a8>)
 8001410:	6013      	str	r3, [r2, #0]
	MSD_QueueSet 		    = xQueueCreateSet(200);
 8001412:	20c8      	movs	r0, #200	; 0xc8
 8001414:	f009 fec4 	bl	800b1a0 <xQueueCreateSet>
 8001418:	4603      	mov	r3, r0
 800141a:	4a57      	ldr	r2, [pc, #348]	; (8001578 <MX_FREERTOS_Init+0x3ac>)
 800141c:	6013      	str	r3, [r2, #0]

	// Add to set
	xQueueAddToSet(IN_N_Receive_MConn_Queue_1, MConn_QueueSet);
 800141e:	4b4b      	ldr	r3, [pc, #300]	; (800154c <MX_FREERTOS_Init+0x380>)
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	4a53      	ldr	r2, [pc, #332]	; (8001570 <MX_FREERTOS_Init+0x3a4>)
 8001424:	6812      	ldr	r2, [r2, #0]
 8001426:	4611      	mov	r1, r2
 8001428:	4618      	mov	r0, r3
 800142a:	f009 fec8 	bl	800b1be <xQueueAddToSet>
	xQueueAddToSet(OUT_S_N_MSD_MConn_Queue, MConn_QueueSet);
 800142e:	4b3c      	ldr	r3, [pc, #240]	; (8001520 <MX_FREERTOS_Init+0x354>)
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	4a4f      	ldr	r2, [pc, #316]	; (8001570 <MX_FREERTOS_Init+0x3a4>)
 8001434:	6812      	ldr	r2, [r2, #0]
 8001436:	4611      	mov	r1, r2
 8001438:	4618      	mov	r0, r3
 800143a:	f009 fec0 	bl	800b1be <xQueueAddToSet>
	xQueueAddToSet(IN_N_MNetwork_MConn_Queue, MConn_QueueSet);
 800143e:	4b42      	ldr	r3, [pc, #264]	; (8001548 <MX_FREERTOS_Init+0x37c>)
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	4a4b      	ldr	r2, [pc, #300]	; (8001570 <MX_FREERTOS_Init+0x3a4>)
 8001444:	6812      	ldr	r2, [r2, #0]
 8001446:	4611      	mov	r1, r2
 8001448:	4618      	mov	r0, r3
 800144a:	f009 feb8 	bl	800b1be <xQueueAddToSet>

	xQueueAddToSet(IN_N_MConn_Send_Queue_1, N_Send_QueueSet);
 800144e:	4b41      	ldr	r3, [pc, #260]	; (8001554 <MX_FREERTOS_Init+0x388>)
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	4a48      	ldr	r2, [pc, #288]	; (8001574 <MX_FREERTOS_Init+0x3a8>)
 8001454:	6812      	ldr	r2, [r2, #0]
 8001456:	4611      	mov	r1, r2
 8001458:	4618      	mov	r0, r3
 800145a:	f009 feb0 	bl	800b1be <xQueueAddToSet>
	xQueueAddToSet(IN_N_MNetwork_Send_Queue, N_Send_QueueSet);
 800145e:	4b41      	ldr	r3, [pc, #260]	; (8001564 <MX_FREERTOS_Init+0x398>)
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	4a44      	ldr	r2, [pc, #272]	; (8001574 <MX_FREERTOS_Init+0x3a8>)
 8001464:	6812      	ldr	r2, [r2, #0]
 8001466:	4611      	mov	r1, r2
 8001468:	4618      	mov	r0, r3
 800146a:	f009 fea8 	bl	800b1be <xQueueAddToSet>


	xQueueAddToSet( IN_S_Receive_MSD_Queue, MSD_QueueSet);
 800146e:	4b33      	ldr	r3, [pc, #204]	; (800153c <MX_FREERTOS_Init+0x370>)
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	4a41      	ldr	r2, [pc, #260]	; (8001578 <MX_FREERTOS_Init+0x3ac>)
 8001474:	6812      	ldr	r2, [r2, #0]
 8001476:	4611      	mov	r1, r2
 8001478:	4618      	mov	r0, r3
 800147a:	f009 fea0 	bl	800b1be <xQueueAddToSet>
	xQueueAddToSet( IN_S_Send_MSD_Queue , MSD_QueueSet);
 800147e:	4b31      	ldr	r3, [pc, #196]	; (8001544 <MX_FREERTOS_Init+0x378>)
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	4a3d      	ldr	r2, [pc, #244]	; (8001578 <MX_FREERTOS_Init+0x3ac>)
 8001484:	6812      	ldr	r2, [r2, #0]
 8001486:	4611      	mov	r1, r2
 8001488:	4618      	mov	r0, r3
 800148a:	f009 fe98 	bl	800b1be <xQueueAddToSet>
	xQueueAddToSet( OUT_N_S_MConn_MSD_Queue , MSD_QueueSet);
 800148e:	4b25      	ldr	r3, [pc, #148]	; (8001524 <MX_FREERTOS_Init+0x358>)
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	4a39      	ldr	r2, [pc, #228]	; (8001578 <MX_FREERTOS_Init+0x3ac>)
 8001494:	6812      	ldr	r2, [r2, #0]
 8001496:	4611      	mov	r1, r2
 8001498:	4618      	mov	r0, r3
 800149a:	f009 fe90 	bl	800b1be <xQueueAddToSet>
	xQueueAddToSet( OUT_E_S_MESP_MSD_Queue , MSD_QueueSet);
 800149e:	4b1e      	ldr	r3, [pc, #120]	; (8001518 <MX_FREERTOS_Init+0x34c>)
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	4a35      	ldr	r2, [pc, #212]	; (8001578 <MX_FREERTOS_Init+0x3ac>)
 80014a4:	6812      	ldr	r2, [r2, #0]
 80014a6:	4611      	mov	r1, r2
 80014a8:	4618      	mov	r0, r3
 80014aa:	f009 fe88 	bl	800b1be <xQueueAddToSet>
	xQueueAddToSet( S_Sec_ESP_TO_MSD_Queue , MSD_QueueSet);
 80014ae:	4b18      	ldr	r3, [pc, #96]	; (8001510 <MX_FREERTOS_Init+0x344>)
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	4a31      	ldr	r2, [pc, #196]	; (8001578 <MX_FREERTOS_Init+0x3ac>)
 80014b4:	6812      	ldr	r2, [r2, #0]
 80014b6:	4611      	mov	r1, r2
 80014b8:	4618      	mov	r0, r3
 80014ba:	f009 fe80 	bl	800b1be <xQueueAddToSet>

  /* Create the thread(s) */
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
	/* General Branch Fun */
	xTaskCreate( Check_Validity_Task_Func , "Check Validity"  , 100 , NULL , 26U , &Check_Validity_Task_Handler );
 80014be:	4b2f      	ldr	r3, [pc, #188]	; (800157c <MX_FREERTOS_Init+0x3b0>)
 80014c0:	9301      	str	r3, [sp, #4]
 80014c2:	231a      	movs	r3, #26
 80014c4:	9300      	str	r3, [sp, #0]
 80014c6:	2300      	movs	r3, #0
 80014c8:	2264      	movs	r2, #100	; 0x64
 80014ca:	492d      	ldr	r1, [pc, #180]	; (8001580 <MX_FREERTOS_Init+0x3b4>)
 80014cc:	482d      	ldr	r0, [pc, #180]	; (8001584 <MX_FREERTOS_Init+0x3b8>)
 80014ce:	f009 ff60 	bl	800b392 <xTaskCreate>
	/* General Control Branch Fun */
	xTaskCreate( Init_Deinit_Reset_Task_Func , "Initi,Deinit,and Reset"  , 100 , NULL , 30U , &Init_Deinit_Reset_Task_Handler );
 80014d2:	4b2d      	ldr	r3, [pc, #180]	; (8001588 <MX_FREERTOS_Init+0x3bc>)
 80014d4:	9301      	str	r3, [sp, #4]
 80014d6:	231e      	movs	r3, #30
 80014d8:	9300      	str	r3, [sp, #0]
 80014da:	2300      	movs	r3, #0
 80014dc:	e056      	b.n	800158c <MX_FREERTOS_Init+0x3c0>
 80014de:	bf00      	nop
 80014e0:	20000158 	.word	0x20000158
 80014e4:	2000016c 	.word	0x2000016c
 80014e8:	2000015c 	.word	0x2000015c
 80014ec:	20000160 	.word	0x20000160
 80014f0:	20000164 	.word	0x20000164
 80014f4:	20000168 	.word	0x20000168
 80014f8:	20000170 	.word	0x20000170
 80014fc:	20000174 	.word	0x20000174
 8001500:	20000178 	.word	0x20000178
 8001504:	080001f1 	.word	0x080001f1
 8001508:	0800d4b8 	.word	0x0800d4b8
 800150c:	2000017c 	.word	0x2000017c
 8001510:	200000ec 	.word	0x200000ec
 8001514:	200000f4 	.word	0x200000f4
 8001518:	200000f0 	.word	0x200000f0
 800151c:	200000f8 	.word	0x200000f8
 8001520:	200000fc 	.word	0x200000fc
 8001524:	20000100 	.word	0x20000100
 8001528:	20000104 	.word	0x20000104
 800152c:	20000108 	.word	0x20000108
 8001530:	2000010c 	.word	0x2000010c
 8001534:	20000110 	.word	0x20000110
 8001538:	20000114 	.word	0x20000114
 800153c:	20000118 	.word	0x20000118
 8001540:	2000011c 	.word	0x2000011c
 8001544:	20000120 	.word	0x20000120
 8001548:	20000124 	.word	0x20000124
 800154c:	20000128 	.word	0x20000128
 8001550:	2000012c 	.word	0x2000012c
 8001554:	20000130 	.word	0x20000130
 8001558:	20000134 	.word	0x20000134
 800155c:	20000138 	.word	0x20000138
 8001560:	2000013c 	.word	0x2000013c
 8001564:	20000140 	.word	0x20000140
 8001568:	20000144 	.word	0x20000144
 800156c:	20000148 	.word	0x20000148
 8001570:	2000014c 	.word	0x2000014c
 8001574:	20000150 	.word	0x20000150
 8001578:	20000154 	.word	0x20000154
 800157c:	200000b0 	.word	0x200000b0
 8001580:	0800d4c8 	.word	0x0800d4c8
 8001584:	08000205 	.word	0x08000205
 8001588:	200000b4 	.word	0x200000b4
 800158c:	2264      	movs	r2, #100	; 0x64
 800158e:	4955      	ldr	r1, [pc, #340]	; (80016e4 <MX_FREERTOS_Init+0x518>)
 8001590:	4855      	ldr	r0, [pc, #340]	; (80016e8 <MX_FREERTOS_Init+0x51c>)
 8001592:	f009 fefe 	bl	800b392 <xTaskCreate>
	xTaskCreate( Control_Branch_Task_Func , "Control Branch"  , 100 , NULL , 29U , &Control_Branch_Task_Handler );
 8001596:	4b55      	ldr	r3, [pc, #340]	; (80016ec <MX_FREERTOS_Init+0x520>)
 8001598:	9301      	str	r3, [sp, #4]
 800159a:	231d      	movs	r3, #29
 800159c:	9300      	str	r3, [sp, #0]
 800159e:	2300      	movs	r3, #0
 80015a0:	2264      	movs	r2, #100	; 0x64
 80015a2:	4953      	ldr	r1, [pc, #332]	; (80016f0 <MX_FREERTOS_Init+0x524>)
 80015a4:	4853      	ldr	r0, [pc, #332]	; (80016f4 <MX_FREERTOS_Init+0x528>)
 80015a6:	f009 fef4 	bl	800b392 <xTaskCreate>
	xTaskCreate( Control_DMA_Task_Func , "Control DMA"  , 100 , NULL , 28U , &Control_DMA_Task_Handler );
 80015aa:	4b53      	ldr	r3, [pc, #332]	; (80016f8 <MX_FREERTOS_Init+0x52c>)
 80015ac:	9301      	str	r3, [sp, #4]
 80015ae:	231c      	movs	r3, #28
 80015b0:	9300      	str	r3, [sp, #0]
 80015b2:	2300      	movs	r3, #0
 80015b4:	2264      	movs	r2, #100	; 0x64
 80015b6:	4951      	ldr	r1, [pc, #324]	; (80016fc <MX_FREERTOS_Init+0x530>)
 80015b8:	4851      	ldr	r0, [pc, #324]	; (8001700 <MX_FREERTOS_Init+0x534>)
 80015ba:	f009 feea 	bl	800b392 <xTaskCreate>
	/* ESP Branch Fun */
	xTaskCreate( Receive_from_ESP_Task_Func , "Receive from EST"  , 100 , NULL , 5U , &Receive_from_ESP_Task_Handler );
 80015be:	4b51      	ldr	r3, [pc, #324]	; (8001704 <MX_FREERTOS_Init+0x538>)
 80015c0:	9301      	str	r3, [sp, #4]
 80015c2:	2305      	movs	r3, #5
 80015c4:	9300      	str	r3, [sp, #0]
 80015c6:	2300      	movs	r3, #0
 80015c8:	2264      	movs	r2, #100	; 0x64
 80015ca:	494f      	ldr	r1, [pc, #316]	; (8001708 <MX_FREERTOS_Init+0x53c>)
 80015cc:	484f      	ldr	r0, [pc, #316]	; (800170c <MX_FREERTOS_Init+0x540>)
 80015ce:	f009 fee0 	bl	800b392 <xTaskCreate>
	xTaskCreate( Manage_ESP_Task_Func , "Manage ESP"  , 100 , NULL , 4U , &Manage_ESP_Task_Handler );
 80015d2:	4b4f      	ldr	r3, [pc, #316]	; (8001710 <MX_FREERTOS_Init+0x544>)
 80015d4:	9301      	str	r3, [sp, #4]
 80015d6:	2304      	movs	r3, #4
 80015d8:	9300      	str	r3, [sp, #0]
 80015da:	2300      	movs	r3, #0
 80015dc:	2264      	movs	r2, #100	; 0x64
 80015de:	494d      	ldr	r1, [pc, #308]	; (8001714 <MX_FREERTOS_Init+0x548>)
 80015e0:	484d      	ldr	r0, [pc, #308]	; (8001718 <MX_FREERTOS_Init+0x54c>)
 80015e2:	f009 fed6 	bl	800b392 <xTaskCreate>
	xTaskCreate( Send_to_ESP_Task_Func , "Send to ESP"  , 100 , NULL , 3U , &Send_to_ESP_Task_Handler );
 80015e6:	4b4d      	ldr	r3, [pc, #308]	; (800171c <MX_FREERTOS_Init+0x550>)
 80015e8:	9301      	str	r3, [sp, #4]
 80015ea:	2303      	movs	r3, #3
 80015ec:	9300      	str	r3, [sp, #0]
 80015ee:	2300      	movs	r3, #0
 80015f0:	2264      	movs	r2, #100	; 0x64
 80015f2:	494b      	ldr	r1, [pc, #300]	; (8001720 <MX_FREERTOS_Init+0x554>)
 80015f4:	484b      	ldr	r0, [pc, #300]	; (8001724 <MX_FREERTOS_Init+0x558>)
 80015f6:	f009 fecc 	bl	800b392 <xTaskCreate>
	/* SD Branch Fun */
	xTaskCreate( Manage_SD_Task_Func , "Manage SD"  , 700 , NULL , 5U , &Manage_SD_Task_Handler );
 80015fa:	4b4b      	ldr	r3, [pc, #300]	; (8001728 <MX_FREERTOS_Init+0x55c>)
 80015fc:	9301      	str	r3, [sp, #4]
 80015fe:	2305      	movs	r3, #5
 8001600:	9300      	str	r3, [sp, #0]
 8001602:	2300      	movs	r3, #0
 8001604:	f44f 722f 	mov.w	r2, #700	; 0x2bc
 8001608:	4948      	ldr	r1, [pc, #288]	; (800172c <MX_FREERTOS_Init+0x560>)
 800160a:	4849      	ldr	r0, [pc, #292]	; (8001730 <MX_FREERTOS_Init+0x564>)
 800160c:	f009 fec1 	bl	800b392 <xTaskCreate>
	xTaskCreate( Send_to_SD_Task_Func , "Send to SD"  , 100 , NULL , 4U , &Send_to_SD_Task_Handler );
 8001610:	4b48      	ldr	r3, [pc, #288]	; (8001734 <MX_FREERTOS_Init+0x568>)
 8001612:	9301      	str	r3, [sp, #4]
 8001614:	2304      	movs	r3, #4
 8001616:	9300      	str	r3, [sp, #0]
 8001618:	2300      	movs	r3, #0
 800161a:	2264      	movs	r2, #100	; 0x64
 800161c:	4946      	ldr	r1, [pc, #280]	; (8001738 <MX_FREERTOS_Init+0x56c>)
 800161e:	4847      	ldr	r0, [pc, #284]	; (800173c <MX_FREERTOS_Init+0x570>)
 8001620:	f009 feb7 	bl	800b392 <xTaskCreate>
	xTaskCreate( Receive_from_SD_Task_Func , "Receive from SD"  , 100 , NULL , 3U , &Receive_from_SD_Task_Handler );
 8001624:	4b46      	ldr	r3, [pc, #280]	; (8001740 <MX_FREERTOS_Init+0x574>)
 8001626:	9301      	str	r3, [sp, #4]
 8001628:	2303      	movs	r3, #3
 800162a:	9300      	str	r3, [sp, #0]
 800162c:	2300      	movs	r3, #0
 800162e:	2264      	movs	r2, #100	; 0x64
 8001630:	4944      	ldr	r1, [pc, #272]	; (8001744 <MX_FREERTOS_Init+0x578>)
 8001632:	4845      	ldr	r0, [pc, #276]	; (8001748 <MX_FREERTOS_Init+0x57c>)
 8001634:	f009 fead 	bl	800b392 <xTaskCreate>
	/* Main Nodes Branch Fun */
	xTaskCreate( Check_Network_Task_Func , "Check Network"  , 100 , NULL , 5U , &Check_Network_Task_Handler );
 8001638:	4b44      	ldr	r3, [pc, #272]	; (800174c <MX_FREERTOS_Init+0x580>)
 800163a:	9301      	str	r3, [sp, #4]
 800163c:	2305      	movs	r3, #5
 800163e:	9300      	str	r3, [sp, #0]
 8001640:	2300      	movs	r3, #0
 8001642:	2264      	movs	r2, #100	; 0x64
 8001644:	4942      	ldr	r1, [pc, #264]	; (8001750 <MX_FREERTOS_Init+0x584>)
 8001646:	4843      	ldr	r0, [pc, #268]	; (8001754 <MX_FREERTOS_Init+0x588>)
 8001648:	f009 fea3 	bl	800b392 <xTaskCreate>
	xTaskCreate( Manage_Network_Task_Func , "Manage Network"  , 100 , NULL , 4U , &Manage_Network_Task_Handler );
 800164c:	4b42      	ldr	r3, [pc, #264]	; (8001758 <MX_FREERTOS_Init+0x58c>)
 800164e:	9301      	str	r3, [sp, #4]
 8001650:	2304      	movs	r3, #4
 8001652:	9300      	str	r3, [sp, #0]
 8001654:	2300      	movs	r3, #0
 8001656:	2264      	movs	r2, #100	; 0x64
 8001658:	4940      	ldr	r1, [pc, #256]	; (800175c <MX_FREERTOS_Init+0x590>)
 800165a:	4841      	ldr	r0, [pc, #260]	; (8001760 <MX_FREERTOS_Init+0x594>)
 800165c:	f009 fe99 	bl	800b392 <xTaskCreate>
	xTaskCreate( Receive_from_Node_Task_Func , "Receive from Node"  , 100 , NULL , 3U , &Receive_from_Node_Task_Handler );
 8001660:	4b40      	ldr	r3, [pc, #256]	; (8001764 <MX_FREERTOS_Init+0x598>)
 8001662:	9301      	str	r3, [sp, #4]
 8001664:	2303      	movs	r3, #3
 8001666:	9300      	str	r3, [sp, #0]
 8001668:	2300      	movs	r3, #0
 800166a:	2264      	movs	r2, #100	; 0x64
 800166c:	493e      	ldr	r1, [pc, #248]	; (8001768 <MX_FREERTOS_Init+0x59c>)
 800166e:	483f      	ldr	r0, [pc, #252]	; (800176c <MX_FREERTOS_Init+0x5a0>)
 8001670:	f009 fe8f 	bl	800b392 <xTaskCreate>
	xTaskCreate( Manage_Connection_Task_Func , "Manage Connection"  , 100 , NULL , 2U , &Manage_Connection_Task_Handler );
 8001674:	4b3e      	ldr	r3, [pc, #248]	; (8001770 <MX_FREERTOS_Init+0x5a4>)
 8001676:	9301      	str	r3, [sp, #4]
 8001678:	2302      	movs	r3, #2
 800167a:	9300      	str	r3, [sp, #0]
 800167c:	2300      	movs	r3, #0
 800167e:	2264      	movs	r2, #100	; 0x64
 8001680:	493c      	ldr	r1, [pc, #240]	; (8001774 <MX_FREERTOS_Init+0x5a8>)
 8001682:	483d      	ldr	r0, [pc, #244]	; (8001778 <MX_FREERTOS_Init+0x5ac>)
 8001684:	f009 fe85 	bl	800b392 <xTaskCreate>
	xTaskCreate( Send_to_Node_Task_Func , "Send to Node"  , 100 , NULL , 1U , &Send_to_Node_Task_Handler );
 8001688:	4b3c      	ldr	r3, [pc, #240]	; (800177c <MX_FREERTOS_Init+0x5b0>)
 800168a:	9301      	str	r3, [sp, #4]
 800168c:	2301      	movs	r3, #1
 800168e:	9300      	str	r3, [sp, #0]
 8001690:	2300      	movs	r3, #0
 8001692:	2264      	movs	r2, #100	; 0x64
 8001694:	493a      	ldr	r1, [pc, #232]	; (8001780 <MX_FREERTOS_Init+0x5b4>)
 8001696:	483b      	ldr	r0, [pc, #236]	; (8001784 <MX_FREERTOS_Init+0x5b8>)
 8001698:	f009 fe7b 	bl	800b392 <xTaskCreate>
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */


	//  init
	    uint8_t blocks_num = 2;
 800169c:	2302      	movs	r3, #2
 800169e:	71fb      	strb	r3, [r7, #7]
	    uint8_t NodeNum = 1;
 80016a0:	2301      	movs	r3, #1
 80016a2:	71bb      	strb	r3, [r7, #6]
	    xQueueSend(S_Sec_ESP_TO_MSD_Queue,&NodeNum,100/*block time*/);//nodenum
 80016a4:	4b38      	ldr	r3, [pc, #224]	; (8001788 <MX_FREERTOS_Init+0x5bc>)
 80016a6:	6818      	ldr	r0, [r3, #0]
 80016a8:	1db9      	adds	r1, r7, #6
 80016aa:	2300      	movs	r3, #0
 80016ac:	2264      	movs	r2, #100	; 0x64
 80016ae:	f009 f81d 	bl	800a6ec <xQueueGenericSend>

	    xSemaphoreGive(Manage_ESP_Semph);
 80016b2:	4b36      	ldr	r3, [pc, #216]	; (800178c <MX_FREERTOS_Init+0x5c0>)
 80016b4:	6818      	ldr	r0, [r3, #0]
 80016b6:	2300      	movs	r3, #0
 80016b8:	2200      	movs	r2, #0
 80016ba:	2100      	movs	r1, #0
 80016bc:	f009 f816 	bl	800a6ec <xQueueGenericSend>
	    xQueueSend(queue_sizefromsec,&blocks_num,100/*block time*/);
 80016c0:	4b33      	ldr	r3, [pc, #204]	; (8001790 <MX_FREERTOS_Init+0x5c4>)
 80016c2:	6818      	ldr	r0, [r3, #0]
 80016c4:	1df9      	adds	r1, r7, #7
 80016c6:	2300      	movs	r3, #0
 80016c8:	2264      	movs	r2, #100	; 0x64
 80016ca:	f009 f80f 	bl	800a6ec <xQueueGenericSend>
	    xSemaphoreGive(Receive_Data_Semph);
 80016ce:	4b31      	ldr	r3, [pc, #196]	; (8001794 <MX_FREERTOS_Init+0x5c8>)
 80016d0:	6818      	ldr	r0, [r3, #0]
 80016d2:	2300      	movs	r3, #0
 80016d4:	2200      	movs	r2, #0
 80016d6:	2100      	movs	r1, #0
 80016d8:	f009 f808 	bl	800a6ec <xQueueGenericSend>

  /* USER CODE END RTOS_EVENTS */



}
 80016dc:	bf00      	nop
 80016de:	3708      	adds	r7, #8
 80016e0:	46bd      	mov	sp, r7
 80016e2:	bd80      	pop	{r7, pc}
 80016e4:	0800d4d8 	.word	0x0800d4d8
 80016e8:	0800020f 	.word	0x0800020f
 80016ec:	200000b8 	.word	0x200000b8
 80016f0:	0800d4f0 	.word	0x0800d4f0
 80016f4:	08000219 	.word	0x08000219
 80016f8:	200000bc 	.word	0x200000bc
 80016fc:	0800d500 	.word	0x0800d500
 8001700:	08000223 	.word	0x08000223
 8001704:	200000c8 	.word	0x200000c8
 8001708:	0800d50c 	.word	0x0800d50c
 800170c:	08000395 	.word	0x08000395
 8001710:	200000c0 	.word	0x200000c0
 8001714:	0800d520 	.word	0x0800d520
 8001718:	0800022d 	.word	0x0800022d
 800171c:	200000c4 	.word	0x200000c4
 8001720:	0800d52c 	.word	0x0800d52c
 8001724:	08000325 	.word	0x08000325
 8001728:	200000cc 	.word	0x200000cc
 800172c:	0800d538 	.word	0x0800d538
 8001730:	080003f9 	.word	0x080003f9
 8001734:	200000d0 	.word	0x200000d0
 8001738:	0800d544 	.word	0x0800d544
 800173c:	08000955 	.word	0x08000955
 8001740:	200000d4 	.word	0x200000d4
 8001744:	0800d550 	.word	0x0800d550
 8001748:	080009f5 	.word	0x080009f5
 800174c:	200000d8 	.word	0x200000d8
 8001750:	0800d560 	.word	0x0800d560
 8001754:	08000add 	.word	0x08000add
 8001758:	200000dc 	.word	0x200000dc
 800175c:	0800d570 	.word	0x0800d570
 8001760:	08000b59 	.word	0x08000b59
 8001764:	200000e4 	.word	0x200000e4
 8001768:	0800d580 	.word	0x0800d580
 800176c:	0800114d 	.word	0x0800114d
 8001770:	200000e0 	.word	0x200000e0
 8001774:	0800d594 	.word	0x0800d594
 8001778:	08000c85 	.word	0x08000c85
 800177c:	200000e8 	.word	0x200000e8
 8001780:	0800d5a8 	.word	0x0800d5a8
 8001784:	08001059 	.word	0x08001059
 8001788:	200000ec 	.word	0x200000ec
 800178c:	2000015c 	.word	0x2000015c
 8001790:	20000110 	.word	0x20000110
 8001794:	20000160 	.word	0x20000160

08001798 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001798:	b580      	push	{r7, lr}
 800179a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_10, GPIO_PIN_RESET);
 800179c:	2200      	movs	r2, #0
 800179e:	f240 410c 	movw	r1, #1036	; 0x40c
 80017a2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80017a6:	f001 f8bd 	bl	8002924 <HAL_GPIO_WritePin>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80017aa:	f000 fc65 	bl	8002078 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80017ae:	f000 f821 	bl	80017f4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80017b2:	f000 f959 	bl	8001a68 <MX_GPIO_Init>
  MX_DMA_Init();
 80017b6:	f000 f911 	bl	80019dc <MX_DMA_Init>
//  MX_I2C1_Init();
  MX_SPI2_Init();
 80017ba:	f000 f871 	bl	80018a0 <MX_SPI2_Init>
  MX_USART1_UART_Init();
 80017be:	f000 f8ad 	bl	800191c <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 80017c2:	f000 f8db 	bl	800197c <MX_USART3_UART_Init>
  MX_FREERTOS_Init();
 80017c6:	f7ff fd01 	bl	80011cc <MX_FREERTOS_Init>
  MX_FATFS_Init();
 80017ca:	f004 fecd 	bl	8006568 <MX_FATFS_Init>


  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80017ce:	f008 fc21 	bl	800a014 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80017d2:	4a05      	ldr	r2, [pc, #20]	; (80017e8 <main+0x50>)
 80017d4:	2100      	movs	r1, #0
 80017d6:	4805      	ldr	r0, [pc, #20]	; (80017ec <main+0x54>)
 80017d8:	f008 fc84 	bl	800a0e4 <osThreadNew>
 80017dc:	4603      	mov	r3, r0
 80017de:	4a04      	ldr	r2, [pc, #16]	; (80017f0 <main+0x58>)
 80017e0:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80017e2:	f008 fc4b 	bl	800a07c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80017e6:	e7fe      	b.n	80017e6 <main+0x4e>
 80017e8:	0800d620 	.word	0x0800d620
 80017ec:	08001b15 	.word	0x08001b15
 80017f0:	200013c8 	.word	0x200013c8

080017f4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80017f4:	b580      	push	{r7, lr}
 80017f6:	b0a6      	sub	sp, #152	; 0x98
 80017f8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80017fa:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80017fe:	2228      	movs	r2, #40	; 0x28
 8001800:	2100      	movs	r1, #0
 8001802:	4618      	mov	r0, r3
 8001804:	f00b fd2a 	bl	800d25c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001808:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800180c:	2200      	movs	r2, #0
 800180e:	601a      	str	r2, [r3, #0]
 8001810:	605a      	str	r2, [r3, #4]
 8001812:	609a      	str	r2, [r3, #8]
 8001814:	60da      	str	r2, [r3, #12]
 8001816:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001818:	1d3b      	adds	r3, r7, #4
 800181a:	2258      	movs	r2, #88	; 0x58
 800181c:	2100      	movs	r1, #0
 800181e:	4618      	mov	r0, r3
 8001820:	f00b fd1c 	bl	800d25c <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001824:	2302      	movs	r3, #2
 8001826:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001828:	2301      	movs	r3, #1
 800182a:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800182c:	2310      	movs	r3, #16
 800182e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001832:	2300      	movs	r3, #0
 8001834:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001838:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800183c:	4618      	mov	r0, r3
 800183e:	f001 f8a3 	bl	8002988 <HAL_RCC_OscConfig>
 8001842:	4603      	mov	r3, r0
 8001844:	2b00      	cmp	r3, #0
 8001846:	d001      	beq.n	800184c <SystemClock_Config+0x58>
  {
    Error_Handler();
 8001848:	f000 f97e 	bl	8001b48 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800184c:	230f      	movs	r3, #15
 800184e:	65fb      	str	r3, [r7, #92]	; 0x5c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001850:	2300      	movs	r3, #0
 8001852:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001854:	2300      	movs	r3, #0
 8001856:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001858:	2300      	movs	r3, #0
 800185a:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800185c:	2300      	movs	r3, #0
 800185e:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001860:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001864:	2100      	movs	r1, #0
 8001866:	4618      	mov	r0, r3
 8001868:	f002 f8e2 	bl	8003a30 <HAL_RCC_ClockConfig>
 800186c:	4603      	mov	r3, r0
 800186e:	2b00      	cmp	r3, #0
 8001870:	d001      	beq.n	8001876 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8001872:	f000 f969 	bl	8001b48 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_USART3
 8001876:	2325      	movs	r3, #37	; 0x25
 8001878:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_I2C1;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800187a:	2300      	movs	r3, #0
 800187c:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 800187e:	2300      	movs	r3, #0
 8001880:	617b      	str	r3, [r7, #20]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8001882:	2300      	movs	r3, #0
 8001884:	623b      	str	r3, [r7, #32]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001886:	1d3b      	adds	r3, r7, #4
 8001888:	4618      	mov	r0, r3
 800188a:	f002 fb39 	bl	8003f00 <HAL_RCCEx_PeriphCLKConfig>
 800188e:	4603      	mov	r3, r0
 8001890:	2b00      	cmp	r3, #0
 8001892:	d001      	beq.n	8001898 <SystemClock_Config+0xa4>
  {
    Error_Handler();
 8001894:	f000 f958 	bl	8001b48 <Error_Handler>
  }
}
 8001898:	bf00      	nop
 800189a:	3798      	adds	r7, #152	; 0x98
 800189c:	46bd      	mov	sp, r7
 800189e:	bd80      	pop	{r7, pc}

080018a0 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80018a0:	b580      	push	{r7, lr}
 80018a2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80018a4:	4b1b      	ldr	r3, [pc, #108]	; (8001914 <MX_SPI2_Init+0x74>)
 80018a6:	4a1c      	ldr	r2, [pc, #112]	; (8001918 <MX_SPI2_Init+0x78>)
 80018a8:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80018aa:	4b1a      	ldr	r3, [pc, #104]	; (8001914 <MX_SPI2_Init+0x74>)
 80018ac:	f44f 7282 	mov.w	r2, #260	; 0x104
 80018b0:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80018b2:	4b18      	ldr	r3, [pc, #96]	; (8001914 <MX_SPI2_Init+0x74>)
 80018b4:	2200      	movs	r2, #0
 80018b6:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80018b8:	4b16      	ldr	r3, [pc, #88]	; (8001914 <MX_SPI2_Init+0x74>)
 80018ba:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80018be:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80018c0:	4b14      	ldr	r3, [pc, #80]	; (8001914 <MX_SPI2_Init+0x74>)
 80018c2:	2200      	movs	r2, #0
 80018c4:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80018c6:	4b13      	ldr	r3, [pc, #76]	; (8001914 <MX_SPI2_Init+0x74>)
 80018c8:	2200      	movs	r2, #0
 80018ca:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80018cc:	4b11      	ldr	r3, [pc, #68]	; (8001914 <MX_SPI2_Init+0x74>)
 80018ce:	f44f 7200 	mov.w	r2, #512	; 0x200
 80018d2:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 80018d4:	4b0f      	ldr	r3, [pc, #60]	; (8001914 <MX_SPI2_Init+0x74>)
 80018d6:	2230      	movs	r2, #48	; 0x30
 80018d8:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80018da:	4b0e      	ldr	r3, [pc, #56]	; (8001914 <MX_SPI2_Init+0x74>)
 80018dc:	2200      	movs	r2, #0
 80018de:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80018e0:	4b0c      	ldr	r3, [pc, #48]	; (8001914 <MX_SPI2_Init+0x74>)
 80018e2:	2200      	movs	r2, #0
 80018e4:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80018e6:	4b0b      	ldr	r3, [pc, #44]	; (8001914 <MX_SPI2_Init+0x74>)
 80018e8:	2200      	movs	r2, #0
 80018ea:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 80018ec:	4b09      	ldr	r3, [pc, #36]	; (8001914 <MX_SPI2_Init+0x74>)
 80018ee:	2207      	movs	r2, #7
 80018f0:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80018f2:	4b08      	ldr	r3, [pc, #32]	; (8001914 <MX_SPI2_Init+0x74>)
 80018f4:	2200      	movs	r2, #0
 80018f6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80018f8:	4b06      	ldr	r3, [pc, #24]	; (8001914 <MX_SPI2_Init+0x74>)
 80018fa:	2208      	movs	r2, #8
 80018fc:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80018fe:	4805      	ldr	r0, [pc, #20]	; (8001914 <MX_SPI2_Init+0x74>)
 8001900:	f002 fd1c 	bl	800433c <HAL_SPI_Init>
 8001904:	4603      	mov	r3, r0
 8001906:	2b00      	cmp	r3, #0
 8001908:	d001      	beq.n	800190e <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 800190a:	f000 f91d 	bl	8001b48 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800190e:	bf00      	nop
 8001910:	bd80      	pop	{r7, pc}
 8001912:	bf00      	nop
 8001914:	20001144 	.word	0x20001144
 8001918:	40003800 	.word	0x40003800

0800191c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800191c:	b580      	push	{r7, lr}
 800191e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001920:	4b14      	ldr	r3, [pc, #80]	; (8001974 <MX_USART1_UART_Init+0x58>)
 8001922:	4a15      	ldr	r2, [pc, #84]	; (8001978 <MX_USART1_UART_Init+0x5c>)
 8001924:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8001926:	4b13      	ldr	r3, [pc, #76]	; (8001974 <MX_USART1_UART_Init+0x58>)
 8001928:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800192c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800192e:	4b11      	ldr	r3, [pc, #68]	; (8001974 <MX_USART1_UART_Init+0x58>)
 8001930:	2200      	movs	r2, #0
 8001932:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001934:	4b0f      	ldr	r3, [pc, #60]	; (8001974 <MX_USART1_UART_Init+0x58>)
 8001936:	2200      	movs	r2, #0
 8001938:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800193a:	4b0e      	ldr	r3, [pc, #56]	; (8001974 <MX_USART1_UART_Init+0x58>)
 800193c:	2200      	movs	r2, #0
 800193e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001940:	4b0c      	ldr	r3, [pc, #48]	; (8001974 <MX_USART1_UART_Init+0x58>)
 8001942:	220c      	movs	r2, #12
 8001944:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001946:	4b0b      	ldr	r3, [pc, #44]	; (8001974 <MX_USART1_UART_Init+0x58>)
 8001948:	2200      	movs	r2, #0
 800194a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800194c:	4b09      	ldr	r3, [pc, #36]	; (8001974 <MX_USART1_UART_Init+0x58>)
 800194e:	2200      	movs	r2, #0
 8001950:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001952:	4b08      	ldr	r3, [pc, #32]	; (8001974 <MX_USART1_UART_Init+0x58>)
 8001954:	2200      	movs	r2, #0
 8001956:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001958:	4b06      	ldr	r3, [pc, #24]	; (8001974 <MX_USART1_UART_Init+0x58>)
 800195a:	2200      	movs	r2, #0
 800195c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800195e:	4805      	ldr	r0, [pc, #20]	; (8001974 <MX_USART1_UART_Init+0x58>)
 8001960:	f003 fd68 	bl	8005434 <HAL_UART_Init>
 8001964:	4603      	mov	r3, r0
 8001966:	2b00      	cmp	r3, #0
 8001968:	d001      	beq.n	800196e <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 800196a:	f000 f8ed 	bl	8001b48 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800196e:	bf00      	nop
 8001970:	bd80      	pop	{r7, pc}
 8001972:	bf00      	nop
 8001974:	20001230 	.word	0x20001230
 8001978:	40013800 	.word	0x40013800

0800197c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 800197c:	b580      	push	{r7, lr}
 800197e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001980:	4b14      	ldr	r3, [pc, #80]	; (80019d4 <MX_USART3_UART_Init+0x58>)
 8001982:	4a15      	ldr	r2, [pc, #84]	; (80019d8 <MX_USART3_UART_Init+0x5c>)
 8001984:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8001986:	4b13      	ldr	r3, [pc, #76]	; (80019d4 <MX_USART3_UART_Init+0x58>)
 8001988:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800198c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800198e:	4b11      	ldr	r3, [pc, #68]	; (80019d4 <MX_USART3_UART_Init+0x58>)
 8001990:	2200      	movs	r2, #0
 8001992:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001994:	4b0f      	ldr	r3, [pc, #60]	; (80019d4 <MX_USART3_UART_Init+0x58>)
 8001996:	2200      	movs	r2, #0
 8001998:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800199a:	4b0e      	ldr	r3, [pc, #56]	; (80019d4 <MX_USART3_UART_Init+0x58>)
 800199c:	2200      	movs	r2, #0
 800199e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80019a0:	4b0c      	ldr	r3, [pc, #48]	; (80019d4 <MX_USART3_UART_Init+0x58>)
 80019a2:	220c      	movs	r2, #12
 80019a4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80019a6:	4b0b      	ldr	r3, [pc, #44]	; (80019d4 <MX_USART3_UART_Init+0x58>)
 80019a8:	2200      	movs	r2, #0
 80019aa:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80019ac:	4b09      	ldr	r3, [pc, #36]	; (80019d4 <MX_USART3_UART_Init+0x58>)
 80019ae:	2200      	movs	r2, #0
 80019b0:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80019b2:	4b08      	ldr	r3, [pc, #32]	; (80019d4 <MX_USART3_UART_Init+0x58>)
 80019b4:	2200      	movs	r2, #0
 80019b6:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80019b8:	4b06      	ldr	r3, [pc, #24]	; (80019d4 <MX_USART3_UART_Init+0x58>)
 80019ba:	2200      	movs	r2, #0
 80019bc:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80019be:	4805      	ldr	r0, [pc, #20]	; (80019d4 <MX_USART3_UART_Init+0x58>)
 80019c0:	f003 fd38 	bl	8005434 <HAL_UART_Init>
 80019c4:	4603      	mov	r3, r0
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d001      	beq.n	80019ce <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 80019ca:	f000 f8bd 	bl	8001b48 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80019ce:	bf00      	nop
 80019d0:	bd80      	pop	{r7, pc}
 80019d2:	bf00      	nop
 80019d4:	200012b8 	.word	0x200012b8
 80019d8:	40004800 	.word	0x40004800

080019dc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80019dc:	b580      	push	{r7, lr}
 80019de:	b082      	sub	sp, #8
 80019e0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80019e2:	4b20      	ldr	r3, [pc, #128]	; (8001a64 <MX_DMA_Init+0x88>)
 80019e4:	695b      	ldr	r3, [r3, #20]
 80019e6:	4a1f      	ldr	r2, [pc, #124]	; (8001a64 <MX_DMA_Init+0x88>)
 80019e8:	f043 0301 	orr.w	r3, r3, #1
 80019ec:	6153      	str	r3, [r2, #20]
 80019ee:	4b1d      	ldr	r3, [pc, #116]	; (8001a64 <MX_DMA_Init+0x88>)
 80019f0:	695b      	ldr	r3, [r3, #20]
 80019f2:	f003 0301 	and.w	r3, r3, #1
 80019f6:	607b      	str	r3, [r7, #4]
 80019f8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 5, 0);
 80019fa:	2200      	movs	r2, #0
 80019fc:	2105      	movs	r1, #5
 80019fe:	200c      	movs	r0, #12
 8001a00:	f000 fc28 	bl	8002254 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8001a04:	200c      	movs	r0, #12
 8001a06:	f000 fc41 	bl	800228c <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 5, 0);
 8001a0a:	2200      	movs	r2, #0
 8001a0c:	2105      	movs	r1, #5
 8001a0e:	200d      	movs	r0, #13
 8001a10:	f000 fc20 	bl	8002254 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8001a14:	200d      	movs	r0, #13
 8001a16:	f000 fc39 	bl	800228c <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 5, 0);
 8001a1a:	2200      	movs	r2, #0
 8001a1c:	2105      	movs	r1, #5
 8001a1e:	200e      	movs	r0, #14
 8001a20:	f000 fc18 	bl	8002254 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8001a24:	200e      	movs	r0, #14
 8001a26:	f000 fc31 	bl	800228c <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 5, 0);
 8001a2a:	2200      	movs	r2, #0
 8001a2c:	2105      	movs	r1, #5
 8001a2e:	200f      	movs	r0, #15
 8001a30:	f000 fc10 	bl	8002254 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8001a34:	200f      	movs	r0, #15
 8001a36:	f000 fc29 	bl	800228c <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 5, 0);
 8001a3a:	2200      	movs	r2, #0
 8001a3c:	2105      	movs	r1, #5
 8001a3e:	2010      	movs	r0, #16
 8001a40:	f000 fc08 	bl	8002254 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8001a44:	2010      	movs	r0, #16
 8001a46:	f000 fc21 	bl	800228c <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 5, 0);
 8001a4a:	2200      	movs	r2, #0
 8001a4c:	2105      	movs	r1, #5
 8001a4e:	2011      	movs	r0, #17
 8001a50:	f000 fc00 	bl	8002254 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 8001a54:	2011      	movs	r0, #17
 8001a56:	f000 fc19 	bl	800228c <HAL_NVIC_EnableIRQ>

}
 8001a5a:	bf00      	nop
 8001a5c:	3708      	adds	r7, #8
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	bd80      	pop	{r7, pc}
 8001a62:	bf00      	nop
 8001a64:	40021000 	.word	0x40021000

08001a68 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	b08a      	sub	sp, #40	; 0x28
 8001a6c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a6e:	f107 0314 	add.w	r3, r7, #20
 8001a72:	2200      	movs	r2, #0
 8001a74:	601a      	str	r2, [r3, #0]
 8001a76:	605a      	str	r2, [r3, #4]
 8001a78:	609a      	str	r2, [r3, #8]
 8001a7a:	60da      	str	r2, [r3, #12]
 8001a7c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a7e:	4b23      	ldr	r3, [pc, #140]	; (8001b0c <MX_GPIO_Init+0xa4>)
 8001a80:	695b      	ldr	r3, [r3, #20]
 8001a82:	4a22      	ldr	r2, [pc, #136]	; (8001b0c <MX_GPIO_Init+0xa4>)
 8001a84:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001a88:	6153      	str	r3, [r2, #20]
 8001a8a:	4b20      	ldr	r3, [pc, #128]	; (8001b0c <MX_GPIO_Init+0xa4>)
 8001a8c:	695b      	ldr	r3, [r3, #20]
 8001a8e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001a92:	613b      	str	r3, [r7, #16]
 8001a94:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001a96:	4b1d      	ldr	r3, [pc, #116]	; (8001b0c <MX_GPIO_Init+0xa4>)
 8001a98:	695b      	ldr	r3, [r3, #20]
 8001a9a:	4a1c      	ldr	r2, [pc, #112]	; (8001b0c <MX_GPIO_Init+0xa4>)
 8001a9c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001aa0:	6153      	str	r3, [r2, #20]
 8001aa2:	4b1a      	ldr	r3, [pc, #104]	; (8001b0c <MX_GPIO_Init+0xa4>)
 8001aa4:	695b      	ldr	r3, [r3, #20]
 8001aa6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001aaa:	60fb      	str	r3, [r7, #12]
 8001aac:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001aae:	4b17      	ldr	r3, [pc, #92]	; (8001b0c <MX_GPIO_Init+0xa4>)
 8001ab0:	695b      	ldr	r3, [r3, #20]
 8001ab2:	4a16      	ldr	r2, [pc, #88]	; (8001b0c <MX_GPIO_Init+0xa4>)
 8001ab4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001ab8:	6153      	str	r3, [r2, #20]
 8001aba:	4b14      	ldr	r3, [pc, #80]	; (8001b0c <MX_GPIO_Init+0xa4>)
 8001abc:	695b      	ldr	r3, [r3, #20]
 8001abe:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001ac2:	60bb      	str	r3, [r7, #8]
 8001ac4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ac6:	4b11      	ldr	r3, [pc, #68]	; (8001b0c <MX_GPIO_Init+0xa4>)
 8001ac8:	695b      	ldr	r3, [r3, #20]
 8001aca:	4a10      	ldr	r2, [pc, #64]	; (8001b0c <MX_GPIO_Init+0xa4>)
 8001acc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001ad0:	6153      	str	r3, [r2, #20]
 8001ad2:	4b0e      	ldr	r3, [pc, #56]	; (8001b0c <MX_GPIO_Init+0xa4>)
 8001ad4:	695b      	ldr	r3, [r3, #20]
 8001ad6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ada:	607b      	str	r3, [r7, #4]
 8001adc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_RESET);
 8001ade:	2200      	movs	r2, #0
 8001ae0:	2102      	movs	r1, #2
 8001ae2:	480b      	ldr	r0, [pc, #44]	; (8001b10 <MX_GPIO_Init+0xa8>)
 8001ae4:	f000 ff1e 	bl	8002924 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : SD_CS_Pin */
  GPIO_InitStruct.Pin = SD_CS_Pin;
 8001ae8:	2302      	movs	r3, #2
 8001aea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001aec:	2301      	movs	r3, #1
 8001aee:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001af0:	2300      	movs	r3, #0
 8001af2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001af4:	2300      	movs	r3, #0
 8001af6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SD_CS_GPIO_Port, &GPIO_InitStruct);
 8001af8:	f107 0314 	add.w	r3, r7, #20
 8001afc:	4619      	mov	r1, r3
 8001afe:	4804      	ldr	r0, [pc, #16]	; (8001b10 <MX_GPIO_Init+0xa8>)
 8001b00:	f000 fd86 	bl	8002610 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001b04:	bf00      	nop
 8001b06:	3728      	adds	r7, #40	; 0x28
 8001b08:	46bd      	mov	sp, r7
 8001b0a:	bd80      	pop	{r7, pc}
 8001b0c:	40021000 	.word	0x40021000
 8001b10:	48000400 	.word	0x48000400

08001b14 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8001b14:	b580      	push	{r7, lr}
 8001b16:	b082      	sub	sp, #8
 8001b18:	af00      	add	r7, sp, #0
 8001b1a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8001b1c:	2001      	movs	r0, #1
 8001b1e:	f008 fb8b 	bl	800a238 <osDelay>
 8001b22:	e7fb      	b.n	8001b1c <StartDefaultTask+0x8>

08001b24 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001b24:	b580      	push	{r7, lr}
 8001b26:	b082      	sub	sp, #8
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	4a04      	ldr	r2, [pc, #16]	; (8001b44 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001b32:	4293      	cmp	r3, r2
 8001b34:	d101      	bne.n	8001b3a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001b36:	f000 fab5 	bl	80020a4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001b3a:	bf00      	nop
 8001b3c:	3708      	adds	r7, #8
 8001b3e:	46bd      	mov	sp, r7
 8001b40:	bd80      	pop	{r7, pc}
 8001b42:	bf00      	nop
 8001b44:	40012c00 	.word	0x40012c00

08001b48 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001b48:	b480      	push	{r7}
 8001b4a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001b4c:	b672      	cpsid	i
}
 8001b4e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001b50:	e7fe      	b.n	8001b50 <Error_Handler+0x8>
	...

08001b54 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001b54:	b580      	push	{r7, lr}
 8001b56:	b082      	sub	sp, #8
 8001b58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b5a:	4b11      	ldr	r3, [pc, #68]	; (8001ba0 <HAL_MspInit+0x4c>)
 8001b5c:	699b      	ldr	r3, [r3, #24]
 8001b5e:	4a10      	ldr	r2, [pc, #64]	; (8001ba0 <HAL_MspInit+0x4c>)
 8001b60:	f043 0301 	orr.w	r3, r3, #1
 8001b64:	6193      	str	r3, [r2, #24]
 8001b66:	4b0e      	ldr	r3, [pc, #56]	; (8001ba0 <HAL_MspInit+0x4c>)
 8001b68:	699b      	ldr	r3, [r3, #24]
 8001b6a:	f003 0301 	and.w	r3, r3, #1
 8001b6e:	607b      	str	r3, [r7, #4]
 8001b70:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b72:	4b0b      	ldr	r3, [pc, #44]	; (8001ba0 <HAL_MspInit+0x4c>)
 8001b74:	69db      	ldr	r3, [r3, #28]
 8001b76:	4a0a      	ldr	r2, [pc, #40]	; (8001ba0 <HAL_MspInit+0x4c>)
 8001b78:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b7c:	61d3      	str	r3, [r2, #28]
 8001b7e:	4b08      	ldr	r3, [pc, #32]	; (8001ba0 <HAL_MspInit+0x4c>)
 8001b80:	69db      	ldr	r3, [r3, #28]
 8001b82:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b86:	603b      	str	r3, [r7, #0]
 8001b88:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001b8a:	2200      	movs	r2, #0
 8001b8c:	210f      	movs	r1, #15
 8001b8e:	f06f 0001 	mvn.w	r0, #1
 8001b92:	f000 fb5f 	bl	8002254 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001b96:	bf00      	nop
 8001b98:	3708      	adds	r7, #8
 8001b9a:	46bd      	mov	sp, r7
 8001b9c:	bd80      	pop	{r7, pc}
 8001b9e:	bf00      	nop
 8001ba0:	40021000 	.word	0x40021000

08001ba4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001ba4:	b580      	push	{r7, lr}
 8001ba6:	b08a      	sub	sp, #40	; 0x28
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bac:	f107 0314 	add.w	r3, r7, #20
 8001bb0:	2200      	movs	r2, #0
 8001bb2:	601a      	str	r2, [r3, #0]
 8001bb4:	605a      	str	r2, [r3, #4]
 8001bb6:	609a      	str	r2, [r3, #8]
 8001bb8:	60da      	str	r2, [r3, #12]
 8001bba:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	4a3d      	ldr	r2, [pc, #244]	; (8001cb8 <HAL_SPI_MspInit+0x114>)
 8001bc2:	4293      	cmp	r3, r2
 8001bc4:	d174      	bne.n	8001cb0 <HAL_SPI_MspInit+0x10c>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001bc6:	4b3d      	ldr	r3, [pc, #244]	; (8001cbc <HAL_SPI_MspInit+0x118>)
 8001bc8:	69db      	ldr	r3, [r3, #28]
 8001bca:	4a3c      	ldr	r2, [pc, #240]	; (8001cbc <HAL_SPI_MspInit+0x118>)
 8001bcc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001bd0:	61d3      	str	r3, [r2, #28]
 8001bd2:	4b3a      	ldr	r3, [pc, #232]	; (8001cbc <HAL_SPI_MspInit+0x118>)
 8001bd4:	69db      	ldr	r3, [r3, #28]
 8001bd6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001bda:	613b      	str	r3, [r7, #16]
 8001bdc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001bde:	4b37      	ldr	r3, [pc, #220]	; (8001cbc <HAL_SPI_MspInit+0x118>)
 8001be0:	695b      	ldr	r3, [r3, #20]
 8001be2:	4a36      	ldr	r2, [pc, #216]	; (8001cbc <HAL_SPI_MspInit+0x118>)
 8001be4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001be8:	6153      	str	r3, [r2, #20]
 8001bea:	4b34      	ldr	r3, [pc, #208]	; (8001cbc <HAL_SPI_MspInit+0x118>)
 8001bec:	695b      	ldr	r3, [r3, #20]
 8001bee:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001bf2:	60fb      	str	r3, [r7, #12]
 8001bf4:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8001bf6:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8001bfa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bfc:	2302      	movs	r3, #2
 8001bfe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c00:	2300      	movs	r3, #0
 8001c02:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001c04:	2303      	movs	r3, #3
 8001c06:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001c08:	2305      	movs	r3, #5
 8001c0a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c0c:	f107 0314 	add.w	r3, r7, #20
 8001c10:	4619      	mov	r1, r3
 8001c12:	482b      	ldr	r0, [pc, #172]	; (8001cc0 <HAL_SPI_MspInit+0x11c>)
 8001c14:	f000 fcfc 	bl	8002610 <HAL_GPIO_Init>

    /* SPI2 DMA Init */
    /* SPI2_RX Init */
    hdma_spi2_rx.Instance = DMA1_Channel4;
 8001c18:	4b2a      	ldr	r3, [pc, #168]	; (8001cc4 <HAL_SPI_MspInit+0x120>)
 8001c1a:	4a2b      	ldr	r2, [pc, #172]	; (8001cc8 <HAL_SPI_MspInit+0x124>)
 8001c1c:	601a      	str	r2, [r3, #0]
    hdma_spi2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001c1e:	4b29      	ldr	r3, [pc, #164]	; (8001cc4 <HAL_SPI_MspInit+0x120>)
 8001c20:	2200      	movs	r2, #0
 8001c22:	605a      	str	r2, [r3, #4]
    hdma_spi2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001c24:	4b27      	ldr	r3, [pc, #156]	; (8001cc4 <HAL_SPI_MspInit+0x120>)
 8001c26:	2200      	movs	r2, #0
 8001c28:	609a      	str	r2, [r3, #8]
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001c2a:	4b26      	ldr	r3, [pc, #152]	; (8001cc4 <HAL_SPI_MspInit+0x120>)
 8001c2c:	2280      	movs	r2, #128	; 0x80
 8001c2e:	60da      	str	r2, [r3, #12]
    hdma_spi2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001c30:	4b24      	ldr	r3, [pc, #144]	; (8001cc4 <HAL_SPI_MspInit+0x120>)
 8001c32:	2200      	movs	r2, #0
 8001c34:	611a      	str	r2, [r3, #16]
    hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001c36:	4b23      	ldr	r3, [pc, #140]	; (8001cc4 <HAL_SPI_MspInit+0x120>)
 8001c38:	2200      	movs	r2, #0
 8001c3a:	615a      	str	r2, [r3, #20]
    hdma_spi2_rx.Init.Mode = DMA_NORMAL;
 8001c3c:	4b21      	ldr	r3, [pc, #132]	; (8001cc4 <HAL_SPI_MspInit+0x120>)
 8001c3e:	2200      	movs	r2, #0
 8001c40:	619a      	str	r2, [r3, #24]
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001c42:	4b20      	ldr	r3, [pc, #128]	; (8001cc4 <HAL_SPI_MspInit+0x120>)
 8001c44:	2200      	movs	r2, #0
 8001c46:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 8001c48:	481e      	ldr	r0, [pc, #120]	; (8001cc4 <HAL_SPI_MspInit+0x120>)
 8001c4a:	f000 fb2d 	bl	80022a8 <HAL_DMA_Init>
 8001c4e:	4603      	mov	r3, r0
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d001      	beq.n	8001c58 <HAL_SPI_MspInit+0xb4>
    {
      Error_Handler();
 8001c54:	f7ff ff78 	bl	8001b48 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmarx,hdma_spi2_rx);
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	4a1a      	ldr	r2, [pc, #104]	; (8001cc4 <HAL_SPI_MspInit+0x120>)
 8001c5c:	659a      	str	r2, [r3, #88]	; 0x58
 8001c5e:	4a19      	ldr	r2, [pc, #100]	; (8001cc4 <HAL_SPI_MspInit+0x120>)
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	6253      	str	r3, [r2, #36]	; 0x24

    /* SPI2_TX Init */
    hdma_spi2_tx.Instance = DMA1_Channel5;
 8001c64:	4b19      	ldr	r3, [pc, #100]	; (8001ccc <HAL_SPI_MspInit+0x128>)
 8001c66:	4a1a      	ldr	r2, [pc, #104]	; (8001cd0 <HAL_SPI_MspInit+0x12c>)
 8001c68:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001c6a:	4b18      	ldr	r3, [pc, #96]	; (8001ccc <HAL_SPI_MspInit+0x128>)
 8001c6c:	2210      	movs	r2, #16
 8001c6e:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001c70:	4b16      	ldr	r3, [pc, #88]	; (8001ccc <HAL_SPI_MspInit+0x128>)
 8001c72:	2200      	movs	r2, #0
 8001c74:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001c76:	4b15      	ldr	r3, [pc, #84]	; (8001ccc <HAL_SPI_MspInit+0x128>)
 8001c78:	2280      	movs	r2, #128	; 0x80
 8001c7a:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001c7c:	4b13      	ldr	r3, [pc, #76]	; (8001ccc <HAL_SPI_MspInit+0x128>)
 8001c7e:	2200      	movs	r2, #0
 8001c80:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001c82:	4b12      	ldr	r3, [pc, #72]	; (8001ccc <HAL_SPI_MspInit+0x128>)
 8001c84:	2200      	movs	r2, #0
 8001c86:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.Mode = DMA_NORMAL;
 8001c88:	4b10      	ldr	r3, [pc, #64]	; (8001ccc <HAL_SPI_MspInit+0x128>)
 8001c8a:	2200      	movs	r2, #0
 8001c8c:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001c8e:	4b0f      	ldr	r3, [pc, #60]	; (8001ccc <HAL_SPI_MspInit+0x128>)
 8001c90:	2200      	movs	r2, #0
 8001c92:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 8001c94:	480d      	ldr	r0, [pc, #52]	; (8001ccc <HAL_SPI_MspInit+0x128>)
 8001c96:	f000 fb07 	bl	80022a8 <HAL_DMA_Init>
 8001c9a:	4603      	mov	r3, r0
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d001      	beq.n	8001ca4 <HAL_SPI_MspInit+0x100>
    {
      Error_Handler();
 8001ca0:	f7ff ff52 	bl	8001b48 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi2_tx);
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	4a09      	ldr	r2, [pc, #36]	; (8001ccc <HAL_SPI_MspInit+0x128>)
 8001ca8:	655a      	str	r2, [r3, #84]	; 0x54
 8001caa:	4a08      	ldr	r2, [pc, #32]	; (8001ccc <HAL_SPI_MspInit+0x128>)
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8001cb0:	bf00      	nop
 8001cb2:	3728      	adds	r7, #40	; 0x28
 8001cb4:	46bd      	mov	sp, r7
 8001cb6:	bd80      	pop	{r7, pc}
 8001cb8:	40003800 	.word	0x40003800
 8001cbc:	40021000 	.word	0x40021000
 8001cc0:	48000400 	.word	0x48000400
 8001cc4:	200011a8 	.word	0x200011a8
 8001cc8:	40020044 	.word	0x40020044
 8001ccc:	200011ec 	.word	0x200011ec
 8001cd0:	40020058 	.word	0x40020058

08001cd4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001cd4:	b580      	push	{r7, lr}
 8001cd6:	b08c      	sub	sp, #48	; 0x30
 8001cd8:	af00      	add	r7, sp, #0
 8001cda:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cdc:	f107 031c 	add.w	r3, r7, #28
 8001ce0:	2200      	movs	r2, #0
 8001ce2:	601a      	str	r2, [r3, #0]
 8001ce4:	605a      	str	r2, [r3, #4]
 8001ce6:	609a      	str	r2, [r3, #8]
 8001ce8:	60da      	str	r2, [r3, #12]
 8001cea:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	4a54      	ldr	r2, [pc, #336]	; (8001e44 <HAL_UART_MspInit+0x170>)
 8001cf2:	4293      	cmp	r3, r2
 8001cf4:	d128      	bne.n	8001d48 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001cf6:	4b54      	ldr	r3, [pc, #336]	; (8001e48 <HAL_UART_MspInit+0x174>)
 8001cf8:	699b      	ldr	r3, [r3, #24]
 8001cfa:	4a53      	ldr	r2, [pc, #332]	; (8001e48 <HAL_UART_MspInit+0x174>)
 8001cfc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001d00:	6193      	str	r3, [r2, #24]
 8001d02:	4b51      	ldr	r3, [pc, #324]	; (8001e48 <HAL_UART_MspInit+0x174>)
 8001d04:	699b      	ldr	r3, [r3, #24]
 8001d06:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001d0a:	61bb      	str	r3, [r7, #24]
 8001d0c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001d0e:	4b4e      	ldr	r3, [pc, #312]	; (8001e48 <HAL_UART_MspInit+0x174>)
 8001d10:	695b      	ldr	r3, [r3, #20]
 8001d12:	4a4d      	ldr	r2, [pc, #308]	; (8001e48 <HAL_UART_MspInit+0x174>)
 8001d14:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001d18:	6153      	str	r3, [r2, #20]
 8001d1a:	4b4b      	ldr	r3, [pc, #300]	; (8001e48 <HAL_UART_MspInit+0x174>)
 8001d1c:	695b      	ldr	r3, [r3, #20]
 8001d1e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001d22:	617b      	str	r3, [r7, #20]
 8001d24:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PC4     ------> USART1_TX
    PC5     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8001d26:	2330      	movs	r3, #48	; 0x30
 8001d28:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d2a:	2302      	movs	r3, #2
 8001d2c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d2e:	2300      	movs	r3, #0
 8001d30:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001d32:	2303      	movs	r3, #3
 8001d34:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001d36:	2307      	movs	r3, #7
 8001d38:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001d3a:	f107 031c 	add.w	r3, r7, #28
 8001d3e:	4619      	mov	r1, r3
 8001d40:	4842      	ldr	r0, [pc, #264]	; (8001e4c <HAL_UART_MspInit+0x178>)
 8001d42:	f000 fc65 	bl	8002610 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001d46:	e079      	b.n	8001e3c <HAL_UART_MspInit+0x168>
  else if(huart->Instance==USART3)
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	4a40      	ldr	r2, [pc, #256]	; (8001e50 <HAL_UART_MspInit+0x17c>)
 8001d4e:	4293      	cmp	r3, r2
 8001d50:	d174      	bne.n	8001e3c <HAL_UART_MspInit+0x168>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001d52:	4b3d      	ldr	r3, [pc, #244]	; (8001e48 <HAL_UART_MspInit+0x174>)
 8001d54:	69db      	ldr	r3, [r3, #28]
 8001d56:	4a3c      	ldr	r2, [pc, #240]	; (8001e48 <HAL_UART_MspInit+0x174>)
 8001d58:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001d5c:	61d3      	str	r3, [r2, #28]
 8001d5e:	4b3a      	ldr	r3, [pc, #232]	; (8001e48 <HAL_UART_MspInit+0x174>)
 8001d60:	69db      	ldr	r3, [r3, #28]
 8001d62:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001d66:	613b      	str	r3, [r7, #16]
 8001d68:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d6a:	4b37      	ldr	r3, [pc, #220]	; (8001e48 <HAL_UART_MspInit+0x174>)
 8001d6c:	695b      	ldr	r3, [r3, #20]
 8001d6e:	4a36      	ldr	r2, [pc, #216]	; (8001e48 <HAL_UART_MspInit+0x174>)
 8001d70:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001d74:	6153      	str	r3, [r2, #20]
 8001d76:	4b34      	ldr	r3, [pc, #208]	; (8001e48 <HAL_UART_MspInit+0x174>)
 8001d78:	695b      	ldr	r3, [r3, #20]
 8001d7a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001d7e:	60fb      	str	r3, [r7, #12]
 8001d80:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001d82:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001d86:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d88:	2302      	movs	r3, #2
 8001d8a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d8c:	2300      	movs	r3, #0
 8001d8e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001d90:	2303      	movs	r3, #3
 8001d92:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001d94:	2307      	movs	r3, #7
 8001d96:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d98:	f107 031c 	add.w	r3, r7, #28
 8001d9c:	4619      	mov	r1, r3
 8001d9e:	482d      	ldr	r0, [pc, #180]	; (8001e54 <HAL_UART_MspInit+0x180>)
 8001da0:	f000 fc36 	bl	8002610 <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Channel3;
 8001da4:	4b2c      	ldr	r3, [pc, #176]	; (8001e58 <HAL_UART_MspInit+0x184>)
 8001da6:	4a2d      	ldr	r2, [pc, #180]	; (8001e5c <HAL_UART_MspInit+0x188>)
 8001da8:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001daa:	4b2b      	ldr	r3, [pc, #172]	; (8001e58 <HAL_UART_MspInit+0x184>)
 8001dac:	2200      	movs	r2, #0
 8001dae:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001db0:	4b29      	ldr	r3, [pc, #164]	; (8001e58 <HAL_UART_MspInit+0x184>)
 8001db2:	2200      	movs	r2, #0
 8001db4:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001db6:	4b28      	ldr	r3, [pc, #160]	; (8001e58 <HAL_UART_MspInit+0x184>)
 8001db8:	2280      	movs	r2, #128	; 0x80
 8001dba:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001dbc:	4b26      	ldr	r3, [pc, #152]	; (8001e58 <HAL_UART_MspInit+0x184>)
 8001dbe:	2200      	movs	r2, #0
 8001dc0:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001dc2:	4b25      	ldr	r3, [pc, #148]	; (8001e58 <HAL_UART_MspInit+0x184>)
 8001dc4:	2200      	movs	r2, #0
 8001dc6:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 8001dc8:	4b23      	ldr	r3, [pc, #140]	; (8001e58 <HAL_UART_MspInit+0x184>)
 8001dca:	2200      	movs	r2, #0
 8001dcc:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001dce:	4b22      	ldr	r3, [pc, #136]	; (8001e58 <HAL_UART_MspInit+0x184>)
 8001dd0:	2200      	movs	r2, #0
 8001dd2:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8001dd4:	4820      	ldr	r0, [pc, #128]	; (8001e58 <HAL_UART_MspInit+0x184>)
 8001dd6:	f000 fa67 	bl	80022a8 <HAL_DMA_Init>
 8001dda:	4603      	mov	r3, r0
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d001      	beq.n	8001de4 <HAL_UART_MspInit+0x110>
      Error_Handler();
 8001de0:	f7ff feb2 	bl	8001b48 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	4a1c      	ldr	r2, [pc, #112]	; (8001e58 <HAL_UART_MspInit+0x184>)
 8001de8:	675a      	str	r2, [r3, #116]	; 0x74
 8001dea:	4a1b      	ldr	r2, [pc, #108]	; (8001e58 <HAL_UART_MspInit+0x184>)
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	6253      	str	r3, [r2, #36]	; 0x24
    hdma_usart3_tx.Instance = DMA1_Channel2;
 8001df0:	4b1b      	ldr	r3, [pc, #108]	; (8001e60 <HAL_UART_MspInit+0x18c>)
 8001df2:	4a1c      	ldr	r2, [pc, #112]	; (8001e64 <HAL_UART_MspInit+0x190>)
 8001df4:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001df6:	4b1a      	ldr	r3, [pc, #104]	; (8001e60 <HAL_UART_MspInit+0x18c>)
 8001df8:	2210      	movs	r2, #16
 8001dfa:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001dfc:	4b18      	ldr	r3, [pc, #96]	; (8001e60 <HAL_UART_MspInit+0x18c>)
 8001dfe:	2200      	movs	r2, #0
 8001e00:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001e02:	4b17      	ldr	r3, [pc, #92]	; (8001e60 <HAL_UART_MspInit+0x18c>)
 8001e04:	2280      	movs	r2, #128	; 0x80
 8001e06:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001e08:	4b15      	ldr	r3, [pc, #84]	; (8001e60 <HAL_UART_MspInit+0x18c>)
 8001e0a:	2200      	movs	r2, #0
 8001e0c:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001e0e:	4b14      	ldr	r3, [pc, #80]	; (8001e60 <HAL_UART_MspInit+0x18c>)
 8001e10:	2200      	movs	r2, #0
 8001e12:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 8001e14:	4b12      	ldr	r3, [pc, #72]	; (8001e60 <HAL_UART_MspInit+0x18c>)
 8001e16:	2200      	movs	r2, #0
 8001e18:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001e1a:	4b11      	ldr	r3, [pc, #68]	; (8001e60 <HAL_UART_MspInit+0x18c>)
 8001e1c:	2200      	movs	r2, #0
 8001e1e:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 8001e20:	480f      	ldr	r0, [pc, #60]	; (8001e60 <HAL_UART_MspInit+0x18c>)
 8001e22:	f000 fa41 	bl	80022a8 <HAL_DMA_Init>
 8001e26:	4603      	mov	r3, r0
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d001      	beq.n	8001e30 <HAL_UART_MspInit+0x15c>
      Error_Handler();
 8001e2c:	f7ff fe8c 	bl	8001b48 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart3_tx);
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	4a0b      	ldr	r2, [pc, #44]	; (8001e60 <HAL_UART_MspInit+0x18c>)
 8001e34:	671a      	str	r2, [r3, #112]	; 0x70
 8001e36:	4a0a      	ldr	r2, [pc, #40]	; (8001e60 <HAL_UART_MspInit+0x18c>)
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	6253      	str	r3, [r2, #36]	; 0x24
}
 8001e3c:	bf00      	nop
 8001e3e:	3730      	adds	r7, #48	; 0x30
 8001e40:	46bd      	mov	sp, r7
 8001e42:	bd80      	pop	{r7, pc}
 8001e44:	40013800 	.word	0x40013800
 8001e48:	40021000 	.word	0x40021000
 8001e4c:	48000800 	.word	0x48000800
 8001e50:	40004800 	.word	0x40004800
 8001e54:	48000400 	.word	0x48000400
 8001e58:	20001340 	.word	0x20001340
 8001e5c:	40020030 	.word	0x40020030
 8001e60:	20001384 	.word	0x20001384
 8001e64:	4002001c 	.word	0x4002001c

08001e68 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001e68:	b580      	push	{r7, lr}
 8001e6a:	b08c      	sub	sp, #48	; 0x30
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8001e70:	2300      	movs	r3, #0
 8001e72:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 8001e74:	2300      	movs	r3, #0
 8001e76:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8001e78:	4b2e      	ldr	r3, [pc, #184]	; (8001f34 <HAL_InitTick+0xcc>)
 8001e7a:	699b      	ldr	r3, [r3, #24]
 8001e7c:	4a2d      	ldr	r2, [pc, #180]	; (8001f34 <HAL_InitTick+0xcc>)
 8001e7e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001e82:	6193      	str	r3, [r2, #24]
 8001e84:	4b2b      	ldr	r3, [pc, #172]	; (8001f34 <HAL_InitTick+0xcc>)
 8001e86:	699b      	ldr	r3, [r3, #24]
 8001e88:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001e8c:	60bb      	str	r3, [r7, #8]
 8001e8e:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001e90:	f107 020c 	add.w	r2, r7, #12
 8001e94:	f107 0310 	add.w	r3, r7, #16
 8001e98:	4611      	mov	r1, r2
 8001e9a:	4618      	mov	r0, r3
 8001e9c:	f001 fffe 	bl	8003e9c <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8001ea0:	f001 ffda 	bl	8003e58 <HAL_RCC_GetPCLK2Freq>
 8001ea4:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001ea6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ea8:	4a23      	ldr	r2, [pc, #140]	; (8001f38 <HAL_InitTick+0xd0>)
 8001eaa:	fba2 2303 	umull	r2, r3, r2, r3
 8001eae:	0c9b      	lsrs	r3, r3, #18
 8001eb0:	3b01      	subs	r3, #1
 8001eb2:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8001eb4:	4b21      	ldr	r3, [pc, #132]	; (8001f3c <HAL_InitTick+0xd4>)
 8001eb6:	4a22      	ldr	r2, [pc, #136]	; (8001f40 <HAL_InitTick+0xd8>)
 8001eb8:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8001eba:	4b20      	ldr	r3, [pc, #128]	; (8001f3c <HAL_InitTick+0xd4>)
 8001ebc:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001ec0:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8001ec2:	4a1e      	ldr	r2, [pc, #120]	; (8001f3c <HAL_InitTick+0xd4>)
 8001ec4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ec6:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8001ec8:	4b1c      	ldr	r3, [pc, #112]	; (8001f3c <HAL_InitTick+0xd4>)
 8001eca:	2200      	movs	r2, #0
 8001ecc:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ece:	4b1b      	ldr	r3, [pc, #108]	; (8001f3c <HAL_InitTick+0xd4>)
 8001ed0:	2200      	movs	r2, #0
 8001ed2:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ed4:	4b19      	ldr	r3, [pc, #100]	; (8001f3c <HAL_InitTick+0xd4>)
 8001ed6:	2200      	movs	r2, #0
 8001ed8:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8001eda:	4818      	ldr	r0, [pc, #96]	; (8001f3c <HAL_InitTick+0xd4>)
 8001edc:	f002 ffd4 	bl	8004e88 <HAL_TIM_Base_Init>
 8001ee0:	4603      	mov	r3, r0
 8001ee2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8001ee6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d11b      	bne.n	8001f26 <HAL_InitTick+0xbe>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8001eee:	4813      	ldr	r0, [pc, #76]	; (8001f3c <HAL_InitTick+0xd4>)
 8001ef0:	f003 f82c 	bl	8004f4c <HAL_TIM_Base_Start_IT>
 8001ef4:	4603      	mov	r3, r0
 8001ef6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8001efa:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d111      	bne.n	8001f26 <HAL_InitTick+0xbe>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8001f02:	2019      	movs	r0, #25
 8001f04:	f000 f9c2 	bl	800228c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	2b0f      	cmp	r3, #15
 8001f0c:	d808      	bhi.n	8001f20 <HAL_InitTick+0xb8>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority, 0U);
 8001f0e:	2200      	movs	r2, #0
 8001f10:	6879      	ldr	r1, [r7, #4]
 8001f12:	2019      	movs	r0, #25
 8001f14:	f000 f99e 	bl	8002254 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001f18:	4a0a      	ldr	r2, [pc, #40]	; (8001f44 <HAL_InitTick+0xdc>)
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	6013      	str	r3, [r2, #0]
 8001f1e:	e002      	b.n	8001f26 <HAL_InitTick+0xbe>
      }
      else
      {
        status = HAL_ERROR;
 8001f20:	2301      	movs	r3, #1
 8001f22:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8001f26:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8001f2a:	4618      	mov	r0, r3
 8001f2c:	3730      	adds	r7, #48	; 0x30
 8001f2e:	46bd      	mov	sp, r7
 8001f30:	bd80      	pop	{r7, pc}
 8001f32:	bf00      	nop
 8001f34:	40021000 	.word	0x40021000
 8001f38:	431bde83 	.word	0x431bde83
 8001f3c:	200013cc 	.word	0x200013cc
 8001f40:	40012c00 	.word	0x40012c00
 8001f44:	20000020 	.word	0x20000020

08001f48 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001f48:	b480      	push	{r7}
 8001f4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001f4c:	e7fe      	b.n	8001f4c <NMI_Handler+0x4>

08001f4e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001f4e:	b480      	push	{r7}
 8001f50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001f52:	e7fe      	b.n	8001f52 <HardFault_Handler+0x4>

08001f54 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001f54:	b480      	push	{r7}
 8001f56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001f58:	e7fe      	b.n	8001f58 <MemManage_Handler+0x4>

08001f5a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001f5a:	b480      	push	{r7}
 8001f5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001f5e:	e7fe      	b.n	8001f5e <BusFault_Handler+0x4>

08001f60 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001f60:	b480      	push	{r7}
 8001f62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001f64:	e7fe      	b.n	8001f64 <UsageFault_Handler+0x4>

08001f66 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001f66:	b480      	push	{r7}
 8001f68:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001f6a:	bf00      	nop
 8001f6c:	46bd      	mov	sp, r7
 8001f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f72:	4770      	bx	lr

08001f74 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8001f74:	b580      	push	{r7, lr}
 8001f76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8001f78:	4802      	ldr	r0, [pc, #8]	; (8001f84 <DMA1_Channel2_IRQHandler+0x10>)
 8001f7a:	f000 fa3b 	bl	80023f4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8001f7e:	bf00      	nop
 8001f80:	bd80      	pop	{r7, pc}
 8001f82:	bf00      	nop
 8001f84:	20001384 	.word	0x20001384

08001f88 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8001f88:	b580      	push	{r7, lr}
 8001f8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8001f8c:	4802      	ldr	r0, [pc, #8]	; (8001f98 <DMA1_Channel3_IRQHandler+0x10>)
 8001f8e:	f000 fa31 	bl	80023f4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8001f92:	bf00      	nop
 8001f94:	bd80      	pop	{r7, pc}
 8001f96:	bf00      	nop
 8001f98:	20001340 	.word	0x20001340

08001f9c <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8001f9c:	b580      	push	{r7, lr}
 8001f9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_rx);
 8001fa0:	4802      	ldr	r0, [pc, #8]	; (8001fac <DMA1_Channel4_IRQHandler+0x10>)
 8001fa2:	f000 fa27 	bl	80023f4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 8001fa6:	bf00      	nop
 8001fa8:	bd80      	pop	{r7, pc}
 8001faa:	bf00      	nop
 8001fac:	200011a8 	.word	0x200011a8

08001fb0 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8001fb0:	b580      	push	{r7, lr}
 8001fb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 8001fb4:	4802      	ldr	r0, [pc, #8]	; (8001fc0 <DMA1_Channel5_IRQHandler+0x10>)
 8001fb6:	f000 fa1d 	bl	80023f4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8001fba:	bf00      	nop
 8001fbc:	bd80      	pop	{r7, pc}
 8001fbe:	bf00      	nop
 8001fc0:	200011ec 	.word	0x200011ec

08001fc4 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8001fc4:	b580      	push	{r7, lr}
 8001fc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 8001fc8:	4802      	ldr	r0, [pc, #8]	; (8001fd4 <DMA1_Channel6_IRQHandler+0x10>)
 8001fca:	f000 fa13 	bl	80023f4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 8001fce:	bf00      	nop
 8001fd0:	bd80      	pop	{r7, pc}
 8001fd2:	bf00      	nop
 8001fd4:	20001100 	.word	0x20001100

08001fd8 <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 8001fd8:	b580      	push	{r7, lr}
 8001fda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 8001fdc:	4802      	ldr	r0, [pc, #8]	; (8001fe8 <DMA1_Channel7_IRQHandler+0x10>)
 8001fde:	f000 fa09 	bl	80023f4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 8001fe2:	bf00      	nop
 8001fe4:	bd80      	pop	{r7, pc}
 8001fe6:	bf00      	nop
 8001fe8:	200010bc 	.word	0x200010bc

08001fec <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update and TIM16 interrupts.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8001fec:	b580      	push	{r7, lr}
 8001fee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001ff0:	4802      	ldr	r0, [pc, #8]	; (8001ffc <TIM1_UP_TIM16_IRQHandler+0x10>)
 8001ff2:	f003 f81b 	bl	800502c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8001ff6:	bf00      	nop
 8001ff8:	bd80      	pop	{r7, pc}
 8001ffa:	bf00      	nop
 8001ffc:	200013cc 	.word	0x200013cc

08002000 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002000:	b480      	push	{r7}
 8002002:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002004:	4b06      	ldr	r3, [pc, #24]	; (8002020 <SystemInit+0x20>)
 8002006:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800200a:	4a05      	ldr	r2, [pc, #20]	; (8002020 <SystemInit+0x20>)
 800200c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002010:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002014:	bf00      	nop
 8002016:	46bd      	mov	sp, r7
 8002018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800201c:	4770      	bx	lr
 800201e:	bf00      	nop
 8002020:	e000ed00 	.word	0xe000ed00

08002024 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8002024:	f8df d034 	ldr.w	sp, [pc, #52]	; 800205c <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8002028:	f7ff ffea 	bl	8002000 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800202c:	480c      	ldr	r0, [pc, #48]	; (8002060 <LoopForever+0x6>)
  ldr r1, =_edata
 800202e:	490d      	ldr	r1, [pc, #52]	; (8002064 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002030:	4a0d      	ldr	r2, [pc, #52]	; (8002068 <LoopForever+0xe>)
  movs r3, #0
 8002032:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002034:	e002      	b.n	800203c <LoopCopyDataInit>

08002036 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002036:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002038:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800203a:	3304      	adds	r3, #4

0800203c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800203c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800203e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002040:	d3f9      	bcc.n	8002036 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002042:	4a0a      	ldr	r2, [pc, #40]	; (800206c <LoopForever+0x12>)
  ldr r4, =_ebss
 8002044:	4c0a      	ldr	r4, [pc, #40]	; (8002070 <LoopForever+0x16>)
  movs r3, #0
 8002046:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002048:	e001      	b.n	800204e <LoopFillZerobss>

0800204a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800204a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800204c:	3204      	adds	r2, #4

0800204e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800204e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002050:	d3fb      	bcc.n	800204a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002052:	f00b f977 	bl	800d344 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002056:	f7ff fb9f 	bl	8001798 <main>

0800205a <LoopForever>:

LoopForever:
    b LoopForever
 800205a:	e7fe      	b.n	800205a <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800205c:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8002060:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002064:	20000094 	.word	0x20000094
  ldr r2, =_sidata
 8002068:	0800d704 	.word	0x0800d704
  ldr r2, =_sbss
 800206c:	20000094 	.word	0x20000094
  ldr r4, =_ebss
 8002070:	20002f80 	.word	0x20002f80

08002074 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002074:	e7fe      	b.n	8002074 <ADC1_2_IRQHandler>
	...

08002078 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002078:	b580      	push	{r7, lr}
 800207a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800207c:	4b08      	ldr	r3, [pc, #32]	; (80020a0 <HAL_Init+0x28>)
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	4a07      	ldr	r2, [pc, #28]	; (80020a0 <HAL_Init+0x28>)
 8002082:	f043 0310 	orr.w	r3, r3, #16
 8002086:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002088:	2003      	movs	r0, #3
 800208a:	f000 f8d8 	bl	800223e <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800208e:	200f      	movs	r0, #15
 8002090:	f7ff feea 	bl	8001e68 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002094:	f7ff fd5e 	bl	8001b54 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002098:	2300      	movs	r3, #0
}
 800209a:	4618      	mov	r0, r3
 800209c:	bd80      	pop	{r7, pc}
 800209e:	bf00      	nop
 80020a0:	40022000 	.word	0x40022000

080020a4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80020a4:	b480      	push	{r7}
 80020a6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80020a8:	4b06      	ldr	r3, [pc, #24]	; (80020c4 <HAL_IncTick+0x20>)
 80020aa:	781b      	ldrb	r3, [r3, #0]
 80020ac:	461a      	mov	r2, r3
 80020ae:	4b06      	ldr	r3, [pc, #24]	; (80020c8 <HAL_IncTick+0x24>)
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	4413      	add	r3, r2
 80020b4:	4a04      	ldr	r2, [pc, #16]	; (80020c8 <HAL_IncTick+0x24>)
 80020b6:	6013      	str	r3, [r2, #0]
}
 80020b8:	bf00      	nop
 80020ba:	46bd      	mov	sp, r7
 80020bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c0:	4770      	bx	lr
 80020c2:	bf00      	nop
 80020c4:	20000024 	.word	0x20000024
 80020c8:	20001418 	.word	0x20001418

080020cc <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80020cc:	b480      	push	{r7}
 80020ce:	af00      	add	r7, sp, #0
  return uwTick;  
 80020d0:	4b03      	ldr	r3, [pc, #12]	; (80020e0 <HAL_GetTick+0x14>)
 80020d2:	681b      	ldr	r3, [r3, #0]
}
 80020d4:	4618      	mov	r0, r3
 80020d6:	46bd      	mov	sp, r7
 80020d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020dc:	4770      	bx	lr
 80020de:	bf00      	nop
 80020e0:	20001418 	.word	0x20001418

080020e4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80020e4:	b480      	push	{r7}
 80020e6:	b085      	sub	sp, #20
 80020e8:	af00      	add	r7, sp, #0
 80020ea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	f003 0307 	and.w	r3, r3, #7
 80020f2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80020f4:	4b0c      	ldr	r3, [pc, #48]	; (8002128 <__NVIC_SetPriorityGrouping+0x44>)
 80020f6:	68db      	ldr	r3, [r3, #12]
 80020f8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80020fa:	68ba      	ldr	r2, [r7, #8]
 80020fc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002100:	4013      	ands	r3, r2
 8002102:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002108:	68bb      	ldr	r3, [r7, #8]
 800210a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800210c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002110:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002114:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002116:	4a04      	ldr	r2, [pc, #16]	; (8002128 <__NVIC_SetPriorityGrouping+0x44>)
 8002118:	68bb      	ldr	r3, [r7, #8]
 800211a:	60d3      	str	r3, [r2, #12]
}
 800211c:	bf00      	nop
 800211e:	3714      	adds	r7, #20
 8002120:	46bd      	mov	sp, r7
 8002122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002126:	4770      	bx	lr
 8002128:	e000ed00 	.word	0xe000ed00

0800212c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800212c:	b480      	push	{r7}
 800212e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002130:	4b04      	ldr	r3, [pc, #16]	; (8002144 <__NVIC_GetPriorityGrouping+0x18>)
 8002132:	68db      	ldr	r3, [r3, #12]
 8002134:	0a1b      	lsrs	r3, r3, #8
 8002136:	f003 0307 	and.w	r3, r3, #7
}
 800213a:	4618      	mov	r0, r3
 800213c:	46bd      	mov	sp, r7
 800213e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002142:	4770      	bx	lr
 8002144:	e000ed00 	.word	0xe000ed00

08002148 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002148:	b480      	push	{r7}
 800214a:	b083      	sub	sp, #12
 800214c:	af00      	add	r7, sp, #0
 800214e:	4603      	mov	r3, r0
 8002150:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002152:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002156:	2b00      	cmp	r3, #0
 8002158:	db0b      	blt.n	8002172 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800215a:	79fb      	ldrb	r3, [r7, #7]
 800215c:	f003 021f 	and.w	r2, r3, #31
 8002160:	4907      	ldr	r1, [pc, #28]	; (8002180 <__NVIC_EnableIRQ+0x38>)
 8002162:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002166:	095b      	lsrs	r3, r3, #5
 8002168:	2001      	movs	r0, #1
 800216a:	fa00 f202 	lsl.w	r2, r0, r2
 800216e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002172:	bf00      	nop
 8002174:	370c      	adds	r7, #12
 8002176:	46bd      	mov	sp, r7
 8002178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800217c:	4770      	bx	lr
 800217e:	bf00      	nop
 8002180:	e000e100 	.word	0xe000e100

08002184 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002184:	b480      	push	{r7}
 8002186:	b083      	sub	sp, #12
 8002188:	af00      	add	r7, sp, #0
 800218a:	4603      	mov	r3, r0
 800218c:	6039      	str	r1, [r7, #0]
 800218e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002190:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002194:	2b00      	cmp	r3, #0
 8002196:	db0a      	blt.n	80021ae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002198:	683b      	ldr	r3, [r7, #0]
 800219a:	b2da      	uxtb	r2, r3
 800219c:	490c      	ldr	r1, [pc, #48]	; (80021d0 <__NVIC_SetPriority+0x4c>)
 800219e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021a2:	0112      	lsls	r2, r2, #4
 80021a4:	b2d2      	uxtb	r2, r2
 80021a6:	440b      	add	r3, r1
 80021a8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80021ac:	e00a      	b.n	80021c4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80021ae:	683b      	ldr	r3, [r7, #0]
 80021b0:	b2da      	uxtb	r2, r3
 80021b2:	4908      	ldr	r1, [pc, #32]	; (80021d4 <__NVIC_SetPriority+0x50>)
 80021b4:	79fb      	ldrb	r3, [r7, #7]
 80021b6:	f003 030f 	and.w	r3, r3, #15
 80021ba:	3b04      	subs	r3, #4
 80021bc:	0112      	lsls	r2, r2, #4
 80021be:	b2d2      	uxtb	r2, r2
 80021c0:	440b      	add	r3, r1
 80021c2:	761a      	strb	r2, [r3, #24]
}
 80021c4:	bf00      	nop
 80021c6:	370c      	adds	r7, #12
 80021c8:	46bd      	mov	sp, r7
 80021ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ce:	4770      	bx	lr
 80021d0:	e000e100 	.word	0xe000e100
 80021d4:	e000ed00 	.word	0xe000ed00

080021d8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80021d8:	b480      	push	{r7}
 80021da:	b089      	sub	sp, #36	; 0x24
 80021dc:	af00      	add	r7, sp, #0
 80021de:	60f8      	str	r0, [r7, #12]
 80021e0:	60b9      	str	r1, [r7, #8]
 80021e2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	f003 0307 	and.w	r3, r3, #7
 80021ea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80021ec:	69fb      	ldr	r3, [r7, #28]
 80021ee:	f1c3 0307 	rsb	r3, r3, #7
 80021f2:	2b04      	cmp	r3, #4
 80021f4:	bf28      	it	cs
 80021f6:	2304      	movcs	r3, #4
 80021f8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80021fa:	69fb      	ldr	r3, [r7, #28]
 80021fc:	3304      	adds	r3, #4
 80021fe:	2b06      	cmp	r3, #6
 8002200:	d902      	bls.n	8002208 <NVIC_EncodePriority+0x30>
 8002202:	69fb      	ldr	r3, [r7, #28]
 8002204:	3b03      	subs	r3, #3
 8002206:	e000      	b.n	800220a <NVIC_EncodePriority+0x32>
 8002208:	2300      	movs	r3, #0
 800220a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800220c:	f04f 32ff 	mov.w	r2, #4294967295
 8002210:	69bb      	ldr	r3, [r7, #24]
 8002212:	fa02 f303 	lsl.w	r3, r2, r3
 8002216:	43da      	mvns	r2, r3
 8002218:	68bb      	ldr	r3, [r7, #8]
 800221a:	401a      	ands	r2, r3
 800221c:	697b      	ldr	r3, [r7, #20]
 800221e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002220:	f04f 31ff 	mov.w	r1, #4294967295
 8002224:	697b      	ldr	r3, [r7, #20]
 8002226:	fa01 f303 	lsl.w	r3, r1, r3
 800222a:	43d9      	mvns	r1, r3
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002230:	4313      	orrs	r3, r2
         );
}
 8002232:	4618      	mov	r0, r3
 8002234:	3724      	adds	r7, #36	; 0x24
 8002236:	46bd      	mov	sp, r7
 8002238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800223c:	4770      	bx	lr

0800223e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800223e:	b580      	push	{r7, lr}
 8002240:	b082      	sub	sp, #8
 8002242:	af00      	add	r7, sp, #0
 8002244:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002246:	6878      	ldr	r0, [r7, #4]
 8002248:	f7ff ff4c 	bl	80020e4 <__NVIC_SetPriorityGrouping>
}
 800224c:	bf00      	nop
 800224e:	3708      	adds	r7, #8
 8002250:	46bd      	mov	sp, r7
 8002252:	bd80      	pop	{r7, pc}

08002254 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002254:	b580      	push	{r7, lr}
 8002256:	b086      	sub	sp, #24
 8002258:	af00      	add	r7, sp, #0
 800225a:	4603      	mov	r3, r0
 800225c:	60b9      	str	r1, [r7, #8]
 800225e:	607a      	str	r2, [r7, #4]
 8002260:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002262:	2300      	movs	r3, #0
 8002264:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002266:	f7ff ff61 	bl	800212c <__NVIC_GetPriorityGrouping>
 800226a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800226c:	687a      	ldr	r2, [r7, #4]
 800226e:	68b9      	ldr	r1, [r7, #8]
 8002270:	6978      	ldr	r0, [r7, #20]
 8002272:	f7ff ffb1 	bl	80021d8 <NVIC_EncodePriority>
 8002276:	4602      	mov	r2, r0
 8002278:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800227c:	4611      	mov	r1, r2
 800227e:	4618      	mov	r0, r3
 8002280:	f7ff ff80 	bl	8002184 <__NVIC_SetPriority>
}
 8002284:	bf00      	nop
 8002286:	3718      	adds	r7, #24
 8002288:	46bd      	mov	sp, r7
 800228a:	bd80      	pop	{r7, pc}

0800228c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800228c:	b580      	push	{r7, lr}
 800228e:	b082      	sub	sp, #8
 8002290:	af00      	add	r7, sp, #0
 8002292:	4603      	mov	r3, r0
 8002294:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002296:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800229a:	4618      	mov	r0, r3
 800229c:	f7ff ff54 	bl	8002148 <__NVIC_EnableIRQ>
}
 80022a0:	bf00      	nop
 80022a2:	3708      	adds	r7, #8
 80022a4:	46bd      	mov	sp, r7
 80022a6:	bd80      	pop	{r7, pc}

080022a8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 80022a8:	b580      	push	{r7, lr}
 80022aa:	b084      	sub	sp, #16
 80022ac:	af00      	add	r7, sp, #0
 80022ae:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80022b0:	2300      	movs	r3, #0
 80022b2:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d101      	bne.n	80022be <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 80022ba:	2301      	movs	r3, #1
 80022bc:	e037      	b.n	800232e <HAL_DMA_Init+0x86>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	2202      	movs	r2, #2
 80022c2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80022d4:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80022d8:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80022e2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	68db      	ldr	r3, [r3, #12]
 80022e8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80022ee:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	695b      	ldr	r3, [r3, #20]
 80022f4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80022fa:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	69db      	ldr	r3, [r3, #28]
 8002300:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002302:	68fa      	ldr	r2, [r7, #12]
 8002304:	4313      	orrs	r3, r2
 8002306:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	68fa      	ldr	r2, [r7, #12]
 800230e:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8002310:	6878      	ldr	r0, [r7, #4]
 8002312:	f000 f941 	bl	8002598 <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	2200      	movs	r2, #0
 800231a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	2201      	movs	r2, #1
 8002320:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	2200      	movs	r2, #0
 8002328:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 800232c:	2300      	movs	r3, #0
}  
 800232e:	4618      	mov	r0, r3
 8002330:	3710      	adds	r7, #16
 8002332:	46bd      	mov	sp, r7
 8002334:	bd80      	pop	{r7, pc}

08002336 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002336:	b580      	push	{r7, lr}
 8002338:	b086      	sub	sp, #24
 800233a:	af00      	add	r7, sp, #0
 800233c:	60f8      	str	r0, [r7, #12]
 800233e:	60b9      	str	r1, [r7, #8]
 8002340:	607a      	str	r2, [r7, #4]
 8002342:	603b      	str	r3, [r7, #0]
	HAL_StatusTypeDef status = HAL_OK;
 8002344:	2300      	movs	r3, #0
 8002346:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Process locked */
  __HAL_LOCK(hdma);
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800234e:	2b01      	cmp	r3, #1
 8002350:	d101      	bne.n	8002356 <HAL_DMA_Start_IT+0x20>
 8002352:	2302      	movs	r3, #2
 8002354:	e04a      	b.n	80023ec <HAL_DMA_Start_IT+0xb6>
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	2201      	movs	r2, #1
 800235a:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002364:	2b01      	cmp	r3, #1
 8002366:	d13a      	bne.n	80023de <HAL_DMA_Start_IT+0xa8>
  {
  	/* Change DMA peripheral state */  
  	hdma->State = HAL_DMA_STATE_BUSY;
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	2202      	movs	r2, #2
 800236c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	2200      	movs	r2, #0
 8002374:	639a      	str	r2, [r3, #56]	; 0x38
  	
  	/* Disable the peripheral */
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	681a      	ldr	r2, [r3, #0]
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	f022 0201 	bic.w	r2, r2, #1
 8002384:	601a      	str	r2, [r3, #0]
  	
  	/* Configure the source, destination address and the data length */  
  	DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002386:	683b      	ldr	r3, [r7, #0]
 8002388:	687a      	ldr	r2, [r7, #4]
 800238a:	68b9      	ldr	r1, [r7, #8]
 800238c:	68f8      	ldr	r0, [r7, #12]
 800238e:	f000 f8d4 	bl	800253a <DMA_SetConfig>
  	
  	/* Enable the transfer complete, & transfer error interrupts */
  	/* Half transfer interrupt is optional: enable it only if associated callback is available */
    if(NULL != hdma->XferHalfCpltCallback )
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002396:	2b00      	cmp	r3, #0
 8002398:	d008      	beq.n	80023ac <HAL_DMA_Start_IT+0x76>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	681a      	ldr	r2, [r3, #0]
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	f042 020e 	orr.w	r2, r2, #14
 80023a8:	601a      	str	r2, [r3, #0]
 80023aa:	e00f      	b.n	80023cc <HAL_DMA_Start_IT+0x96>
    }
  	else
  	{
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	681a      	ldr	r2, [r3, #0]
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	f042 020a 	orr.w	r2, r2, #10
 80023ba:	601a      	str	r2, [r3, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	681a      	ldr	r2, [r3, #0]
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	f022 0204 	bic.w	r2, r2, #4
 80023ca:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Enable the Peripheral */
  	hdma->Instance->CCR |= DMA_CCR_EN;
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	681a      	ldr	r2, [r3, #0]
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	f042 0201 	orr.w	r2, r2, #1
 80023da:	601a      	str	r2, [r3, #0]
 80023dc:	e005      	b.n	80023ea <HAL_DMA_Start_IT+0xb4>
  }
  else
  {
  	/* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	2200      	movs	r2, #0
 80023e2:	f883 2020 	strb.w	r2, [r3, #32]
  
    /* Remain BUSY */
    status = HAL_BUSY;
 80023e6:	2302      	movs	r3, #2
 80023e8:	75fb      	strb	r3, [r7, #23]
  }     
  
  return status;    
 80023ea:	7dfb      	ldrb	r3, [r7, #23]
} 
 80023ec:	4618      	mov	r0, r3
 80023ee:	3718      	adds	r7, #24
 80023f0:	46bd      	mov	sp, r7
 80023f2:	bd80      	pop	{r7, pc}

080023f4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80023f4:	b580      	push	{r7, lr}
 80023f6:	b084      	sub	sp, #16
 80023f8:	af00      	add	r7, sp, #0
 80023fa:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002410:	2204      	movs	r2, #4
 8002412:	409a      	lsls	r2, r3
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	4013      	ands	r3, r2
 8002418:	2b00      	cmp	r3, #0
 800241a:	d024      	beq.n	8002466 <HAL_DMA_IRQHandler+0x72>
 800241c:	68bb      	ldr	r3, [r7, #8]
 800241e:	f003 0304 	and.w	r3, r3, #4
 8002422:	2b00      	cmp	r3, #0
 8002424:	d01f      	beq.n	8002466 <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	f003 0320 	and.w	r3, r3, #32
 8002430:	2b00      	cmp	r3, #0
 8002432:	d107      	bne.n	8002444 <HAL_DMA_IRQHandler+0x50>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	681a      	ldr	r2, [r3, #0]
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	f022 0204 	bic.w	r2, r2, #4
 8002442:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800244c:	2104      	movs	r1, #4
 800244e:	fa01 f202 	lsl.w	r2, r1, r2
 8002452:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002458:	2b00      	cmp	r3, #0
 800245a:	d06a      	beq.n	8002532 <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002460:	6878      	ldr	r0, [r7, #4]
 8002462:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 8002464:	e065      	b.n	8002532 <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800246a:	2202      	movs	r2, #2
 800246c:	409a      	lsls	r2, r3
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	4013      	ands	r3, r2
 8002472:	2b00      	cmp	r3, #0
 8002474:	d02c      	beq.n	80024d0 <HAL_DMA_IRQHandler+0xdc>
 8002476:	68bb      	ldr	r3, [r7, #8]
 8002478:	f003 0302 	and.w	r3, r3, #2
 800247c:	2b00      	cmp	r3, #0
 800247e:	d027      	beq.n	80024d0 <HAL_DMA_IRQHandler+0xdc>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	f003 0320 	and.w	r3, r3, #32
 800248a:	2b00      	cmp	r3, #0
 800248c:	d10b      	bne.n	80024a6 <HAL_DMA_IRQHandler+0xb2>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	681a      	ldr	r2, [r3, #0]
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	f022 020a 	bic.w	r2, r2, #10
 800249c:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	2201      	movs	r2, #1
 80024a2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80024ae:	2102      	movs	r1, #2
 80024b0:	fa01 f202 	lsl.w	r2, r1, r2
 80024b4:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	2200      	movs	r2, #0
 80024ba:	f883 2020 	strb.w	r2, [r3, #32]
  	
  	if(hdma->XferCpltCallback != NULL)
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d035      	beq.n	8002532 <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024ca:	6878      	ldr	r0, [r7, #4]
 80024cc:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 80024ce:	e030      	b.n	8002532 <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024d4:	2208      	movs	r2, #8
 80024d6:	409a      	lsls	r2, r3
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	4013      	ands	r3, r2
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d028      	beq.n	8002532 <HAL_DMA_IRQHandler+0x13e>
 80024e0:	68bb      	ldr	r3, [r7, #8]
 80024e2:	f003 0308 	and.w	r3, r3, #8
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d023      	beq.n	8002532 <HAL_DMA_IRQHandler+0x13e>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	681a      	ldr	r2, [r3, #0]
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	f022 020e 	bic.w	r2, r2, #14
 80024f8:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002502:	2101      	movs	r1, #1
 8002504:	fa01 f202 	lsl.w	r2, r1, r2
 8002508:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	2201      	movs	r2, #1
 800250e:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	2201      	movs	r2, #1
 8002514:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	2200      	movs	r2, #0
 800251c:	f883 2020 	strb.w	r2, [r3, #32]
    
    if(hdma->XferErrorCallback != NULL)
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002524:	2b00      	cmp	r3, #0
 8002526:	d004      	beq.n	8002532 <HAL_DMA_IRQHandler+0x13e>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800252c:	6878      	ldr	r0, [r7, #4]
 800252e:	4798      	blx	r3
    }
  }
}  
 8002530:	e7ff      	b.n	8002532 <HAL_DMA_IRQHandler+0x13e>
 8002532:	bf00      	nop
 8002534:	3710      	adds	r7, #16
 8002536:	46bd      	mov	sp, r7
 8002538:	bd80      	pop	{r7, pc}

0800253a <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800253a:	b480      	push	{r7}
 800253c:	b085      	sub	sp, #20
 800253e:	af00      	add	r7, sp, #0
 8002540:	60f8      	str	r0, [r7, #12]
 8002542:	60b9      	str	r1, [r7, #8]
 8002544:	607a      	str	r2, [r7, #4]
 8002546:	603b      	str	r3, [r7, #0]
	/* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002550:	2101      	movs	r1, #1
 8002552:	fa01 f202 	lsl.w	r2, r1, r2
 8002556:	605a      	str	r2, [r3, #4]
  
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	683a      	ldr	r2, [r7, #0]
 800255e:	605a      	str	r2, [r3, #4]
  
  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	685b      	ldr	r3, [r3, #4]
 8002564:	2b10      	cmp	r3, #16
 8002566:	d108      	bne.n	800257a <DMA_SetConfig+0x40>
  {   
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	687a      	ldr	r2, [r7, #4]
 800256e:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	68ba      	ldr	r2, [r7, #8]
 8002576:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;
    
    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002578:	e007      	b.n	800258a <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	68ba      	ldr	r2, [r7, #8]
 8002580:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	687a      	ldr	r2, [r7, #4]
 8002588:	60da      	str	r2, [r3, #12]
}
 800258a:	bf00      	nop
 800258c:	3714      	adds	r7, #20
 800258e:	46bd      	mov	sp, r7
 8002590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002594:	4770      	bx	lr
	...

08002598 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002598:	b480      	push	{r7}
 800259a:	b083      	sub	sp, #12
 800259c:	af00      	add	r7, sp, #0
 800259e:	6078      	str	r0, [r7, #4]
#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	461a      	mov	r2, r3
 80025a6:	4b14      	ldr	r3, [pc, #80]	; (80025f8 <DMA_CalcBaseAndBitshift+0x60>)
 80025a8:	429a      	cmp	r2, r3
 80025aa:	d80f      	bhi.n	80025cc <DMA_CalcBaseAndBitshift+0x34>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	461a      	mov	r2, r3
 80025b2:	4b12      	ldr	r3, [pc, #72]	; (80025fc <DMA_CalcBaseAndBitshift+0x64>)
 80025b4:	4413      	add	r3, r2
 80025b6:	4a12      	ldr	r2, [pc, #72]	; (8002600 <DMA_CalcBaseAndBitshift+0x68>)
 80025b8:	fba2 2303 	umull	r2, r3, r2, r3
 80025bc:	091b      	lsrs	r3, r3, #4
 80025be:	009a      	lsls	r2, r3, #2
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA1;
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	4a0f      	ldr	r2, [pc, #60]	; (8002604 <DMA_CalcBaseAndBitshift+0x6c>)
 80025c8:	63da      	str	r2, [r3, #60]	; 0x3c
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif
}
 80025ca:	e00e      	b.n	80025ea <DMA_CalcBaseAndBitshift+0x52>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	461a      	mov	r2, r3
 80025d2:	4b0d      	ldr	r3, [pc, #52]	; (8002608 <DMA_CalcBaseAndBitshift+0x70>)
 80025d4:	4413      	add	r3, r2
 80025d6:	4a0a      	ldr	r2, [pc, #40]	; (8002600 <DMA_CalcBaseAndBitshift+0x68>)
 80025d8:	fba2 2303 	umull	r2, r3, r2, r3
 80025dc:	091b      	lsrs	r3, r3, #4
 80025de:	009a      	lsls	r2, r3, #2
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA2;
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	4a09      	ldr	r2, [pc, #36]	; (800260c <DMA_CalcBaseAndBitshift+0x74>)
 80025e8:	63da      	str	r2, [r3, #60]	; 0x3c
}
 80025ea:	bf00      	nop
 80025ec:	370c      	adds	r7, #12
 80025ee:	46bd      	mov	sp, r7
 80025f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f4:	4770      	bx	lr
 80025f6:	bf00      	nop
 80025f8:	40020407 	.word	0x40020407
 80025fc:	bffdfff8 	.word	0xbffdfff8
 8002600:	cccccccd 	.word	0xcccccccd
 8002604:	40020000 	.word	0x40020000
 8002608:	bffdfbf8 	.word	0xbffdfbf8
 800260c:	40020400 	.word	0x40020400

08002610 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002610:	b480      	push	{r7}
 8002612:	b087      	sub	sp, #28
 8002614:	af00      	add	r7, sp, #0
 8002616:	6078      	str	r0, [r7, #4]
 8002618:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800261a:	2300      	movs	r3, #0
 800261c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800261e:	e160      	b.n	80028e2 <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002620:	683b      	ldr	r3, [r7, #0]
 8002622:	681a      	ldr	r2, [r3, #0]
 8002624:	2101      	movs	r1, #1
 8002626:	697b      	ldr	r3, [r7, #20]
 8002628:	fa01 f303 	lsl.w	r3, r1, r3
 800262c:	4013      	ands	r3, r2
 800262e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	2b00      	cmp	r3, #0
 8002634:	f000 8152 	beq.w	80028dc <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002638:	683b      	ldr	r3, [r7, #0]
 800263a:	685b      	ldr	r3, [r3, #4]
 800263c:	f003 0303 	and.w	r3, r3, #3
 8002640:	2b01      	cmp	r3, #1
 8002642:	d005      	beq.n	8002650 <HAL_GPIO_Init+0x40>
 8002644:	683b      	ldr	r3, [r7, #0]
 8002646:	685b      	ldr	r3, [r3, #4]
 8002648:	f003 0303 	and.w	r3, r3, #3
 800264c:	2b02      	cmp	r3, #2
 800264e:	d130      	bne.n	80026b2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	689b      	ldr	r3, [r3, #8]
 8002654:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8002656:	697b      	ldr	r3, [r7, #20]
 8002658:	005b      	lsls	r3, r3, #1
 800265a:	2203      	movs	r2, #3
 800265c:	fa02 f303 	lsl.w	r3, r2, r3
 8002660:	43db      	mvns	r3, r3
 8002662:	693a      	ldr	r2, [r7, #16]
 8002664:	4013      	ands	r3, r2
 8002666:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002668:	683b      	ldr	r3, [r7, #0]
 800266a:	68da      	ldr	r2, [r3, #12]
 800266c:	697b      	ldr	r3, [r7, #20]
 800266e:	005b      	lsls	r3, r3, #1
 8002670:	fa02 f303 	lsl.w	r3, r2, r3
 8002674:	693a      	ldr	r2, [r7, #16]
 8002676:	4313      	orrs	r3, r2
 8002678:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	693a      	ldr	r2, [r7, #16]
 800267e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	685b      	ldr	r3, [r3, #4]
 8002684:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002686:	2201      	movs	r2, #1
 8002688:	697b      	ldr	r3, [r7, #20]
 800268a:	fa02 f303 	lsl.w	r3, r2, r3
 800268e:	43db      	mvns	r3, r3
 8002690:	693a      	ldr	r2, [r7, #16]
 8002692:	4013      	ands	r3, r2
 8002694:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002696:	683b      	ldr	r3, [r7, #0]
 8002698:	685b      	ldr	r3, [r3, #4]
 800269a:	091b      	lsrs	r3, r3, #4
 800269c:	f003 0201 	and.w	r2, r3, #1
 80026a0:	697b      	ldr	r3, [r7, #20]
 80026a2:	fa02 f303 	lsl.w	r3, r2, r3
 80026a6:	693a      	ldr	r2, [r7, #16]
 80026a8:	4313      	orrs	r3, r2
 80026aa:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	693a      	ldr	r2, [r7, #16]
 80026b0:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80026b2:	683b      	ldr	r3, [r7, #0]
 80026b4:	685b      	ldr	r3, [r3, #4]
 80026b6:	f003 0303 	and.w	r3, r3, #3
 80026ba:	2b03      	cmp	r3, #3
 80026bc:	d017      	beq.n	80026ee <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	68db      	ldr	r3, [r3, #12]
 80026c2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80026c4:	697b      	ldr	r3, [r7, #20]
 80026c6:	005b      	lsls	r3, r3, #1
 80026c8:	2203      	movs	r2, #3
 80026ca:	fa02 f303 	lsl.w	r3, r2, r3
 80026ce:	43db      	mvns	r3, r3
 80026d0:	693a      	ldr	r2, [r7, #16]
 80026d2:	4013      	ands	r3, r2
 80026d4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80026d6:	683b      	ldr	r3, [r7, #0]
 80026d8:	689a      	ldr	r2, [r3, #8]
 80026da:	697b      	ldr	r3, [r7, #20]
 80026dc:	005b      	lsls	r3, r3, #1
 80026de:	fa02 f303 	lsl.w	r3, r2, r3
 80026e2:	693a      	ldr	r2, [r7, #16]
 80026e4:	4313      	orrs	r3, r2
 80026e6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	693a      	ldr	r2, [r7, #16]
 80026ec:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80026ee:	683b      	ldr	r3, [r7, #0]
 80026f0:	685b      	ldr	r3, [r3, #4]
 80026f2:	f003 0303 	and.w	r3, r3, #3
 80026f6:	2b02      	cmp	r3, #2
 80026f8:	d123      	bne.n	8002742 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80026fa:	697b      	ldr	r3, [r7, #20]
 80026fc:	08da      	lsrs	r2, r3, #3
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	3208      	adds	r2, #8
 8002702:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002706:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002708:	697b      	ldr	r3, [r7, #20]
 800270a:	f003 0307 	and.w	r3, r3, #7
 800270e:	009b      	lsls	r3, r3, #2
 8002710:	220f      	movs	r2, #15
 8002712:	fa02 f303 	lsl.w	r3, r2, r3
 8002716:	43db      	mvns	r3, r3
 8002718:	693a      	ldr	r2, [r7, #16]
 800271a:	4013      	ands	r3, r2
 800271c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800271e:	683b      	ldr	r3, [r7, #0]
 8002720:	691a      	ldr	r2, [r3, #16]
 8002722:	697b      	ldr	r3, [r7, #20]
 8002724:	f003 0307 	and.w	r3, r3, #7
 8002728:	009b      	lsls	r3, r3, #2
 800272a:	fa02 f303 	lsl.w	r3, r2, r3
 800272e:	693a      	ldr	r2, [r7, #16]
 8002730:	4313      	orrs	r3, r2
 8002732:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002734:	697b      	ldr	r3, [r7, #20]
 8002736:	08da      	lsrs	r2, r3, #3
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	3208      	adds	r2, #8
 800273c:	6939      	ldr	r1, [r7, #16]
 800273e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8002748:	697b      	ldr	r3, [r7, #20]
 800274a:	005b      	lsls	r3, r3, #1
 800274c:	2203      	movs	r2, #3
 800274e:	fa02 f303 	lsl.w	r3, r2, r3
 8002752:	43db      	mvns	r3, r3
 8002754:	693a      	ldr	r2, [r7, #16]
 8002756:	4013      	ands	r3, r2
 8002758:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800275a:	683b      	ldr	r3, [r7, #0]
 800275c:	685b      	ldr	r3, [r3, #4]
 800275e:	f003 0203 	and.w	r2, r3, #3
 8002762:	697b      	ldr	r3, [r7, #20]
 8002764:	005b      	lsls	r3, r3, #1
 8002766:	fa02 f303 	lsl.w	r3, r2, r3
 800276a:	693a      	ldr	r2, [r7, #16]
 800276c:	4313      	orrs	r3, r2
 800276e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	693a      	ldr	r2, [r7, #16]
 8002774:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002776:	683b      	ldr	r3, [r7, #0]
 8002778:	685b      	ldr	r3, [r3, #4]
 800277a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800277e:	2b00      	cmp	r3, #0
 8002780:	f000 80ac 	beq.w	80028dc <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002784:	4b5e      	ldr	r3, [pc, #376]	; (8002900 <HAL_GPIO_Init+0x2f0>)
 8002786:	699b      	ldr	r3, [r3, #24]
 8002788:	4a5d      	ldr	r2, [pc, #372]	; (8002900 <HAL_GPIO_Init+0x2f0>)
 800278a:	f043 0301 	orr.w	r3, r3, #1
 800278e:	6193      	str	r3, [r2, #24]
 8002790:	4b5b      	ldr	r3, [pc, #364]	; (8002900 <HAL_GPIO_Init+0x2f0>)
 8002792:	699b      	ldr	r3, [r3, #24]
 8002794:	f003 0301 	and.w	r3, r3, #1
 8002798:	60bb      	str	r3, [r7, #8]
 800279a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800279c:	4a59      	ldr	r2, [pc, #356]	; (8002904 <HAL_GPIO_Init+0x2f4>)
 800279e:	697b      	ldr	r3, [r7, #20]
 80027a0:	089b      	lsrs	r3, r3, #2
 80027a2:	3302      	adds	r3, #2
 80027a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80027a8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80027aa:	697b      	ldr	r3, [r7, #20]
 80027ac:	f003 0303 	and.w	r3, r3, #3
 80027b0:	009b      	lsls	r3, r3, #2
 80027b2:	220f      	movs	r2, #15
 80027b4:	fa02 f303 	lsl.w	r3, r2, r3
 80027b8:	43db      	mvns	r3, r3
 80027ba:	693a      	ldr	r2, [r7, #16]
 80027bc:	4013      	ands	r3, r2
 80027be:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80027c6:	d025      	beq.n	8002814 <HAL_GPIO_Init+0x204>
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	4a4f      	ldr	r2, [pc, #316]	; (8002908 <HAL_GPIO_Init+0x2f8>)
 80027cc:	4293      	cmp	r3, r2
 80027ce:	d01f      	beq.n	8002810 <HAL_GPIO_Init+0x200>
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	4a4e      	ldr	r2, [pc, #312]	; (800290c <HAL_GPIO_Init+0x2fc>)
 80027d4:	4293      	cmp	r3, r2
 80027d6:	d019      	beq.n	800280c <HAL_GPIO_Init+0x1fc>
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	4a4d      	ldr	r2, [pc, #308]	; (8002910 <HAL_GPIO_Init+0x300>)
 80027dc:	4293      	cmp	r3, r2
 80027de:	d013      	beq.n	8002808 <HAL_GPIO_Init+0x1f8>
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	4a4c      	ldr	r2, [pc, #304]	; (8002914 <HAL_GPIO_Init+0x304>)
 80027e4:	4293      	cmp	r3, r2
 80027e6:	d00d      	beq.n	8002804 <HAL_GPIO_Init+0x1f4>
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	4a4b      	ldr	r2, [pc, #300]	; (8002918 <HAL_GPIO_Init+0x308>)
 80027ec:	4293      	cmp	r3, r2
 80027ee:	d007      	beq.n	8002800 <HAL_GPIO_Init+0x1f0>
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	4a4a      	ldr	r2, [pc, #296]	; (800291c <HAL_GPIO_Init+0x30c>)
 80027f4:	4293      	cmp	r3, r2
 80027f6:	d101      	bne.n	80027fc <HAL_GPIO_Init+0x1ec>
 80027f8:	2306      	movs	r3, #6
 80027fa:	e00c      	b.n	8002816 <HAL_GPIO_Init+0x206>
 80027fc:	2307      	movs	r3, #7
 80027fe:	e00a      	b.n	8002816 <HAL_GPIO_Init+0x206>
 8002800:	2305      	movs	r3, #5
 8002802:	e008      	b.n	8002816 <HAL_GPIO_Init+0x206>
 8002804:	2304      	movs	r3, #4
 8002806:	e006      	b.n	8002816 <HAL_GPIO_Init+0x206>
 8002808:	2303      	movs	r3, #3
 800280a:	e004      	b.n	8002816 <HAL_GPIO_Init+0x206>
 800280c:	2302      	movs	r3, #2
 800280e:	e002      	b.n	8002816 <HAL_GPIO_Init+0x206>
 8002810:	2301      	movs	r3, #1
 8002812:	e000      	b.n	8002816 <HAL_GPIO_Init+0x206>
 8002814:	2300      	movs	r3, #0
 8002816:	697a      	ldr	r2, [r7, #20]
 8002818:	f002 0203 	and.w	r2, r2, #3
 800281c:	0092      	lsls	r2, r2, #2
 800281e:	4093      	lsls	r3, r2
 8002820:	693a      	ldr	r2, [r7, #16]
 8002822:	4313      	orrs	r3, r2
 8002824:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002826:	4937      	ldr	r1, [pc, #220]	; (8002904 <HAL_GPIO_Init+0x2f4>)
 8002828:	697b      	ldr	r3, [r7, #20]
 800282a:	089b      	lsrs	r3, r3, #2
 800282c:	3302      	adds	r3, #2
 800282e:	693a      	ldr	r2, [r7, #16]
 8002830:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002834:	4b3a      	ldr	r3, [pc, #232]	; (8002920 <HAL_GPIO_Init+0x310>)
 8002836:	689b      	ldr	r3, [r3, #8]
 8002838:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	43db      	mvns	r3, r3
 800283e:	693a      	ldr	r2, [r7, #16]
 8002840:	4013      	ands	r3, r2
 8002842:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002844:	683b      	ldr	r3, [r7, #0]
 8002846:	685b      	ldr	r3, [r3, #4]
 8002848:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800284c:	2b00      	cmp	r3, #0
 800284e:	d003      	beq.n	8002858 <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 8002850:	693a      	ldr	r2, [r7, #16]
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	4313      	orrs	r3, r2
 8002856:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002858:	4a31      	ldr	r2, [pc, #196]	; (8002920 <HAL_GPIO_Init+0x310>)
 800285a:	693b      	ldr	r3, [r7, #16]
 800285c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800285e:	4b30      	ldr	r3, [pc, #192]	; (8002920 <HAL_GPIO_Init+0x310>)
 8002860:	68db      	ldr	r3, [r3, #12]
 8002862:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	43db      	mvns	r3, r3
 8002868:	693a      	ldr	r2, [r7, #16]
 800286a:	4013      	ands	r3, r2
 800286c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800286e:	683b      	ldr	r3, [r7, #0]
 8002870:	685b      	ldr	r3, [r3, #4]
 8002872:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002876:	2b00      	cmp	r3, #0
 8002878:	d003      	beq.n	8002882 <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 800287a:	693a      	ldr	r2, [r7, #16]
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	4313      	orrs	r3, r2
 8002880:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002882:	4a27      	ldr	r2, [pc, #156]	; (8002920 <HAL_GPIO_Init+0x310>)
 8002884:	693b      	ldr	r3, [r7, #16]
 8002886:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002888:	4b25      	ldr	r3, [pc, #148]	; (8002920 <HAL_GPIO_Init+0x310>)
 800288a:	685b      	ldr	r3, [r3, #4]
 800288c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	43db      	mvns	r3, r3
 8002892:	693a      	ldr	r2, [r7, #16]
 8002894:	4013      	ands	r3, r2
 8002896:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002898:	683b      	ldr	r3, [r7, #0]
 800289a:	685b      	ldr	r3, [r3, #4]
 800289c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d003      	beq.n	80028ac <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 80028a4:	693a      	ldr	r2, [r7, #16]
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	4313      	orrs	r3, r2
 80028aa:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80028ac:	4a1c      	ldr	r2, [pc, #112]	; (8002920 <HAL_GPIO_Init+0x310>)
 80028ae:	693b      	ldr	r3, [r7, #16]
 80028b0:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80028b2:	4b1b      	ldr	r3, [pc, #108]	; (8002920 <HAL_GPIO_Init+0x310>)
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	43db      	mvns	r3, r3
 80028bc:	693a      	ldr	r2, [r7, #16]
 80028be:	4013      	ands	r3, r2
 80028c0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80028c2:	683b      	ldr	r3, [r7, #0]
 80028c4:	685b      	ldr	r3, [r3, #4]
 80028c6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d003      	beq.n	80028d6 <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 80028ce:	693a      	ldr	r2, [r7, #16]
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	4313      	orrs	r3, r2
 80028d4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80028d6:	4a12      	ldr	r2, [pc, #72]	; (8002920 <HAL_GPIO_Init+0x310>)
 80028d8:	693b      	ldr	r3, [r7, #16]
 80028da:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80028dc:	697b      	ldr	r3, [r7, #20]
 80028de:	3301      	adds	r3, #1
 80028e0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80028e2:	683b      	ldr	r3, [r7, #0]
 80028e4:	681a      	ldr	r2, [r3, #0]
 80028e6:	697b      	ldr	r3, [r7, #20]
 80028e8:	fa22 f303 	lsr.w	r3, r2, r3
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	f47f ae97 	bne.w	8002620 <HAL_GPIO_Init+0x10>
  }
}
 80028f2:	bf00      	nop
 80028f4:	bf00      	nop
 80028f6:	371c      	adds	r7, #28
 80028f8:	46bd      	mov	sp, r7
 80028fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028fe:	4770      	bx	lr
 8002900:	40021000 	.word	0x40021000
 8002904:	40010000 	.word	0x40010000
 8002908:	48000400 	.word	0x48000400
 800290c:	48000800 	.word	0x48000800
 8002910:	48000c00 	.word	0x48000c00
 8002914:	48001000 	.word	0x48001000
 8002918:	48001400 	.word	0x48001400
 800291c:	48001800 	.word	0x48001800
 8002920:	40010400 	.word	0x40010400

08002924 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002924:	b480      	push	{r7}
 8002926:	b083      	sub	sp, #12
 8002928:	af00      	add	r7, sp, #0
 800292a:	6078      	str	r0, [r7, #4]
 800292c:	460b      	mov	r3, r1
 800292e:	807b      	strh	r3, [r7, #2]
 8002930:	4613      	mov	r3, r2
 8002932:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002934:	787b      	ldrb	r3, [r7, #1]
 8002936:	2b00      	cmp	r3, #0
 8002938:	d003      	beq.n	8002942 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800293a:	887a      	ldrh	r2, [r7, #2]
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002940:	e002      	b.n	8002948 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002942:	887a      	ldrh	r2, [r7, #2]
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002948:	bf00      	nop
 800294a:	370c      	adds	r7, #12
 800294c:	46bd      	mov	sp, r7
 800294e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002952:	4770      	bx	lr

08002954 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F3 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002954:	b480      	push	{r7}
 8002956:	b085      	sub	sp, #20
 8002958:	af00      	add	r7, sp, #0
 800295a:	6078      	str	r0, [r7, #4]
 800295c:	460b      	mov	r3, r1
 800295e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	695b      	ldr	r3, [r3, #20]
 8002964:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002966:	887a      	ldrh	r2, [r7, #2]
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	4013      	ands	r3, r2
 800296c:	041a      	lsls	r2, r3, #16
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	43d9      	mvns	r1, r3
 8002972:	887b      	ldrh	r3, [r7, #2]
 8002974:	400b      	ands	r3, r1
 8002976:	431a      	orrs	r2, r3
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	619a      	str	r2, [r3, #24]
}
 800297c:	bf00      	nop
 800297e:	3714      	adds	r7, #20
 8002980:	46bd      	mov	sp, r7
 8002982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002986:	4770      	bx	lr

08002988 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002988:	b580      	push	{r7, lr}
 800298a:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 800298e:	af00      	add	r7, sp, #0
 8002990:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002994:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002998:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800299a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800299e:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d102      	bne.n	80029ae <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 80029a8:	2301      	movs	r3, #1
 80029aa:	f001 b83a 	b.w	8003a22 <HAL_RCC_OscConfig+0x109a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80029ae:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80029b2:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	f003 0301 	and.w	r3, r3, #1
 80029be:	2b00      	cmp	r3, #0
 80029c0:	f000 816f 	beq.w	8002ca2 <HAL_RCC_OscConfig+0x31a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80029c4:	4bb5      	ldr	r3, [pc, #724]	; (8002c9c <HAL_RCC_OscConfig+0x314>)
 80029c6:	685b      	ldr	r3, [r3, #4]
 80029c8:	f003 030c 	and.w	r3, r3, #12
 80029cc:	2b04      	cmp	r3, #4
 80029ce:	d00c      	beq.n	80029ea <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80029d0:	4bb2      	ldr	r3, [pc, #712]	; (8002c9c <HAL_RCC_OscConfig+0x314>)
 80029d2:	685b      	ldr	r3, [r3, #4]
 80029d4:	f003 030c 	and.w	r3, r3, #12
 80029d8:	2b08      	cmp	r3, #8
 80029da:	d15c      	bne.n	8002a96 <HAL_RCC_OscConfig+0x10e>
 80029dc:	4baf      	ldr	r3, [pc, #700]	; (8002c9c <HAL_RCC_OscConfig+0x314>)
 80029de:	685b      	ldr	r3, [r3, #4]
 80029e0:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 80029e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80029e8:	d155      	bne.n	8002a96 <HAL_RCC_OscConfig+0x10e>
 80029ea:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80029ee:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029f2:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80029f6:	fa93 f3a3 	rbit	r3, r3
 80029fa:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80029fe:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a02:	fab3 f383 	clz	r3, r3
 8002a06:	b2db      	uxtb	r3, r3
 8002a08:	095b      	lsrs	r3, r3, #5
 8002a0a:	b2db      	uxtb	r3, r3
 8002a0c:	f043 0301 	orr.w	r3, r3, #1
 8002a10:	b2db      	uxtb	r3, r3
 8002a12:	2b01      	cmp	r3, #1
 8002a14:	d102      	bne.n	8002a1c <HAL_RCC_OscConfig+0x94>
 8002a16:	4ba1      	ldr	r3, [pc, #644]	; (8002c9c <HAL_RCC_OscConfig+0x314>)
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	e015      	b.n	8002a48 <HAL_RCC_OscConfig+0xc0>
 8002a1c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002a20:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a24:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 8002a28:	fa93 f3a3 	rbit	r3, r3
 8002a2c:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 8002a30:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002a34:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8002a38:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 8002a3c:	fa93 f3a3 	rbit	r3, r3
 8002a40:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8002a44:	4b95      	ldr	r3, [pc, #596]	; (8002c9c <HAL_RCC_OscConfig+0x314>)
 8002a46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a48:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002a4c:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 8002a50:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 8002a54:	fa92 f2a2 	rbit	r2, r2
 8002a58:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
  return result;
 8002a5c:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8002a60:	fab2 f282 	clz	r2, r2
 8002a64:	b2d2      	uxtb	r2, r2
 8002a66:	f042 0220 	orr.w	r2, r2, #32
 8002a6a:	b2d2      	uxtb	r2, r2
 8002a6c:	f002 021f 	and.w	r2, r2, #31
 8002a70:	2101      	movs	r1, #1
 8002a72:	fa01 f202 	lsl.w	r2, r1, r2
 8002a76:	4013      	ands	r3, r2
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	f000 8111 	beq.w	8002ca0 <HAL_RCC_OscConfig+0x318>
 8002a7e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002a82:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	685b      	ldr	r3, [r3, #4]
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	f040 8108 	bne.w	8002ca0 <HAL_RCC_OscConfig+0x318>
      {
        return HAL_ERROR;
 8002a90:	2301      	movs	r3, #1
 8002a92:	f000 bfc6 	b.w	8003a22 <HAL_RCC_OscConfig+0x109a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002a96:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002a9a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	685b      	ldr	r3, [r3, #4]
 8002aa2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002aa6:	d106      	bne.n	8002ab6 <HAL_RCC_OscConfig+0x12e>
 8002aa8:	4b7c      	ldr	r3, [pc, #496]	; (8002c9c <HAL_RCC_OscConfig+0x314>)
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	4a7b      	ldr	r2, [pc, #492]	; (8002c9c <HAL_RCC_OscConfig+0x314>)
 8002aae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ab2:	6013      	str	r3, [r2, #0]
 8002ab4:	e036      	b.n	8002b24 <HAL_RCC_OscConfig+0x19c>
 8002ab6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002aba:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	685b      	ldr	r3, [r3, #4]
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d10c      	bne.n	8002ae0 <HAL_RCC_OscConfig+0x158>
 8002ac6:	4b75      	ldr	r3, [pc, #468]	; (8002c9c <HAL_RCC_OscConfig+0x314>)
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	4a74      	ldr	r2, [pc, #464]	; (8002c9c <HAL_RCC_OscConfig+0x314>)
 8002acc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002ad0:	6013      	str	r3, [r2, #0]
 8002ad2:	4b72      	ldr	r3, [pc, #456]	; (8002c9c <HAL_RCC_OscConfig+0x314>)
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	4a71      	ldr	r2, [pc, #452]	; (8002c9c <HAL_RCC_OscConfig+0x314>)
 8002ad8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002adc:	6013      	str	r3, [r2, #0]
 8002ade:	e021      	b.n	8002b24 <HAL_RCC_OscConfig+0x19c>
 8002ae0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002ae4:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	685b      	ldr	r3, [r3, #4]
 8002aec:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002af0:	d10c      	bne.n	8002b0c <HAL_RCC_OscConfig+0x184>
 8002af2:	4b6a      	ldr	r3, [pc, #424]	; (8002c9c <HAL_RCC_OscConfig+0x314>)
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	4a69      	ldr	r2, [pc, #420]	; (8002c9c <HAL_RCC_OscConfig+0x314>)
 8002af8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002afc:	6013      	str	r3, [r2, #0]
 8002afe:	4b67      	ldr	r3, [pc, #412]	; (8002c9c <HAL_RCC_OscConfig+0x314>)
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	4a66      	ldr	r2, [pc, #408]	; (8002c9c <HAL_RCC_OscConfig+0x314>)
 8002b04:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b08:	6013      	str	r3, [r2, #0]
 8002b0a:	e00b      	b.n	8002b24 <HAL_RCC_OscConfig+0x19c>
 8002b0c:	4b63      	ldr	r3, [pc, #396]	; (8002c9c <HAL_RCC_OscConfig+0x314>)
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	4a62      	ldr	r2, [pc, #392]	; (8002c9c <HAL_RCC_OscConfig+0x314>)
 8002b12:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002b16:	6013      	str	r3, [r2, #0]
 8002b18:	4b60      	ldr	r3, [pc, #384]	; (8002c9c <HAL_RCC_OscConfig+0x314>)
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	4a5f      	ldr	r2, [pc, #380]	; (8002c9c <HAL_RCC_OscConfig+0x314>)
 8002b1e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002b22:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002b24:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002b28:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	685b      	ldr	r3, [r3, #4]
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d059      	beq.n	8002be8 <HAL_RCC_OscConfig+0x260>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b34:	f7ff faca 	bl	80020cc <HAL_GetTick>
 8002b38:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b3c:	e00a      	b.n	8002b54 <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002b3e:	f7ff fac5 	bl	80020cc <HAL_GetTick>
 8002b42:	4602      	mov	r2, r0
 8002b44:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002b48:	1ad3      	subs	r3, r2, r3
 8002b4a:	2b64      	cmp	r3, #100	; 0x64
 8002b4c:	d902      	bls.n	8002b54 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8002b4e:	2303      	movs	r3, #3
 8002b50:	f000 bf67 	b.w	8003a22 <HAL_RCC_OscConfig+0x109a>
 8002b54:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002b58:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b5c:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 8002b60:	fa93 f3a3 	rbit	r3, r3
 8002b64:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
  return result;
 8002b68:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b6c:	fab3 f383 	clz	r3, r3
 8002b70:	b2db      	uxtb	r3, r3
 8002b72:	095b      	lsrs	r3, r3, #5
 8002b74:	b2db      	uxtb	r3, r3
 8002b76:	f043 0301 	orr.w	r3, r3, #1
 8002b7a:	b2db      	uxtb	r3, r3
 8002b7c:	2b01      	cmp	r3, #1
 8002b7e:	d102      	bne.n	8002b86 <HAL_RCC_OscConfig+0x1fe>
 8002b80:	4b46      	ldr	r3, [pc, #280]	; (8002c9c <HAL_RCC_OscConfig+0x314>)
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	e015      	b.n	8002bb2 <HAL_RCC_OscConfig+0x22a>
 8002b86:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002b8a:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b8e:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 8002b92:	fa93 f3a3 	rbit	r3, r3
 8002b96:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 8002b9a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002b9e:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8002ba2:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 8002ba6:	fa93 f3a3 	rbit	r3, r3
 8002baa:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8002bae:	4b3b      	ldr	r3, [pc, #236]	; (8002c9c <HAL_RCC_OscConfig+0x314>)
 8002bb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bb2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002bb6:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
 8002bba:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 8002bbe:	fa92 f2a2 	rbit	r2, r2
 8002bc2:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
  return result;
 8002bc6:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8002bca:	fab2 f282 	clz	r2, r2
 8002bce:	b2d2      	uxtb	r2, r2
 8002bd0:	f042 0220 	orr.w	r2, r2, #32
 8002bd4:	b2d2      	uxtb	r2, r2
 8002bd6:	f002 021f 	and.w	r2, r2, #31
 8002bda:	2101      	movs	r1, #1
 8002bdc:	fa01 f202 	lsl.w	r2, r1, r2
 8002be0:	4013      	ands	r3, r2
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d0ab      	beq.n	8002b3e <HAL_RCC_OscConfig+0x1b6>
 8002be6:	e05c      	b.n	8002ca2 <HAL_RCC_OscConfig+0x31a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002be8:	f7ff fa70 	bl	80020cc <HAL_GetTick>
 8002bec:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002bf0:	e00a      	b.n	8002c08 <HAL_RCC_OscConfig+0x280>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002bf2:	f7ff fa6b 	bl	80020cc <HAL_GetTick>
 8002bf6:	4602      	mov	r2, r0
 8002bf8:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002bfc:	1ad3      	subs	r3, r2, r3
 8002bfe:	2b64      	cmp	r3, #100	; 0x64
 8002c00:	d902      	bls.n	8002c08 <HAL_RCC_OscConfig+0x280>
          {
            return HAL_TIMEOUT;
 8002c02:	2303      	movs	r3, #3
 8002c04:	f000 bf0d 	b.w	8003a22 <HAL_RCC_OscConfig+0x109a>
 8002c08:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002c0c:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c10:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 8002c14:	fa93 f3a3 	rbit	r3, r3
 8002c18:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
  return result;
 8002c1c:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002c20:	fab3 f383 	clz	r3, r3
 8002c24:	b2db      	uxtb	r3, r3
 8002c26:	095b      	lsrs	r3, r3, #5
 8002c28:	b2db      	uxtb	r3, r3
 8002c2a:	f043 0301 	orr.w	r3, r3, #1
 8002c2e:	b2db      	uxtb	r3, r3
 8002c30:	2b01      	cmp	r3, #1
 8002c32:	d102      	bne.n	8002c3a <HAL_RCC_OscConfig+0x2b2>
 8002c34:	4b19      	ldr	r3, [pc, #100]	; (8002c9c <HAL_RCC_OscConfig+0x314>)
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	e015      	b.n	8002c66 <HAL_RCC_OscConfig+0x2de>
 8002c3a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002c3e:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c42:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8002c46:	fa93 f3a3 	rbit	r3, r3
 8002c4a:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 8002c4e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002c52:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8002c56:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002c5a:	fa93 f3a3 	rbit	r3, r3
 8002c5e:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8002c62:	4b0e      	ldr	r3, [pc, #56]	; (8002c9c <HAL_RCC_OscConfig+0x314>)
 8002c64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c66:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002c6a:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 8002c6e:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 8002c72:	fa92 f2a2 	rbit	r2, r2
 8002c76:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
  return result;
 8002c7a:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8002c7e:	fab2 f282 	clz	r2, r2
 8002c82:	b2d2      	uxtb	r2, r2
 8002c84:	f042 0220 	orr.w	r2, r2, #32
 8002c88:	b2d2      	uxtb	r2, r2
 8002c8a:	f002 021f 	and.w	r2, r2, #31
 8002c8e:	2101      	movs	r1, #1
 8002c90:	fa01 f202 	lsl.w	r2, r1, r2
 8002c94:	4013      	ands	r3, r2
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d1ab      	bne.n	8002bf2 <HAL_RCC_OscConfig+0x26a>
 8002c9a:	e002      	b.n	8002ca2 <HAL_RCC_OscConfig+0x31a>
 8002c9c:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ca0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002ca2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002ca6:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	f003 0302 	and.w	r3, r3, #2
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	f000 817f 	beq.w	8002fb6 <HAL_RCC_OscConfig+0x62e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002cb8:	4ba7      	ldr	r3, [pc, #668]	; (8002f58 <HAL_RCC_OscConfig+0x5d0>)
 8002cba:	685b      	ldr	r3, [r3, #4]
 8002cbc:	f003 030c 	and.w	r3, r3, #12
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d00c      	beq.n	8002cde <HAL_RCC_OscConfig+0x356>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002cc4:	4ba4      	ldr	r3, [pc, #656]	; (8002f58 <HAL_RCC_OscConfig+0x5d0>)
 8002cc6:	685b      	ldr	r3, [r3, #4]
 8002cc8:	f003 030c 	and.w	r3, r3, #12
 8002ccc:	2b08      	cmp	r3, #8
 8002cce:	d173      	bne.n	8002db8 <HAL_RCC_OscConfig+0x430>
 8002cd0:	4ba1      	ldr	r3, [pc, #644]	; (8002f58 <HAL_RCC_OscConfig+0x5d0>)
 8002cd2:	685b      	ldr	r3, [r3, #4]
 8002cd4:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8002cd8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002cdc:	d16c      	bne.n	8002db8 <HAL_RCC_OscConfig+0x430>
 8002cde:	2302      	movs	r3, #2
 8002ce0:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ce4:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8002ce8:	fa93 f3a3 	rbit	r3, r3
 8002cec:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
  return result;
 8002cf0:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002cf4:	fab3 f383 	clz	r3, r3
 8002cf8:	b2db      	uxtb	r3, r3
 8002cfa:	095b      	lsrs	r3, r3, #5
 8002cfc:	b2db      	uxtb	r3, r3
 8002cfe:	f043 0301 	orr.w	r3, r3, #1
 8002d02:	b2db      	uxtb	r3, r3
 8002d04:	2b01      	cmp	r3, #1
 8002d06:	d102      	bne.n	8002d0e <HAL_RCC_OscConfig+0x386>
 8002d08:	4b93      	ldr	r3, [pc, #588]	; (8002f58 <HAL_RCC_OscConfig+0x5d0>)
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	e013      	b.n	8002d36 <HAL_RCC_OscConfig+0x3ae>
 8002d0e:	2302      	movs	r3, #2
 8002d10:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d14:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8002d18:	fa93 f3a3 	rbit	r3, r3
 8002d1c:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 8002d20:	2302      	movs	r3, #2
 8002d22:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8002d26:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8002d2a:	fa93 f3a3 	rbit	r3, r3
 8002d2e:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8002d32:	4b89      	ldr	r3, [pc, #548]	; (8002f58 <HAL_RCC_OscConfig+0x5d0>)
 8002d34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d36:	2202      	movs	r2, #2
 8002d38:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 8002d3c:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 8002d40:	fa92 f2a2 	rbit	r2, r2
 8002d44:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
  return result;
 8002d48:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8002d4c:	fab2 f282 	clz	r2, r2
 8002d50:	b2d2      	uxtb	r2, r2
 8002d52:	f042 0220 	orr.w	r2, r2, #32
 8002d56:	b2d2      	uxtb	r2, r2
 8002d58:	f002 021f 	and.w	r2, r2, #31
 8002d5c:	2101      	movs	r1, #1
 8002d5e:	fa01 f202 	lsl.w	r2, r1, r2
 8002d62:	4013      	ands	r3, r2
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d00a      	beq.n	8002d7e <HAL_RCC_OscConfig+0x3f6>
 8002d68:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002d6c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	68db      	ldr	r3, [r3, #12]
 8002d74:	2b01      	cmp	r3, #1
 8002d76:	d002      	beq.n	8002d7e <HAL_RCC_OscConfig+0x3f6>
      {
        return HAL_ERROR;
 8002d78:	2301      	movs	r3, #1
 8002d7a:	f000 be52 	b.w	8003a22 <HAL_RCC_OscConfig+0x109a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d7e:	4b76      	ldr	r3, [pc, #472]	; (8002f58 <HAL_RCC_OscConfig+0x5d0>)
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002d86:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002d8a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	691b      	ldr	r3, [r3, #16]
 8002d92:	21f8      	movs	r1, #248	; 0xf8
 8002d94:	f8c7 1174 	str.w	r1, [r7, #372]	; 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d98:	f8d7 1174 	ldr.w	r1, [r7, #372]	; 0x174
 8002d9c:	fa91 f1a1 	rbit	r1, r1
 8002da0:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
  return result;
 8002da4:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8002da8:	fab1 f181 	clz	r1, r1
 8002dac:	b2c9      	uxtb	r1, r1
 8002dae:	408b      	lsls	r3, r1
 8002db0:	4969      	ldr	r1, [pc, #420]	; (8002f58 <HAL_RCC_OscConfig+0x5d0>)
 8002db2:	4313      	orrs	r3, r2
 8002db4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002db6:	e0fe      	b.n	8002fb6 <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002db8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002dbc:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	68db      	ldr	r3, [r3, #12]
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	f000 8088 	beq.w	8002eda <HAL_RCC_OscConfig+0x552>
 8002dca:	2301      	movs	r3, #1
 8002dcc:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dd0:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8002dd4:	fa93 f3a3 	rbit	r3, r3
 8002dd8:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  return result;
 8002ddc:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002de0:	fab3 f383 	clz	r3, r3
 8002de4:	b2db      	uxtb	r3, r3
 8002de6:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002dea:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002dee:	009b      	lsls	r3, r3, #2
 8002df0:	461a      	mov	r2, r3
 8002df2:	2301      	movs	r3, #1
 8002df4:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002df6:	f7ff f969 	bl	80020cc <HAL_GetTick>
 8002dfa:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002dfe:	e00a      	b.n	8002e16 <HAL_RCC_OscConfig+0x48e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002e00:	f7ff f964 	bl	80020cc <HAL_GetTick>
 8002e04:	4602      	mov	r2, r0
 8002e06:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002e0a:	1ad3      	subs	r3, r2, r3
 8002e0c:	2b02      	cmp	r3, #2
 8002e0e:	d902      	bls.n	8002e16 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8002e10:	2303      	movs	r3, #3
 8002e12:	f000 be06 	b.w	8003a22 <HAL_RCC_OscConfig+0x109a>
 8002e16:	2302      	movs	r3, #2
 8002e18:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e1c:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8002e20:	fa93 f3a3 	rbit	r3, r3
 8002e24:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
  return result;
 8002e28:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e2c:	fab3 f383 	clz	r3, r3
 8002e30:	b2db      	uxtb	r3, r3
 8002e32:	095b      	lsrs	r3, r3, #5
 8002e34:	b2db      	uxtb	r3, r3
 8002e36:	f043 0301 	orr.w	r3, r3, #1
 8002e3a:	b2db      	uxtb	r3, r3
 8002e3c:	2b01      	cmp	r3, #1
 8002e3e:	d102      	bne.n	8002e46 <HAL_RCC_OscConfig+0x4be>
 8002e40:	4b45      	ldr	r3, [pc, #276]	; (8002f58 <HAL_RCC_OscConfig+0x5d0>)
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	e013      	b.n	8002e6e <HAL_RCC_OscConfig+0x4e6>
 8002e46:	2302      	movs	r3, #2
 8002e48:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e4c:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8002e50:	fa93 f3a3 	rbit	r3, r3
 8002e54:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 8002e58:	2302      	movs	r3, #2
 8002e5a:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8002e5e:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8002e62:	fa93 f3a3 	rbit	r3, r3
 8002e66:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8002e6a:	4b3b      	ldr	r3, [pc, #236]	; (8002f58 <HAL_RCC_OscConfig+0x5d0>)
 8002e6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e6e:	2202      	movs	r2, #2
 8002e70:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 8002e74:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8002e78:	fa92 f2a2 	rbit	r2, r2
 8002e7c:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
  return result;
 8002e80:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8002e84:	fab2 f282 	clz	r2, r2
 8002e88:	b2d2      	uxtb	r2, r2
 8002e8a:	f042 0220 	orr.w	r2, r2, #32
 8002e8e:	b2d2      	uxtb	r2, r2
 8002e90:	f002 021f 	and.w	r2, r2, #31
 8002e94:	2101      	movs	r1, #1
 8002e96:	fa01 f202 	lsl.w	r2, r1, r2
 8002e9a:	4013      	ands	r3, r2
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d0af      	beq.n	8002e00 <HAL_RCC_OscConfig+0x478>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ea0:	4b2d      	ldr	r3, [pc, #180]	; (8002f58 <HAL_RCC_OscConfig+0x5d0>)
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002ea8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002eac:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	691b      	ldr	r3, [r3, #16]
 8002eb4:	21f8      	movs	r1, #248	; 0xf8
 8002eb6:	f8c7 1144 	str.w	r1, [r7, #324]	; 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002eba:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 8002ebe:	fa91 f1a1 	rbit	r1, r1
 8002ec2:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
  return result;
 8002ec6:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8002eca:	fab1 f181 	clz	r1, r1
 8002ece:	b2c9      	uxtb	r1, r1
 8002ed0:	408b      	lsls	r3, r1
 8002ed2:	4921      	ldr	r1, [pc, #132]	; (8002f58 <HAL_RCC_OscConfig+0x5d0>)
 8002ed4:	4313      	orrs	r3, r2
 8002ed6:	600b      	str	r3, [r1, #0]
 8002ed8:	e06d      	b.n	8002fb6 <HAL_RCC_OscConfig+0x62e>
 8002eda:	2301      	movs	r3, #1
 8002edc:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ee0:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8002ee4:	fa93 f3a3 	rbit	r3, r3
 8002ee8:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  return result;
 8002eec:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002ef0:	fab3 f383 	clz	r3, r3
 8002ef4:	b2db      	uxtb	r3, r3
 8002ef6:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002efa:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002efe:	009b      	lsls	r3, r3, #2
 8002f00:	461a      	mov	r2, r3
 8002f02:	2300      	movs	r3, #0
 8002f04:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f06:	f7ff f8e1 	bl	80020cc <HAL_GetTick>
 8002f0a:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002f0e:	e00a      	b.n	8002f26 <HAL_RCC_OscConfig+0x59e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002f10:	f7ff f8dc 	bl	80020cc <HAL_GetTick>
 8002f14:	4602      	mov	r2, r0
 8002f16:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002f1a:	1ad3      	subs	r3, r2, r3
 8002f1c:	2b02      	cmp	r3, #2
 8002f1e:	d902      	bls.n	8002f26 <HAL_RCC_OscConfig+0x59e>
          {
            return HAL_TIMEOUT;
 8002f20:	2303      	movs	r3, #3
 8002f22:	f000 bd7e 	b.w	8003a22 <HAL_RCC_OscConfig+0x109a>
 8002f26:	2302      	movs	r3, #2
 8002f28:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f2c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8002f30:	fa93 f3a3 	rbit	r3, r3
 8002f34:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  return result;
 8002f38:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002f3c:	fab3 f383 	clz	r3, r3
 8002f40:	b2db      	uxtb	r3, r3
 8002f42:	095b      	lsrs	r3, r3, #5
 8002f44:	b2db      	uxtb	r3, r3
 8002f46:	f043 0301 	orr.w	r3, r3, #1
 8002f4a:	b2db      	uxtb	r3, r3
 8002f4c:	2b01      	cmp	r3, #1
 8002f4e:	d105      	bne.n	8002f5c <HAL_RCC_OscConfig+0x5d4>
 8002f50:	4b01      	ldr	r3, [pc, #4]	; (8002f58 <HAL_RCC_OscConfig+0x5d0>)
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	e016      	b.n	8002f84 <HAL_RCC_OscConfig+0x5fc>
 8002f56:	bf00      	nop
 8002f58:	40021000 	.word	0x40021000
 8002f5c:	2302      	movs	r3, #2
 8002f5e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f62:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8002f66:	fa93 f3a3 	rbit	r3, r3
 8002f6a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8002f6e:	2302      	movs	r3, #2
 8002f70:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8002f74:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8002f78:	fa93 f3a3 	rbit	r3, r3
 8002f7c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8002f80:	4bbf      	ldr	r3, [pc, #764]	; (8003280 <HAL_RCC_OscConfig+0x8f8>)
 8002f82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f84:	2202      	movs	r2, #2
 8002f86:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 8002f8a:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 8002f8e:	fa92 f2a2 	rbit	r2, r2
 8002f92:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
  return result;
 8002f96:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8002f9a:	fab2 f282 	clz	r2, r2
 8002f9e:	b2d2      	uxtb	r2, r2
 8002fa0:	f042 0220 	orr.w	r2, r2, #32
 8002fa4:	b2d2      	uxtb	r2, r2
 8002fa6:	f002 021f 	and.w	r2, r2, #31
 8002faa:	2101      	movs	r1, #1
 8002fac:	fa01 f202 	lsl.w	r2, r1, r2
 8002fb0:	4013      	ands	r3, r2
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d1ac      	bne.n	8002f10 <HAL_RCC_OscConfig+0x588>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002fb6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002fba:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	f003 0308 	and.w	r3, r3, #8
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	f000 8113 	beq.w	80031f2 <HAL_RCC_OscConfig+0x86a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002fcc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002fd0:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	695b      	ldr	r3, [r3, #20]
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d07c      	beq.n	80030d6 <HAL_RCC_OscConfig+0x74e>
 8002fdc:	2301      	movs	r3, #1
 8002fde:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fe2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002fe6:	fa93 f3a3 	rbit	r3, r3
 8002fea:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  return result;
 8002fee:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002ff2:	fab3 f383 	clz	r3, r3
 8002ff6:	b2db      	uxtb	r3, r3
 8002ff8:	461a      	mov	r2, r3
 8002ffa:	4ba2      	ldr	r3, [pc, #648]	; (8003284 <HAL_RCC_OscConfig+0x8fc>)
 8002ffc:	4413      	add	r3, r2
 8002ffe:	009b      	lsls	r3, r3, #2
 8003000:	461a      	mov	r2, r3
 8003002:	2301      	movs	r3, #1
 8003004:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003006:	f7ff f861 	bl	80020cc <HAL_GetTick>
 800300a:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800300e:	e00a      	b.n	8003026 <HAL_RCC_OscConfig+0x69e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003010:	f7ff f85c 	bl	80020cc <HAL_GetTick>
 8003014:	4602      	mov	r2, r0
 8003016:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800301a:	1ad3      	subs	r3, r2, r3
 800301c:	2b02      	cmp	r3, #2
 800301e:	d902      	bls.n	8003026 <HAL_RCC_OscConfig+0x69e>
        {
          return HAL_TIMEOUT;
 8003020:	2303      	movs	r3, #3
 8003022:	f000 bcfe 	b.w	8003a22 <HAL_RCC_OscConfig+0x109a>
 8003026:	2302      	movs	r3, #2
 8003028:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800302c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003030:	fa93 f2a3 	rbit	r2, r3
 8003034:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003038:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800303c:	601a      	str	r2, [r3, #0]
 800303e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003042:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8003046:	2202      	movs	r2, #2
 8003048:	601a      	str	r2, [r3, #0]
 800304a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800304e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	fa93 f2a3 	rbit	r2, r3
 8003058:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800305c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003060:	601a      	str	r2, [r3, #0]
 8003062:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003066:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800306a:	2202      	movs	r2, #2
 800306c:	601a      	str	r2, [r3, #0]
 800306e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003072:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	fa93 f2a3 	rbit	r2, r3
 800307c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003080:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8003084:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003086:	4b7e      	ldr	r3, [pc, #504]	; (8003280 <HAL_RCC_OscConfig+0x8f8>)
 8003088:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800308a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800308e:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8003092:	2102      	movs	r1, #2
 8003094:	6019      	str	r1, [r3, #0]
 8003096:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800309a:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	fa93 f1a3 	rbit	r1, r3
 80030a4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80030a8:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80030ac:	6019      	str	r1, [r3, #0]
  return result;
 80030ae:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80030b2:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	fab3 f383 	clz	r3, r3
 80030bc:	b2db      	uxtb	r3, r3
 80030be:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80030c2:	b2db      	uxtb	r3, r3
 80030c4:	f003 031f 	and.w	r3, r3, #31
 80030c8:	2101      	movs	r1, #1
 80030ca:	fa01 f303 	lsl.w	r3, r1, r3
 80030ce:	4013      	ands	r3, r2
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d09d      	beq.n	8003010 <HAL_RCC_OscConfig+0x688>
 80030d4:	e08d      	b.n	80031f2 <HAL_RCC_OscConfig+0x86a>
 80030d6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80030da:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80030de:	2201      	movs	r2, #1
 80030e0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030e2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80030e6:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	fa93 f2a3 	rbit	r2, r3
 80030f0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80030f4:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80030f8:	601a      	str	r2, [r3, #0]
  return result;
 80030fa:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80030fe:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8003102:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003104:	fab3 f383 	clz	r3, r3
 8003108:	b2db      	uxtb	r3, r3
 800310a:	461a      	mov	r2, r3
 800310c:	4b5d      	ldr	r3, [pc, #372]	; (8003284 <HAL_RCC_OscConfig+0x8fc>)
 800310e:	4413      	add	r3, r2
 8003110:	009b      	lsls	r3, r3, #2
 8003112:	461a      	mov	r2, r3
 8003114:	2300      	movs	r3, #0
 8003116:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003118:	f7fe ffd8 	bl	80020cc <HAL_GetTick>
 800311c:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003120:	e00a      	b.n	8003138 <HAL_RCC_OscConfig+0x7b0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003122:	f7fe ffd3 	bl	80020cc <HAL_GetTick>
 8003126:	4602      	mov	r2, r0
 8003128:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800312c:	1ad3      	subs	r3, r2, r3
 800312e:	2b02      	cmp	r3, #2
 8003130:	d902      	bls.n	8003138 <HAL_RCC_OscConfig+0x7b0>
        {
          return HAL_TIMEOUT;
 8003132:	2303      	movs	r3, #3
 8003134:	f000 bc75 	b.w	8003a22 <HAL_RCC_OscConfig+0x109a>
 8003138:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800313c:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8003140:	2202      	movs	r2, #2
 8003142:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003144:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003148:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	fa93 f2a3 	rbit	r2, r3
 8003152:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003156:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800315a:	601a      	str	r2, [r3, #0]
 800315c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003160:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8003164:	2202      	movs	r2, #2
 8003166:	601a      	str	r2, [r3, #0]
 8003168:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800316c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	fa93 f2a3 	rbit	r2, r3
 8003176:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800317a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800317e:	601a      	str	r2, [r3, #0]
 8003180:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003184:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8003188:	2202      	movs	r2, #2
 800318a:	601a      	str	r2, [r3, #0]
 800318c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003190:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	fa93 f2a3 	rbit	r2, r3
 800319a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800319e:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 80031a2:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80031a4:	4b36      	ldr	r3, [pc, #216]	; (8003280 <HAL_RCC_OscConfig+0x8f8>)
 80031a6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80031a8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80031ac:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80031b0:	2102      	movs	r1, #2
 80031b2:	6019      	str	r1, [r3, #0]
 80031b4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80031b8:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	fa93 f1a3 	rbit	r1, r3
 80031c2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80031c6:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80031ca:	6019      	str	r1, [r3, #0]
  return result;
 80031cc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80031d0:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	fab3 f383 	clz	r3, r3
 80031da:	b2db      	uxtb	r3, r3
 80031dc:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80031e0:	b2db      	uxtb	r3, r3
 80031e2:	f003 031f 	and.w	r3, r3, #31
 80031e6:	2101      	movs	r1, #1
 80031e8:	fa01 f303 	lsl.w	r3, r1, r3
 80031ec:	4013      	ands	r3, r2
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d197      	bne.n	8003122 <HAL_RCC_OscConfig+0x79a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80031f2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80031f6:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	f003 0304 	and.w	r3, r3, #4
 8003202:	2b00      	cmp	r3, #0
 8003204:	f000 81a5 	beq.w	8003552 <HAL_RCC_OscConfig+0xbca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003208:	2300      	movs	r3, #0
 800320a:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800320e:	4b1c      	ldr	r3, [pc, #112]	; (8003280 <HAL_RCC_OscConfig+0x8f8>)
 8003210:	69db      	ldr	r3, [r3, #28]
 8003212:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003216:	2b00      	cmp	r3, #0
 8003218:	d116      	bne.n	8003248 <HAL_RCC_OscConfig+0x8c0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800321a:	4b19      	ldr	r3, [pc, #100]	; (8003280 <HAL_RCC_OscConfig+0x8f8>)
 800321c:	69db      	ldr	r3, [r3, #28]
 800321e:	4a18      	ldr	r2, [pc, #96]	; (8003280 <HAL_RCC_OscConfig+0x8f8>)
 8003220:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003224:	61d3      	str	r3, [r2, #28]
 8003226:	4b16      	ldr	r3, [pc, #88]	; (8003280 <HAL_RCC_OscConfig+0x8f8>)
 8003228:	69db      	ldr	r3, [r3, #28]
 800322a:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 800322e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003232:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003236:	601a      	str	r2, [r3, #0]
 8003238:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800323c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003240:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8003242:	2301      	movs	r3, #1
 8003244:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003248:	4b0f      	ldr	r3, [pc, #60]	; (8003288 <HAL_RCC_OscConfig+0x900>)
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003250:	2b00      	cmp	r3, #0
 8003252:	d121      	bne.n	8003298 <HAL_RCC_OscConfig+0x910>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003254:	4b0c      	ldr	r3, [pc, #48]	; (8003288 <HAL_RCC_OscConfig+0x900>)
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	4a0b      	ldr	r2, [pc, #44]	; (8003288 <HAL_RCC_OscConfig+0x900>)
 800325a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800325e:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003260:	f7fe ff34 	bl	80020cc <HAL_GetTick>
 8003264:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003268:	e010      	b.n	800328c <HAL_RCC_OscConfig+0x904>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800326a:	f7fe ff2f 	bl	80020cc <HAL_GetTick>
 800326e:	4602      	mov	r2, r0
 8003270:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003274:	1ad3      	subs	r3, r2, r3
 8003276:	2b64      	cmp	r3, #100	; 0x64
 8003278:	d908      	bls.n	800328c <HAL_RCC_OscConfig+0x904>
        {
          return HAL_TIMEOUT;
 800327a:	2303      	movs	r3, #3
 800327c:	e3d1      	b.n	8003a22 <HAL_RCC_OscConfig+0x109a>
 800327e:	bf00      	nop
 8003280:	40021000 	.word	0x40021000
 8003284:	10908120 	.word	0x10908120
 8003288:	40007000 	.word	0x40007000
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800328c:	4b8d      	ldr	r3, [pc, #564]	; (80034c4 <HAL_RCC_OscConfig+0xb3c>)
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003294:	2b00      	cmp	r3, #0
 8003296:	d0e8      	beq.n	800326a <HAL_RCC_OscConfig+0x8e2>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003298:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800329c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	689b      	ldr	r3, [r3, #8]
 80032a4:	2b01      	cmp	r3, #1
 80032a6:	d106      	bne.n	80032b6 <HAL_RCC_OscConfig+0x92e>
 80032a8:	4b87      	ldr	r3, [pc, #540]	; (80034c8 <HAL_RCC_OscConfig+0xb40>)
 80032aa:	6a1b      	ldr	r3, [r3, #32]
 80032ac:	4a86      	ldr	r2, [pc, #536]	; (80034c8 <HAL_RCC_OscConfig+0xb40>)
 80032ae:	f043 0301 	orr.w	r3, r3, #1
 80032b2:	6213      	str	r3, [r2, #32]
 80032b4:	e035      	b.n	8003322 <HAL_RCC_OscConfig+0x99a>
 80032b6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80032ba:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	689b      	ldr	r3, [r3, #8]
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d10c      	bne.n	80032e0 <HAL_RCC_OscConfig+0x958>
 80032c6:	4b80      	ldr	r3, [pc, #512]	; (80034c8 <HAL_RCC_OscConfig+0xb40>)
 80032c8:	6a1b      	ldr	r3, [r3, #32]
 80032ca:	4a7f      	ldr	r2, [pc, #508]	; (80034c8 <HAL_RCC_OscConfig+0xb40>)
 80032cc:	f023 0301 	bic.w	r3, r3, #1
 80032d0:	6213      	str	r3, [r2, #32]
 80032d2:	4b7d      	ldr	r3, [pc, #500]	; (80034c8 <HAL_RCC_OscConfig+0xb40>)
 80032d4:	6a1b      	ldr	r3, [r3, #32]
 80032d6:	4a7c      	ldr	r2, [pc, #496]	; (80034c8 <HAL_RCC_OscConfig+0xb40>)
 80032d8:	f023 0304 	bic.w	r3, r3, #4
 80032dc:	6213      	str	r3, [r2, #32]
 80032de:	e020      	b.n	8003322 <HAL_RCC_OscConfig+0x99a>
 80032e0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80032e4:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	689b      	ldr	r3, [r3, #8]
 80032ec:	2b05      	cmp	r3, #5
 80032ee:	d10c      	bne.n	800330a <HAL_RCC_OscConfig+0x982>
 80032f0:	4b75      	ldr	r3, [pc, #468]	; (80034c8 <HAL_RCC_OscConfig+0xb40>)
 80032f2:	6a1b      	ldr	r3, [r3, #32]
 80032f4:	4a74      	ldr	r2, [pc, #464]	; (80034c8 <HAL_RCC_OscConfig+0xb40>)
 80032f6:	f043 0304 	orr.w	r3, r3, #4
 80032fa:	6213      	str	r3, [r2, #32]
 80032fc:	4b72      	ldr	r3, [pc, #456]	; (80034c8 <HAL_RCC_OscConfig+0xb40>)
 80032fe:	6a1b      	ldr	r3, [r3, #32]
 8003300:	4a71      	ldr	r2, [pc, #452]	; (80034c8 <HAL_RCC_OscConfig+0xb40>)
 8003302:	f043 0301 	orr.w	r3, r3, #1
 8003306:	6213      	str	r3, [r2, #32]
 8003308:	e00b      	b.n	8003322 <HAL_RCC_OscConfig+0x99a>
 800330a:	4b6f      	ldr	r3, [pc, #444]	; (80034c8 <HAL_RCC_OscConfig+0xb40>)
 800330c:	6a1b      	ldr	r3, [r3, #32]
 800330e:	4a6e      	ldr	r2, [pc, #440]	; (80034c8 <HAL_RCC_OscConfig+0xb40>)
 8003310:	f023 0301 	bic.w	r3, r3, #1
 8003314:	6213      	str	r3, [r2, #32]
 8003316:	4b6c      	ldr	r3, [pc, #432]	; (80034c8 <HAL_RCC_OscConfig+0xb40>)
 8003318:	6a1b      	ldr	r3, [r3, #32]
 800331a:	4a6b      	ldr	r2, [pc, #428]	; (80034c8 <HAL_RCC_OscConfig+0xb40>)
 800331c:	f023 0304 	bic.w	r3, r3, #4
 8003320:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003322:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003326:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	689b      	ldr	r3, [r3, #8]
 800332e:	2b00      	cmp	r3, #0
 8003330:	f000 8081 	beq.w	8003436 <HAL_RCC_OscConfig+0xaae>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003334:	f7fe feca 	bl	80020cc <HAL_GetTick>
 8003338:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800333c:	e00b      	b.n	8003356 <HAL_RCC_OscConfig+0x9ce>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800333e:	f7fe fec5 	bl	80020cc <HAL_GetTick>
 8003342:	4602      	mov	r2, r0
 8003344:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003348:	1ad3      	subs	r3, r2, r3
 800334a:	f241 3288 	movw	r2, #5000	; 0x1388
 800334e:	4293      	cmp	r3, r2
 8003350:	d901      	bls.n	8003356 <HAL_RCC_OscConfig+0x9ce>
        {
          return HAL_TIMEOUT;
 8003352:	2303      	movs	r3, #3
 8003354:	e365      	b.n	8003a22 <HAL_RCC_OscConfig+0x109a>
 8003356:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800335a:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 800335e:	2202      	movs	r2, #2
 8003360:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003362:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003366:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	fa93 f2a3 	rbit	r2, r3
 8003370:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003374:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8003378:	601a      	str	r2, [r3, #0]
 800337a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800337e:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8003382:	2202      	movs	r2, #2
 8003384:	601a      	str	r2, [r3, #0]
 8003386:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800338a:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	fa93 f2a3 	rbit	r2, r3
 8003394:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003398:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 800339c:	601a      	str	r2, [r3, #0]
  return result;
 800339e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80033a2:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 80033a6:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80033a8:	fab3 f383 	clz	r3, r3
 80033ac:	b2db      	uxtb	r3, r3
 80033ae:	095b      	lsrs	r3, r3, #5
 80033b0:	b2db      	uxtb	r3, r3
 80033b2:	f043 0302 	orr.w	r3, r3, #2
 80033b6:	b2db      	uxtb	r3, r3
 80033b8:	2b02      	cmp	r3, #2
 80033ba:	d102      	bne.n	80033c2 <HAL_RCC_OscConfig+0xa3a>
 80033bc:	4b42      	ldr	r3, [pc, #264]	; (80034c8 <HAL_RCC_OscConfig+0xb40>)
 80033be:	6a1b      	ldr	r3, [r3, #32]
 80033c0:	e013      	b.n	80033ea <HAL_RCC_OscConfig+0xa62>
 80033c2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80033c6:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 80033ca:	2202      	movs	r2, #2
 80033cc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033ce:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80033d2:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	fa93 f2a3 	rbit	r2, r3
 80033dc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80033e0:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 80033e4:	601a      	str	r2, [r3, #0]
 80033e6:	4b38      	ldr	r3, [pc, #224]	; (80034c8 <HAL_RCC_OscConfig+0xb40>)
 80033e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033ea:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80033ee:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 80033f2:	2102      	movs	r1, #2
 80033f4:	6011      	str	r1, [r2, #0]
 80033f6:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80033fa:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 80033fe:	6812      	ldr	r2, [r2, #0]
 8003400:	fa92 f1a2 	rbit	r1, r2
 8003404:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003408:	f5a2 72b0 	sub.w	r2, r2, #352	; 0x160
 800340c:	6011      	str	r1, [r2, #0]
  return result;
 800340e:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003412:	f5a2 72b0 	sub.w	r2, r2, #352	; 0x160
 8003416:	6812      	ldr	r2, [r2, #0]
 8003418:	fab2 f282 	clz	r2, r2
 800341c:	b2d2      	uxtb	r2, r2
 800341e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003422:	b2d2      	uxtb	r2, r2
 8003424:	f002 021f 	and.w	r2, r2, #31
 8003428:	2101      	movs	r1, #1
 800342a:	fa01 f202 	lsl.w	r2, r1, r2
 800342e:	4013      	ands	r3, r2
 8003430:	2b00      	cmp	r3, #0
 8003432:	d084      	beq.n	800333e <HAL_RCC_OscConfig+0x9b6>
 8003434:	e083      	b.n	800353e <HAL_RCC_OscConfig+0xbb6>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003436:	f7fe fe49 	bl	80020cc <HAL_GetTick>
 800343a:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800343e:	e00b      	b.n	8003458 <HAL_RCC_OscConfig+0xad0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003440:	f7fe fe44 	bl	80020cc <HAL_GetTick>
 8003444:	4602      	mov	r2, r0
 8003446:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800344a:	1ad3      	subs	r3, r2, r3
 800344c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003450:	4293      	cmp	r3, r2
 8003452:	d901      	bls.n	8003458 <HAL_RCC_OscConfig+0xad0>
        {
          return HAL_TIMEOUT;
 8003454:	2303      	movs	r3, #3
 8003456:	e2e4      	b.n	8003a22 <HAL_RCC_OscConfig+0x109a>
 8003458:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800345c:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8003460:	2202      	movs	r2, #2
 8003462:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003464:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003468:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	fa93 f2a3 	rbit	r2, r3
 8003472:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003476:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 800347a:	601a      	str	r2, [r3, #0]
 800347c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003480:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8003484:	2202      	movs	r2, #2
 8003486:	601a      	str	r2, [r3, #0]
 8003488:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800348c:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	fa93 f2a3 	rbit	r2, r3
 8003496:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800349a:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 800349e:	601a      	str	r2, [r3, #0]
  return result;
 80034a0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80034a4:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 80034a8:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80034aa:	fab3 f383 	clz	r3, r3
 80034ae:	b2db      	uxtb	r3, r3
 80034b0:	095b      	lsrs	r3, r3, #5
 80034b2:	b2db      	uxtb	r3, r3
 80034b4:	f043 0302 	orr.w	r3, r3, #2
 80034b8:	b2db      	uxtb	r3, r3
 80034ba:	2b02      	cmp	r3, #2
 80034bc:	d106      	bne.n	80034cc <HAL_RCC_OscConfig+0xb44>
 80034be:	4b02      	ldr	r3, [pc, #8]	; (80034c8 <HAL_RCC_OscConfig+0xb40>)
 80034c0:	6a1b      	ldr	r3, [r3, #32]
 80034c2:	e017      	b.n	80034f4 <HAL_RCC_OscConfig+0xb6c>
 80034c4:	40007000 	.word	0x40007000
 80034c8:	40021000 	.word	0x40021000
 80034cc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80034d0:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 80034d4:	2202      	movs	r2, #2
 80034d6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034d8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80034dc:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	fa93 f2a3 	rbit	r2, r3
 80034e6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80034ea:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 80034ee:	601a      	str	r2, [r3, #0]
 80034f0:	4bb3      	ldr	r3, [pc, #716]	; (80037c0 <HAL_RCC_OscConfig+0xe38>)
 80034f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034f4:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80034f8:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 80034fc:	2102      	movs	r1, #2
 80034fe:	6011      	str	r1, [r2, #0]
 8003500:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003504:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8003508:	6812      	ldr	r2, [r2, #0]
 800350a:	fa92 f1a2 	rbit	r1, r2
 800350e:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003512:	f5a2 72c0 	sub.w	r2, r2, #384	; 0x180
 8003516:	6011      	str	r1, [r2, #0]
  return result;
 8003518:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800351c:	f5a2 72c0 	sub.w	r2, r2, #384	; 0x180
 8003520:	6812      	ldr	r2, [r2, #0]
 8003522:	fab2 f282 	clz	r2, r2
 8003526:	b2d2      	uxtb	r2, r2
 8003528:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800352c:	b2d2      	uxtb	r2, r2
 800352e:	f002 021f 	and.w	r2, r2, #31
 8003532:	2101      	movs	r1, #1
 8003534:	fa01 f202 	lsl.w	r2, r1, r2
 8003538:	4013      	ands	r3, r2
 800353a:	2b00      	cmp	r3, #0
 800353c:	d180      	bne.n	8003440 <HAL_RCC_OscConfig+0xab8>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800353e:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 8003542:	2b01      	cmp	r3, #1
 8003544:	d105      	bne.n	8003552 <HAL_RCC_OscConfig+0xbca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003546:	4b9e      	ldr	r3, [pc, #632]	; (80037c0 <HAL_RCC_OscConfig+0xe38>)
 8003548:	69db      	ldr	r3, [r3, #28]
 800354a:	4a9d      	ldr	r2, [pc, #628]	; (80037c0 <HAL_RCC_OscConfig+0xe38>)
 800354c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003550:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003552:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003556:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	699b      	ldr	r3, [r3, #24]
 800355e:	2b00      	cmp	r3, #0
 8003560:	f000 825e 	beq.w	8003a20 <HAL_RCC_OscConfig+0x1098>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003564:	4b96      	ldr	r3, [pc, #600]	; (80037c0 <HAL_RCC_OscConfig+0xe38>)
 8003566:	685b      	ldr	r3, [r3, #4]
 8003568:	f003 030c 	and.w	r3, r3, #12
 800356c:	2b08      	cmp	r3, #8
 800356e:	f000 821f 	beq.w	80039b0 <HAL_RCC_OscConfig+0x1028>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003572:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003576:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	699b      	ldr	r3, [r3, #24]
 800357e:	2b02      	cmp	r3, #2
 8003580:	f040 8170 	bne.w	8003864 <HAL_RCC_OscConfig+0xedc>
 8003584:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003588:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 800358c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003590:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003592:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003596:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	fa93 f2a3 	rbit	r2, r3
 80035a0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80035a4:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 80035a8:	601a      	str	r2, [r3, #0]
  return result;
 80035aa:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80035ae:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 80035b2:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80035b4:	fab3 f383 	clz	r3, r3
 80035b8:	b2db      	uxtb	r3, r3
 80035ba:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80035be:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80035c2:	009b      	lsls	r3, r3, #2
 80035c4:	461a      	mov	r2, r3
 80035c6:	2300      	movs	r3, #0
 80035c8:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035ca:	f7fe fd7f 	bl	80020cc <HAL_GetTick>
 80035ce:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80035d2:	e009      	b.n	80035e8 <HAL_RCC_OscConfig+0xc60>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80035d4:	f7fe fd7a 	bl	80020cc <HAL_GetTick>
 80035d8:	4602      	mov	r2, r0
 80035da:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80035de:	1ad3      	subs	r3, r2, r3
 80035e0:	2b02      	cmp	r3, #2
 80035e2:	d901      	bls.n	80035e8 <HAL_RCC_OscConfig+0xc60>
          {
            return HAL_TIMEOUT;
 80035e4:	2303      	movs	r3, #3
 80035e6:	e21c      	b.n	8003a22 <HAL_RCC_OscConfig+0x109a>
 80035e8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80035ec:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 80035f0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80035f4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035f6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80035fa:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	fa93 f2a3 	rbit	r2, r3
 8003604:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003608:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 800360c:	601a      	str	r2, [r3, #0]
  return result;
 800360e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003612:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8003616:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003618:	fab3 f383 	clz	r3, r3
 800361c:	b2db      	uxtb	r3, r3
 800361e:	095b      	lsrs	r3, r3, #5
 8003620:	b2db      	uxtb	r3, r3
 8003622:	f043 0301 	orr.w	r3, r3, #1
 8003626:	b2db      	uxtb	r3, r3
 8003628:	2b01      	cmp	r3, #1
 800362a:	d102      	bne.n	8003632 <HAL_RCC_OscConfig+0xcaa>
 800362c:	4b64      	ldr	r3, [pc, #400]	; (80037c0 <HAL_RCC_OscConfig+0xe38>)
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	e027      	b.n	8003682 <HAL_RCC_OscConfig+0xcfa>
 8003632:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003636:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 800363a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800363e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003640:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003644:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	fa93 f2a3 	rbit	r2, r3
 800364e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003652:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8003656:	601a      	str	r2, [r3, #0]
 8003658:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800365c:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8003660:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003664:	601a      	str	r2, [r3, #0]
 8003666:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800366a:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	fa93 f2a3 	rbit	r2, r3
 8003674:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003678:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 800367c:	601a      	str	r2, [r3, #0]
 800367e:	4b50      	ldr	r3, [pc, #320]	; (80037c0 <HAL_RCC_OscConfig+0xe38>)
 8003680:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003682:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003686:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 800368a:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800368e:	6011      	str	r1, [r2, #0]
 8003690:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003694:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8003698:	6812      	ldr	r2, [r2, #0]
 800369a:	fa92 f1a2 	rbit	r1, r2
 800369e:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80036a2:	f5a2 72d4 	sub.w	r2, r2, #424	; 0x1a8
 80036a6:	6011      	str	r1, [r2, #0]
  return result;
 80036a8:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80036ac:	f5a2 72d4 	sub.w	r2, r2, #424	; 0x1a8
 80036b0:	6812      	ldr	r2, [r2, #0]
 80036b2:	fab2 f282 	clz	r2, r2
 80036b6:	b2d2      	uxtb	r2, r2
 80036b8:	f042 0220 	orr.w	r2, r2, #32
 80036bc:	b2d2      	uxtb	r2, r2
 80036be:	f002 021f 	and.w	r2, r2, #31
 80036c2:	2101      	movs	r1, #1
 80036c4:	fa01 f202 	lsl.w	r2, r1, r2
 80036c8:	4013      	ands	r3, r2
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d182      	bne.n	80035d4 <HAL_RCC_OscConfig+0xc4c>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80036ce:	4b3c      	ldr	r3, [pc, #240]	; (80037c0 <HAL_RCC_OscConfig+0xe38>)
 80036d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036d2:	f023 020f 	bic.w	r2, r3, #15
 80036d6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80036da:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036e2:	4937      	ldr	r1, [pc, #220]	; (80037c0 <HAL_RCC_OscConfig+0xe38>)
 80036e4:	4313      	orrs	r3, r2
 80036e6:	62cb      	str	r3, [r1, #44]	; 0x2c
 80036e8:	4b35      	ldr	r3, [pc, #212]	; (80037c0 <HAL_RCC_OscConfig+0xe38>)
 80036ea:	685b      	ldr	r3, [r3, #4]
 80036ec:	f423 1276 	bic.w	r2, r3, #4030464	; 0x3d8000
 80036f0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80036f4:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	6a19      	ldr	r1, [r3, #32]
 80036fc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003700:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	69db      	ldr	r3, [r3, #28]
 8003708:	430b      	orrs	r3, r1
 800370a:	492d      	ldr	r1, [pc, #180]	; (80037c0 <HAL_RCC_OscConfig+0xe38>)
 800370c:	4313      	orrs	r3, r2
 800370e:	604b      	str	r3, [r1, #4]
 8003710:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003714:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8003718:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800371c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800371e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003722:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	fa93 f2a3 	rbit	r2, r3
 800372c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003730:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8003734:	601a      	str	r2, [r3, #0]
  return result;
 8003736:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800373a:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 800373e:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003740:	fab3 f383 	clz	r3, r3
 8003744:	b2db      	uxtb	r3, r3
 8003746:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800374a:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800374e:	009b      	lsls	r3, r3, #2
 8003750:	461a      	mov	r2, r3
 8003752:	2301      	movs	r3, #1
 8003754:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003756:	f7fe fcb9 	bl	80020cc <HAL_GetTick>
 800375a:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800375e:	e009      	b.n	8003774 <HAL_RCC_OscConfig+0xdec>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003760:	f7fe fcb4 	bl	80020cc <HAL_GetTick>
 8003764:	4602      	mov	r2, r0
 8003766:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800376a:	1ad3      	subs	r3, r2, r3
 800376c:	2b02      	cmp	r3, #2
 800376e:	d901      	bls.n	8003774 <HAL_RCC_OscConfig+0xdec>
          {
            return HAL_TIMEOUT;
 8003770:	2303      	movs	r3, #3
 8003772:	e156      	b.n	8003a22 <HAL_RCC_OscConfig+0x109a>
 8003774:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003778:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 800377c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003780:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003782:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003786:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	fa93 f2a3 	rbit	r2, r3
 8003790:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003794:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8003798:	601a      	str	r2, [r3, #0]
  return result;
 800379a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800379e:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 80037a2:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80037a4:	fab3 f383 	clz	r3, r3
 80037a8:	b2db      	uxtb	r3, r3
 80037aa:	095b      	lsrs	r3, r3, #5
 80037ac:	b2db      	uxtb	r3, r3
 80037ae:	f043 0301 	orr.w	r3, r3, #1
 80037b2:	b2db      	uxtb	r3, r3
 80037b4:	2b01      	cmp	r3, #1
 80037b6:	d105      	bne.n	80037c4 <HAL_RCC_OscConfig+0xe3c>
 80037b8:	4b01      	ldr	r3, [pc, #4]	; (80037c0 <HAL_RCC_OscConfig+0xe38>)
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	e02a      	b.n	8003814 <HAL_RCC_OscConfig+0xe8c>
 80037be:	bf00      	nop
 80037c0:	40021000 	.word	0x40021000
 80037c4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80037c8:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 80037cc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80037d0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037d2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80037d6:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	fa93 f2a3 	rbit	r2, r3
 80037e0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80037e4:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 80037e8:	601a      	str	r2, [r3, #0]
 80037ea:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80037ee:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 80037f2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80037f6:	601a      	str	r2, [r3, #0]
 80037f8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80037fc:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	fa93 f2a3 	rbit	r2, r3
 8003806:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800380a:	f5a3 73e4 	sub.w	r3, r3, #456	; 0x1c8
 800380e:	601a      	str	r2, [r3, #0]
 8003810:	4b86      	ldr	r3, [pc, #536]	; (8003a2c <HAL_RCC_OscConfig+0x10a4>)
 8003812:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003814:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003818:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 800381c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003820:	6011      	str	r1, [r2, #0]
 8003822:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003826:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 800382a:	6812      	ldr	r2, [r2, #0]
 800382c:	fa92 f1a2 	rbit	r1, r2
 8003830:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003834:	f5a2 72e8 	sub.w	r2, r2, #464	; 0x1d0
 8003838:	6011      	str	r1, [r2, #0]
  return result;
 800383a:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800383e:	f5a2 72e8 	sub.w	r2, r2, #464	; 0x1d0
 8003842:	6812      	ldr	r2, [r2, #0]
 8003844:	fab2 f282 	clz	r2, r2
 8003848:	b2d2      	uxtb	r2, r2
 800384a:	f042 0220 	orr.w	r2, r2, #32
 800384e:	b2d2      	uxtb	r2, r2
 8003850:	f002 021f 	and.w	r2, r2, #31
 8003854:	2101      	movs	r1, #1
 8003856:	fa01 f202 	lsl.w	r2, r1, r2
 800385a:	4013      	ands	r3, r2
 800385c:	2b00      	cmp	r3, #0
 800385e:	f43f af7f 	beq.w	8003760 <HAL_RCC_OscConfig+0xdd8>
 8003862:	e0dd      	b.n	8003a20 <HAL_RCC_OscConfig+0x1098>
 8003864:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003868:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 800386c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003870:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003872:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003876:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	fa93 f2a3 	rbit	r2, r3
 8003880:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003884:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8003888:	601a      	str	r2, [r3, #0]
  return result;
 800388a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800388e:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8003892:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003894:	fab3 f383 	clz	r3, r3
 8003898:	b2db      	uxtb	r3, r3
 800389a:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800389e:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80038a2:	009b      	lsls	r3, r3, #2
 80038a4:	461a      	mov	r2, r3
 80038a6:	2300      	movs	r3, #0
 80038a8:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038aa:	f7fe fc0f 	bl	80020cc <HAL_GetTick>
 80038ae:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80038b2:	e009      	b.n	80038c8 <HAL_RCC_OscConfig+0xf40>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80038b4:	f7fe fc0a 	bl	80020cc <HAL_GetTick>
 80038b8:	4602      	mov	r2, r0
 80038ba:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80038be:	1ad3      	subs	r3, r2, r3
 80038c0:	2b02      	cmp	r3, #2
 80038c2:	d901      	bls.n	80038c8 <HAL_RCC_OscConfig+0xf40>
          {
            return HAL_TIMEOUT;
 80038c4:	2303      	movs	r3, #3
 80038c6:	e0ac      	b.n	8003a22 <HAL_RCC_OscConfig+0x109a>
 80038c8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80038cc:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 80038d0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80038d4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038d6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80038da:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	fa93 f2a3 	rbit	r2, r3
 80038e4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80038e8:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 80038ec:	601a      	str	r2, [r3, #0]
  return result;
 80038ee:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80038f2:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 80038f6:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80038f8:	fab3 f383 	clz	r3, r3
 80038fc:	b2db      	uxtb	r3, r3
 80038fe:	095b      	lsrs	r3, r3, #5
 8003900:	b2db      	uxtb	r3, r3
 8003902:	f043 0301 	orr.w	r3, r3, #1
 8003906:	b2db      	uxtb	r3, r3
 8003908:	2b01      	cmp	r3, #1
 800390a:	d102      	bne.n	8003912 <HAL_RCC_OscConfig+0xf8a>
 800390c:	4b47      	ldr	r3, [pc, #284]	; (8003a2c <HAL_RCC_OscConfig+0x10a4>)
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	e027      	b.n	8003962 <HAL_RCC_OscConfig+0xfda>
 8003912:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003916:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 800391a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800391e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003920:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003924:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	fa93 f2a3 	rbit	r2, r3
 800392e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003932:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8003936:	601a      	str	r2, [r3, #0]
 8003938:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800393c:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8003940:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003944:	601a      	str	r2, [r3, #0]
 8003946:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800394a:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	fa93 f2a3 	rbit	r2, r3
 8003954:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003958:	f5a3 73f8 	sub.w	r3, r3, #496	; 0x1f0
 800395c:	601a      	str	r2, [r3, #0]
 800395e:	4b33      	ldr	r3, [pc, #204]	; (8003a2c <HAL_RCC_OscConfig+0x10a4>)
 8003960:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003962:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003966:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 800396a:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800396e:	6011      	str	r1, [r2, #0]
 8003970:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003974:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8003978:	6812      	ldr	r2, [r2, #0]
 800397a:	fa92 f1a2 	rbit	r1, r2
 800397e:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003982:	f5a2 72fc 	sub.w	r2, r2, #504	; 0x1f8
 8003986:	6011      	str	r1, [r2, #0]
  return result;
 8003988:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800398c:	f5a2 72fc 	sub.w	r2, r2, #504	; 0x1f8
 8003990:	6812      	ldr	r2, [r2, #0]
 8003992:	fab2 f282 	clz	r2, r2
 8003996:	b2d2      	uxtb	r2, r2
 8003998:	f042 0220 	orr.w	r2, r2, #32
 800399c:	b2d2      	uxtb	r2, r2
 800399e:	f002 021f 	and.w	r2, r2, #31
 80039a2:	2101      	movs	r1, #1
 80039a4:	fa01 f202 	lsl.w	r2, r1, r2
 80039a8:	4013      	ands	r3, r2
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d182      	bne.n	80038b4 <HAL_RCC_OscConfig+0xf2c>
 80039ae:	e037      	b.n	8003a20 <HAL_RCC_OscConfig+0x1098>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80039b0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80039b4:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	699b      	ldr	r3, [r3, #24]
 80039bc:	2b01      	cmp	r3, #1
 80039be:	d101      	bne.n	80039c4 <HAL_RCC_OscConfig+0x103c>
      {
        return HAL_ERROR;
 80039c0:	2301      	movs	r3, #1
 80039c2:	e02e      	b.n	8003a22 <HAL_RCC_OscConfig+0x109a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80039c4:	4b19      	ldr	r3, [pc, #100]	; (8003a2c <HAL_RCC_OscConfig+0x10a4>)
 80039c6:	685b      	ldr	r3, [r3, #4]
 80039c8:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 80039cc:	4b17      	ldr	r3, [pc, #92]	; (8003a2c <HAL_RCC_OscConfig+0x10a4>)
 80039ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039d0:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80039d4:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80039d8:	f403 32c0 	and.w	r2, r3, #98304	; 0x18000
 80039dc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80039e0:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	69db      	ldr	r3, [r3, #28]
 80039e8:	429a      	cmp	r2, r3
 80039ea:	d117      	bne.n	8003a1c <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 80039ec:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80039f0:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80039f4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80039f8:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003a00:	429a      	cmp	r2, r3
 8003a02:	d10b      	bne.n	8003a1c <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 8003a04:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003a08:	f003 020f 	and.w	r2, r3, #15
 8003a0c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003a10:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8003a18:	429a      	cmp	r2, r3
 8003a1a:	d001      	beq.n	8003a20 <HAL_RCC_OscConfig+0x1098>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 8003a1c:	2301      	movs	r3, #1
 8003a1e:	e000      	b.n	8003a22 <HAL_RCC_OscConfig+0x109a>
        }
      }
    }
  }

  return HAL_OK;
 8003a20:	2300      	movs	r3, #0
}
 8003a22:	4618      	mov	r0, r3
 8003a24:	f507 7702 	add.w	r7, r7, #520	; 0x208
 8003a28:	46bd      	mov	sp, r7
 8003a2a:	bd80      	pop	{r7, pc}
 8003a2c:	40021000 	.word	0x40021000

08003a30 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003a30:	b580      	push	{r7, lr}
 8003a32:	b09e      	sub	sp, #120	; 0x78
 8003a34:	af00      	add	r7, sp, #0
 8003a36:	6078      	str	r0, [r7, #4]
 8003a38:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8003a3a:	2300      	movs	r3, #0
 8003a3c:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d101      	bne.n	8003a48 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003a44:	2301      	movs	r3, #1
 8003a46:	e162      	b.n	8003d0e <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003a48:	4b90      	ldr	r3, [pc, #576]	; (8003c8c <HAL_RCC_ClockConfig+0x25c>)
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	f003 0307 	and.w	r3, r3, #7
 8003a50:	683a      	ldr	r2, [r7, #0]
 8003a52:	429a      	cmp	r2, r3
 8003a54:	d910      	bls.n	8003a78 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a56:	4b8d      	ldr	r3, [pc, #564]	; (8003c8c <HAL_RCC_ClockConfig+0x25c>)
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	f023 0207 	bic.w	r2, r3, #7
 8003a5e:	498b      	ldr	r1, [pc, #556]	; (8003c8c <HAL_RCC_ClockConfig+0x25c>)
 8003a60:	683b      	ldr	r3, [r7, #0]
 8003a62:	4313      	orrs	r3, r2
 8003a64:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a66:	4b89      	ldr	r3, [pc, #548]	; (8003c8c <HAL_RCC_ClockConfig+0x25c>)
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	f003 0307 	and.w	r3, r3, #7
 8003a6e:	683a      	ldr	r2, [r7, #0]
 8003a70:	429a      	cmp	r2, r3
 8003a72:	d001      	beq.n	8003a78 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003a74:	2301      	movs	r3, #1
 8003a76:	e14a      	b.n	8003d0e <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	f003 0302 	and.w	r3, r3, #2
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d008      	beq.n	8003a96 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003a84:	4b82      	ldr	r3, [pc, #520]	; (8003c90 <HAL_RCC_ClockConfig+0x260>)
 8003a86:	685b      	ldr	r3, [r3, #4]
 8003a88:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	689b      	ldr	r3, [r3, #8]
 8003a90:	497f      	ldr	r1, [pc, #508]	; (8003c90 <HAL_RCC_ClockConfig+0x260>)
 8003a92:	4313      	orrs	r3, r2
 8003a94:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	f003 0301 	and.w	r3, r3, #1
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	f000 80dc 	beq.w	8003c5c <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	685b      	ldr	r3, [r3, #4]
 8003aa8:	2b01      	cmp	r3, #1
 8003aaa:	d13c      	bne.n	8003b26 <HAL_RCC_ClockConfig+0xf6>
 8003aac:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003ab0:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ab2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003ab4:	fa93 f3a3 	rbit	r3, r3
 8003ab8:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8003aba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003abc:	fab3 f383 	clz	r3, r3
 8003ac0:	b2db      	uxtb	r3, r3
 8003ac2:	095b      	lsrs	r3, r3, #5
 8003ac4:	b2db      	uxtb	r3, r3
 8003ac6:	f043 0301 	orr.w	r3, r3, #1
 8003aca:	b2db      	uxtb	r3, r3
 8003acc:	2b01      	cmp	r3, #1
 8003ace:	d102      	bne.n	8003ad6 <HAL_RCC_ClockConfig+0xa6>
 8003ad0:	4b6f      	ldr	r3, [pc, #444]	; (8003c90 <HAL_RCC_ClockConfig+0x260>)
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	e00f      	b.n	8003af6 <HAL_RCC_ClockConfig+0xc6>
 8003ad6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003ada:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003adc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003ade:	fa93 f3a3 	rbit	r3, r3
 8003ae2:	667b      	str	r3, [r7, #100]	; 0x64
 8003ae4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003ae8:	663b      	str	r3, [r7, #96]	; 0x60
 8003aea:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003aec:	fa93 f3a3 	rbit	r3, r3
 8003af0:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003af2:	4b67      	ldr	r3, [pc, #412]	; (8003c90 <HAL_RCC_ClockConfig+0x260>)
 8003af4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003af6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003afa:	65ba      	str	r2, [r7, #88]	; 0x58
 8003afc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003afe:	fa92 f2a2 	rbit	r2, r2
 8003b02:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8003b04:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003b06:	fab2 f282 	clz	r2, r2
 8003b0a:	b2d2      	uxtb	r2, r2
 8003b0c:	f042 0220 	orr.w	r2, r2, #32
 8003b10:	b2d2      	uxtb	r2, r2
 8003b12:	f002 021f 	and.w	r2, r2, #31
 8003b16:	2101      	movs	r1, #1
 8003b18:	fa01 f202 	lsl.w	r2, r1, r2
 8003b1c:	4013      	ands	r3, r2
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d17b      	bne.n	8003c1a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003b22:	2301      	movs	r3, #1
 8003b24:	e0f3      	b.n	8003d0e <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	685b      	ldr	r3, [r3, #4]
 8003b2a:	2b02      	cmp	r3, #2
 8003b2c:	d13c      	bne.n	8003ba8 <HAL_RCC_ClockConfig+0x178>
 8003b2e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003b32:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b34:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003b36:	fa93 f3a3 	rbit	r3, r3
 8003b3a:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8003b3c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003b3e:	fab3 f383 	clz	r3, r3
 8003b42:	b2db      	uxtb	r3, r3
 8003b44:	095b      	lsrs	r3, r3, #5
 8003b46:	b2db      	uxtb	r3, r3
 8003b48:	f043 0301 	orr.w	r3, r3, #1
 8003b4c:	b2db      	uxtb	r3, r3
 8003b4e:	2b01      	cmp	r3, #1
 8003b50:	d102      	bne.n	8003b58 <HAL_RCC_ClockConfig+0x128>
 8003b52:	4b4f      	ldr	r3, [pc, #316]	; (8003c90 <HAL_RCC_ClockConfig+0x260>)
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	e00f      	b.n	8003b78 <HAL_RCC_ClockConfig+0x148>
 8003b58:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003b5c:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b5e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003b60:	fa93 f3a3 	rbit	r3, r3
 8003b64:	647b      	str	r3, [r7, #68]	; 0x44
 8003b66:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003b6a:	643b      	str	r3, [r7, #64]	; 0x40
 8003b6c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003b6e:	fa93 f3a3 	rbit	r3, r3
 8003b72:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003b74:	4b46      	ldr	r3, [pc, #280]	; (8003c90 <HAL_RCC_ClockConfig+0x260>)
 8003b76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b78:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003b7c:	63ba      	str	r2, [r7, #56]	; 0x38
 8003b7e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003b80:	fa92 f2a2 	rbit	r2, r2
 8003b84:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8003b86:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003b88:	fab2 f282 	clz	r2, r2
 8003b8c:	b2d2      	uxtb	r2, r2
 8003b8e:	f042 0220 	orr.w	r2, r2, #32
 8003b92:	b2d2      	uxtb	r2, r2
 8003b94:	f002 021f 	and.w	r2, r2, #31
 8003b98:	2101      	movs	r1, #1
 8003b9a:	fa01 f202 	lsl.w	r2, r1, r2
 8003b9e:	4013      	ands	r3, r2
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d13a      	bne.n	8003c1a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003ba4:	2301      	movs	r3, #1
 8003ba6:	e0b2      	b.n	8003d0e <HAL_RCC_ClockConfig+0x2de>
 8003ba8:	2302      	movs	r3, #2
 8003baa:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003bac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bae:	fa93 f3a3 	rbit	r3, r3
 8003bb2:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8003bb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003bb6:	fab3 f383 	clz	r3, r3
 8003bba:	b2db      	uxtb	r3, r3
 8003bbc:	095b      	lsrs	r3, r3, #5
 8003bbe:	b2db      	uxtb	r3, r3
 8003bc0:	f043 0301 	orr.w	r3, r3, #1
 8003bc4:	b2db      	uxtb	r3, r3
 8003bc6:	2b01      	cmp	r3, #1
 8003bc8:	d102      	bne.n	8003bd0 <HAL_RCC_ClockConfig+0x1a0>
 8003bca:	4b31      	ldr	r3, [pc, #196]	; (8003c90 <HAL_RCC_ClockConfig+0x260>)
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	e00d      	b.n	8003bec <HAL_RCC_ClockConfig+0x1bc>
 8003bd0:	2302      	movs	r3, #2
 8003bd2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003bd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003bd6:	fa93 f3a3 	rbit	r3, r3
 8003bda:	627b      	str	r3, [r7, #36]	; 0x24
 8003bdc:	2302      	movs	r3, #2
 8003bde:	623b      	str	r3, [r7, #32]
 8003be0:	6a3b      	ldr	r3, [r7, #32]
 8003be2:	fa93 f3a3 	rbit	r3, r3
 8003be6:	61fb      	str	r3, [r7, #28]
 8003be8:	4b29      	ldr	r3, [pc, #164]	; (8003c90 <HAL_RCC_ClockConfig+0x260>)
 8003bea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bec:	2202      	movs	r2, #2
 8003bee:	61ba      	str	r2, [r7, #24]
 8003bf0:	69ba      	ldr	r2, [r7, #24]
 8003bf2:	fa92 f2a2 	rbit	r2, r2
 8003bf6:	617a      	str	r2, [r7, #20]
  return result;
 8003bf8:	697a      	ldr	r2, [r7, #20]
 8003bfa:	fab2 f282 	clz	r2, r2
 8003bfe:	b2d2      	uxtb	r2, r2
 8003c00:	f042 0220 	orr.w	r2, r2, #32
 8003c04:	b2d2      	uxtb	r2, r2
 8003c06:	f002 021f 	and.w	r2, r2, #31
 8003c0a:	2101      	movs	r1, #1
 8003c0c:	fa01 f202 	lsl.w	r2, r1, r2
 8003c10:	4013      	ands	r3, r2
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d101      	bne.n	8003c1a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003c16:	2301      	movs	r3, #1
 8003c18:	e079      	b.n	8003d0e <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003c1a:	4b1d      	ldr	r3, [pc, #116]	; (8003c90 <HAL_RCC_ClockConfig+0x260>)
 8003c1c:	685b      	ldr	r3, [r3, #4]
 8003c1e:	f023 0203 	bic.w	r2, r3, #3
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	685b      	ldr	r3, [r3, #4]
 8003c26:	491a      	ldr	r1, [pc, #104]	; (8003c90 <HAL_RCC_ClockConfig+0x260>)
 8003c28:	4313      	orrs	r3, r2
 8003c2a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003c2c:	f7fe fa4e 	bl	80020cc <HAL_GetTick>
 8003c30:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c32:	e00a      	b.n	8003c4a <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003c34:	f7fe fa4a 	bl	80020cc <HAL_GetTick>
 8003c38:	4602      	mov	r2, r0
 8003c3a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003c3c:	1ad3      	subs	r3, r2, r3
 8003c3e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c42:	4293      	cmp	r3, r2
 8003c44:	d901      	bls.n	8003c4a <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8003c46:	2303      	movs	r3, #3
 8003c48:	e061      	b.n	8003d0e <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c4a:	4b11      	ldr	r3, [pc, #68]	; (8003c90 <HAL_RCC_ClockConfig+0x260>)
 8003c4c:	685b      	ldr	r3, [r3, #4]
 8003c4e:	f003 020c 	and.w	r2, r3, #12
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	685b      	ldr	r3, [r3, #4]
 8003c56:	009b      	lsls	r3, r3, #2
 8003c58:	429a      	cmp	r2, r3
 8003c5a:	d1eb      	bne.n	8003c34 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003c5c:	4b0b      	ldr	r3, [pc, #44]	; (8003c8c <HAL_RCC_ClockConfig+0x25c>)
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	f003 0307 	and.w	r3, r3, #7
 8003c64:	683a      	ldr	r2, [r7, #0]
 8003c66:	429a      	cmp	r2, r3
 8003c68:	d214      	bcs.n	8003c94 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c6a:	4b08      	ldr	r3, [pc, #32]	; (8003c8c <HAL_RCC_ClockConfig+0x25c>)
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	f023 0207 	bic.w	r2, r3, #7
 8003c72:	4906      	ldr	r1, [pc, #24]	; (8003c8c <HAL_RCC_ClockConfig+0x25c>)
 8003c74:	683b      	ldr	r3, [r7, #0]
 8003c76:	4313      	orrs	r3, r2
 8003c78:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c7a:	4b04      	ldr	r3, [pc, #16]	; (8003c8c <HAL_RCC_ClockConfig+0x25c>)
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	f003 0307 	and.w	r3, r3, #7
 8003c82:	683a      	ldr	r2, [r7, #0]
 8003c84:	429a      	cmp	r2, r3
 8003c86:	d005      	beq.n	8003c94 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8003c88:	2301      	movs	r3, #1
 8003c8a:	e040      	b.n	8003d0e <HAL_RCC_ClockConfig+0x2de>
 8003c8c:	40022000 	.word	0x40022000
 8003c90:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	f003 0304 	and.w	r3, r3, #4
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d008      	beq.n	8003cb2 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003ca0:	4b1d      	ldr	r3, [pc, #116]	; (8003d18 <HAL_RCC_ClockConfig+0x2e8>)
 8003ca2:	685b      	ldr	r3, [r3, #4]
 8003ca4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	68db      	ldr	r3, [r3, #12]
 8003cac:	491a      	ldr	r1, [pc, #104]	; (8003d18 <HAL_RCC_ClockConfig+0x2e8>)
 8003cae:	4313      	orrs	r3, r2
 8003cb0:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	f003 0308 	and.w	r3, r3, #8
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d009      	beq.n	8003cd2 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003cbe:	4b16      	ldr	r3, [pc, #88]	; (8003d18 <HAL_RCC_ClockConfig+0x2e8>)
 8003cc0:	685b      	ldr	r3, [r3, #4]
 8003cc2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	691b      	ldr	r3, [r3, #16]
 8003cca:	00db      	lsls	r3, r3, #3
 8003ccc:	4912      	ldr	r1, [pc, #72]	; (8003d18 <HAL_RCC_ClockConfig+0x2e8>)
 8003cce:	4313      	orrs	r3, r2
 8003cd0:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8003cd2:	f000 f829 	bl	8003d28 <HAL_RCC_GetSysClockFreq>
 8003cd6:	4601      	mov	r1, r0
 8003cd8:	4b0f      	ldr	r3, [pc, #60]	; (8003d18 <HAL_RCC_ClockConfig+0x2e8>)
 8003cda:	685b      	ldr	r3, [r3, #4]
 8003cdc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003ce0:	22f0      	movs	r2, #240	; 0xf0
 8003ce2:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ce4:	693a      	ldr	r2, [r7, #16]
 8003ce6:	fa92 f2a2 	rbit	r2, r2
 8003cea:	60fa      	str	r2, [r7, #12]
  return result;
 8003cec:	68fa      	ldr	r2, [r7, #12]
 8003cee:	fab2 f282 	clz	r2, r2
 8003cf2:	b2d2      	uxtb	r2, r2
 8003cf4:	40d3      	lsrs	r3, r2
 8003cf6:	4a09      	ldr	r2, [pc, #36]	; (8003d1c <HAL_RCC_ClockConfig+0x2ec>)
 8003cf8:	5cd3      	ldrb	r3, [r2, r3]
 8003cfa:	fa21 f303 	lsr.w	r3, r1, r3
 8003cfe:	4a08      	ldr	r2, [pc, #32]	; (8003d20 <HAL_RCC_ClockConfig+0x2f0>)
 8003d00:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8003d02:	4b08      	ldr	r3, [pc, #32]	; (8003d24 <HAL_RCC_ClockConfig+0x2f4>)
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	4618      	mov	r0, r3
 8003d08:	f7fe f8ae 	bl	8001e68 <HAL_InitTick>
  
  return HAL_OK;
 8003d0c:	2300      	movs	r3, #0
}
 8003d0e:	4618      	mov	r0, r3
 8003d10:	3778      	adds	r7, #120	; 0x78
 8003d12:	46bd      	mov	sp, r7
 8003d14:	bd80      	pop	{r7, pc}
 8003d16:	bf00      	nop
 8003d18:	40021000 	.word	0x40021000
 8003d1c:	0800d644 	.word	0x0800d644
 8003d20:	2000001c 	.word	0x2000001c
 8003d24:	20000020 	.word	0x20000020

08003d28 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003d28:	b480      	push	{r7}
 8003d2a:	b08b      	sub	sp, #44	; 0x2c
 8003d2c:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003d2e:	2300      	movs	r3, #0
 8003d30:	61fb      	str	r3, [r7, #28]
 8003d32:	2300      	movs	r3, #0
 8003d34:	61bb      	str	r3, [r7, #24]
 8003d36:	2300      	movs	r3, #0
 8003d38:	627b      	str	r3, [r7, #36]	; 0x24
 8003d3a:	2300      	movs	r3, #0
 8003d3c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003d3e:	2300      	movs	r3, #0
 8003d40:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8003d42:	4b2a      	ldr	r3, [pc, #168]	; (8003dec <HAL_RCC_GetSysClockFreq+0xc4>)
 8003d44:	685b      	ldr	r3, [r3, #4]
 8003d46:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003d48:	69fb      	ldr	r3, [r7, #28]
 8003d4a:	f003 030c 	and.w	r3, r3, #12
 8003d4e:	2b04      	cmp	r3, #4
 8003d50:	d002      	beq.n	8003d58 <HAL_RCC_GetSysClockFreq+0x30>
 8003d52:	2b08      	cmp	r3, #8
 8003d54:	d003      	beq.n	8003d5e <HAL_RCC_GetSysClockFreq+0x36>
 8003d56:	e03f      	b.n	8003dd8 <HAL_RCC_GetSysClockFreq+0xb0>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003d58:	4b25      	ldr	r3, [pc, #148]	; (8003df0 <HAL_RCC_GetSysClockFreq+0xc8>)
 8003d5a:	623b      	str	r3, [r7, #32]
      break;
 8003d5c:	e03f      	b.n	8003dde <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8003d5e:	69fb      	ldr	r3, [r7, #28]
 8003d60:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8003d64:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8003d68:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d6a:	68ba      	ldr	r2, [r7, #8]
 8003d6c:	fa92 f2a2 	rbit	r2, r2
 8003d70:	607a      	str	r2, [r7, #4]
  return result;
 8003d72:	687a      	ldr	r2, [r7, #4]
 8003d74:	fab2 f282 	clz	r2, r2
 8003d78:	b2d2      	uxtb	r2, r2
 8003d7a:	40d3      	lsrs	r3, r2
 8003d7c:	4a1d      	ldr	r2, [pc, #116]	; (8003df4 <HAL_RCC_GetSysClockFreq+0xcc>)
 8003d7e:	5cd3      	ldrb	r3, [r2, r3]
 8003d80:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8003d82:	4b1a      	ldr	r3, [pc, #104]	; (8003dec <HAL_RCC_GetSysClockFreq+0xc4>)
 8003d84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d86:	f003 030f 	and.w	r3, r3, #15
 8003d8a:	220f      	movs	r2, #15
 8003d8c:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d8e:	693a      	ldr	r2, [r7, #16]
 8003d90:	fa92 f2a2 	rbit	r2, r2
 8003d94:	60fa      	str	r2, [r7, #12]
  return result;
 8003d96:	68fa      	ldr	r2, [r7, #12]
 8003d98:	fab2 f282 	clz	r2, r2
 8003d9c:	b2d2      	uxtb	r2, r2
 8003d9e:	40d3      	lsrs	r3, r2
 8003da0:	4a15      	ldr	r2, [pc, #84]	; (8003df8 <HAL_RCC_GetSysClockFreq+0xd0>)
 8003da2:	5cd3      	ldrb	r3, [r2, r3]
 8003da4:	61bb      	str	r3, [r7, #24]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 8003da6:	69fb      	ldr	r3, [r7, #28]
 8003da8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d008      	beq.n	8003dc2 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003db0:	4a0f      	ldr	r2, [pc, #60]	; (8003df0 <HAL_RCC_GetSysClockFreq+0xc8>)
 8003db2:	69bb      	ldr	r3, [r7, #24]
 8003db4:	fbb2 f2f3 	udiv	r2, r2, r3
 8003db8:	697b      	ldr	r3, [r7, #20]
 8003dba:	fb02 f303 	mul.w	r3, r2, r3
 8003dbe:	627b      	str	r3, [r7, #36]	; 0x24
 8003dc0:	e007      	b.n	8003dd2 <HAL_RCC_GetSysClockFreq+0xaa>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003dc2:	4a0b      	ldr	r2, [pc, #44]	; (8003df0 <HAL_RCC_GetSysClockFreq+0xc8>)
 8003dc4:	69bb      	ldr	r3, [r7, #24]
 8003dc6:	fbb2 f2f3 	udiv	r2, r2, r3
 8003dca:	697b      	ldr	r3, [r7, #20]
 8003dcc:	fb02 f303 	mul.w	r3, r2, r3
 8003dd0:	627b      	str	r3, [r7, #36]	; 0x24
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8003dd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dd4:	623b      	str	r3, [r7, #32]
      break;
 8003dd6:	e002      	b.n	8003dde <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003dd8:	4b05      	ldr	r3, [pc, #20]	; (8003df0 <HAL_RCC_GetSysClockFreq+0xc8>)
 8003dda:	623b      	str	r3, [r7, #32]
      break;
 8003ddc:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003dde:	6a3b      	ldr	r3, [r7, #32]
}
 8003de0:	4618      	mov	r0, r3
 8003de2:	372c      	adds	r7, #44	; 0x2c
 8003de4:	46bd      	mov	sp, r7
 8003de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dea:	4770      	bx	lr
 8003dec:	40021000 	.word	0x40021000
 8003df0:	007a1200 	.word	0x007a1200
 8003df4:	0800d65c 	.word	0x0800d65c
 8003df8:	0800d66c 	.word	0x0800d66c

08003dfc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003dfc:	b480      	push	{r7}
 8003dfe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003e00:	4b03      	ldr	r3, [pc, #12]	; (8003e10 <HAL_RCC_GetHCLKFreq+0x14>)
 8003e02:	681b      	ldr	r3, [r3, #0]
}
 8003e04:	4618      	mov	r0, r3
 8003e06:	46bd      	mov	sp, r7
 8003e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e0c:	4770      	bx	lr
 8003e0e:	bf00      	nop
 8003e10:	2000001c 	.word	0x2000001c

08003e14 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003e14:	b580      	push	{r7, lr}
 8003e16:	b082      	sub	sp, #8
 8003e18:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8003e1a:	f7ff ffef 	bl	8003dfc <HAL_RCC_GetHCLKFreq>
 8003e1e:	4601      	mov	r1, r0
 8003e20:	4b0b      	ldr	r3, [pc, #44]	; (8003e50 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8003e22:	685b      	ldr	r3, [r3, #4]
 8003e24:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003e28:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8003e2c:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e2e:	687a      	ldr	r2, [r7, #4]
 8003e30:	fa92 f2a2 	rbit	r2, r2
 8003e34:	603a      	str	r2, [r7, #0]
  return result;
 8003e36:	683a      	ldr	r2, [r7, #0]
 8003e38:	fab2 f282 	clz	r2, r2
 8003e3c:	b2d2      	uxtb	r2, r2
 8003e3e:	40d3      	lsrs	r3, r2
 8003e40:	4a04      	ldr	r2, [pc, #16]	; (8003e54 <HAL_RCC_GetPCLK1Freq+0x40>)
 8003e42:	5cd3      	ldrb	r3, [r2, r3]
 8003e44:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8003e48:	4618      	mov	r0, r3
 8003e4a:	3708      	adds	r7, #8
 8003e4c:	46bd      	mov	sp, r7
 8003e4e:	bd80      	pop	{r7, pc}
 8003e50:	40021000 	.word	0x40021000
 8003e54:	0800d654 	.word	0x0800d654

08003e58 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003e58:	b580      	push	{r7, lr}
 8003e5a:	b082      	sub	sp, #8
 8003e5c:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8003e5e:	f7ff ffcd 	bl	8003dfc <HAL_RCC_GetHCLKFreq>
 8003e62:	4601      	mov	r1, r0
 8003e64:	4b0b      	ldr	r3, [pc, #44]	; (8003e94 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8003e66:	685b      	ldr	r3, [r3, #4]
 8003e68:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8003e6c:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8003e70:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e72:	687a      	ldr	r2, [r7, #4]
 8003e74:	fa92 f2a2 	rbit	r2, r2
 8003e78:	603a      	str	r2, [r7, #0]
  return result;
 8003e7a:	683a      	ldr	r2, [r7, #0]
 8003e7c:	fab2 f282 	clz	r2, r2
 8003e80:	b2d2      	uxtb	r2, r2
 8003e82:	40d3      	lsrs	r3, r2
 8003e84:	4a04      	ldr	r2, [pc, #16]	; (8003e98 <HAL_RCC_GetPCLK2Freq+0x40>)
 8003e86:	5cd3      	ldrb	r3, [r2, r3]
 8003e88:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8003e8c:	4618      	mov	r0, r3
 8003e8e:	3708      	adds	r7, #8
 8003e90:	46bd      	mov	sp, r7
 8003e92:	bd80      	pop	{r7, pc}
 8003e94:	40021000 	.word	0x40021000
 8003e98:	0800d654 	.word	0x0800d654

08003e9c <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003e9c:	b480      	push	{r7}
 8003e9e:	b083      	sub	sp, #12
 8003ea0:	af00      	add	r7, sp, #0
 8003ea2:	6078      	str	r0, [r7, #4]
 8003ea4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	220f      	movs	r2, #15
 8003eaa:	601a      	str	r2, [r3, #0]
  
  /* Get the SYSCLK configuration --------------------------------------------*/ 
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003eac:	4b12      	ldr	r3, [pc, #72]	; (8003ef8 <HAL_RCC_GetClockConfig+0x5c>)
 8003eae:	685b      	ldr	r3, [r3, #4]
 8003eb0:	f003 0203 	and.w	r2, r3, #3
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	605a      	str	r2, [r3, #4]
  
  /* Get the HCLK configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE); 
 8003eb8:	4b0f      	ldr	r3, [pc, #60]	; (8003ef8 <HAL_RCC_GetClockConfig+0x5c>)
 8003eba:	685b      	ldr	r3, [r3, #4]
 8003ebc:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	609a      	str	r2, [r3, #8]
  
  /* Get the APB1 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);   
 8003ec4:	4b0c      	ldr	r3, [pc, #48]	; (8003ef8 <HAL_RCC_GetClockConfig+0x5c>)
 8003ec6:	685b      	ldr	r3, [r3, #4]
 8003ec8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	60da      	str	r2, [r3, #12]
  
  /* Get the APB2 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8003ed0:	4b09      	ldr	r3, [pc, #36]	; (8003ef8 <HAL_RCC_GetClockConfig+0x5c>)
 8003ed2:	685b      	ldr	r3, [r3, #4]
 8003ed4:	08db      	lsrs	r3, r3, #3
 8003ed6:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	611a      	str	r2, [r3, #16]
  
  /* Get the Flash Wait State (Latency) configuration ------------------------*/   
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY); 
 8003ede:	4b07      	ldr	r3, [pc, #28]	; (8003efc <HAL_RCC_GetClockConfig+0x60>)
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	f003 0207 	and.w	r2, r3, #7
 8003ee6:	683b      	ldr	r3, [r7, #0]
 8003ee8:	601a      	str	r2, [r3, #0]
}
 8003eea:	bf00      	nop
 8003eec:	370c      	adds	r7, #12
 8003eee:	46bd      	mov	sp, r7
 8003ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ef4:	4770      	bx	lr
 8003ef6:	bf00      	nop
 8003ef8:	40021000 	.word	0x40021000
 8003efc:	40022000 	.word	0x40022000

08003f00 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003f00:	b580      	push	{r7, lr}
 8003f02:	b092      	sub	sp, #72	; 0x48
 8003f04:	af00      	add	r7, sp, #0
 8003f06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003f08:	2300      	movs	r3, #0
 8003f0a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8003f0c:	2300      	movs	r3, #0
 8003f0e:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8003f10:	2300      	movs	r3, #0
 8003f12:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	f000 80d4 	beq.w	80040cc <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003f24:	4b4e      	ldr	r3, [pc, #312]	; (8004060 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003f26:	69db      	ldr	r3, [r3, #28]
 8003f28:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d10e      	bne.n	8003f4e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003f30:	4b4b      	ldr	r3, [pc, #300]	; (8004060 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003f32:	69db      	ldr	r3, [r3, #28]
 8003f34:	4a4a      	ldr	r2, [pc, #296]	; (8004060 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003f36:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003f3a:	61d3      	str	r3, [r2, #28]
 8003f3c:	4b48      	ldr	r3, [pc, #288]	; (8004060 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003f3e:	69db      	ldr	r3, [r3, #28]
 8003f40:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f44:	60bb      	str	r3, [r7, #8]
 8003f46:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003f48:	2301      	movs	r3, #1
 8003f4a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f4e:	4b45      	ldr	r3, [pc, #276]	; (8004064 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d118      	bne.n	8003f8c <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003f5a:	4b42      	ldr	r3, [pc, #264]	; (8004064 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	4a41      	ldr	r2, [pc, #260]	; (8004064 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003f60:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003f64:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003f66:	f7fe f8b1 	bl	80020cc <HAL_GetTick>
 8003f6a:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f6c:	e008      	b.n	8003f80 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003f6e:	f7fe f8ad 	bl	80020cc <HAL_GetTick>
 8003f72:	4602      	mov	r2, r0
 8003f74:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003f76:	1ad3      	subs	r3, r2, r3
 8003f78:	2b64      	cmp	r3, #100	; 0x64
 8003f7a:	d901      	bls.n	8003f80 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8003f7c:	2303      	movs	r3, #3
 8003f7e:	e1d6      	b.n	800432e <HAL_RCCEx_PeriphCLKConfig+0x42e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f80:	4b38      	ldr	r3, [pc, #224]	; (8004064 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d0f0      	beq.n	8003f6e <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003f8c:	4b34      	ldr	r3, [pc, #208]	; (8004060 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003f8e:	6a1b      	ldr	r3, [r3, #32]
 8003f90:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003f94:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003f96:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	f000 8084 	beq.w	80040a6 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	685b      	ldr	r3, [r3, #4]
 8003fa2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003fa6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003fa8:	429a      	cmp	r2, r3
 8003faa:	d07c      	beq.n	80040a6 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003fac:	4b2c      	ldr	r3, [pc, #176]	; (8004060 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003fae:	6a1b      	ldr	r3, [r3, #32]
 8003fb0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003fb4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003fb6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003fba:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003fbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fbe:	fa93 f3a3 	rbit	r3, r3
 8003fc2:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8003fc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003fc6:	fab3 f383 	clz	r3, r3
 8003fca:	b2db      	uxtb	r3, r3
 8003fcc:	461a      	mov	r2, r3
 8003fce:	4b26      	ldr	r3, [pc, #152]	; (8004068 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003fd0:	4413      	add	r3, r2
 8003fd2:	009b      	lsls	r3, r3, #2
 8003fd4:	461a      	mov	r2, r3
 8003fd6:	2301      	movs	r3, #1
 8003fd8:	6013      	str	r3, [r2, #0]
 8003fda:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003fde:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003fe0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003fe2:	fa93 f3a3 	rbit	r3, r3
 8003fe6:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8003fe8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003fea:	fab3 f383 	clz	r3, r3
 8003fee:	b2db      	uxtb	r3, r3
 8003ff0:	461a      	mov	r2, r3
 8003ff2:	4b1d      	ldr	r3, [pc, #116]	; (8004068 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003ff4:	4413      	add	r3, r2
 8003ff6:	009b      	lsls	r3, r3, #2
 8003ff8:	461a      	mov	r2, r3
 8003ffa:	2300      	movs	r3, #0
 8003ffc:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003ffe:	4a18      	ldr	r2, [pc, #96]	; (8004060 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004000:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004002:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004004:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004006:	f003 0301 	and.w	r3, r3, #1
 800400a:	2b00      	cmp	r3, #0
 800400c:	d04b      	beq.n	80040a6 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800400e:	f7fe f85d 	bl	80020cc <HAL_GetTick>
 8004012:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004014:	e00a      	b.n	800402c <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004016:	f7fe f859 	bl	80020cc <HAL_GetTick>
 800401a:	4602      	mov	r2, r0
 800401c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800401e:	1ad3      	subs	r3, r2, r3
 8004020:	f241 3288 	movw	r2, #5000	; 0x1388
 8004024:	4293      	cmp	r3, r2
 8004026:	d901      	bls.n	800402c <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8004028:	2303      	movs	r3, #3
 800402a:	e180      	b.n	800432e <HAL_RCCEx_PeriphCLKConfig+0x42e>
 800402c:	2302      	movs	r3, #2
 800402e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004030:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004032:	fa93 f3a3 	rbit	r3, r3
 8004036:	627b      	str	r3, [r7, #36]	; 0x24
 8004038:	2302      	movs	r3, #2
 800403a:	623b      	str	r3, [r7, #32]
 800403c:	6a3b      	ldr	r3, [r7, #32]
 800403e:	fa93 f3a3 	rbit	r3, r3
 8004042:	61fb      	str	r3, [r7, #28]
  return result;
 8004044:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004046:	fab3 f383 	clz	r3, r3
 800404a:	b2db      	uxtb	r3, r3
 800404c:	095b      	lsrs	r3, r3, #5
 800404e:	b2db      	uxtb	r3, r3
 8004050:	f043 0302 	orr.w	r3, r3, #2
 8004054:	b2db      	uxtb	r3, r3
 8004056:	2b02      	cmp	r3, #2
 8004058:	d108      	bne.n	800406c <HAL_RCCEx_PeriphCLKConfig+0x16c>
 800405a:	4b01      	ldr	r3, [pc, #4]	; (8004060 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800405c:	6a1b      	ldr	r3, [r3, #32]
 800405e:	e00d      	b.n	800407c <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8004060:	40021000 	.word	0x40021000
 8004064:	40007000 	.word	0x40007000
 8004068:	10908100 	.word	0x10908100
 800406c:	2302      	movs	r3, #2
 800406e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004070:	69bb      	ldr	r3, [r7, #24]
 8004072:	fa93 f3a3 	rbit	r3, r3
 8004076:	617b      	str	r3, [r7, #20]
 8004078:	4b9a      	ldr	r3, [pc, #616]	; (80042e4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800407a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800407c:	2202      	movs	r2, #2
 800407e:	613a      	str	r2, [r7, #16]
 8004080:	693a      	ldr	r2, [r7, #16]
 8004082:	fa92 f2a2 	rbit	r2, r2
 8004086:	60fa      	str	r2, [r7, #12]
  return result;
 8004088:	68fa      	ldr	r2, [r7, #12]
 800408a:	fab2 f282 	clz	r2, r2
 800408e:	b2d2      	uxtb	r2, r2
 8004090:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004094:	b2d2      	uxtb	r2, r2
 8004096:	f002 021f 	and.w	r2, r2, #31
 800409a:	2101      	movs	r1, #1
 800409c:	fa01 f202 	lsl.w	r2, r1, r2
 80040a0:	4013      	ands	r3, r2
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d0b7      	beq.n	8004016 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 80040a6:	4b8f      	ldr	r3, [pc, #572]	; (80042e4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80040a8:	6a1b      	ldr	r3, [r3, #32]
 80040aa:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	685b      	ldr	r3, [r3, #4]
 80040b2:	498c      	ldr	r1, [pc, #560]	; (80042e4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80040b4:	4313      	orrs	r3, r2
 80040b6:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80040b8:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80040bc:	2b01      	cmp	r3, #1
 80040be:	d105      	bne.n	80040cc <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80040c0:	4b88      	ldr	r3, [pc, #544]	; (80042e4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80040c2:	69db      	ldr	r3, [r3, #28]
 80040c4:	4a87      	ldr	r2, [pc, #540]	; (80042e4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80040c6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80040ca:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	f003 0301 	and.w	r3, r3, #1
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d008      	beq.n	80040ea <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80040d8:	4b82      	ldr	r3, [pc, #520]	; (80042e4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80040da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040dc:	f023 0203 	bic.w	r2, r3, #3
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	689b      	ldr	r3, [r3, #8]
 80040e4:	497f      	ldr	r1, [pc, #508]	; (80042e4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80040e6:	4313      	orrs	r3, r2
 80040e8:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	f003 0302 	and.w	r3, r3, #2
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d008      	beq.n	8004108 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80040f6:	4b7b      	ldr	r3, [pc, #492]	; (80042e4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80040f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040fa:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	68db      	ldr	r3, [r3, #12]
 8004102:	4978      	ldr	r1, [pc, #480]	; (80042e4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004104:	4313      	orrs	r3, r2
 8004106:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	f003 0304 	and.w	r3, r3, #4
 8004110:	2b00      	cmp	r3, #0
 8004112:	d008      	beq.n	8004126 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004114:	4b73      	ldr	r3, [pc, #460]	; (80042e4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004116:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004118:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	691b      	ldr	r3, [r3, #16]
 8004120:	4970      	ldr	r1, [pc, #448]	; (80042e4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004122:	4313      	orrs	r3, r2
 8004124:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	f003 0320 	and.w	r3, r3, #32
 800412e:	2b00      	cmp	r3, #0
 8004130:	d008      	beq.n	8004144 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004132:	4b6c      	ldr	r3, [pc, #432]	; (80042e4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004134:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004136:	f023 0210 	bic.w	r2, r3, #16
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	69db      	ldr	r3, [r3, #28]
 800413e:	4969      	ldr	r1, [pc, #420]	; (80042e4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004140:	4313      	orrs	r3, r2
 8004142:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800414c:	2b00      	cmp	r3, #0
 800414e:	d008      	beq.n	8004162 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8004150:	4b64      	ldr	r3, [pc, #400]	; (80042e4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004152:	685b      	ldr	r3, [r3, #4]
 8004154:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800415c:	4961      	ldr	r1, [pc, #388]	; (80042e4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800415e:	4313      	orrs	r3, r2
 8004160:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800416a:	2b00      	cmp	r3, #0
 800416c:	d008      	beq.n	8004180 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800416e:	4b5d      	ldr	r3, [pc, #372]	; (80042e4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004170:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004172:	f023 0220 	bic.w	r2, r3, #32
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	6a1b      	ldr	r3, [r3, #32]
 800417a:	495a      	ldr	r1, [pc, #360]	; (80042e4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800417c:	4313      	orrs	r3, r2
 800417e:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004188:	2b00      	cmp	r3, #0
 800418a:	d008      	beq.n	800419e <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800418c:	4b55      	ldr	r3, [pc, #340]	; (80042e4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800418e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004190:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004198:	4952      	ldr	r1, [pc, #328]	; (80042e4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800419a:	4313      	orrs	r3, r2
 800419c:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	f003 0308 	and.w	r3, r3, #8
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d008      	beq.n	80041bc <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80041aa:	4b4e      	ldr	r3, [pc, #312]	; (80042e4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80041ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041ae:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	695b      	ldr	r3, [r3, #20]
 80041b6:	494b      	ldr	r1, [pc, #300]	; (80042e4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80041b8:	4313      	orrs	r3, r2
 80041ba:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	f003 0310 	and.w	r3, r3, #16
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d008      	beq.n	80041da <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80041c8:	4b46      	ldr	r3, [pc, #280]	; (80042e4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80041ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041cc:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	699b      	ldr	r3, [r3, #24]
 80041d4:	4943      	ldr	r1, [pc, #268]	; (80042e4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80041d6:	4313      	orrs	r3, r2
 80041d8:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d008      	beq.n	80041f8 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80041e6:	4b3f      	ldr	r3, [pc, #252]	; (80042e4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80041e8:	685b      	ldr	r3, [r3, #4]
 80041ea:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041f2:	493c      	ldr	r1, [pc, #240]	; (80042e4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80041f4:	4313      	orrs	r3, r2
 80041f6:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004200:	2b00      	cmp	r3, #0
 8004202:	d008      	beq.n	8004216 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8004204:	4b37      	ldr	r3, [pc, #220]	; (80042e4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004206:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004208:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004210:	4934      	ldr	r1, [pc, #208]	; (80042e4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004212:	4313      	orrs	r3, r2
 8004214:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800421e:	2b00      	cmp	r3, #0
 8004220:	d008      	beq.n	8004234 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8004222:	4b30      	ldr	r3, [pc, #192]	; (80042e4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004224:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004226:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800422e:	492d      	ldr	r1, [pc, #180]	; (80042e4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004230:	4313      	orrs	r3, r2
 8004232:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800423c:	2b00      	cmp	r3, #0
 800423e:	d008      	beq.n	8004252 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8004240:	4b28      	ldr	r3, [pc, #160]	; (80042e4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004242:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004244:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800424c:	4925      	ldr	r1, [pc, #148]	; (80042e4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800424e:	4313      	orrs	r3, r2
 8004250:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800425a:	2b00      	cmp	r3, #0
 800425c:	d008      	beq.n	8004270 <HAL_RCCEx_PeriphCLKConfig+0x370>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 800425e:	4b21      	ldr	r3, [pc, #132]	; (80042e4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004260:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004262:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800426a:	491e      	ldr	r1, [pc, #120]	; (80042e4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800426c:	4313      	orrs	r3, r2
 800426e:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004278:	2b00      	cmp	r3, #0
 800427a:	d008      	beq.n	800428e <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 800427c:	4b19      	ldr	r3, [pc, #100]	; (80042e4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800427e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004280:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004288:	4916      	ldr	r1, [pc, #88]	; (80042e4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800428a:	4313      	orrs	r3, r2
 800428c:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004296:	2b00      	cmp	r3, #0
 8004298:	d008      	beq.n	80042ac <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 800429a:	4b12      	ldr	r3, [pc, #72]	; (80042e4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800429c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800429e:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80042a6:	490f      	ldr	r1, [pc, #60]	; (80042e4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80042a8:	4313      	orrs	r3, r2
 80042aa:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d008      	beq.n	80042ca <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 80042b8:	4b0a      	ldr	r3, [pc, #40]	; (80042e4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80042ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042bc:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042c4:	4907      	ldr	r1, [pc, #28]	; (80042e4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80042c6:	4313      	orrs	r3, r2
 80042c8:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d00c      	beq.n	80042f0 <HAL_RCCEx_PeriphCLKConfig+0x3f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 80042d6:	4b03      	ldr	r3, [pc, #12]	; (80042e4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80042d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042da:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	e002      	b.n	80042e8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 80042e2:	bf00      	nop
 80042e4:	40021000 	.word	0x40021000
 80042e8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80042ea:	4913      	ldr	r1, [pc, #76]	; (8004338 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80042ec:	4313      	orrs	r3, r2
 80042ee:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d008      	beq.n	800430e <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 80042fc:	4b0e      	ldr	r3, [pc, #56]	; (8004338 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80042fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004300:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004308:	490b      	ldr	r1, [pc, #44]	; (8004338 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800430a:	4313      	orrs	r3, r2
 800430c:	630b      	str	r3, [r1, #48]	; 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004316:	2b00      	cmp	r3, #0
 8004318:	d008      	beq.n	800432c <HAL_RCCEx_PeriphCLKConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 800431a:	4b07      	ldr	r3, [pc, #28]	; (8004338 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800431c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800431e:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004326:	4904      	ldr	r1, [pc, #16]	; (8004338 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004328:	4313      	orrs	r3, r2
 800432a:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 800432c:	2300      	movs	r3, #0
}
 800432e:	4618      	mov	r0, r3
 8004330:	3748      	adds	r7, #72	; 0x48
 8004332:	46bd      	mov	sp, r7
 8004334:	bd80      	pop	{r7, pc}
 8004336:	bf00      	nop
 8004338:	40021000 	.word	0x40021000

0800433c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800433c:	b580      	push	{r7, lr}
 800433e:	b084      	sub	sp, #16
 8004340:	af00      	add	r7, sp, #0
 8004342:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	2b00      	cmp	r3, #0
 8004348:	d101      	bne.n	800434e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800434a:	2301      	movs	r3, #1
 800434c:	e09d      	b.n	800448a <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004352:	2b00      	cmp	r3, #0
 8004354:	d108      	bne.n	8004368 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	685b      	ldr	r3, [r3, #4]
 800435a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800435e:	d009      	beq.n	8004374 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	2200      	movs	r2, #0
 8004364:	61da      	str	r2, [r3, #28]
 8004366:	e005      	b.n	8004374 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	2200      	movs	r2, #0
 800436c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	2200      	movs	r2, #0
 8004372:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	2200      	movs	r2, #0
 8004378:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004380:	b2db      	uxtb	r3, r3
 8004382:	2b00      	cmp	r3, #0
 8004384:	d106      	bne.n	8004394 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	2200      	movs	r2, #0
 800438a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800438e:	6878      	ldr	r0, [r7, #4]
 8004390:	f7fd fc08 	bl	8001ba4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	2202      	movs	r2, #2
 8004398:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	681a      	ldr	r2, [r3, #0]
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80043aa:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	68db      	ldr	r3, [r3, #12]
 80043b0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80043b4:	d902      	bls.n	80043bc <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80043b6:	2300      	movs	r3, #0
 80043b8:	60fb      	str	r3, [r7, #12]
 80043ba:	e002      	b.n	80043c2 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80043bc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80043c0:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	68db      	ldr	r3, [r3, #12]
 80043c6:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80043ca:	d007      	beq.n	80043dc <HAL_SPI_Init+0xa0>
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	68db      	ldr	r3, [r3, #12]
 80043d0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80043d4:	d002      	beq.n	80043dc <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	2200      	movs	r2, #0
 80043da:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	685b      	ldr	r3, [r3, #4]
 80043e0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	689b      	ldr	r3, [r3, #8]
 80043e8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80043ec:	431a      	orrs	r2, r3
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	691b      	ldr	r3, [r3, #16]
 80043f2:	f003 0302 	and.w	r3, r3, #2
 80043f6:	431a      	orrs	r2, r3
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	695b      	ldr	r3, [r3, #20]
 80043fc:	f003 0301 	and.w	r3, r3, #1
 8004400:	431a      	orrs	r2, r3
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	699b      	ldr	r3, [r3, #24]
 8004406:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800440a:	431a      	orrs	r2, r3
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	69db      	ldr	r3, [r3, #28]
 8004410:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004414:	431a      	orrs	r2, r3
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	6a1b      	ldr	r3, [r3, #32]
 800441a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800441e:	ea42 0103 	orr.w	r1, r2, r3
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004426:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	430a      	orrs	r2, r1
 8004430:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	699b      	ldr	r3, [r3, #24]
 8004436:	0c1b      	lsrs	r3, r3, #16
 8004438:	f003 0204 	and.w	r2, r3, #4
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004440:	f003 0310 	and.w	r3, r3, #16
 8004444:	431a      	orrs	r2, r3
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800444a:	f003 0308 	and.w	r3, r3, #8
 800444e:	431a      	orrs	r2, r3
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	68db      	ldr	r3, [r3, #12]
 8004454:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8004458:	ea42 0103 	orr.w	r1, r2, r3
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	430a      	orrs	r2, r1
 8004468:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	69da      	ldr	r2, [r3, #28]
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004478:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	2200      	movs	r2, #0
 800447e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	2201      	movs	r2, #1
 8004484:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8004488:	2300      	movs	r3, #0
}
 800448a:	4618      	mov	r0, r3
 800448c:	3710      	adds	r7, #16
 800448e:	46bd      	mov	sp, r7
 8004490:	bd80      	pop	{r7, pc}

08004492 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004492:	b580      	push	{r7, lr}
 8004494:	b088      	sub	sp, #32
 8004496:	af00      	add	r7, sp, #0
 8004498:	60f8      	str	r0, [r7, #12]
 800449a:	60b9      	str	r1, [r7, #8]
 800449c:	603b      	str	r3, [r7, #0]
 800449e:	4613      	mov	r3, r2
 80044a0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80044a2:	2300      	movs	r3, #0
 80044a4:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80044ac:	2b01      	cmp	r3, #1
 80044ae:	d101      	bne.n	80044b4 <HAL_SPI_Transmit+0x22>
 80044b0:	2302      	movs	r3, #2
 80044b2:	e15f      	b.n	8004774 <HAL_SPI_Transmit+0x2e2>
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	2201      	movs	r2, #1
 80044b8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80044bc:	f7fd fe06 	bl	80020cc <HAL_GetTick>
 80044c0:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80044c2:	88fb      	ldrh	r3, [r7, #6]
 80044c4:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80044cc:	b2db      	uxtb	r3, r3
 80044ce:	2b01      	cmp	r3, #1
 80044d0:	d002      	beq.n	80044d8 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80044d2:	2302      	movs	r3, #2
 80044d4:	77fb      	strb	r3, [r7, #31]
    goto error;
 80044d6:	e148      	b.n	800476a <HAL_SPI_Transmit+0x2d8>
  }

  if ((pData == NULL) || (Size == 0U))
 80044d8:	68bb      	ldr	r3, [r7, #8]
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d002      	beq.n	80044e4 <HAL_SPI_Transmit+0x52>
 80044de:	88fb      	ldrh	r3, [r7, #6]
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d102      	bne.n	80044ea <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80044e4:	2301      	movs	r3, #1
 80044e6:	77fb      	strb	r3, [r7, #31]
    goto error;
 80044e8:	e13f      	b.n	800476a <HAL_SPI_Transmit+0x2d8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	2203      	movs	r2, #3
 80044ee:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	2200      	movs	r2, #0
 80044f6:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	68ba      	ldr	r2, [r7, #8]
 80044fc:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	88fa      	ldrh	r2, [r7, #6]
 8004502:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	88fa      	ldrh	r2, [r7, #6]
 8004508:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	2200      	movs	r2, #0
 800450e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	2200      	movs	r2, #0
 8004514:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	2200      	movs	r2, #0
 800451c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	2200      	movs	r2, #0
 8004524:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	2200      	movs	r2, #0
 800452a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	689b      	ldr	r3, [r3, #8]
 8004530:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004534:	d10f      	bne.n	8004556 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	681a      	ldr	r2, [r3, #0]
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004544:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	681a      	ldr	r2, [r3, #0]
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004554:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004560:	2b40      	cmp	r3, #64	; 0x40
 8004562:	d007      	beq.n	8004574 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	681a      	ldr	r2, [r3, #0]
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004572:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	68db      	ldr	r3, [r3, #12]
 8004578:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800457c:	d94f      	bls.n	800461e <HAL_SPI_Transmit+0x18c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	685b      	ldr	r3, [r3, #4]
 8004582:	2b00      	cmp	r3, #0
 8004584:	d002      	beq.n	800458c <HAL_SPI_Transmit+0xfa>
 8004586:	8afb      	ldrh	r3, [r7, #22]
 8004588:	2b01      	cmp	r3, #1
 800458a:	d142      	bne.n	8004612 <HAL_SPI_Transmit+0x180>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004590:	881a      	ldrh	r2, [r3, #0]
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800459c:	1c9a      	adds	r2, r3, #2
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80045a6:	b29b      	uxth	r3, r3
 80045a8:	3b01      	subs	r3, #1
 80045aa:	b29a      	uxth	r2, r3
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80045b0:	e02f      	b.n	8004612 <HAL_SPI_Transmit+0x180>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	689b      	ldr	r3, [r3, #8]
 80045b8:	f003 0302 	and.w	r3, r3, #2
 80045bc:	2b02      	cmp	r3, #2
 80045be:	d112      	bne.n	80045e6 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045c4:	881a      	ldrh	r2, [r3, #0]
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045d0:	1c9a      	adds	r2, r3, #2
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80045da:	b29b      	uxth	r3, r3
 80045dc:	3b01      	subs	r3, #1
 80045de:	b29a      	uxth	r2, r3
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	87da      	strh	r2, [r3, #62]	; 0x3e
 80045e4:	e015      	b.n	8004612 <HAL_SPI_Transmit+0x180>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80045e6:	f7fd fd71 	bl	80020cc <HAL_GetTick>
 80045ea:	4602      	mov	r2, r0
 80045ec:	69bb      	ldr	r3, [r7, #24]
 80045ee:	1ad3      	subs	r3, r2, r3
 80045f0:	683a      	ldr	r2, [r7, #0]
 80045f2:	429a      	cmp	r2, r3
 80045f4:	d803      	bhi.n	80045fe <HAL_SPI_Transmit+0x16c>
 80045f6:	683b      	ldr	r3, [r7, #0]
 80045f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045fc:	d102      	bne.n	8004604 <HAL_SPI_Transmit+0x172>
 80045fe:	683b      	ldr	r3, [r7, #0]
 8004600:	2b00      	cmp	r3, #0
 8004602:	d106      	bne.n	8004612 <HAL_SPI_Transmit+0x180>
        {
          errorcode = HAL_TIMEOUT;
 8004604:	2303      	movs	r3, #3
 8004606:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	2201      	movs	r2, #1
 800460c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 8004610:	e0ab      	b.n	800476a <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004616:	b29b      	uxth	r3, r3
 8004618:	2b00      	cmp	r3, #0
 800461a:	d1ca      	bne.n	80045b2 <HAL_SPI_Transmit+0x120>
 800461c:	e080      	b.n	8004720 <HAL_SPI_Transmit+0x28e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	685b      	ldr	r3, [r3, #4]
 8004622:	2b00      	cmp	r3, #0
 8004624:	d002      	beq.n	800462c <HAL_SPI_Transmit+0x19a>
 8004626:	8afb      	ldrh	r3, [r7, #22]
 8004628:	2b01      	cmp	r3, #1
 800462a:	d174      	bne.n	8004716 <HAL_SPI_Transmit+0x284>
    {
      if (hspi->TxXferCount > 1U)
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004630:	b29b      	uxth	r3, r3
 8004632:	2b01      	cmp	r3, #1
 8004634:	d912      	bls.n	800465c <HAL_SPI_Transmit+0x1ca>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800463a:	881a      	ldrh	r2, [r3, #0]
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004646:	1c9a      	adds	r2, r3, #2
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004650:	b29b      	uxth	r3, r3
 8004652:	3b02      	subs	r3, #2
 8004654:	b29a      	uxth	r2, r3
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	87da      	strh	r2, [r3, #62]	; 0x3e
 800465a:	e05c      	b.n	8004716 <HAL_SPI_Transmit+0x284>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	330c      	adds	r3, #12
 8004666:	7812      	ldrb	r2, [r2, #0]
 8004668:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800466e:	1c5a      	adds	r2, r3, #1
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004678:	b29b      	uxth	r3, r3
 800467a:	3b01      	subs	r3, #1
 800467c:	b29a      	uxth	r2, r3
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8004682:	e048      	b.n	8004716 <HAL_SPI_Transmit+0x284>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	689b      	ldr	r3, [r3, #8]
 800468a:	f003 0302 	and.w	r3, r3, #2
 800468e:	2b02      	cmp	r3, #2
 8004690:	d12b      	bne.n	80046ea <HAL_SPI_Transmit+0x258>
      {
        if (hspi->TxXferCount > 1U)
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004696:	b29b      	uxth	r3, r3
 8004698:	2b01      	cmp	r3, #1
 800469a:	d912      	bls.n	80046c2 <HAL_SPI_Transmit+0x230>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046a0:	881a      	ldrh	r2, [r3, #0]
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046ac:	1c9a      	adds	r2, r3, #2
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80046b6:	b29b      	uxth	r3, r3
 80046b8:	3b02      	subs	r3, #2
 80046ba:	b29a      	uxth	r2, r3
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	87da      	strh	r2, [r3, #62]	; 0x3e
 80046c0:	e029      	b.n	8004716 <HAL_SPI_Transmit+0x284>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	330c      	adds	r3, #12
 80046cc:	7812      	ldrb	r2, [r2, #0]
 80046ce:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046d4:	1c5a      	adds	r2, r3, #1
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80046de:	b29b      	uxth	r3, r3
 80046e0:	3b01      	subs	r3, #1
 80046e2:	b29a      	uxth	r2, r3
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	87da      	strh	r2, [r3, #62]	; 0x3e
 80046e8:	e015      	b.n	8004716 <HAL_SPI_Transmit+0x284>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80046ea:	f7fd fcef 	bl	80020cc <HAL_GetTick>
 80046ee:	4602      	mov	r2, r0
 80046f0:	69bb      	ldr	r3, [r7, #24]
 80046f2:	1ad3      	subs	r3, r2, r3
 80046f4:	683a      	ldr	r2, [r7, #0]
 80046f6:	429a      	cmp	r2, r3
 80046f8:	d803      	bhi.n	8004702 <HAL_SPI_Transmit+0x270>
 80046fa:	683b      	ldr	r3, [r7, #0]
 80046fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004700:	d102      	bne.n	8004708 <HAL_SPI_Transmit+0x276>
 8004702:	683b      	ldr	r3, [r7, #0]
 8004704:	2b00      	cmp	r3, #0
 8004706:	d106      	bne.n	8004716 <HAL_SPI_Transmit+0x284>
        {
          errorcode = HAL_TIMEOUT;
 8004708:	2303      	movs	r3, #3
 800470a:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	2201      	movs	r2, #1
 8004710:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 8004714:	e029      	b.n	800476a <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800471a:	b29b      	uxth	r3, r3
 800471c:	2b00      	cmp	r3, #0
 800471e:	d1b1      	bne.n	8004684 <HAL_SPI_Transmit+0x1f2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004720:	69ba      	ldr	r2, [r7, #24]
 8004722:	6839      	ldr	r1, [r7, #0]
 8004724:	68f8      	ldr	r0, [r7, #12]
 8004726:	f000 fb69 	bl	8004dfc <SPI_EndRxTxTransaction>
 800472a:	4603      	mov	r3, r0
 800472c:	2b00      	cmp	r3, #0
 800472e:	d002      	beq.n	8004736 <HAL_SPI_Transmit+0x2a4>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	2220      	movs	r2, #32
 8004734:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	689b      	ldr	r3, [r3, #8]
 800473a:	2b00      	cmp	r3, #0
 800473c:	d10a      	bne.n	8004754 <HAL_SPI_Transmit+0x2c2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800473e:	2300      	movs	r3, #0
 8004740:	613b      	str	r3, [r7, #16]
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	68db      	ldr	r3, [r3, #12]
 8004748:	613b      	str	r3, [r7, #16]
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	689b      	ldr	r3, [r3, #8]
 8004750:	613b      	str	r3, [r7, #16]
 8004752:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004758:	2b00      	cmp	r3, #0
 800475a:	d002      	beq.n	8004762 <HAL_SPI_Transmit+0x2d0>
  {
    errorcode = HAL_ERROR;
 800475c:	2301      	movs	r3, #1
 800475e:	77fb      	strb	r3, [r7, #31]
 8004760:	e003      	b.n	800476a <HAL_SPI_Transmit+0x2d8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	2201      	movs	r2, #1
 8004766:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	2200      	movs	r2, #0
 800476e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8004772:	7ffb      	ldrb	r3, [r7, #31]
}
 8004774:	4618      	mov	r0, r3
 8004776:	3720      	adds	r7, #32
 8004778:	46bd      	mov	sp, r7
 800477a:	bd80      	pop	{r7, pc}

0800477c <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800477c:	b580      	push	{r7, lr}
 800477e:	b08a      	sub	sp, #40	; 0x28
 8004780:	af00      	add	r7, sp, #0
 8004782:	60f8      	str	r0, [r7, #12]
 8004784:	60b9      	str	r1, [r7, #8]
 8004786:	607a      	str	r2, [r7, #4]
 8004788:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800478a:	2301      	movs	r3, #1
 800478c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800478e:	2300      	movs	r3, #0
 8004790:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800479a:	2b01      	cmp	r3, #1
 800479c:	d101      	bne.n	80047a2 <HAL_SPI_TransmitReceive+0x26>
 800479e:	2302      	movs	r3, #2
 80047a0:	e20a      	b.n	8004bb8 <HAL_SPI_TransmitReceive+0x43c>
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	2201      	movs	r2, #1
 80047a6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80047aa:	f7fd fc8f 	bl	80020cc <HAL_GetTick>
 80047ae:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80047b6:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	685b      	ldr	r3, [r3, #4]
 80047bc:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 80047be:	887b      	ldrh	r3, [r7, #2]
 80047c0:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 80047c2:	887b      	ldrh	r3, [r7, #2]
 80047c4:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80047c6:	7efb      	ldrb	r3, [r7, #27]
 80047c8:	2b01      	cmp	r3, #1
 80047ca:	d00e      	beq.n	80047ea <HAL_SPI_TransmitReceive+0x6e>
 80047cc:	697b      	ldr	r3, [r7, #20]
 80047ce:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80047d2:	d106      	bne.n	80047e2 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	689b      	ldr	r3, [r3, #8]
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d102      	bne.n	80047e2 <HAL_SPI_TransmitReceive+0x66>
 80047dc:	7efb      	ldrb	r3, [r7, #27]
 80047de:	2b04      	cmp	r3, #4
 80047e0:	d003      	beq.n	80047ea <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 80047e2:	2302      	movs	r3, #2
 80047e4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 80047e8:	e1e0      	b.n	8004bac <HAL_SPI_TransmitReceive+0x430>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80047ea:	68bb      	ldr	r3, [r7, #8]
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d005      	beq.n	80047fc <HAL_SPI_TransmitReceive+0x80>
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d002      	beq.n	80047fc <HAL_SPI_TransmitReceive+0x80>
 80047f6:	887b      	ldrh	r3, [r7, #2]
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d103      	bne.n	8004804 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 80047fc:	2301      	movs	r3, #1
 80047fe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8004802:	e1d3      	b.n	8004bac <HAL_SPI_TransmitReceive+0x430>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800480a:	b2db      	uxtb	r3, r3
 800480c:	2b04      	cmp	r3, #4
 800480e:	d003      	beq.n	8004818 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	2205      	movs	r2, #5
 8004814:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	2200      	movs	r2, #0
 800481c:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	687a      	ldr	r2, [r7, #4]
 8004822:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	887a      	ldrh	r2, [r7, #2]
 8004828:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	887a      	ldrh	r2, [r7, #2]
 8004830:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	68ba      	ldr	r2, [r7, #8]
 8004838:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	887a      	ldrh	r2, [r7, #2]
 800483e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	887a      	ldrh	r2, [r7, #2]
 8004844:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	2200      	movs	r2, #0
 800484a:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	2200      	movs	r2, #0
 8004850:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	68db      	ldr	r3, [r3, #12]
 8004856:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800485a:	d802      	bhi.n	8004862 <HAL_SPI_TransmitReceive+0xe6>
 800485c:	8a3b      	ldrh	r3, [r7, #16]
 800485e:	2b01      	cmp	r3, #1
 8004860:	d908      	bls.n	8004874 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	685a      	ldr	r2, [r3, #4]
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004870:	605a      	str	r2, [r3, #4]
 8004872:	e007      	b.n	8004884 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	685a      	ldr	r2, [r3, #4]
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004882:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800488e:	2b40      	cmp	r3, #64	; 0x40
 8004890:	d007      	beq.n	80048a2 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	681a      	ldr	r2, [r3, #0]
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80048a0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	68db      	ldr	r3, [r3, #12]
 80048a6:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80048aa:	f240 8081 	bls.w	80049b0 <HAL_SPI_TransmitReceive+0x234>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	685b      	ldr	r3, [r3, #4]
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d002      	beq.n	80048bc <HAL_SPI_TransmitReceive+0x140>
 80048b6:	8a7b      	ldrh	r3, [r7, #18]
 80048b8:	2b01      	cmp	r3, #1
 80048ba:	d16d      	bne.n	8004998 <HAL_SPI_TransmitReceive+0x21c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048c0:	881a      	ldrh	r2, [r3, #0]
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048cc:	1c9a      	adds	r2, r3, #2
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80048d6:	b29b      	uxth	r3, r3
 80048d8:	3b01      	subs	r3, #1
 80048da:	b29a      	uxth	r2, r3
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80048e0:	e05a      	b.n	8004998 <HAL_SPI_TransmitReceive+0x21c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	689b      	ldr	r3, [r3, #8]
 80048e8:	f003 0302 	and.w	r3, r3, #2
 80048ec:	2b02      	cmp	r3, #2
 80048ee:	d11b      	bne.n	8004928 <HAL_SPI_TransmitReceive+0x1ac>
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80048f4:	b29b      	uxth	r3, r3
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d016      	beq.n	8004928 <HAL_SPI_TransmitReceive+0x1ac>
 80048fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048fc:	2b01      	cmp	r3, #1
 80048fe:	d113      	bne.n	8004928 <HAL_SPI_TransmitReceive+0x1ac>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004904:	881a      	ldrh	r2, [r3, #0]
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004910:	1c9a      	adds	r2, r3, #2
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800491a:	b29b      	uxth	r3, r3
 800491c:	3b01      	subs	r3, #1
 800491e:	b29a      	uxth	r2, r3
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004924:	2300      	movs	r3, #0
 8004926:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	689b      	ldr	r3, [r3, #8]
 800492e:	f003 0301 	and.w	r3, r3, #1
 8004932:	2b01      	cmp	r3, #1
 8004934:	d11c      	bne.n	8004970 <HAL_SPI_TransmitReceive+0x1f4>
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800493c:	b29b      	uxth	r3, r3
 800493e:	2b00      	cmp	r3, #0
 8004940:	d016      	beq.n	8004970 <HAL_SPI_TransmitReceive+0x1f4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	68da      	ldr	r2, [r3, #12]
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800494c:	b292      	uxth	r2, r2
 800494e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004954:	1c9a      	adds	r2, r3, #2
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004960:	b29b      	uxth	r3, r3
 8004962:	3b01      	subs	r3, #1
 8004964:	b29a      	uxth	r2, r3
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800496c:	2301      	movs	r3, #1
 800496e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004970:	f7fd fbac 	bl	80020cc <HAL_GetTick>
 8004974:	4602      	mov	r2, r0
 8004976:	69fb      	ldr	r3, [r7, #28]
 8004978:	1ad3      	subs	r3, r2, r3
 800497a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800497c:	429a      	cmp	r2, r3
 800497e:	d80b      	bhi.n	8004998 <HAL_SPI_TransmitReceive+0x21c>
 8004980:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004982:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004986:	d007      	beq.n	8004998 <HAL_SPI_TransmitReceive+0x21c>
      {
        errorcode = HAL_TIMEOUT;
 8004988:	2303      	movs	r3, #3
 800498a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        hspi->State = HAL_SPI_STATE_READY;
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	2201      	movs	r2, #1
 8004992:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        goto error;
 8004996:	e109      	b.n	8004bac <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800499c:	b29b      	uxth	r3, r3
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d19f      	bne.n	80048e2 <HAL_SPI_TransmitReceive+0x166>
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80049a8:	b29b      	uxth	r3, r3
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d199      	bne.n	80048e2 <HAL_SPI_TransmitReceive+0x166>
 80049ae:	e0e3      	b.n	8004b78 <HAL_SPI_TransmitReceive+0x3fc>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	685b      	ldr	r3, [r3, #4]
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d003      	beq.n	80049c0 <HAL_SPI_TransmitReceive+0x244>
 80049b8:	8a7b      	ldrh	r3, [r7, #18]
 80049ba:	2b01      	cmp	r3, #1
 80049bc:	f040 80cf 	bne.w	8004b5e <HAL_SPI_TransmitReceive+0x3e2>
    {
      if (hspi->TxXferCount > 1U)
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80049c4:	b29b      	uxth	r3, r3
 80049c6:	2b01      	cmp	r3, #1
 80049c8:	d912      	bls.n	80049f0 <HAL_SPI_TransmitReceive+0x274>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049ce:	881a      	ldrh	r2, [r3, #0]
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049da:	1c9a      	adds	r2, r3, #2
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80049e4:	b29b      	uxth	r3, r3
 80049e6:	3b02      	subs	r3, #2
 80049e8:	b29a      	uxth	r2, r3
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	87da      	strh	r2, [r3, #62]	; 0x3e
 80049ee:	e0b6      	b.n	8004b5e <HAL_SPI_TransmitReceive+0x3e2>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	330c      	adds	r3, #12
 80049fa:	7812      	ldrb	r2, [r2, #0]
 80049fc:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a02:	1c5a      	adds	r2, r3, #1
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004a0c:	b29b      	uxth	r3, r3
 8004a0e:	3b01      	subs	r3, #1
 8004a10:	b29a      	uxth	r2, r3
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004a16:	e0a2      	b.n	8004b5e <HAL_SPI_TransmitReceive+0x3e2>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	689b      	ldr	r3, [r3, #8]
 8004a1e:	f003 0302 	and.w	r3, r3, #2
 8004a22:	2b02      	cmp	r3, #2
 8004a24:	d134      	bne.n	8004a90 <HAL_SPI_TransmitReceive+0x314>
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004a2a:	b29b      	uxth	r3, r3
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d02f      	beq.n	8004a90 <HAL_SPI_TransmitReceive+0x314>
 8004a30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a32:	2b01      	cmp	r3, #1
 8004a34:	d12c      	bne.n	8004a90 <HAL_SPI_TransmitReceive+0x314>
      {
        if (hspi->TxXferCount > 1U)
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004a3a:	b29b      	uxth	r3, r3
 8004a3c:	2b01      	cmp	r3, #1
 8004a3e:	d912      	bls.n	8004a66 <HAL_SPI_TransmitReceive+0x2ea>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a44:	881a      	ldrh	r2, [r3, #0]
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a50:	1c9a      	adds	r2, r3, #2
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004a5a:	b29b      	uxth	r3, r3
 8004a5c:	3b02      	subs	r3, #2
 8004a5e:	b29a      	uxth	r2, r3
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004a64:	e012      	b.n	8004a8c <HAL_SPI_TransmitReceive+0x310>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	330c      	adds	r3, #12
 8004a70:	7812      	ldrb	r2, [r2, #0]
 8004a72:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a78:	1c5a      	adds	r2, r3, #1
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004a82:	b29b      	uxth	r3, r3
 8004a84:	3b01      	subs	r3, #1
 8004a86:	b29a      	uxth	r2, r3
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004a8c:	2300      	movs	r3, #0
 8004a8e:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	689b      	ldr	r3, [r3, #8]
 8004a96:	f003 0301 	and.w	r3, r3, #1
 8004a9a:	2b01      	cmp	r3, #1
 8004a9c:	d148      	bne.n	8004b30 <HAL_SPI_TransmitReceive+0x3b4>
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004aa4:	b29b      	uxth	r3, r3
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d042      	beq.n	8004b30 <HAL_SPI_TransmitReceive+0x3b4>
      {
        if (hspi->RxXferCount > 1U)
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004ab0:	b29b      	uxth	r3, r3
 8004ab2:	2b01      	cmp	r3, #1
 8004ab4:	d923      	bls.n	8004afe <HAL_SPI_TransmitReceive+0x382>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	68da      	ldr	r2, [r3, #12]
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ac0:	b292      	uxth	r2, r2
 8004ac2:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ac8:	1c9a      	adds	r2, r3, #2
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004ad4:	b29b      	uxth	r3, r3
 8004ad6:	3b02      	subs	r3, #2
 8004ad8:	b29a      	uxth	r2, r3
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004ae6:	b29b      	uxth	r3, r3
 8004ae8:	2b01      	cmp	r3, #1
 8004aea:	d81f      	bhi.n	8004b2c <HAL_SPI_TransmitReceive+0x3b0>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	685a      	ldr	r2, [r3, #4]
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004afa:	605a      	str	r2, [r3, #4]
 8004afc:	e016      	b.n	8004b2c <HAL_SPI_TransmitReceive+0x3b0>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	f103 020c 	add.w	r2, r3, #12
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b0a:	7812      	ldrb	r2, [r2, #0]
 8004b0c:	b2d2      	uxtb	r2, r2
 8004b0e:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b14:	1c5a      	adds	r2, r3, #1
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004b20:	b29b      	uxth	r3, r3
 8004b22:	3b01      	subs	r3, #1
 8004b24:	b29a      	uxth	r2, r3
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004b2c:	2301      	movs	r3, #1
 8004b2e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004b30:	f7fd facc 	bl	80020cc <HAL_GetTick>
 8004b34:	4602      	mov	r2, r0
 8004b36:	69fb      	ldr	r3, [r7, #28]
 8004b38:	1ad3      	subs	r3, r2, r3
 8004b3a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004b3c:	429a      	cmp	r2, r3
 8004b3e:	d803      	bhi.n	8004b48 <HAL_SPI_TransmitReceive+0x3cc>
 8004b40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b42:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b46:	d102      	bne.n	8004b4e <HAL_SPI_TransmitReceive+0x3d2>
 8004b48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d107      	bne.n	8004b5e <HAL_SPI_TransmitReceive+0x3e2>
      {
        errorcode = HAL_TIMEOUT;
 8004b4e:	2303      	movs	r3, #3
 8004b50:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        hspi->State = HAL_SPI_STATE_READY;
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	2201      	movs	r2, #1
 8004b58:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        goto error;
 8004b5c:	e026      	b.n	8004bac <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004b62:	b29b      	uxth	r3, r3
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	f47f af57 	bne.w	8004a18 <HAL_SPI_TransmitReceive+0x29c>
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004b70:	b29b      	uxth	r3, r3
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	f47f af50 	bne.w	8004a18 <HAL_SPI_TransmitReceive+0x29c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004b78:	69fa      	ldr	r2, [r7, #28]
 8004b7a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004b7c:	68f8      	ldr	r0, [r7, #12]
 8004b7e:	f000 f93d 	bl	8004dfc <SPI_EndRxTxTransaction>
 8004b82:	4603      	mov	r3, r0
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d005      	beq.n	8004b94 <HAL_SPI_TransmitReceive+0x418>
  {
    errorcode = HAL_ERROR;
 8004b88:	2301      	movs	r3, #1
 8004b8a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	2220      	movs	r2, #32
 8004b92:	661a      	str	r2, [r3, #96]	; 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d003      	beq.n	8004ba4 <HAL_SPI_TransmitReceive+0x428>
  {
    errorcode = HAL_ERROR;
 8004b9c:	2301      	movs	r3, #1
 8004b9e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004ba2:	e003      	b.n	8004bac <HAL_SPI_TransmitReceive+0x430>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	2201      	movs	r2, #1
 8004ba8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }
  
error :
  __HAL_UNLOCK(hspi);
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	2200      	movs	r2, #0
 8004bb0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8004bb4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8004bb8:	4618      	mov	r0, r3
 8004bba:	3728      	adds	r7, #40	; 0x28
 8004bbc:	46bd      	mov	sp, r7
 8004bbe:	bd80      	pop	{r7, pc}

08004bc0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004bc0:	b580      	push	{r7, lr}
 8004bc2:	b088      	sub	sp, #32
 8004bc4:	af00      	add	r7, sp, #0
 8004bc6:	60f8      	str	r0, [r7, #12]
 8004bc8:	60b9      	str	r1, [r7, #8]
 8004bca:	603b      	str	r3, [r7, #0]
 8004bcc:	4613      	mov	r3, r2
 8004bce:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004bd0:	f7fd fa7c 	bl	80020cc <HAL_GetTick>
 8004bd4:	4602      	mov	r2, r0
 8004bd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bd8:	1a9b      	subs	r3, r3, r2
 8004bda:	683a      	ldr	r2, [r7, #0]
 8004bdc:	4413      	add	r3, r2
 8004bde:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004be0:	f7fd fa74 	bl	80020cc <HAL_GetTick>
 8004be4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004be6:	4b39      	ldr	r3, [pc, #228]	; (8004ccc <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	015b      	lsls	r3, r3, #5
 8004bec:	0d1b      	lsrs	r3, r3, #20
 8004bee:	69fa      	ldr	r2, [r7, #28]
 8004bf0:	fb02 f303 	mul.w	r3, r2, r3
 8004bf4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004bf6:	e054      	b.n	8004ca2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004bf8:	683b      	ldr	r3, [r7, #0]
 8004bfa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004bfe:	d050      	beq.n	8004ca2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004c00:	f7fd fa64 	bl	80020cc <HAL_GetTick>
 8004c04:	4602      	mov	r2, r0
 8004c06:	69bb      	ldr	r3, [r7, #24]
 8004c08:	1ad3      	subs	r3, r2, r3
 8004c0a:	69fa      	ldr	r2, [r7, #28]
 8004c0c:	429a      	cmp	r2, r3
 8004c0e:	d902      	bls.n	8004c16 <SPI_WaitFlagStateUntilTimeout+0x56>
 8004c10:	69fb      	ldr	r3, [r7, #28]
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d13d      	bne.n	8004c92 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	685a      	ldr	r2, [r3, #4]
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004c24:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	685b      	ldr	r3, [r3, #4]
 8004c2a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004c2e:	d111      	bne.n	8004c54 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	689b      	ldr	r3, [r3, #8]
 8004c34:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004c38:	d004      	beq.n	8004c44 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	689b      	ldr	r3, [r3, #8]
 8004c3e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004c42:	d107      	bne.n	8004c54 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	681a      	ldr	r2, [r3, #0]
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004c52:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c58:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004c5c:	d10f      	bne.n	8004c7e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	681a      	ldr	r2, [r3, #0]
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004c6c:	601a      	str	r2, [r3, #0]
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	681a      	ldr	r2, [r3, #0]
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004c7c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	2201      	movs	r2, #1
 8004c82:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	2200      	movs	r2, #0
 8004c8a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8004c8e:	2303      	movs	r3, #3
 8004c90:	e017      	b.n	8004cc2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004c92:	697b      	ldr	r3, [r7, #20]
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d101      	bne.n	8004c9c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004c98:	2300      	movs	r3, #0
 8004c9a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004c9c:	697b      	ldr	r3, [r7, #20]
 8004c9e:	3b01      	subs	r3, #1
 8004ca0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	689a      	ldr	r2, [r3, #8]
 8004ca8:	68bb      	ldr	r3, [r7, #8]
 8004caa:	4013      	ands	r3, r2
 8004cac:	68ba      	ldr	r2, [r7, #8]
 8004cae:	429a      	cmp	r2, r3
 8004cb0:	bf0c      	ite	eq
 8004cb2:	2301      	moveq	r3, #1
 8004cb4:	2300      	movne	r3, #0
 8004cb6:	b2db      	uxtb	r3, r3
 8004cb8:	461a      	mov	r2, r3
 8004cba:	79fb      	ldrb	r3, [r7, #7]
 8004cbc:	429a      	cmp	r2, r3
 8004cbe:	d19b      	bne.n	8004bf8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004cc0:	2300      	movs	r3, #0
}
 8004cc2:	4618      	mov	r0, r3
 8004cc4:	3720      	adds	r7, #32
 8004cc6:	46bd      	mov	sp, r7
 8004cc8:	bd80      	pop	{r7, pc}
 8004cca:	bf00      	nop
 8004ccc:	2000001c 	.word	0x2000001c

08004cd0 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004cd0:	b580      	push	{r7, lr}
 8004cd2:	b08a      	sub	sp, #40	; 0x28
 8004cd4:	af00      	add	r7, sp, #0
 8004cd6:	60f8      	str	r0, [r7, #12]
 8004cd8:	60b9      	str	r1, [r7, #8]
 8004cda:	607a      	str	r2, [r7, #4]
 8004cdc:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8004cde:	2300      	movs	r3, #0
 8004ce0:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8004ce2:	f7fd f9f3 	bl	80020cc <HAL_GetTick>
 8004ce6:	4602      	mov	r2, r0
 8004ce8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cea:	1a9b      	subs	r3, r3, r2
 8004cec:	683a      	ldr	r2, [r7, #0]
 8004cee:	4413      	add	r3, r2
 8004cf0:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8004cf2:	f7fd f9eb 	bl	80020cc <HAL_GetTick>
 8004cf6:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	330c      	adds	r3, #12
 8004cfe:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8004d00:	4b3d      	ldr	r3, [pc, #244]	; (8004df8 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8004d02:	681a      	ldr	r2, [r3, #0]
 8004d04:	4613      	mov	r3, r2
 8004d06:	009b      	lsls	r3, r3, #2
 8004d08:	4413      	add	r3, r2
 8004d0a:	00da      	lsls	r2, r3, #3
 8004d0c:	1ad3      	subs	r3, r2, r3
 8004d0e:	0d1b      	lsrs	r3, r3, #20
 8004d10:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004d12:	fb02 f303 	mul.w	r3, r2, r3
 8004d16:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8004d18:	e060      	b.n	8004ddc <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8004d1a:	68bb      	ldr	r3, [r7, #8]
 8004d1c:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8004d20:	d107      	bne.n	8004d32 <SPI_WaitFifoStateUntilTimeout+0x62>
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d104      	bne.n	8004d32 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8004d28:	69fb      	ldr	r3, [r7, #28]
 8004d2a:	781b      	ldrb	r3, [r3, #0]
 8004d2c:	b2db      	uxtb	r3, r3
 8004d2e:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8004d30:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8004d32:	683b      	ldr	r3, [r7, #0]
 8004d34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d38:	d050      	beq.n	8004ddc <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004d3a:	f7fd f9c7 	bl	80020cc <HAL_GetTick>
 8004d3e:	4602      	mov	r2, r0
 8004d40:	6a3b      	ldr	r3, [r7, #32]
 8004d42:	1ad3      	subs	r3, r2, r3
 8004d44:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004d46:	429a      	cmp	r2, r3
 8004d48:	d902      	bls.n	8004d50 <SPI_WaitFifoStateUntilTimeout+0x80>
 8004d4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d13d      	bne.n	8004dcc <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	685a      	ldr	r2, [r3, #4]
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004d5e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	685b      	ldr	r3, [r3, #4]
 8004d64:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004d68:	d111      	bne.n	8004d8e <SPI_WaitFifoStateUntilTimeout+0xbe>
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	689b      	ldr	r3, [r3, #8]
 8004d6e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004d72:	d004      	beq.n	8004d7e <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	689b      	ldr	r3, [r3, #8]
 8004d78:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004d7c:	d107      	bne.n	8004d8e <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	681a      	ldr	r2, [r3, #0]
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004d8c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d92:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004d96:	d10f      	bne.n	8004db8 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	681a      	ldr	r2, [r3, #0]
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004da6:	601a      	str	r2, [r3, #0]
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	681a      	ldr	r2, [r3, #0]
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004db6:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	2201      	movs	r2, #1
 8004dbc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	2200      	movs	r2, #0
 8004dc4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8004dc8:	2303      	movs	r3, #3
 8004dca:	e010      	b.n	8004dee <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004dcc:	69bb      	ldr	r3, [r7, #24]
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d101      	bne.n	8004dd6 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8004dd2:	2300      	movs	r3, #0
 8004dd4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8004dd6:	69bb      	ldr	r3, [r7, #24]
 8004dd8:	3b01      	subs	r3, #1
 8004dda:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	689a      	ldr	r2, [r3, #8]
 8004de2:	68bb      	ldr	r3, [r7, #8]
 8004de4:	4013      	ands	r3, r2
 8004de6:	687a      	ldr	r2, [r7, #4]
 8004de8:	429a      	cmp	r2, r3
 8004dea:	d196      	bne.n	8004d1a <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8004dec:	2300      	movs	r3, #0
}
 8004dee:	4618      	mov	r0, r3
 8004df0:	3728      	adds	r7, #40	; 0x28
 8004df2:	46bd      	mov	sp, r7
 8004df4:	bd80      	pop	{r7, pc}
 8004df6:	bf00      	nop
 8004df8:	2000001c 	.word	0x2000001c

08004dfc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004dfc:	b580      	push	{r7, lr}
 8004dfe:	b086      	sub	sp, #24
 8004e00:	af02      	add	r7, sp, #8
 8004e02:	60f8      	str	r0, [r7, #12]
 8004e04:	60b9      	str	r1, [r7, #8]
 8004e06:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	9300      	str	r3, [sp, #0]
 8004e0c:	68bb      	ldr	r3, [r7, #8]
 8004e0e:	2200      	movs	r2, #0
 8004e10:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8004e14:	68f8      	ldr	r0, [r7, #12]
 8004e16:	f7ff ff5b 	bl	8004cd0 <SPI_WaitFifoStateUntilTimeout>
 8004e1a:	4603      	mov	r3, r0
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d007      	beq.n	8004e30 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004e24:	f043 0220 	orr.w	r2, r3, #32
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004e2c:	2303      	movs	r3, #3
 8004e2e:	e027      	b.n	8004e80 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	9300      	str	r3, [sp, #0]
 8004e34:	68bb      	ldr	r3, [r7, #8]
 8004e36:	2200      	movs	r2, #0
 8004e38:	2180      	movs	r1, #128	; 0x80
 8004e3a:	68f8      	ldr	r0, [r7, #12]
 8004e3c:	f7ff fec0 	bl	8004bc0 <SPI_WaitFlagStateUntilTimeout>
 8004e40:	4603      	mov	r3, r0
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d007      	beq.n	8004e56 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004e4a:	f043 0220 	orr.w	r2, r3, #32
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004e52:	2303      	movs	r3, #3
 8004e54:	e014      	b.n	8004e80 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	9300      	str	r3, [sp, #0]
 8004e5a:	68bb      	ldr	r3, [r7, #8]
 8004e5c:	2200      	movs	r2, #0
 8004e5e:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8004e62:	68f8      	ldr	r0, [r7, #12]
 8004e64:	f7ff ff34 	bl	8004cd0 <SPI_WaitFifoStateUntilTimeout>
 8004e68:	4603      	mov	r3, r0
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d007      	beq.n	8004e7e <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004e72:	f043 0220 	orr.w	r2, r3, #32
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004e7a:	2303      	movs	r3, #3
 8004e7c:	e000      	b.n	8004e80 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8004e7e:	2300      	movs	r3, #0
}
 8004e80:	4618      	mov	r0, r3
 8004e82:	3710      	adds	r7, #16
 8004e84:	46bd      	mov	sp, r7
 8004e86:	bd80      	pop	{r7, pc}

08004e88 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004e88:	b580      	push	{r7, lr}
 8004e8a:	b082      	sub	sp, #8
 8004e8c:	af00      	add	r7, sp, #0
 8004e8e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d101      	bne.n	8004e9a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004e96:	2301      	movs	r3, #1
 8004e98:	e049      	b.n	8004f2e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ea0:	b2db      	uxtb	r3, r3
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d106      	bne.n	8004eb4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	2200      	movs	r2, #0
 8004eaa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004eae:	6878      	ldr	r0, [r7, #4]
 8004eb0:	f000 f841 	bl	8004f36 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	2202      	movs	r2, #2
 8004eb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681a      	ldr	r2, [r3, #0]
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	3304      	adds	r3, #4
 8004ec4:	4619      	mov	r1, r3
 8004ec6:	4610      	mov	r0, r2
 8004ec8:	f000 f9f8 	bl	80052bc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	2201      	movs	r2, #1
 8004ed0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	2201      	movs	r2, #1
 8004ed8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	2201      	movs	r2, #1
 8004ee0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	2201      	movs	r2, #1
 8004ee8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	2201      	movs	r2, #1
 8004ef0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	2201      	movs	r2, #1
 8004ef8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	2201      	movs	r2, #1
 8004f00:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	2201      	movs	r2, #1
 8004f08:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	2201      	movs	r2, #1
 8004f10:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	2201      	movs	r2, #1
 8004f18:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	2201      	movs	r2, #1
 8004f20:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	2201      	movs	r2, #1
 8004f28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004f2c:	2300      	movs	r3, #0
}
 8004f2e:	4618      	mov	r0, r3
 8004f30:	3708      	adds	r7, #8
 8004f32:	46bd      	mov	sp, r7
 8004f34:	bd80      	pop	{r7, pc}

08004f36 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8004f36:	b480      	push	{r7}
 8004f38:	b083      	sub	sp, #12
 8004f3a:	af00      	add	r7, sp, #0
 8004f3c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8004f3e:	bf00      	nop
 8004f40:	370c      	adds	r7, #12
 8004f42:	46bd      	mov	sp, r7
 8004f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f48:	4770      	bx	lr
	...

08004f4c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004f4c:	b480      	push	{r7}
 8004f4e:	b085      	sub	sp, #20
 8004f50:	af00      	add	r7, sp, #0
 8004f52:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f5a:	b2db      	uxtb	r3, r3
 8004f5c:	2b01      	cmp	r3, #1
 8004f5e:	d001      	beq.n	8004f64 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004f60:	2301      	movs	r3, #1
 8004f62:	e04f      	b.n	8005004 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	2202      	movs	r2, #2
 8004f68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	68da      	ldr	r2, [r3, #12]
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	f042 0201 	orr.w	r2, r2, #1
 8004f7a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	4a23      	ldr	r2, [pc, #140]	; (8005010 <HAL_TIM_Base_Start_IT+0xc4>)
 8004f82:	4293      	cmp	r3, r2
 8004f84:	d01d      	beq.n	8004fc2 <HAL_TIM_Base_Start_IT+0x76>
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004f8e:	d018      	beq.n	8004fc2 <HAL_TIM_Base_Start_IT+0x76>
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	4a1f      	ldr	r2, [pc, #124]	; (8005014 <HAL_TIM_Base_Start_IT+0xc8>)
 8004f96:	4293      	cmp	r3, r2
 8004f98:	d013      	beq.n	8004fc2 <HAL_TIM_Base_Start_IT+0x76>
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	4a1e      	ldr	r2, [pc, #120]	; (8005018 <HAL_TIM_Base_Start_IT+0xcc>)
 8004fa0:	4293      	cmp	r3, r2
 8004fa2:	d00e      	beq.n	8004fc2 <HAL_TIM_Base_Start_IT+0x76>
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	4a1c      	ldr	r2, [pc, #112]	; (800501c <HAL_TIM_Base_Start_IT+0xd0>)
 8004faa:	4293      	cmp	r3, r2
 8004fac:	d009      	beq.n	8004fc2 <HAL_TIM_Base_Start_IT+0x76>
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	4a1b      	ldr	r2, [pc, #108]	; (8005020 <HAL_TIM_Base_Start_IT+0xd4>)
 8004fb4:	4293      	cmp	r3, r2
 8004fb6:	d004      	beq.n	8004fc2 <HAL_TIM_Base_Start_IT+0x76>
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	4a19      	ldr	r2, [pc, #100]	; (8005024 <HAL_TIM_Base_Start_IT+0xd8>)
 8004fbe:	4293      	cmp	r3, r2
 8004fc0:	d115      	bne.n	8004fee <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	689a      	ldr	r2, [r3, #8]
 8004fc8:	4b17      	ldr	r3, [pc, #92]	; (8005028 <HAL_TIM_Base_Start_IT+0xdc>)
 8004fca:	4013      	ands	r3, r2
 8004fcc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	2b06      	cmp	r3, #6
 8004fd2:	d015      	beq.n	8005000 <HAL_TIM_Base_Start_IT+0xb4>
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004fda:	d011      	beq.n	8005000 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	681a      	ldr	r2, [r3, #0]
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	f042 0201 	orr.w	r2, r2, #1
 8004fea:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004fec:	e008      	b.n	8005000 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	681a      	ldr	r2, [r3, #0]
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	f042 0201 	orr.w	r2, r2, #1
 8004ffc:	601a      	str	r2, [r3, #0]
 8004ffe:	e000      	b.n	8005002 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005000:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005002:	2300      	movs	r3, #0
}
 8005004:	4618      	mov	r0, r3
 8005006:	3714      	adds	r7, #20
 8005008:	46bd      	mov	sp, r7
 800500a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800500e:	4770      	bx	lr
 8005010:	40012c00 	.word	0x40012c00
 8005014:	40000400 	.word	0x40000400
 8005018:	40000800 	.word	0x40000800
 800501c:	40013400 	.word	0x40013400
 8005020:	40014000 	.word	0x40014000
 8005024:	40015000 	.word	0x40015000
 8005028:	00010007 	.word	0x00010007

0800502c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800502c:	b580      	push	{r7, lr}
 800502e:	b082      	sub	sp, #8
 8005030:	af00      	add	r7, sp, #0
 8005032:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	691b      	ldr	r3, [r3, #16]
 800503a:	f003 0302 	and.w	r3, r3, #2
 800503e:	2b02      	cmp	r3, #2
 8005040:	d122      	bne.n	8005088 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	68db      	ldr	r3, [r3, #12]
 8005048:	f003 0302 	and.w	r3, r3, #2
 800504c:	2b02      	cmp	r3, #2
 800504e:	d11b      	bne.n	8005088 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	f06f 0202 	mvn.w	r2, #2
 8005058:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	2201      	movs	r2, #1
 800505e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	699b      	ldr	r3, [r3, #24]
 8005066:	f003 0303 	and.w	r3, r3, #3
 800506a:	2b00      	cmp	r3, #0
 800506c:	d003      	beq.n	8005076 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800506e:	6878      	ldr	r0, [r7, #4]
 8005070:	f000 f905 	bl	800527e <HAL_TIM_IC_CaptureCallback>
 8005074:	e005      	b.n	8005082 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005076:	6878      	ldr	r0, [r7, #4]
 8005078:	f000 f8f7 	bl	800526a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800507c:	6878      	ldr	r0, [r7, #4]
 800507e:	f000 f908 	bl	8005292 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	2200      	movs	r2, #0
 8005086:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	691b      	ldr	r3, [r3, #16]
 800508e:	f003 0304 	and.w	r3, r3, #4
 8005092:	2b04      	cmp	r3, #4
 8005094:	d122      	bne.n	80050dc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	68db      	ldr	r3, [r3, #12]
 800509c:	f003 0304 	and.w	r3, r3, #4
 80050a0:	2b04      	cmp	r3, #4
 80050a2:	d11b      	bne.n	80050dc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	f06f 0204 	mvn.w	r2, #4
 80050ac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	2202      	movs	r2, #2
 80050b2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	699b      	ldr	r3, [r3, #24]
 80050ba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d003      	beq.n	80050ca <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80050c2:	6878      	ldr	r0, [r7, #4]
 80050c4:	f000 f8db 	bl	800527e <HAL_TIM_IC_CaptureCallback>
 80050c8:	e005      	b.n	80050d6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80050ca:	6878      	ldr	r0, [r7, #4]
 80050cc:	f000 f8cd 	bl	800526a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80050d0:	6878      	ldr	r0, [r7, #4]
 80050d2:	f000 f8de 	bl	8005292 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	2200      	movs	r2, #0
 80050da:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	691b      	ldr	r3, [r3, #16]
 80050e2:	f003 0308 	and.w	r3, r3, #8
 80050e6:	2b08      	cmp	r3, #8
 80050e8:	d122      	bne.n	8005130 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	68db      	ldr	r3, [r3, #12]
 80050f0:	f003 0308 	and.w	r3, r3, #8
 80050f4:	2b08      	cmp	r3, #8
 80050f6:	d11b      	bne.n	8005130 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	f06f 0208 	mvn.w	r2, #8
 8005100:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	2204      	movs	r2, #4
 8005106:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	69db      	ldr	r3, [r3, #28]
 800510e:	f003 0303 	and.w	r3, r3, #3
 8005112:	2b00      	cmp	r3, #0
 8005114:	d003      	beq.n	800511e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005116:	6878      	ldr	r0, [r7, #4]
 8005118:	f000 f8b1 	bl	800527e <HAL_TIM_IC_CaptureCallback>
 800511c:	e005      	b.n	800512a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800511e:	6878      	ldr	r0, [r7, #4]
 8005120:	f000 f8a3 	bl	800526a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005124:	6878      	ldr	r0, [r7, #4]
 8005126:	f000 f8b4 	bl	8005292 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	2200      	movs	r2, #0
 800512e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	691b      	ldr	r3, [r3, #16]
 8005136:	f003 0310 	and.w	r3, r3, #16
 800513a:	2b10      	cmp	r3, #16
 800513c:	d122      	bne.n	8005184 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	68db      	ldr	r3, [r3, #12]
 8005144:	f003 0310 	and.w	r3, r3, #16
 8005148:	2b10      	cmp	r3, #16
 800514a:	d11b      	bne.n	8005184 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	f06f 0210 	mvn.w	r2, #16
 8005154:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	2208      	movs	r2, #8
 800515a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	69db      	ldr	r3, [r3, #28]
 8005162:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005166:	2b00      	cmp	r3, #0
 8005168:	d003      	beq.n	8005172 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800516a:	6878      	ldr	r0, [r7, #4]
 800516c:	f000 f887 	bl	800527e <HAL_TIM_IC_CaptureCallback>
 8005170:	e005      	b.n	800517e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005172:	6878      	ldr	r0, [r7, #4]
 8005174:	f000 f879 	bl	800526a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005178:	6878      	ldr	r0, [r7, #4]
 800517a:	f000 f88a 	bl	8005292 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	2200      	movs	r2, #0
 8005182:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	691b      	ldr	r3, [r3, #16]
 800518a:	f003 0301 	and.w	r3, r3, #1
 800518e:	2b01      	cmp	r3, #1
 8005190:	d10e      	bne.n	80051b0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	68db      	ldr	r3, [r3, #12]
 8005198:	f003 0301 	and.w	r3, r3, #1
 800519c:	2b01      	cmp	r3, #1
 800519e:	d107      	bne.n	80051b0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	f06f 0201 	mvn.w	r2, #1
 80051a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80051aa:	6878      	ldr	r0, [r7, #4]
 80051ac:	f7fc fcba 	bl	8001b24 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	691b      	ldr	r3, [r3, #16]
 80051b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80051ba:	2b80      	cmp	r3, #128	; 0x80
 80051bc:	d10e      	bne.n	80051dc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	68db      	ldr	r3, [r3, #12]
 80051c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80051c8:	2b80      	cmp	r3, #128	; 0x80
 80051ca:	d107      	bne.n	80051dc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80051d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80051d6:	6878      	ldr	r0, [r7, #4]
 80051d8:	f000 f918 	bl	800540c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	691b      	ldr	r3, [r3, #16]
 80051e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80051e6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80051ea:	d10e      	bne.n	800520a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	68db      	ldr	r3, [r3, #12]
 80051f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80051f6:	2b80      	cmp	r3, #128	; 0x80
 80051f8:	d107      	bne.n	800520a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8005202:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005204:	6878      	ldr	r0, [r7, #4]
 8005206:	f000 f90b 	bl	8005420 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	691b      	ldr	r3, [r3, #16]
 8005210:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005214:	2b40      	cmp	r3, #64	; 0x40
 8005216:	d10e      	bne.n	8005236 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	68db      	ldr	r3, [r3, #12]
 800521e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005222:	2b40      	cmp	r3, #64	; 0x40
 8005224:	d107      	bne.n	8005236 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800522e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005230:	6878      	ldr	r0, [r7, #4]
 8005232:	f000 f838 	bl	80052a6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	691b      	ldr	r3, [r3, #16]
 800523c:	f003 0320 	and.w	r3, r3, #32
 8005240:	2b20      	cmp	r3, #32
 8005242:	d10e      	bne.n	8005262 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	68db      	ldr	r3, [r3, #12]
 800524a:	f003 0320 	and.w	r3, r3, #32
 800524e:	2b20      	cmp	r3, #32
 8005250:	d107      	bne.n	8005262 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	f06f 0220 	mvn.w	r2, #32
 800525a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800525c:	6878      	ldr	r0, [r7, #4]
 800525e:	f000 f8cb 	bl	80053f8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005262:	bf00      	nop
 8005264:	3708      	adds	r7, #8
 8005266:	46bd      	mov	sp, r7
 8005268:	bd80      	pop	{r7, pc}

0800526a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800526a:	b480      	push	{r7}
 800526c:	b083      	sub	sp, #12
 800526e:	af00      	add	r7, sp, #0
 8005270:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005272:	bf00      	nop
 8005274:	370c      	adds	r7, #12
 8005276:	46bd      	mov	sp, r7
 8005278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800527c:	4770      	bx	lr

0800527e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800527e:	b480      	push	{r7}
 8005280:	b083      	sub	sp, #12
 8005282:	af00      	add	r7, sp, #0
 8005284:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005286:	bf00      	nop
 8005288:	370c      	adds	r7, #12
 800528a:	46bd      	mov	sp, r7
 800528c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005290:	4770      	bx	lr

08005292 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005292:	b480      	push	{r7}
 8005294:	b083      	sub	sp, #12
 8005296:	af00      	add	r7, sp, #0
 8005298:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800529a:	bf00      	nop
 800529c:	370c      	adds	r7, #12
 800529e:	46bd      	mov	sp, r7
 80052a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052a4:	4770      	bx	lr

080052a6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80052a6:	b480      	push	{r7}
 80052a8:	b083      	sub	sp, #12
 80052aa:	af00      	add	r7, sp, #0
 80052ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80052ae:	bf00      	nop
 80052b0:	370c      	adds	r7, #12
 80052b2:	46bd      	mov	sp, r7
 80052b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052b8:	4770      	bx	lr
	...

080052bc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80052bc:	b480      	push	{r7}
 80052be:	b085      	sub	sp, #20
 80052c0:	af00      	add	r7, sp, #0
 80052c2:	6078      	str	r0, [r7, #4]
 80052c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	4a42      	ldr	r2, [pc, #264]	; (80053d8 <TIM_Base_SetConfig+0x11c>)
 80052d0:	4293      	cmp	r3, r2
 80052d2:	d013      	beq.n	80052fc <TIM_Base_SetConfig+0x40>
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80052da:	d00f      	beq.n	80052fc <TIM_Base_SetConfig+0x40>
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	4a3f      	ldr	r2, [pc, #252]	; (80053dc <TIM_Base_SetConfig+0x120>)
 80052e0:	4293      	cmp	r3, r2
 80052e2:	d00b      	beq.n	80052fc <TIM_Base_SetConfig+0x40>
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	4a3e      	ldr	r2, [pc, #248]	; (80053e0 <TIM_Base_SetConfig+0x124>)
 80052e8:	4293      	cmp	r3, r2
 80052ea:	d007      	beq.n	80052fc <TIM_Base_SetConfig+0x40>
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	4a3d      	ldr	r2, [pc, #244]	; (80053e4 <TIM_Base_SetConfig+0x128>)
 80052f0:	4293      	cmp	r3, r2
 80052f2:	d003      	beq.n	80052fc <TIM_Base_SetConfig+0x40>
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	4a3c      	ldr	r2, [pc, #240]	; (80053e8 <TIM_Base_SetConfig+0x12c>)
 80052f8:	4293      	cmp	r3, r2
 80052fa:	d108      	bne.n	800530e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005302:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005304:	683b      	ldr	r3, [r7, #0]
 8005306:	685b      	ldr	r3, [r3, #4]
 8005308:	68fa      	ldr	r2, [r7, #12]
 800530a:	4313      	orrs	r3, r2
 800530c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	4a31      	ldr	r2, [pc, #196]	; (80053d8 <TIM_Base_SetConfig+0x11c>)
 8005312:	4293      	cmp	r3, r2
 8005314:	d01f      	beq.n	8005356 <TIM_Base_SetConfig+0x9a>
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800531c:	d01b      	beq.n	8005356 <TIM_Base_SetConfig+0x9a>
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	4a2e      	ldr	r2, [pc, #184]	; (80053dc <TIM_Base_SetConfig+0x120>)
 8005322:	4293      	cmp	r3, r2
 8005324:	d017      	beq.n	8005356 <TIM_Base_SetConfig+0x9a>
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	4a2d      	ldr	r2, [pc, #180]	; (80053e0 <TIM_Base_SetConfig+0x124>)
 800532a:	4293      	cmp	r3, r2
 800532c:	d013      	beq.n	8005356 <TIM_Base_SetConfig+0x9a>
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	4a2c      	ldr	r2, [pc, #176]	; (80053e4 <TIM_Base_SetConfig+0x128>)
 8005332:	4293      	cmp	r3, r2
 8005334:	d00f      	beq.n	8005356 <TIM_Base_SetConfig+0x9a>
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	4a2c      	ldr	r2, [pc, #176]	; (80053ec <TIM_Base_SetConfig+0x130>)
 800533a:	4293      	cmp	r3, r2
 800533c:	d00b      	beq.n	8005356 <TIM_Base_SetConfig+0x9a>
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	4a2b      	ldr	r2, [pc, #172]	; (80053f0 <TIM_Base_SetConfig+0x134>)
 8005342:	4293      	cmp	r3, r2
 8005344:	d007      	beq.n	8005356 <TIM_Base_SetConfig+0x9a>
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	4a2a      	ldr	r2, [pc, #168]	; (80053f4 <TIM_Base_SetConfig+0x138>)
 800534a:	4293      	cmp	r3, r2
 800534c:	d003      	beq.n	8005356 <TIM_Base_SetConfig+0x9a>
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	4a25      	ldr	r2, [pc, #148]	; (80053e8 <TIM_Base_SetConfig+0x12c>)
 8005352:	4293      	cmp	r3, r2
 8005354:	d108      	bne.n	8005368 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800535c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800535e:	683b      	ldr	r3, [r7, #0]
 8005360:	68db      	ldr	r3, [r3, #12]
 8005362:	68fa      	ldr	r2, [r7, #12]
 8005364:	4313      	orrs	r3, r2
 8005366:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800536e:	683b      	ldr	r3, [r7, #0]
 8005370:	695b      	ldr	r3, [r3, #20]
 8005372:	4313      	orrs	r3, r2
 8005374:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	68fa      	ldr	r2, [r7, #12]
 800537a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800537c:	683b      	ldr	r3, [r7, #0]
 800537e:	689a      	ldr	r2, [r3, #8]
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005384:	683b      	ldr	r3, [r7, #0]
 8005386:	681a      	ldr	r2, [r3, #0]
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	4a12      	ldr	r2, [pc, #72]	; (80053d8 <TIM_Base_SetConfig+0x11c>)
 8005390:	4293      	cmp	r3, r2
 8005392:	d013      	beq.n	80053bc <TIM_Base_SetConfig+0x100>
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	4a13      	ldr	r2, [pc, #76]	; (80053e4 <TIM_Base_SetConfig+0x128>)
 8005398:	4293      	cmp	r3, r2
 800539a:	d00f      	beq.n	80053bc <TIM_Base_SetConfig+0x100>
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	4a13      	ldr	r2, [pc, #76]	; (80053ec <TIM_Base_SetConfig+0x130>)
 80053a0:	4293      	cmp	r3, r2
 80053a2:	d00b      	beq.n	80053bc <TIM_Base_SetConfig+0x100>
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	4a12      	ldr	r2, [pc, #72]	; (80053f0 <TIM_Base_SetConfig+0x134>)
 80053a8:	4293      	cmp	r3, r2
 80053aa:	d007      	beq.n	80053bc <TIM_Base_SetConfig+0x100>
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	4a11      	ldr	r2, [pc, #68]	; (80053f4 <TIM_Base_SetConfig+0x138>)
 80053b0:	4293      	cmp	r3, r2
 80053b2:	d003      	beq.n	80053bc <TIM_Base_SetConfig+0x100>
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	4a0c      	ldr	r2, [pc, #48]	; (80053e8 <TIM_Base_SetConfig+0x12c>)
 80053b8:	4293      	cmp	r3, r2
 80053ba:	d103      	bne.n	80053c4 <TIM_Base_SetConfig+0x108>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80053bc:	683b      	ldr	r3, [r7, #0]
 80053be:	691a      	ldr	r2, [r3, #16]
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	2201      	movs	r2, #1
 80053c8:	615a      	str	r2, [r3, #20]
}
 80053ca:	bf00      	nop
 80053cc:	3714      	adds	r7, #20
 80053ce:	46bd      	mov	sp, r7
 80053d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053d4:	4770      	bx	lr
 80053d6:	bf00      	nop
 80053d8:	40012c00 	.word	0x40012c00
 80053dc:	40000400 	.word	0x40000400
 80053e0:	40000800 	.word	0x40000800
 80053e4:	40013400 	.word	0x40013400
 80053e8:	40015000 	.word	0x40015000
 80053ec:	40014000 	.word	0x40014000
 80053f0:	40014400 	.word	0x40014400
 80053f4:	40014800 	.word	0x40014800

080053f8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80053f8:	b480      	push	{r7}
 80053fa:	b083      	sub	sp, #12
 80053fc:	af00      	add	r7, sp, #0
 80053fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005400:	bf00      	nop
 8005402:	370c      	adds	r7, #12
 8005404:	46bd      	mov	sp, r7
 8005406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800540a:	4770      	bx	lr

0800540c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800540c:	b480      	push	{r7}
 800540e:	b083      	sub	sp, #12
 8005410:	af00      	add	r7, sp, #0
 8005412:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005414:	bf00      	nop
 8005416:	370c      	adds	r7, #12
 8005418:	46bd      	mov	sp, r7
 800541a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800541e:	4770      	bx	lr

08005420 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005420:	b480      	push	{r7}
 8005422:	b083      	sub	sp, #12
 8005424:	af00      	add	r7, sp, #0
 8005426:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005428:	bf00      	nop
 800542a:	370c      	adds	r7, #12
 800542c:	46bd      	mov	sp, r7
 800542e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005432:	4770      	bx	lr

08005434 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005434:	b580      	push	{r7, lr}
 8005436:	b082      	sub	sp, #8
 8005438:	af00      	add	r7, sp, #0
 800543a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	2b00      	cmp	r3, #0
 8005440:	d101      	bne.n	8005446 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005442:	2301      	movs	r3, #1
 8005444:	e040      	b.n	80054c8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800544a:	2b00      	cmp	r3, #0
 800544c:	d106      	bne.n	800545c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	2200      	movs	r2, #0
 8005452:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005456:	6878      	ldr	r0, [r7, #4]
 8005458:	f7fc fc3c 	bl	8001cd4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	2224      	movs	r2, #36	; 0x24
 8005460:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	681a      	ldr	r2, [r3, #0]
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	f022 0201 	bic.w	r2, r2, #1
 8005470:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005472:	6878      	ldr	r0, [r7, #4]
 8005474:	f000 fa7e 	bl	8005974 <UART_SetConfig>
 8005478:	4603      	mov	r3, r0
 800547a:	2b01      	cmp	r3, #1
 800547c:	d101      	bne.n	8005482 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800547e:	2301      	movs	r3, #1
 8005480:	e022      	b.n	80054c8 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005486:	2b00      	cmp	r3, #0
 8005488:	d002      	beq.n	8005490 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800548a:	6878      	ldr	r0, [r7, #4]
 800548c:	f000 fc46 	bl	8005d1c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	685a      	ldr	r2, [r3, #4]
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800549e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	689a      	ldr	r2, [r3, #8]
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80054ae:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	681a      	ldr	r2, [r3, #0]
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	f042 0201 	orr.w	r2, r2, #1
 80054be:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80054c0:	6878      	ldr	r0, [r7, #4]
 80054c2:	f000 fccd 	bl	8005e60 <UART_CheckIdleState>
 80054c6:	4603      	mov	r3, r0
}
 80054c8:	4618      	mov	r0, r3
 80054ca:	3708      	adds	r7, #8
 80054cc:	46bd      	mov	sp, r7
 80054ce:	bd80      	pop	{r7, pc}

080054d0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80054d0:	b580      	push	{r7, lr}
 80054d2:	b08a      	sub	sp, #40	; 0x28
 80054d4:	af02      	add	r7, sp, #8
 80054d6:	60f8      	str	r0, [r7, #12]
 80054d8:	60b9      	str	r1, [r7, #8]
 80054da:	603b      	str	r3, [r7, #0]
 80054dc:	4613      	mov	r3, r2
 80054de:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80054e4:	2b20      	cmp	r3, #32
 80054e6:	d178      	bne.n	80055da <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 80054e8:	68bb      	ldr	r3, [r7, #8]
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d002      	beq.n	80054f4 <HAL_UART_Transmit+0x24>
 80054ee:	88fb      	ldrh	r3, [r7, #6]
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d101      	bne.n	80054f8 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80054f4:	2301      	movs	r3, #1
 80054f6:	e071      	b.n	80055dc <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	2200      	movs	r2, #0
 80054fc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	2221      	movs	r2, #33	; 0x21
 8005504:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005506:	f7fc fde1 	bl	80020cc <HAL_GetTick>
 800550a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	88fa      	ldrh	r2, [r7, #6]
 8005510:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	88fa      	ldrh	r2, [r7, #6]
 8005518:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	689b      	ldr	r3, [r3, #8]
 8005520:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005524:	d108      	bne.n	8005538 <HAL_UART_Transmit+0x68>
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	691b      	ldr	r3, [r3, #16]
 800552a:	2b00      	cmp	r3, #0
 800552c:	d104      	bne.n	8005538 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800552e:	2300      	movs	r3, #0
 8005530:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005532:	68bb      	ldr	r3, [r7, #8]
 8005534:	61bb      	str	r3, [r7, #24]
 8005536:	e003      	b.n	8005540 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8005538:	68bb      	ldr	r3, [r7, #8]
 800553a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800553c:	2300      	movs	r3, #0
 800553e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005540:	e030      	b.n	80055a4 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005542:	683b      	ldr	r3, [r7, #0]
 8005544:	9300      	str	r3, [sp, #0]
 8005546:	697b      	ldr	r3, [r7, #20]
 8005548:	2200      	movs	r2, #0
 800554a:	2180      	movs	r1, #128	; 0x80
 800554c:	68f8      	ldr	r0, [r7, #12]
 800554e:	f000 fd2f 	bl	8005fb0 <UART_WaitOnFlagUntilTimeout>
 8005552:	4603      	mov	r3, r0
 8005554:	2b00      	cmp	r3, #0
 8005556:	d004      	beq.n	8005562 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	2220      	movs	r2, #32
 800555c:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 800555e:	2303      	movs	r3, #3
 8005560:	e03c      	b.n	80055dc <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 8005562:	69fb      	ldr	r3, [r7, #28]
 8005564:	2b00      	cmp	r3, #0
 8005566:	d10b      	bne.n	8005580 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005568:	69bb      	ldr	r3, [r7, #24]
 800556a:	881a      	ldrh	r2, [r3, #0]
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005574:	b292      	uxth	r2, r2
 8005576:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8005578:	69bb      	ldr	r3, [r7, #24]
 800557a:	3302      	adds	r3, #2
 800557c:	61bb      	str	r3, [r7, #24]
 800557e:	e008      	b.n	8005592 <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005580:	69fb      	ldr	r3, [r7, #28]
 8005582:	781a      	ldrb	r2, [r3, #0]
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	b292      	uxth	r2, r2
 800558a:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800558c:	69fb      	ldr	r3, [r7, #28]
 800558e:	3301      	adds	r3, #1
 8005590:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005598:	b29b      	uxth	r3, r3
 800559a:	3b01      	subs	r3, #1
 800559c:	b29a      	uxth	r2, r3
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80055aa:	b29b      	uxth	r3, r3
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d1c8      	bne.n	8005542 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80055b0:	683b      	ldr	r3, [r7, #0]
 80055b2:	9300      	str	r3, [sp, #0]
 80055b4:	697b      	ldr	r3, [r7, #20]
 80055b6:	2200      	movs	r2, #0
 80055b8:	2140      	movs	r1, #64	; 0x40
 80055ba:	68f8      	ldr	r0, [r7, #12]
 80055bc:	f000 fcf8 	bl	8005fb0 <UART_WaitOnFlagUntilTimeout>
 80055c0:	4603      	mov	r3, r0
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d004      	beq.n	80055d0 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	2220      	movs	r2, #32
 80055ca:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 80055cc:	2303      	movs	r3, #3
 80055ce:	e005      	b.n	80055dc <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	2220      	movs	r2, #32
 80055d4:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 80055d6:	2300      	movs	r3, #0
 80055d8:	e000      	b.n	80055dc <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 80055da:	2302      	movs	r3, #2
  }
}
 80055dc:	4618      	mov	r0, r3
 80055de:	3720      	adds	r7, #32
 80055e0:	46bd      	mov	sp, r7
 80055e2:	bd80      	pop	{r7, pc}

080055e4 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80055e4:	b580      	push	{r7, lr}
 80055e6:	b08a      	sub	sp, #40	; 0x28
 80055e8:	af02      	add	r7, sp, #8
 80055ea:	60f8      	str	r0, [r7, #12]
 80055ec:	60b9      	str	r1, [r7, #8]
 80055ee:	603b      	str	r3, [r7, #0]
 80055f0:	4613      	mov	r3, r2
 80055f2:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80055fa:	2b20      	cmp	r3, #32
 80055fc:	f040 80b6 	bne.w	800576c <HAL_UART_Receive+0x188>
  {
    if ((pData == NULL) || (Size == 0U))
 8005600:	68bb      	ldr	r3, [r7, #8]
 8005602:	2b00      	cmp	r3, #0
 8005604:	d002      	beq.n	800560c <HAL_UART_Receive+0x28>
 8005606:	88fb      	ldrh	r3, [r7, #6]
 8005608:	2b00      	cmp	r3, #0
 800560a:	d101      	bne.n	8005610 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 800560c:	2301      	movs	r3, #1
 800560e:	e0ae      	b.n	800576e <HAL_UART_Receive+0x18a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	2200      	movs	r2, #0
 8005614:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	2222      	movs	r2, #34	; 0x22
 800561c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	2200      	movs	r2, #0
 8005624:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005626:	f7fc fd51 	bl	80020cc <HAL_GetTick>
 800562a:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	88fa      	ldrh	r2, [r7, #6]
 8005630:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	88fa      	ldrh	r2, [r7, #6]
 8005638:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	689b      	ldr	r3, [r3, #8]
 8005640:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005644:	d10e      	bne.n	8005664 <HAL_UART_Receive+0x80>
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	691b      	ldr	r3, [r3, #16]
 800564a:	2b00      	cmp	r3, #0
 800564c:	d105      	bne.n	800565a <HAL_UART_Receive+0x76>
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	f240 12ff 	movw	r2, #511	; 0x1ff
 8005654:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005658:	e02d      	b.n	80056b6 <HAL_UART_Receive+0xd2>
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	22ff      	movs	r2, #255	; 0xff
 800565e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005662:	e028      	b.n	80056b6 <HAL_UART_Receive+0xd2>
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	689b      	ldr	r3, [r3, #8]
 8005668:	2b00      	cmp	r3, #0
 800566a:	d10d      	bne.n	8005688 <HAL_UART_Receive+0xa4>
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	691b      	ldr	r3, [r3, #16]
 8005670:	2b00      	cmp	r3, #0
 8005672:	d104      	bne.n	800567e <HAL_UART_Receive+0x9a>
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	22ff      	movs	r2, #255	; 0xff
 8005678:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800567c:	e01b      	b.n	80056b6 <HAL_UART_Receive+0xd2>
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	227f      	movs	r2, #127	; 0x7f
 8005682:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005686:	e016      	b.n	80056b6 <HAL_UART_Receive+0xd2>
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	689b      	ldr	r3, [r3, #8]
 800568c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005690:	d10d      	bne.n	80056ae <HAL_UART_Receive+0xca>
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	691b      	ldr	r3, [r3, #16]
 8005696:	2b00      	cmp	r3, #0
 8005698:	d104      	bne.n	80056a4 <HAL_UART_Receive+0xc0>
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	227f      	movs	r2, #127	; 0x7f
 800569e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80056a2:	e008      	b.n	80056b6 <HAL_UART_Receive+0xd2>
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	223f      	movs	r2, #63	; 0x3f
 80056a8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80056ac:	e003      	b.n	80056b6 <HAL_UART_Receive+0xd2>
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	2200      	movs	r2, #0
 80056b2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80056bc:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	689b      	ldr	r3, [r3, #8]
 80056c2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80056c6:	d108      	bne.n	80056da <HAL_UART_Receive+0xf6>
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	691b      	ldr	r3, [r3, #16]
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	d104      	bne.n	80056da <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 80056d0:	2300      	movs	r3, #0
 80056d2:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80056d4:	68bb      	ldr	r3, [r7, #8]
 80056d6:	61bb      	str	r3, [r7, #24]
 80056d8:	e003      	b.n	80056e2 <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 80056da:	68bb      	ldr	r3, [r7, #8]
 80056dc:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80056de:	2300      	movs	r3, #0
 80056e0:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 80056e2:	e037      	b.n	8005754 <HAL_UART_Receive+0x170>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80056e4:	683b      	ldr	r3, [r7, #0]
 80056e6:	9300      	str	r3, [sp, #0]
 80056e8:	697b      	ldr	r3, [r7, #20]
 80056ea:	2200      	movs	r2, #0
 80056ec:	2120      	movs	r1, #32
 80056ee:	68f8      	ldr	r0, [r7, #12]
 80056f0:	f000 fc5e 	bl	8005fb0 <UART_WaitOnFlagUntilTimeout>
 80056f4:	4603      	mov	r3, r0
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d005      	beq.n	8005706 <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	2220      	movs	r2, #32
 80056fe:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8005702:	2303      	movs	r3, #3
 8005704:	e033      	b.n	800576e <HAL_UART_Receive+0x18a>
      }
      if (pdata8bits == NULL)
 8005706:	69fb      	ldr	r3, [r7, #28]
 8005708:	2b00      	cmp	r3, #0
 800570a:	d10c      	bne.n	8005726 <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8005712:	b29a      	uxth	r2, r3
 8005714:	8a7b      	ldrh	r3, [r7, #18]
 8005716:	4013      	ands	r3, r2
 8005718:	b29a      	uxth	r2, r3
 800571a:	69bb      	ldr	r3, [r7, #24]
 800571c:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800571e:	69bb      	ldr	r3, [r7, #24]
 8005720:	3302      	adds	r3, #2
 8005722:	61bb      	str	r3, [r7, #24]
 8005724:	e00d      	b.n	8005742 <HAL_UART_Receive+0x15e>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800572c:	b29b      	uxth	r3, r3
 800572e:	b2da      	uxtb	r2, r3
 8005730:	8a7b      	ldrh	r3, [r7, #18]
 8005732:	b2db      	uxtb	r3, r3
 8005734:	4013      	ands	r3, r2
 8005736:	b2da      	uxtb	r2, r3
 8005738:	69fb      	ldr	r3, [r7, #28]
 800573a:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 800573c:	69fb      	ldr	r3, [r7, #28]
 800573e:	3301      	adds	r3, #1
 8005740:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005748:	b29b      	uxth	r3, r3
 800574a:	3b01      	subs	r3, #1
 800574c:	b29a      	uxth	r2, r3
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800575a:	b29b      	uxth	r3, r3
 800575c:	2b00      	cmp	r3, #0
 800575e:	d1c1      	bne.n	80056e4 <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	2220      	movs	r2, #32
 8005764:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    return HAL_OK;
 8005768:	2300      	movs	r3, #0
 800576a:	e000      	b.n	800576e <HAL_UART_Receive+0x18a>
  }
  else
  {
    return HAL_BUSY;
 800576c:	2302      	movs	r3, #2
  }
}
 800576e:	4618      	mov	r0, r3
 8005770:	3720      	adds	r7, #32
 8005772:	46bd      	mov	sp, r7
 8005774:	bd80      	pop	{r7, pc}
	...

08005778 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8005778:	b580      	push	{r7, lr}
 800577a:	b08a      	sub	sp, #40	; 0x28
 800577c:	af00      	add	r7, sp, #0
 800577e:	60f8      	str	r0, [r7, #12]
 8005780:	60b9      	str	r1, [r7, #8]
 8005782:	4613      	mov	r3, r2
 8005784:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800578a:	2b20      	cmp	r3, #32
 800578c:	d165      	bne.n	800585a <HAL_UART_Transmit_DMA+0xe2>
  {
    if ((pData == NULL) || (Size == 0U))
 800578e:	68bb      	ldr	r3, [r7, #8]
 8005790:	2b00      	cmp	r3, #0
 8005792:	d002      	beq.n	800579a <HAL_UART_Transmit_DMA+0x22>
 8005794:	88fb      	ldrh	r3, [r7, #6]
 8005796:	2b00      	cmp	r3, #0
 8005798:	d101      	bne.n	800579e <HAL_UART_Transmit_DMA+0x26>
    {
      return HAL_ERROR;
 800579a:	2301      	movs	r3, #1
 800579c:	e05e      	b.n	800585c <HAL_UART_Transmit_DMA+0xe4>
    }

    huart->pTxBuffPtr  = pData;
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	68ba      	ldr	r2, [r7, #8]
 80057a2:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	88fa      	ldrh	r2, [r7, #6]
 80057a8:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	88fa      	ldrh	r2, [r7, #6]
 80057b0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	2200      	movs	r2, #0
 80057b8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	2221      	movs	r2, #33	; 0x21
 80057c0:	67da      	str	r2, [r3, #124]	; 0x7c

    if (huart->hdmatx != NULL)
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d027      	beq.n	800581a <HAL_UART_Transmit_DMA+0xa2>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80057ce:	4a25      	ldr	r2, [pc, #148]	; (8005864 <HAL_UART_Transmit_DMA+0xec>)
 80057d0:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80057d6:	4a24      	ldr	r2, [pc, #144]	; (8005868 <HAL_UART_Transmit_DMA+0xf0>)
 80057d8:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80057de:	4a23      	ldr	r2, [pc, #140]	; (800586c <HAL_UART_Transmit_DMA+0xf4>)
 80057e0:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80057e6:	2200      	movs	r2, #0
 80057e8:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	6f18      	ldr	r0, [r3, #112]	; 0x70
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80057f2:	4619      	mov	r1, r3
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	3328      	adds	r3, #40	; 0x28
 80057fa:	461a      	mov	r2, r3
 80057fc:	88fb      	ldrh	r3, [r7, #6]
 80057fe:	f7fc fd9a 	bl	8002336 <HAL_DMA_Start_IT>
 8005802:	4603      	mov	r3, r0
 8005804:	2b00      	cmp	r3, #0
 8005806:	d008      	beq.n	800581a <HAL_UART_Transmit_DMA+0xa2>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	2210      	movs	r2, #16
 800580c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	2220      	movs	r2, #32
 8005814:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_ERROR;
 8005816:	2301      	movs	r3, #1
 8005818:	e020      	b.n	800585c <HAL_UART_Transmit_DMA+0xe4>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	2240      	movs	r2, #64	; 0x40
 8005820:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	3308      	adds	r3, #8
 8005828:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800582a:	697b      	ldr	r3, [r7, #20]
 800582c:	e853 3f00 	ldrex	r3, [r3]
 8005830:	613b      	str	r3, [r7, #16]
   return(result);
 8005832:	693b      	ldr	r3, [r7, #16]
 8005834:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005838:	627b      	str	r3, [r7, #36]	; 0x24
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	3308      	adds	r3, #8
 8005840:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005842:	623a      	str	r2, [r7, #32]
 8005844:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005846:	69f9      	ldr	r1, [r7, #28]
 8005848:	6a3a      	ldr	r2, [r7, #32]
 800584a:	e841 2300 	strex	r3, r2, [r1]
 800584e:	61bb      	str	r3, [r7, #24]
   return(result);
 8005850:	69bb      	ldr	r3, [r7, #24]
 8005852:	2b00      	cmp	r3, #0
 8005854:	d1e5      	bne.n	8005822 <HAL_UART_Transmit_DMA+0xaa>

    return HAL_OK;
 8005856:	2300      	movs	r3, #0
 8005858:	e000      	b.n	800585c <HAL_UART_Transmit_DMA+0xe4>
  }
  else
  {
    return HAL_BUSY;
 800585a:	2302      	movs	r3, #2
  }
}
 800585c:	4618      	mov	r0, r3
 800585e:	3728      	adds	r7, #40	; 0x28
 8005860:	46bd      	mov	sp, r7
 8005862:	bd80      	pop	{r7, pc}
 8005864:	080062d5 	.word	0x080062d5
 8005868:	08006369 	.word	0x08006369
 800586c:	080064e9 	.word	0x080064e9

08005870 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005870:	b580      	push	{r7, lr}
 8005872:	b08a      	sub	sp, #40	; 0x28
 8005874:	af00      	add	r7, sp, #0
 8005876:	60f8      	str	r0, [r7, #12]
 8005878:	60b9      	str	r1, [r7, #8]
 800587a:	4613      	mov	r3, r2
 800587c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005884:	2b20      	cmp	r3, #32
 8005886:	d132      	bne.n	80058ee <HAL_UART_Receive_DMA+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 8005888:	68bb      	ldr	r3, [r7, #8]
 800588a:	2b00      	cmp	r3, #0
 800588c:	d002      	beq.n	8005894 <HAL_UART_Receive_DMA+0x24>
 800588e:	88fb      	ldrh	r3, [r7, #6]
 8005890:	2b00      	cmp	r3, #0
 8005892:	d101      	bne.n	8005898 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 8005894:	2301      	movs	r3, #1
 8005896:	e02b      	b.n	80058f0 <HAL_UART_Receive_DMA+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	2200      	movs	r2, #0
 800589c:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	685b      	ldr	r3, [r3, #4]
 80058a4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	d018      	beq.n	80058de <HAL_UART_Receive_DMA+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058b2:	697b      	ldr	r3, [r7, #20]
 80058b4:	e853 3f00 	ldrex	r3, [r3]
 80058b8:	613b      	str	r3, [r7, #16]
   return(result);
 80058ba:	693b      	ldr	r3, [r7, #16]
 80058bc:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80058c0:	627b      	str	r3, [r7, #36]	; 0x24
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	461a      	mov	r2, r3
 80058c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058ca:	623b      	str	r3, [r7, #32]
 80058cc:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058ce:	69f9      	ldr	r1, [r7, #28]
 80058d0:	6a3a      	ldr	r2, [r7, #32]
 80058d2:	e841 2300 	strex	r3, r2, [r1]
 80058d6:	61bb      	str	r3, [r7, #24]
   return(result);
 80058d8:	69bb      	ldr	r3, [r7, #24]
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d1e6      	bne.n	80058ac <HAL_UART_Receive_DMA+0x3c>
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 80058de:	88fb      	ldrh	r3, [r7, #6]
 80058e0:	461a      	mov	r2, r3
 80058e2:	68b9      	ldr	r1, [r7, #8]
 80058e4:	68f8      	ldr	r0, [r7, #12]
 80058e6:	f000 fbcb 	bl	8006080 <UART_Start_Receive_DMA>
 80058ea:	4603      	mov	r3, r0
 80058ec:	e000      	b.n	80058f0 <HAL_UART_Receive_DMA+0x80>
  }
  else
  {
    return HAL_BUSY;
 80058ee:	2302      	movs	r3, #2
  }
}
 80058f0:	4618      	mov	r0, r3
 80058f2:	3728      	adds	r7, #40	; 0x28
 80058f4:	46bd      	mov	sp, r7
 80058f6:	bd80      	pop	{r7, pc}

080058f8 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80058f8:	b480      	push	{r7}
 80058fa:	b083      	sub	sp, #12
 80058fc:	af00      	add	r7, sp, #0
 80058fe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8005900:	bf00      	nop
 8005902:	370c      	adds	r7, #12
 8005904:	46bd      	mov	sp, r7
 8005906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800590a:	4770      	bx	lr

0800590c <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800590c:	b480      	push	{r7}
 800590e:	b083      	sub	sp, #12
 8005910:	af00      	add	r7, sp, #0
 8005912:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8005914:	bf00      	nop
 8005916:	370c      	adds	r7, #12
 8005918:	46bd      	mov	sp, r7
 800591a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800591e:	4770      	bx	lr

08005920 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8005920:	b480      	push	{r7}
 8005922:	b083      	sub	sp, #12
 8005924:	af00      	add	r7, sp, #0
 8005926:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8005928:	bf00      	nop
 800592a:	370c      	adds	r7, #12
 800592c:	46bd      	mov	sp, r7
 800592e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005932:	4770      	bx	lr

08005934 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8005934:	b480      	push	{r7}
 8005936:	b083      	sub	sp, #12
 8005938:	af00      	add	r7, sp, #0
 800593a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800593c:	bf00      	nop
 800593e:	370c      	adds	r7, #12
 8005940:	46bd      	mov	sp, r7
 8005942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005946:	4770      	bx	lr

08005948 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005948:	b480      	push	{r7}
 800594a:	b083      	sub	sp, #12
 800594c:	af00      	add	r7, sp, #0
 800594e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8005950:	bf00      	nop
 8005952:	370c      	adds	r7, #12
 8005954:	46bd      	mov	sp, r7
 8005956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800595a:	4770      	bx	lr

0800595c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800595c:	b480      	push	{r7}
 800595e:	b083      	sub	sp, #12
 8005960:	af00      	add	r7, sp, #0
 8005962:	6078      	str	r0, [r7, #4]
 8005964:	460b      	mov	r3, r1
 8005966:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005968:	bf00      	nop
 800596a:	370c      	adds	r7, #12
 800596c:	46bd      	mov	sp, r7
 800596e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005972:	4770      	bx	lr

08005974 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005974:	b580      	push	{r7, lr}
 8005976:	b088      	sub	sp, #32
 8005978:	af00      	add	r7, sp, #0
 800597a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800597c:	2300      	movs	r3, #0
 800597e:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	689a      	ldr	r2, [r3, #8]
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	691b      	ldr	r3, [r3, #16]
 8005988:	431a      	orrs	r2, r3
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	695b      	ldr	r3, [r3, #20]
 800598e:	431a      	orrs	r2, r3
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	69db      	ldr	r3, [r3, #28]
 8005994:	4313      	orrs	r3, r2
 8005996:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	681a      	ldr	r2, [r3, #0]
 800599e:	4b92      	ldr	r3, [pc, #584]	; (8005be8 <UART_SetConfig+0x274>)
 80059a0:	4013      	ands	r3, r2
 80059a2:	687a      	ldr	r2, [r7, #4]
 80059a4:	6812      	ldr	r2, [r2, #0]
 80059a6:	6979      	ldr	r1, [r7, #20]
 80059a8:	430b      	orrs	r3, r1
 80059aa:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	685b      	ldr	r3, [r3, #4]
 80059b2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	68da      	ldr	r2, [r3, #12]
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	430a      	orrs	r2, r1
 80059c0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	699b      	ldr	r3, [r3, #24]
 80059c6:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	6a1b      	ldr	r3, [r3, #32]
 80059cc:	697a      	ldr	r2, [r7, #20]
 80059ce:	4313      	orrs	r3, r2
 80059d0:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	689b      	ldr	r3, [r3, #8]
 80059d8:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	697a      	ldr	r2, [r7, #20]
 80059e2:	430a      	orrs	r2, r1
 80059e4:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	4a80      	ldr	r2, [pc, #512]	; (8005bec <UART_SetConfig+0x278>)
 80059ec:	4293      	cmp	r3, r2
 80059ee:	d120      	bne.n	8005a32 <UART_SetConfig+0xbe>
 80059f0:	4b7f      	ldr	r3, [pc, #508]	; (8005bf0 <UART_SetConfig+0x27c>)
 80059f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059f4:	f003 0303 	and.w	r3, r3, #3
 80059f8:	2b03      	cmp	r3, #3
 80059fa:	d817      	bhi.n	8005a2c <UART_SetConfig+0xb8>
 80059fc:	a201      	add	r2, pc, #4	; (adr r2, 8005a04 <UART_SetConfig+0x90>)
 80059fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a02:	bf00      	nop
 8005a04:	08005a15 	.word	0x08005a15
 8005a08:	08005a21 	.word	0x08005a21
 8005a0c:	08005a27 	.word	0x08005a27
 8005a10:	08005a1b 	.word	0x08005a1b
 8005a14:	2301      	movs	r3, #1
 8005a16:	77fb      	strb	r3, [r7, #31]
 8005a18:	e0b5      	b.n	8005b86 <UART_SetConfig+0x212>
 8005a1a:	2302      	movs	r3, #2
 8005a1c:	77fb      	strb	r3, [r7, #31]
 8005a1e:	e0b2      	b.n	8005b86 <UART_SetConfig+0x212>
 8005a20:	2304      	movs	r3, #4
 8005a22:	77fb      	strb	r3, [r7, #31]
 8005a24:	e0af      	b.n	8005b86 <UART_SetConfig+0x212>
 8005a26:	2308      	movs	r3, #8
 8005a28:	77fb      	strb	r3, [r7, #31]
 8005a2a:	e0ac      	b.n	8005b86 <UART_SetConfig+0x212>
 8005a2c:	2310      	movs	r3, #16
 8005a2e:	77fb      	strb	r3, [r7, #31]
 8005a30:	e0a9      	b.n	8005b86 <UART_SetConfig+0x212>
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	4a6f      	ldr	r2, [pc, #444]	; (8005bf4 <UART_SetConfig+0x280>)
 8005a38:	4293      	cmp	r3, r2
 8005a3a:	d124      	bne.n	8005a86 <UART_SetConfig+0x112>
 8005a3c:	4b6c      	ldr	r3, [pc, #432]	; (8005bf0 <UART_SetConfig+0x27c>)
 8005a3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a40:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005a44:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005a48:	d011      	beq.n	8005a6e <UART_SetConfig+0xfa>
 8005a4a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005a4e:	d817      	bhi.n	8005a80 <UART_SetConfig+0x10c>
 8005a50:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005a54:	d011      	beq.n	8005a7a <UART_SetConfig+0x106>
 8005a56:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005a5a:	d811      	bhi.n	8005a80 <UART_SetConfig+0x10c>
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	d003      	beq.n	8005a68 <UART_SetConfig+0xf4>
 8005a60:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005a64:	d006      	beq.n	8005a74 <UART_SetConfig+0x100>
 8005a66:	e00b      	b.n	8005a80 <UART_SetConfig+0x10c>
 8005a68:	2300      	movs	r3, #0
 8005a6a:	77fb      	strb	r3, [r7, #31]
 8005a6c:	e08b      	b.n	8005b86 <UART_SetConfig+0x212>
 8005a6e:	2302      	movs	r3, #2
 8005a70:	77fb      	strb	r3, [r7, #31]
 8005a72:	e088      	b.n	8005b86 <UART_SetConfig+0x212>
 8005a74:	2304      	movs	r3, #4
 8005a76:	77fb      	strb	r3, [r7, #31]
 8005a78:	e085      	b.n	8005b86 <UART_SetConfig+0x212>
 8005a7a:	2308      	movs	r3, #8
 8005a7c:	77fb      	strb	r3, [r7, #31]
 8005a7e:	e082      	b.n	8005b86 <UART_SetConfig+0x212>
 8005a80:	2310      	movs	r3, #16
 8005a82:	77fb      	strb	r3, [r7, #31]
 8005a84:	e07f      	b.n	8005b86 <UART_SetConfig+0x212>
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	4a5b      	ldr	r2, [pc, #364]	; (8005bf8 <UART_SetConfig+0x284>)
 8005a8c:	4293      	cmp	r3, r2
 8005a8e:	d124      	bne.n	8005ada <UART_SetConfig+0x166>
 8005a90:	4b57      	ldr	r3, [pc, #348]	; (8005bf0 <UART_SetConfig+0x27c>)
 8005a92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a94:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8005a98:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8005a9c:	d011      	beq.n	8005ac2 <UART_SetConfig+0x14e>
 8005a9e:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8005aa2:	d817      	bhi.n	8005ad4 <UART_SetConfig+0x160>
 8005aa4:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8005aa8:	d011      	beq.n	8005ace <UART_SetConfig+0x15a>
 8005aaa:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8005aae:	d811      	bhi.n	8005ad4 <UART_SetConfig+0x160>
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	d003      	beq.n	8005abc <UART_SetConfig+0x148>
 8005ab4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005ab8:	d006      	beq.n	8005ac8 <UART_SetConfig+0x154>
 8005aba:	e00b      	b.n	8005ad4 <UART_SetConfig+0x160>
 8005abc:	2300      	movs	r3, #0
 8005abe:	77fb      	strb	r3, [r7, #31]
 8005ac0:	e061      	b.n	8005b86 <UART_SetConfig+0x212>
 8005ac2:	2302      	movs	r3, #2
 8005ac4:	77fb      	strb	r3, [r7, #31]
 8005ac6:	e05e      	b.n	8005b86 <UART_SetConfig+0x212>
 8005ac8:	2304      	movs	r3, #4
 8005aca:	77fb      	strb	r3, [r7, #31]
 8005acc:	e05b      	b.n	8005b86 <UART_SetConfig+0x212>
 8005ace:	2308      	movs	r3, #8
 8005ad0:	77fb      	strb	r3, [r7, #31]
 8005ad2:	e058      	b.n	8005b86 <UART_SetConfig+0x212>
 8005ad4:	2310      	movs	r3, #16
 8005ad6:	77fb      	strb	r3, [r7, #31]
 8005ad8:	e055      	b.n	8005b86 <UART_SetConfig+0x212>
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	4a47      	ldr	r2, [pc, #284]	; (8005bfc <UART_SetConfig+0x288>)
 8005ae0:	4293      	cmp	r3, r2
 8005ae2:	d124      	bne.n	8005b2e <UART_SetConfig+0x1ba>
 8005ae4:	4b42      	ldr	r3, [pc, #264]	; (8005bf0 <UART_SetConfig+0x27c>)
 8005ae6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ae8:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8005aec:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005af0:	d011      	beq.n	8005b16 <UART_SetConfig+0x1a2>
 8005af2:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005af6:	d817      	bhi.n	8005b28 <UART_SetConfig+0x1b4>
 8005af8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005afc:	d011      	beq.n	8005b22 <UART_SetConfig+0x1ae>
 8005afe:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005b02:	d811      	bhi.n	8005b28 <UART_SetConfig+0x1b4>
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	d003      	beq.n	8005b10 <UART_SetConfig+0x19c>
 8005b08:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005b0c:	d006      	beq.n	8005b1c <UART_SetConfig+0x1a8>
 8005b0e:	e00b      	b.n	8005b28 <UART_SetConfig+0x1b4>
 8005b10:	2300      	movs	r3, #0
 8005b12:	77fb      	strb	r3, [r7, #31]
 8005b14:	e037      	b.n	8005b86 <UART_SetConfig+0x212>
 8005b16:	2302      	movs	r3, #2
 8005b18:	77fb      	strb	r3, [r7, #31]
 8005b1a:	e034      	b.n	8005b86 <UART_SetConfig+0x212>
 8005b1c:	2304      	movs	r3, #4
 8005b1e:	77fb      	strb	r3, [r7, #31]
 8005b20:	e031      	b.n	8005b86 <UART_SetConfig+0x212>
 8005b22:	2308      	movs	r3, #8
 8005b24:	77fb      	strb	r3, [r7, #31]
 8005b26:	e02e      	b.n	8005b86 <UART_SetConfig+0x212>
 8005b28:	2310      	movs	r3, #16
 8005b2a:	77fb      	strb	r3, [r7, #31]
 8005b2c:	e02b      	b.n	8005b86 <UART_SetConfig+0x212>
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	4a33      	ldr	r2, [pc, #204]	; (8005c00 <UART_SetConfig+0x28c>)
 8005b34:	4293      	cmp	r3, r2
 8005b36:	d124      	bne.n	8005b82 <UART_SetConfig+0x20e>
 8005b38:	4b2d      	ldr	r3, [pc, #180]	; (8005bf0 <UART_SetConfig+0x27c>)
 8005b3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b3c:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8005b40:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8005b44:	d011      	beq.n	8005b6a <UART_SetConfig+0x1f6>
 8005b46:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8005b4a:	d817      	bhi.n	8005b7c <UART_SetConfig+0x208>
 8005b4c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005b50:	d011      	beq.n	8005b76 <UART_SetConfig+0x202>
 8005b52:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005b56:	d811      	bhi.n	8005b7c <UART_SetConfig+0x208>
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	d003      	beq.n	8005b64 <UART_SetConfig+0x1f0>
 8005b5c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005b60:	d006      	beq.n	8005b70 <UART_SetConfig+0x1fc>
 8005b62:	e00b      	b.n	8005b7c <UART_SetConfig+0x208>
 8005b64:	2300      	movs	r3, #0
 8005b66:	77fb      	strb	r3, [r7, #31]
 8005b68:	e00d      	b.n	8005b86 <UART_SetConfig+0x212>
 8005b6a:	2302      	movs	r3, #2
 8005b6c:	77fb      	strb	r3, [r7, #31]
 8005b6e:	e00a      	b.n	8005b86 <UART_SetConfig+0x212>
 8005b70:	2304      	movs	r3, #4
 8005b72:	77fb      	strb	r3, [r7, #31]
 8005b74:	e007      	b.n	8005b86 <UART_SetConfig+0x212>
 8005b76:	2308      	movs	r3, #8
 8005b78:	77fb      	strb	r3, [r7, #31]
 8005b7a:	e004      	b.n	8005b86 <UART_SetConfig+0x212>
 8005b7c:	2310      	movs	r3, #16
 8005b7e:	77fb      	strb	r3, [r7, #31]
 8005b80:	e001      	b.n	8005b86 <UART_SetConfig+0x212>
 8005b82:	2310      	movs	r3, #16
 8005b84:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	69db      	ldr	r3, [r3, #28]
 8005b8a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005b8e:	d16b      	bne.n	8005c68 <UART_SetConfig+0x2f4>
  {
    switch (clocksource)
 8005b90:	7ffb      	ldrb	r3, [r7, #31]
 8005b92:	2b08      	cmp	r3, #8
 8005b94:	d838      	bhi.n	8005c08 <UART_SetConfig+0x294>
 8005b96:	a201      	add	r2, pc, #4	; (adr r2, 8005b9c <UART_SetConfig+0x228>)
 8005b98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b9c:	08005bc1 	.word	0x08005bc1
 8005ba0:	08005bc9 	.word	0x08005bc9
 8005ba4:	08005bd1 	.word	0x08005bd1
 8005ba8:	08005c09 	.word	0x08005c09
 8005bac:	08005bd7 	.word	0x08005bd7
 8005bb0:	08005c09 	.word	0x08005c09
 8005bb4:	08005c09 	.word	0x08005c09
 8005bb8:	08005c09 	.word	0x08005c09
 8005bbc:	08005bdf 	.word	0x08005bdf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005bc0:	f7fe f928 	bl	8003e14 <HAL_RCC_GetPCLK1Freq>
 8005bc4:	61b8      	str	r0, [r7, #24]
        break;
 8005bc6:	e024      	b.n	8005c12 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005bc8:	f7fe f946 	bl	8003e58 <HAL_RCC_GetPCLK2Freq>
 8005bcc:	61b8      	str	r0, [r7, #24]
        break;
 8005bce:	e020      	b.n	8005c12 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005bd0:	4b0c      	ldr	r3, [pc, #48]	; (8005c04 <UART_SetConfig+0x290>)
 8005bd2:	61bb      	str	r3, [r7, #24]
        break;
 8005bd4:	e01d      	b.n	8005c12 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005bd6:	f7fe f8a7 	bl	8003d28 <HAL_RCC_GetSysClockFreq>
 8005bda:	61b8      	str	r0, [r7, #24]
        break;
 8005bdc:	e019      	b.n	8005c12 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005bde:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005be2:	61bb      	str	r3, [r7, #24]
        break;
 8005be4:	e015      	b.n	8005c12 <UART_SetConfig+0x29e>
 8005be6:	bf00      	nop
 8005be8:	efff69f3 	.word	0xefff69f3
 8005bec:	40013800 	.word	0x40013800
 8005bf0:	40021000 	.word	0x40021000
 8005bf4:	40004400 	.word	0x40004400
 8005bf8:	40004800 	.word	0x40004800
 8005bfc:	40004c00 	.word	0x40004c00
 8005c00:	40005000 	.word	0x40005000
 8005c04:	007a1200 	.word	0x007a1200
      default:
        pclk = 0U;
 8005c08:	2300      	movs	r3, #0
 8005c0a:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005c0c:	2301      	movs	r3, #1
 8005c0e:	77bb      	strb	r3, [r7, #30]
        break;
 8005c10:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005c12:	69bb      	ldr	r3, [r7, #24]
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	d073      	beq.n	8005d00 <UART_SetConfig+0x38c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005c18:	69bb      	ldr	r3, [r7, #24]
 8005c1a:	005a      	lsls	r2, r3, #1
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	685b      	ldr	r3, [r3, #4]
 8005c20:	085b      	lsrs	r3, r3, #1
 8005c22:	441a      	add	r2, r3
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	685b      	ldr	r3, [r3, #4]
 8005c28:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c2c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005c2e:	693b      	ldr	r3, [r7, #16]
 8005c30:	2b0f      	cmp	r3, #15
 8005c32:	d916      	bls.n	8005c62 <UART_SetConfig+0x2ee>
 8005c34:	693b      	ldr	r3, [r7, #16]
 8005c36:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005c3a:	d212      	bcs.n	8005c62 <UART_SetConfig+0x2ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005c3c:	693b      	ldr	r3, [r7, #16]
 8005c3e:	b29b      	uxth	r3, r3
 8005c40:	f023 030f 	bic.w	r3, r3, #15
 8005c44:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005c46:	693b      	ldr	r3, [r7, #16]
 8005c48:	085b      	lsrs	r3, r3, #1
 8005c4a:	b29b      	uxth	r3, r3
 8005c4c:	f003 0307 	and.w	r3, r3, #7
 8005c50:	b29a      	uxth	r2, r3
 8005c52:	89fb      	ldrh	r3, [r7, #14]
 8005c54:	4313      	orrs	r3, r2
 8005c56:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	89fa      	ldrh	r2, [r7, #14]
 8005c5e:	60da      	str	r2, [r3, #12]
 8005c60:	e04e      	b.n	8005d00 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 8005c62:	2301      	movs	r3, #1
 8005c64:	77bb      	strb	r3, [r7, #30]
 8005c66:	e04b      	b.n	8005d00 <UART_SetConfig+0x38c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005c68:	7ffb      	ldrb	r3, [r7, #31]
 8005c6a:	2b08      	cmp	r3, #8
 8005c6c:	d827      	bhi.n	8005cbe <UART_SetConfig+0x34a>
 8005c6e:	a201      	add	r2, pc, #4	; (adr r2, 8005c74 <UART_SetConfig+0x300>)
 8005c70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c74:	08005c99 	.word	0x08005c99
 8005c78:	08005ca1 	.word	0x08005ca1
 8005c7c:	08005ca9 	.word	0x08005ca9
 8005c80:	08005cbf 	.word	0x08005cbf
 8005c84:	08005caf 	.word	0x08005caf
 8005c88:	08005cbf 	.word	0x08005cbf
 8005c8c:	08005cbf 	.word	0x08005cbf
 8005c90:	08005cbf 	.word	0x08005cbf
 8005c94:	08005cb7 	.word	0x08005cb7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005c98:	f7fe f8bc 	bl	8003e14 <HAL_RCC_GetPCLK1Freq>
 8005c9c:	61b8      	str	r0, [r7, #24]
        break;
 8005c9e:	e013      	b.n	8005cc8 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005ca0:	f7fe f8da 	bl	8003e58 <HAL_RCC_GetPCLK2Freq>
 8005ca4:	61b8      	str	r0, [r7, #24]
        break;
 8005ca6:	e00f      	b.n	8005cc8 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005ca8:	4b1b      	ldr	r3, [pc, #108]	; (8005d18 <UART_SetConfig+0x3a4>)
 8005caa:	61bb      	str	r3, [r7, #24]
        break;
 8005cac:	e00c      	b.n	8005cc8 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005cae:	f7fe f83b 	bl	8003d28 <HAL_RCC_GetSysClockFreq>
 8005cb2:	61b8      	str	r0, [r7, #24]
        break;
 8005cb4:	e008      	b.n	8005cc8 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005cb6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005cba:	61bb      	str	r3, [r7, #24]
        break;
 8005cbc:	e004      	b.n	8005cc8 <UART_SetConfig+0x354>
      default:
        pclk = 0U;
 8005cbe:	2300      	movs	r3, #0
 8005cc0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005cc2:	2301      	movs	r3, #1
 8005cc4:	77bb      	strb	r3, [r7, #30]
        break;
 8005cc6:	bf00      	nop
    }

    if (pclk != 0U)
 8005cc8:	69bb      	ldr	r3, [r7, #24]
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d018      	beq.n	8005d00 <UART_SetConfig+0x38c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	685b      	ldr	r3, [r3, #4]
 8005cd2:	085a      	lsrs	r2, r3, #1
 8005cd4:	69bb      	ldr	r3, [r7, #24]
 8005cd6:	441a      	add	r2, r3
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	685b      	ldr	r3, [r3, #4]
 8005cdc:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ce0:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005ce2:	693b      	ldr	r3, [r7, #16]
 8005ce4:	2b0f      	cmp	r3, #15
 8005ce6:	d909      	bls.n	8005cfc <UART_SetConfig+0x388>
 8005ce8:	693b      	ldr	r3, [r7, #16]
 8005cea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005cee:	d205      	bcs.n	8005cfc <UART_SetConfig+0x388>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005cf0:	693b      	ldr	r3, [r7, #16]
 8005cf2:	b29a      	uxth	r2, r3
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	60da      	str	r2, [r3, #12]
 8005cfa:	e001      	b.n	8005d00 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 8005cfc:	2301      	movs	r3, #1
 8005cfe:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	2200      	movs	r2, #0
 8005d04:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	2200      	movs	r2, #0
 8005d0a:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8005d0c:	7fbb      	ldrb	r3, [r7, #30]
}
 8005d0e:	4618      	mov	r0, r3
 8005d10:	3720      	adds	r7, #32
 8005d12:	46bd      	mov	sp, r7
 8005d14:	bd80      	pop	{r7, pc}
 8005d16:	bf00      	nop
 8005d18:	007a1200 	.word	0x007a1200

08005d1c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005d1c:	b480      	push	{r7}
 8005d1e:	b083      	sub	sp, #12
 8005d20:	af00      	add	r7, sp, #0
 8005d22:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d28:	f003 0301 	and.w	r3, r3, #1
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	d00a      	beq.n	8005d46 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	685b      	ldr	r3, [r3, #4]
 8005d36:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	430a      	orrs	r2, r1
 8005d44:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d4a:	f003 0302 	and.w	r3, r3, #2
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d00a      	beq.n	8005d68 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	685b      	ldr	r3, [r3, #4]
 8005d58:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	430a      	orrs	r2, r1
 8005d66:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d6c:	f003 0304 	and.w	r3, r3, #4
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	d00a      	beq.n	8005d8a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	685b      	ldr	r3, [r3, #4]
 8005d7a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	430a      	orrs	r2, r1
 8005d88:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d8e:	f003 0308 	and.w	r3, r3, #8
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	d00a      	beq.n	8005dac <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	685b      	ldr	r3, [r3, #4]
 8005d9c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	430a      	orrs	r2, r1
 8005daa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005db0:	f003 0310 	and.w	r3, r3, #16
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	d00a      	beq.n	8005dce <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	689b      	ldr	r3, [r3, #8]
 8005dbe:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	430a      	orrs	r2, r1
 8005dcc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dd2:	f003 0320 	and.w	r3, r3, #32
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	d00a      	beq.n	8005df0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	689b      	ldr	r3, [r3, #8]
 8005de0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	430a      	orrs	r2, r1
 8005dee:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005df4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	d01a      	beq.n	8005e32 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	685b      	ldr	r3, [r3, #4]
 8005e02:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	430a      	orrs	r2, r1
 8005e10:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e16:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005e1a:	d10a      	bne.n	8005e32 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	685b      	ldr	r3, [r3, #4]
 8005e22:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	430a      	orrs	r2, r1
 8005e30:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e36:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	d00a      	beq.n	8005e54 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	685b      	ldr	r3, [r3, #4]
 8005e44:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	430a      	orrs	r2, r1
 8005e52:	605a      	str	r2, [r3, #4]
  }
}
 8005e54:	bf00      	nop
 8005e56:	370c      	adds	r7, #12
 8005e58:	46bd      	mov	sp, r7
 8005e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e5e:	4770      	bx	lr

08005e60 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005e60:	b580      	push	{r7, lr}
 8005e62:	b098      	sub	sp, #96	; 0x60
 8005e64:	af02      	add	r7, sp, #8
 8005e66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	2200      	movs	r2, #0
 8005e6c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005e70:	f7fc f92c 	bl	80020cc <HAL_GetTick>
 8005e74:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	f003 0308 	and.w	r3, r3, #8
 8005e80:	2b08      	cmp	r3, #8
 8005e82:	d12e      	bne.n	8005ee2 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005e84:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005e88:	9300      	str	r3, [sp, #0]
 8005e8a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005e8c:	2200      	movs	r2, #0
 8005e8e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005e92:	6878      	ldr	r0, [r7, #4]
 8005e94:	f000 f88c 	bl	8005fb0 <UART_WaitOnFlagUntilTimeout>
 8005e98:	4603      	mov	r3, r0
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	d021      	beq.n	8005ee2 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ea4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ea6:	e853 3f00 	ldrex	r3, [r3]
 8005eaa:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005eac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005eae:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005eb2:	653b      	str	r3, [r7, #80]	; 0x50
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	461a      	mov	r2, r3
 8005eba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005ebc:	647b      	str	r3, [r7, #68]	; 0x44
 8005ebe:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ec0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005ec2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005ec4:	e841 2300 	strex	r3, r2, [r1]
 8005ec8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005eca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	d1e6      	bne.n	8005e9e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	2220      	movs	r2, #32
 8005ed4:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	2200      	movs	r2, #0
 8005eda:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005ede:	2303      	movs	r3, #3
 8005ee0:	e062      	b.n	8005fa8 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	f003 0304 	and.w	r3, r3, #4
 8005eec:	2b04      	cmp	r3, #4
 8005eee:	d149      	bne.n	8005f84 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005ef0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005ef4:	9300      	str	r3, [sp, #0]
 8005ef6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005ef8:	2200      	movs	r2, #0
 8005efa:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005efe:	6878      	ldr	r0, [r7, #4]
 8005f00:	f000 f856 	bl	8005fb0 <UART_WaitOnFlagUntilTimeout>
 8005f04:	4603      	mov	r3, r0
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d03c      	beq.n	8005f84 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f12:	e853 3f00 	ldrex	r3, [r3]
 8005f16:	623b      	str	r3, [r7, #32]
   return(result);
 8005f18:	6a3b      	ldr	r3, [r7, #32]
 8005f1a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005f1e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	461a      	mov	r2, r3
 8005f26:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005f28:	633b      	str	r3, [r7, #48]	; 0x30
 8005f2a:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f2c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005f2e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005f30:	e841 2300 	strex	r3, r2, [r1]
 8005f34:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005f36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	d1e6      	bne.n	8005f0a <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	3308      	adds	r3, #8
 8005f42:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f44:	693b      	ldr	r3, [r7, #16]
 8005f46:	e853 3f00 	ldrex	r3, [r3]
 8005f4a:	60fb      	str	r3, [r7, #12]
   return(result);
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	f023 0301 	bic.w	r3, r3, #1
 8005f52:	64bb      	str	r3, [r7, #72]	; 0x48
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	3308      	adds	r3, #8
 8005f5a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005f5c:	61fa      	str	r2, [r7, #28]
 8005f5e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f60:	69b9      	ldr	r1, [r7, #24]
 8005f62:	69fa      	ldr	r2, [r7, #28]
 8005f64:	e841 2300 	strex	r3, r2, [r1]
 8005f68:	617b      	str	r3, [r7, #20]
   return(result);
 8005f6a:	697b      	ldr	r3, [r7, #20]
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	d1e5      	bne.n	8005f3c <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	2220      	movs	r2, #32
 8005f74:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	2200      	movs	r2, #0
 8005f7c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005f80:	2303      	movs	r3, #3
 8005f82:	e011      	b.n	8005fa8 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	2220      	movs	r2, #32
 8005f88:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	2220      	movs	r2, #32
 8005f8e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	2200      	movs	r2, #0
 8005f96:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	2200      	movs	r2, #0
 8005f9c:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	2200      	movs	r2, #0
 8005fa2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8005fa6:	2300      	movs	r3, #0
}
 8005fa8:	4618      	mov	r0, r3
 8005faa:	3758      	adds	r7, #88	; 0x58
 8005fac:	46bd      	mov	sp, r7
 8005fae:	bd80      	pop	{r7, pc}

08005fb0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005fb0:	b580      	push	{r7, lr}
 8005fb2:	b084      	sub	sp, #16
 8005fb4:	af00      	add	r7, sp, #0
 8005fb6:	60f8      	str	r0, [r7, #12]
 8005fb8:	60b9      	str	r1, [r7, #8]
 8005fba:	603b      	str	r3, [r7, #0]
 8005fbc:	4613      	mov	r3, r2
 8005fbe:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005fc0:	e049      	b.n	8006056 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005fc2:	69bb      	ldr	r3, [r7, #24]
 8005fc4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005fc8:	d045      	beq.n	8006056 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005fca:	f7fc f87f 	bl	80020cc <HAL_GetTick>
 8005fce:	4602      	mov	r2, r0
 8005fd0:	683b      	ldr	r3, [r7, #0]
 8005fd2:	1ad3      	subs	r3, r2, r3
 8005fd4:	69ba      	ldr	r2, [r7, #24]
 8005fd6:	429a      	cmp	r2, r3
 8005fd8:	d302      	bcc.n	8005fe0 <UART_WaitOnFlagUntilTimeout+0x30>
 8005fda:	69bb      	ldr	r3, [r7, #24]
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	d101      	bne.n	8005fe4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005fe0:	2303      	movs	r3, #3
 8005fe2:	e048      	b.n	8006076 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	f003 0304 	and.w	r3, r3, #4
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d031      	beq.n	8006056 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	69db      	ldr	r3, [r3, #28]
 8005ff8:	f003 0308 	and.w	r3, r3, #8
 8005ffc:	2b08      	cmp	r3, #8
 8005ffe:	d110      	bne.n	8006022 <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	2208      	movs	r2, #8
 8006006:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8006008:	68f8      	ldr	r0, [r7, #12]
 800600a:	f000 f8ff 	bl	800620c <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	2208      	movs	r2, #8
 8006012:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	2200      	movs	r2, #0
 800601a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

           return HAL_ERROR;
 800601e:	2301      	movs	r3, #1
 8006020:	e029      	b.n	8006076 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	69db      	ldr	r3, [r3, #28]
 8006028:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800602c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006030:	d111      	bne.n	8006056 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800603a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800603c:	68f8      	ldr	r0, [r7, #12]
 800603e:	f000 f8e5 	bl	800620c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	2220      	movs	r2, #32
 8006046:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	2200      	movs	r2, #0
 800604e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8006052:	2303      	movs	r3, #3
 8006054:	e00f      	b.n	8006076 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	69da      	ldr	r2, [r3, #28]
 800605c:	68bb      	ldr	r3, [r7, #8]
 800605e:	4013      	ands	r3, r2
 8006060:	68ba      	ldr	r2, [r7, #8]
 8006062:	429a      	cmp	r2, r3
 8006064:	bf0c      	ite	eq
 8006066:	2301      	moveq	r3, #1
 8006068:	2300      	movne	r3, #0
 800606a:	b2db      	uxtb	r3, r3
 800606c:	461a      	mov	r2, r3
 800606e:	79fb      	ldrb	r3, [r7, #7]
 8006070:	429a      	cmp	r2, r3
 8006072:	d0a6      	beq.n	8005fc2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006074:	2300      	movs	r3, #0
}
 8006076:	4618      	mov	r0, r3
 8006078:	3710      	adds	r7, #16
 800607a:	46bd      	mov	sp, r7
 800607c:	bd80      	pop	{r7, pc}
	...

08006080 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006080:	b580      	push	{r7, lr}
 8006082:	b096      	sub	sp, #88	; 0x58
 8006084:	af00      	add	r7, sp, #0
 8006086:	60f8      	str	r0, [r7, #12]
 8006088:	60b9      	str	r1, [r7, #8]
 800608a:	4613      	mov	r3, r2
 800608c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	68ba      	ldr	r2, [r7, #8]
 8006092:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize = Size;
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	88fa      	ldrh	r2, [r7, #6]
 8006098:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	2200      	movs	r2, #0
 80060a0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	2222      	movs	r2, #34	; 0x22
 80060a8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  if (huart->hdmarx != NULL)
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	d028      	beq.n	8006106 <UART_Start_Receive_DMA+0x86>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80060b8:	4a3e      	ldr	r2, [pc, #248]	; (80061b4 <UART_Start_Receive_DMA+0x134>)
 80060ba:	629a      	str	r2, [r3, #40]	; 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80060c0:	4a3d      	ldr	r2, [pc, #244]	; (80061b8 <UART_Start_Receive_DMA+0x138>)
 80060c2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80060c8:	4a3c      	ldr	r2, [pc, #240]	; (80061bc <UART_Start_Receive_DMA+0x13c>)
 80060ca:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80060d0:	2200      	movs	r2, #0
 80060d2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	6f58      	ldr	r0, [r3, #116]	; 0x74
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	3324      	adds	r3, #36	; 0x24
 80060de:	4619      	mov	r1, r3
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80060e4:	461a      	mov	r2, r3
 80060e6:	88fb      	ldrh	r3, [r7, #6]
 80060e8:	f7fc f925 	bl	8002336 <HAL_DMA_Start_IT>
 80060ec:	4603      	mov	r3, r0
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	d009      	beq.n	8006106 <UART_Start_Receive_DMA+0x86>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	2210      	movs	r2, #16
 80060f6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	2220      	movs	r2, #32
 80060fe:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      return HAL_ERROR;
 8006102:	2301      	movs	r3, #1
 8006104:	e051      	b.n	80061aa <UART_Start_Receive_DMA+0x12a>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	691b      	ldr	r3, [r3, #16]
 800610a:	2b00      	cmp	r3, #0
 800610c:	d018      	beq.n	8006140 <UART_Start_Receive_DMA+0xc0>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006114:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006116:	e853 3f00 	ldrex	r3, [r3]
 800611a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800611c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800611e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006122:	657b      	str	r3, [r7, #84]	; 0x54
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	461a      	mov	r2, r3
 800612a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800612c:	64bb      	str	r3, [r7, #72]	; 0x48
 800612e:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006130:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006132:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006134:	e841 2300 	strex	r3, r2, [r1]
 8006138:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800613a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800613c:	2b00      	cmp	r3, #0
 800613e:	d1e6      	bne.n	800610e <UART_Start_Receive_DMA+0x8e>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	3308      	adds	r3, #8
 8006146:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006148:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800614a:	e853 3f00 	ldrex	r3, [r3]
 800614e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006150:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006152:	f043 0301 	orr.w	r3, r3, #1
 8006156:	653b      	str	r3, [r7, #80]	; 0x50
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	3308      	adds	r3, #8
 800615e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8006160:	637a      	str	r2, [r7, #52]	; 0x34
 8006162:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006164:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006166:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006168:	e841 2300 	strex	r3, r2, [r1]
 800616c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800616e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006170:	2b00      	cmp	r3, #0
 8006172:	d1e5      	bne.n	8006140 <UART_Start_Receive_DMA+0xc0>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	3308      	adds	r3, #8
 800617a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800617c:	697b      	ldr	r3, [r7, #20]
 800617e:	e853 3f00 	ldrex	r3, [r3]
 8006182:	613b      	str	r3, [r7, #16]
   return(result);
 8006184:	693b      	ldr	r3, [r7, #16]
 8006186:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800618a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	3308      	adds	r3, #8
 8006192:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006194:	623a      	str	r2, [r7, #32]
 8006196:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006198:	69f9      	ldr	r1, [r7, #28]
 800619a:	6a3a      	ldr	r2, [r7, #32]
 800619c:	e841 2300 	strex	r3, r2, [r1]
 80061a0:	61bb      	str	r3, [r7, #24]
   return(result);
 80061a2:	69bb      	ldr	r3, [r7, #24]
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	d1e5      	bne.n	8006174 <UART_Start_Receive_DMA+0xf4>

  return HAL_OK;
 80061a8:	2300      	movs	r3, #0
}
 80061aa:	4618      	mov	r0, r3
 80061ac:	3758      	adds	r7, #88	; 0x58
 80061ae:	46bd      	mov	sp, r7
 80061b0:	bd80      	pop	{r7, pc}
 80061b2:	bf00      	nop
 80061b4:	08006385 	.word	0x08006385
 80061b8:	080064ab 	.word	0x080064ab
 80061bc:	080064e9 	.word	0x080064e9

080061c0 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80061c0:	b480      	push	{r7}
 80061c2:	b089      	sub	sp, #36	; 0x24
 80061c4:	af00      	add	r7, sp, #0
 80061c6:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	e853 3f00 	ldrex	r3, [r3]
 80061d4:	60bb      	str	r3, [r7, #8]
   return(result);
 80061d6:	68bb      	ldr	r3, [r7, #8]
 80061d8:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80061dc:	61fb      	str	r3, [r7, #28]
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	461a      	mov	r2, r3
 80061e4:	69fb      	ldr	r3, [r7, #28]
 80061e6:	61bb      	str	r3, [r7, #24]
 80061e8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061ea:	6979      	ldr	r1, [r7, #20]
 80061ec:	69ba      	ldr	r2, [r7, #24]
 80061ee:	e841 2300 	strex	r3, r2, [r1]
 80061f2:	613b      	str	r3, [r7, #16]
   return(result);
 80061f4:	693b      	ldr	r3, [r7, #16]
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	d1e6      	bne.n	80061c8 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	2220      	movs	r2, #32
 80061fe:	67da      	str	r2, [r3, #124]	; 0x7c
}
 8006200:	bf00      	nop
 8006202:	3724      	adds	r7, #36	; 0x24
 8006204:	46bd      	mov	sp, r7
 8006206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800620a:	4770      	bx	lr

0800620c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800620c:	b480      	push	{r7}
 800620e:	b095      	sub	sp, #84	; 0x54
 8006210:	af00      	add	r7, sp, #0
 8006212:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800621a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800621c:	e853 3f00 	ldrex	r3, [r3]
 8006220:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006222:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006224:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006228:	64fb      	str	r3, [r7, #76]	; 0x4c
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	461a      	mov	r2, r3
 8006230:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006232:	643b      	str	r3, [r7, #64]	; 0x40
 8006234:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006236:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006238:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800623a:	e841 2300 	strex	r3, r2, [r1]
 800623e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006240:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006242:	2b00      	cmp	r3, #0
 8006244:	d1e6      	bne.n	8006214 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	3308      	adds	r3, #8
 800624c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800624e:	6a3b      	ldr	r3, [r7, #32]
 8006250:	e853 3f00 	ldrex	r3, [r3]
 8006254:	61fb      	str	r3, [r7, #28]
   return(result);
 8006256:	69fb      	ldr	r3, [r7, #28]
 8006258:	f023 0301 	bic.w	r3, r3, #1
 800625c:	64bb      	str	r3, [r7, #72]	; 0x48
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	3308      	adds	r3, #8
 8006264:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006266:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006268:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800626a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800626c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800626e:	e841 2300 	strex	r3, r2, [r1]
 8006272:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006274:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006276:	2b00      	cmp	r3, #0
 8006278:	d1e5      	bne.n	8006246 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800627e:	2b01      	cmp	r3, #1
 8006280:	d118      	bne.n	80062b4 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	e853 3f00 	ldrex	r3, [r3]
 800628e:	60bb      	str	r3, [r7, #8]
   return(result);
 8006290:	68bb      	ldr	r3, [r7, #8]
 8006292:	f023 0310 	bic.w	r3, r3, #16
 8006296:	647b      	str	r3, [r7, #68]	; 0x44
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	461a      	mov	r2, r3
 800629e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80062a0:	61bb      	str	r3, [r7, #24]
 80062a2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062a4:	6979      	ldr	r1, [r7, #20]
 80062a6:	69ba      	ldr	r2, [r7, #24]
 80062a8:	e841 2300 	strex	r3, r2, [r1]
 80062ac:	613b      	str	r3, [r7, #16]
   return(result);
 80062ae:	693b      	ldr	r3, [r7, #16]
 80062b0:	2b00      	cmp	r3, #0
 80062b2:	d1e6      	bne.n	8006282 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	2220      	movs	r2, #32
 80062b8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	2200      	movs	r2, #0
 80062c0:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	2200      	movs	r2, #0
 80062c6:	669a      	str	r2, [r3, #104]	; 0x68
}
 80062c8:	bf00      	nop
 80062ca:	3754      	adds	r7, #84	; 0x54
 80062cc:	46bd      	mov	sp, r7
 80062ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062d2:	4770      	bx	lr

080062d4 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80062d4:	b580      	push	{r7, lr}
 80062d6:	b090      	sub	sp, #64	; 0x40
 80062d8:	af00      	add	r7, sp, #0
 80062da:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062e0:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	699b      	ldr	r3, [r3, #24]
 80062e6:	2b20      	cmp	r3, #32
 80062e8:	d037      	beq.n	800635a <UART_DMATransmitCplt+0x86>
  {
    huart->TxXferCount = 0U;
 80062ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80062ec:	2200      	movs	r2, #0
 80062ee:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80062f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	3308      	adds	r3, #8
 80062f8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062fc:	e853 3f00 	ldrex	r3, [r3]
 8006300:	623b      	str	r3, [r7, #32]
   return(result);
 8006302:	6a3b      	ldr	r3, [r7, #32]
 8006304:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006308:	63bb      	str	r3, [r7, #56]	; 0x38
 800630a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	3308      	adds	r3, #8
 8006310:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006312:	633a      	str	r2, [r7, #48]	; 0x30
 8006314:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006316:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006318:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800631a:	e841 2300 	strex	r3, r2, [r1]
 800631e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006320:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006322:	2b00      	cmp	r3, #0
 8006324:	d1e5      	bne.n	80062f2 <UART_DMATransmitCplt+0x1e>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006326:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800632c:	693b      	ldr	r3, [r7, #16]
 800632e:	e853 3f00 	ldrex	r3, [r3]
 8006332:	60fb      	str	r3, [r7, #12]
   return(result);
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800633a:	637b      	str	r3, [r7, #52]	; 0x34
 800633c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	461a      	mov	r2, r3
 8006342:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006344:	61fb      	str	r3, [r7, #28]
 8006346:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006348:	69b9      	ldr	r1, [r7, #24]
 800634a:	69fa      	ldr	r2, [r7, #28]
 800634c:	e841 2300 	strex	r3, r2, [r1]
 8006350:	617b      	str	r3, [r7, #20]
   return(result);
 8006352:	697b      	ldr	r3, [r7, #20]
 8006354:	2b00      	cmp	r3, #0
 8006356:	d1e6      	bne.n	8006326 <UART_DMATransmitCplt+0x52>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006358:	e002      	b.n	8006360 <UART_DMATransmitCplt+0x8c>
    HAL_UART_TxCpltCallback(huart);
 800635a:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800635c:	f7ff facc 	bl	80058f8 <HAL_UART_TxCpltCallback>
}
 8006360:	bf00      	nop
 8006362:	3740      	adds	r7, #64	; 0x40
 8006364:	46bd      	mov	sp, r7
 8006366:	bd80      	pop	{r7, pc}

08006368 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8006368:	b580      	push	{r7, lr}
 800636a:	b084      	sub	sp, #16
 800636c:	af00      	add	r7, sp, #0
 800636e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006374:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8006376:	68f8      	ldr	r0, [r7, #12]
 8006378:	f7ff fac8 	bl	800590c <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800637c:	bf00      	nop
 800637e:	3710      	adds	r7, #16
 8006380:	46bd      	mov	sp, r7
 8006382:	bd80      	pop	{r7, pc}

08006384 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8006384:	b580      	push	{r7, lr}
 8006386:	b09c      	sub	sp, #112	; 0x70
 8006388:	af00      	add	r7, sp, #0
 800638a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006390:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	699b      	ldr	r3, [r3, #24]
 8006396:	2b20      	cmp	r3, #32
 8006398:	d071      	beq.n	800647e <UART_DMAReceiveCplt+0xfa>
  {
    huart->RxXferCount = 0U;
 800639a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800639c:	2200      	movs	r2, #0
 800639e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80063a2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063a8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80063aa:	e853 3f00 	ldrex	r3, [r3]
 80063ae:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80063b0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80063b2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80063b6:	66bb      	str	r3, [r7, #104]	; 0x68
 80063b8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	461a      	mov	r2, r3
 80063be:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80063c0:	65bb      	str	r3, [r7, #88]	; 0x58
 80063c2:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063c4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80063c6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80063c8:	e841 2300 	strex	r3, r2, [r1]
 80063cc:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80063ce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	d1e6      	bne.n	80063a2 <UART_DMAReceiveCplt+0x1e>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80063d4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	3308      	adds	r3, #8
 80063da:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063de:	e853 3f00 	ldrex	r3, [r3]
 80063e2:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80063e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80063e6:	f023 0301 	bic.w	r3, r3, #1
 80063ea:	667b      	str	r3, [r7, #100]	; 0x64
 80063ec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	3308      	adds	r3, #8
 80063f2:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80063f4:	647a      	str	r2, [r7, #68]	; 0x44
 80063f6:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063f8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80063fa:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80063fc:	e841 2300 	strex	r3, r2, [r1]
 8006400:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006402:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006404:	2b00      	cmp	r3, #0
 8006406:	d1e5      	bne.n	80063d4 <UART_DMAReceiveCplt+0x50>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006408:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	3308      	adds	r3, #8
 800640e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006410:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006412:	e853 3f00 	ldrex	r3, [r3]
 8006416:	623b      	str	r3, [r7, #32]
   return(result);
 8006418:	6a3b      	ldr	r3, [r7, #32]
 800641a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800641e:	663b      	str	r3, [r7, #96]	; 0x60
 8006420:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	3308      	adds	r3, #8
 8006426:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006428:	633a      	str	r2, [r7, #48]	; 0x30
 800642a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800642c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800642e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006430:	e841 2300 	strex	r3, r2, [r1]
 8006434:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006436:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006438:	2b00      	cmp	r3, #0
 800643a:	d1e5      	bne.n	8006408 <UART_DMAReceiveCplt+0x84>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800643c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800643e:	2220      	movs	r2, #32
 8006440:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006444:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006446:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006448:	2b01      	cmp	r3, #1
 800644a:	d118      	bne.n	800647e <UART_DMAReceiveCplt+0xfa>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800644c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006452:	693b      	ldr	r3, [r7, #16]
 8006454:	e853 3f00 	ldrex	r3, [r3]
 8006458:	60fb      	str	r3, [r7, #12]
   return(result);
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	f023 0310 	bic.w	r3, r3, #16
 8006460:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006462:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	461a      	mov	r2, r3
 8006468:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800646a:	61fb      	str	r3, [r7, #28]
 800646c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800646e:	69b9      	ldr	r1, [r7, #24]
 8006470:	69fa      	ldr	r2, [r7, #28]
 8006472:	e841 2300 	strex	r3, r2, [r1]
 8006476:	617b      	str	r3, [r7, #20]
   return(result);
 8006478:	697b      	ldr	r3, [r7, #20]
 800647a:	2b00      	cmp	r3, #0
 800647c:	d1e6      	bne.n	800644c <UART_DMAReceiveCplt+0xc8>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800647e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006480:	2200      	movs	r2, #0
 8006482:	665a      	str	r2, [r3, #100]	; 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006484:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006486:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006488:	2b01      	cmp	r3, #1
 800648a:	d107      	bne.n	800649c <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800648c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800648e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8006492:	4619      	mov	r1, r3
 8006494:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8006496:	f7ff fa61 	bl	800595c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800649a:	e002      	b.n	80064a2 <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 800649c:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800649e:	f7ff fa3f 	bl	8005920 <HAL_UART_RxCpltCallback>
}
 80064a2:	bf00      	nop
 80064a4:	3770      	adds	r7, #112	; 0x70
 80064a6:	46bd      	mov	sp, r7
 80064a8:	bd80      	pop	{r7, pc}

080064aa <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80064aa:	b580      	push	{r7, lr}
 80064ac:	b084      	sub	sp, #16
 80064ae:	af00      	add	r7, sp, #0
 80064b0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064b6:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	2201      	movs	r2, #1
 80064bc:	665a      	str	r2, [r3, #100]	; 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80064c2:	2b01      	cmp	r3, #1
 80064c4:	d109      	bne.n	80064da <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80064cc:	085b      	lsrs	r3, r3, #1
 80064ce:	b29b      	uxth	r3, r3
 80064d0:	4619      	mov	r1, r3
 80064d2:	68f8      	ldr	r0, [r7, #12]
 80064d4:	f7ff fa42 	bl	800595c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80064d8:	e002      	b.n	80064e0 <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 80064da:	68f8      	ldr	r0, [r7, #12]
 80064dc:	f7ff fa2a 	bl	8005934 <HAL_UART_RxHalfCpltCallback>
}
 80064e0:	bf00      	nop
 80064e2:	3710      	adds	r7, #16
 80064e4:	46bd      	mov	sp, r7
 80064e6:	bd80      	pop	{r7, pc}

080064e8 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80064e8:	b580      	push	{r7, lr}
 80064ea:	b086      	sub	sp, #24
 80064ec:	af00      	add	r7, sp, #0
 80064ee:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064f4:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 80064f6:	697b      	ldr	r3, [r7, #20]
 80064f8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80064fa:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 80064fc:	697b      	ldr	r3, [r7, #20]
 80064fe:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006502:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8006504:	697b      	ldr	r3, [r7, #20]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	689b      	ldr	r3, [r3, #8]
 800650a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800650e:	2b80      	cmp	r3, #128	; 0x80
 8006510:	d109      	bne.n	8006526 <UART_DMAError+0x3e>
 8006512:	693b      	ldr	r3, [r7, #16]
 8006514:	2b21      	cmp	r3, #33	; 0x21
 8006516:	d106      	bne.n	8006526 <UART_DMAError+0x3e>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8006518:	697b      	ldr	r3, [r7, #20]
 800651a:	2200      	movs	r2, #0
 800651c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    UART_EndTxTransfer(huart);
 8006520:	6978      	ldr	r0, [r7, #20]
 8006522:	f7ff fe4d 	bl	80061c0 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8006526:	697b      	ldr	r3, [r7, #20]
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	689b      	ldr	r3, [r3, #8]
 800652c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006530:	2b40      	cmp	r3, #64	; 0x40
 8006532:	d109      	bne.n	8006548 <UART_DMAError+0x60>
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	2b22      	cmp	r3, #34	; 0x22
 8006538:	d106      	bne.n	8006548 <UART_DMAError+0x60>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800653a:	697b      	ldr	r3, [r7, #20]
 800653c:	2200      	movs	r2, #0
 800653e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    UART_EndRxTransfer(huart);
 8006542:	6978      	ldr	r0, [r7, #20]
 8006544:	f7ff fe62 	bl	800620c <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8006548:	697b      	ldr	r3, [r7, #20]
 800654a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800654e:	f043 0210 	orr.w	r2, r3, #16
 8006552:	697b      	ldr	r3, [r7, #20]
 8006554:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006558:	6978      	ldr	r0, [r7, #20]
 800655a:	f7ff f9f5 	bl	8005948 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800655e:	bf00      	nop
 8006560:	3718      	adds	r7, #24
 8006562:	46bd      	mov	sp, r7
 8006564:	bd80      	pop	{r7, pc}
	...

08006568 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8006568:	b580      	push	{r7, lr}
 800656a:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 800656c:	4904      	ldr	r1, [pc, #16]	; (8006580 <MX_FATFS_Init+0x18>)
 800656e:	4805      	ldr	r0, [pc, #20]	; (8006584 <MX_FATFS_Init+0x1c>)
 8006570:	f003 fd40 	bl	8009ff4 <FATFS_LinkDriver>
 8006574:	4603      	mov	r3, r0
 8006576:	461a      	mov	r2, r3
 8006578:	4b03      	ldr	r3, [pc, #12]	; (8006588 <MX_FATFS_Init+0x20>)
 800657a:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800657c:	bf00      	nop
 800657e:	bd80      	pop	{r7, pc}
 8006580:	20001420 	.word	0x20001420
 8006584:	20000028 	.word	0x20000028
 8006588:	2000141c 	.word	0x2000141c

0800658c <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800658c:	b480      	push	{r7}
 800658e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8006590:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8006592:	4618      	mov	r0, r3
 8006594:	46bd      	mov	sp, r7
 8006596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800659a:	4770      	bx	lr

0800659c <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 800659c:	b580      	push	{r7, lr}
 800659e:	b082      	sub	sp, #8
 80065a0:	af00      	add	r7, sp, #0
 80065a2:	4603      	mov	r3, r0
 80065a4:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    return USER_SPI_initialize(pdrv);
 80065a6:	79fb      	ldrb	r3, [r7, #7]
 80065a8:	4618      	mov	r0, r3
 80065aa:	f000 f9d3 	bl	8006954 <USER_SPI_initialize>
 80065ae:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 80065b0:	4618      	mov	r0, r3
 80065b2:	3708      	adds	r7, #8
 80065b4:	46bd      	mov	sp, r7
 80065b6:	bd80      	pop	{r7, pc}

080065b8 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 80065b8:	b580      	push	{r7, lr}
 80065ba:	b082      	sub	sp, #8
 80065bc:	af00      	add	r7, sp, #0
 80065be:	4603      	mov	r3, r0
 80065c0:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
	return USER_SPI_status(pdrv);
 80065c2:	79fb      	ldrb	r3, [r7, #7]
 80065c4:	4618      	mov	r0, r3
 80065c6:	f000 fab1 	bl	8006b2c <USER_SPI_status>
 80065ca:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 80065cc:	4618      	mov	r0, r3
 80065ce:	3708      	adds	r7, #8
 80065d0:	46bd      	mov	sp, r7
 80065d2:	bd80      	pop	{r7, pc}

080065d4 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 80065d4:	b580      	push	{r7, lr}
 80065d6:	b084      	sub	sp, #16
 80065d8:	af00      	add	r7, sp, #0
 80065da:	60b9      	str	r1, [r7, #8]
 80065dc:	607a      	str	r2, [r7, #4]
 80065de:	603b      	str	r3, [r7, #0]
 80065e0:	4603      	mov	r3, r0
 80065e2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
	return USER_SPI_read(pdrv, buff, sector, count);
 80065e4:	7bf8      	ldrb	r0, [r7, #15]
 80065e6:	683b      	ldr	r3, [r7, #0]
 80065e8:	687a      	ldr	r2, [r7, #4]
 80065ea:	68b9      	ldr	r1, [r7, #8]
 80065ec:	f000 fab4 	bl	8006b58 <USER_SPI_read>
 80065f0:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 80065f2:	4618      	mov	r0, r3
 80065f4:	3710      	adds	r7, #16
 80065f6:	46bd      	mov	sp, r7
 80065f8:	bd80      	pop	{r7, pc}

080065fa <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 80065fa:	b580      	push	{r7, lr}
 80065fc:	b084      	sub	sp, #16
 80065fe:	af00      	add	r7, sp, #0
 8006600:	60b9      	str	r1, [r7, #8]
 8006602:	607a      	str	r2, [r7, #4]
 8006604:	603b      	str	r3, [r7, #0]
 8006606:	4603      	mov	r3, r0
 8006608:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
	return USER_SPI_write(pdrv, buff, sector, count);
 800660a:	7bf8      	ldrb	r0, [r7, #15]
 800660c:	683b      	ldr	r3, [r7, #0]
 800660e:	687a      	ldr	r2, [r7, #4]
 8006610:	68b9      	ldr	r1, [r7, #8]
 8006612:	f000 fb07 	bl	8006c24 <USER_SPI_write>
 8006616:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 8006618:	4618      	mov	r0, r3
 800661a:	3710      	adds	r7, #16
 800661c:	46bd      	mov	sp, r7
 800661e:	bd80      	pop	{r7, pc}

08006620 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8006620:	b580      	push	{r7, lr}
 8006622:	b082      	sub	sp, #8
 8006624:	af00      	add	r7, sp, #0
 8006626:	4603      	mov	r3, r0
 8006628:	603a      	str	r2, [r7, #0]
 800662a:	71fb      	strb	r3, [r7, #7]
 800662c:	460b      	mov	r3, r1
 800662e:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
	return USER_SPI_ioctl(pdrv, cmd, buff);
 8006630:	79b9      	ldrb	r1, [r7, #6]
 8006632:	79fb      	ldrb	r3, [r7, #7]
 8006634:	683a      	ldr	r2, [r7, #0]
 8006636:	4618      	mov	r0, r3
 8006638:	f000 fb70 	bl	8006d1c <USER_SPI_ioctl>
 800663c:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 800663e:	4618      	mov	r0, r3
 8006640:	3708      	adds	r7, #8
 8006642:	46bd      	mov	sp, r7
 8006644:	bd80      	pop	{r7, pc}
	...

08006648 <SPI_Timer_On>:
BYTE CardType;			/* Card type flags */

uint32_t spiTimerTickStart;
uint32_t spiTimerTickDelay;

void SPI_Timer_On(uint32_t waitTicks) {
 8006648:	b580      	push	{r7, lr}
 800664a:	b082      	sub	sp, #8
 800664c:	af00      	add	r7, sp, #0
 800664e:	6078      	str	r0, [r7, #4]
    spiTimerTickStart = HAL_GetTick();
 8006650:	f7fb fd3c 	bl	80020cc <HAL_GetTick>
 8006654:	4603      	mov	r3, r0
 8006656:	4a04      	ldr	r2, [pc, #16]	; (8006668 <SPI_Timer_On+0x20>)
 8006658:	6013      	str	r3, [r2, #0]
    spiTimerTickDelay = waitTicks;
 800665a:	4a04      	ldr	r2, [pc, #16]	; (800666c <SPI_Timer_On+0x24>)
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	6013      	str	r3, [r2, #0]
}
 8006660:	bf00      	nop
 8006662:	3708      	adds	r7, #8
 8006664:	46bd      	mov	sp, r7
 8006666:	bd80      	pop	{r7, pc}
 8006668:	20001428 	.word	0x20001428
 800666c:	2000142c 	.word	0x2000142c

08006670 <SPI_Timer_Status>:

uint8_t SPI_Timer_Status() {
 8006670:	b580      	push	{r7, lr}
 8006672:	af00      	add	r7, sp, #0
    return ((HAL_GetTick() - spiTimerTickStart) < spiTimerTickDelay);
 8006674:	f7fb fd2a 	bl	80020cc <HAL_GetTick>
 8006678:	4602      	mov	r2, r0
 800667a:	4b06      	ldr	r3, [pc, #24]	; (8006694 <SPI_Timer_Status+0x24>)
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	1ad2      	subs	r2, r2, r3
 8006680:	4b05      	ldr	r3, [pc, #20]	; (8006698 <SPI_Timer_Status+0x28>)
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	429a      	cmp	r2, r3
 8006686:	bf34      	ite	cc
 8006688:	2301      	movcc	r3, #1
 800668a:	2300      	movcs	r3, #0
 800668c:	b2db      	uxtb	r3, r3
}
 800668e:	4618      	mov	r0, r3
 8006690:	bd80      	pop	{r7, pc}
 8006692:	bf00      	nop
 8006694:	20001428 	.word	0x20001428
 8006698:	2000142c 	.word	0x2000142c

0800669c <xchg_spi>:
/* Exchange a byte */
static
BYTE xchg_spi (
	BYTE dat	/* Data to send */
)
{
 800669c:	b580      	push	{r7, lr}
 800669e:	b086      	sub	sp, #24
 80066a0:	af02      	add	r7, sp, #8
 80066a2:	4603      	mov	r3, r0
 80066a4:	71fb      	strb	r3, [r7, #7]
	BYTE rxDat;
    HAL_SPI_TransmitReceive(&SD_SPI_HANDLE, &dat, &rxDat, 1, 50);
 80066a6:	f107 020f 	add.w	r2, r7, #15
 80066aa:	1df9      	adds	r1, r7, #7
 80066ac:	2332      	movs	r3, #50	; 0x32
 80066ae:	9300      	str	r3, [sp, #0]
 80066b0:	2301      	movs	r3, #1
 80066b2:	4804      	ldr	r0, [pc, #16]	; (80066c4 <xchg_spi+0x28>)
 80066b4:	f7fe f862 	bl	800477c <HAL_SPI_TransmitReceive>
    return rxDat;
 80066b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80066ba:	4618      	mov	r0, r3
 80066bc:	3710      	adds	r7, #16
 80066be:	46bd      	mov	sp, r7
 80066c0:	bd80      	pop	{r7, pc}
 80066c2:	bf00      	nop
 80066c4:	20001144 	.word	0x20001144

080066c8 <rcvr_spi_multi>:
static
void rcvr_spi_multi (
	BYTE *buff,		/* Pointer to data buffer */
	UINT btr		/* Number of bytes to receive (even number) */
)
{
 80066c8:	b590      	push	{r4, r7, lr}
 80066ca:	b085      	sub	sp, #20
 80066cc:	af00      	add	r7, sp, #0
 80066ce:	6078      	str	r0, [r7, #4]
 80066d0:	6039      	str	r1, [r7, #0]
	for(UINT i=0; i<btr; i++) {
 80066d2:	2300      	movs	r3, #0
 80066d4:	60fb      	str	r3, [r7, #12]
 80066d6:	e00a      	b.n	80066ee <rcvr_spi_multi+0x26>
		*(buff+i) = xchg_spi(0xFF);
 80066d8:	687a      	ldr	r2, [r7, #4]
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	18d4      	adds	r4, r2, r3
 80066de:	20ff      	movs	r0, #255	; 0xff
 80066e0:	f7ff ffdc 	bl	800669c <xchg_spi>
 80066e4:	4603      	mov	r3, r0
 80066e6:	7023      	strb	r3, [r4, #0]
	for(UINT i=0; i<btr; i++) {
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	3301      	adds	r3, #1
 80066ec:	60fb      	str	r3, [r7, #12]
 80066ee:	68fa      	ldr	r2, [r7, #12]
 80066f0:	683b      	ldr	r3, [r7, #0]
 80066f2:	429a      	cmp	r2, r3
 80066f4:	d3f0      	bcc.n	80066d8 <rcvr_spi_multi+0x10>
	}
}
 80066f6:	bf00      	nop
 80066f8:	bf00      	nop
 80066fa:	3714      	adds	r7, #20
 80066fc:	46bd      	mov	sp, r7
 80066fe:	bd90      	pop	{r4, r7, pc}

08006700 <xmit_spi_multi>:
static
void xmit_spi_multi (
	const BYTE *buff,	/* Pointer to the data */
	UINT btx			/* Number of bytes to send (even number) */
)
{
 8006700:	b580      	push	{r7, lr}
 8006702:	b082      	sub	sp, #8
 8006704:	af00      	add	r7, sp, #0
 8006706:	6078      	str	r0, [r7, #4]
 8006708:	6039      	str	r1, [r7, #0]
	HAL_SPI_Transmit(&SD_SPI_HANDLE, buff, btx, HAL_MAX_DELAY);
 800670a:	683b      	ldr	r3, [r7, #0]
 800670c:	b29a      	uxth	r2, r3
 800670e:	f04f 33ff 	mov.w	r3, #4294967295
 8006712:	6879      	ldr	r1, [r7, #4]
 8006714:	4803      	ldr	r0, [pc, #12]	; (8006724 <xmit_spi_multi+0x24>)
 8006716:	f7fd febc 	bl	8004492 <HAL_SPI_Transmit>
}
 800671a:	bf00      	nop
 800671c:	3708      	adds	r7, #8
 800671e:	46bd      	mov	sp, r7
 8006720:	bd80      	pop	{r7, pc}
 8006722:	bf00      	nop
 8006724:	20001144 	.word	0x20001144

08006728 <wait_ready>:

static
int wait_ready (	/* 1:Ready, 0:Timeout */
	UINT wt			/* Timeout [ms] */
)
{
 8006728:	b580      	push	{r7, lr}
 800672a:	b086      	sub	sp, #24
 800672c:	af00      	add	r7, sp, #0
 800672e:	6078      	str	r0, [r7, #4]
	//wait_ready needs its own timer, unfortunately, so it can't use the
	//spi_timer functions
	uint32_t waitSpiTimerTickStart;
	uint32_t waitSpiTimerTickDelay;

	waitSpiTimerTickStart = HAL_GetTick();
 8006730:	f7fb fccc 	bl	80020cc <HAL_GetTick>
 8006734:	6178      	str	r0, [r7, #20]
	waitSpiTimerTickDelay = (uint32_t)wt;
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	613b      	str	r3, [r7, #16]
	do {
		d = xchg_spi(0xFF);
 800673a:	20ff      	movs	r0, #255	; 0xff
 800673c:	f7ff ffae 	bl	800669c <xchg_spi>
 8006740:	4603      	mov	r3, r0
 8006742:	73fb      	strb	r3, [r7, #15]
		/* This loop takes a time. Insert rot_rdq() here for multitask envilonment. */
	} while (d != 0xFF && ((HAL_GetTick() - waitSpiTimerTickStart) < waitSpiTimerTickDelay));	/* Wait for card goes ready or timeout */
 8006744:	7bfb      	ldrb	r3, [r7, #15]
 8006746:	2bff      	cmp	r3, #255	; 0xff
 8006748:	d007      	beq.n	800675a <wait_ready+0x32>
 800674a:	f7fb fcbf 	bl	80020cc <HAL_GetTick>
 800674e:	4602      	mov	r2, r0
 8006750:	697b      	ldr	r3, [r7, #20]
 8006752:	1ad3      	subs	r3, r2, r3
 8006754:	693a      	ldr	r2, [r7, #16]
 8006756:	429a      	cmp	r2, r3
 8006758:	d8ef      	bhi.n	800673a <wait_ready+0x12>

	return (d == 0xFF) ? 1 : 0;
 800675a:	7bfb      	ldrb	r3, [r7, #15]
 800675c:	2bff      	cmp	r3, #255	; 0xff
 800675e:	bf0c      	ite	eq
 8006760:	2301      	moveq	r3, #1
 8006762:	2300      	movne	r3, #0
 8006764:	b2db      	uxtb	r3, r3
}
 8006766:	4618      	mov	r0, r3
 8006768:	3718      	adds	r7, #24
 800676a:	46bd      	mov	sp, r7
 800676c:	bd80      	pop	{r7, pc}
	...

08006770 <despiselect>:
/* Despiselect card and release SPI                                         */
/*-----------------------------------------------------------------------*/

static
void despiselect (void)
{
 8006770:	b580      	push	{r7, lr}
 8006772:	af00      	add	r7, sp, #0
	CS_HIGH();		/* Set CS# high */
 8006774:	2201      	movs	r2, #1
 8006776:	2102      	movs	r1, #2
 8006778:	4803      	ldr	r0, [pc, #12]	; (8006788 <despiselect+0x18>)
 800677a:	f7fc f8d3 	bl	8002924 <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO hi-z for multiple slave SPI) */
 800677e:	20ff      	movs	r0, #255	; 0xff
 8006780:	f7ff ff8c 	bl	800669c <xchg_spi>

}
 8006784:	bf00      	nop
 8006786:	bd80      	pop	{r7, pc}
 8006788:	48000400 	.word	0x48000400

0800678c <spiselect>:
/* Select card and wait for ready                                        */
/*-----------------------------------------------------------------------*/

static
int spiselect (void)	/* 1:OK, 0:Timeout */
{
 800678c:	b580      	push	{r7, lr}
 800678e:	af00      	add	r7, sp, #0
	CS_LOW();		/* Set CS# low */
 8006790:	2200      	movs	r2, #0
 8006792:	2102      	movs	r1, #2
 8006794:	4809      	ldr	r0, [pc, #36]	; (80067bc <spiselect+0x30>)
 8006796:	f7fc f8c5 	bl	8002924 <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO enabled) */
 800679a:	20ff      	movs	r0, #255	; 0xff
 800679c:	f7ff ff7e 	bl	800669c <xchg_spi>
	if (wait_ready(500)) return 1;	/* Wait for card ready */
 80067a0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80067a4:	f7ff ffc0 	bl	8006728 <wait_ready>
 80067a8:	4603      	mov	r3, r0
 80067aa:	2b00      	cmp	r3, #0
 80067ac:	d001      	beq.n	80067b2 <spiselect+0x26>
 80067ae:	2301      	movs	r3, #1
 80067b0:	e002      	b.n	80067b8 <spiselect+0x2c>

	despiselect();
 80067b2:	f7ff ffdd 	bl	8006770 <despiselect>
	return 0;	/* Timeout */
 80067b6:	2300      	movs	r3, #0
}
 80067b8:	4618      	mov	r0, r3
 80067ba:	bd80      	pop	{r7, pc}
 80067bc:	48000400 	.word	0x48000400

080067c0 <rcvr_datablock>:
static
int rcvr_datablock (	/* 1:OK, 0:Error */
	BYTE *buff,			/* Data buffer */
	UINT btr			/* Data block length (byte) */
)
{
 80067c0:	b580      	push	{r7, lr}
 80067c2:	b084      	sub	sp, #16
 80067c4:	af00      	add	r7, sp, #0
 80067c6:	6078      	str	r0, [r7, #4]
 80067c8:	6039      	str	r1, [r7, #0]
	BYTE token;


	SPI_Timer_On(200);
 80067ca:	20c8      	movs	r0, #200	; 0xc8
 80067cc:	f7ff ff3c 	bl	8006648 <SPI_Timer_On>
	do {							/* Wait for DataStart token in timeout of 200ms */
		token = xchg_spi(0xFF);
 80067d0:	20ff      	movs	r0, #255	; 0xff
 80067d2:	f7ff ff63 	bl	800669c <xchg_spi>
 80067d6:	4603      	mov	r3, r0
 80067d8:	73fb      	strb	r3, [r7, #15]
		/* This loop will take a time. Insert rot_rdq() here for multitask envilonment. */
	} while ((token == 0xFF) && SPI_Timer_Status());
 80067da:	7bfb      	ldrb	r3, [r7, #15]
 80067dc:	2bff      	cmp	r3, #255	; 0xff
 80067de:	d104      	bne.n	80067ea <rcvr_datablock+0x2a>
 80067e0:	f7ff ff46 	bl	8006670 <SPI_Timer_Status>
 80067e4:	4603      	mov	r3, r0
 80067e6:	2b00      	cmp	r3, #0
 80067e8:	d1f2      	bne.n	80067d0 <rcvr_datablock+0x10>
	if(token != 0xFE) return 0;		/* Function fails if invalid DataStart token or timeout */
 80067ea:	7bfb      	ldrb	r3, [r7, #15]
 80067ec:	2bfe      	cmp	r3, #254	; 0xfe
 80067ee:	d001      	beq.n	80067f4 <rcvr_datablock+0x34>
 80067f0:	2300      	movs	r3, #0
 80067f2:	e00a      	b.n	800680a <rcvr_datablock+0x4a>

	rcvr_spi_multi(buff, btr);		/* Store trailing data to the buffer */
 80067f4:	6839      	ldr	r1, [r7, #0]
 80067f6:	6878      	ldr	r0, [r7, #4]
 80067f8:	f7ff ff66 	bl	80066c8 <rcvr_spi_multi>
	xchg_spi(0xFF); xchg_spi(0xFF);			/* Discard CRC */
 80067fc:	20ff      	movs	r0, #255	; 0xff
 80067fe:	f7ff ff4d 	bl	800669c <xchg_spi>
 8006802:	20ff      	movs	r0, #255	; 0xff
 8006804:	f7ff ff4a 	bl	800669c <xchg_spi>

	return 1;						/* Function succeeded */
 8006808:	2301      	movs	r3, #1
}
 800680a:	4618      	mov	r0, r3
 800680c:	3710      	adds	r7, #16
 800680e:	46bd      	mov	sp, r7
 8006810:	bd80      	pop	{r7, pc}

08006812 <xmit_datablock>:
static
int xmit_datablock (	/* 1:OK, 0:Failed */
	const BYTE *buff,	/* Ponter to 512 byte data to be sent */
	BYTE token			/* Token */
)
{
 8006812:	b580      	push	{r7, lr}
 8006814:	b084      	sub	sp, #16
 8006816:	af00      	add	r7, sp, #0
 8006818:	6078      	str	r0, [r7, #4]
 800681a:	460b      	mov	r3, r1
 800681c:	70fb      	strb	r3, [r7, #3]
	BYTE resp;


	if (!wait_ready(500)) return 0;		/* Wait for card ready */
 800681e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8006822:	f7ff ff81 	bl	8006728 <wait_ready>
 8006826:	4603      	mov	r3, r0
 8006828:	2b00      	cmp	r3, #0
 800682a:	d101      	bne.n	8006830 <xmit_datablock+0x1e>
 800682c:	2300      	movs	r3, #0
 800682e:	e01e      	b.n	800686e <xmit_datablock+0x5c>

	xchg_spi(token);					/* Send token */
 8006830:	78fb      	ldrb	r3, [r7, #3]
 8006832:	4618      	mov	r0, r3
 8006834:	f7ff ff32 	bl	800669c <xchg_spi>
	if (token != 0xFD) {				/* Send data if token is other than StopTran */
 8006838:	78fb      	ldrb	r3, [r7, #3]
 800683a:	2bfd      	cmp	r3, #253	; 0xfd
 800683c:	d016      	beq.n	800686c <xmit_datablock+0x5a>
		xmit_spi_multi(buff, 512);		/* Data */
 800683e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8006842:	6878      	ldr	r0, [r7, #4]
 8006844:	f7ff ff5c 	bl	8006700 <xmit_spi_multi>
		xchg_spi(0xFF); xchg_spi(0xFF);	/* Dummy CRC */
 8006848:	20ff      	movs	r0, #255	; 0xff
 800684a:	f7ff ff27 	bl	800669c <xchg_spi>
 800684e:	20ff      	movs	r0, #255	; 0xff
 8006850:	f7ff ff24 	bl	800669c <xchg_spi>

		resp = xchg_spi(0xFF);				/* Receive data resp */
 8006854:	20ff      	movs	r0, #255	; 0xff
 8006856:	f7ff ff21 	bl	800669c <xchg_spi>
 800685a:	4603      	mov	r3, r0
 800685c:	73fb      	strb	r3, [r7, #15]
		if ((resp & 0x1F) != 0x05) return 0;	/* Function fails if the data packet was not accepted */
 800685e:	7bfb      	ldrb	r3, [r7, #15]
 8006860:	f003 031f 	and.w	r3, r3, #31
 8006864:	2b05      	cmp	r3, #5
 8006866:	d001      	beq.n	800686c <xmit_datablock+0x5a>
 8006868:	2300      	movs	r3, #0
 800686a:	e000      	b.n	800686e <xmit_datablock+0x5c>
	}
	return 1;
 800686c:	2301      	movs	r3, #1
}
 800686e:	4618      	mov	r0, r3
 8006870:	3710      	adds	r7, #16
 8006872:	46bd      	mov	sp, r7
 8006874:	bd80      	pop	{r7, pc}

08006876 <send_cmd>:
static
BYTE send_cmd (		/* Return value: R1 resp (bit7==1:Failed to send) */
	BYTE cmd,		/* Command index */
	DWORD arg		/* Argument */
)
{
 8006876:	b580      	push	{r7, lr}
 8006878:	b084      	sub	sp, #16
 800687a:	af00      	add	r7, sp, #0
 800687c:	4603      	mov	r3, r0
 800687e:	6039      	str	r1, [r7, #0]
 8006880:	71fb      	strb	r3, [r7, #7]
	BYTE n, res;


	if (cmd & 0x80) {	/* Send a CMD55 prior to ACMD<n> */
 8006882:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006886:	2b00      	cmp	r3, #0
 8006888:	da0e      	bge.n	80068a8 <send_cmd+0x32>
		cmd &= 0x7F;
 800688a:	79fb      	ldrb	r3, [r7, #7]
 800688c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006890:	71fb      	strb	r3, [r7, #7]
		res = send_cmd(CMD55, 0);
 8006892:	2100      	movs	r1, #0
 8006894:	2037      	movs	r0, #55	; 0x37
 8006896:	f7ff ffee 	bl	8006876 <send_cmd>
 800689a:	4603      	mov	r3, r0
 800689c:	73bb      	strb	r3, [r7, #14]
		if (res > 1) return res;
 800689e:	7bbb      	ldrb	r3, [r7, #14]
 80068a0:	2b01      	cmp	r3, #1
 80068a2:	d901      	bls.n	80068a8 <send_cmd+0x32>
 80068a4:	7bbb      	ldrb	r3, [r7, #14]
 80068a6:	e051      	b.n	800694c <send_cmd+0xd6>
	}

	/* Select the card and wait for ready except to stop multiple block read */
	if (cmd != CMD12) {
 80068a8:	79fb      	ldrb	r3, [r7, #7]
 80068aa:	2b0c      	cmp	r3, #12
 80068ac:	d008      	beq.n	80068c0 <send_cmd+0x4a>
		despiselect();
 80068ae:	f7ff ff5f 	bl	8006770 <despiselect>
		if (!spiselect()) return 0xFF;
 80068b2:	f7ff ff6b 	bl	800678c <spiselect>
 80068b6:	4603      	mov	r3, r0
 80068b8:	2b00      	cmp	r3, #0
 80068ba:	d101      	bne.n	80068c0 <send_cmd+0x4a>
 80068bc:	23ff      	movs	r3, #255	; 0xff
 80068be:	e045      	b.n	800694c <send_cmd+0xd6>
	}

	/* Send command packet */
	xchg_spi(0x40 | cmd);				/* Start + command index */
 80068c0:	79fb      	ldrb	r3, [r7, #7]
 80068c2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80068c6:	b2db      	uxtb	r3, r3
 80068c8:	4618      	mov	r0, r3
 80068ca:	f7ff fee7 	bl	800669c <xchg_spi>
	xchg_spi((BYTE)(arg >> 24));		/* Argument[31..24] */
 80068ce:	683b      	ldr	r3, [r7, #0]
 80068d0:	0e1b      	lsrs	r3, r3, #24
 80068d2:	b2db      	uxtb	r3, r3
 80068d4:	4618      	mov	r0, r3
 80068d6:	f7ff fee1 	bl	800669c <xchg_spi>
	xchg_spi((BYTE)(arg >> 16));		/* Argument[23..16] */
 80068da:	683b      	ldr	r3, [r7, #0]
 80068dc:	0c1b      	lsrs	r3, r3, #16
 80068de:	b2db      	uxtb	r3, r3
 80068e0:	4618      	mov	r0, r3
 80068e2:	f7ff fedb 	bl	800669c <xchg_spi>
	xchg_spi((BYTE)(arg >> 8));			/* Argument[15..8] */
 80068e6:	683b      	ldr	r3, [r7, #0]
 80068e8:	0a1b      	lsrs	r3, r3, #8
 80068ea:	b2db      	uxtb	r3, r3
 80068ec:	4618      	mov	r0, r3
 80068ee:	f7ff fed5 	bl	800669c <xchg_spi>
	xchg_spi((BYTE)arg);				/* Argument[7..0] */
 80068f2:	683b      	ldr	r3, [r7, #0]
 80068f4:	b2db      	uxtb	r3, r3
 80068f6:	4618      	mov	r0, r3
 80068f8:	f7ff fed0 	bl	800669c <xchg_spi>
	n = 0x01;							/* Dummy CRC + Stop */
 80068fc:	2301      	movs	r3, #1
 80068fe:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) */
 8006900:	79fb      	ldrb	r3, [r7, #7]
 8006902:	2b00      	cmp	r3, #0
 8006904:	d101      	bne.n	800690a <send_cmd+0x94>
 8006906:	2395      	movs	r3, #149	; 0x95
 8006908:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD8) n = 0x87;			/* Valid CRC for CMD8(0x1AA) */
 800690a:	79fb      	ldrb	r3, [r7, #7]
 800690c:	2b08      	cmp	r3, #8
 800690e:	d101      	bne.n	8006914 <send_cmd+0x9e>
 8006910:	2387      	movs	r3, #135	; 0x87
 8006912:	73fb      	strb	r3, [r7, #15]
	xchg_spi(n);
 8006914:	7bfb      	ldrb	r3, [r7, #15]
 8006916:	4618      	mov	r0, r3
 8006918:	f7ff fec0 	bl	800669c <xchg_spi>

	/* Receive command resp */
	if (cmd == CMD12) xchg_spi(0xFF);	/* Diacard following one byte when CMD12 */
 800691c:	79fb      	ldrb	r3, [r7, #7]
 800691e:	2b0c      	cmp	r3, #12
 8006920:	d102      	bne.n	8006928 <send_cmd+0xb2>
 8006922:	20ff      	movs	r0, #255	; 0xff
 8006924:	f7ff feba 	bl	800669c <xchg_spi>
	n = 10;								/* Wait for response (10 bytes max) */
 8006928:	230a      	movs	r3, #10
 800692a:	73fb      	strb	r3, [r7, #15]
	do {
		res = xchg_spi(0xFF);
 800692c:	20ff      	movs	r0, #255	; 0xff
 800692e:	f7ff feb5 	bl	800669c <xchg_spi>
 8006932:	4603      	mov	r3, r0
 8006934:	73bb      	strb	r3, [r7, #14]
	} while ((res & 0x80) && --n);
 8006936:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800693a:	2b00      	cmp	r3, #0
 800693c:	da05      	bge.n	800694a <send_cmd+0xd4>
 800693e:	7bfb      	ldrb	r3, [r7, #15]
 8006940:	3b01      	subs	r3, #1
 8006942:	73fb      	strb	r3, [r7, #15]
 8006944:	7bfb      	ldrb	r3, [r7, #15]
 8006946:	2b00      	cmp	r3, #0
 8006948:	d1f0      	bne.n	800692c <send_cmd+0xb6>

	return res;							/* Return received response */
 800694a:	7bbb      	ldrb	r3, [r7, #14]
}
 800694c:	4618      	mov	r0, r3
 800694e:	3710      	adds	r7, #16
 8006950:	46bd      	mov	sp, r7
 8006952:	bd80      	pop	{r7, pc}

08006954 <USER_SPI_initialize>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_initialize (
	BYTE drv		/* Physical drive number (0) */
)
{
 8006954:	b590      	push	{r4, r7, lr}
 8006956:	b085      	sub	sp, #20
 8006958:	af00      	add	r7, sp, #0
 800695a:	4603      	mov	r3, r0
 800695c:	71fb      	strb	r3, [r7, #7]
	BYTE n, cmd, ty, ocr[4];

	if (drv != 0) return STA_NOINIT;		/* Supports only drive 0 */
 800695e:	79fb      	ldrb	r3, [r7, #7]
 8006960:	2b00      	cmp	r3, #0
 8006962:	d001      	beq.n	8006968 <USER_SPI_initialize+0x14>
 8006964:	2301      	movs	r3, #1
 8006966:	e0d6      	b.n	8006b16 <USER_SPI_initialize+0x1c2>
	//assume SPI already init init_spi();	/* Initialize SPI */

	if (Stat & STA_NODISK) return Stat;	/* Is card existing in the soket? */
 8006968:	4b6d      	ldr	r3, [pc, #436]	; (8006b20 <USER_SPI_initialize+0x1cc>)
 800696a:	781b      	ldrb	r3, [r3, #0]
 800696c:	b2db      	uxtb	r3, r3
 800696e:	f003 0302 	and.w	r3, r3, #2
 8006972:	2b00      	cmp	r3, #0
 8006974:	d003      	beq.n	800697e <USER_SPI_initialize+0x2a>
 8006976:	4b6a      	ldr	r3, [pc, #424]	; (8006b20 <USER_SPI_initialize+0x1cc>)
 8006978:	781b      	ldrb	r3, [r3, #0]
 800697a:	b2db      	uxtb	r3, r3
 800697c:	e0cb      	b.n	8006b16 <USER_SPI_initialize+0x1c2>

	FCLK_SLOW();
 800697e:	4b69      	ldr	r3, [pc, #420]	; (8006b24 <USER_SPI_initialize+0x1d0>)
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8006988:	4b66      	ldr	r3, [pc, #408]	; (8006b24 <USER_SPI_initialize+0x1d0>)
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	f042 0230 	orr.w	r2, r2, #48	; 0x30
 8006990:	601a      	str	r2, [r3, #0]
	for (n = 10; n; n--) xchg_spi(0xFF);	/* Send 80 dummy clocks */
 8006992:	230a      	movs	r3, #10
 8006994:	73fb      	strb	r3, [r7, #15]
 8006996:	e005      	b.n	80069a4 <USER_SPI_initialize+0x50>
 8006998:	20ff      	movs	r0, #255	; 0xff
 800699a:	f7ff fe7f 	bl	800669c <xchg_spi>
 800699e:	7bfb      	ldrb	r3, [r7, #15]
 80069a0:	3b01      	subs	r3, #1
 80069a2:	73fb      	strb	r3, [r7, #15]
 80069a4:	7bfb      	ldrb	r3, [r7, #15]
 80069a6:	2b00      	cmp	r3, #0
 80069a8:	d1f6      	bne.n	8006998 <USER_SPI_initialize+0x44>

	ty = 0;
 80069aa:	2300      	movs	r3, #0
 80069ac:	737b      	strb	r3, [r7, #13]
	if (send_cmd(CMD0, 0) == 1) {			/* Put the card SPI/Idle state */
 80069ae:	2100      	movs	r1, #0
 80069b0:	2000      	movs	r0, #0
 80069b2:	f7ff ff60 	bl	8006876 <send_cmd>
 80069b6:	4603      	mov	r3, r0
 80069b8:	2b01      	cmp	r3, #1
 80069ba:	f040 808b 	bne.w	8006ad4 <USER_SPI_initialize+0x180>
		SPI_Timer_On(1000);					/* Initialization timeout = 1 sec */
 80069be:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80069c2:	f7ff fe41 	bl	8006648 <SPI_Timer_On>
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDv2? */
 80069c6:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80069ca:	2008      	movs	r0, #8
 80069cc:	f7ff ff53 	bl	8006876 <send_cmd>
 80069d0:	4603      	mov	r3, r0
 80069d2:	2b01      	cmp	r3, #1
 80069d4:	d151      	bne.n	8006a7a <USER_SPI_initialize+0x126>
			for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);	/* Get 32 bit return value of R7 resp */
 80069d6:	2300      	movs	r3, #0
 80069d8:	73fb      	strb	r3, [r7, #15]
 80069da:	e00d      	b.n	80069f8 <USER_SPI_initialize+0xa4>
 80069dc:	7bfc      	ldrb	r4, [r7, #15]
 80069de:	20ff      	movs	r0, #255	; 0xff
 80069e0:	f7ff fe5c 	bl	800669c <xchg_spi>
 80069e4:	4603      	mov	r3, r0
 80069e6:	461a      	mov	r2, r3
 80069e8:	f104 0310 	add.w	r3, r4, #16
 80069ec:	443b      	add	r3, r7
 80069ee:	f803 2c08 	strb.w	r2, [r3, #-8]
 80069f2:	7bfb      	ldrb	r3, [r7, #15]
 80069f4:	3301      	adds	r3, #1
 80069f6:	73fb      	strb	r3, [r7, #15]
 80069f8:	7bfb      	ldrb	r3, [r7, #15]
 80069fa:	2b03      	cmp	r3, #3
 80069fc:	d9ee      	bls.n	80069dc <USER_SPI_initialize+0x88>
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) {				/* Is the card supports vcc of 2.7-3.6V? */
 80069fe:	7abb      	ldrb	r3, [r7, #10]
 8006a00:	2b01      	cmp	r3, #1
 8006a02:	d167      	bne.n	8006ad4 <USER_SPI_initialize+0x180>
 8006a04:	7afb      	ldrb	r3, [r7, #11]
 8006a06:	2baa      	cmp	r3, #170	; 0xaa
 8006a08:	d164      	bne.n	8006ad4 <USER_SPI_initialize+0x180>
				while (SPI_Timer_Status() && send_cmd(ACMD41, 1UL << 30)) ;	/* Wait for end of initialization with ACMD41(HCS) */
 8006a0a:	bf00      	nop
 8006a0c:	f7ff fe30 	bl	8006670 <SPI_Timer_Status>
 8006a10:	4603      	mov	r3, r0
 8006a12:	2b00      	cmp	r3, #0
 8006a14:	d007      	beq.n	8006a26 <USER_SPI_initialize+0xd2>
 8006a16:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8006a1a:	20a9      	movs	r0, #169	; 0xa9
 8006a1c:	f7ff ff2b 	bl	8006876 <send_cmd>
 8006a20:	4603      	mov	r3, r0
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	d1f2      	bne.n	8006a0c <USER_SPI_initialize+0xb8>
				if (SPI_Timer_Status() && send_cmd(CMD58, 0) == 0) {		/* Check CCS bit in the OCR */
 8006a26:	f7ff fe23 	bl	8006670 <SPI_Timer_Status>
 8006a2a:	4603      	mov	r3, r0
 8006a2c:	2b00      	cmp	r3, #0
 8006a2e:	d051      	beq.n	8006ad4 <USER_SPI_initialize+0x180>
 8006a30:	2100      	movs	r1, #0
 8006a32:	203a      	movs	r0, #58	; 0x3a
 8006a34:	f7ff ff1f 	bl	8006876 <send_cmd>
 8006a38:	4603      	mov	r3, r0
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	d14a      	bne.n	8006ad4 <USER_SPI_initialize+0x180>
					for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);
 8006a3e:	2300      	movs	r3, #0
 8006a40:	73fb      	strb	r3, [r7, #15]
 8006a42:	e00d      	b.n	8006a60 <USER_SPI_initialize+0x10c>
 8006a44:	7bfc      	ldrb	r4, [r7, #15]
 8006a46:	20ff      	movs	r0, #255	; 0xff
 8006a48:	f7ff fe28 	bl	800669c <xchg_spi>
 8006a4c:	4603      	mov	r3, r0
 8006a4e:	461a      	mov	r2, r3
 8006a50:	f104 0310 	add.w	r3, r4, #16
 8006a54:	443b      	add	r3, r7
 8006a56:	f803 2c08 	strb.w	r2, [r3, #-8]
 8006a5a:	7bfb      	ldrb	r3, [r7, #15]
 8006a5c:	3301      	adds	r3, #1
 8006a5e:	73fb      	strb	r3, [r7, #15]
 8006a60:	7bfb      	ldrb	r3, [r7, #15]
 8006a62:	2b03      	cmp	r3, #3
 8006a64:	d9ee      	bls.n	8006a44 <USER_SPI_initialize+0xf0>
					ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* Card id SDv2 */
 8006a66:	7a3b      	ldrb	r3, [r7, #8]
 8006a68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a6c:	2b00      	cmp	r3, #0
 8006a6e:	d001      	beq.n	8006a74 <USER_SPI_initialize+0x120>
 8006a70:	230c      	movs	r3, #12
 8006a72:	e000      	b.n	8006a76 <USER_SPI_initialize+0x122>
 8006a74:	2304      	movs	r3, #4
 8006a76:	737b      	strb	r3, [r7, #13]
 8006a78:	e02c      	b.n	8006ad4 <USER_SPI_initialize+0x180>
				}
			}
		} else {	/* Not SDv2 card */
			if (send_cmd(ACMD41, 0) <= 1) 	{	/* SDv1 or MMC? */
 8006a7a:	2100      	movs	r1, #0
 8006a7c:	20a9      	movs	r0, #169	; 0xa9
 8006a7e:	f7ff fefa 	bl	8006876 <send_cmd>
 8006a82:	4603      	mov	r3, r0
 8006a84:	2b01      	cmp	r3, #1
 8006a86:	d804      	bhi.n	8006a92 <USER_SPI_initialize+0x13e>
				ty = CT_SD1; cmd = ACMD41;	/* SDv1 (ACMD41(0)) */
 8006a88:	2302      	movs	r3, #2
 8006a8a:	737b      	strb	r3, [r7, #13]
 8006a8c:	23a9      	movs	r3, #169	; 0xa9
 8006a8e:	73bb      	strb	r3, [r7, #14]
 8006a90:	e003      	b.n	8006a9a <USER_SPI_initialize+0x146>
			} else {
				ty = CT_MMC; cmd = CMD1;	/* MMCv3 (CMD1(0)) */
 8006a92:	2301      	movs	r3, #1
 8006a94:	737b      	strb	r3, [r7, #13]
 8006a96:	2301      	movs	r3, #1
 8006a98:	73bb      	strb	r3, [r7, #14]
			}
			while (SPI_Timer_Status() && send_cmd(cmd, 0)) ;		/* Wait for end of initialization */
 8006a9a:	bf00      	nop
 8006a9c:	f7ff fde8 	bl	8006670 <SPI_Timer_Status>
 8006aa0:	4603      	mov	r3, r0
 8006aa2:	2b00      	cmp	r3, #0
 8006aa4:	d007      	beq.n	8006ab6 <USER_SPI_initialize+0x162>
 8006aa6:	7bbb      	ldrb	r3, [r7, #14]
 8006aa8:	2100      	movs	r1, #0
 8006aaa:	4618      	mov	r0, r3
 8006aac:	f7ff fee3 	bl	8006876 <send_cmd>
 8006ab0:	4603      	mov	r3, r0
 8006ab2:	2b00      	cmp	r3, #0
 8006ab4:	d1f2      	bne.n	8006a9c <USER_SPI_initialize+0x148>
			if (!SPI_Timer_Status() || send_cmd(CMD16, 512) != 0)	/* Set block length: 512 */
 8006ab6:	f7ff fddb 	bl	8006670 <SPI_Timer_Status>
 8006aba:	4603      	mov	r3, r0
 8006abc:	2b00      	cmp	r3, #0
 8006abe:	d007      	beq.n	8006ad0 <USER_SPI_initialize+0x17c>
 8006ac0:	f44f 7100 	mov.w	r1, #512	; 0x200
 8006ac4:	2010      	movs	r0, #16
 8006ac6:	f7ff fed6 	bl	8006876 <send_cmd>
 8006aca:	4603      	mov	r3, r0
 8006acc:	2b00      	cmp	r3, #0
 8006ace:	d001      	beq.n	8006ad4 <USER_SPI_initialize+0x180>
				ty = 0;
 8006ad0:	2300      	movs	r3, #0
 8006ad2:	737b      	strb	r3, [r7, #13]
		}
	}
	CardType = ty;	/* Card type */
 8006ad4:	4a14      	ldr	r2, [pc, #80]	; (8006b28 <USER_SPI_initialize+0x1d4>)
 8006ad6:	7b7b      	ldrb	r3, [r7, #13]
 8006ad8:	7013      	strb	r3, [r2, #0]
	despiselect();
 8006ada:	f7ff fe49 	bl	8006770 <despiselect>

	if (ty) {			/* OK */
 8006ade:	7b7b      	ldrb	r3, [r7, #13]
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	d012      	beq.n	8006b0a <USER_SPI_initialize+0x1b6>
		FCLK_FAST();			/* Set fast clock */
 8006ae4:	4b0f      	ldr	r3, [pc, #60]	; (8006b24 <USER_SPI_initialize+0x1d0>)
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8006aee:	4b0d      	ldr	r3, [pc, #52]	; (8006b24 <USER_SPI_initialize+0x1d0>)
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	f042 0210 	orr.w	r2, r2, #16
 8006af6:	601a      	str	r2, [r3, #0]
		Stat &= ~STA_NOINIT;	/* Clear STA_NOINIT flag */
 8006af8:	4b09      	ldr	r3, [pc, #36]	; (8006b20 <USER_SPI_initialize+0x1cc>)
 8006afa:	781b      	ldrb	r3, [r3, #0]
 8006afc:	b2db      	uxtb	r3, r3
 8006afe:	f023 0301 	bic.w	r3, r3, #1
 8006b02:	b2da      	uxtb	r2, r3
 8006b04:	4b06      	ldr	r3, [pc, #24]	; (8006b20 <USER_SPI_initialize+0x1cc>)
 8006b06:	701a      	strb	r2, [r3, #0]
 8006b08:	e002      	b.n	8006b10 <USER_SPI_initialize+0x1bc>
	} else {			/* Failed */
		Stat = STA_NOINIT;
 8006b0a:	4b05      	ldr	r3, [pc, #20]	; (8006b20 <USER_SPI_initialize+0x1cc>)
 8006b0c:	2201      	movs	r2, #1
 8006b0e:	701a      	strb	r2, [r3, #0]
	}

	return Stat;
 8006b10:	4b03      	ldr	r3, [pc, #12]	; (8006b20 <USER_SPI_initialize+0x1cc>)
 8006b12:	781b      	ldrb	r3, [r3, #0]
 8006b14:	b2db      	uxtb	r3, r3
}
 8006b16:	4618      	mov	r0, r3
 8006b18:	3714      	adds	r7, #20
 8006b1a:	46bd      	mov	sp, r7
 8006b1c:	bd90      	pop	{r4, r7, pc}
 8006b1e:	bf00      	nop
 8006b20:	2000003c 	.word	0x2000003c
 8006b24:	20001144 	.word	0x20001144
 8006b28:	20001424 	.word	0x20001424

08006b2c <USER_SPI_status>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_status (
	BYTE drv		/* Physical drive number (0) */
)
{
 8006b2c:	b480      	push	{r7}
 8006b2e:	b083      	sub	sp, #12
 8006b30:	af00      	add	r7, sp, #0
 8006b32:	4603      	mov	r3, r0
 8006b34:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;		/* Supports only drive 0 */
 8006b36:	79fb      	ldrb	r3, [r7, #7]
 8006b38:	2b00      	cmp	r3, #0
 8006b3a:	d001      	beq.n	8006b40 <USER_SPI_status+0x14>
 8006b3c:	2301      	movs	r3, #1
 8006b3e:	e002      	b.n	8006b46 <USER_SPI_status+0x1a>

	return Stat;	/* Return disk status */
 8006b40:	4b04      	ldr	r3, [pc, #16]	; (8006b54 <USER_SPI_status+0x28>)
 8006b42:	781b      	ldrb	r3, [r3, #0]
 8006b44:	b2db      	uxtb	r3, r3
}
 8006b46:	4618      	mov	r0, r3
 8006b48:	370c      	adds	r7, #12
 8006b4a:	46bd      	mov	sp, r7
 8006b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b50:	4770      	bx	lr
 8006b52:	bf00      	nop
 8006b54:	2000003c 	.word	0x2000003c

08006b58 <USER_SPI_read>:
	BYTE drv,		/* Physical drive number (0) */
	BYTE *buff,		/* Pointer to the data buffer to store read data */
	DWORD sector,	/* Start sector number (LBA) */
	UINT count		/* Number of sectors to read (1..128) */
)
{
 8006b58:	b580      	push	{r7, lr}
 8006b5a:	b084      	sub	sp, #16
 8006b5c:	af00      	add	r7, sp, #0
 8006b5e:	60b9      	str	r1, [r7, #8]
 8006b60:	607a      	str	r2, [r7, #4]
 8006b62:	603b      	str	r3, [r7, #0]
 8006b64:	4603      	mov	r3, r0
 8006b66:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 8006b68:	7bfb      	ldrb	r3, [r7, #15]
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	d102      	bne.n	8006b74 <USER_SPI_read+0x1c>
 8006b6e:	683b      	ldr	r3, [r7, #0]
 8006b70:	2b00      	cmp	r3, #0
 8006b72:	d101      	bne.n	8006b78 <USER_SPI_read+0x20>
 8006b74:	2304      	movs	r3, #4
 8006b76:	e04d      	b.n	8006c14 <USER_SPI_read+0xbc>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 8006b78:	4b28      	ldr	r3, [pc, #160]	; (8006c1c <USER_SPI_read+0xc4>)
 8006b7a:	781b      	ldrb	r3, [r3, #0]
 8006b7c:	b2db      	uxtb	r3, r3
 8006b7e:	f003 0301 	and.w	r3, r3, #1
 8006b82:	2b00      	cmp	r3, #0
 8006b84:	d001      	beq.n	8006b8a <USER_SPI_read+0x32>
 8006b86:	2303      	movs	r3, #3
 8006b88:	e044      	b.n	8006c14 <USER_SPI_read+0xbc>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ot BA conversion (byte addressing cards) */
 8006b8a:	4b25      	ldr	r3, [pc, #148]	; (8006c20 <USER_SPI_read+0xc8>)
 8006b8c:	781b      	ldrb	r3, [r3, #0]
 8006b8e:	f003 0308 	and.w	r3, r3, #8
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	d102      	bne.n	8006b9c <USER_SPI_read+0x44>
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	025b      	lsls	r3, r3, #9
 8006b9a:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector read */
 8006b9c:	683b      	ldr	r3, [r7, #0]
 8006b9e:	2b01      	cmp	r3, #1
 8006ba0:	d111      	bne.n	8006bc6 <USER_SPI_read+0x6e>
		if ((send_cmd(CMD17, sector) == 0)	/* READ_SINGLE_BLOCK */
 8006ba2:	6879      	ldr	r1, [r7, #4]
 8006ba4:	2011      	movs	r0, #17
 8006ba6:	f7ff fe66 	bl	8006876 <send_cmd>
 8006baa:	4603      	mov	r3, r0
 8006bac:	2b00      	cmp	r3, #0
 8006bae:	d129      	bne.n	8006c04 <USER_SPI_read+0xac>
			&& rcvr_datablock(buff, 512)) {
 8006bb0:	f44f 7100 	mov.w	r1, #512	; 0x200
 8006bb4:	68b8      	ldr	r0, [r7, #8]
 8006bb6:	f7ff fe03 	bl	80067c0 <rcvr_datablock>
 8006bba:	4603      	mov	r3, r0
 8006bbc:	2b00      	cmp	r3, #0
 8006bbe:	d021      	beq.n	8006c04 <USER_SPI_read+0xac>
			count = 0;
 8006bc0:	2300      	movs	r3, #0
 8006bc2:	603b      	str	r3, [r7, #0]
 8006bc4:	e01e      	b.n	8006c04 <USER_SPI_read+0xac>
		}
	}
	else {				/* Multiple sector read */
		if (send_cmd(CMD18, sector) == 0) {	/* READ_MULTIPLE_BLOCK */
 8006bc6:	6879      	ldr	r1, [r7, #4]
 8006bc8:	2012      	movs	r0, #18
 8006bca:	f7ff fe54 	bl	8006876 <send_cmd>
 8006bce:	4603      	mov	r3, r0
 8006bd0:	2b00      	cmp	r3, #0
 8006bd2:	d117      	bne.n	8006c04 <USER_SPI_read+0xac>
			do {
				if (!rcvr_datablock(buff, 512)) break;
 8006bd4:	f44f 7100 	mov.w	r1, #512	; 0x200
 8006bd8:	68b8      	ldr	r0, [r7, #8]
 8006bda:	f7ff fdf1 	bl	80067c0 <rcvr_datablock>
 8006bde:	4603      	mov	r3, r0
 8006be0:	2b00      	cmp	r3, #0
 8006be2:	d00a      	beq.n	8006bfa <USER_SPI_read+0xa2>
				buff += 512;
 8006be4:	68bb      	ldr	r3, [r7, #8]
 8006be6:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8006bea:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8006bec:	683b      	ldr	r3, [r7, #0]
 8006bee:	3b01      	subs	r3, #1
 8006bf0:	603b      	str	r3, [r7, #0]
 8006bf2:	683b      	ldr	r3, [r7, #0]
 8006bf4:	2b00      	cmp	r3, #0
 8006bf6:	d1ed      	bne.n	8006bd4 <USER_SPI_read+0x7c>
 8006bf8:	e000      	b.n	8006bfc <USER_SPI_read+0xa4>
				if (!rcvr_datablock(buff, 512)) break;
 8006bfa:	bf00      	nop
			send_cmd(CMD12, 0);				/* STOP_TRANSMISSION */
 8006bfc:	2100      	movs	r1, #0
 8006bfe:	200c      	movs	r0, #12
 8006c00:	f7ff fe39 	bl	8006876 <send_cmd>
		}
	}
	despiselect();
 8006c04:	f7ff fdb4 	bl	8006770 <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 8006c08:	683b      	ldr	r3, [r7, #0]
 8006c0a:	2b00      	cmp	r3, #0
 8006c0c:	bf14      	ite	ne
 8006c0e:	2301      	movne	r3, #1
 8006c10:	2300      	moveq	r3, #0
 8006c12:	b2db      	uxtb	r3, r3
}
 8006c14:	4618      	mov	r0, r3
 8006c16:	3710      	adds	r7, #16
 8006c18:	46bd      	mov	sp, r7
 8006c1a:	bd80      	pop	{r7, pc}
 8006c1c:	2000003c 	.word	0x2000003c
 8006c20:	20001424 	.word	0x20001424

08006c24 <USER_SPI_write>:
	BYTE drv,			/* Physical drive number (0) */
	const BYTE *buff,	/* Ponter to the data to write */
	DWORD sector,		/* Start sector number (LBA) */
	UINT count			/* Number of sectors to write (1..128) */
)
{
 8006c24:	b580      	push	{r7, lr}
 8006c26:	b084      	sub	sp, #16
 8006c28:	af00      	add	r7, sp, #0
 8006c2a:	60b9      	str	r1, [r7, #8]
 8006c2c:	607a      	str	r2, [r7, #4]
 8006c2e:	603b      	str	r3, [r7, #0]
 8006c30:	4603      	mov	r3, r0
 8006c32:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 8006c34:	7bfb      	ldrb	r3, [r7, #15]
 8006c36:	2b00      	cmp	r3, #0
 8006c38:	d102      	bne.n	8006c40 <USER_SPI_write+0x1c>
 8006c3a:	683b      	ldr	r3, [r7, #0]
 8006c3c:	2b00      	cmp	r3, #0
 8006c3e:	d101      	bne.n	8006c44 <USER_SPI_write+0x20>
 8006c40:	2304      	movs	r3, #4
 8006c42:	e063      	b.n	8006d0c <USER_SPI_write+0xe8>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check drive status */
 8006c44:	4b33      	ldr	r3, [pc, #204]	; (8006d14 <USER_SPI_write+0xf0>)
 8006c46:	781b      	ldrb	r3, [r3, #0]
 8006c48:	b2db      	uxtb	r3, r3
 8006c4a:	f003 0301 	and.w	r3, r3, #1
 8006c4e:	2b00      	cmp	r3, #0
 8006c50:	d001      	beq.n	8006c56 <USER_SPI_write+0x32>
 8006c52:	2303      	movs	r3, #3
 8006c54:	e05a      	b.n	8006d0c <USER_SPI_write+0xe8>
	if (Stat & STA_PROTECT) return RES_WRPRT;	/* Check write protect */
 8006c56:	4b2f      	ldr	r3, [pc, #188]	; (8006d14 <USER_SPI_write+0xf0>)
 8006c58:	781b      	ldrb	r3, [r3, #0]
 8006c5a:	b2db      	uxtb	r3, r3
 8006c5c:	f003 0304 	and.w	r3, r3, #4
 8006c60:	2b00      	cmp	r3, #0
 8006c62:	d001      	beq.n	8006c68 <USER_SPI_write+0x44>
 8006c64:	2302      	movs	r3, #2
 8006c66:	e051      	b.n	8006d0c <USER_SPI_write+0xe8>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ==> BA conversion (byte addressing cards) */
 8006c68:	4b2b      	ldr	r3, [pc, #172]	; (8006d18 <USER_SPI_write+0xf4>)
 8006c6a:	781b      	ldrb	r3, [r3, #0]
 8006c6c:	f003 0308 	and.w	r3, r3, #8
 8006c70:	2b00      	cmp	r3, #0
 8006c72:	d102      	bne.n	8006c7a <USER_SPI_write+0x56>
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	025b      	lsls	r3, r3, #9
 8006c78:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector write */
 8006c7a:	683b      	ldr	r3, [r7, #0]
 8006c7c:	2b01      	cmp	r3, #1
 8006c7e:	d110      	bne.n	8006ca2 <USER_SPI_write+0x7e>
		if ((send_cmd(CMD24, sector) == 0)	/* WRITE_BLOCK */
 8006c80:	6879      	ldr	r1, [r7, #4]
 8006c82:	2018      	movs	r0, #24
 8006c84:	f7ff fdf7 	bl	8006876 <send_cmd>
 8006c88:	4603      	mov	r3, r0
 8006c8a:	2b00      	cmp	r3, #0
 8006c8c:	d136      	bne.n	8006cfc <USER_SPI_write+0xd8>
			&& xmit_datablock(buff, 0xFE)) {
 8006c8e:	21fe      	movs	r1, #254	; 0xfe
 8006c90:	68b8      	ldr	r0, [r7, #8]
 8006c92:	f7ff fdbe 	bl	8006812 <xmit_datablock>
 8006c96:	4603      	mov	r3, r0
 8006c98:	2b00      	cmp	r3, #0
 8006c9a:	d02f      	beq.n	8006cfc <USER_SPI_write+0xd8>
			count = 0;
 8006c9c:	2300      	movs	r3, #0
 8006c9e:	603b      	str	r3, [r7, #0]
 8006ca0:	e02c      	b.n	8006cfc <USER_SPI_write+0xd8>
		}
	}
	else {				/* Multiple sector write */
		if (CardType & CT_SDC) send_cmd(ACMD23, count);	/* Predefine number of sectors */
 8006ca2:	4b1d      	ldr	r3, [pc, #116]	; (8006d18 <USER_SPI_write+0xf4>)
 8006ca4:	781b      	ldrb	r3, [r3, #0]
 8006ca6:	f003 0306 	and.w	r3, r3, #6
 8006caa:	2b00      	cmp	r3, #0
 8006cac:	d003      	beq.n	8006cb6 <USER_SPI_write+0x92>
 8006cae:	6839      	ldr	r1, [r7, #0]
 8006cb0:	2097      	movs	r0, #151	; 0x97
 8006cb2:	f7ff fde0 	bl	8006876 <send_cmd>
		if (send_cmd(CMD25, sector) == 0) {	/* WRITE_MULTIPLE_BLOCK */
 8006cb6:	6879      	ldr	r1, [r7, #4]
 8006cb8:	2019      	movs	r0, #25
 8006cba:	f7ff fddc 	bl	8006876 <send_cmd>
 8006cbe:	4603      	mov	r3, r0
 8006cc0:	2b00      	cmp	r3, #0
 8006cc2:	d11b      	bne.n	8006cfc <USER_SPI_write+0xd8>
			do {
				if (!xmit_datablock(buff, 0xFC)) break;
 8006cc4:	21fc      	movs	r1, #252	; 0xfc
 8006cc6:	68b8      	ldr	r0, [r7, #8]
 8006cc8:	f7ff fda3 	bl	8006812 <xmit_datablock>
 8006ccc:	4603      	mov	r3, r0
 8006cce:	2b00      	cmp	r3, #0
 8006cd0:	d00a      	beq.n	8006ce8 <USER_SPI_write+0xc4>
				buff += 512;
 8006cd2:	68bb      	ldr	r3, [r7, #8]
 8006cd4:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8006cd8:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8006cda:	683b      	ldr	r3, [r7, #0]
 8006cdc:	3b01      	subs	r3, #1
 8006cde:	603b      	str	r3, [r7, #0]
 8006ce0:	683b      	ldr	r3, [r7, #0]
 8006ce2:	2b00      	cmp	r3, #0
 8006ce4:	d1ee      	bne.n	8006cc4 <USER_SPI_write+0xa0>
 8006ce6:	e000      	b.n	8006cea <USER_SPI_write+0xc6>
				if (!xmit_datablock(buff, 0xFC)) break;
 8006ce8:	bf00      	nop
			if (!xmit_datablock(0, 0xFD)) count = 1;	/* STOP_TRAN token */
 8006cea:	21fd      	movs	r1, #253	; 0xfd
 8006cec:	2000      	movs	r0, #0
 8006cee:	f7ff fd90 	bl	8006812 <xmit_datablock>
 8006cf2:	4603      	mov	r3, r0
 8006cf4:	2b00      	cmp	r3, #0
 8006cf6:	d101      	bne.n	8006cfc <USER_SPI_write+0xd8>
 8006cf8:	2301      	movs	r3, #1
 8006cfa:	603b      	str	r3, [r7, #0]
		}
	}
	despiselect();
 8006cfc:	f7ff fd38 	bl	8006770 <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 8006d00:	683b      	ldr	r3, [r7, #0]
 8006d02:	2b00      	cmp	r3, #0
 8006d04:	bf14      	ite	ne
 8006d06:	2301      	movne	r3, #1
 8006d08:	2300      	moveq	r3, #0
 8006d0a:	b2db      	uxtb	r3, r3
}
 8006d0c:	4618      	mov	r0, r3
 8006d0e:	3710      	adds	r7, #16
 8006d10:	46bd      	mov	sp, r7
 8006d12:	bd80      	pop	{r7, pc}
 8006d14:	2000003c 	.word	0x2000003c
 8006d18:	20001424 	.word	0x20001424

08006d1c <USER_SPI_ioctl>:
inline DRESULT USER_SPI_ioctl (
	BYTE drv,		/* Physical drive number (0) */
	BYTE cmd,		/* Control command code */
	void *buff		/* Pointer to the conrtol data */
)
{
 8006d1c:	b580      	push	{r7, lr}
 8006d1e:	b08c      	sub	sp, #48	; 0x30
 8006d20:	af00      	add	r7, sp, #0
 8006d22:	4603      	mov	r3, r0
 8006d24:	603a      	str	r2, [r7, #0]
 8006d26:	71fb      	strb	r3, [r7, #7]
 8006d28:	460b      	mov	r3, r1
 8006d2a:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	BYTE n, csd[16];
	DWORD *dp, st, ed, csize;


	if (drv) return RES_PARERR;					/* Check parameter */
 8006d2c:	79fb      	ldrb	r3, [r7, #7]
 8006d2e:	2b00      	cmp	r3, #0
 8006d30:	d001      	beq.n	8006d36 <USER_SPI_ioctl+0x1a>
 8006d32:	2304      	movs	r3, #4
 8006d34:	e15a      	b.n	8006fec <USER_SPI_ioctl+0x2d0>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 8006d36:	4baf      	ldr	r3, [pc, #700]	; (8006ff4 <USER_SPI_ioctl+0x2d8>)
 8006d38:	781b      	ldrb	r3, [r3, #0]
 8006d3a:	b2db      	uxtb	r3, r3
 8006d3c:	f003 0301 	and.w	r3, r3, #1
 8006d40:	2b00      	cmp	r3, #0
 8006d42:	d001      	beq.n	8006d48 <USER_SPI_ioctl+0x2c>
 8006d44:	2303      	movs	r3, #3
 8006d46:	e151      	b.n	8006fec <USER_SPI_ioctl+0x2d0>

	res = RES_ERROR;
 8006d48:	2301      	movs	r3, #1
 8006d4a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	switch (cmd) {
 8006d4e:	79bb      	ldrb	r3, [r7, #6]
 8006d50:	2b04      	cmp	r3, #4
 8006d52:	f200 8136 	bhi.w	8006fc2 <USER_SPI_ioctl+0x2a6>
 8006d56:	a201      	add	r2, pc, #4	; (adr r2, 8006d5c <USER_SPI_ioctl+0x40>)
 8006d58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d5c:	08006d71 	.word	0x08006d71
 8006d60:	08006d85 	.word	0x08006d85
 8006d64:	08006fc3 	.word	0x08006fc3
 8006d68:	08006e31 	.word	0x08006e31
 8006d6c:	08006f27 	.word	0x08006f27
	case CTRL_SYNC :		/* Wait for end of internal write process of the drive */
		if (spiselect()) res = RES_OK;
 8006d70:	f7ff fd0c 	bl	800678c <spiselect>
 8006d74:	4603      	mov	r3, r0
 8006d76:	2b00      	cmp	r3, #0
 8006d78:	f000 8127 	beq.w	8006fca <USER_SPI_ioctl+0x2ae>
 8006d7c:	2300      	movs	r3, #0
 8006d7e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		break;
 8006d82:	e122      	b.n	8006fca <USER_SPI_ioctl+0x2ae>

	case GET_SECTOR_COUNT :	/* Get drive capacity in unit of sector (DWORD) */
		if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {
 8006d84:	2100      	movs	r1, #0
 8006d86:	2009      	movs	r0, #9
 8006d88:	f7ff fd75 	bl	8006876 <send_cmd>
 8006d8c:	4603      	mov	r3, r0
 8006d8e:	2b00      	cmp	r3, #0
 8006d90:	f040 811d 	bne.w	8006fce <USER_SPI_ioctl+0x2b2>
 8006d94:	f107 030c 	add.w	r3, r7, #12
 8006d98:	2110      	movs	r1, #16
 8006d9a:	4618      	mov	r0, r3
 8006d9c:	f7ff fd10 	bl	80067c0 <rcvr_datablock>
 8006da0:	4603      	mov	r3, r0
 8006da2:	2b00      	cmp	r3, #0
 8006da4:	f000 8113 	beq.w	8006fce <USER_SPI_ioctl+0x2b2>
			if ((csd[0] >> 6) == 1) {	/* SDC ver 2.00 */
 8006da8:	7b3b      	ldrb	r3, [r7, #12]
 8006daa:	099b      	lsrs	r3, r3, #6
 8006dac:	b2db      	uxtb	r3, r3
 8006dae:	2b01      	cmp	r3, #1
 8006db0:	d111      	bne.n	8006dd6 <USER_SPI_ioctl+0xba>
				csize = csd[9] + ((WORD)csd[8] << 8) + ((DWORD)(csd[7] & 63) << 16) + 1;
 8006db2:	7d7b      	ldrb	r3, [r7, #21]
 8006db4:	461a      	mov	r2, r3
 8006db6:	7d3b      	ldrb	r3, [r7, #20]
 8006db8:	021b      	lsls	r3, r3, #8
 8006dba:	4413      	add	r3, r2
 8006dbc:	461a      	mov	r2, r3
 8006dbe:	7cfb      	ldrb	r3, [r7, #19]
 8006dc0:	041b      	lsls	r3, r3, #16
 8006dc2:	f403 137c 	and.w	r3, r3, #4128768	; 0x3f0000
 8006dc6:	4413      	add	r3, r2
 8006dc8:	3301      	adds	r3, #1
 8006dca:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << 10;
 8006dcc:	69fb      	ldr	r3, [r7, #28]
 8006dce:	029a      	lsls	r2, r3, #10
 8006dd0:	683b      	ldr	r3, [r7, #0]
 8006dd2:	601a      	str	r2, [r3, #0]
 8006dd4:	e028      	b.n	8006e28 <USER_SPI_ioctl+0x10c>
			} else {					/* SDC ver 1.XX or MMC ver 3 */
				n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 8006dd6:	7c7b      	ldrb	r3, [r7, #17]
 8006dd8:	f003 030f 	and.w	r3, r3, #15
 8006ddc:	b2da      	uxtb	r2, r3
 8006dde:	7dbb      	ldrb	r3, [r7, #22]
 8006de0:	09db      	lsrs	r3, r3, #7
 8006de2:	b2db      	uxtb	r3, r3
 8006de4:	4413      	add	r3, r2
 8006de6:	b2da      	uxtb	r2, r3
 8006de8:	7d7b      	ldrb	r3, [r7, #21]
 8006dea:	005b      	lsls	r3, r3, #1
 8006dec:	b2db      	uxtb	r3, r3
 8006dee:	f003 0306 	and.w	r3, r3, #6
 8006df2:	b2db      	uxtb	r3, r3
 8006df4:	4413      	add	r3, r2
 8006df6:	b2db      	uxtb	r3, r3
 8006df8:	3302      	adds	r3, #2
 8006dfa:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
				csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
 8006dfe:	7d3b      	ldrb	r3, [r7, #20]
 8006e00:	099b      	lsrs	r3, r3, #6
 8006e02:	b2db      	uxtb	r3, r3
 8006e04:	461a      	mov	r2, r3
 8006e06:	7cfb      	ldrb	r3, [r7, #19]
 8006e08:	009b      	lsls	r3, r3, #2
 8006e0a:	441a      	add	r2, r3
 8006e0c:	7cbb      	ldrb	r3, [r7, #18]
 8006e0e:	029b      	lsls	r3, r3, #10
 8006e10:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006e14:	4413      	add	r3, r2
 8006e16:	3301      	adds	r3, #1
 8006e18:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << (n - 9);
 8006e1a:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8006e1e:	3b09      	subs	r3, #9
 8006e20:	69fa      	ldr	r2, [r7, #28]
 8006e22:	409a      	lsls	r2, r3
 8006e24:	683b      	ldr	r3, [r7, #0]
 8006e26:	601a      	str	r2, [r3, #0]
			}
			res = RES_OK;
 8006e28:	2300      	movs	r3, #0
 8006e2a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		}
		break;
 8006e2e:	e0ce      	b.n	8006fce <USER_SPI_ioctl+0x2b2>

	case GET_BLOCK_SIZE :	/* Get erase block size in unit of sector (DWORD) */
		if (CardType & CT_SD2) {	/* SDC ver 2.00 */
 8006e30:	4b71      	ldr	r3, [pc, #452]	; (8006ff8 <USER_SPI_ioctl+0x2dc>)
 8006e32:	781b      	ldrb	r3, [r3, #0]
 8006e34:	f003 0304 	and.w	r3, r3, #4
 8006e38:	2b00      	cmp	r3, #0
 8006e3a:	d031      	beq.n	8006ea0 <USER_SPI_ioctl+0x184>
			if (send_cmd(ACMD13, 0) == 0) {	/* Read SD status */
 8006e3c:	2100      	movs	r1, #0
 8006e3e:	208d      	movs	r0, #141	; 0x8d
 8006e40:	f7ff fd19 	bl	8006876 <send_cmd>
 8006e44:	4603      	mov	r3, r0
 8006e46:	2b00      	cmp	r3, #0
 8006e48:	f040 80c3 	bne.w	8006fd2 <USER_SPI_ioctl+0x2b6>
				xchg_spi(0xFF);
 8006e4c:	20ff      	movs	r0, #255	; 0xff
 8006e4e:	f7ff fc25 	bl	800669c <xchg_spi>
				if (rcvr_datablock(csd, 16)) {				/* Read partial block */
 8006e52:	f107 030c 	add.w	r3, r7, #12
 8006e56:	2110      	movs	r1, #16
 8006e58:	4618      	mov	r0, r3
 8006e5a:	f7ff fcb1 	bl	80067c0 <rcvr_datablock>
 8006e5e:	4603      	mov	r3, r0
 8006e60:	2b00      	cmp	r3, #0
 8006e62:	f000 80b6 	beq.w	8006fd2 <USER_SPI_ioctl+0x2b6>
					for (n = 64 - 16; n; n--) xchg_spi(0xFF);	/* Purge trailing data */
 8006e66:	2330      	movs	r3, #48	; 0x30
 8006e68:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 8006e6c:	e007      	b.n	8006e7e <USER_SPI_ioctl+0x162>
 8006e6e:	20ff      	movs	r0, #255	; 0xff
 8006e70:	f7ff fc14 	bl	800669c <xchg_spi>
 8006e74:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8006e78:	3b01      	subs	r3, #1
 8006e7a:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 8006e7e:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8006e82:	2b00      	cmp	r3, #0
 8006e84:	d1f3      	bne.n	8006e6e <USER_SPI_ioctl+0x152>
					*(DWORD*)buff = 16UL << (csd[10] >> 4);
 8006e86:	7dbb      	ldrb	r3, [r7, #22]
 8006e88:	091b      	lsrs	r3, r3, #4
 8006e8a:	b2db      	uxtb	r3, r3
 8006e8c:	461a      	mov	r2, r3
 8006e8e:	2310      	movs	r3, #16
 8006e90:	fa03 f202 	lsl.w	r2, r3, r2
 8006e94:	683b      	ldr	r3, [r7, #0]
 8006e96:	601a      	str	r2, [r3, #0]
					res = RES_OK;
 8006e98:	2300      	movs	r3, #0
 8006e9a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
				}
				res = RES_OK;
			}
		}
		break;
 8006e9e:	e098      	b.n	8006fd2 <USER_SPI_ioctl+0x2b6>
			if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {	/* Read CSD */
 8006ea0:	2100      	movs	r1, #0
 8006ea2:	2009      	movs	r0, #9
 8006ea4:	f7ff fce7 	bl	8006876 <send_cmd>
 8006ea8:	4603      	mov	r3, r0
 8006eaa:	2b00      	cmp	r3, #0
 8006eac:	f040 8091 	bne.w	8006fd2 <USER_SPI_ioctl+0x2b6>
 8006eb0:	f107 030c 	add.w	r3, r7, #12
 8006eb4:	2110      	movs	r1, #16
 8006eb6:	4618      	mov	r0, r3
 8006eb8:	f7ff fc82 	bl	80067c0 <rcvr_datablock>
 8006ebc:	4603      	mov	r3, r0
 8006ebe:	2b00      	cmp	r3, #0
 8006ec0:	f000 8087 	beq.w	8006fd2 <USER_SPI_ioctl+0x2b6>
				if (CardType & CT_SD1) {	/* SDC ver 1.XX */
 8006ec4:	4b4c      	ldr	r3, [pc, #304]	; (8006ff8 <USER_SPI_ioctl+0x2dc>)
 8006ec6:	781b      	ldrb	r3, [r3, #0]
 8006ec8:	f003 0302 	and.w	r3, r3, #2
 8006ecc:	2b00      	cmp	r3, #0
 8006ece:	d012      	beq.n	8006ef6 <USER_SPI_ioctl+0x1da>
					*(DWORD*)buff = (((csd[10] & 63) << 1) + ((WORD)(csd[11] & 128) >> 7) + 1) << ((csd[13] >> 6) - 1);
 8006ed0:	7dbb      	ldrb	r3, [r7, #22]
 8006ed2:	005b      	lsls	r3, r3, #1
 8006ed4:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 8006ed8:	7dfa      	ldrb	r2, [r7, #23]
 8006eda:	09d2      	lsrs	r2, r2, #7
 8006edc:	b2d2      	uxtb	r2, r2
 8006ede:	4413      	add	r3, r2
 8006ee0:	1c5a      	adds	r2, r3, #1
 8006ee2:	7e7b      	ldrb	r3, [r7, #25]
 8006ee4:	099b      	lsrs	r3, r3, #6
 8006ee6:	b2db      	uxtb	r3, r3
 8006ee8:	3b01      	subs	r3, #1
 8006eea:	fa02 f303 	lsl.w	r3, r2, r3
 8006eee:	461a      	mov	r2, r3
 8006ef0:	683b      	ldr	r3, [r7, #0]
 8006ef2:	601a      	str	r2, [r3, #0]
 8006ef4:	e013      	b.n	8006f1e <USER_SPI_ioctl+0x202>
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
 8006ef6:	7dbb      	ldrb	r3, [r7, #22]
 8006ef8:	109b      	asrs	r3, r3, #2
 8006efa:	b29b      	uxth	r3, r3
 8006efc:	f003 031f 	and.w	r3, r3, #31
 8006f00:	3301      	adds	r3, #1
 8006f02:	7dfa      	ldrb	r2, [r7, #23]
 8006f04:	00d2      	lsls	r2, r2, #3
 8006f06:	f002 0218 	and.w	r2, r2, #24
 8006f0a:	7df9      	ldrb	r1, [r7, #23]
 8006f0c:	0949      	lsrs	r1, r1, #5
 8006f0e:	b2c9      	uxtb	r1, r1
 8006f10:	440a      	add	r2, r1
 8006f12:	3201      	adds	r2, #1
 8006f14:	fb02 f303 	mul.w	r3, r2, r3
 8006f18:	461a      	mov	r2, r3
 8006f1a:	683b      	ldr	r3, [r7, #0]
 8006f1c:	601a      	str	r2, [r3, #0]
				res = RES_OK;
 8006f1e:	2300      	movs	r3, #0
 8006f20:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		break;
 8006f24:	e055      	b.n	8006fd2 <USER_SPI_ioctl+0x2b6>

	case CTRL_TRIM :	/* Erase a block of sectors (used when _USE_ERASE == 1) */
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 8006f26:	4b34      	ldr	r3, [pc, #208]	; (8006ff8 <USER_SPI_ioctl+0x2dc>)
 8006f28:	781b      	ldrb	r3, [r3, #0]
 8006f2a:	f003 0306 	and.w	r3, r3, #6
 8006f2e:	2b00      	cmp	r3, #0
 8006f30:	d051      	beq.n	8006fd6 <USER_SPI_ioctl+0x2ba>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 8006f32:	f107 020c 	add.w	r2, r7, #12
 8006f36:	79fb      	ldrb	r3, [r7, #7]
 8006f38:	210b      	movs	r1, #11
 8006f3a:	4618      	mov	r0, r3
 8006f3c:	f7ff feee 	bl	8006d1c <USER_SPI_ioctl>
 8006f40:	4603      	mov	r3, r0
 8006f42:	2b00      	cmp	r3, #0
 8006f44:	d149      	bne.n	8006fda <USER_SPI_ioctl+0x2be>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 8006f46:	7b3b      	ldrb	r3, [r7, #12]
 8006f48:	099b      	lsrs	r3, r3, #6
 8006f4a:	b2db      	uxtb	r3, r3
 8006f4c:	2b00      	cmp	r3, #0
 8006f4e:	d104      	bne.n	8006f5a <USER_SPI_ioctl+0x23e>
 8006f50:	7dbb      	ldrb	r3, [r7, #22]
 8006f52:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f56:	2b00      	cmp	r3, #0
 8006f58:	d041      	beq.n	8006fde <USER_SPI_ioctl+0x2c2>
		dp = buff; st = dp[0]; ed = dp[1];				/* Load sector block */
 8006f5a:	683b      	ldr	r3, [r7, #0]
 8006f5c:	623b      	str	r3, [r7, #32]
 8006f5e:	6a3b      	ldr	r3, [r7, #32]
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	62bb      	str	r3, [r7, #40]	; 0x28
 8006f64:	6a3b      	ldr	r3, [r7, #32]
 8006f66:	685b      	ldr	r3, [r3, #4]
 8006f68:	627b      	str	r3, [r7, #36]	; 0x24
		if (!(CardType & CT_BLOCK)) {
 8006f6a:	4b23      	ldr	r3, [pc, #140]	; (8006ff8 <USER_SPI_ioctl+0x2dc>)
 8006f6c:	781b      	ldrb	r3, [r3, #0]
 8006f6e:	f003 0308 	and.w	r3, r3, #8
 8006f72:	2b00      	cmp	r3, #0
 8006f74:	d105      	bne.n	8006f82 <USER_SPI_ioctl+0x266>
			st *= 512; ed *= 512;
 8006f76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f78:	025b      	lsls	r3, r3, #9
 8006f7a:	62bb      	str	r3, [r7, #40]	; 0x28
 8006f7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f7e:	025b      	lsls	r3, r3, #9
 8006f80:	627b      	str	r3, [r7, #36]	; 0x24
		}
		if (send_cmd(CMD32, st) == 0 && send_cmd(CMD33, ed) == 0 && send_cmd(CMD38, 0) == 0 && wait_ready(30000)) {	/* Erase sector block */
 8006f82:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006f84:	2020      	movs	r0, #32
 8006f86:	f7ff fc76 	bl	8006876 <send_cmd>
 8006f8a:	4603      	mov	r3, r0
 8006f8c:	2b00      	cmp	r3, #0
 8006f8e:	d128      	bne.n	8006fe2 <USER_SPI_ioctl+0x2c6>
 8006f90:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006f92:	2021      	movs	r0, #33	; 0x21
 8006f94:	f7ff fc6f 	bl	8006876 <send_cmd>
 8006f98:	4603      	mov	r3, r0
 8006f9a:	2b00      	cmp	r3, #0
 8006f9c:	d121      	bne.n	8006fe2 <USER_SPI_ioctl+0x2c6>
 8006f9e:	2100      	movs	r1, #0
 8006fa0:	2026      	movs	r0, #38	; 0x26
 8006fa2:	f7ff fc68 	bl	8006876 <send_cmd>
 8006fa6:	4603      	mov	r3, r0
 8006fa8:	2b00      	cmp	r3, #0
 8006faa:	d11a      	bne.n	8006fe2 <USER_SPI_ioctl+0x2c6>
 8006fac:	f247 5030 	movw	r0, #30000	; 0x7530
 8006fb0:	f7ff fbba 	bl	8006728 <wait_ready>
 8006fb4:	4603      	mov	r3, r0
 8006fb6:	2b00      	cmp	r3, #0
 8006fb8:	d013      	beq.n	8006fe2 <USER_SPI_ioctl+0x2c6>
			res = RES_OK;	/* FatFs does not check result of this command */
 8006fba:	2300      	movs	r3, #0
 8006fbc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		}
		break;
 8006fc0:	e00f      	b.n	8006fe2 <USER_SPI_ioctl+0x2c6>

	default:
		res = RES_PARERR;
 8006fc2:	2304      	movs	r3, #4
 8006fc4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8006fc8:	e00c      	b.n	8006fe4 <USER_SPI_ioctl+0x2c8>
		break;
 8006fca:	bf00      	nop
 8006fcc:	e00a      	b.n	8006fe4 <USER_SPI_ioctl+0x2c8>
		break;
 8006fce:	bf00      	nop
 8006fd0:	e008      	b.n	8006fe4 <USER_SPI_ioctl+0x2c8>
		break;
 8006fd2:	bf00      	nop
 8006fd4:	e006      	b.n	8006fe4 <USER_SPI_ioctl+0x2c8>
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 8006fd6:	bf00      	nop
 8006fd8:	e004      	b.n	8006fe4 <USER_SPI_ioctl+0x2c8>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 8006fda:	bf00      	nop
 8006fdc:	e002      	b.n	8006fe4 <USER_SPI_ioctl+0x2c8>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 8006fde:	bf00      	nop
 8006fe0:	e000      	b.n	8006fe4 <USER_SPI_ioctl+0x2c8>
		break;
 8006fe2:	bf00      	nop
	}

	despiselect();
 8006fe4:	f7ff fbc4 	bl	8006770 <despiselect>

	return res;
 8006fe8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8006fec:	4618      	mov	r0, r3
 8006fee:	3730      	adds	r7, #48	; 0x30
 8006ff0:	46bd      	mov	sp, r7
 8006ff2:	bd80      	pop	{r7, pc}
 8006ff4:	2000003c 	.word	0x2000003c
 8006ff8:	20001424 	.word	0x20001424

08006ffc <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive nmuber to identify the drive */
)
{
 8006ffc:	b580      	push	{r7, lr}
 8006ffe:	b084      	sub	sp, #16
 8007000:	af00      	add	r7, sp, #0
 8007002:	4603      	mov	r3, r0
 8007004:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;
  
  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8007006:	79fb      	ldrb	r3, [r7, #7]
 8007008:	4a08      	ldr	r2, [pc, #32]	; (800702c <disk_status+0x30>)
 800700a:	009b      	lsls	r3, r3, #2
 800700c:	4413      	add	r3, r2
 800700e:	685b      	ldr	r3, [r3, #4]
 8007010:	685b      	ldr	r3, [r3, #4]
 8007012:	79fa      	ldrb	r2, [r7, #7]
 8007014:	4905      	ldr	r1, [pc, #20]	; (800702c <disk_status+0x30>)
 8007016:	440a      	add	r2, r1
 8007018:	7a12      	ldrb	r2, [r2, #8]
 800701a:	4610      	mov	r0, r2
 800701c:	4798      	blx	r3
 800701e:	4603      	mov	r3, r0
 8007020:	73fb      	strb	r3, [r7, #15]
  return stat;
 8007022:	7bfb      	ldrb	r3, [r7, #15]
}
 8007024:	4618      	mov	r0, r3
 8007026:	3710      	adds	r7, #16
 8007028:	46bd      	mov	sp, r7
 800702a:	bd80      	pop	{r7, pc}
 800702c:	20001450 	.word	0x20001450

08007030 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8007030:	b580      	push	{r7, lr}
 8007032:	b084      	sub	sp, #16
 8007034:	af00      	add	r7, sp, #0
 8007036:	4603      	mov	r3, r0
 8007038:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800703a:	2300      	movs	r3, #0
 800703c:	73fb      	strb	r3, [r7, #15]
  
  if(disk.is_initialized[pdrv] == 0)
 800703e:	79fb      	ldrb	r3, [r7, #7]
 8007040:	4a0d      	ldr	r2, [pc, #52]	; (8007078 <disk_initialize+0x48>)
 8007042:	5cd3      	ldrb	r3, [r2, r3]
 8007044:	2b00      	cmp	r3, #0
 8007046:	d111      	bne.n	800706c <disk_initialize+0x3c>
  { 
    disk.is_initialized[pdrv] = 1;
 8007048:	79fb      	ldrb	r3, [r7, #7]
 800704a:	4a0b      	ldr	r2, [pc, #44]	; (8007078 <disk_initialize+0x48>)
 800704c:	2101      	movs	r1, #1
 800704e:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8007050:	79fb      	ldrb	r3, [r7, #7]
 8007052:	4a09      	ldr	r2, [pc, #36]	; (8007078 <disk_initialize+0x48>)
 8007054:	009b      	lsls	r3, r3, #2
 8007056:	4413      	add	r3, r2
 8007058:	685b      	ldr	r3, [r3, #4]
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	79fa      	ldrb	r2, [r7, #7]
 800705e:	4906      	ldr	r1, [pc, #24]	; (8007078 <disk_initialize+0x48>)
 8007060:	440a      	add	r2, r1
 8007062:	7a12      	ldrb	r2, [r2, #8]
 8007064:	4610      	mov	r0, r2
 8007066:	4798      	blx	r3
 8007068:	4603      	mov	r3, r0
 800706a:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 800706c:	7bfb      	ldrb	r3, [r7, #15]
}
 800706e:	4618      	mov	r0, r3
 8007070:	3710      	adds	r7, #16
 8007072:	46bd      	mov	sp, r7
 8007074:	bd80      	pop	{r7, pc}
 8007076:	bf00      	nop
 8007078:	20001450 	.word	0x20001450

0800707c <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800707c:	b590      	push	{r4, r7, lr}
 800707e:	b087      	sub	sp, #28
 8007080:	af00      	add	r7, sp, #0
 8007082:	60b9      	str	r1, [r7, #8]
 8007084:	607a      	str	r2, [r7, #4]
 8007086:	603b      	str	r3, [r7, #0]
 8007088:	4603      	mov	r3, r0
 800708a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;
 
  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800708c:	7bfb      	ldrb	r3, [r7, #15]
 800708e:	4a0a      	ldr	r2, [pc, #40]	; (80070b8 <disk_read+0x3c>)
 8007090:	009b      	lsls	r3, r3, #2
 8007092:	4413      	add	r3, r2
 8007094:	685b      	ldr	r3, [r3, #4]
 8007096:	689c      	ldr	r4, [r3, #8]
 8007098:	7bfb      	ldrb	r3, [r7, #15]
 800709a:	4a07      	ldr	r2, [pc, #28]	; (80070b8 <disk_read+0x3c>)
 800709c:	4413      	add	r3, r2
 800709e:	7a18      	ldrb	r0, [r3, #8]
 80070a0:	683b      	ldr	r3, [r7, #0]
 80070a2:	687a      	ldr	r2, [r7, #4]
 80070a4:	68b9      	ldr	r1, [r7, #8]
 80070a6:	47a0      	blx	r4
 80070a8:	4603      	mov	r3, r0
 80070aa:	75fb      	strb	r3, [r7, #23]
  return res;
 80070ac:	7dfb      	ldrb	r3, [r7, #23]
}
 80070ae:	4618      	mov	r0, r3
 80070b0:	371c      	adds	r7, #28
 80070b2:	46bd      	mov	sp, r7
 80070b4:	bd90      	pop	{r4, r7, pc}
 80070b6:	bf00      	nop
 80070b8:	20001450 	.word	0x20001450

080070bc <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 80070bc:	b590      	push	{r4, r7, lr}
 80070be:	b087      	sub	sp, #28
 80070c0:	af00      	add	r7, sp, #0
 80070c2:	60b9      	str	r1, [r7, #8]
 80070c4:	607a      	str	r2, [r7, #4]
 80070c6:	603b      	str	r3, [r7, #0]
 80070c8:	4603      	mov	r3, r0
 80070ca:	73fb      	strb	r3, [r7, #15]
  DRESULT res;
  
  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 80070cc:	7bfb      	ldrb	r3, [r7, #15]
 80070ce:	4a0a      	ldr	r2, [pc, #40]	; (80070f8 <disk_write+0x3c>)
 80070d0:	009b      	lsls	r3, r3, #2
 80070d2:	4413      	add	r3, r2
 80070d4:	685b      	ldr	r3, [r3, #4]
 80070d6:	68dc      	ldr	r4, [r3, #12]
 80070d8:	7bfb      	ldrb	r3, [r7, #15]
 80070da:	4a07      	ldr	r2, [pc, #28]	; (80070f8 <disk_write+0x3c>)
 80070dc:	4413      	add	r3, r2
 80070de:	7a18      	ldrb	r0, [r3, #8]
 80070e0:	683b      	ldr	r3, [r7, #0]
 80070e2:	687a      	ldr	r2, [r7, #4]
 80070e4:	68b9      	ldr	r1, [r7, #8]
 80070e6:	47a0      	blx	r4
 80070e8:	4603      	mov	r3, r0
 80070ea:	75fb      	strb	r3, [r7, #23]
  return res;
 80070ec:	7dfb      	ldrb	r3, [r7, #23]
}
 80070ee:	4618      	mov	r0, r3
 80070f0:	371c      	adds	r7, #28
 80070f2:	46bd      	mov	sp, r7
 80070f4:	bd90      	pop	{r4, r7, pc}
 80070f6:	bf00      	nop
 80070f8:	20001450 	.word	0x20001450

080070fc <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 80070fc:	b580      	push	{r7, lr}
 80070fe:	b084      	sub	sp, #16
 8007100:	af00      	add	r7, sp, #0
 8007102:	4603      	mov	r3, r0
 8007104:	603a      	str	r2, [r7, #0]
 8007106:	71fb      	strb	r3, [r7, #7]
 8007108:	460b      	mov	r3, r1
 800710a:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800710c:	79fb      	ldrb	r3, [r7, #7]
 800710e:	4a09      	ldr	r2, [pc, #36]	; (8007134 <disk_ioctl+0x38>)
 8007110:	009b      	lsls	r3, r3, #2
 8007112:	4413      	add	r3, r2
 8007114:	685b      	ldr	r3, [r3, #4]
 8007116:	691b      	ldr	r3, [r3, #16]
 8007118:	79fa      	ldrb	r2, [r7, #7]
 800711a:	4906      	ldr	r1, [pc, #24]	; (8007134 <disk_ioctl+0x38>)
 800711c:	440a      	add	r2, r1
 800711e:	7a10      	ldrb	r0, [r2, #8]
 8007120:	79b9      	ldrb	r1, [r7, #6]
 8007122:	683a      	ldr	r2, [r7, #0]
 8007124:	4798      	blx	r3
 8007126:	4603      	mov	r3, r0
 8007128:	73fb      	strb	r3, [r7, #15]
  return res;
 800712a:	7bfb      	ldrb	r3, [r7, #15]
}
 800712c:	4618      	mov	r0, r3
 800712e:	3710      	adds	r7, #16
 8007130:	46bd      	mov	sp, r7
 8007132:	bd80      	pop	{r7, pc}
 8007134:	20001450 	.word	0x20001450

08007138 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8007138:	b480      	push	{r7}
 800713a:	b087      	sub	sp, #28
 800713c:	af00      	add	r7, sp, #0
 800713e:	60f8      	str	r0, [r7, #12]
 8007140:	60b9      	str	r1, [r7, #8]
 8007142:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8007144:	68fb      	ldr	r3, [r7, #12]
 8007146:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8007148:	68bb      	ldr	r3, [r7, #8]
 800714a:	613b      	str	r3, [r7, #16]
		*(int*)d = *(int*)s;
		d += sizeof (int); s += sizeof (int);
		cnt -= sizeof (int);
	}
#endif
	while (cnt--)
 800714c:	e007      	b.n	800715e <mem_cpy+0x26>
		*d++ = *s++;
 800714e:	693a      	ldr	r2, [r7, #16]
 8007150:	1c53      	adds	r3, r2, #1
 8007152:	613b      	str	r3, [r7, #16]
 8007154:	697b      	ldr	r3, [r7, #20]
 8007156:	1c59      	adds	r1, r3, #1
 8007158:	6179      	str	r1, [r7, #20]
 800715a:	7812      	ldrb	r2, [r2, #0]
 800715c:	701a      	strb	r2, [r3, #0]
	while (cnt--)
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	1e5a      	subs	r2, r3, #1
 8007162:	607a      	str	r2, [r7, #4]
 8007164:	2b00      	cmp	r3, #0
 8007166:	d1f2      	bne.n	800714e <mem_cpy+0x16>
}
 8007168:	bf00      	nop
 800716a:	bf00      	nop
 800716c:	371c      	adds	r7, #28
 800716e:	46bd      	mov	sp, r7
 8007170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007174:	4770      	bx	lr

08007176 <mem_set>:

/* Fill memory */
static
void mem_set (void* dst, int val, UINT cnt) {
 8007176:	b480      	push	{r7}
 8007178:	b087      	sub	sp, #28
 800717a:	af00      	add	r7, sp, #0
 800717c:	60f8      	str	r0, [r7, #12]
 800717e:	60b9      	str	r1, [r7, #8]
 8007180:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8007182:	68fb      	ldr	r3, [r7, #12]
 8007184:	617b      	str	r3, [r7, #20]

	while (cnt--)
 8007186:	e005      	b.n	8007194 <mem_set+0x1e>
		*d++ = (BYTE)val;
 8007188:	697b      	ldr	r3, [r7, #20]
 800718a:	1c5a      	adds	r2, r3, #1
 800718c:	617a      	str	r2, [r7, #20]
 800718e:	68ba      	ldr	r2, [r7, #8]
 8007190:	b2d2      	uxtb	r2, r2
 8007192:	701a      	strb	r2, [r3, #0]
	while (cnt--)
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	1e5a      	subs	r2, r3, #1
 8007198:	607a      	str	r2, [r7, #4]
 800719a:	2b00      	cmp	r3, #0
 800719c:	d1f4      	bne.n	8007188 <mem_set+0x12>
}
 800719e:	bf00      	nop
 80071a0:	bf00      	nop
 80071a2:	371c      	adds	r7, #28
 80071a4:	46bd      	mov	sp, r7
 80071a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071aa:	4770      	bx	lr

080071ac <mem_cmp>:

/* Compare memory to memory */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {
 80071ac:	b480      	push	{r7}
 80071ae:	b089      	sub	sp, #36	; 0x24
 80071b0:	af00      	add	r7, sp, #0
 80071b2:	60f8      	str	r0, [r7, #12]
 80071b4:	60b9      	str	r1, [r7, #8]
 80071b6:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 80071b8:	68fb      	ldr	r3, [r7, #12]
 80071ba:	61fb      	str	r3, [r7, #28]
 80071bc:	68bb      	ldr	r3, [r7, #8]
 80071be:	61bb      	str	r3, [r7, #24]
	int r = 0;
 80071c0:	2300      	movs	r3, #0
 80071c2:	617b      	str	r3, [r7, #20]

	while (cnt-- && (r = *d++ - *s++) == 0) ;
 80071c4:	bf00      	nop
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	1e5a      	subs	r2, r3, #1
 80071ca:	607a      	str	r2, [r7, #4]
 80071cc:	2b00      	cmp	r3, #0
 80071ce:	d00d      	beq.n	80071ec <mem_cmp+0x40>
 80071d0:	69fb      	ldr	r3, [r7, #28]
 80071d2:	1c5a      	adds	r2, r3, #1
 80071d4:	61fa      	str	r2, [r7, #28]
 80071d6:	781b      	ldrb	r3, [r3, #0]
 80071d8:	4619      	mov	r1, r3
 80071da:	69bb      	ldr	r3, [r7, #24]
 80071dc:	1c5a      	adds	r2, r3, #1
 80071de:	61ba      	str	r2, [r7, #24]
 80071e0:	781b      	ldrb	r3, [r3, #0]
 80071e2:	1acb      	subs	r3, r1, r3
 80071e4:	617b      	str	r3, [r7, #20]
 80071e6:	697b      	ldr	r3, [r7, #20]
 80071e8:	2b00      	cmp	r3, #0
 80071ea:	d0ec      	beq.n	80071c6 <mem_cmp+0x1a>
	return r;
 80071ec:	697b      	ldr	r3, [r7, #20]
}
 80071ee:	4618      	mov	r0, r3
 80071f0:	3724      	adds	r7, #36	; 0x24
 80071f2:	46bd      	mov	sp, r7
 80071f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071f8:	4770      	bx	lr

080071fa <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {
 80071fa:	b480      	push	{r7}
 80071fc:	b083      	sub	sp, #12
 80071fe:	af00      	add	r7, sp, #0
 8007200:	6078      	str	r0, [r7, #4]
 8007202:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8007204:	e002      	b.n	800720c <chk_chr+0x12>
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	3301      	adds	r3, #1
 800720a:	607b      	str	r3, [r7, #4]
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	781b      	ldrb	r3, [r3, #0]
 8007210:	2b00      	cmp	r3, #0
 8007212:	d005      	beq.n	8007220 <chk_chr+0x26>
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	781b      	ldrb	r3, [r3, #0]
 8007218:	461a      	mov	r2, r3
 800721a:	683b      	ldr	r3, [r7, #0]
 800721c:	4293      	cmp	r3, r2
 800721e:	d1f2      	bne.n	8007206 <chk_chr+0xc>
	return *str;
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	781b      	ldrb	r3, [r3, #0]
}
 8007224:	4618      	mov	r0, r3
 8007226:	370c      	adds	r7, #12
 8007228:	46bd      	mov	sp, r7
 800722a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800722e:	4770      	bx	lr

08007230 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8007230:	b480      	push	{r7}
 8007232:	b085      	sub	sp, #20
 8007234:	af00      	add	r7, sp, #0
 8007236:	6078      	str	r0, [r7, #4]
 8007238:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800723a:	2300      	movs	r3, #0
 800723c:	60bb      	str	r3, [r7, #8]
 800723e:	68bb      	ldr	r3, [r7, #8]
 8007240:	60fb      	str	r3, [r7, #12]
 8007242:	e038      	b.n	80072b6 <chk_lock+0x86>
		if (Files[i].fs) {	/* Existing entry */
 8007244:	4930      	ldr	r1, [pc, #192]	; (8007308 <chk_lock+0xd8>)
 8007246:	68fa      	ldr	r2, [r7, #12]
 8007248:	4613      	mov	r3, r2
 800724a:	005b      	lsls	r3, r3, #1
 800724c:	4413      	add	r3, r2
 800724e:	009b      	lsls	r3, r3, #2
 8007250:	440b      	add	r3, r1
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	2b00      	cmp	r3, #0
 8007256:	d029      	beq.n	80072ac <chk_lock+0x7c>
			if (Files[i].fs == dp->fs &&	 	/* Check if the object matched with an open object */
 8007258:	492b      	ldr	r1, [pc, #172]	; (8007308 <chk_lock+0xd8>)
 800725a:	68fa      	ldr	r2, [r7, #12]
 800725c:	4613      	mov	r3, r2
 800725e:	005b      	lsls	r3, r3, #1
 8007260:	4413      	add	r3, r2
 8007262:	009b      	lsls	r3, r3, #2
 8007264:	440b      	add	r3, r1
 8007266:	681a      	ldr	r2, [r3, #0]
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800726e:	429a      	cmp	r2, r3
 8007270:	d11e      	bne.n	80072b0 <chk_lock+0x80>
				Files[i].clu == dp->sclust &&
 8007272:	4925      	ldr	r1, [pc, #148]	; (8007308 <chk_lock+0xd8>)
 8007274:	68fa      	ldr	r2, [r7, #12]
 8007276:	4613      	mov	r3, r2
 8007278:	005b      	lsls	r3, r3, #1
 800727a:	4413      	add	r3, r2
 800727c:	009b      	lsls	r3, r3, #2
 800727e:	440b      	add	r3, r1
 8007280:	3304      	adds	r3, #4
 8007282:	681a      	ldr	r2, [r3, #0]
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
			if (Files[i].fs == dp->fs &&	 	/* Check if the object matched with an open object */
 800728a:	429a      	cmp	r2, r3
 800728c:	d110      	bne.n	80072b0 <chk_lock+0x80>
				Files[i].idx == dp->index) break;
 800728e:	491e      	ldr	r1, [pc, #120]	; (8007308 <chk_lock+0xd8>)
 8007290:	68fa      	ldr	r2, [r7, #12]
 8007292:	4613      	mov	r3, r2
 8007294:	005b      	lsls	r3, r3, #1
 8007296:	4413      	add	r3, r2
 8007298:	009b      	lsls	r3, r3, #2
 800729a:	440b      	add	r3, r1
 800729c:	3308      	adds	r3, #8
 800729e:	881a      	ldrh	r2, [r3, #0]
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	f8b3 3206 	ldrh.w	r3, [r3, #518]	; 0x206
				Files[i].clu == dp->sclust &&
 80072a6:	429a      	cmp	r2, r3
 80072a8:	d102      	bne.n	80072b0 <chk_lock+0x80>
				Files[i].idx == dp->index) break;
 80072aa:	e007      	b.n	80072bc <chk_lock+0x8c>
		} else {			/* Blank entry */
			be = 1;
 80072ac:	2301      	movs	r3, #1
 80072ae:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 80072b0:	68fb      	ldr	r3, [r7, #12]
 80072b2:	3301      	adds	r3, #1
 80072b4:	60fb      	str	r3, [r7, #12]
 80072b6:	68fb      	ldr	r3, [r7, #12]
 80072b8:	2b01      	cmp	r3, #1
 80072ba:	d9c3      	bls.n	8007244 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK)	/* The object is not opened */
 80072bc:	68fb      	ldr	r3, [r7, #12]
 80072be:	2b02      	cmp	r3, #2
 80072c0:	d109      	bne.n	80072d6 <chk_lock+0xa6>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 80072c2:	68bb      	ldr	r3, [r7, #8]
 80072c4:	2b00      	cmp	r3, #0
 80072c6:	d102      	bne.n	80072ce <chk_lock+0x9e>
 80072c8:	683b      	ldr	r3, [r7, #0]
 80072ca:	2b02      	cmp	r3, #2
 80072cc:	d101      	bne.n	80072d2 <chk_lock+0xa2>
 80072ce:	2300      	movs	r3, #0
 80072d0:	e013      	b.n	80072fa <chk_lock+0xca>
 80072d2:	2312      	movs	r3, #18
 80072d4:	e011      	b.n	80072fa <chk_lock+0xca>

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 80072d6:	683b      	ldr	r3, [r7, #0]
 80072d8:	2b00      	cmp	r3, #0
 80072da:	d10b      	bne.n	80072f4 <chk_lock+0xc4>
 80072dc:	490a      	ldr	r1, [pc, #40]	; (8007308 <chk_lock+0xd8>)
 80072de:	68fa      	ldr	r2, [r7, #12]
 80072e0:	4613      	mov	r3, r2
 80072e2:	005b      	lsls	r3, r3, #1
 80072e4:	4413      	add	r3, r2
 80072e6:	009b      	lsls	r3, r3, #2
 80072e8:	440b      	add	r3, r1
 80072ea:	330a      	adds	r3, #10
 80072ec:	881b      	ldrh	r3, [r3, #0]
 80072ee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80072f2:	d101      	bne.n	80072f8 <chk_lock+0xc8>
 80072f4:	2310      	movs	r3, #16
 80072f6:	e000      	b.n	80072fa <chk_lock+0xca>
 80072f8:	2300      	movs	r3, #0
}
 80072fa:	4618      	mov	r0, r3
 80072fc:	3714      	adds	r7, #20
 80072fe:	46bd      	mov	sp, r7
 8007300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007304:	4770      	bx	lr
 8007306:	bf00      	nop
 8007308:	20001438 	.word	0x20001438

0800730c <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800730c:	b480      	push	{r7}
 800730e:	b083      	sub	sp, #12
 8007310:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8007312:	2300      	movs	r3, #0
 8007314:	607b      	str	r3, [r7, #4]
 8007316:	e002      	b.n	800731e <enq_lock+0x12>
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	3301      	adds	r3, #1
 800731c:	607b      	str	r3, [r7, #4]
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	2b01      	cmp	r3, #1
 8007322:	d809      	bhi.n	8007338 <enq_lock+0x2c>
 8007324:	490a      	ldr	r1, [pc, #40]	; (8007350 <enq_lock+0x44>)
 8007326:	687a      	ldr	r2, [r7, #4]
 8007328:	4613      	mov	r3, r2
 800732a:	005b      	lsls	r3, r3, #1
 800732c:	4413      	add	r3, r2
 800732e:	009b      	lsls	r3, r3, #2
 8007330:	440b      	add	r3, r1
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	2b00      	cmp	r3, #0
 8007336:	d1ef      	bne.n	8007318 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	2b02      	cmp	r3, #2
 800733c:	bf14      	ite	ne
 800733e:	2301      	movne	r3, #1
 8007340:	2300      	moveq	r3, #0
 8007342:	b2db      	uxtb	r3, r3
}
 8007344:	4618      	mov	r0, r3
 8007346:	370c      	adds	r7, #12
 8007348:	46bd      	mov	sp, r7
 800734a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800734e:	4770      	bx	lr
 8007350:	20001438 	.word	0x20001438

08007354 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8007354:	b480      	push	{r7}
 8007356:	b085      	sub	sp, #20
 8007358:	af00      	add	r7, sp, #0
 800735a:	6078      	str	r0, [r7, #4]
 800735c:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800735e:	2300      	movs	r3, #0
 8007360:	60fb      	str	r3, [r7, #12]
 8007362:	e02b      	b.n	80073bc <inc_lock+0x68>
		if (Files[i].fs == dp->fs &&
 8007364:	4956      	ldr	r1, [pc, #344]	; (80074c0 <inc_lock+0x16c>)
 8007366:	68fa      	ldr	r2, [r7, #12]
 8007368:	4613      	mov	r3, r2
 800736a:	005b      	lsls	r3, r3, #1
 800736c:	4413      	add	r3, r2
 800736e:	009b      	lsls	r3, r3, #2
 8007370:	440b      	add	r3, r1
 8007372:	681a      	ldr	r2, [r3, #0]
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800737a:	429a      	cmp	r2, r3
 800737c:	d11b      	bne.n	80073b6 <inc_lock+0x62>
			Files[i].clu == dp->sclust &&
 800737e:	4950      	ldr	r1, [pc, #320]	; (80074c0 <inc_lock+0x16c>)
 8007380:	68fa      	ldr	r2, [r7, #12]
 8007382:	4613      	mov	r3, r2
 8007384:	005b      	lsls	r3, r3, #1
 8007386:	4413      	add	r3, r2
 8007388:	009b      	lsls	r3, r3, #2
 800738a:	440b      	add	r3, r1
 800738c:	3304      	adds	r3, #4
 800738e:	681a      	ldr	r2, [r3, #0]
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
		if (Files[i].fs == dp->fs &&
 8007396:	429a      	cmp	r2, r3
 8007398:	d10d      	bne.n	80073b6 <inc_lock+0x62>
			Files[i].idx == dp->index) break;
 800739a:	4949      	ldr	r1, [pc, #292]	; (80074c0 <inc_lock+0x16c>)
 800739c:	68fa      	ldr	r2, [r7, #12]
 800739e:	4613      	mov	r3, r2
 80073a0:	005b      	lsls	r3, r3, #1
 80073a2:	4413      	add	r3, r2
 80073a4:	009b      	lsls	r3, r3, #2
 80073a6:	440b      	add	r3, r1
 80073a8:	3308      	adds	r3, #8
 80073aa:	881a      	ldrh	r2, [r3, #0]
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	f8b3 3206 	ldrh.w	r3, [r3, #518]	; 0x206
			Files[i].clu == dp->sclust &&
 80073b2:	429a      	cmp	r2, r3
 80073b4:	d006      	beq.n	80073c4 <inc_lock+0x70>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80073b6:	68fb      	ldr	r3, [r7, #12]
 80073b8:	3301      	adds	r3, #1
 80073ba:	60fb      	str	r3, [r7, #12]
 80073bc:	68fb      	ldr	r3, [r7, #12]
 80073be:	2b01      	cmp	r3, #1
 80073c0:	d9d0      	bls.n	8007364 <inc_lock+0x10>
 80073c2:	e000      	b.n	80073c6 <inc_lock+0x72>
			Files[i].idx == dp->index) break;
 80073c4:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 80073c6:	68fb      	ldr	r3, [r7, #12]
 80073c8:	2b02      	cmp	r3, #2
 80073ca:	d145      	bne.n	8007458 <inc_lock+0x104>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80073cc:	2300      	movs	r3, #0
 80073ce:	60fb      	str	r3, [r7, #12]
 80073d0:	e002      	b.n	80073d8 <inc_lock+0x84>
 80073d2:	68fb      	ldr	r3, [r7, #12]
 80073d4:	3301      	adds	r3, #1
 80073d6:	60fb      	str	r3, [r7, #12]
 80073d8:	68fb      	ldr	r3, [r7, #12]
 80073da:	2b01      	cmp	r3, #1
 80073dc:	d809      	bhi.n	80073f2 <inc_lock+0x9e>
 80073de:	4938      	ldr	r1, [pc, #224]	; (80074c0 <inc_lock+0x16c>)
 80073e0:	68fa      	ldr	r2, [r7, #12]
 80073e2:	4613      	mov	r3, r2
 80073e4:	005b      	lsls	r3, r3, #1
 80073e6:	4413      	add	r3, r2
 80073e8:	009b      	lsls	r3, r3, #2
 80073ea:	440b      	add	r3, r1
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	2b00      	cmp	r3, #0
 80073f0:	d1ef      	bne.n	80073d2 <inc_lock+0x7e>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 80073f2:	68fb      	ldr	r3, [r7, #12]
 80073f4:	2b02      	cmp	r3, #2
 80073f6:	d101      	bne.n	80073fc <inc_lock+0xa8>
 80073f8:	2300      	movs	r3, #0
 80073fa:	e05a      	b.n	80074b2 <inc_lock+0x15e>
		Files[i].fs = dp->fs;
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	f8d3 1200 	ldr.w	r1, [r3, #512]	; 0x200
 8007402:	482f      	ldr	r0, [pc, #188]	; (80074c0 <inc_lock+0x16c>)
 8007404:	68fa      	ldr	r2, [r7, #12]
 8007406:	4613      	mov	r3, r2
 8007408:	005b      	lsls	r3, r3, #1
 800740a:	4413      	add	r3, r2
 800740c:	009b      	lsls	r3, r3, #2
 800740e:	4403      	add	r3, r0
 8007410:	6019      	str	r1, [r3, #0]
		Files[i].clu = dp->sclust;
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	f8d3 1208 	ldr.w	r1, [r3, #520]	; 0x208
 8007418:	4829      	ldr	r0, [pc, #164]	; (80074c0 <inc_lock+0x16c>)
 800741a:	68fa      	ldr	r2, [r7, #12]
 800741c:	4613      	mov	r3, r2
 800741e:	005b      	lsls	r3, r3, #1
 8007420:	4413      	add	r3, r2
 8007422:	009b      	lsls	r3, r3, #2
 8007424:	4403      	add	r3, r0
 8007426:	3304      	adds	r3, #4
 8007428:	6019      	str	r1, [r3, #0]
		Files[i].idx = dp->index;
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	f8b3 0206 	ldrh.w	r0, [r3, #518]	; 0x206
 8007430:	4923      	ldr	r1, [pc, #140]	; (80074c0 <inc_lock+0x16c>)
 8007432:	68fa      	ldr	r2, [r7, #12]
 8007434:	4613      	mov	r3, r2
 8007436:	005b      	lsls	r3, r3, #1
 8007438:	4413      	add	r3, r2
 800743a:	009b      	lsls	r3, r3, #2
 800743c:	440b      	add	r3, r1
 800743e:	3308      	adds	r3, #8
 8007440:	4602      	mov	r2, r0
 8007442:	801a      	strh	r2, [r3, #0]
		Files[i].ctr = 0;
 8007444:	491e      	ldr	r1, [pc, #120]	; (80074c0 <inc_lock+0x16c>)
 8007446:	68fa      	ldr	r2, [r7, #12]
 8007448:	4613      	mov	r3, r2
 800744a:	005b      	lsls	r3, r3, #1
 800744c:	4413      	add	r3, r2
 800744e:	009b      	lsls	r3, r3, #2
 8007450:	440b      	add	r3, r1
 8007452:	330a      	adds	r3, #10
 8007454:	2200      	movs	r2, #0
 8007456:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8007458:	683b      	ldr	r3, [r7, #0]
 800745a:	2b00      	cmp	r3, #0
 800745c:	d00c      	beq.n	8007478 <inc_lock+0x124>
 800745e:	4918      	ldr	r1, [pc, #96]	; (80074c0 <inc_lock+0x16c>)
 8007460:	68fa      	ldr	r2, [r7, #12]
 8007462:	4613      	mov	r3, r2
 8007464:	005b      	lsls	r3, r3, #1
 8007466:	4413      	add	r3, r2
 8007468:	009b      	lsls	r3, r3, #2
 800746a:	440b      	add	r3, r1
 800746c:	330a      	adds	r3, #10
 800746e:	881b      	ldrh	r3, [r3, #0]
 8007470:	2b00      	cmp	r3, #0
 8007472:	d001      	beq.n	8007478 <inc_lock+0x124>
 8007474:	2300      	movs	r3, #0
 8007476:	e01c      	b.n	80074b2 <inc_lock+0x15e>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8007478:	683b      	ldr	r3, [r7, #0]
 800747a:	2b00      	cmp	r3, #0
 800747c:	d10b      	bne.n	8007496 <inc_lock+0x142>
 800747e:	4910      	ldr	r1, [pc, #64]	; (80074c0 <inc_lock+0x16c>)
 8007480:	68fa      	ldr	r2, [r7, #12]
 8007482:	4613      	mov	r3, r2
 8007484:	005b      	lsls	r3, r3, #1
 8007486:	4413      	add	r3, r2
 8007488:	009b      	lsls	r3, r3, #2
 800748a:	440b      	add	r3, r1
 800748c:	330a      	adds	r3, #10
 800748e:	881b      	ldrh	r3, [r3, #0]
 8007490:	3301      	adds	r3, #1
 8007492:	b299      	uxth	r1, r3
 8007494:	e001      	b.n	800749a <inc_lock+0x146>
 8007496:	f44f 7180 	mov.w	r1, #256	; 0x100
 800749a:	4809      	ldr	r0, [pc, #36]	; (80074c0 <inc_lock+0x16c>)
 800749c:	68fa      	ldr	r2, [r7, #12]
 800749e:	4613      	mov	r3, r2
 80074a0:	005b      	lsls	r3, r3, #1
 80074a2:	4413      	add	r3, r2
 80074a4:	009b      	lsls	r3, r3, #2
 80074a6:	4403      	add	r3, r0
 80074a8:	330a      	adds	r3, #10
 80074aa:	460a      	mov	r2, r1
 80074ac:	801a      	strh	r2, [r3, #0]

	return i + 1;
 80074ae:	68fb      	ldr	r3, [r7, #12]
 80074b0:	3301      	adds	r3, #1
}
 80074b2:	4618      	mov	r0, r3
 80074b4:	3714      	adds	r7, #20
 80074b6:	46bd      	mov	sp, r7
 80074b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074bc:	4770      	bx	lr
 80074be:	bf00      	nop
 80074c0:	20001438 	.word	0x20001438

080074c4 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 80074c4:	b480      	push	{r7}
 80074c6:	b085      	sub	sp, #20
 80074c8:	af00      	add	r7, sp, #0
 80074ca:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	3b01      	subs	r3, #1
 80074d0:	607b      	str	r3, [r7, #4]
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	2b01      	cmp	r3, #1
 80074d6:	d82e      	bhi.n	8007536 <dec_lock+0x72>
		n = Files[i].ctr;
 80074d8:	491b      	ldr	r1, [pc, #108]	; (8007548 <dec_lock+0x84>)
 80074da:	687a      	ldr	r2, [r7, #4]
 80074dc:	4613      	mov	r3, r2
 80074de:	005b      	lsls	r3, r3, #1
 80074e0:	4413      	add	r3, r2
 80074e2:	009b      	lsls	r3, r3, #2
 80074e4:	440b      	add	r3, r1
 80074e6:	330a      	adds	r3, #10
 80074e8:	881b      	ldrh	r3, [r3, #0]
 80074ea:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 80074ec:	89fb      	ldrh	r3, [r7, #14]
 80074ee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80074f2:	d101      	bne.n	80074f8 <dec_lock+0x34>
 80074f4:	2300      	movs	r3, #0
 80074f6:	81fb      	strh	r3, [r7, #14]
		if (n) n--;					/* Decrement read mode open count */
 80074f8:	89fb      	ldrh	r3, [r7, #14]
 80074fa:	2b00      	cmp	r3, #0
 80074fc:	d002      	beq.n	8007504 <dec_lock+0x40>
 80074fe:	89fb      	ldrh	r3, [r7, #14]
 8007500:	3b01      	subs	r3, #1
 8007502:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8007504:	4910      	ldr	r1, [pc, #64]	; (8007548 <dec_lock+0x84>)
 8007506:	687a      	ldr	r2, [r7, #4]
 8007508:	4613      	mov	r3, r2
 800750a:	005b      	lsls	r3, r3, #1
 800750c:	4413      	add	r3, r2
 800750e:	009b      	lsls	r3, r3, #2
 8007510:	440b      	add	r3, r1
 8007512:	330a      	adds	r3, #10
 8007514:	89fa      	ldrh	r2, [r7, #14]
 8007516:	801a      	strh	r2, [r3, #0]
		if (!n) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8007518:	89fb      	ldrh	r3, [r7, #14]
 800751a:	2b00      	cmp	r3, #0
 800751c:	d108      	bne.n	8007530 <dec_lock+0x6c>
 800751e:	490a      	ldr	r1, [pc, #40]	; (8007548 <dec_lock+0x84>)
 8007520:	687a      	ldr	r2, [r7, #4]
 8007522:	4613      	mov	r3, r2
 8007524:	005b      	lsls	r3, r3, #1
 8007526:	4413      	add	r3, r2
 8007528:	009b      	lsls	r3, r3, #2
 800752a:	440b      	add	r3, r1
 800752c:	2200      	movs	r2, #0
 800752e:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8007530:	2300      	movs	r3, #0
 8007532:	737b      	strb	r3, [r7, #13]
 8007534:	e001      	b.n	800753a <dec_lock+0x76>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8007536:	2302      	movs	r3, #2
 8007538:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800753a:	7b7b      	ldrb	r3, [r7, #13]
}
 800753c:	4618      	mov	r0, r3
 800753e:	3714      	adds	r7, #20
 8007540:	46bd      	mov	sp, r7
 8007542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007546:	4770      	bx	lr
 8007548:	20001438 	.word	0x20001438

0800754c <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800754c:	b480      	push	{r7}
 800754e:	b085      	sub	sp, #20
 8007550:	af00      	add	r7, sp, #0
 8007552:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8007554:	2300      	movs	r3, #0
 8007556:	60fb      	str	r3, [r7, #12]
 8007558:	e016      	b.n	8007588 <clear_lock+0x3c>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800755a:	4910      	ldr	r1, [pc, #64]	; (800759c <clear_lock+0x50>)
 800755c:	68fa      	ldr	r2, [r7, #12]
 800755e:	4613      	mov	r3, r2
 8007560:	005b      	lsls	r3, r3, #1
 8007562:	4413      	add	r3, r2
 8007564:	009b      	lsls	r3, r3, #2
 8007566:	440b      	add	r3, r1
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	687a      	ldr	r2, [r7, #4]
 800756c:	429a      	cmp	r2, r3
 800756e:	d108      	bne.n	8007582 <clear_lock+0x36>
 8007570:	490a      	ldr	r1, [pc, #40]	; (800759c <clear_lock+0x50>)
 8007572:	68fa      	ldr	r2, [r7, #12]
 8007574:	4613      	mov	r3, r2
 8007576:	005b      	lsls	r3, r3, #1
 8007578:	4413      	add	r3, r2
 800757a:	009b      	lsls	r3, r3, #2
 800757c:	440b      	add	r3, r1
 800757e:	2200      	movs	r2, #0
 8007580:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8007582:	68fb      	ldr	r3, [r7, #12]
 8007584:	3301      	adds	r3, #1
 8007586:	60fb      	str	r3, [r7, #12]
 8007588:	68fb      	ldr	r3, [r7, #12]
 800758a:	2b01      	cmp	r3, #1
 800758c:	d9e5      	bls.n	800755a <clear_lock+0xe>
	}
}
 800758e:	bf00      	nop
 8007590:	bf00      	nop
 8007592:	3714      	adds	r7, #20
 8007594:	46bd      	mov	sp, r7
 8007596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800759a:	4770      	bx	lr
 800759c:	20001438 	.word	0x20001438

080075a0 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (
	FATFS* fs		/* File system object */
)
{
 80075a0:	b580      	push	{r7, lr}
 80075a2:	b086      	sub	sp, #24
 80075a4:	af00      	add	r7, sp, #0
 80075a6:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 80075a8:	2300      	movs	r3, #0
 80075aa:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	f893 3204 	ldrb.w	r3, [r3, #516]	; 0x204
 80075b2:	2b00      	cmp	r3, #0
 80075b4:	d038      	beq.n	8007628 <sync_window+0x88>
		wsect = fs->winsect;	/* Current sector number */
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	f8d3 322c 	ldr.w	r3, [r3, #556]	; 0x22c
 80075bc:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win.d8, wsect, 1) != RES_OK) {
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 80075c4:	6879      	ldr	r1, [r7, #4]
 80075c6:	2301      	movs	r3, #1
 80075c8:	697a      	ldr	r2, [r7, #20]
 80075ca:	f7ff fd77 	bl	80070bc <disk_write>
 80075ce:	4603      	mov	r3, r0
 80075d0:	2b00      	cmp	r3, #0
 80075d2:	d002      	beq.n	80075da <sync_window+0x3a>
			res = FR_DISK_ERR;
 80075d4:	2301      	movs	r3, #1
 80075d6:	73fb      	strb	r3, [r7, #15]
 80075d8:	e026      	b.n	8007628 <sync_window+0x88>
		} else {
			fs->wflag = 0;
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	2200      	movs	r2, #0
 80075de:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 80075e8:	697a      	ldr	r2, [r7, #20]
 80075ea:	1ad2      	subs	r2, r2, r3
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 80075f2:	429a      	cmp	r2, r3
 80075f4:	d218      	bcs.n	8007628 <sync_window+0x88>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	f893 3203 	ldrb.w	r3, [r3, #515]	; 0x203
 80075fc:	613b      	str	r3, [r7, #16]
 80075fe:	e010      	b.n	8007622 <sync_window+0x82>
					wsect += fs->fsize;
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8007606:	697a      	ldr	r2, [r7, #20]
 8007608:	4413      	add	r3, r2
 800760a:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win.d8, wsect, 1);
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 8007612:	6879      	ldr	r1, [r7, #4]
 8007614:	2301      	movs	r3, #1
 8007616:	697a      	ldr	r2, [r7, #20]
 8007618:	f7ff fd50 	bl	80070bc <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800761c:	693b      	ldr	r3, [r7, #16]
 800761e:	3b01      	subs	r3, #1
 8007620:	613b      	str	r3, [r7, #16]
 8007622:	693b      	ldr	r3, [r7, #16]
 8007624:	2b01      	cmp	r3, #1
 8007626:	d8eb      	bhi.n	8007600 <sync_window+0x60>
				}
			}
		}
	}
	return res;
 8007628:	7bfb      	ldrb	r3, [r7, #15]
}
 800762a:	4618      	mov	r0, r3
 800762c:	3718      	adds	r7, #24
 800762e:	46bd      	mov	sp, r7
 8007630:	bd80      	pop	{r7, pc}

08007632 <move_window>:
static
FRESULT move_window (
	FATFS* fs,		/* File system object */
	DWORD sector	/* Sector number to make appearance in the fs->win[].d8 */
)
{
 8007632:	b580      	push	{r7, lr}
 8007634:	b084      	sub	sp, #16
 8007636:	af00      	add	r7, sp, #0
 8007638:	6078      	str	r0, [r7, #4]
 800763a:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800763c:	2300      	movs	r3, #0
 800763e:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	f8d3 322c 	ldr.w	r3, [r3, #556]	; 0x22c
 8007646:	683a      	ldr	r2, [r7, #0]
 8007648:	429a      	cmp	r2, r3
 800764a:	d01b      	beq.n	8007684 <move_window+0x52>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800764c:	6878      	ldr	r0, [r7, #4]
 800764e:	f7ff ffa7 	bl	80075a0 <sync_window>
 8007652:	4603      	mov	r3, r0
 8007654:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8007656:	7bfb      	ldrb	r3, [r7, #15]
 8007658:	2b00      	cmp	r3, #0
 800765a:	d113      	bne.n	8007684 <move_window+0x52>
			if (disk_read(fs->drv, fs->win.d8, sector, 1) != RES_OK) {
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 8007662:	6879      	ldr	r1, [r7, #4]
 8007664:	2301      	movs	r3, #1
 8007666:	683a      	ldr	r2, [r7, #0]
 8007668:	f7ff fd08 	bl	800707c <disk_read>
 800766c:	4603      	mov	r3, r0
 800766e:	2b00      	cmp	r3, #0
 8007670:	d004      	beq.n	800767c <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8007672:	f04f 33ff 	mov.w	r3, #4294967295
 8007676:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8007678:	2301      	movs	r3, #1
 800767a:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	683a      	ldr	r2, [r7, #0]
 8007680:	f8c3 222c 	str.w	r2, [r3, #556]	; 0x22c
		}
	}
	return res;
 8007684:	7bfb      	ldrb	r3, [r7, #15]
}
 8007686:	4618      	mov	r0, r3
 8007688:	3710      	adds	r7, #16
 800768a:	46bd      	mov	sp, r7
 800768c:	bd80      	pop	{r7, pc}

0800768e <sync_fs>:
#if !_FS_READONLY
static
FRESULT sync_fs (	/* FR_OK: successful, FR_DISK_ERR: failed */
	FATFS* fs		/* File system object */
)
{
 800768e:	b580      	push	{r7, lr}
 8007690:	b084      	sub	sp, #16
 8007692:	af00      	add	r7, sp, #0
 8007694:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8007696:	6878      	ldr	r0, [r7, #4]
 8007698:	f7ff ff82 	bl	80075a0 <sync_window>
 800769c:	4603      	mov	r3, r0
 800769e:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 80076a0:	7bfb      	ldrb	r3, [r7, #15]
 80076a2:	2b00      	cmp	r3, #0
 80076a4:	f040 809b 	bne.w	80077de <sync_fs+0x150>
		/* Update FSINFO sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80076ae:	2b03      	cmp	r3, #3
 80076b0:	f040 8088 	bne.w	80077c4 <sync_fs+0x136>
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	f893 3205 	ldrb.w	r3, [r3, #517]	; 0x205
 80076ba:	2b01      	cmp	r3, #1
 80076bc:	f040 8082 	bne.w	80077c4 <sync_fs+0x136>
			/* Create FSINFO structure */
			mem_set(fs->win.d8, 0, SS(fs));
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80076c6:	2100      	movs	r1, #0
 80076c8:	4618      	mov	r0, r3
 80076ca:	f7ff fd54 	bl	8007176 <mem_set>
			ST_WORD(fs->win.d8 + BS_55AA, 0xAA55);
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	2255      	movs	r2, #85	; 0x55
 80076d2:	f883 21fe 	strb.w	r2, [r3, #510]	; 0x1fe
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	22aa      	movs	r2, #170	; 0xaa
 80076da:	f883 21ff 	strb.w	r2, [r3, #511]	; 0x1ff
			ST_DWORD(fs->win.d8 + FSI_LeadSig, 0x41615252);
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	2252      	movs	r2, #82	; 0x52
 80076e2:	701a      	strb	r2, [r3, #0]
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	2252      	movs	r2, #82	; 0x52
 80076e8:	705a      	strb	r2, [r3, #1]
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	2261      	movs	r2, #97	; 0x61
 80076ee:	709a      	strb	r2, [r3, #2]
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	2241      	movs	r2, #65	; 0x41
 80076f4:	70da      	strb	r2, [r3, #3]
			ST_DWORD(fs->win.d8 + FSI_StrucSig, 0x61417272);
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	2272      	movs	r2, #114	; 0x72
 80076fa:	f883 21e4 	strb.w	r2, [r3, #484]	; 0x1e4
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	2272      	movs	r2, #114	; 0x72
 8007702:	f883 21e5 	strb.w	r2, [r3, #485]	; 0x1e5
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	2241      	movs	r2, #65	; 0x41
 800770a:	f883 21e6 	strb.w	r2, [r3, #486]	; 0x1e6
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	2261      	movs	r2, #97	; 0x61
 8007712:	f883 21e7 	strb.w	r2, [r3, #487]	; 0x1e7
			ST_DWORD(fs->win.d8 + FSI_Free_Count, fs->free_clust);
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800771c:	b2da      	uxtb	r2, r3
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	f883 21e8 	strb.w	r2, [r3, #488]	; 0x1e8
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800772a:	b29b      	uxth	r3, r3
 800772c:	0a1b      	lsrs	r3, r3, #8
 800772e:	b29b      	uxth	r3, r3
 8007730:	b2da      	uxtb	r2, r3
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	f883 21e9 	strb.w	r2, [r3, #489]	; 0x1e9
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800773e:	0c1b      	lsrs	r3, r3, #16
 8007740:	b2da      	uxtb	r2, r3
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	f883 21ea 	strb.w	r2, [r3, #490]	; 0x1ea
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800774e:	0e1b      	lsrs	r3, r3, #24
 8007750:	b2da      	uxtb	r2, r3
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	f883 21eb 	strb.w	r2, [r3, #491]	; 0x1eb
			ST_DWORD(fs->win.d8 + FSI_Nxt_Free, fs->last_clust);
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 800775e:	b2da      	uxtb	r2, r3
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	f883 21ec 	strb.w	r2, [r3, #492]	; 0x1ec
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 800776c:	b29b      	uxth	r3, r3
 800776e:	0a1b      	lsrs	r3, r3, #8
 8007770:	b29b      	uxth	r3, r3
 8007772:	b2da      	uxtb	r2, r3
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	f883 21ed 	strb.w	r2, [r3, #493]	; 0x1ed
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8007780:	0c1b      	lsrs	r3, r3, #16
 8007782:	b2da      	uxtb	r2, r3
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	f883 21ee 	strb.w	r2, [r3, #494]	; 0x1ee
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8007790:	0e1b      	lsrs	r3, r3, #24
 8007792:	b2da      	uxtb	r2, r3
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	f883 21ef 	strb.w	r2, [r3, #495]	; 0x1ef
			/* Write it into the FSINFO sector */
			fs->winsect = fs->volbase + 1;
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 80077a0:	1c5a      	adds	r2, r3, #1
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	f8c3 222c 	str.w	r2, [r3, #556]	; 0x22c
			disk_write(fs->drv, fs->win.d8, fs->winsect, 1);
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 80077ae:	6879      	ldr	r1, [r7, #4]
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	f8d3 222c 	ldr.w	r2, [r3, #556]	; 0x22c
 80077b6:	2301      	movs	r3, #1
 80077b8:	f7ff fc80 	bl	80070bc <disk_write>
			fs->fsi_flag = 0;
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	2200      	movs	r2, #0
 80077c0:	f883 2205 	strb.w	r2, [r3, #517]	; 0x205
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK)
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 80077ca:	2200      	movs	r2, #0
 80077cc:	2100      	movs	r1, #0
 80077ce:	4618      	mov	r0, r3
 80077d0:	f7ff fc94 	bl	80070fc <disk_ioctl>
 80077d4:	4603      	mov	r3, r0
 80077d6:	2b00      	cmp	r3, #0
 80077d8:	d001      	beq.n	80077de <sync_fs+0x150>
			res = FR_DISK_ERR;
 80077da:	2301      	movs	r3, #1
 80077dc:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 80077de:	7bfb      	ldrb	r3, [r7, #15]
}
 80077e0:	4618      	mov	r0, r3
 80077e2:	3710      	adds	r7, #16
 80077e4:	46bd      	mov	sp, r7
 80077e6:	bd80      	pop	{r7, pc}

080077e8 <clust2sect>:

DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 80077e8:	b480      	push	{r7}
 80077ea:	b083      	sub	sp, #12
 80077ec:	af00      	add	r7, sp, #0
 80077ee:	6078      	str	r0, [r7, #4]
 80077f0:	6039      	str	r1, [r7, #0]
	clst -= 2;
 80077f2:	683b      	ldr	r3, [r7, #0]
 80077f4:	3b02      	subs	r3, #2
 80077f6:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80077fe:	3b02      	subs	r3, #2
 8007800:	683a      	ldr	r2, [r7, #0]
 8007802:	429a      	cmp	r2, r3
 8007804:	d301      	bcc.n	800780a <clust2sect+0x22>
 8007806:	2300      	movs	r3, #0
 8007808:	e00a      	b.n	8007820 <clust2sect+0x38>
	return clst * fs->csize + fs->database;
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 8007810:	461a      	mov	r2, r3
 8007812:	683b      	ldr	r3, [r7, #0]
 8007814:	fb03 f202 	mul.w	r2, r3, r2
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	f8d3 3228 	ldr.w	r3, [r3, #552]	; 0x228
 800781e:	4413      	add	r3, r2
}
 8007820:	4618      	mov	r0, r3
 8007822:	370c      	adds	r7, #12
 8007824:	46bd      	mov	sp, r7
 8007826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800782a:	4770      	bx	lr

0800782c <get_fat>:

DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x0FFFFFFF:Cluster status */
	FATFS* fs,	/* File system object */
	DWORD clst	/* FAT index number (cluster number) to get the value */
)
{
 800782c:	b580      	push	{r7, lr}
 800782e:	b086      	sub	sp, #24
 8007830:	af00      	add	r7, sp, #0
 8007832:	6078      	str	r0, [r7, #4]
 8007834:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	BYTE *p;
	DWORD val;


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 8007836:	683b      	ldr	r3, [r7, #0]
 8007838:	2b01      	cmp	r3, #1
 800783a:	d905      	bls.n	8007848 <get_fat+0x1c>
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8007842:	683a      	ldr	r2, [r7, #0]
 8007844:	429a      	cmp	r2, r3
 8007846:	d302      	bcc.n	800784e <get_fat+0x22>
		val = 1;	/* Internal error */
 8007848:	2301      	movs	r3, #1
 800784a:	617b      	str	r3, [r7, #20]
 800784c:	e0a3      	b.n	8007996 <get_fat+0x16a>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800784e:	f04f 33ff 	mov.w	r3, #4294967295
 8007852:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800785a:	2b03      	cmp	r3, #3
 800785c:	d068      	beq.n	8007930 <get_fat+0x104>
 800785e:	2b03      	cmp	r3, #3
 8007860:	f300 808f 	bgt.w	8007982 <get_fat+0x156>
 8007864:	2b01      	cmp	r3, #1
 8007866:	d002      	beq.n	800786e <get_fat+0x42>
 8007868:	2b02      	cmp	r3, #2
 800786a:	d040      	beq.n	80078ee <get_fat+0xc2>
 800786c:	e089      	b.n	8007982 <get_fat+0x156>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800786e:	683b      	ldr	r3, [r7, #0]
 8007870:	60fb      	str	r3, [r7, #12]
 8007872:	68fb      	ldr	r3, [r7, #12]
 8007874:	085b      	lsrs	r3, r3, #1
 8007876:	68fa      	ldr	r2, [r7, #12]
 8007878:	4413      	add	r3, r2
 800787a:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	f8d3 2220 	ldr.w	r2, [r3, #544]	; 0x220
 8007882:	68fb      	ldr	r3, [r7, #12]
 8007884:	0a5b      	lsrs	r3, r3, #9
 8007886:	4413      	add	r3, r2
 8007888:	4619      	mov	r1, r3
 800788a:	6878      	ldr	r0, [r7, #4]
 800788c:	f7ff fed1 	bl	8007632 <move_window>
 8007890:	4603      	mov	r3, r0
 8007892:	2b00      	cmp	r3, #0
 8007894:	d178      	bne.n	8007988 <get_fat+0x15c>
			wc = fs->win.d8[bc++ % SS(fs)];
 8007896:	68fb      	ldr	r3, [r7, #12]
 8007898:	1c5a      	adds	r2, r3, #1
 800789a:	60fa      	str	r2, [r7, #12]
 800789c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80078a0:	687a      	ldr	r2, [r7, #4]
 80078a2:	5cd3      	ldrb	r3, [r2, r3]
 80078a4:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	f8d3 2220 	ldr.w	r2, [r3, #544]	; 0x220
 80078ac:	68fb      	ldr	r3, [r7, #12]
 80078ae:	0a5b      	lsrs	r3, r3, #9
 80078b0:	4413      	add	r3, r2
 80078b2:	4619      	mov	r1, r3
 80078b4:	6878      	ldr	r0, [r7, #4]
 80078b6:	f7ff febc 	bl	8007632 <move_window>
 80078ba:	4603      	mov	r3, r0
 80078bc:	2b00      	cmp	r3, #0
 80078be:	d165      	bne.n	800798c <get_fat+0x160>
			wc |= fs->win.d8[bc % SS(fs)] << 8;
 80078c0:	68fb      	ldr	r3, [r7, #12]
 80078c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80078c6:	687a      	ldr	r2, [r7, #4]
 80078c8:	5cd3      	ldrb	r3, [r2, r3]
 80078ca:	021b      	lsls	r3, r3, #8
 80078cc:	461a      	mov	r2, r3
 80078ce:	68bb      	ldr	r3, [r7, #8]
 80078d0:	4313      	orrs	r3, r2
 80078d2:	60bb      	str	r3, [r7, #8]
			val = clst & 1 ? wc >> 4 : (wc & 0xFFF);
 80078d4:	683b      	ldr	r3, [r7, #0]
 80078d6:	f003 0301 	and.w	r3, r3, #1
 80078da:	2b00      	cmp	r3, #0
 80078dc:	d002      	beq.n	80078e4 <get_fat+0xb8>
 80078de:	68bb      	ldr	r3, [r7, #8]
 80078e0:	091b      	lsrs	r3, r3, #4
 80078e2:	e002      	b.n	80078ea <get_fat+0xbe>
 80078e4:	68bb      	ldr	r3, [r7, #8]
 80078e6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80078ea:	617b      	str	r3, [r7, #20]
			break;
 80078ec:	e053      	b.n	8007996 <get_fat+0x16a>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	f8d3 2220 	ldr.w	r2, [r3, #544]	; 0x220
 80078f4:	683b      	ldr	r3, [r7, #0]
 80078f6:	0a1b      	lsrs	r3, r3, #8
 80078f8:	4413      	add	r3, r2
 80078fa:	4619      	mov	r1, r3
 80078fc:	6878      	ldr	r0, [r7, #4]
 80078fe:	f7ff fe98 	bl	8007632 <move_window>
 8007902:	4603      	mov	r3, r0
 8007904:	2b00      	cmp	r3, #0
 8007906:	d143      	bne.n	8007990 <get_fat+0x164>
			p = &fs->win.d8[clst * 2 % SS(fs)];
 8007908:	683b      	ldr	r3, [r7, #0]
 800790a:	005b      	lsls	r3, r3, #1
 800790c:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8007910:	687a      	ldr	r2, [r7, #4]
 8007912:	4413      	add	r3, r2
 8007914:	613b      	str	r3, [r7, #16]
			val = LD_WORD(p);
 8007916:	693b      	ldr	r3, [r7, #16]
 8007918:	3301      	adds	r3, #1
 800791a:	781b      	ldrb	r3, [r3, #0]
 800791c:	021b      	lsls	r3, r3, #8
 800791e:	b21a      	sxth	r2, r3
 8007920:	693b      	ldr	r3, [r7, #16]
 8007922:	781b      	ldrb	r3, [r3, #0]
 8007924:	b21b      	sxth	r3, r3
 8007926:	4313      	orrs	r3, r2
 8007928:	b21b      	sxth	r3, r3
 800792a:	b29b      	uxth	r3, r3
 800792c:	617b      	str	r3, [r7, #20]
			break;
 800792e:	e032      	b.n	8007996 <get_fat+0x16a>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	f8d3 2220 	ldr.w	r2, [r3, #544]	; 0x220
 8007936:	683b      	ldr	r3, [r7, #0]
 8007938:	09db      	lsrs	r3, r3, #7
 800793a:	4413      	add	r3, r2
 800793c:	4619      	mov	r1, r3
 800793e:	6878      	ldr	r0, [r7, #4]
 8007940:	f7ff fe77 	bl	8007632 <move_window>
 8007944:	4603      	mov	r3, r0
 8007946:	2b00      	cmp	r3, #0
 8007948:	d124      	bne.n	8007994 <get_fat+0x168>
			p = &fs->win.d8[clst * 4 % SS(fs)];
 800794a:	683b      	ldr	r3, [r7, #0]
 800794c:	009b      	lsls	r3, r3, #2
 800794e:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8007952:	687a      	ldr	r2, [r7, #4]
 8007954:	4413      	add	r3, r2
 8007956:	613b      	str	r3, [r7, #16]
			val = LD_DWORD(p) & 0x0FFFFFFF;
 8007958:	693b      	ldr	r3, [r7, #16]
 800795a:	3303      	adds	r3, #3
 800795c:	781b      	ldrb	r3, [r3, #0]
 800795e:	061a      	lsls	r2, r3, #24
 8007960:	693b      	ldr	r3, [r7, #16]
 8007962:	3302      	adds	r3, #2
 8007964:	781b      	ldrb	r3, [r3, #0]
 8007966:	041b      	lsls	r3, r3, #16
 8007968:	4313      	orrs	r3, r2
 800796a:	693a      	ldr	r2, [r7, #16]
 800796c:	3201      	adds	r2, #1
 800796e:	7812      	ldrb	r2, [r2, #0]
 8007970:	0212      	lsls	r2, r2, #8
 8007972:	4313      	orrs	r3, r2
 8007974:	693a      	ldr	r2, [r7, #16]
 8007976:	7812      	ldrb	r2, [r2, #0]
 8007978:	4313      	orrs	r3, r2
 800797a:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800797e:	617b      	str	r3, [r7, #20]
			break;
 8007980:	e009      	b.n	8007996 <get_fat+0x16a>

		default:
			val = 1;	/* Internal error */
 8007982:	2301      	movs	r3, #1
 8007984:	617b      	str	r3, [r7, #20]
 8007986:	e006      	b.n	8007996 <get_fat+0x16a>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8007988:	bf00      	nop
 800798a:	e004      	b.n	8007996 <get_fat+0x16a>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800798c:	bf00      	nop
 800798e:	e002      	b.n	8007996 <get_fat+0x16a>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8007990:	bf00      	nop
 8007992:	e000      	b.n	8007996 <get_fat+0x16a>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8007994:	bf00      	nop
		}
	}

	return val;
 8007996:	697b      	ldr	r3, [r7, #20]
}
 8007998:	4618      	mov	r0, r3
 800799a:	3718      	adds	r7, #24
 800799c:	46bd      	mov	sp, r7
 800799e:	bd80      	pop	{r7, pc}

080079a0 <put_fat>:
FRESULT put_fat (
	FATFS* fs,	/* File system object */
	DWORD clst,	/* FAT index number (cluster number) to be changed */
	DWORD val	/* New value to be set to the entry */
)
{
 80079a0:	b580      	push	{r7, lr}
 80079a2:	b088      	sub	sp, #32
 80079a4:	af00      	add	r7, sp, #0
 80079a6:	60f8      	str	r0, [r7, #12]
 80079a8:	60b9      	str	r1, [r7, #8]
 80079aa:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res;


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 80079ac:	68bb      	ldr	r3, [r7, #8]
 80079ae:	2b01      	cmp	r3, #1
 80079b0:	d905      	bls.n	80079be <put_fat+0x1e>
 80079b2:	68fb      	ldr	r3, [r7, #12]
 80079b4:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80079b8:	68ba      	ldr	r2, [r7, #8]
 80079ba:	429a      	cmp	r2, r3
 80079bc:	d302      	bcc.n	80079c4 <put_fat+0x24>
		res = FR_INT_ERR;
 80079be:	2302      	movs	r3, #2
 80079c0:	77fb      	strb	r3, [r7, #31]
 80079c2:	e0f6      	b.n	8007bb2 <put_fat+0x212>

	} else {
		switch (fs->fs_type) {
 80079c4:	68fb      	ldr	r3, [r7, #12]
 80079c6:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80079ca:	2b03      	cmp	r3, #3
 80079cc:	f000 809e 	beq.w	8007b0c <put_fat+0x16c>
 80079d0:	2b03      	cmp	r3, #3
 80079d2:	f300 80e4 	bgt.w	8007b9e <put_fat+0x1fe>
 80079d6:	2b01      	cmp	r3, #1
 80079d8:	d002      	beq.n	80079e0 <put_fat+0x40>
 80079da:	2b02      	cmp	r3, #2
 80079dc:	d06f      	beq.n	8007abe <put_fat+0x11e>
 80079de:	e0de      	b.n	8007b9e <put_fat+0x1fe>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 80079e0:	68bb      	ldr	r3, [r7, #8]
 80079e2:	617b      	str	r3, [r7, #20]
 80079e4:	697b      	ldr	r3, [r7, #20]
 80079e6:	085b      	lsrs	r3, r3, #1
 80079e8:	697a      	ldr	r2, [r7, #20]
 80079ea:	4413      	add	r3, r2
 80079ec:	617b      	str	r3, [r7, #20]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80079ee:	68fb      	ldr	r3, [r7, #12]
 80079f0:	f8d3 2220 	ldr.w	r2, [r3, #544]	; 0x220
 80079f4:	697b      	ldr	r3, [r7, #20]
 80079f6:	0a5b      	lsrs	r3, r3, #9
 80079f8:	4413      	add	r3, r2
 80079fa:	4619      	mov	r1, r3
 80079fc:	68f8      	ldr	r0, [r7, #12]
 80079fe:	f7ff fe18 	bl	8007632 <move_window>
 8007a02:	4603      	mov	r3, r0
 8007a04:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8007a06:	7ffb      	ldrb	r3, [r7, #31]
 8007a08:	2b00      	cmp	r3, #0
 8007a0a:	f040 80cb 	bne.w	8007ba4 <put_fat+0x204>
			p = &fs->win.d8[bc++ % SS(fs)];
 8007a0e:	697b      	ldr	r3, [r7, #20]
 8007a10:	1c5a      	adds	r2, r3, #1
 8007a12:	617a      	str	r2, [r7, #20]
 8007a14:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007a18:	68fa      	ldr	r2, [r7, #12]
 8007a1a:	4413      	add	r3, r2
 8007a1c:	61bb      	str	r3, [r7, #24]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8007a1e:	68bb      	ldr	r3, [r7, #8]
 8007a20:	f003 0301 	and.w	r3, r3, #1
 8007a24:	2b00      	cmp	r3, #0
 8007a26:	d00d      	beq.n	8007a44 <put_fat+0xa4>
 8007a28:	69bb      	ldr	r3, [r7, #24]
 8007a2a:	781b      	ldrb	r3, [r3, #0]
 8007a2c:	b25b      	sxtb	r3, r3
 8007a2e:	f003 030f 	and.w	r3, r3, #15
 8007a32:	b25a      	sxtb	r2, r3
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	b2db      	uxtb	r3, r3
 8007a38:	011b      	lsls	r3, r3, #4
 8007a3a:	b25b      	sxtb	r3, r3
 8007a3c:	4313      	orrs	r3, r2
 8007a3e:	b25b      	sxtb	r3, r3
 8007a40:	b2db      	uxtb	r3, r3
 8007a42:	e001      	b.n	8007a48 <put_fat+0xa8>
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	b2db      	uxtb	r3, r3
 8007a48:	69ba      	ldr	r2, [r7, #24]
 8007a4a:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8007a4c:	68fb      	ldr	r3, [r7, #12]
 8007a4e:	2201      	movs	r2, #1
 8007a50:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8007a54:	68fb      	ldr	r3, [r7, #12]
 8007a56:	f8d3 2220 	ldr.w	r2, [r3, #544]	; 0x220
 8007a5a:	697b      	ldr	r3, [r7, #20]
 8007a5c:	0a5b      	lsrs	r3, r3, #9
 8007a5e:	4413      	add	r3, r2
 8007a60:	4619      	mov	r1, r3
 8007a62:	68f8      	ldr	r0, [r7, #12]
 8007a64:	f7ff fde5 	bl	8007632 <move_window>
 8007a68:	4603      	mov	r3, r0
 8007a6a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8007a6c:	7ffb      	ldrb	r3, [r7, #31]
 8007a6e:	2b00      	cmp	r3, #0
 8007a70:	f040 809a 	bne.w	8007ba8 <put_fat+0x208>
			p = &fs->win.d8[bc % SS(fs)];
 8007a74:	697b      	ldr	r3, [r7, #20]
 8007a76:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007a7a:	68fa      	ldr	r2, [r7, #12]
 8007a7c:	4413      	add	r3, r2
 8007a7e:	61bb      	str	r3, [r7, #24]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8007a80:	68bb      	ldr	r3, [r7, #8]
 8007a82:	f003 0301 	and.w	r3, r3, #1
 8007a86:	2b00      	cmp	r3, #0
 8007a88:	d003      	beq.n	8007a92 <put_fat+0xf2>
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	091b      	lsrs	r3, r3, #4
 8007a8e:	b2db      	uxtb	r3, r3
 8007a90:	e00e      	b.n	8007ab0 <put_fat+0x110>
 8007a92:	69bb      	ldr	r3, [r7, #24]
 8007a94:	781b      	ldrb	r3, [r3, #0]
 8007a96:	b25b      	sxtb	r3, r3
 8007a98:	f023 030f 	bic.w	r3, r3, #15
 8007a9c:	b25a      	sxtb	r2, r3
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	0a1b      	lsrs	r3, r3, #8
 8007aa2:	b25b      	sxtb	r3, r3
 8007aa4:	f003 030f 	and.w	r3, r3, #15
 8007aa8:	b25b      	sxtb	r3, r3
 8007aaa:	4313      	orrs	r3, r2
 8007aac:	b25b      	sxtb	r3, r3
 8007aae:	b2db      	uxtb	r3, r3
 8007ab0:	69ba      	ldr	r2, [r7, #24]
 8007ab2:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8007ab4:	68fb      	ldr	r3, [r7, #12]
 8007ab6:	2201      	movs	r2, #1
 8007ab8:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
			break;
 8007abc:	e079      	b.n	8007bb2 <put_fat+0x212>

		case FS_FAT16 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8007abe:	68fb      	ldr	r3, [r7, #12]
 8007ac0:	f8d3 2220 	ldr.w	r2, [r3, #544]	; 0x220
 8007ac4:	68bb      	ldr	r3, [r7, #8]
 8007ac6:	0a1b      	lsrs	r3, r3, #8
 8007ac8:	4413      	add	r3, r2
 8007aca:	4619      	mov	r1, r3
 8007acc:	68f8      	ldr	r0, [r7, #12]
 8007ace:	f7ff fdb0 	bl	8007632 <move_window>
 8007ad2:	4603      	mov	r3, r0
 8007ad4:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8007ad6:	7ffb      	ldrb	r3, [r7, #31]
 8007ad8:	2b00      	cmp	r3, #0
 8007ada:	d167      	bne.n	8007bac <put_fat+0x20c>
			p = &fs->win.d8[clst * 2 % SS(fs)];
 8007adc:	68bb      	ldr	r3, [r7, #8]
 8007ade:	005b      	lsls	r3, r3, #1
 8007ae0:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8007ae4:	68fa      	ldr	r2, [r7, #12]
 8007ae6:	4413      	add	r3, r2
 8007ae8:	61bb      	str	r3, [r7, #24]
			ST_WORD(p, (WORD)val);
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	b2da      	uxtb	r2, r3
 8007aee:	69bb      	ldr	r3, [r7, #24]
 8007af0:	701a      	strb	r2, [r3, #0]
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	b29b      	uxth	r3, r3
 8007af6:	0a1b      	lsrs	r3, r3, #8
 8007af8:	b29a      	uxth	r2, r3
 8007afa:	69bb      	ldr	r3, [r7, #24]
 8007afc:	3301      	adds	r3, #1
 8007afe:	b2d2      	uxtb	r2, r2
 8007b00:	701a      	strb	r2, [r3, #0]
			fs->wflag = 1;
 8007b02:	68fb      	ldr	r3, [r7, #12]
 8007b04:	2201      	movs	r2, #1
 8007b06:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
			break;
 8007b0a:	e052      	b.n	8007bb2 <put_fat+0x212>

		case FS_FAT32 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8007b0c:	68fb      	ldr	r3, [r7, #12]
 8007b0e:	f8d3 2220 	ldr.w	r2, [r3, #544]	; 0x220
 8007b12:	68bb      	ldr	r3, [r7, #8]
 8007b14:	09db      	lsrs	r3, r3, #7
 8007b16:	4413      	add	r3, r2
 8007b18:	4619      	mov	r1, r3
 8007b1a:	68f8      	ldr	r0, [r7, #12]
 8007b1c:	f7ff fd89 	bl	8007632 <move_window>
 8007b20:	4603      	mov	r3, r0
 8007b22:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8007b24:	7ffb      	ldrb	r3, [r7, #31]
 8007b26:	2b00      	cmp	r3, #0
 8007b28:	d142      	bne.n	8007bb0 <put_fat+0x210>
			p = &fs->win.d8[clst * 4 % SS(fs)];
 8007b2a:	68bb      	ldr	r3, [r7, #8]
 8007b2c:	009b      	lsls	r3, r3, #2
 8007b2e:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8007b32:	68fa      	ldr	r2, [r7, #12]
 8007b34:	4413      	add	r3, r2
 8007b36:	61bb      	str	r3, [r7, #24]
			val |= LD_DWORD(p) & 0xF0000000;
 8007b38:	69bb      	ldr	r3, [r7, #24]
 8007b3a:	3303      	adds	r3, #3
 8007b3c:	781b      	ldrb	r3, [r3, #0]
 8007b3e:	061a      	lsls	r2, r3, #24
 8007b40:	69bb      	ldr	r3, [r7, #24]
 8007b42:	3302      	adds	r3, #2
 8007b44:	781b      	ldrb	r3, [r3, #0]
 8007b46:	041b      	lsls	r3, r3, #16
 8007b48:	4313      	orrs	r3, r2
 8007b4a:	69ba      	ldr	r2, [r7, #24]
 8007b4c:	3201      	adds	r2, #1
 8007b4e:	7812      	ldrb	r2, [r2, #0]
 8007b50:	0212      	lsls	r2, r2, #8
 8007b52:	4313      	orrs	r3, r2
 8007b54:	69ba      	ldr	r2, [r7, #24]
 8007b56:	7812      	ldrb	r2, [r2, #0]
 8007b58:	4313      	orrs	r3, r2
 8007b5a:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8007b5e:	687a      	ldr	r2, [r7, #4]
 8007b60:	4313      	orrs	r3, r2
 8007b62:	607b      	str	r3, [r7, #4]
			ST_DWORD(p, val);
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	b2da      	uxtb	r2, r3
 8007b68:	69bb      	ldr	r3, [r7, #24]
 8007b6a:	701a      	strb	r2, [r3, #0]
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	b29b      	uxth	r3, r3
 8007b70:	0a1b      	lsrs	r3, r3, #8
 8007b72:	b29a      	uxth	r2, r3
 8007b74:	69bb      	ldr	r3, [r7, #24]
 8007b76:	3301      	adds	r3, #1
 8007b78:	b2d2      	uxtb	r2, r2
 8007b7a:	701a      	strb	r2, [r3, #0]
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	0c1a      	lsrs	r2, r3, #16
 8007b80:	69bb      	ldr	r3, [r7, #24]
 8007b82:	3302      	adds	r3, #2
 8007b84:	b2d2      	uxtb	r2, r2
 8007b86:	701a      	strb	r2, [r3, #0]
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	0e1a      	lsrs	r2, r3, #24
 8007b8c:	69bb      	ldr	r3, [r7, #24]
 8007b8e:	3303      	adds	r3, #3
 8007b90:	b2d2      	uxtb	r2, r2
 8007b92:	701a      	strb	r2, [r3, #0]
			fs->wflag = 1;
 8007b94:	68fb      	ldr	r3, [r7, #12]
 8007b96:	2201      	movs	r2, #1
 8007b98:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
			break;
 8007b9c:	e009      	b.n	8007bb2 <put_fat+0x212>

		default :
			res = FR_INT_ERR;
 8007b9e:	2302      	movs	r3, #2
 8007ba0:	77fb      	strb	r3, [r7, #31]
 8007ba2:	e006      	b.n	8007bb2 <put_fat+0x212>
			if (res != FR_OK) break;
 8007ba4:	bf00      	nop
 8007ba6:	e004      	b.n	8007bb2 <put_fat+0x212>
			if (res != FR_OK) break;
 8007ba8:	bf00      	nop
 8007baa:	e002      	b.n	8007bb2 <put_fat+0x212>
			if (res != FR_OK) break;
 8007bac:	bf00      	nop
 8007bae:	e000      	b.n	8007bb2 <put_fat+0x212>
			if (res != FR_OK) break;
 8007bb0:	bf00      	nop
		}
	}

	return res;
 8007bb2:	7ffb      	ldrb	r3, [r7, #31]
}
 8007bb4:	4618      	mov	r0, r3
 8007bb6:	3720      	adds	r7, #32
 8007bb8:	46bd      	mov	sp, r7
 8007bba:	bd80      	pop	{r7, pc}

08007bbc <remove_chain>:
static
FRESULT remove_chain (
	FATFS* fs,			/* File system object */
	DWORD clst			/* Cluster# to remove a chain from */
)
{
 8007bbc:	b580      	push	{r7, lr}
 8007bbe:	b084      	sub	sp, #16
 8007bc0:	af00      	add	r7, sp, #0
 8007bc2:	6078      	str	r0, [r7, #4]
 8007bc4:	6039      	str	r1, [r7, #0]
	DWORD nxt;
#if _USE_TRIM
	DWORD scl = clst, ecl = clst, rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 8007bc6:	683b      	ldr	r3, [r7, #0]
 8007bc8:	2b01      	cmp	r3, #1
 8007bca:	d905      	bls.n	8007bd8 <remove_chain+0x1c>
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8007bd2:	683a      	ldr	r2, [r7, #0]
 8007bd4:	429a      	cmp	r2, r3
 8007bd6:	d302      	bcc.n	8007bde <remove_chain+0x22>
		res = FR_INT_ERR;
 8007bd8:	2302      	movs	r3, #2
 8007bda:	73fb      	strb	r3, [r7, #15]
 8007bdc:	e043      	b.n	8007c66 <remove_chain+0xaa>

	} else {
		res = FR_OK;
 8007bde:	2300      	movs	r3, #0
 8007be0:	73fb      	strb	r3, [r7, #15]
		while (clst < fs->n_fatent) {			/* Not a last link? */
 8007be2:	e036      	b.n	8007c52 <remove_chain+0x96>
			nxt = get_fat(fs, clst);			/* Get cluster status */
 8007be4:	6839      	ldr	r1, [r7, #0]
 8007be6:	6878      	ldr	r0, [r7, #4]
 8007be8:	f7ff fe20 	bl	800782c <get_fat>
 8007bec:	60b8      	str	r0, [r7, #8]
			if (nxt == 0) break;				/* Empty cluster? */
 8007bee:	68bb      	ldr	r3, [r7, #8]
 8007bf0:	2b00      	cmp	r3, #0
 8007bf2:	d035      	beq.n	8007c60 <remove_chain+0xa4>
			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
 8007bf4:	68bb      	ldr	r3, [r7, #8]
 8007bf6:	2b01      	cmp	r3, #1
 8007bf8:	d102      	bne.n	8007c00 <remove_chain+0x44>
 8007bfa:	2302      	movs	r3, #2
 8007bfc:	73fb      	strb	r3, [r7, #15]
 8007bfe:	e032      	b.n	8007c66 <remove_chain+0xaa>
			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
 8007c00:	68bb      	ldr	r3, [r7, #8]
 8007c02:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c06:	d102      	bne.n	8007c0e <remove_chain+0x52>
 8007c08:	2301      	movs	r3, #1
 8007c0a:	73fb      	strb	r3, [r7, #15]
 8007c0c:	e02b      	b.n	8007c66 <remove_chain+0xaa>
			res = put_fat(fs, clst, 0);			/* Mark the cluster "empty" */
 8007c0e:	2200      	movs	r2, #0
 8007c10:	6839      	ldr	r1, [r7, #0]
 8007c12:	6878      	ldr	r0, [r7, #4]
 8007c14:	f7ff fec4 	bl	80079a0 <put_fat>
 8007c18:	4603      	mov	r3, r0
 8007c1a:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 8007c1c:	7bfb      	ldrb	r3, [r7, #15]
 8007c1e:	2b00      	cmp	r3, #0
 8007c20:	d120      	bne.n	8007c64 <remove_chain+0xa8>
			if (fs->free_clust != 0xFFFFFFFF) {	/* Update FSINFO */
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8007c28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c2c:	d00f      	beq.n	8007c4e <remove_chain+0x92>
				fs->free_clust++;
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8007c34:	1c5a      	adds	r2, r3, #1
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
				fs->fsi_flag |= 1;
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	f893 3205 	ldrb.w	r3, [r3, #517]	; 0x205
 8007c42:	f043 0301 	orr.w	r3, r3, #1
 8007c46:	b2da      	uxtb	r2, r3
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	f883 2205 	strb.w	r2, [r3, #517]	; 0x205
				rt[1] = clust2sect(fs, ecl) + fs->csize - 1;	/* End sector */
				disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Erase the block */
				scl = ecl = nxt;
			}
#endif
			clst = nxt;	/* Next cluster */
 8007c4e:	68bb      	ldr	r3, [r7, #8]
 8007c50:	603b      	str	r3, [r7, #0]
		while (clst < fs->n_fatent) {			/* Not a last link? */
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8007c58:	683a      	ldr	r2, [r7, #0]
 8007c5a:	429a      	cmp	r2, r3
 8007c5c:	d3c2      	bcc.n	8007be4 <remove_chain+0x28>
 8007c5e:	e002      	b.n	8007c66 <remove_chain+0xaa>
			if (nxt == 0) break;				/* Empty cluster? */
 8007c60:	bf00      	nop
 8007c62:	e000      	b.n	8007c66 <remove_chain+0xaa>
			if (res != FR_OK) break;
 8007c64:	bf00      	nop
		}
	}

	return res;
 8007c66:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c68:	4618      	mov	r0, r3
 8007c6a:	3710      	adds	r7, #16
 8007c6c:	46bd      	mov	sp, r7
 8007c6e:	bd80      	pop	{r7, pc}

08007c70 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	FATFS* fs,			/* File system object */
	DWORD clst			/* Cluster# to stretch. 0 means create a new chain. */
)
{
 8007c70:	b580      	push	{r7, lr}
 8007c72:	b086      	sub	sp, #24
 8007c74:	af00      	add	r7, sp, #0
 8007c76:	6078      	str	r0, [r7, #4]
 8007c78:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;


	if (clst == 0) {		/* Create a new chain */
 8007c7a:	683b      	ldr	r3, [r7, #0]
 8007c7c:	2b00      	cmp	r3, #0
 8007c7e:	d10f      	bne.n	8007ca0 <create_chain+0x30>
		scl = fs->last_clust;			/* Get suggested start point */
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8007c86:	613b      	str	r3, [r7, #16]
		if (!scl || scl >= fs->n_fatent) scl = 1;
 8007c88:	693b      	ldr	r3, [r7, #16]
 8007c8a:	2b00      	cmp	r3, #0
 8007c8c:	d005      	beq.n	8007c9a <create_chain+0x2a>
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8007c94:	693a      	ldr	r2, [r7, #16]
 8007c96:	429a      	cmp	r2, r3
 8007c98:	d31c      	bcc.n	8007cd4 <create_chain+0x64>
 8007c9a:	2301      	movs	r3, #1
 8007c9c:	613b      	str	r3, [r7, #16]
 8007c9e:	e019      	b.n	8007cd4 <create_chain+0x64>
	}
	else {					/* Stretch the current chain */
		cs = get_fat(fs, clst);			/* Check the cluster status */
 8007ca0:	6839      	ldr	r1, [r7, #0]
 8007ca2:	6878      	ldr	r0, [r7, #4]
 8007ca4:	f7ff fdc2 	bl	800782c <get_fat>
 8007ca8:	60b8      	str	r0, [r7, #8]
		if (cs < 2) return 1;			/* Invalid value */
 8007caa:	68bb      	ldr	r3, [r7, #8]
 8007cac:	2b01      	cmp	r3, #1
 8007cae:	d801      	bhi.n	8007cb4 <create_chain+0x44>
 8007cb0:	2301      	movs	r3, #1
 8007cb2:	e076      	b.n	8007da2 <create_chain+0x132>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8007cb4:	68bb      	ldr	r3, [r7, #8]
 8007cb6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007cba:	d101      	bne.n	8007cc0 <create_chain+0x50>
 8007cbc:	68bb      	ldr	r3, [r7, #8]
 8007cbe:	e070      	b.n	8007da2 <create_chain+0x132>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8007cc6:	68ba      	ldr	r2, [r7, #8]
 8007cc8:	429a      	cmp	r2, r3
 8007cca:	d201      	bcs.n	8007cd0 <create_chain+0x60>
 8007ccc:	68bb      	ldr	r3, [r7, #8]
 8007cce:	e068      	b.n	8007da2 <create_chain+0x132>
		scl = clst;
 8007cd0:	683b      	ldr	r3, [r7, #0]
 8007cd2:	613b      	str	r3, [r7, #16]
	}

	ncl = scl;				/* Start cluster */
 8007cd4:	693b      	ldr	r3, [r7, #16]
 8007cd6:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl++;							/* Next cluster */
 8007cd8:	697b      	ldr	r3, [r7, #20]
 8007cda:	3301      	adds	r3, #1
 8007cdc:	617b      	str	r3, [r7, #20]
		if (ncl >= fs->n_fatent) {		/* Check wrap around */
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8007ce4:	697a      	ldr	r2, [r7, #20]
 8007ce6:	429a      	cmp	r2, r3
 8007ce8:	d307      	bcc.n	8007cfa <create_chain+0x8a>
			ncl = 2;
 8007cea:	2302      	movs	r3, #2
 8007cec:	617b      	str	r3, [r7, #20]
			if (ncl > scl) return 0;	/* No free cluster */
 8007cee:	697a      	ldr	r2, [r7, #20]
 8007cf0:	693b      	ldr	r3, [r7, #16]
 8007cf2:	429a      	cmp	r2, r3
 8007cf4:	d901      	bls.n	8007cfa <create_chain+0x8a>
 8007cf6:	2300      	movs	r3, #0
 8007cf8:	e053      	b.n	8007da2 <create_chain+0x132>
		}
		cs = get_fat(fs, ncl);			/* Get the cluster status */
 8007cfa:	6979      	ldr	r1, [r7, #20]
 8007cfc:	6878      	ldr	r0, [r7, #4]
 8007cfe:	f7ff fd95 	bl	800782c <get_fat>
 8007d02:	60b8      	str	r0, [r7, #8]
		if (cs == 0) break;				/* Found a free cluster */
 8007d04:	68bb      	ldr	r3, [r7, #8]
 8007d06:	2b00      	cmp	r3, #0
 8007d08:	d00e      	beq.n	8007d28 <create_chain+0xb8>
		if (cs == 0xFFFFFFFF || cs == 1)/* An error occurred */
 8007d0a:	68bb      	ldr	r3, [r7, #8]
 8007d0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d10:	d002      	beq.n	8007d18 <create_chain+0xa8>
 8007d12:	68bb      	ldr	r3, [r7, #8]
 8007d14:	2b01      	cmp	r3, #1
 8007d16:	d101      	bne.n	8007d1c <create_chain+0xac>
			return cs;
 8007d18:	68bb      	ldr	r3, [r7, #8]
 8007d1a:	e042      	b.n	8007da2 <create_chain+0x132>
		if (ncl == scl) return 0;		/* No free cluster */
 8007d1c:	697a      	ldr	r2, [r7, #20]
 8007d1e:	693b      	ldr	r3, [r7, #16]
 8007d20:	429a      	cmp	r2, r3
 8007d22:	d1d9      	bne.n	8007cd8 <create_chain+0x68>
 8007d24:	2300      	movs	r3, #0
 8007d26:	e03c      	b.n	8007da2 <create_chain+0x132>
		if (cs == 0) break;				/* Found a free cluster */
 8007d28:	bf00      	nop
	}

	res = put_fat(fs, ncl, 0x0FFFFFFF);	/* Mark the new cluster "last link" */
 8007d2a:	f06f 4270 	mvn.w	r2, #4026531840	; 0xf0000000
 8007d2e:	6979      	ldr	r1, [r7, #20]
 8007d30:	6878      	ldr	r0, [r7, #4]
 8007d32:	f7ff fe35 	bl	80079a0 <put_fat>
 8007d36:	4603      	mov	r3, r0
 8007d38:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK && clst != 0) {
 8007d3a:	7bfb      	ldrb	r3, [r7, #15]
 8007d3c:	2b00      	cmp	r3, #0
 8007d3e:	d109      	bne.n	8007d54 <create_chain+0xe4>
 8007d40:	683b      	ldr	r3, [r7, #0]
 8007d42:	2b00      	cmp	r3, #0
 8007d44:	d006      	beq.n	8007d54 <create_chain+0xe4>
		res = put_fat(fs, clst, ncl);	/* Link it to the previous one if needed */
 8007d46:	697a      	ldr	r2, [r7, #20]
 8007d48:	6839      	ldr	r1, [r7, #0]
 8007d4a:	6878      	ldr	r0, [r7, #4]
 8007d4c:	f7ff fe28 	bl	80079a0 <put_fat>
 8007d50:	4603      	mov	r3, r0
 8007d52:	73fb      	strb	r3, [r7, #15]
	}
	if (res == FR_OK) {
 8007d54:	7bfb      	ldrb	r3, [r7, #15]
 8007d56:	2b00      	cmp	r3, #0
 8007d58:	d11a      	bne.n	8007d90 <create_chain+0x120>
		fs->last_clust = ncl;			/* Update FSINFO */
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	697a      	ldr	r2, [r7, #20]
 8007d5e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
		if (fs->free_clust != 0xFFFFFFFF) {
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8007d68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d6c:	d018      	beq.n	8007da0 <create_chain+0x130>
			fs->free_clust--;
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8007d74:	1e5a      	subs	r2, r3, #1
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
			fs->fsi_flag |= 1;
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	f893 3205 	ldrb.w	r3, [r3, #517]	; 0x205
 8007d82:	f043 0301 	orr.w	r3, r3, #1
 8007d86:	b2da      	uxtb	r2, r3
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	f883 2205 	strb.w	r2, [r3, #517]	; 0x205
 8007d8e:	e007      	b.n	8007da0 <create_chain+0x130>
		}
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;
 8007d90:	7bfb      	ldrb	r3, [r7, #15]
 8007d92:	2b01      	cmp	r3, #1
 8007d94:	d102      	bne.n	8007d9c <create_chain+0x12c>
 8007d96:	f04f 33ff 	mov.w	r3, #4294967295
 8007d9a:	e000      	b.n	8007d9e <create_chain+0x12e>
 8007d9c:	2301      	movs	r3, #1
 8007d9e:	617b      	str	r3, [r7, #20]
	}

	return ncl;		/* Return new cluster number or error code */
 8007da0:	697b      	ldr	r3, [r7, #20]
}
 8007da2:	4618      	mov	r0, r3
 8007da4:	3718      	adds	r7, #24
 8007da6:	46bd      	mov	sp, r7
 8007da8:	bd80      	pop	{r7, pc}

08007daa <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	DWORD ofs		/* File offset to be converted to cluster# */
)
{
 8007daa:	b480      	push	{r7}
 8007dac:	b087      	sub	sp, #28
 8007dae:	af00      	add	r7, sp, #0
 8007db0:	6078      	str	r0, [r7, #4]
 8007db2:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	f8d3 3224 	ldr.w	r3, [r3, #548]	; 0x224
 8007dba:	3304      	adds	r3, #4
 8007dbc:	613b      	str	r3, [r7, #16]
	cl = ofs / SS(fp->fs) / fp->fs->csize;	/* Cluster order from top of the file */
 8007dbe:	683b      	ldr	r3, [r7, #0]
 8007dc0:	0a5b      	lsrs	r3, r3, #9
 8007dc2:	687a      	ldr	r2, [r7, #4]
 8007dc4:	f8d2 2200 	ldr.w	r2, [r2, #512]	; 0x200
 8007dc8:	f892 2202 	ldrb.w	r2, [r2, #514]	; 0x202
 8007dcc:	fbb3 f3f2 	udiv	r3, r3, r2
 8007dd0:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8007dd2:	693b      	ldr	r3, [r7, #16]
 8007dd4:	1d1a      	adds	r2, r3, #4
 8007dd6:	613a      	str	r2, [r7, #16]
 8007dd8:	681b      	ldr	r3, [r3, #0]
 8007dda:	60fb      	str	r3, [r7, #12]
		if (!ncl) return 0;		/* End of table? (error) */
 8007ddc:	68fb      	ldr	r3, [r7, #12]
 8007dde:	2b00      	cmp	r3, #0
 8007de0:	d101      	bne.n	8007de6 <clmt_clust+0x3c>
 8007de2:	2300      	movs	r3, #0
 8007de4:	e010      	b.n	8007e08 <clmt_clust+0x5e>
		if (cl < ncl) break;	/* In this fragment? */
 8007de6:	697a      	ldr	r2, [r7, #20]
 8007de8:	68fb      	ldr	r3, [r7, #12]
 8007dea:	429a      	cmp	r2, r3
 8007dec:	d307      	bcc.n	8007dfe <clmt_clust+0x54>
		cl -= ncl; tbl++;		/* Next fragment */
 8007dee:	697a      	ldr	r2, [r7, #20]
 8007df0:	68fb      	ldr	r3, [r7, #12]
 8007df2:	1ad3      	subs	r3, r2, r3
 8007df4:	617b      	str	r3, [r7, #20]
 8007df6:	693b      	ldr	r3, [r7, #16]
 8007df8:	3304      	adds	r3, #4
 8007dfa:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8007dfc:	e7e9      	b.n	8007dd2 <clmt_clust+0x28>
		if (cl < ncl) break;	/* In this fragment? */
 8007dfe:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8007e00:	693b      	ldr	r3, [r7, #16]
 8007e02:	681a      	ldr	r2, [r3, #0]
 8007e04:	697b      	ldr	r3, [r7, #20]
 8007e06:	4413      	add	r3, r2
}
 8007e08:	4618      	mov	r0, r3
 8007e0a:	371c      	adds	r7, #28
 8007e0c:	46bd      	mov	sp, r7
 8007e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e12:	4770      	bx	lr

08007e14 <dir_sdi>:
static
FRESULT dir_sdi (
	DIR* dp,		/* Pointer to directory object */
	UINT idx		/* Index of directory table */
)
{
 8007e14:	b580      	push	{r7, lr}
 8007e16:	b086      	sub	sp, #24
 8007e18:	af00      	add	r7, sp, #0
 8007e1a:	6078      	str	r0, [r7, #4]
 8007e1c:	6039      	str	r1, [r7, #0]
	DWORD clst, sect;
	UINT ic;


	dp->index = (WORD)idx;	/* Current index */
 8007e1e:	683b      	ldr	r3, [r7, #0]
 8007e20:	b29a      	uxth	r2, r3
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	f8a3 2206 	strh.w	r2, [r3, #518]	; 0x206
	clst = dp->sclust;		/* Table start cluster (0:root) */
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 8007e2e:	617b      	str	r3, [r7, #20]
	if (clst == 1 || clst >= dp->fs->n_fatent)	/* Check start cluster range */
 8007e30:	697b      	ldr	r3, [r7, #20]
 8007e32:	2b01      	cmp	r3, #1
 8007e34:	d007      	beq.n	8007e46 <dir_sdi+0x32>
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8007e3c:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8007e40:	697a      	ldr	r2, [r7, #20]
 8007e42:	429a      	cmp	r2, r3
 8007e44:	d301      	bcc.n	8007e4a <dir_sdi+0x36>
		return FR_INT_ERR;
 8007e46:	2302      	movs	r3, #2
 8007e48:	e074      	b.n	8007f34 <dir_sdi+0x120>
	if (!clst && dp->fs->fs_type == FS_FAT32)	/* Replace cluster# 0 with root cluster# if in FAT32 */
 8007e4a:	697b      	ldr	r3, [r7, #20]
 8007e4c:	2b00      	cmp	r3, #0
 8007e4e:	d10c      	bne.n	8007e6a <dir_sdi+0x56>
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8007e56:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8007e5a:	2b03      	cmp	r3, #3
 8007e5c:	d105      	bne.n	8007e6a <dir_sdi+0x56>
		clst = dp->fs->dirbase;
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8007e64:	f8d3 3224 	ldr.w	r3, [r3, #548]	; 0x224
 8007e68:	617b      	str	r3, [r7, #20]

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8007e6a:	697b      	ldr	r3, [r7, #20]
 8007e6c:	2b00      	cmp	r3, #0
 8007e6e:	d111      	bne.n	8007e94 <dir_sdi+0x80>
		if (idx >= dp->fs->n_rootdir)	/* Is index out of range? */
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8007e76:	f8b3 3208 	ldrh.w	r3, [r3, #520]	; 0x208
 8007e7a:	461a      	mov	r2, r3
 8007e7c:	683b      	ldr	r3, [r7, #0]
 8007e7e:	4293      	cmp	r3, r2
 8007e80:	d301      	bcc.n	8007e86 <dir_sdi+0x72>
			return FR_INT_ERR;
 8007e82:	2302      	movs	r3, #2
 8007e84:	e056      	b.n	8007f34 <dir_sdi+0x120>
		sect = dp->fs->dirbase;
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8007e8c:	f8d3 3224 	ldr.w	r3, [r3, #548]	; 0x224
 8007e90:	613b      	str	r3, [r7, #16]
 8007e92:	e032      	b.n	8007efa <dir_sdi+0xe6>
	}
	else {				/* Dynamic table (root-directory in FAT32 or sub-directory) */
		ic = SS(dp->fs) / SZ_DIRE * dp->fs->csize;	/* Entries per cluster */
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8007e9a:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 8007e9e:	011b      	lsls	r3, r3, #4
 8007ea0:	60fb      	str	r3, [r7, #12]
		while (idx >= ic) {	/* Follow cluster chain */
 8007ea2:	e01e      	b.n	8007ee2 <dir_sdi+0xce>
			clst = get_fat(dp->fs, clst);				/* Get next cluster */
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8007eaa:	6979      	ldr	r1, [r7, #20]
 8007eac:	4618      	mov	r0, r3
 8007eae:	f7ff fcbd 	bl	800782c <get_fat>
 8007eb2:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8007eb4:	697b      	ldr	r3, [r7, #20]
 8007eb6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007eba:	d101      	bne.n	8007ec0 <dir_sdi+0xac>
 8007ebc:	2301      	movs	r3, #1
 8007ebe:	e039      	b.n	8007f34 <dir_sdi+0x120>
			if (clst < 2 || clst >= dp->fs->n_fatent)	/* Reached to end of table or internal error */
 8007ec0:	697b      	ldr	r3, [r7, #20]
 8007ec2:	2b01      	cmp	r3, #1
 8007ec4:	d907      	bls.n	8007ed6 <dir_sdi+0xc2>
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8007ecc:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8007ed0:	697a      	ldr	r2, [r7, #20]
 8007ed2:	429a      	cmp	r2, r3
 8007ed4:	d301      	bcc.n	8007eda <dir_sdi+0xc6>
				return FR_INT_ERR;
 8007ed6:	2302      	movs	r3, #2
 8007ed8:	e02c      	b.n	8007f34 <dir_sdi+0x120>
			idx -= ic;
 8007eda:	683a      	ldr	r2, [r7, #0]
 8007edc:	68fb      	ldr	r3, [r7, #12]
 8007ede:	1ad3      	subs	r3, r2, r3
 8007ee0:	603b      	str	r3, [r7, #0]
		while (idx >= ic) {	/* Follow cluster chain */
 8007ee2:	683a      	ldr	r2, [r7, #0]
 8007ee4:	68fb      	ldr	r3, [r7, #12]
 8007ee6:	429a      	cmp	r2, r3
 8007ee8:	d2dc      	bcs.n	8007ea4 <dir_sdi+0x90>
		}
		sect = clust2sect(dp->fs, clst);
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8007ef0:	6979      	ldr	r1, [r7, #20]
 8007ef2:	4618      	mov	r0, r3
 8007ef4:	f7ff fc78 	bl	80077e8 <clust2sect>
 8007ef8:	6138      	str	r0, [r7, #16]
	}
	dp->clust = clst;	/* Current cluster# */
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	697a      	ldr	r2, [r7, #20]
 8007efe:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
	if (!sect) return FR_INT_ERR;
 8007f02:	693b      	ldr	r3, [r7, #16]
 8007f04:	2b00      	cmp	r3, #0
 8007f06:	d101      	bne.n	8007f0c <dir_sdi+0xf8>
 8007f08:	2302      	movs	r3, #2
 8007f0a:	e013      	b.n	8007f34 <dir_sdi+0x120>
	dp->sect = sect + idx / (SS(dp->fs) / SZ_DIRE);					/* Sector# of the directory entry */
 8007f0c:	683b      	ldr	r3, [r7, #0]
 8007f0e:	091a      	lsrs	r2, r3, #4
 8007f10:	693b      	ldr	r3, [r7, #16]
 8007f12:	441a      	add	r2, r3
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
	dp->dir = dp->fs->win.d8 + (idx % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Ptr to the entry in the sector */
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8007f20:	461a      	mov	r2, r3
 8007f22:	683b      	ldr	r3, [r7, #0]
 8007f24:	f003 030f 	and.w	r3, r3, #15
 8007f28:	015b      	lsls	r3, r3, #5
 8007f2a:	441a      	add	r2, r3
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

	return FR_OK;
 8007f32:	2300      	movs	r3, #0
}
 8007f34:	4618      	mov	r0, r3
 8007f36:	3718      	adds	r7, #24
 8007f38:	46bd      	mov	sp, r7
 8007f3a:	bd80      	pop	{r7, pc}

08007f3c <dir_next>:
static
FRESULT dir_next (	/* FR_OK:Succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8007f3c:	b590      	push	{r4, r7, lr}
 8007f3e:	b087      	sub	sp, #28
 8007f40:	af00      	add	r7, sp, #0
 8007f42:	6078      	str	r0, [r7, #4]
 8007f44:	6039      	str	r1, [r7, #0]
#if !_FS_READONLY
	UINT c;
#endif


	i = dp->index + 1;
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	f8b3 3206 	ldrh.w	r3, [r3, #518]	; 0x206
 8007f4c:	3301      	adds	r3, #1
 8007f4e:	60fb      	str	r3, [r7, #12]
	if (!(i & 0xFFFF) || !dp->sect)	/* Report EOT when index has reached 65535 */
 8007f50:	68fb      	ldr	r3, [r7, #12]
 8007f52:	b29b      	uxth	r3, r3
 8007f54:	2b00      	cmp	r3, #0
 8007f56:	d004      	beq.n	8007f62 <dir_next+0x26>
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8007f5e:	2b00      	cmp	r3, #0
 8007f60:	d101      	bne.n	8007f66 <dir_next+0x2a>
		return FR_NO_FILE;
 8007f62:	2304      	movs	r3, #4
 8007f64:	e0dd      	b.n	8008122 <dir_next+0x1e6>

	if (!(i % (SS(dp->fs) / SZ_DIRE))) {	/* Sector changed? */
 8007f66:	68fb      	ldr	r3, [r7, #12]
 8007f68:	f003 030f 	and.w	r3, r3, #15
 8007f6c:	2b00      	cmp	r3, #0
 8007f6e:	f040 80c6 	bne.w	80080fe <dir_next+0x1c2>
		dp->sect++;					/* Next sector */
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8007f78:	1c5a      	adds	r2, r3, #1
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

		if (!dp->clust) {		/* Static table */
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8007f86:	2b00      	cmp	r3, #0
 8007f88:	d10b      	bne.n	8007fa2 <dir_next+0x66>
			if (i >= dp->fs->n_rootdir)	/* Report EOT if it reached end of static table */
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8007f90:	f8b3 3208 	ldrh.w	r3, [r3, #520]	; 0x208
 8007f94:	461a      	mov	r2, r3
 8007f96:	68fb      	ldr	r3, [r7, #12]
 8007f98:	4293      	cmp	r3, r2
 8007f9a:	f0c0 80b0 	bcc.w	80080fe <dir_next+0x1c2>
				return FR_NO_FILE;
 8007f9e:	2304      	movs	r3, #4
 8007fa0:	e0bf      	b.n	8008122 <dir_next+0x1e6>
		}
		else {					/* Dynamic table */
			if (((i / (SS(dp->fs) / SZ_DIRE)) & (dp->fs->csize - 1)) == 0) {	/* Cluster changed? */
 8007fa2:	68fb      	ldr	r3, [r7, #12]
 8007fa4:	091b      	lsrs	r3, r3, #4
 8007fa6:	687a      	ldr	r2, [r7, #4]
 8007fa8:	f8d2 2200 	ldr.w	r2, [r2, #512]	; 0x200
 8007fac:	f892 2202 	ldrb.w	r2, [r2, #514]	; 0x202
 8007fb0:	3a01      	subs	r2, #1
 8007fb2:	4013      	ands	r3, r2
 8007fb4:	2b00      	cmp	r3, #0
 8007fb6:	f040 80a2 	bne.w	80080fe <dir_next+0x1c2>
				clst = get_fat(dp->fs, dp->clust);				/* Get next cluster */
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8007fc6:	4619      	mov	r1, r3
 8007fc8:	4610      	mov	r0, r2
 8007fca:	f7ff fc2f 	bl	800782c <get_fat>
 8007fce:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;
 8007fd0:	697b      	ldr	r3, [r7, #20]
 8007fd2:	2b01      	cmp	r3, #1
 8007fd4:	d801      	bhi.n	8007fda <dir_next+0x9e>
 8007fd6:	2302      	movs	r3, #2
 8007fd8:	e0a3      	b.n	8008122 <dir_next+0x1e6>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 8007fda:	697b      	ldr	r3, [r7, #20]
 8007fdc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007fe0:	d101      	bne.n	8007fe6 <dir_next+0xaa>
 8007fe2:	2301      	movs	r3, #1
 8007fe4:	e09d      	b.n	8008122 <dir_next+0x1e6>
				if (clst >= dp->fs->n_fatent) {					/* If it reached end of dynamic table, */
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8007fec:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8007ff0:	697a      	ldr	r2, [r7, #20]
 8007ff2:	429a      	cmp	r2, r3
 8007ff4:	d374      	bcc.n	80080e0 <dir_next+0x1a4>
#if !_FS_READONLY
					if (!stretch) return FR_NO_FILE;			/* If do not stretch, report EOT */
 8007ff6:	683b      	ldr	r3, [r7, #0]
 8007ff8:	2b00      	cmp	r3, #0
 8007ffa:	d101      	bne.n	8008000 <dir_next+0xc4>
 8007ffc:	2304      	movs	r3, #4
 8007ffe:	e090      	b.n	8008122 <dir_next+0x1e6>
					clst = create_chain(dp->fs, dp->clust);		/* Stretch cluster chain */
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 800800c:	4619      	mov	r1, r3
 800800e:	4610      	mov	r0, r2
 8008010:	f7ff fe2e 	bl	8007c70 <create_chain>
 8008014:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8008016:	697b      	ldr	r3, [r7, #20]
 8008018:	2b00      	cmp	r3, #0
 800801a:	d101      	bne.n	8008020 <dir_next+0xe4>
 800801c:	2307      	movs	r3, #7
 800801e:	e080      	b.n	8008122 <dir_next+0x1e6>
					if (clst == 1) return FR_INT_ERR;
 8008020:	697b      	ldr	r3, [r7, #20]
 8008022:	2b01      	cmp	r3, #1
 8008024:	d101      	bne.n	800802a <dir_next+0xee>
 8008026:	2302      	movs	r3, #2
 8008028:	e07b      	b.n	8008122 <dir_next+0x1e6>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 800802a:	697b      	ldr	r3, [r7, #20]
 800802c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008030:	d101      	bne.n	8008036 <dir_next+0xfa>
 8008032:	2301      	movs	r3, #1
 8008034:	e075      	b.n	8008122 <dir_next+0x1e6>
					/* Clean-up stretched table */
					if (sync_window(dp->fs)) return FR_DISK_ERR;/* Flush disk access window */
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800803c:	4618      	mov	r0, r3
 800803e:	f7ff faaf 	bl	80075a0 <sync_window>
 8008042:	4603      	mov	r3, r0
 8008044:	2b00      	cmp	r3, #0
 8008046:	d001      	beq.n	800804c <dir_next+0x110>
 8008048:	2301      	movs	r3, #1
 800804a:	e06a      	b.n	8008122 <dir_next+0x1e6>
					mem_set(dp->fs->win.d8, 0, SS(dp->fs));		/* Clear window buffer */
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8008052:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008056:	2100      	movs	r1, #0
 8008058:	4618      	mov	r0, r3
 800805a:	f7ff f88c 	bl	8007176 <mem_set>
					dp->fs->winsect = clust2sect(dp->fs, clst);	/* Cluster start sector */
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	f8d3 4200 	ldr.w	r4, [r3, #512]	; 0x200
 800806a:	6979      	ldr	r1, [r7, #20]
 800806c:	4610      	mov	r0, r2
 800806e:	f7ff fbbb 	bl	80077e8 <clust2sect>
 8008072:	4603      	mov	r3, r0
 8008074:	f8c4 322c 	str.w	r3, [r4, #556]	; 0x22c
					for (c = 0; c < dp->fs->csize; c++) {		/* Fill the new cluster with 0 */
 8008078:	2300      	movs	r3, #0
 800807a:	613b      	str	r3, [r7, #16]
 800807c:	e01b      	b.n	80080b6 <dir_next+0x17a>
						dp->fs->wflag = 1;
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8008084:	2201      	movs	r2, #1
 8008086:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
						if (sync_window(dp->fs)) return FR_DISK_ERR;
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8008090:	4618      	mov	r0, r3
 8008092:	f7ff fa85 	bl	80075a0 <sync_window>
 8008096:	4603      	mov	r3, r0
 8008098:	2b00      	cmp	r3, #0
 800809a:	d001      	beq.n	80080a0 <dir_next+0x164>
 800809c:	2301      	movs	r3, #1
 800809e:	e040      	b.n	8008122 <dir_next+0x1e6>
						dp->fs->winsect++;
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80080a6:	f8d3 222c 	ldr.w	r2, [r3, #556]	; 0x22c
 80080aa:	3201      	adds	r2, #1
 80080ac:	f8c3 222c 	str.w	r2, [r3, #556]	; 0x22c
					for (c = 0; c < dp->fs->csize; c++) {		/* Fill the new cluster with 0 */
 80080b0:	693b      	ldr	r3, [r7, #16]
 80080b2:	3301      	adds	r3, #1
 80080b4:	613b      	str	r3, [r7, #16]
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80080bc:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 80080c0:	461a      	mov	r2, r3
 80080c2:	693b      	ldr	r3, [r7, #16]
 80080c4:	4293      	cmp	r3, r2
 80080c6:	d3da      	bcc.n	800807e <dir_next+0x142>
					}
					dp->fs->winsect -= c;						/* Rewind window offset */
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80080ce:	f8d3 122c 	ldr.w	r1, [r3, #556]	; 0x22c
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80080d8:	693a      	ldr	r2, [r7, #16]
 80080da:	1a8a      	subs	r2, r1, r2
 80080dc:	f8c3 222c 	str.w	r2, [r3, #556]	; 0x22c
#else
					if (!stretch) return FR_NO_FILE;			/* If do not stretch, report EOT (this is to suppress warning) */
					return FR_NO_FILE;							/* Report EOT */
#endif
				}
				dp->clust = clst;				/* Initialize data for new cluster */
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	697a      	ldr	r2, [r7, #20]
 80080e4:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
				dp->sect = clust2sect(dp->fs, clst);
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80080ee:	6979      	ldr	r1, [r7, #20]
 80080f0:	4618      	mov	r0, r3
 80080f2:	f7ff fb79 	bl	80077e8 <clust2sect>
 80080f6:	4602      	mov	r2, r0
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
			}
		}
	}

	dp->index = (WORD)i;	/* Current index */
 80080fe:	68fb      	ldr	r3, [r7, #12]
 8008100:	b29a      	uxth	r2, r3
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	f8a3 2206 	strh.w	r2, [r3, #518]	; 0x206
	dp->dir = dp->fs->win.d8 + (i % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Current entry in the window */
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800810e:	461a      	mov	r2, r3
 8008110:	68fb      	ldr	r3, [r7, #12]
 8008112:	f003 030f 	and.w	r3, r3, #15
 8008116:	015b      	lsls	r3, r3, #5
 8008118:	441a      	add	r2, r3
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

	return FR_OK;
 8008120:	2300      	movs	r3, #0
}
 8008122:	4618      	mov	r0, r3
 8008124:	371c      	adds	r7, #28
 8008126:	46bd      	mov	sp, r7
 8008128:	bd90      	pop	{r4, r7, pc}

0800812a <dir_alloc>:
static
FRESULT dir_alloc (
	DIR* dp,	/* Pointer to the directory object */
	UINT nent	/* Number of contiguous entries to allocate (1-21) */
)
{
 800812a:	b580      	push	{r7, lr}
 800812c:	b084      	sub	sp, #16
 800812e:	af00      	add	r7, sp, #0
 8008130:	6078      	str	r0, [r7, #4]
 8008132:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;


	res = dir_sdi(dp, 0);
 8008134:	2100      	movs	r1, #0
 8008136:	6878      	ldr	r0, [r7, #4]
 8008138:	f7ff fe6c 	bl	8007e14 <dir_sdi>
 800813c:	4603      	mov	r3, r0
 800813e:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8008140:	7bfb      	ldrb	r3, [r7, #15]
 8008142:	2b00      	cmp	r3, #0
 8008144:	d131      	bne.n	80081aa <dir_alloc+0x80>
		n = 0;
 8008146:	2300      	movs	r3, #0
 8008148:	60bb      	str	r3, [r7, #8]
		do {
			res = move_window(dp->fs, dp->sect);
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8008156:	4619      	mov	r1, r3
 8008158:	4610      	mov	r0, r2
 800815a:	f7ff fa6a 	bl	8007632 <move_window>
 800815e:	4603      	mov	r3, r0
 8008160:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 8008162:	7bfb      	ldrb	r3, [r7, #15]
 8008164:	2b00      	cmp	r3, #0
 8008166:	d11f      	bne.n	80081a8 <dir_alloc+0x7e>
			if (dp->dir[0] == DDEM || dp->dir[0] == 0) {	/* Is it a free entry? */
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800816e:	781b      	ldrb	r3, [r3, #0]
 8008170:	2be5      	cmp	r3, #229	; 0xe5
 8008172:	d005      	beq.n	8008180 <dir_alloc+0x56>
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800817a:	781b      	ldrb	r3, [r3, #0]
 800817c:	2b00      	cmp	r3, #0
 800817e:	d107      	bne.n	8008190 <dir_alloc+0x66>
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8008180:	68bb      	ldr	r3, [r7, #8]
 8008182:	3301      	adds	r3, #1
 8008184:	60bb      	str	r3, [r7, #8]
 8008186:	68ba      	ldr	r2, [r7, #8]
 8008188:	683b      	ldr	r3, [r7, #0]
 800818a:	429a      	cmp	r2, r3
 800818c:	d102      	bne.n	8008194 <dir_alloc+0x6a>
 800818e:	e00c      	b.n	80081aa <dir_alloc+0x80>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8008190:	2300      	movs	r3, #0
 8008192:	60bb      	str	r3, [r7, #8]
			}
			res = dir_next(dp, 1);		/* Next entry with table stretch enabled */
 8008194:	2101      	movs	r1, #1
 8008196:	6878      	ldr	r0, [r7, #4]
 8008198:	f7ff fed0 	bl	8007f3c <dir_next>
 800819c:	4603      	mov	r3, r0
 800819e:	73fb      	strb	r3, [r7, #15]
		} while (res == FR_OK);
 80081a0:	7bfb      	ldrb	r3, [r7, #15]
 80081a2:	2b00      	cmp	r3, #0
 80081a4:	d0d1      	beq.n	800814a <dir_alloc+0x20>
 80081a6:	e000      	b.n	80081aa <dir_alloc+0x80>
			if (res != FR_OK) break;
 80081a8:	bf00      	nop
	}
	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 80081aa:	7bfb      	ldrb	r3, [r7, #15]
 80081ac:	2b04      	cmp	r3, #4
 80081ae:	d101      	bne.n	80081b4 <dir_alloc+0x8a>
 80081b0:	2307      	movs	r3, #7
 80081b2:	73fb      	strb	r3, [r7, #15]
	return res;
 80081b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80081b6:	4618      	mov	r0, r3
 80081b8:	3710      	adds	r7, #16
 80081ba:	46bd      	mov	sp, r7
 80081bc:	bd80      	pop	{r7, pc}

080081be <ld_clust>:
static
DWORD ld_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir	/* Pointer to the directory entry */
)
{
 80081be:	b480      	push	{r7}
 80081c0:	b085      	sub	sp, #20
 80081c2:	af00      	add	r7, sp, #0
 80081c4:	6078      	str	r0, [r7, #4]
 80081c6:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = LD_WORD(dir + DIR_FstClusLO);
 80081c8:	683b      	ldr	r3, [r7, #0]
 80081ca:	331b      	adds	r3, #27
 80081cc:	781b      	ldrb	r3, [r3, #0]
 80081ce:	021b      	lsls	r3, r3, #8
 80081d0:	b21a      	sxth	r2, r3
 80081d2:	683b      	ldr	r3, [r7, #0]
 80081d4:	331a      	adds	r3, #26
 80081d6:	781b      	ldrb	r3, [r3, #0]
 80081d8:	b21b      	sxth	r3, r3
 80081da:	4313      	orrs	r3, r2
 80081dc:	b21b      	sxth	r3, r3
 80081de:	b29b      	uxth	r3, r3
 80081e0:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32)
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80081e8:	2b03      	cmp	r3, #3
 80081ea:	d10f      	bne.n	800820c <ld_clust+0x4e>
		cl |= (DWORD)LD_WORD(dir + DIR_FstClusHI) << 16;
 80081ec:	683b      	ldr	r3, [r7, #0]
 80081ee:	3315      	adds	r3, #21
 80081f0:	781b      	ldrb	r3, [r3, #0]
 80081f2:	021b      	lsls	r3, r3, #8
 80081f4:	b21a      	sxth	r2, r3
 80081f6:	683b      	ldr	r3, [r7, #0]
 80081f8:	3314      	adds	r3, #20
 80081fa:	781b      	ldrb	r3, [r3, #0]
 80081fc:	b21b      	sxth	r3, r3
 80081fe:	4313      	orrs	r3, r2
 8008200:	b21b      	sxth	r3, r3
 8008202:	b29b      	uxth	r3, r3
 8008204:	041b      	lsls	r3, r3, #16
 8008206:	68fa      	ldr	r2, [r7, #12]
 8008208:	4313      	orrs	r3, r2
 800820a:	60fb      	str	r3, [r7, #12]

	return cl;
 800820c:	68fb      	ldr	r3, [r7, #12]
}
 800820e:	4618      	mov	r0, r3
 8008210:	3714      	adds	r7, #20
 8008212:	46bd      	mov	sp, r7
 8008214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008218:	4770      	bx	lr

0800821a <st_clust>:
static
void st_clust (
	BYTE* dir,	/* Pointer to the directory entry */
	DWORD cl	/* Value to be set */
)
{
 800821a:	b480      	push	{r7}
 800821c:	b083      	sub	sp, #12
 800821e:	af00      	add	r7, sp, #0
 8008220:	6078      	str	r0, [r7, #4]
 8008222:	6039      	str	r1, [r7, #0]
	ST_WORD(dir + DIR_FstClusLO, cl);
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	331a      	adds	r3, #26
 8008228:	683a      	ldr	r2, [r7, #0]
 800822a:	b2d2      	uxtb	r2, r2
 800822c:	701a      	strb	r2, [r3, #0]
 800822e:	683b      	ldr	r3, [r7, #0]
 8008230:	b29b      	uxth	r3, r3
 8008232:	0a1b      	lsrs	r3, r3, #8
 8008234:	b29a      	uxth	r2, r3
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	331b      	adds	r3, #27
 800823a:	b2d2      	uxtb	r2, r2
 800823c:	701a      	strb	r2, [r3, #0]
	ST_WORD(dir + DIR_FstClusHI, cl >> 16);
 800823e:	683b      	ldr	r3, [r7, #0]
 8008240:	0c1a      	lsrs	r2, r3, #16
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	3314      	adds	r3, #20
 8008246:	b2d2      	uxtb	r2, r2
 8008248:	701a      	strb	r2, [r3, #0]
 800824a:	683b      	ldr	r3, [r7, #0]
 800824c:	0c1b      	lsrs	r3, r3, #16
 800824e:	b29b      	uxth	r3, r3
 8008250:	0a1b      	lsrs	r3, r3, #8
 8008252:	b29a      	uxth	r2, r3
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	3315      	adds	r3, #21
 8008258:	b2d2      	uxtb	r2, r2
 800825a:	701a      	strb	r2, [r3, #0]
}
 800825c:	bf00      	nop
 800825e:	370c      	adds	r7, #12
 8008260:	46bd      	mov	sp, r7
 8008262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008266:	4770      	bx	lr

08008268 <dir_find>:

static
FRESULT dir_find (
	DIR* dp			/* Pointer to the directory object linked to the file name */
)
{
 8008268:	b580      	push	{r7, lr}
 800826a:	b086      	sub	sp, #24
 800826c:	af00      	add	r7, sp, #0
 800826e:	6078      	str	r0, [r7, #4]
	BYTE c, *dir;
#if _USE_LFN
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8008270:	2100      	movs	r1, #0
 8008272:	6878      	ldr	r0, [r7, #4]
 8008274:	f7ff fdce 	bl	8007e14 <dir_sdi>
 8008278:	4603      	mov	r3, r0
 800827a:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800827c:	7dfb      	ldrb	r3, [r7, #23]
 800827e:	2b00      	cmp	r3, #0
 8008280:	d001      	beq.n	8008286 <dir_find+0x1e>
 8008282:	7dfb      	ldrb	r3, [r7, #23]
 8008284:	e03b      	b.n	80082fe <dir_find+0x96>

#if _USE_LFN
	ord = sum = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(dp->fs, dp->sect);
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8008292:	4619      	mov	r1, r3
 8008294:	4610      	mov	r0, r2
 8008296:	f7ff f9cc 	bl	8007632 <move_window>
 800829a:	4603      	mov	r3, r0
 800829c:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800829e:	7dfb      	ldrb	r3, [r7, #23]
 80082a0:	2b00      	cmp	r3, #0
 80082a2:	d128      	bne.n	80082f6 <dir_find+0x8e>
		dir = dp->dir;					/* Ptr to the directory entry of current index */
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80082aa:	613b      	str	r3, [r7, #16]
		c = dir[DIR_Name];
 80082ac:	693b      	ldr	r3, [r7, #16]
 80082ae:	781b      	ldrb	r3, [r3, #0]
 80082b0:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 80082b2:	7bfb      	ldrb	r3, [r7, #15]
 80082b4:	2b00      	cmp	r3, #0
 80082b6:	d102      	bne.n	80082be <dir_find+0x56>
 80082b8:	2304      	movs	r3, #4
 80082ba:	75fb      	strb	r3, [r7, #23]
 80082bc:	e01e      	b.n	80082fc <dir_find+0x94>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		if (!(dir[DIR_Attr] & AM_VOL) && !mem_cmp(dir, dp->fn, 11)) /* Is it a valid entry? */
 80082be:	693b      	ldr	r3, [r7, #16]
 80082c0:	330b      	adds	r3, #11
 80082c2:	781b      	ldrb	r3, [r3, #0]
 80082c4:	f003 0308 	and.w	r3, r3, #8
 80082c8:	2b00      	cmp	r3, #0
 80082ca:	d10a      	bne.n	80082e2 <dir_find+0x7a>
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 80082d2:	220b      	movs	r2, #11
 80082d4:	4619      	mov	r1, r3
 80082d6:	6938      	ldr	r0, [r7, #16]
 80082d8:	f7fe ff68 	bl	80071ac <mem_cmp>
 80082dc:	4603      	mov	r3, r0
 80082de:	2b00      	cmp	r3, #0
 80082e0:	d00b      	beq.n	80082fa <dir_find+0x92>
			break;
#endif
		res = dir_next(dp, 0);		/* Next entry */
 80082e2:	2100      	movs	r1, #0
 80082e4:	6878      	ldr	r0, [r7, #4]
 80082e6:	f7ff fe29 	bl	8007f3c <dir_next>
 80082ea:	4603      	mov	r3, r0
 80082ec:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 80082ee:	7dfb      	ldrb	r3, [r7, #23]
 80082f0:	2b00      	cmp	r3, #0
 80082f2:	d0c8      	beq.n	8008286 <dir_find+0x1e>
 80082f4:	e002      	b.n	80082fc <dir_find+0x94>
		if (res != FR_OK) break;
 80082f6:	bf00      	nop
 80082f8:	e000      	b.n	80082fc <dir_find+0x94>
			break;
 80082fa:	bf00      	nop

	return res;
 80082fc:	7dfb      	ldrb	r3, [r7, #23]
}
 80082fe:	4618      	mov	r0, r3
 8008300:	3718      	adds	r7, #24
 8008302:	46bd      	mov	sp, r7
 8008304:	bd80      	pop	{r7, pc}

08008306 <dir_register>:
#if !_FS_READONLY
static
FRESULT dir_register (	/* FR_OK:Successful, FR_DENIED:No free entry or too many SFN collision, FR_DISK_ERR:Disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8008306:	b580      	push	{r7, lr}
 8008308:	b084      	sub	sp, #16
 800830a:	af00      	add	r7, sp, #0
 800830c:	6078      	str	r0, [r7, #4]
				res = dir_next(dp, 0);	/* Next entry */
			} while (res == FR_OK && --nent);
		}
	}
#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 800830e:	2101      	movs	r1, #1
 8008310:	6878      	ldr	r0, [r7, #4]
 8008312:	f7ff ff0a 	bl	800812a <dir_alloc>
 8008316:	4603      	mov	r3, r0
 8008318:	73fb      	strb	r3, [r7, #15]
#endif

	if (res == FR_OK) {				/* Set SFN entry */
 800831a:	7bfb      	ldrb	r3, [r7, #15]
 800831c:	2b00      	cmp	r3, #0
 800831e:	d126      	bne.n	800836e <dir_register+0x68>
		res = move_window(dp->fs, dp->sect);
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800832c:	4619      	mov	r1, r3
 800832e:	4610      	mov	r0, r2
 8008330:	f7ff f97f 	bl	8007632 <move_window>
 8008334:	4603      	mov	r3, r0
 8008336:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8008338:	7bfb      	ldrb	r3, [r7, #15]
 800833a:	2b00      	cmp	r3, #0
 800833c:	d117      	bne.n	800836e <dir_register+0x68>
			mem_set(dp->dir, 0, SZ_DIRE);	/* Clean the entry */
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8008344:	2220      	movs	r2, #32
 8008346:	2100      	movs	r1, #0
 8008348:	4618      	mov	r0, r3
 800834a:	f7fe ff14 	bl	8007176 <mem_set>
			mem_cpy(dp->dir, dp->fn, 11);	/* Put SFN */
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	f8d3 0214 	ldr.w	r0, [r3, #532]	; 0x214
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800835a:	220b      	movs	r2, #11
 800835c:	4619      	mov	r1, r3
 800835e:	f7fe feeb 	bl	8007138 <mem_cpy>
#if _USE_LFN
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			dp->fs->wflag = 1;
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8008368:	2201      	movs	r2, #1
 800836a:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
		}
	}

	return res;
 800836e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008370:	4618      	mov	r0, r3
 8008372:	3710      	adds	r7, #16
 8008374:	46bd      	mov	sp, r7
 8008376:	bd80      	pop	{r7, pc}

08008378 <create_name>:
static
FRESULT create_name (
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8008378:	b580      	push	{r7, lr}
 800837a:	b088      	sub	sp, #32
 800837c:	af00      	add	r7, sp, #0
 800837e:	6078      	str	r0, [r7, #4]
 8008380:	6039      	str	r1, [r7, #0]
	BYTE b, c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	for (p = *path; *p == '/' || *p == '\\'; p++) ;	/* Strip duplicated separator */
 8008382:	683b      	ldr	r3, [r7, #0]
 8008384:	681b      	ldr	r3, [r3, #0]
 8008386:	60fb      	str	r3, [r7, #12]
 8008388:	e002      	b.n	8008390 <create_name+0x18>
 800838a:	68fb      	ldr	r3, [r7, #12]
 800838c:	3301      	adds	r3, #1
 800838e:	60fb      	str	r3, [r7, #12]
 8008390:	68fb      	ldr	r3, [r7, #12]
 8008392:	781b      	ldrb	r3, [r3, #0]
 8008394:	2b2f      	cmp	r3, #47	; 0x2f
 8008396:	d0f8      	beq.n	800838a <create_name+0x12>
 8008398:	68fb      	ldr	r3, [r7, #12]
 800839a:	781b      	ldrb	r3, [r3, #0]
 800839c:	2b5c      	cmp	r3, #92	; 0x5c
 800839e:	d0f4      	beq.n	800838a <create_name+0x12>
	sfn = dp->fn;
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 80083a6:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 80083a8:	220b      	movs	r2, #11
 80083aa:	2120      	movs	r1, #32
 80083ac:	68b8      	ldr	r0, [r7, #8]
 80083ae:	f7fe fee2 	bl	8007176 <mem_set>
	si = i = b = 0; ni = 8;
 80083b2:	2300      	movs	r3, #0
 80083b4:	77fb      	strb	r3, [r7, #31]
 80083b6:	2300      	movs	r3, #0
 80083b8:	613b      	str	r3, [r7, #16]
 80083ba:	693b      	ldr	r3, [r7, #16]
 80083bc:	617b      	str	r3, [r7, #20]
 80083be:	2308      	movs	r3, #8
 80083c0:	61bb      	str	r3, [r7, #24]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 80083c2:	697b      	ldr	r3, [r7, #20]
 80083c4:	1c5a      	adds	r2, r3, #1
 80083c6:	617a      	str	r2, [r7, #20]
 80083c8:	68fa      	ldr	r2, [r7, #12]
 80083ca:	4413      	add	r3, r2
 80083cc:	781b      	ldrb	r3, [r3, #0]
 80083ce:	77bb      	strb	r3, [r7, #30]
		if (c <= ' ' || c == '/' || c == '\\') break;	/* Break on end of segment */
 80083d0:	7fbb      	ldrb	r3, [r7, #30]
 80083d2:	2b20      	cmp	r3, #32
 80083d4:	d953      	bls.n	800847e <create_name+0x106>
 80083d6:	7fbb      	ldrb	r3, [r7, #30]
 80083d8:	2b2f      	cmp	r3, #47	; 0x2f
 80083da:	d050      	beq.n	800847e <create_name+0x106>
 80083dc:	7fbb      	ldrb	r3, [r7, #30]
 80083de:	2b5c      	cmp	r3, #92	; 0x5c
 80083e0:	d04d      	beq.n	800847e <create_name+0x106>
		if (c == '.' || i >= ni) {
 80083e2:	7fbb      	ldrb	r3, [r7, #30]
 80083e4:	2b2e      	cmp	r3, #46	; 0x2e
 80083e6:	d003      	beq.n	80083f0 <create_name+0x78>
 80083e8:	693a      	ldr	r2, [r7, #16]
 80083ea:	69bb      	ldr	r3, [r7, #24]
 80083ec:	429a      	cmp	r2, r3
 80083ee:	d30f      	bcc.n	8008410 <create_name+0x98>
			if (ni != 8 || c != '.') return FR_INVALID_NAME;
 80083f0:	69bb      	ldr	r3, [r7, #24]
 80083f2:	2b08      	cmp	r3, #8
 80083f4:	d102      	bne.n	80083fc <create_name+0x84>
 80083f6:	7fbb      	ldrb	r3, [r7, #30]
 80083f8:	2b2e      	cmp	r3, #46	; 0x2e
 80083fa:	d001      	beq.n	8008400 <create_name+0x88>
 80083fc:	2306      	movs	r3, #6
 80083fe:	e073      	b.n	80084e8 <create_name+0x170>
			i = 8; ni = 11;
 8008400:	2308      	movs	r3, #8
 8008402:	613b      	str	r3, [r7, #16]
 8008404:	230b      	movs	r3, #11
 8008406:	61bb      	str	r3, [r7, #24]
			b <<= 2; continue;
 8008408:	7ffb      	ldrb	r3, [r7, #31]
 800840a:	009b      	lsls	r3, r3, #2
 800840c:	77fb      	strb	r3, [r7, #31]
 800840e:	e035      	b.n	800847c <create_name+0x104>
		}
		if (c >= 0x80) {				/* Extended character? */
 8008410:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8008414:	2b00      	cmp	r3, #0
 8008416:	da08      	bge.n	800842a <create_name+0xb2>
			b |= 3;						/* Eliminate NT flag */
 8008418:	7ffb      	ldrb	r3, [r7, #31]
 800841a:	f043 0303 	orr.w	r3, r3, #3
 800841e:	77fb      	strb	r3, [r7, #31]
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 8008420:	7fbb      	ldrb	r3, [r7, #30]
 8008422:	3b80      	subs	r3, #128	; 0x80
 8008424:	4a32      	ldr	r2, [pc, #200]	; (80084f0 <create_name+0x178>)
 8008426:	5cd3      	ldrb	r3, [r2, r3]
 8008428:	77bb      	strb	r3, [r7, #30]
			if (!IsDBCS2(d) || i >= ni - 1)	/* Reject invalid DBC */
				return FR_INVALID_NAME;
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c))	/* Reject illegal chrs for SFN */
 800842a:	7fbb      	ldrb	r3, [r7, #30]
 800842c:	4619      	mov	r1, r3
 800842e:	4831      	ldr	r0, [pc, #196]	; (80084f4 <create_name+0x17c>)
 8008430:	f7fe fee3 	bl	80071fa <chk_chr>
 8008434:	4603      	mov	r3, r0
 8008436:	2b00      	cmp	r3, #0
 8008438:	d001      	beq.n	800843e <create_name+0xc6>
				return FR_INVALID_NAME;
 800843a:	2306      	movs	r3, #6
 800843c:	e054      	b.n	80084e8 <create_name+0x170>
			if (IsUpper(c)) {			/* ASCII large capital? */
 800843e:	7fbb      	ldrb	r3, [r7, #30]
 8008440:	2b40      	cmp	r3, #64	; 0x40
 8008442:	d907      	bls.n	8008454 <create_name+0xdc>
 8008444:	7fbb      	ldrb	r3, [r7, #30]
 8008446:	2b5a      	cmp	r3, #90	; 0x5a
 8008448:	d804      	bhi.n	8008454 <create_name+0xdc>
				b |= 2;
 800844a:	7ffb      	ldrb	r3, [r7, #31]
 800844c:	f043 0302 	orr.w	r3, r3, #2
 8008450:	77fb      	strb	r3, [r7, #31]
 8008452:	e00c      	b.n	800846e <create_name+0xf6>
			} else {
				if (IsLower(c)) {		/* ASCII small capital? */
 8008454:	7fbb      	ldrb	r3, [r7, #30]
 8008456:	2b60      	cmp	r3, #96	; 0x60
 8008458:	d909      	bls.n	800846e <create_name+0xf6>
 800845a:	7fbb      	ldrb	r3, [r7, #30]
 800845c:	2b7a      	cmp	r3, #122	; 0x7a
 800845e:	d806      	bhi.n	800846e <create_name+0xf6>
					b |= 1; c -= 0x20;
 8008460:	7ffb      	ldrb	r3, [r7, #31]
 8008462:	f043 0301 	orr.w	r3, r3, #1
 8008466:	77fb      	strb	r3, [r7, #31]
 8008468:	7fbb      	ldrb	r3, [r7, #30]
 800846a:	3b20      	subs	r3, #32
 800846c:	77bb      	strb	r3, [r7, #30]
				}
			}
			sfn[i++] = c;
 800846e:	693b      	ldr	r3, [r7, #16]
 8008470:	1c5a      	adds	r2, r3, #1
 8008472:	613a      	str	r2, [r7, #16]
 8008474:	68ba      	ldr	r2, [r7, #8]
 8008476:	4413      	add	r3, r2
 8008478:	7fba      	ldrb	r2, [r7, #30]
 800847a:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 800847c:	e7a1      	b.n	80083c2 <create_name+0x4a>
		}
	}
	*path = &p[si];						/* Return pointer to the next segment */
 800847e:	68fa      	ldr	r2, [r7, #12]
 8008480:	697b      	ldr	r3, [r7, #20]
 8008482:	441a      	add	r2, r3
 8008484:	683b      	ldr	r3, [r7, #0]
 8008486:	601a      	str	r2, [r3, #0]
	c = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
 8008488:	7fbb      	ldrb	r3, [r7, #30]
 800848a:	2b20      	cmp	r3, #32
 800848c:	d801      	bhi.n	8008492 <create_name+0x11a>
 800848e:	2304      	movs	r3, #4
 8008490:	e000      	b.n	8008494 <create_name+0x11c>
 8008492:	2300      	movs	r3, #0
 8008494:	77bb      	strb	r3, [r7, #30]

	if (!i) return FR_INVALID_NAME;		/* Reject nul string */
 8008496:	693b      	ldr	r3, [r7, #16]
 8008498:	2b00      	cmp	r3, #0
 800849a:	d101      	bne.n	80084a0 <create_name+0x128>
 800849c:	2306      	movs	r3, #6
 800849e:	e023      	b.n	80084e8 <create_name+0x170>
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* When first character collides with DDEM, replace it with RDDEM */
 80084a0:	68bb      	ldr	r3, [r7, #8]
 80084a2:	781b      	ldrb	r3, [r3, #0]
 80084a4:	2be5      	cmp	r3, #229	; 0xe5
 80084a6:	d102      	bne.n	80084ae <create_name+0x136>
 80084a8:	68bb      	ldr	r3, [r7, #8]
 80084aa:	2205      	movs	r2, #5
 80084ac:	701a      	strb	r2, [r3, #0]

	if (ni == 8) b <<= 2;
 80084ae:	69bb      	ldr	r3, [r7, #24]
 80084b0:	2b08      	cmp	r3, #8
 80084b2:	d102      	bne.n	80084ba <create_name+0x142>
 80084b4:	7ffb      	ldrb	r3, [r7, #31]
 80084b6:	009b      	lsls	r3, r3, #2
 80084b8:	77fb      	strb	r3, [r7, #31]
	if ((b & 0x03) == 0x01) c |= NS_EXT;	/* NT flag (Name extension has only small capital) */
 80084ba:	7ffb      	ldrb	r3, [r7, #31]
 80084bc:	f003 0303 	and.w	r3, r3, #3
 80084c0:	2b01      	cmp	r3, #1
 80084c2:	d103      	bne.n	80084cc <create_name+0x154>
 80084c4:	7fbb      	ldrb	r3, [r7, #30]
 80084c6:	f043 0310 	orr.w	r3, r3, #16
 80084ca:	77bb      	strb	r3, [r7, #30]
	if ((b & 0x0C) == 0x04) c |= NS_BODY;	/* NT flag (Name body has only small capital) */
 80084cc:	7ffb      	ldrb	r3, [r7, #31]
 80084ce:	f003 030c 	and.w	r3, r3, #12
 80084d2:	2b04      	cmp	r3, #4
 80084d4:	d103      	bne.n	80084de <create_name+0x166>
 80084d6:	7fbb      	ldrb	r3, [r7, #30]
 80084d8:	f043 0308 	orr.w	r3, r3, #8
 80084dc:	77bb      	strb	r3, [r7, #30]

	sfn[NSFLAG] = c;		/* Store NT flag, File name is created */
 80084de:	68bb      	ldr	r3, [r7, #8]
 80084e0:	330b      	adds	r3, #11
 80084e2:	7fba      	ldrb	r2, [r7, #30]
 80084e4:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 80084e6:	2300      	movs	r3, #0
#endif
}
 80084e8:	4618      	mov	r0, r3
 80084ea:	3720      	adds	r7, #32
 80084ec:	46bd      	mov	sp, r7
 80084ee:	bd80      	pop	{r7, pc}
 80084f0:	0800d67c 	.word	0x0800d67c
 80084f4:	0800d5c4 	.word	0x0800d5c4

080084f8 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 80084f8:	b580      	push	{r7, lr}
 80084fa:	b084      	sub	sp, #16
 80084fc:	af00      	add	r7, sp, #0
 80084fe:	6078      	str	r0, [r7, #4]
 8008500:	6039      	str	r1, [r7, #0]
		path++;	dp->sclust = 0;				/* Strip it and start from the root directory */
	} else {								/* No heading separator */
		dp->sclust = dp->fs->cdir;			/* Start from the current directory */
	}
#else
	if (*path == '/' || *path == '\\')		/* Strip heading separator if exist */
 8008502:	683b      	ldr	r3, [r7, #0]
 8008504:	781b      	ldrb	r3, [r3, #0]
 8008506:	2b2f      	cmp	r3, #47	; 0x2f
 8008508:	d003      	beq.n	8008512 <follow_path+0x1a>
 800850a:	683b      	ldr	r3, [r7, #0]
 800850c:	781b      	ldrb	r3, [r3, #0]
 800850e:	2b5c      	cmp	r3, #92	; 0x5c
 8008510:	d102      	bne.n	8008518 <follow_path+0x20>
		path++;
 8008512:	683b      	ldr	r3, [r7, #0]
 8008514:	3301      	adds	r3, #1
 8008516:	603b      	str	r3, [r7, #0]
	dp->sclust = 0;							/* Always start from the root directory */
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	2200      	movs	r2, #0
 800851c:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8008520:	683b      	ldr	r3, [r7, #0]
 8008522:	781b      	ldrb	r3, [r3, #0]
 8008524:	2b1f      	cmp	r3, #31
 8008526:	d80a      	bhi.n	800853e <follow_path+0x46>
		res = dir_sdi(dp, 0);
 8008528:	2100      	movs	r1, #0
 800852a:	6878      	ldr	r0, [r7, #4]
 800852c:	f7ff fc72 	bl	8007e14 <dir_sdi>
 8008530:	4603      	mov	r3, r0
 8008532:	73fb      	strb	r3, [r7, #15]
		dp->dir = 0;
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	2200      	movs	r2, #0
 8008538:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 800853c:	e045      	b.n	80085ca <follow_path+0xd2>
	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800853e:	463b      	mov	r3, r7
 8008540:	4619      	mov	r1, r3
 8008542:	6878      	ldr	r0, [r7, #4]
 8008544:	f7ff ff18 	bl	8008378 <create_name>
 8008548:	4603      	mov	r3, r0
 800854a:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 800854c:	7bfb      	ldrb	r3, [r7, #15]
 800854e:	2b00      	cmp	r3, #0
 8008550:	d136      	bne.n	80085c0 <follow_path+0xc8>
			res = dir_find(dp);				/* Find an object with the sagment name */
 8008552:	6878      	ldr	r0, [r7, #4]
 8008554:	f7ff fe88 	bl	8008268 <dir_find>
 8008558:	4603      	mov	r3, r0
 800855a:	73fb      	strb	r3, [r7, #15]
			ns = dp->fn[NSFLAG];
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8008562:	7adb      	ldrb	r3, [r3, #11]
 8008564:	73bb      	strb	r3, [r7, #14]
			if (res != FR_OK) {				/* Failed to find the object */
 8008566:	7bfb      	ldrb	r3, [r7, #15]
 8008568:	2b00      	cmp	r3, #0
 800856a:	d00a      	beq.n	8008582 <follow_path+0x8a>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800856c:	7bfb      	ldrb	r3, [r7, #15]
 800856e:	2b04      	cmp	r3, #4
 8008570:	d128      	bne.n	80085c4 <follow_path+0xcc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, */
						dp->sclust = 0; dp->dir = 0;	/* it is the root directory and stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						res = FR_OK;					/* Ended at the root directroy. Function completed. */
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8008572:	7bbb      	ldrb	r3, [r7, #14]
 8008574:	f003 0304 	and.w	r3, r3, #4
 8008578:	2b00      	cmp	r3, #0
 800857a:	d123      	bne.n	80085c4 <follow_path+0xcc>
 800857c:	2305      	movs	r3, #5
 800857e:	73fb      	strb	r3, [r7, #15]
					}
				}
				break;
 8008580:	e020      	b.n	80085c4 <follow_path+0xcc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8008582:	7bbb      	ldrb	r3, [r7, #14]
 8008584:	f003 0304 	and.w	r3, r3, #4
 8008588:	2b00      	cmp	r3, #0
 800858a:	d11d      	bne.n	80085c8 <follow_path+0xd0>
			dir = dp->dir;						/* Follow the sub-directory */
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8008592:	60bb      	str	r3, [r7, #8]
			if (!(dir[DIR_Attr] & AM_DIR)) {	/* It is not a sub-directory and cannot follow */
 8008594:	68bb      	ldr	r3, [r7, #8]
 8008596:	330b      	adds	r3, #11
 8008598:	781b      	ldrb	r3, [r3, #0]
 800859a:	f003 0310 	and.w	r3, r3, #16
 800859e:	2b00      	cmp	r3, #0
 80085a0:	d102      	bne.n	80085a8 <follow_path+0xb0>
				res = FR_NO_PATH; break;
 80085a2:	2305      	movs	r3, #5
 80085a4:	73fb      	strb	r3, [r7, #15]
 80085a6:	e010      	b.n	80085ca <follow_path+0xd2>
			}
			dp->sclust = ld_clust(dp->fs, dir);
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80085ae:	68b9      	ldr	r1, [r7, #8]
 80085b0:	4618      	mov	r0, r3
 80085b2:	f7ff fe04 	bl	80081be <ld_clust>
 80085b6:	4602      	mov	r2, r0
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80085be:	e7be      	b.n	800853e <follow_path+0x46>
			if (res != FR_OK) break;
 80085c0:	bf00      	nop
 80085c2:	e002      	b.n	80085ca <follow_path+0xd2>
				break;
 80085c4:	bf00      	nop
 80085c6:	e000      	b.n	80085ca <follow_path+0xd2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80085c8:	bf00      	nop
		}
	}

	return res;
 80085ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80085cc:	4618      	mov	r0, r3
 80085ce:	3710      	adds	r7, #16
 80085d0:	46bd      	mov	sp, r7
 80085d2:	bd80      	pop	{r7, pc}

080085d4 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 80085d4:	b480      	push	{r7}
 80085d6:	b087      	sub	sp, #28
 80085d8:	af00      	add	r7, sp, #0
 80085da:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 80085dc:	f04f 33ff 	mov.w	r3, #4294967295
 80085e0:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	681b      	ldr	r3, [r3, #0]
 80085e6:	2b00      	cmp	r3, #0
 80085e8:	d031      	beq.n	800864e <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	681b      	ldr	r3, [r3, #0]
 80085ee:	617b      	str	r3, [r7, #20]
 80085f0:	e002      	b.n	80085f8 <get_ldnumber+0x24>
 80085f2:	697b      	ldr	r3, [r7, #20]
 80085f4:	3301      	adds	r3, #1
 80085f6:	617b      	str	r3, [r7, #20]
 80085f8:	697b      	ldr	r3, [r7, #20]
 80085fa:	781b      	ldrb	r3, [r3, #0]
 80085fc:	2b20      	cmp	r3, #32
 80085fe:	d903      	bls.n	8008608 <get_ldnumber+0x34>
 8008600:	697b      	ldr	r3, [r7, #20]
 8008602:	781b      	ldrb	r3, [r3, #0]
 8008604:	2b3a      	cmp	r3, #58	; 0x3a
 8008606:	d1f4      	bne.n	80085f2 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8008608:	697b      	ldr	r3, [r7, #20]
 800860a:	781b      	ldrb	r3, [r3, #0]
 800860c:	2b3a      	cmp	r3, #58	; 0x3a
 800860e:	d11c      	bne.n	800864a <get_ldnumber+0x76>
			tp = *path;
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	681b      	ldr	r3, [r3, #0]
 8008614:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0'; 
 8008616:	68fb      	ldr	r3, [r7, #12]
 8008618:	1c5a      	adds	r2, r3, #1
 800861a:	60fa      	str	r2, [r7, #12]
 800861c:	781b      	ldrb	r3, [r3, #0]
 800861e:	3b30      	subs	r3, #48	; 0x30
 8008620:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8008622:	68bb      	ldr	r3, [r7, #8]
 8008624:	2b09      	cmp	r3, #9
 8008626:	d80e      	bhi.n	8008646 <get_ldnumber+0x72>
 8008628:	68fa      	ldr	r2, [r7, #12]
 800862a:	697b      	ldr	r3, [r7, #20]
 800862c:	429a      	cmp	r2, r3
 800862e:	d10a      	bne.n	8008646 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8008630:	68bb      	ldr	r3, [r7, #8]
 8008632:	2b00      	cmp	r3, #0
 8008634:	d107      	bne.n	8008646 <get_ldnumber+0x72>
					vol = (int)i;
 8008636:	68bb      	ldr	r3, [r7, #8]
 8008638:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800863a:	697b      	ldr	r3, [r7, #20]
 800863c:	3301      	adds	r3, #1
 800863e:	617b      	str	r3, [r7, #20]
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	697a      	ldr	r2, [r7, #20]
 8008644:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8008646:	693b      	ldr	r3, [r7, #16]
 8008648:	e002      	b.n	8008650 <get_ldnumber+0x7c>
		}
#if _FS_RPATH && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800864a:	2300      	movs	r3, #0
 800864c:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800864e:	693b      	ldr	r3, [r7, #16]
}
 8008650:	4618      	mov	r0, r3
 8008652:	371c      	adds	r7, #28
 8008654:	46bd      	mov	sp, r7
 8008656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800865a:	4770      	bx	lr

0800865c <check_fs>:
static
BYTE check_fs (	/* 0:FAT boor sector, 1:Valid boor sector but not FAT, 2:Not a boot sector, 3:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to check if it is an FAT boot record or not */
)
{
 800865c:	b580      	push	{r7, lr}
 800865e:	b082      	sub	sp, #8
 8008660:	af00      	add	r7, sp, #0
 8008662:	6078      	str	r0, [r7, #4]
 8008664:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;	/* Invaidate window */
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	2200      	movs	r2, #0
 800866a:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	f04f 32ff 	mov.w	r2, #4294967295
 8008674:	f8c3 222c 	str.w	r2, [r3, #556]	; 0x22c
	if (move_window(fs, sect) != FR_OK)			/* Load boot record */
 8008678:	6839      	ldr	r1, [r7, #0]
 800867a:	6878      	ldr	r0, [r7, #4]
 800867c:	f7fe ffd9 	bl	8007632 <move_window>
 8008680:	4603      	mov	r3, r0
 8008682:	2b00      	cmp	r3, #0
 8008684:	d001      	beq.n	800868a <check_fs+0x2e>
		return 3;
 8008686:	2303      	movs	r3, #3
 8008688:	e04a      	b.n	8008720 <check_fs+0xc4>

	if (LD_WORD(&fs->win.d8[BS_55AA]) != 0xAA55)	/* Check boot record signature (always placed at offset 510 even if the sector size is >512) */
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8008690:	3301      	adds	r3, #1
 8008692:	781b      	ldrb	r3, [r3, #0]
 8008694:	021b      	lsls	r3, r3, #8
 8008696:	b21a      	sxth	r2, r3
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	f893 31fe 	ldrb.w	r3, [r3, #510]	; 0x1fe
 800869e:	b21b      	sxth	r3, r3
 80086a0:	4313      	orrs	r3, r2
 80086a2:	b21b      	sxth	r3, r3
 80086a4:	4a20      	ldr	r2, [pc, #128]	; (8008728 <check_fs+0xcc>)
 80086a6:	4293      	cmp	r3, r2
 80086a8:	d001      	beq.n	80086ae <check_fs+0x52>
		return 2;
 80086aa:	2302      	movs	r3, #2
 80086ac:	e038      	b.n	8008720 <check_fs+0xc4>

	if ((LD_DWORD(&fs->win.d8[BS_FilSysType]) & 0xFFFFFF) == 0x544146)		/* Check "FAT" string */
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	3336      	adds	r3, #54	; 0x36
 80086b2:	3303      	adds	r3, #3
 80086b4:	781b      	ldrb	r3, [r3, #0]
 80086b6:	061a      	lsls	r2, r3, #24
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	3336      	adds	r3, #54	; 0x36
 80086bc:	3302      	adds	r3, #2
 80086be:	781b      	ldrb	r3, [r3, #0]
 80086c0:	041b      	lsls	r3, r3, #16
 80086c2:	4313      	orrs	r3, r2
 80086c4:	687a      	ldr	r2, [r7, #4]
 80086c6:	3236      	adds	r2, #54	; 0x36
 80086c8:	3201      	adds	r2, #1
 80086ca:	7812      	ldrb	r2, [r2, #0]
 80086cc:	0212      	lsls	r2, r2, #8
 80086ce:	4313      	orrs	r3, r2
 80086d0:	687a      	ldr	r2, [r7, #4]
 80086d2:	f892 2036 	ldrb.w	r2, [r2, #54]	; 0x36
 80086d6:	4313      	orrs	r3, r2
 80086d8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80086dc:	4a13      	ldr	r2, [pc, #76]	; (800872c <check_fs+0xd0>)
 80086de:	4293      	cmp	r3, r2
 80086e0:	d101      	bne.n	80086e6 <check_fs+0x8a>
		return 0;
 80086e2:	2300      	movs	r3, #0
 80086e4:	e01c      	b.n	8008720 <check_fs+0xc4>
	if ((LD_DWORD(&fs->win.d8[BS_FilSysType32]) & 0xFFFFFF) == 0x544146)	/* Check "FAT" string */
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	3352      	adds	r3, #82	; 0x52
 80086ea:	3303      	adds	r3, #3
 80086ec:	781b      	ldrb	r3, [r3, #0]
 80086ee:	061a      	lsls	r2, r3, #24
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	3352      	adds	r3, #82	; 0x52
 80086f4:	3302      	adds	r3, #2
 80086f6:	781b      	ldrb	r3, [r3, #0]
 80086f8:	041b      	lsls	r3, r3, #16
 80086fa:	4313      	orrs	r3, r2
 80086fc:	687a      	ldr	r2, [r7, #4]
 80086fe:	3252      	adds	r2, #82	; 0x52
 8008700:	3201      	adds	r2, #1
 8008702:	7812      	ldrb	r2, [r2, #0]
 8008704:	0212      	lsls	r2, r2, #8
 8008706:	4313      	orrs	r3, r2
 8008708:	687a      	ldr	r2, [r7, #4]
 800870a:	f892 2052 	ldrb.w	r2, [r2, #82]	; 0x52
 800870e:	4313      	orrs	r3, r2
 8008710:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8008714:	4a05      	ldr	r2, [pc, #20]	; (800872c <check_fs+0xd0>)
 8008716:	4293      	cmp	r3, r2
 8008718:	d101      	bne.n	800871e <check_fs+0xc2>
		return 0;
 800871a:	2300      	movs	r3, #0
 800871c:	e000      	b.n	8008720 <check_fs+0xc4>

	return 1;
 800871e:	2301      	movs	r3, #1
}
 8008720:	4618      	mov	r0, r3
 8008722:	3708      	adds	r7, #8
 8008724:	46bd      	mov	sp, r7
 8008726:	bd80      	pop	{r7, pc}
 8008728:	ffffaa55 	.word	0xffffaa55
 800872c:	00544146 	.word	0x00544146

08008730 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	BYTE wmode			/* !=0: Check write protection for write access */
)
{
 8008730:	b580      	push	{r7, lr}
 8008732:	b096      	sub	sp, #88	; 0x58
 8008734:	af00      	add	r7, sp, #0
 8008736:	60f8      	str	r0, [r7, #12]
 8008738:	60b9      	str	r1, [r7, #8]
 800873a:	4613      	mov	r3, r2
 800873c:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number from the path name */
	*rfs = 0;
 800873e:	68fb      	ldr	r3, [r7, #12]
 8008740:	2200      	movs	r2, #0
 8008742:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8008744:	68b8      	ldr	r0, [r7, #8]
 8008746:	f7ff ff45 	bl	80085d4 <get_ldnumber>
 800874a:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800874c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800874e:	2b00      	cmp	r3, #0
 8008750:	da01      	bge.n	8008756 <find_volume+0x26>
 8008752:	230b      	movs	r3, #11
 8008754:	e2a8      	b.n	8008ca8 <find_volume+0x578>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8008756:	4a9d      	ldr	r2, [pc, #628]	; (80089cc <find_volume+0x29c>)
 8008758:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800875a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800875e:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8008760:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008762:	2b00      	cmp	r3, #0
 8008764:	d101      	bne.n	800876a <find_volume+0x3a>
 8008766:	230c      	movs	r3, #12
 8008768:	e29e      	b.n	8008ca8 <find_volume+0x578>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800876a:	68fb      	ldr	r3, [r7, #12]
 800876c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800876e:	601a      	str	r2, [r3, #0]

	if (fs->fs_type) {					/* If the volume has been mounted */
 8008770:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008772:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8008776:	2b00      	cmp	r3, #0
 8008778:	d01b      	beq.n	80087b2 <find_volume+0x82>
		stat = disk_status(fs->drv);
 800877a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800877c:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 8008780:	4618      	mov	r0, r3
 8008782:	f7fe fc3b 	bl	8006ffc <disk_status>
 8008786:	4603      	mov	r3, r0
 8008788:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800878c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8008790:	f003 0301 	and.w	r3, r3, #1
 8008794:	2b00      	cmp	r3, #0
 8008796:	d10c      	bne.n	80087b2 <find_volume+0x82>
			if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check write protection if needed */
 8008798:	79fb      	ldrb	r3, [r7, #7]
 800879a:	2b00      	cmp	r3, #0
 800879c:	d007      	beq.n	80087ae <find_volume+0x7e>
 800879e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80087a2:	f003 0304 	and.w	r3, r3, #4
 80087a6:	2b00      	cmp	r3, #0
 80087a8:	d001      	beq.n	80087ae <find_volume+0x7e>
				return FR_WRITE_PROTECTED;
 80087aa:	230a      	movs	r3, #10
 80087ac:	e27c      	b.n	8008ca8 <find_volume+0x578>
			return FR_OK;				/* The file system object is valid */
 80087ae:	2300      	movs	r3, #0
 80087b0:	e27a      	b.n	8008ca8 <find_volume+0x578>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 80087b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80087b4:	2200      	movs	r2, #0
 80087b6:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 80087ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80087bc:	b2da      	uxtb	r2, r3
 80087be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80087c0:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 80087c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80087c6:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 80087ca:	4618      	mov	r0, r3
 80087cc:	f7fe fc30 	bl	8007030 <disk_initialize>
 80087d0:	4603      	mov	r3, r0
 80087d2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT)				/* Check if the initialization succeeded */
 80087d6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80087da:	f003 0301 	and.w	r3, r3, #1
 80087de:	2b00      	cmp	r3, #0
 80087e0:	d001      	beq.n	80087e6 <find_volume+0xb6>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 80087e2:	2303      	movs	r3, #3
 80087e4:	e260      	b.n	8008ca8 <find_volume+0x578>
	if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check disk write protection if needed */
 80087e6:	79fb      	ldrb	r3, [r7, #7]
 80087e8:	2b00      	cmp	r3, #0
 80087ea:	d007      	beq.n	80087fc <find_volume+0xcc>
 80087ec:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80087f0:	f003 0304 	and.w	r3, r3, #4
 80087f4:	2b00      	cmp	r3, #0
 80087f6:	d001      	beq.n	80087fc <find_volume+0xcc>
		return FR_WRITE_PROTECTED;
 80087f8:	230a      	movs	r3, #10
 80087fa:	e255      	b.n	8008ca8 <find_volume+0x578>
#if _MAX_SS != _MIN_SS						/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK
		|| SS(fs) < _MIN_SS || SS(fs) > _MAX_SS) return FR_DISK_ERR;
#endif
	/* Find an FAT partition on the drive. Supports only generic partitioning, FDISK and SFD. */
	bsect = 0;
 80087fc:	2300      	movs	r3, #0
 80087fe:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);					/* Load sector 0 and check if it is an FAT boot sector as SFD */
 8008800:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8008802:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8008804:	f7ff ff2a 	bl	800865c <check_fs>
 8008808:	4603      	mov	r3, r0
 800880a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 1 || (!fmt && (LD2PT(vol)))) {	/* Not an FAT boot sector or forced partition number */
 800880e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008812:	2b01      	cmp	r3, #1
 8008814:	d153      	bne.n	80088be <find_volume+0x18e>
		for (i = 0; i < 4; i++) {			/* Get partition offset */
 8008816:	2300      	movs	r3, #0
 8008818:	643b      	str	r3, [r7, #64]	; 0x40
 800881a:	e028      	b.n	800886e <find_volume+0x13e>
			pt = fs->win.d8 + MBR_Table + i * SZ_PTE;
 800881c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800881e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008820:	011b      	lsls	r3, r3, #4
 8008822:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8008826:	4413      	add	r3, r2
 8008828:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[4] ? LD_DWORD(&pt[8]) : 0;
 800882a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800882c:	3304      	adds	r3, #4
 800882e:	781b      	ldrb	r3, [r3, #0]
 8008830:	2b00      	cmp	r3, #0
 8008832:	d012      	beq.n	800885a <find_volume+0x12a>
 8008834:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008836:	330b      	adds	r3, #11
 8008838:	781b      	ldrb	r3, [r3, #0]
 800883a:	061a      	lsls	r2, r3, #24
 800883c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800883e:	330a      	adds	r3, #10
 8008840:	781b      	ldrb	r3, [r3, #0]
 8008842:	041b      	lsls	r3, r3, #16
 8008844:	4313      	orrs	r3, r2
 8008846:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008848:	3209      	adds	r2, #9
 800884a:	7812      	ldrb	r2, [r2, #0]
 800884c:	0212      	lsls	r2, r2, #8
 800884e:	4313      	orrs	r3, r2
 8008850:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008852:	3208      	adds	r2, #8
 8008854:	7812      	ldrb	r2, [r2, #0]
 8008856:	431a      	orrs	r2, r3
 8008858:	e000      	b.n	800885c <find_volume+0x12c>
 800885a:	2200      	movs	r2, #0
 800885c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800885e:	009b      	lsls	r3, r3, #2
 8008860:	3358      	adds	r3, #88	; 0x58
 8008862:	443b      	add	r3, r7
 8008864:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {			/* Get partition offset */
 8008868:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800886a:	3301      	adds	r3, #1
 800886c:	643b      	str	r3, [r7, #64]	; 0x40
 800886e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008870:	2b03      	cmp	r3, #3
 8008872:	d9d3      	bls.n	800881c <find_volume+0xec>
		}
		i = LD2PT(vol);						/* Partition number: 0:auto, 1-4:forced */
 8008874:	2300      	movs	r3, #0
 8008876:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 8008878:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800887a:	2b00      	cmp	r3, #0
 800887c:	d002      	beq.n	8008884 <find_volume+0x154>
 800887e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008880:	3b01      	subs	r3, #1
 8008882:	643b      	str	r3, [r7, #64]	; 0x40
		do {								/* Find an FAT volume */
			bsect = br[i];
 8008884:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008886:	009b      	lsls	r3, r3, #2
 8008888:	3358      	adds	r3, #88	; 0x58
 800888a:	443b      	add	r3, r7
 800888c:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8008890:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 2;	/* Check the partition */
 8008892:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008894:	2b00      	cmp	r3, #0
 8008896:	d005      	beq.n	80088a4 <find_volume+0x174>
 8008898:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800889a:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800889c:	f7ff fede 	bl	800865c <check_fs>
 80088a0:	4603      	mov	r3, r0
 80088a2:	e000      	b.n	80088a6 <find_volume+0x176>
 80088a4:	2302      	movs	r3, #2
 80088a6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (!LD2PT(vol) && fmt && ++i < 4);
 80088aa:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80088ae:	2b00      	cmp	r3, #0
 80088b0:	d005      	beq.n	80088be <find_volume+0x18e>
 80088b2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80088b4:	3301      	adds	r3, #1
 80088b6:	643b      	str	r3, [r7, #64]	; 0x40
 80088b8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80088ba:	2b03      	cmp	r3, #3
 80088bc:	d9e2      	bls.n	8008884 <find_volume+0x154>
	}
	if (fmt == 3) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 80088be:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80088c2:	2b03      	cmp	r3, #3
 80088c4:	d101      	bne.n	80088ca <find_volume+0x19a>
 80088c6:	2301      	movs	r3, #1
 80088c8:	e1ee      	b.n	8008ca8 <find_volume+0x578>
	if (fmt) return FR_NO_FILESYSTEM;		/* No FAT volume is found */
 80088ca:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80088ce:	2b00      	cmp	r3, #0
 80088d0:	d001      	beq.n	80088d6 <find_volume+0x1a6>
 80088d2:	230d      	movs	r3, #13
 80088d4:	e1e8      	b.n	8008ca8 <find_volume+0x578>

	/* An FAT volume is found. Following code initializes the file system object */

	if (LD_WORD(fs->win.d8 + BPB_BytsPerSec) != SS(fs))	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 80088d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80088d8:	7b1b      	ldrb	r3, [r3, #12]
 80088da:	021b      	lsls	r3, r3, #8
 80088dc:	b21a      	sxth	r2, r3
 80088de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80088e0:	7adb      	ldrb	r3, [r3, #11]
 80088e2:	b21b      	sxth	r3, r3
 80088e4:	4313      	orrs	r3, r2
 80088e6:	b21b      	sxth	r3, r3
 80088e8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80088ec:	d001      	beq.n	80088f2 <find_volume+0x1c2>
		return FR_NO_FILESYSTEM;
 80088ee:	230d      	movs	r3, #13
 80088f0:	e1da      	b.n	8008ca8 <find_volume+0x578>

	fasize = LD_WORD(fs->win.d8 + BPB_FATSz16);			/* Number of sectors per FAT */
 80088f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80088f4:	7ddb      	ldrb	r3, [r3, #23]
 80088f6:	021b      	lsls	r3, r3, #8
 80088f8:	b21a      	sxth	r2, r3
 80088fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80088fc:	7d9b      	ldrb	r3, [r3, #22]
 80088fe:	b21b      	sxth	r3, r3
 8008900:	4313      	orrs	r3, r2
 8008902:	b21b      	sxth	r3, r3
 8008904:	b29b      	uxth	r3, r3
 8008906:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (!fasize) fasize = LD_DWORD(fs->win.d8 + BPB_FATSz32);
 8008908:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800890a:	2b00      	cmp	r3, #0
 800890c:	d112      	bne.n	8008934 <find_volume+0x204>
 800890e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008910:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8008914:	061a      	lsls	r2, r3, #24
 8008916:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008918:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 800891c:	041b      	lsls	r3, r3, #16
 800891e:	4313      	orrs	r3, r2
 8008920:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008922:	f892 2025 	ldrb.w	r2, [r2, #37]	; 0x25
 8008926:	0212      	lsls	r2, r2, #8
 8008928:	4313      	orrs	r3, r2
 800892a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800892c:	f892 2024 	ldrb.w	r2, [r2, #36]	; 0x24
 8008930:	4313      	orrs	r3, r2
 8008932:	64fb      	str	r3, [r7, #76]	; 0x4c
	fs->fsize = fasize;
 8008934:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008936:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008938:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

	fs->n_fats = fs->win.d8[BPB_NumFATs];					/* Number of FAT copies */
 800893c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800893e:	7c1a      	ldrb	r2, [r3, #16]
 8008940:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008942:	f883 2203 	strb.w	r2, [r3, #515]	; 0x203
	if (fs->n_fats != 1 && fs->n_fats != 2)				/* (Must be 1 or 2) */
 8008946:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008948:	f893 3203 	ldrb.w	r3, [r3, #515]	; 0x203
 800894c:	2b01      	cmp	r3, #1
 800894e:	d006      	beq.n	800895e <find_volume+0x22e>
 8008950:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008952:	f893 3203 	ldrb.w	r3, [r3, #515]	; 0x203
 8008956:	2b02      	cmp	r3, #2
 8008958:	d001      	beq.n	800895e <find_volume+0x22e>
		return FR_NO_FILESYSTEM;
 800895a:	230d      	movs	r3, #13
 800895c:	e1a4      	b.n	8008ca8 <find_volume+0x578>
	fasize *= fs->n_fats;								/* Number of sectors for FAT area */
 800895e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008960:	f893 3203 	ldrb.w	r3, [r3, #515]	; 0x203
 8008964:	461a      	mov	r2, r3
 8008966:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008968:	fb02 f303 	mul.w	r3, r2, r3
 800896c:	64fb      	str	r3, [r7, #76]	; 0x4c

	fs->csize = fs->win.d8[BPB_SecPerClus];				/* Number of sectors per cluster */
 800896e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008970:	7b5a      	ldrb	r2, [r3, #13]
 8008972:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008974:	f883 2202 	strb.w	r2, [r3, #514]	; 0x202
	if (!fs->csize || (fs->csize & (fs->csize - 1)))	/* (Must be power of 2) */
 8008978:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800897a:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 800897e:	2b00      	cmp	r3, #0
 8008980:	d00a      	beq.n	8008998 <find_volume+0x268>
 8008982:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008984:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 8008988:	461a      	mov	r2, r3
 800898a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800898c:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 8008990:	3b01      	subs	r3, #1
 8008992:	4013      	ands	r3, r2
 8008994:	2b00      	cmp	r3, #0
 8008996:	d001      	beq.n	800899c <find_volume+0x26c>
		return FR_NO_FILESYSTEM;
 8008998:	230d      	movs	r3, #13
 800899a:	e185      	b.n	8008ca8 <find_volume+0x578>

	fs->n_rootdir = LD_WORD(fs->win.d8 + BPB_RootEntCnt);	/* Number of root directory entries */
 800899c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800899e:	7c9b      	ldrb	r3, [r3, #18]
 80089a0:	021b      	lsls	r3, r3, #8
 80089a2:	b21a      	sxth	r2, r3
 80089a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80089a6:	7c5b      	ldrb	r3, [r3, #17]
 80089a8:	b21b      	sxth	r3, r3
 80089aa:	4313      	orrs	r3, r2
 80089ac:	b21b      	sxth	r3, r3
 80089ae:	b29a      	uxth	r2, r3
 80089b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80089b2:	f8a3 2208 	strh.w	r2, [r3, #520]	; 0x208
	if (fs->n_rootdir % (SS(fs) / SZ_DIRE))				/* (Must be sector aligned) */
 80089b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80089b8:	f8b3 3208 	ldrh.w	r3, [r3, #520]	; 0x208
 80089bc:	f003 030f 	and.w	r3, r3, #15
 80089c0:	b29b      	uxth	r3, r3
 80089c2:	2b00      	cmp	r3, #0
 80089c4:	d004      	beq.n	80089d0 <find_volume+0x2a0>
		return FR_NO_FILESYSTEM;
 80089c6:	230d      	movs	r3, #13
 80089c8:	e16e      	b.n	8008ca8 <find_volume+0x578>
 80089ca:	bf00      	nop
 80089cc:	20001430 	.word	0x20001430

	tsect = LD_WORD(fs->win.d8 + BPB_TotSec16);			/* Number of sectors on the volume */
 80089d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80089d2:	7d1b      	ldrb	r3, [r3, #20]
 80089d4:	021b      	lsls	r3, r3, #8
 80089d6:	b21a      	sxth	r2, r3
 80089d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80089da:	7cdb      	ldrb	r3, [r3, #19]
 80089dc:	b21b      	sxth	r3, r3
 80089de:	4313      	orrs	r3, r2
 80089e0:	b21b      	sxth	r3, r3
 80089e2:	b29b      	uxth	r3, r3
 80089e4:	64bb      	str	r3, [r7, #72]	; 0x48
	if (!tsect) tsect = LD_DWORD(fs->win.d8 + BPB_TotSec32);
 80089e6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80089e8:	2b00      	cmp	r3, #0
 80089ea:	d112      	bne.n	8008a12 <find_volume+0x2e2>
 80089ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80089ee:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 80089f2:	061a      	lsls	r2, r3, #24
 80089f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80089f6:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 80089fa:	041b      	lsls	r3, r3, #16
 80089fc:	4313      	orrs	r3, r2
 80089fe:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008a00:	f892 2021 	ldrb.w	r2, [r2, #33]	; 0x21
 8008a04:	0212      	lsls	r2, r2, #8
 8008a06:	4313      	orrs	r3, r2
 8008a08:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008a0a:	f892 2020 	ldrb.w	r2, [r2, #32]
 8008a0e:	4313      	orrs	r3, r2
 8008a10:	64bb      	str	r3, [r7, #72]	; 0x48

	nrsv = LD_WORD(fs->win.d8 + BPB_RsvdSecCnt);			/* Number of reserved sectors */
 8008a12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a14:	7bdb      	ldrb	r3, [r3, #15]
 8008a16:	021b      	lsls	r3, r3, #8
 8008a18:	b21a      	sxth	r2, r3
 8008a1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a1c:	7b9b      	ldrb	r3, [r3, #14]
 8008a1e:	b21b      	sxth	r3, r3
 8008a20:	4313      	orrs	r3, r2
 8008a22:	b21b      	sxth	r3, r3
 8008a24:	85fb      	strh	r3, [r7, #46]	; 0x2e
	if (!nrsv) return FR_NO_FILESYSTEM;					/* (Must not be 0) */
 8008a26:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8008a28:	2b00      	cmp	r3, #0
 8008a2a:	d101      	bne.n	8008a30 <find_volume+0x300>
 8008a2c:	230d      	movs	r3, #13
 8008a2e:	e13b      	b.n	8008ca8 <find_volume+0x578>

	/* Determine the FAT sub type */
	sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZ_DIRE);	/* RSV + FAT + DIR */
 8008a30:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8008a32:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008a34:	4413      	add	r3, r2
 8008a36:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008a38:	f8b2 2208 	ldrh.w	r2, [r2, #520]	; 0x208
 8008a3c:	0912      	lsrs	r2, r2, #4
 8008a3e:	b292      	uxth	r2, r2
 8008a40:	4413      	add	r3, r2
 8008a42:	62bb      	str	r3, [r7, #40]	; 0x28
	if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8008a44:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008a46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a48:	429a      	cmp	r2, r3
 8008a4a:	d201      	bcs.n	8008a50 <find_volume+0x320>
 8008a4c:	230d      	movs	r3, #13
 8008a4e:	e12b      	b.n	8008ca8 <find_volume+0x578>
	nclst = (tsect - sysect) / fs->csize;				/* Number of clusters */
 8008a50:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008a52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a54:	1ad3      	subs	r3, r2, r3
 8008a56:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008a58:	f892 2202 	ldrb.w	r2, [r2, #514]	; 0x202
 8008a5c:	fbb3 f3f2 	udiv	r3, r3, r2
 8008a60:	627b      	str	r3, [r7, #36]	; 0x24
	if (!nclst) return FR_NO_FILESYSTEM;				/* (Invalid volume size) */
 8008a62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a64:	2b00      	cmp	r3, #0
 8008a66:	d101      	bne.n	8008a6c <find_volume+0x33c>
 8008a68:	230d      	movs	r3, #13
 8008a6a:	e11d      	b.n	8008ca8 <find_volume+0x578>
	fmt = FS_FAT12;
 8008a6c:	2301      	movs	r3, #1
 8008a6e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (nclst >= MIN_FAT16) fmt = FS_FAT16;
 8008a72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a74:	f640 72f5 	movw	r2, #4085	; 0xff5
 8008a78:	4293      	cmp	r3, r2
 8008a7a:	d902      	bls.n	8008a82 <find_volume+0x352>
 8008a7c:	2302      	movs	r3, #2
 8008a7e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (nclst >= MIN_FAT32) fmt = FS_FAT32;
 8008a82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a84:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8008a88:	4293      	cmp	r3, r2
 8008a8a:	d902      	bls.n	8008a92 <find_volume+0x362>
 8008a8c:	2303      	movs	r3, #3
 8008a8e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	/* Boundaries and Limits */
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
 8008a92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a94:	1c9a      	adds	r2, r3, #2
 8008a96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a98:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
	fs->volbase = bsect;								/* Volume start sector */
 8008a9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a9e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8008aa0:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
 8008aa4:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8008aa6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008aa8:	441a      	add	r2, r3
 8008aaa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008aac:	f8c3 2220 	str.w	r2, [r3, #544]	; 0x220
	fs->database = bsect + sysect;						/* Data start sector */
 8008ab0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8008ab2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ab4:	441a      	add	r2, r3
 8008ab6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ab8:	f8c3 2228 	str.w	r2, [r3, #552]	; 0x228
	if (fmt == FS_FAT32) {
 8008abc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008ac0:	2b03      	cmp	r3, #3
 8008ac2:	d121      	bne.n	8008b08 <find_volume+0x3d8>
		if (fs->n_rootdir) return FR_NO_FILESYSTEM;		/* (BPB_RootEntCnt must be 0) */
 8008ac4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ac6:	f8b3 3208 	ldrh.w	r3, [r3, #520]	; 0x208
 8008aca:	2b00      	cmp	r3, #0
 8008acc:	d001      	beq.n	8008ad2 <find_volume+0x3a2>
 8008ace:	230d      	movs	r3, #13
 8008ad0:	e0ea      	b.n	8008ca8 <find_volume+0x578>
		fs->dirbase = LD_DWORD(fs->win.d8 + BPB_RootClus);	/* Root directory start cluster */
 8008ad2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ad4:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8008ad8:	061a      	lsls	r2, r3, #24
 8008ada:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008adc:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 8008ae0:	041b      	lsls	r3, r3, #16
 8008ae2:	4313      	orrs	r3, r2
 8008ae4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008ae6:	f892 202d 	ldrb.w	r2, [r2, #45]	; 0x2d
 8008aea:	0212      	lsls	r2, r2, #8
 8008aec:	4313      	orrs	r3, r2
 8008aee:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008af0:	f892 202c 	ldrb.w	r2, [r2, #44]	; 0x2c
 8008af4:	431a      	orrs	r2, r3
 8008af6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008af8:	f8c3 2224 	str.w	r2, [r3, #548]	; 0x224
		szbfat = fs->n_fatent * 4;						/* (Needed FAT size) */
 8008afc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008afe:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8008b02:	009b      	lsls	r3, r3, #2
 8008b04:	647b      	str	r3, [r7, #68]	; 0x44
 8008b06:	e025      	b.n	8008b54 <find_volume+0x424>
	} else {
		if (!fs->n_rootdir)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
 8008b08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b0a:	f8b3 3208 	ldrh.w	r3, [r3, #520]	; 0x208
 8008b0e:	2b00      	cmp	r3, #0
 8008b10:	d101      	bne.n	8008b16 <find_volume+0x3e6>
 8008b12:	230d      	movs	r3, #13
 8008b14:	e0c8      	b.n	8008ca8 <find_volume+0x578>
		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
 8008b16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b18:	f8d3 2220 	ldr.w	r2, [r3, #544]	; 0x220
 8008b1c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008b1e:	441a      	add	r2, r3
 8008b20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b22:	f8c3 2224 	str.w	r2, [r3, #548]	; 0x224
		szbfat = (fmt == FS_FAT16) ?					/* (Needed FAT size) */
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8008b26:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008b2a:	2b02      	cmp	r3, #2
 8008b2c:	d104      	bne.n	8008b38 <find_volume+0x408>
 8008b2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b30:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8008b34:	005b      	lsls	r3, r3, #1
 8008b36:	e00c      	b.n	8008b52 <find_volume+0x422>
 8008b38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b3a:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8008b3e:	4613      	mov	r3, r2
 8008b40:	005b      	lsls	r3, r3, #1
 8008b42:	4413      	add	r3, r2
 8008b44:	085a      	lsrs	r2, r3, #1
 8008b46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b48:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8008b4c:	f003 0301 	and.w	r3, r3, #1
 8008b50:	4413      	add	r3, r2
		szbfat = (fmt == FS_FAT16) ?					/* (Needed FAT size) */
 8008b52:	647b      	str	r3, [r7, #68]	; 0x44
	}
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than the size needed) */
 8008b54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b56:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 8008b5a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008b5c:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8008b60:	0a5b      	lsrs	r3, r3, #9
 8008b62:	429a      	cmp	r2, r3
 8008b64:	d201      	bcs.n	8008b6a <find_volume+0x43a>
		return FR_NO_FILESYSTEM;
 8008b66:	230d      	movs	r3, #13
 8008b68:	e09e      	b.n	8008ca8 <find_volume+0x578>

#if !_FS_READONLY
	/* Initialize cluster allocation information */
	fs->last_clust = fs->free_clust = 0xFFFFFFFF;
 8008b6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b6c:	f04f 32ff 	mov.w	r2, #4294967295
 8008b70:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
 8008b74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b76:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 8008b7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b7c:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

	/* Get fsinfo if available */
	fs->fsi_flag = 0x80;
 8008b80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b82:	2280      	movs	r2, #128	; 0x80
 8008b84:	f883 2205 	strb.w	r2, [r3, #517]	; 0x205
#if (_FS_NOFSINFO & 3) != 3
	if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo is 1 */
 8008b88:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008b8c:	2b03      	cmp	r3, #3
 8008b8e:	d177      	bne.n	8008c80 <find_volume+0x550>
		&& LD_WORD(fs->win.d8 + BPB_FSInfo) == 1
 8008b90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b92:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8008b96:	021b      	lsls	r3, r3, #8
 8008b98:	b21a      	sxth	r2, r3
 8008b9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b9c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8008ba0:	b21b      	sxth	r3, r3
 8008ba2:	4313      	orrs	r3, r2
 8008ba4:	b21b      	sxth	r3, r3
 8008ba6:	2b01      	cmp	r3, #1
 8008ba8:	d16a      	bne.n	8008c80 <find_volume+0x550>
		&& move_window(fs, bsect + 1) == FR_OK)
 8008baa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008bac:	3301      	adds	r3, #1
 8008bae:	4619      	mov	r1, r3
 8008bb0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8008bb2:	f7fe fd3e 	bl	8007632 <move_window>
 8008bb6:	4603      	mov	r3, r0
 8008bb8:	2b00      	cmp	r3, #0
 8008bba:	d161      	bne.n	8008c80 <find_volume+0x550>
	{
		fs->fsi_flag = 0;
 8008bbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008bbe:	2200      	movs	r2, #0
 8008bc0:	f883 2205 	strb.w	r2, [r3, #517]	; 0x205
		if (LD_WORD(fs->win.d8 + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8008bc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008bc6:	f893 31ff 	ldrb.w	r3, [r3, #511]	; 0x1ff
 8008bca:	021b      	lsls	r3, r3, #8
 8008bcc:	b21a      	sxth	r2, r3
 8008bce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008bd0:	f893 31fe 	ldrb.w	r3, [r3, #510]	; 0x1fe
 8008bd4:	b21b      	sxth	r3, r3
 8008bd6:	4313      	orrs	r3, r2
 8008bd8:	b21b      	sxth	r3, r3
 8008bda:	4a35      	ldr	r2, [pc, #212]	; (8008cb0 <find_volume+0x580>)
 8008bdc:	4293      	cmp	r3, r2
 8008bde:	d14f      	bne.n	8008c80 <find_volume+0x550>
			&& LD_DWORD(fs->win.d8 + FSI_LeadSig) == 0x41615252
 8008be0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008be2:	78db      	ldrb	r3, [r3, #3]
 8008be4:	061a      	lsls	r2, r3, #24
 8008be6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008be8:	789b      	ldrb	r3, [r3, #2]
 8008bea:	041b      	lsls	r3, r3, #16
 8008bec:	4313      	orrs	r3, r2
 8008bee:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008bf0:	7852      	ldrb	r2, [r2, #1]
 8008bf2:	0212      	lsls	r2, r2, #8
 8008bf4:	4313      	orrs	r3, r2
 8008bf6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008bf8:	7812      	ldrb	r2, [r2, #0]
 8008bfa:	4313      	orrs	r3, r2
 8008bfc:	4a2d      	ldr	r2, [pc, #180]	; (8008cb4 <find_volume+0x584>)
 8008bfe:	4293      	cmp	r3, r2
 8008c00:	d13e      	bne.n	8008c80 <find_volume+0x550>
			&& LD_DWORD(fs->win.d8 + FSI_StrucSig) == 0x61417272)
 8008c02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c04:	f893 31e7 	ldrb.w	r3, [r3, #487]	; 0x1e7
 8008c08:	061a      	lsls	r2, r3, #24
 8008c0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c0c:	f893 31e6 	ldrb.w	r3, [r3, #486]	; 0x1e6
 8008c10:	041b      	lsls	r3, r3, #16
 8008c12:	4313      	orrs	r3, r2
 8008c14:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008c16:	f892 21e5 	ldrb.w	r2, [r2, #485]	; 0x1e5
 8008c1a:	0212      	lsls	r2, r2, #8
 8008c1c:	4313      	orrs	r3, r2
 8008c1e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008c20:	f892 21e4 	ldrb.w	r2, [r2, #484]	; 0x1e4
 8008c24:	4313      	orrs	r3, r2
 8008c26:	4a24      	ldr	r2, [pc, #144]	; (8008cb8 <find_volume+0x588>)
 8008c28:	4293      	cmp	r3, r2
 8008c2a:	d129      	bne.n	8008c80 <find_volume+0x550>
		{
#if (_FS_NOFSINFO & 1) == 0
			fs->free_clust = LD_DWORD(fs->win.d8 + FSI_Free_Count);
 8008c2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c2e:	f893 31eb 	ldrb.w	r3, [r3, #491]	; 0x1eb
 8008c32:	061a      	lsls	r2, r3, #24
 8008c34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c36:	f893 31ea 	ldrb.w	r3, [r3, #490]	; 0x1ea
 8008c3a:	041b      	lsls	r3, r3, #16
 8008c3c:	4313      	orrs	r3, r2
 8008c3e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008c40:	f892 21e9 	ldrb.w	r2, [r2, #489]	; 0x1e9
 8008c44:	0212      	lsls	r2, r2, #8
 8008c46:	4313      	orrs	r3, r2
 8008c48:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008c4a:	f892 21e8 	ldrb.w	r2, [r2, #488]	; 0x1e8
 8008c4e:	431a      	orrs	r2, r3
 8008c50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c52:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
#endif
#if (_FS_NOFSINFO & 2) == 0
			fs->last_clust = LD_DWORD(fs->win.d8 + FSI_Nxt_Free);
 8008c56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c58:	f893 31ef 	ldrb.w	r3, [r3, #495]	; 0x1ef
 8008c5c:	061a      	lsls	r2, r3, #24
 8008c5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c60:	f893 31ee 	ldrb.w	r3, [r3, #494]	; 0x1ee
 8008c64:	041b      	lsls	r3, r3, #16
 8008c66:	4313      	orrs	r3, r2
 8008c68:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008c6a:	f892 21ed 	ldrb.w	r2, [r2, #493]	; 0x1ed
 8008c6e:	0212      	lsls	r2, r2, #8
 8008c70:	4313      	orrs	r3, r2
 8008c72:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008c74:	f892 21ec 	ldrb.w	r2, [r2, #492]	; 0x1ec
 8008c78:	431a      	orrs	r2, r3
 8008c7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c7c:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
#endif
		}
	}
#endif
#endif
	fs->fs_type = fmt;	/* FAT sub-type */
 8008c80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c82:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8008c86:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
	fs->id = ++Fsid;	/* File system mount ID */
 8008c8a:	4b0c      	ldr	r3, [pc, #48]	; (8008cbc <find_volume+0x58c>)
 8008c8c:	881b      	ldrh	r3, [r3, #0]
 8008c8e:	3301      	adds	r3, #1
 8008c90:	b29a      	uxth	r2, r3
 8008c92:	4b0a      	ldr	r3, [pc, #40]	; (8008cbc <find_volume+0x58c>)
 8008c94:	801a      	strh	r2, [r3, #0]
 8008c96:	4b09      	ldr	r3, [pc, #36]	; (8008cbc <find_volume+0x58c>)
 8008c98:	881a      	ldrh	r2, [r3, #0]
 8008c9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c9c:	f8a3 2206 	strh.w	r2, [r3, #518]	; 0x206
#if _FS_RPATH
	fs->cdir = 0;		/* Set current directory to root */
#endif
#if _FS_LOCK			/* Clear file lock semaphores */
	clear_lock(fs);
 8008ca0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8008ca2:	f7fe fc53 	bl	800754c <clear_lock>
#endif

	return FR_OK;
 8008ca6:	2300      	movs	r3, #0
}
 8008ca8:	4618      	mov	r0, r3
 8008caa:	3758      	adds	r7, #88	; 0x58
 8008cac:	46bd      	mov	sp, r7
 8008cae:	bd80      	pop	{r7, pc}
 8008cb0:	ffffaa55 	.word	0xffffaa55
 8008cb4:	41615252 	.word	0x41615252
 8008cb8:	61417272 	.word	0x61417272
 8008cbc:	20001434 	.word	0x20001434

08008cc0 <validate>:

static
FRESULT validate (	/* FR_OK(0): The object is valid, !=0: Invalid */
	void* obj		/* Pointer to the object FIL/DIR to check validity */
)
{
 8008cc0:	b580      	push	{r7, lr}
 8008cc2:	b084      	sub	sp, #16
 8008cc4:	af00      	add	r7, sp, #0
 8008cc6:	6078      	str	r0, [r7, #4]
	FIL *fil = (FIL*)obj;	/* Assuming offset of .fs and .id in the FIL/DIR structure is identical */
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	60fb      	str	r3, [r7, #12]


	if (!fil || !fil->fs || !fil->fs->fs_type || fil->fs->id != fil->id || (disk_status(fil->fs->drv) & STA_NOINIT))
 8008ccc:	68fb      	ldr	r3, [r7, #12]
 8008cce:	2b00      	cmp	r3, #0
 8008cd0:	d022      	beq.n	8008d18 <validate+0x58>
 8008cd2:	68fb      	ldr	r3, [r7, #12]
 8008cd4:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8008cd8:	2b00      	cmp	r3, #0
 8008cda:	d01d      	beq.n	8008d18 <validate+0x58>
 8008cdc:	68fb      	ldr	r3, [r7, #12]
 8008cde:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8008ce2:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8008ce6:	2b00      	cmp	r3, #0
 8008ce8:	d016      	beq.n	8008d18 <validate+0x58>
 8008cea:	68fb      	ldr	r3, [r7, #12]
 8008cec:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8008cf0:	f8b3 2206 	ldrh.w	r2, [r3, #518]	; 0x206
 8008cf4:	68fb      	ldr	r3, [r7, #12]
 8008cf6:	f8b3 3204 	ldrh.w	r3, [r3, #516]	; 0x204
 8008cfa:	429a      	cmp	r2, r3
 8008cfc:	d10c      	bne.n	8008d18 <validate+0x58>
 8008cfe:	68fb      	ldr	r3, [r7, #12]
 8008d00:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8008d04:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 8008d08:	4618      	mov	r0, r3
 8008d0a:	f7fe f977 	bl	8006ffc <disk_status>
 8008d0e:	4603      	mov	r3, r0
 8008d10:	f003 0301 	and.w	r3, r3, #1
 8008d14:	2b00      	cmp	r3, #0
 8008d16:	d001      	beq.n	8008d1c <validate+0x5c>
		return FR_INVALID_OBJECT;
 8008d18:	2309      	movs	r3, #9
 8008d1a:	e000      	b.n	8008d1e <validate+0x5e>

	ENTER_FF(fil->fs);		/* Lock file system */

	return FR_OK;
 8008d1c:	2300      	movs	r3, #0
}
 8008d1e:	4618      	mov	r0, r3
 8008d20:	3710      	adds	r7, #16
 8008d22:	46bd      	mov	sp, r7
 8008d24:	bd80      	pop	{r7, pc}
	...

08008d28 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8008d28:	b580      	push	{r7, lr}
 8008d2a:	b088      	sub	sp, #32
 8008d2c:	af00      	add	r7, sp, #0
 8008d2e:	60f8      	str	r0, [r7, #12]
 8008d30:	60b9      	str	r1, [r7, #8]
 8008d32:	4613      	mov	r3, r2
 8008d34:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8008d36:	68bb      	ldr	r3, [r7, #8]
 8008d38:	613b      	str	r3, [r7, #16]


	vol = get_ldnumber(&rp);
 8008d3a:	f107 0310 	add.w	r3, r7, #16
 8008d3e:	4618      	mov	r0, r3
 8008d40:	f7ff fc48 	bl	80085d4 <get_ldnumber>
 8008d44:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8008d46:	69fb      	ldr	r3, [r7, #28]
 8008d48:	2b00      	cmp	r3, #0
 8008d4a:	da01      	bge.n	8008d50 <f_mount+0x28>
 8008d4c:	230b      	movs	r3, #11
 8008d4e:	e02d      	b.n	8008dac <f_mount+0x84>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8008d50:	4a18      	ldr	r2, [pc, #96]	; (8008db4 <f_mount+0x8c>)
 8008d52:	69fb      	ldr	r3, [r7, #28]
 8008d54:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008d58:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8008d5a:	69bb      	ldr	r3, [r7, #24]
 8008d5c:	2b00      	cmp	r3, #0
 8008d5e:	d006      	beq.n	8008d6e <f_mount+0x46>
#if _FS_LOCK
		clear_lock(cfs);
 8008d60:	69b8      	ldr	r0, [r7, #24]
 8008d62:	f7fe fbf3 	bl	800754c <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8008d66:	69bb      	ldr	r3, [r7, #24]
 8008d68:	2200      	movs	r2, #0
 8008d6a:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
	}

	if (fs) {
 8008d6e:	68fb      	ldr	r3, [r7, #12]
 8008d70:	2b00      	cmp	r3, #0
 8008d72:	d003      	beq.n	8008d7c <f_mount+0x54>
		fs->fs_type = 0;				/* Clear new fs object */
 8008d74:	68fb      	ldr	r3, [r7, #12]
 8008d76:	2200      	movs	r2, #0
 8008d78:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8008d7c:	68fa      	ldr	r2, [r7, #12]
 8008d7e:	490d      	ldr	r1, [pc, #52]	; (8008db4 <f_mount+0x8c>)
 8008d80:	69fb      	ldr	r3, [r7, #28]
 8008d82:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8008d86:	68fb      	ldr	r3, [r7, #12]
 8008d88:	2b00      	cmp	r3, #0
 8008d8a:	d002      	beq.n	8008d92 <f_mount+0x6a>
 8008d8c:	79fb      	ldrb	r3, [r7, #7]
 8008d8e:	2b01      	cmp	r3, #1
 8008d90:	d001      	beq.n	8008d96 <f_mount+0x6e>
 8008d92:	2300      	movs	r3, #0
 8008d94:	e00a      	b.n	8008dac <f_mount+0x84>

	res = find_volume(&fs, &path, 0);	/* Force mounted the volume */
 8008d96:	f107 0108 	add.w	r1, r7, #8
 8008d9a:	f107 030c 	add.w	r3, r7, #12
 8008d9e:	2200      	movs	r2, #0
 8008da0:	4618      	mov	r0, r3
 8008da2:	f7ff fcc5 	bl	8008730 <find_volume>
 8008da6:	4603      	mov	r3, r0
 8008da8:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8008daa:	7dfb      	ldrb	r3, [r7, #23]
}
 8008dac:	4618      	mov	r0, r3
 8008dae:	3720      	adds	r7, #32
 8008db0:	46bd      	mov	sp, r7
 8008db2:	bd80      	pop	{r7, pc}
 8008db4:	20001430 	.word	0x20001430

08008db8 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8008db8:	b580      	push	{r7, lr}
 8008dba:	f5ad 7d14 	sub.w	sp, sp, #592	; 0x250
 8008dbe:	af00      	add	r7, sp, #0
 8008dc0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008dc4:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 8008dc8:	6018      	str	r0, [r3, #0]
 8008dca:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008dce:	f5a3 7312 	sub.w	r3, r3, #584	; 0x248
 8008dd2:	6019      	str	r1, [r3, #0]
 8008dd4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008dd8:	f2a3 2349 	subw	r3, r3, #585	; 0x249
 8008ddc:	701a      	strb	r2, [r3, #0]
#if !_FS_READONLY
	DWORD dw, cl;
#endif


	if (!fp) return FR_INVALID_OBJECT;
 8008dde:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008de2:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 8008de6:	681b      	ldr	r3, [r3, #0]
 8008de8:	2b00      	cmp	r3, #0
 8008dea:	d101      	bne.n	8008df0 <f_open+0x38>
 8008dec:	2309      	movs	r3, #9
 8008dee:	e257      	b.n	80092a0 <f_open+0x4e8>
	fp->fs = 0;			/* Clear file object */
 8008df0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008df4:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 8008df8:	681b      	ldr	r3, [r3, #0]
 8008dfa:	2200      	movs	r2, #0
 8008dfc:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

	/* Get logical drive number */
#if !_FS_READONLY
	mode &= FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW;
 8008e00:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008e04:	f2a3 2349 	subw	r3, r3, #585	; 0x249
 8008e08:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8008e0c:	f2a2 2249 	subw	r2, r2, #585	; 0x249
 8008e10:	7812      	ldrb	r2, [r2, #0]
 8008e12:	f002 021f 	and.w	r2, r2, #31
 8008e16:	701a      	strb	r2, [r3, #0]
	res = find_volume(&dj.fs, &path, (BYTE)(mode & ~FA_READ));
 8008e18:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008e1c:	f2a3 2349 	subw	r3, r3, #585	; 0x249
 8008e20:	781b      	ldrb	r3, [r3, #0]
 8008e22:	f023 0301 	bic.w	r3, r3, #1
 8008e26:	b2da      	uxtb	r2, r3
 8008e28:	f107 0108 	add.w	r1, r7, #8
 8008e2c:	f107 0320 	add.w	r3, r7, #32
 8008e30:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8008e34:	4618      	mov	r0, r3
 8008e36:	f7ff fc7b 	bl	8008730 <find_volume>
 8008e3a:	4603      	mov	r3, r0
 8008e3c:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
#else
	mode &= FA_READ;
	res = find_volume(&dj.fs, &path, 0);
#endif
	if (res == FR_OK) {
 8008e40:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
 8008e44:	2b00      	cmp	r3, #0
 8008e46:	f040 8229 	bne.w	800929c <f_open+0x4e4>
		INIT_BUF(dj);
 8008e4a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008e4e:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 8008e52:	f107 0214 	add.w	r2, r7, #20
 8008e56:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
		res = follow_path(&dj, path);	/* Follow the file path */
 8008e5a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008e5e:	f5a3 7312 	sub.w	r3, r3, #584	; 0x248
 8008e62:	681a      	ldr	r2, [r3, #0]
 8008e64:	f107 0320 	add.w	r3, r7, #32
 8008e68:	4611      	mov	r1, r2
 8008e6a:	4618      	mov	r0, r3
 8008e6c:	f7ff fb44 	bl	80084f8 <follow_path>
 8008e70:	4603      	mov	r3, r0
 8008e72:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
		dir = dj.dir;
 8008e76:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008e7a:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 8008e7e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8008e82:	f8c7 3248 	str.w	r3, [r7, #584]	; 0x248
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8008e86:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
 8008e8a:	2b00      	cmp	r3, #0
 8008e8c:	d11d      	bne.n	8008eca <f_open+0x112>
			if (!dir)	/* Default directory itself */
 8008e8e:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 8008e92:	2b00      	cmp	r3, #0
 8008e94:	d103      	bne.n	8008e9e <f_open+0xe6>
				res = FR_INVALID_NAME;
 8008e96:	2306      	movs	r3, #6
 8008e98:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
 8008e9c:	e015      	b.n	8008eca <f_open+0x112>
#if _FS_LOCK
			else
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8008e9e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008ea2:	f2a3 2349 	subw	r3, r3, #585	; 0x249
 8008ea6:	781b      	ldrb	r3, [r3, #0]
 8008ea8:	f023 0301 	bic.w	r3, r3, #1
 8008eac:	2b00      	cmp	r3, #0
 8008eae:	bf14      	ite	ne
 8008eb0:	2301      	movne	r3, #1
 8008eb2:	2300      	moveq	r3, #0
 8008eb4:	b2db      	uxtb	r3, r3
 8008eb6:	461a      	mov	r2, r3
 8008eb8:	f107 0320 	add.w	r3, r7, #32
 8008ebc:	4611      	mov	r1, r2
 8008ebe:	4618      	mov	r0, r3
 8008ec0:	f7fe f9b6 	bl	8007230 <chk_lock>
 8008ec4:	4603      	mov	r3, r0
 8008ec6:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8008eca:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008ece:	f2a3 2349 	subw	r3, r3, #585	; 0x249
 8008ed2:	781b      	ldrb	r3, [r3, #0]
 8008ed4:	f003 031c 	and.w	r3, r3, #28
 8008ed8:	2b00      	cmp	r3, #0
 8008eda:	f000 80e6 	beq.w	80090aa <f_open+0x2f2>
			if (res != FR_OK) {					/* No file, create new */
 8008ede:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
 8008ee2:	2b00      	cmp	r3, #0
 8008ee4:	d027      	beq.n	8008f36 <f_open+0x17e>
				if (res == FR_NO_FILE)			/* There is no file to open, create a new entry */
 8008ee6:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
 8008eea:	2b04      	cmp	r3, #4
 8008eec:	d10e      	bne.n	8008f0c <f_open+0x154>
#if _FS_LOCK
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8008eee:	f7fe fa0d 	bl	800730c <enq_lock>
 8008ef2:	4603      	mov	r3, r0
 8008ef4:	2b00      	cmp	r3, #0
 8008ef6:	d006      	beq.n	8008f06 <f_open+0x14e>
 8008ef8:	f107 0320 	add.w	r3, r7, #32
 8008efc:	4618      	mov	r0, r3
 8008efe:	f7ff fa02 	bl	8008306 <dir_register>
 8008f02:	4603      	mov	r3, r0
 8008f04:	e000      	b.n	8008f08 <f_open+0x150>
 8008f06:	2312      	movs	r3, #18
 8008f08:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
#else
					res = dir_register(&dj);
#endif
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8008f0c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008f10:	f2a3 2349 	subw	r3, r3, #585	; 0x249
 8008f14:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8008f18:	f2a2 2249 	subw	r2, r2, #585	; 0x249
 8008f1c:	7812      	ldrb	r2, [r2, #0]
 8008f1e:	f042 0208 	orr.w	r2, r2, #8
 8008f22:	701a      	strb	r2, [r3, #0]
				dir = dj.dir;					/* New entry */
 8008f24:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008f28:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 8008f2c:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8008f30:	f8c7 3248 	str.w	r3, [r7, #584]	; 0x248
 8008f34:	e017      	b.n	8008f66 <f_open+0x1ae>
			}
			else {								/* Any object is already existing */
				if (dir[DIR_Attr] & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8008f36:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 8008f3a:	330b      	adds	r3, #11
 8008f3c:	781b      	ldrb	r3, [r3, #0]
 8008f3e:	f003 0311 	and.w	r3, r3, #17
 8008f42:	2b00      	cmp	r3, #0
 8008f44:	d003      	beq.n	8008f4e <f_open+0x196>
					res = FR_DENIED;
 8008f46:	2307      	movs	r3, #7
 8008f48:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
 8008f4c:	e00b      	b.n	8008f66 <f_open+0x1ae>
				} else {
					if (mode & FA_CREATE_NEW)	/* Cannot create as new file */
 8008f4e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008f52:	f2a3 2349 	subw	r3, r3, #585	; 0x249
 8008f56:	781b      	ldrb	r3, [r3, #0]
 8008f58:	f003 0304 	and.w	r3, r3, #4
 8008f5c:	2b00      	cmp	r3, #0
 8008f5e:	d002      	beq.n	8008f66 <f_open+0x1ae>
						res = FR_EXIST;
 8008f60:	2308      	movs	r3, #8
 8008f62:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8008f66:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
 8008f6a:	2b00      	cmp	r3, #0
 8008f6c:	f040 80c1 	bne.w	80090f2 <f_open+0x33a>
 8008f70:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008f74:	f2a3 2349 	subw	r3, r3, #585	; 0x249
 8008f78:	781b      	ldrb	r3, [r3, #0]
 8008f7a:	f003 0308 	and.w	r3, r3, #8
 8008f7e:	2b00      	cmp	r3, #0
 8008f80:	f000 80b7 	beq.w	80090f2 <f_open+0x33a>
				dw = GET_FATTIME();				/* Created time */
 8008f84:	f7fd fb02 	bl	800658c <get_fattime>
 8008f88:	f8c7 0244 	str.w	r0, [r7, #580]	; 0x244
				ST_DWORD(dir + DIR_CrtTime, dw);
 8008f8c:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 8008f90:	330e      	adds	r3, #14
 8008f92:	f8d7 2244 	ldr.w	r2, [r7, #580]	; 0x244
 8008f96:	b2d2      	uxtb	r2, r2
 8008f98:	701a      	strb	r2, [r3, #0]
 8008f9a:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 8008f9e:	b29b      	uxth	r3, r3
 8008fa0:	0a1b      	lsrs	r3, r3, #8
 8008fa2:	b29a      	uxth	r2, r3
 8008fa4:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 8008fa8:	330f      	adds	r3, #15
 8008faa:	b2d2      	uxtb	r2, r2
 8008fac:	701a      	strb	r2, [r3, #0]
 8008fae:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 8008fb2:	0c1a      	lsrs	r2, r3, #16
 8008fb4:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 8008fb8:	3310      	adds	r3, #16
 8008fba:	b2d2      	uxtb	r2, r2
 8008fbc:	701a      	strb	r2, [r3, #0]
 8008fbe:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 8008fc2:	0e1a      	lsrs	r2, r3, #24
 8008fc4:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 8008fc8:	3311      	adds	r3, #17
 8008fca:	b2d2      	uxtb	r2, r2
 8008fcc:	701a      	strb	r2, [r3, #0]
				dir[DIR_Attr] = 0;				/* Reset attribute */
 8008fce:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 8008fd2:	330b      	adds	r3, #11
 8008fd4:	2200      	movs	r2, #0
 8008fd6:	701a      	strb	r2, [r3, #0]
				ST_DWORD(dir + DIR_FileSize, 0);/* size = 0 */
 8008fd8:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 8008fdc:	331c      	adds	r3, #28
 8008fde:	2200      	movs	r2, #0
 8008fe0:	701a      	strb	r2, [r3, #0]
 8008fe2:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 8008fe6:	331d      	adds	r3, #29
 8008fe8:	2200      	movs	r2, #0
 8008fea:	701a      	strb	r2, [r3, #0]
 8008fec:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 8008ff0:	331e      	adds	r3, #30
 8008ff2:	2200      	movs	r2, #0
 8008ff4:	701a      	strb	r2, [r3, #0]
 8008ff6:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 8008ffa:	331f      	adds	r3, #31
 8008ffc:	2200      	movs	r2, #0
 8008ffe:	701a      	strb	r2, [r3, #0]
				cl = ld_clust(dj.fs, dir);		/* Get start cluster */
 8009000:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009004:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 8009008:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800900c:	f8d7 1248 	ldr.w	r1, [r7, #584]	; 0x248
 8009010:	4618      	mov	r0, r3
 8009012:	f7ff f8d4 	bl	80081be <ld_clust>
 8009016:	f8c7 0240 	str.w	r0, [r7, #576]	; 0x240
				st_clust(dir, 0);				/* cluster = 0 */
 800901a:	2100      	movs	r1, #0
 800901c:	f8d7 0248 	ldr.w	r0, [r7, #584]	; 0x248
 8009020:	f7ff f8fb 	bl	800821a <st_clust>
				dj.fs->wflag = 1;
 8009024:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009028:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 800902c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8009030:	2201      	movs	r2, #1
 8009032:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
				if (cl) {						/* Remove the cluster chain if exist */
 8009036:	f8d7 3240 	ldr.w	r3, [r7, #576]	; 0x240
 800903a:	2b00      	cmp	r3, #0
 800903c:	d059      	beq.n	80090f2 <f_open+0x33a>
					dw = dj.fs->winsect;
 800903e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009042:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 8009046:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800904a:	f8d3 322c 	ldr.w	r3, [r3, #556]	; 0x22c
 800904e:	f8c7 3244 	str.w	r3, [r7, #580]	; 0x244
					res = remove_chain(dj.fs, cl);
 8009052:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009056:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 800905a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800905e:	f8d7 1240 	ldr.w	r1, [r7, #576]	; 0x240
 8009062:	4618      	mov	r0, r3
 8009064:	f7fe fdaa 	bl	8007bbc <remove_chain>
 8009068:	4603      	mov	r3, r0
 800906a:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
					if (res == FR_OK) {
 800906e:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
 8009072:	2b00      	cmp	r3, #0
 8009074:	d13d      	bne.n	80090f2 <f_open+0x33a>
						dj.fs->last_clust = cl - 1;	/* Reuse the cluster hole */
 8009076:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800907a:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 800907e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8009082:	f8d7 2240 	ldr.w	r2, [r7, #576]	; 0x240
 8009086:	3a01      	subs	r2, #1
 8009088:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
						res = move_window(dj.fs, dw);
 800908c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009090:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 8009094:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8009098:	f8d7 1244 	ldr.w	r1, [r7, #580]	; 0x244
 800909c:	4618      	mov	r0, r3
 800909e:	f7fe fac8 	bl	8007632 <move_window>
 80090a2:	4603      	mov	r3, r0
 80090a4:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
 80090a8:	e023      	b.n	80090f2 <f_open+0x33a>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Follow succeeded */
 80090aa:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
 80090ae:	2b00      	cmp	r3, #0
 80090b0:	d11f      	bne.n	80090f2 <f_open+0x33a>
				if (dir[DIR_Attr] & AM_DIR) {	/* It is a directory */
 80090b2:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 80090b6:	330b      	adds	r3, #11
 80090b8:	781b      	ldrb	r3, [r3, #0]
 80090ba:	f003 0310 	and.w	r3, r3, #16
 80090be:	2b00      	cmp	r3, #0
 80090c0:	d003      	beq.n	80090ca <f_open+0x312>
					res = FR_NO_FILE;
 80090c2:	2304      	movs	r3, #4
 80090c4:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
 80090c8:	e013      	b.n	80090f2 <f_open+0x33a>
				} else {
					if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
 80090ca:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80090ce:	f2a3 2349 	subw	r3, r3, #585	; 0x249
 80090d2:	781b      	ldrb	r3, [r3, #0]
 80090d4:	f003 0302 	and.w	r3, r3, #2
 80090d8:	2b00      	cmp	r3, #0
 80090da:	d00a      	beq.n	80090f2 <f_open+0x33a>
 80090dc:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 80090e0:	330b      	adds	r3, #11
 80090e2:	781b      	ldrb	r3, [r3, #0]
 80090e4:	f003 0301 	and.w	r3, r3, #1
 80090e8:	2b00      	cmp	r3, #0
 80090ea:	d002      	beq.n	80090f2 <f_open+0x33a>
						res = FR_DENIED;
 80090ec:	2307      	movs	r3, #7
 80090ee:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
				}
			}
		}
		if (res == FR_OK) {
 80090f2:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
 80090f6:	2b00      	cmp	r3, #0
 80090f8:	d153      	bne.n	80091a2 <f_open+0x3ea>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 80090fa:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80090fe:	f2a3 2349 	subw	r3, r3, #585	; 0x249
 8009102:	781b      	ldrb	r3, [r3, #0]
 8009104:	f003 0308 	and.w	r3, r3, #8
 8009108:	2b00      	cmp	r3, #0
 800910a:	d00b      	beq.n	8009124 <f_open+0x36c>
				mode |= FA__WRITTEN;
 800910c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009110:	f2a3 2349 	subw	r3, r3, #585	; 0x249
 8009114:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8009118:	f2a2 2249 	subw	r2, r2, #585	; 0x249
 800911c:	7812      	ldrb	r2, [r2, #0]
 800911e:	f042 0220 	orr.w	r2, r2, #32
 8009122:	701a      	strb	r2, [r3, #0]
			fp->dir_sect = dj.fs->winsect;		/* Pointer to the directory entry */
 8009124:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009128:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 800912c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8009130:	f8d3 222c 	ldr.w	r2, [r3, #556]	; 0x22c
 8009134:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009138:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 800913c:	681b      	ldr	r3, [r3, #0]
 800913e:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
			fp->dir_ptr = dir;
 8009142:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009146:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 800914a:	681b      	ldr	r3, [r3, #0]
 800914c:	f8d7 2248 	ldr.w	r2, [r7, #584]	; 0x248
 8009150:	f8c3 2220 	str.w	r2, [r3, #544]	; 0x220
#if _FS_LOCK
			fp->lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8009154:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009158:	f2a3 2349 	subw	r3, r3, #585	; 0x249
 800915c:	781b      	ldrb	r3, [r3, #0]
 800915e:	f023 0301 	bic.w	r3, r3, #1
 8009162:	2b00      	cmp	r3, #0
 8009164:	bf14      	ite	ne
 8009166:	2301      	movne	r3, #1
 8009168:	2300      	moveq	r3, #0
 800916a:	b2db      	uxtb	r3, r3
 800916c:	461a      	mov	r2, r3
 800916e:	f107 0320 	add.w	r3, r7, #32
 8009172:	4611      	mov	r1, r2
 8009174:	4618      	mov	r0, r3
 8009176:	f7fe f8ed 	bl	8007354 <inc_lock>
 800917a:	4602      	mov	r2, r0
 800917c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009180:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 8009184:	681b      	ldr	r3, [r3, #0]
 8009186:	f8c3 2228 	str.w	r2, [r3, #552]	; 0x228
			if (!fp->lockid) res = FR_INT_ERR;
 800918a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800918e:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 8009192:	681b      	ldr	r3, [r3, #0]
 8009194:	f8d3 3228 	ldr.w	r3, [r3, #552]	; 0x228
 8009198:	2b00      	cmp	r3, #0
 800919a:	d102      	bne.n	80091a2 <f_open+0x3ea>
 800919c:	2302      	movs	r3, #2
 800919e:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
			}
		}
#endif
		FREE_BUF();

		if (res == FR_OK) {
 80091a2:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
 80091a6:	2b00      	cmp	r3, #0
 80091a8:	d178      	bne.n	800929c <f_open+0x4e4>
			fp->flag = mode;					/* File access mode */
 80091aa:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80091ae:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 80091b2:	681b      	ldr	r3, [r3, #0]
 80091b4:	f507 7214 	add.w	r2, r7, #592	; 0x250
 80091b8:	f2a2 2249 	subw	r2, r2, #585	; 0x249
 80091bc:	7812      	ldrb	r2, [r2, #0]
 80091be:	f883 2206 	strb.w	r2, [r3, #518]	; 0x206
			fp->err = 0;						/* Clear error flag */
 80091c2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80091c6:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 80091ca:	681b      	ldr	r3, [r3, #0]
 80091cc:	2200      	movs	r2, #0
 80091ce:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
			fp->sclust = ld_clust(dj.fs, dir);	/* File start cluster */
 80091d2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80091d6:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 80091da:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80091de:	f8d7 1248 	ldr.w	r1, [r7, #584]	; 0x248
 80091e2:	4618      	mov	r0, r3
 80091e4:	f7fe ffeb 	bl	80081be <ld_clust>
 80091e8:	4602      	mov	r2, r0
 80091ea:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80091ee:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 80091f2:	681b      	ldr	r3, [r3, #0]
 80091f4:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
			fp->fsize = LD_DWORD(dir + DIR_FileSize);	/* File size */
 80091f8:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 80091fc:	331f      	adds	r3, #31
 80091fe:	781b      	ldrb	r3, [r3, #0]
 8009200:	061a      	lsls	r2, r3, #24
 8009202:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 8009206:	331e      	adds	r3, #30
 8009208:	781b      	ldrb	r3, [r3, #0]
 800920a:	041b      	lsls	r3, r3, #16
 800920c:	4313      	orrs	r3, r2
 800920e:	f8d7 2248 	ldr.w	r2, [r7, #584]	; 0x248
 8009212:	321d      	adds	r2, #29
 8009214:	7812      	ldrb	r2, [r2, #0]
 8009216:	0212      	lsls	r2, r2, #8
 8009218:	4313      	orrs	r3, r2
 800921a:	f8d7 2248 	ldr.w	r2, [r7, #584]	; 0x248
 800921e:	321c      	adds	r2, #28
 8009220:	7812      	ldrb	r2, [r2, #0]
 8009222:	431a      	orrs	r2, r3
 8009224:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009228:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 800922c:	681b      	ldr	r3, [r3, #0]
 800922e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
			fp->fptr = 0;						/* File pointer */
 8009232:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009236:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 800923a:	681b      	ldr	r3, [r3, #0]
 800923c:	2200      	movs	r2, #0
 800923e:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
			fp->dsect = 0;
 8009242:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009246:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 800924a:	681b      	ldr	r3, [r3, #0]
 800924c:	2200      	movs	r2, #0
 800924e:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
#if _USE_FASTSEEK
			fp->cltbl = 0;						/* Normal seek mode */
 8009252:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009256:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 800925a:	681b      	ldr	r3, [r3, #0]
 800925c:	2200      	movs	r2, #0
 800925e:	f8c3 2224 	str.w	r2, [r3, #548]	; 0x224
#endif
			fp->fs = dj.fs;	 					/* Validate file object */
 8009262:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009266:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 800926a:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 800926e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009272:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 8009276:	681b      	ldr	r3, [r3, #0]
 8009278:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
			fp->id = fp->fs->id;
 800927c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009280:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 8009284:	681b      	ldr	r3, [r3, #0]
 8009286:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800928a:	f8b3 2206 	ldrh.w	r2, [r3, #518]	; 0x206
 800928e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009292:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 8009296:	681b      	ldr	r3, [r3, #0]
 8009298:	f8a3 2204 	strh.w	r2, [r3, #516]	; 0x204
		}
	}

	LEAVE_FF(dj.fs, res);
 800929c:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
}
 80092a0:	4618      	mov	r0, r3
 80092a2:	f507 7714 	add.w	r7, r7, #592	; 0x250
 80092a6:	46bd      	mov	sp, r7
 80092a8:	bd80      	pop	{r7, pc}

080092aa <f_read>:
	FIL* fp, 		/* Pointer to the file object */
	void* buff,		/* Pointer to data buffer */
	UINT btr,		/* Number of bytes to read */
	UINT* br		/* Pointer to number of bytes read */
)
{
 80092aa:	b580      	push	{r7, lr}
 80092ac:	b08c      	sub	sp, #48	; 0x30
 80092ae:	af00      	add	r7, sp, #0
 80092b0:	60f8      	str	r0, [r7, #12]
 80092b2:	60b9      	str	r1, [r7, #8]
 80092b4:	607a      	str	r2, [r7, #4]
 80092b6:	603b      	str	r3, [r7, #0]
	FRESULT res;
	DWORD clst, sect, remain;
	UINT rcnt, cc;
	BYTE csect, *rbuff = (BYTE*)buff;
 80092b8:	68bb      	ldr	r3, [r7, #8]
 80092ba:	623b      	str	r3, [r7, #32]


	*br = 0;	/* Clear read byte counter */
 80092bc:	683b      	ldr	r3, [r7, #0]
 80092be:	2200      	movs	r2, #0
 80092c0:	601a      	str	r2, [r3, #0]

	res = validate(fp);							/* Check validity */
 80092c2:	68f8      	ldr	r0, [r7, #12]
 80092c4:	f7ff fcfc 	bl	8008cc0 <validate>
 80092c8:	4603      	mov	r3, r0
 80092ca:	77fb      	strb	r3, [r7, #31]
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
 80092cc:	7ffb      	ldrb	r3, [r7, #31]
 80092ce:	2b00      	cmp	r3, #0
 80092d0:	d001      	beq.n	80092d6 <f_read+0x2c>
 80092d2:	7ffb      	ldrb	r3, [r7, #31]
 80092d4:	e150      	b.n	8009578 <f_read+0x2ce>
	if (fp->err)								/* Check error */
 80092d6:	68fb      	ldr	r3, [r7, #12]
 80092d8:	f893 3207 	ldrb.w	r3, [r3, #519]	; 0x207
 80092dc:	2b00      	cmp	r3, #0
 80092de:	d003      	beq.n	80092e8 <f_read+0x3e>
		LEAVE_FF(fp->fs, (FRESULT)fp->err);
 80092e0:	68fb      	ldr	r3, [r7, #12]
 80092e2:	f893 3207 	ldrb.w	r3, [r3, #519]	; 0x207
 80092e6:	e147      	b.n	8009578 <f_read+0x2ce>
	if (!(fp->flag & FA_READ)) 					/* Check access mode */
 80092e8:	68fb      	ldr	r3, [r7, #12]
 80092ea:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 80092ee:	f003 0301 	and.w	r3, r3, #1
 80092f2:	2b00      	cmp	r3, #0
 80092f4:	d101      	bne.n	80092fa <f_read+0x50>
		LEAVE_FF(fp->fs, FR_DENIED);
 80092f6:	2307      	movs	r3, #7
 80092f8:	e13e      	b.n	8009578 <f_read+0x2ce>
	remain = fp->fsize - fp->fptr;
 80092fa:	68fb      	ldr	r3, [r7, #12]
 80092fc:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8009300:	68fb      	ldr	r3, [r7, #12]
 8009302:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 8009306:	1ad3      	subs	r3, r2, r3
 8009308:	61bb      	str	r3, [r7, #24]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 800930a:	687a      	ldr	r2, [r7, #4]
 800930c:	69bb      	ldr	r3, [r7, #24]
 800930e:	429a      	cmp	r2, r3
 8009310:	f240 812d 	bls.w	800956e <f_read+0x2c4>
 8009314:	69bb      	ldr	r3, [r7, #24]
 8009316:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 8009318:	e129      	b.n	800956e <f_read+0x2c4>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if ((fp->fptr % SS(fp->fs)) == 0) {		/* On the sector boundary? */
 800931a:	68fb      	ldr	r3, [r7, #12]
 800931c:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 8009320:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009324:	2b00      	cmp	r3, #0
 8009326:	f040 80f2 	bne.w	800950e <f_read+0x264>
			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
 800932a:	68fb      	ldr	r3, [r7, #12]
 800932c:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 8009330:	0a5b      	lsrs	r3, r3, #9
 8009332:	b2da      	uxtb	r2, r3
 8009334:	68fb      	ldr	r3, [r7, #12]
 8009336:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800933a:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 800933e:	3b01      	subs	r3, #1
 8009340:	b2db      	uxtb	r3, r3
 8009342:	4013      	ands	r3, r2
 8009344:	75fb      	strb	r3, [r7, #23]
			if (!csect) {						/* On the cluster boundary? */
 8009346:	7dfb      	ldrb	r3, [r7, #23]
 8009348:	2b00      	cmp	r3, #0
 800934a:	d139      	bne.n	80093c0 <f_read+0x116>
				if (fp->fptr == 0) {			/* On the top of the file? */
 800934c:	68fb      	ldr	r3, [r7, #12]
 800934e:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 8009352:	2b00      	cmp	r3, #0
 8009354:	d104      	bne.n	8009360 <f_read+0xb6>
					clst = fp->sclust;			/* Follow from the origin */
 8009356:	68fb      	ldr	r3, [r7, #12]
 8009358:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800935c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800935e:	e018      	b.n	8009392 <f_read+0xe8>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl)
 8009360:	68fb      	ldr	r3, [r7, #12]
 8009362:	f8d3 3224 	ldr.w	r3, [r3, #548]	; 0x224
 8009366:	2b00      	cmp	r3, #0
 8009368:	d008      	beq.n	800937c <f_read+0xd2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800936a:	68fb      	ldr	r3, [r7, #12]
 800936c:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 8009370:	4619      	mov	r1, r3
 8009372:	68f8      	ldr	r0, [r7, #12]
 8009374:	f7fe fd19 	bl	8007daa <clmt_clust>
 8009378:	62f8      	str	r0, [r7, #44]	; 0x2c
 800937a:	e00a      	b.n	8009392 <f_read+0xe8>
					else
#endif
						clst = get_fat(fp->fs, fp->clust);	/* Follow cluster chain on the FAT */
 800937c:	68fb      	ldr	r3, [r7, #12]
 800937e:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8009382:	68fb      	ldr	r3, [r7, #12]
 8009384:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8009388:	4619      	mov	r1, r3
 800938a:	4610      	mov	r0, r2
 800938c:	f7fe fa4e 	bl	800782c <get_fat>
 8009390:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				if (clst < 2) ABORT(fp->fs, FR_INT_ERR);
 8009392:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009394:	2b01      	cmp	r3, #1
 8009396:	d805      	bhi.n	80093a4 <f_read+0xfa>
 8009398:	68fb      	ldr	r3, [r7, #12]
 800939a:	2202      	movs	r2, #2
 800939c:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 80093a0:	2302      	movs	r3, #2
 80093a2:	e0e9      	b.n	8009578 <f_read+0x2ce>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 80093a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80093a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80093aa:	d105      	bne.n	80093b8 <f_read+0x10e>
 80093ac:	68fb      	ldr	r3, [r7, #12]
 80093ae:	2201      	movs	r2, #1
 80093b0:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 80093b4:	2301      	movs	r3, #1
 80093b6:	e0df      	b.n	8009578 <f_read+0x2ce>
				fp->clust = clst;				/* Update current cluster */
 80093b8:	68fb      	ldr	r3, [r7, #12]
 80093ba:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80093bc:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
			}
			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
 80093c0:	68fb      	ldr	r3, [r7, #12]
 80093c2:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 80093c6:	68fb      	ldr	r3, [r7, #12]
 80093c8:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80093cc:	4619      	mov	r1, r3
 80093ce:	4610      	mov	r0, r2
 80093d0:	f7fe fa0a 	bl	80077e8 <clust2sect>
 80093d4:	6138      	str	r0, [r7, #16]
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
 80093d6:	693b      	ldr	r3, [r7, #16]
 80093d8:	2b00      	cmp	r3, #0
 80093da:	d105      	bne.n	80093e8 <f_read+0x13e>
 80093dc:	68fb      	ldr	r3, [r7, #12]
 80093de:	2202      	movs	r2, #2
 80093e0:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 80093e4:	2302      	movs	r3, #2
 80093e6:	e0c7      	b.n	8009578 <f_read+0x2ce>
			sect += csect;
 80093e8:	7dfb      	ldrb	r3, [r7, #23]
 80093ea:	693a      	ldr	r2, [r7, #16]
 80093ec:	4413      	add	r3, r2
 80093ee:	613b      	str	r3, [r7, #16]
			cc = btr / SS(fp->fs);				/* When remaining bytes >= sector size, */
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	0a5b      	lsrs	r3, r3, #9
 80093f4:	627b      	str	r3, [r7, #36]	; 0x24
			if (cc) {							/* Read maximum contiguous sectors directly */
 80093f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093f8:	2b00      	cmp	r3, #0
 80093fa:	d046      	beq.n	800948a <f_read+0x1e0>
				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
 80093fc:	7dfa      	ldrb	r2, [r7, #23]
 80093fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009400:	4413      	add	r3, r2
 8009402:	68fa      	ldr	r2, [r7, #12]
 8009404:	f8d2 2200 	ldr.w	r2, [r2, #512]	; 0x200
 8009408:	f892 2202 	ldrb.w	r2, [r2, #514]	; 0x202
 800940c:	4293      	cmp	r3, r2
 800940e:	d908      	bls.n	8009422 <f_read+0x178>
					cc = fp->fs->csize - csect;
 8009410:	68fb      	ldr	r3, [r7, #12]
 8009412:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8009416:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 800941a:	461a      	mov	r2, r3
 800941c:	7dfb      	ldrb	r3, [r7, #23]
 800941e:	1ad3      	subs	r3, r2, r3
 8009420:	627b      	str	r3, [r7, #36]	; 0x24
				if (disk_read(fp->fs->drv, rbuff, sect, cc) != RES_OK)
 8009422:	68fb      	ldr	r3, [r7, #12]
 8009424:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8009428:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 800942c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800942e:	693a      	ldr	r2, [r7, #16]
 8009430:	6a39      	ldr	r1, [r7, #32]
 8009432:	f7fd fe23 	bl	800707c <disk_read>
 8009436:	4603      	mov	r3, r0
 8009438:	2b00      	cmp	r3, #0
 800943a:	d005      	beq.n	8009448 <f_read+0x19e>
					ABORT(fp->fs, FR_DISK_ERR);
 800943c:	68fb      	ldr	r3, [r7, #12]
 800943e:	2201      	movs	r2, #1
 8009440:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 8009444:	2301      	movs	r3, #1
 8009446:	e097      	b.n	8009578 <f_read+0x2ce>
#if !_FS_READONLY && _FS_MINIMIZE <= 2			/* Replace one of the read sectors with cached data if it contains a dirty sector */
#if _FS_TINY
				if (fp->fs->wflag && fp->fs->winsect - sect < cc)
					mem_cpy(rbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), fp->fs->win.d8, SS(fp->fs));
#else
				if ((fp->flag & FA__DIRTY) && fp->dsect - sect < cc)
 8009448:	68fb      	ldr	r3, [r7, #12]
 800944a:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 800944e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009452:	2b00      	cmp	r3, #0
 8009454:	d015      	beq.n	8009482 <f_read+0x1d8>
 8009456:	68fb      	ldr	r3, [r7, #12]
 8009458:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 800945c:	693b      	ldr	r3, [r7, #16]
 800945e:	1ad3      	subs	r3, r2, r3
 8009460:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009462:	429a      	cmp	r2, r3
 8009464:	d90d      	bls.n	8009482 <f_read+0x1d8>
					mem_cpy(rbuff + ((fp->dsect - sect) * SS(fp->fs)), fp->buf.d8, SS(fp->fs));
 8009466:	68fb      	ldr	r3, [r7, #12]
 8009468:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 800946c:	693b      	ldr	r3, [r7, #16]
 800946e:	1ad3      	subs	r3, r2, r3
 8009470:	025b      	lsls	r3, r3, #9
 8009472:	6a3a      	ldr	r2, [r7, #32]
 8009474:	4413      	add	r3, r2
 8009476:	68f9      	ldr	r1, [r7, #12]
 8009478:	f44f 7200 	mov.w	r2, #512	; 0x200
 800947c:	4618      	mov	r0, r3
 800947e:	f7fd fe5b 	bl	8007138 <mem_cpy>
#endif
#endif
				rcnt = SS(fp->fs) * cc;			/* Number of bytes transferred */
 8009482:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009484:	025b      	lsls	r3, r3, #9
 8009486:	62bb      	str	r3, [r7, #40]	; 0x28
				continue;
 8009488:	e05b      	b.n	8009542 <f_read+0x298>
			}
#if !_FS_TINY
			if (fp->dsect != sect) {			/* Load data sector if not in cache */
 800948a:	68fb      	ldr	r3, [r7, #12]
 800948c:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8009490:	693a      	ldr	r2, [r7, #16]
 8009492:	429a      	cmp	r2, r3
 8009494:	d037      	beq.n	8009506 <f_read+0x25c>
#if !_FS_READONLY
				if (fp->flag & FA__DIRTY) {		/* Write-back dirty sector cache */
 8009496:	68fb      	ldr	r3, [r7, #12]
 8009498:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 800949c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80094a0:	2b00      	cmp	r3, #0
 80094a2:	d01d      	beq.n	80094e0 <f_read+0x236>
					if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 80094a4:	68fb      	ldr	r3, [r7, #12]
 80094a6:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80094aa:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 80094ae:	68f9      	ldr	r1, [r7, #12]
 80094b0:	68fb      	ldr	r3, [r7, #12]
 80094b2:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 80094b6:	2301      	movs	r3, #1
 80094b8:	f7fd fe00 	bl	80070bc <disk_write>
 80094bc:	4603      	mov	r3, r0
 80094be:	2b00      	cmp	r3, #0
 80094c0:	d005      	beq.n	80094ce <f_read+0x224>
						ABORT(fp->fs, FR_DISK_ERR);
 80094c2:	68fb      	ldr	r3, [r7, #12]
 80094c4:	2201      	movs	r2, #1
 80094c6:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 80094ca:	2301      	movs	r3, #1
 80094cc:	e054      	b.n	8009578 <f_read+0x2ce>
					fp->flag &= ~FA__DIRTY;
 80094ce:	68fb      	ldr	r3, [r7, #12]
 80094d0:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 80094d4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80094d8:	b2da      	uxtb	r2, r3
 80094da:	68fb      	ldr	r3, [r7, #12]
 80094dc:	f883 2206 	strb.w	r2, [r3, #518]	; 0x206
				}
#endif
				if (disk_read(fp->fs->drv, fp->buf.d8, sect, 1) != RES_OK)	/* Fill sector cache */
 80094e0:	68fb      	ldr	r3, [r7, #12]
 80094e2:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80094e6:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 80094ea:	68f9      	ldr	r1, [r7, #12]
 80094ec:	2301      	movs	r3, #1
 80094ee:	693a      	ldr	r2, [r7, #16]
 80094f0:	f7fd fdc4 	bl	800707c <disk_read>
 80094f4:	4603      	mov	r3, r0
 80094f6:	2b00      	cmp	r3, #0
 80094f8:	d005      	beq.n	8009506 <f_read+0x25c>
					ABORT(fp->fs, FR_DISK_ERR);
 80094fa:	68fb      	ldr	r3, [r7, #12]
 80094fc:	2201      	movs	r2, #1
 80094fe:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 8009502:	2301      	movs	r3, #1
 8009504:	e038      	b.n	8009578 <f_read+0x2ce>
			}
#endif
			fp->dsect = sect;
 8009506:	68fb      	ldr	r3, [r7, #12]
 8009508:	693a      	ldr	r2, [r7, #16]
 800950a:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
		}
		rcnt = SS(fp->fs) - ((UINT)fp->fptr % SS(fp->fs));	/* Get partial sector data from sector buffer */
 800950e:	68fb      	ldr	r3, [r7, #12]
 8009510:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 8009514:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009518:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 800951c:	62bb      	str	r3, [r7, #40]	; 0x28
		if (rcnt > btr) rcnt = btr;
 800951e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	429a      	cmp	r2, r3
 8009524:	d901      	bls.n	800952a <f_read+0x280>
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	62bb      	str	r3, [r7, #40]	; 0x28
#if _FS_TINY
		if (move_window(fp->fs, fp->dsect) != FR_OK)		/* Move sector window */
			ABORT(fp->fs, FR_DISK_ERR);
		mem_cpy(rbuff, &fp->fs->win.d8[fp->fptr % SS(fp->fs)], rcnt);	/* Pick partial sector */
#else
		mem_cpy(rbuff, &fp->buf.d8[fp->fptr % SS(fp->fs)], rcnt);	/* Pick partial sector */
 800952a:	68fb      	ldr	r3, [r7, #12]
 800952c:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 8009530:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009534:	68fa      	ldr	r2, [r7, #12]
 8009536:	4413      	add	r3, r2
 8009538:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800953a:	4619      	mov	r1, r3
 800953c:	6a38      	ldr	r0, [r7, #32]
 800953e:	f7fd fdfb 	bl	8007138 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 8009542:	6a3a      	ldr	r2, [r7, #32]
 8009544:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009546:	4413      	add	r3, r2
 8009548:	623b      	str	r3, [r7, #32]
 800954a:	68fb      	ldr	r3, [r7, #12]
 800954c:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8009550:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009552:	441a      	add	r2, r3
 8009554:	68fb      	ldr	r3, [r7, #12]
 8009556:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
 800955a:	683b      	ldr	r3, [r7, #0]
 800955c:	681a      	ldr	r2, [r3, #0]
 800955e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009560:	441a      	add	r2, r3
 8009562:	683b      	ldr	r3, [r7, #0]
 8009564:	601a      	str	r2, [r3, #0]
 8009566:	687a      	ldr	r2, [r7, #4]
 8009568:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800956a:	1ad3      	subs	r3, r2, r3
 800956c:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	2b00      	cmp	r3, #0
 8009572:	f47f aed2 	bne.w	800931a <f_read+0x70>
#endif
	}

	LEAVE_FF(fp->fs, FR_OK);
 8009576:	2300      	movs	r3, #0
}
 8009578:	4618      	mov	r0, r3
 800957a:	3730      	adds	r7, #48	; 0x30
 800957c:	46bd      	mov	sp, r7
 800957e:	bd80      	pop	{r7, pc}

08009580 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void *buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8009580:	b580      	push	{r7, lr}
 8009582:	b08a      	sub	sp, #40	; 0x28
 8009584:	af00      	add	r7, sp, #0
 8009586:	60f8      	str	r0, [r7, #12]
 8009588:	60b9      	str	r1, [r7, #8]
 800958a:	607a      	str	r2, [r7, #4]
 800958c:	603b      	str	r3, [r7, #0]
	FRESULT res;
	DWORD clst, sect;
	UINT wcnt, cc;
	const BYTE *wbuff = (const BYTE*)buff;
 800958e:	68bb      	ldr	r3, [r7, #8]
 8009590:	61bb      	str	r3, [r7, #24]
	BYTE csect;


	*bw = 0;	/* Clear write byte counter */
 8009592:	683b      	ldr	r3, [r7, #0]
 8009594:	2200      	movs	r2, #0
 8009596:	601a      	str	r2, [r3, #0]

	res = validate(fp);						/* Check validity */
 8009598:	68f8      	ldr	r0, [r7, #12]
 800959a:	f7ff fb91 	bl	8008cc0 <validate>
 800959e:	4603      	mov	r3, r0
 80095a0:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
 80095a2:	7dfb      	ldrb	r3, [r7, #23]
 80095a4:	2b00      	cmp	r3, #0
 80095a6:	d001      	beq.n	80095ac <f_write+0x2c>
 80095a8:	7dfb      	ldrb	r3, [r7, #23]
 80095aa:	e192      	b.n	80098d2 <f_write+0x352>
	if (fp->err)							/* Check error */
 80095ac:	68fb      	ldr	r3, [r7, #12]
 80095ae:	f893 3207 	ldrb.w	r3, [r3, #519]	; 0x207
 80095b2:	2b00      	cmp	r3, #0
 80095b4:	d003      	beq.n	80095be <f_write+0x3e>
		LEAVE_FF(fp->fs, (FRESULT)fp->err);
 80095b6:	68fb      	ldr	r3, [r7, #12]
 80095b8:	f893 3207 	ldrb.w	r3, [r3, #519]	; 0x207
 80095bc:	e189      	b.n	80098d2 <f_write+0x352>
	if (!(fp->flag & FA_WRITE))				/* Check access mode */
 80095be:	68fb      	ldr	r3, [r7, #12]
 80095c0:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 80095c4:	f003 0302 	and.w	r3, r3, #2
 80095c8:	2b00      	cmp	r3, #0
 80095ca:	d101      	bne.n	80095d0 <f_write+0x50>
		LEAVE_FF(fp->fs, FR_DENIED);
 80095cc:	2307      	movs	r3, #7
 80095ce:	e180      	b.n	80098d2 <f_write+0x352>
	if (fp->fptr + btw < fp->fptr) btw = 0;	/* File size cannot reach 4GB */
 80095d0:	68fb      	ldr	r3, [r7, #12]
 80095d2:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	441a      	add	r2, r3
 80095da:	68fb      	ldr	r3, [r7, #12]
 80095dc:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 80095e0:	429a      	cmp	r2, r3
 80095e2:	f080 8158 	bcs.w	8009896 <f_write+0x316>
 80095e6:	2300      	movs	r3, #0
 80095e8:	607b      	str	r3, [r7, #4]

	for ( ;  btw;							/* Repeat until all data written */
 80095ea:	e154      	b.n	8009896 <f_write+0x316>
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
		if ((fp->fptr % SS(fp->fs)) == 0) {	/* On the sector boundary? */
 80095ec:	68fb      	ldr	r3, [r7, #12]
 80095ee:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 80095f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80095f6:	2b00      	cmp	r3, #0
 80095f8:	f040 8114 	bne.w	8009824 <f_write+0x2a4>
			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
 80095fc:	68fb      	ldr	r3, [r7, #12]
 80095fe:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 8009602:	0a5b      	lsrs	r3, r3, #9
 8009604:	b2da      	uxtb	r2, r3
 8009606:	68fb      	ldr	r3, [r7, #12]
 8009608:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800960c:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 8009610:	3b01      	subs	r3, #1
 8009612:	b2db      	uxtb	r3, r3
 8009614:	4013      	ands	r3, r2
 8009616:	75bb      	strb	r3, [r7, #22]
			if (!csect) {					/* On the cluster boundary? */
 8009618:	7dbb      	ldrb	r3, [r7, #22]
 800961a:	2b00      	cmp	r3, #0
 800961c:	d151      	bne.n	80096c2 <f_write+0x142>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800961e:	68fb      	ldr	r3, [r7, #12]
 8009620:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 8009624:	2b00      	cmp	r3, #0
 8009626:	d10f      	bne.n	8009648 <f_write+0xc8>
					clst = fp->sclust;		/* Follow from the origin */
 8009628:	68fb      	ldr	r3, [r7, #12]
 800962a:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800962e:	627b      	str	r3, [r7, #36]	; 0x24
					if (clst == 0)			/* When no cluster is allocated, */
 8009630:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009632:	2b00      	cmp	r3, #0
 8009634:	d121      	bne.n	800967a <f_write+0xfa>
						clst = create_chain(fp->fs, 0);	/* Create a new cluster chain */
 8009636:	68fb      	ldr	r3, [r7, #12]
 8009638:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800963c:	2100      	movs	r1, #0
 800963e:	4618      	mov	r0, r3
 8009640:	f7fe fb16 	bl	8007c70 <create_chain>
 8009644:	6278      	str	r0, [r7, #36]	; 0x24
 8009646:	e018      	b.n	800967a <f_write+0xfa>
				} else {					/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl)
 8009648:	68fb      	ldr	r3, [r7, #12]
 800964a:	f8d3 3224 	ldr.w	r3, [r3, #548]	; 0x224
 800964e:	2b00      	cmp	r3, #0
 8009650:	d008      	beq.n	8009664 <f_write+0xe4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8009652:	68fb      	ldr	r3, [r7, #12]
 8009654:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 8009658:	4619      	mov	r1, r3
 800965a:	68f8      	ldr	r0, [r7, #12]
 800965c:	f7fe fba5 	bl	8007daa <clmt_clust>
 8009660:	6278      	str	r0, [r7, #36]	; 0x24
 8009662:	e00a      	b.n	800967a <f_write+0xfa>
					else
#endif
						clst = create_chain(fp->fs, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8009664:	68fb      	ldr	r3, [r7, #12]
 8009666:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 800966a:	68fb      	ldr	r3, [r7, #12]
 800966c:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8009670:	4619      	mov	r1, r3
 8009672:	4610      	mov	r0, r2
 8009674:	f7fe fafc 	bl	8007c70 <create_chain>
 8009678:	6278      	str	r0, [r7, #36]	; 0x24
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800967a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800967c:	2b00      	cmp	r3, #0
 800967e:	f000 810f 	beq.w	80098a0 <f_write+0x320>
				if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
 8009682:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009684:	2b01      	cmp	r3, #1
 8009686:	d105      	bne.n	8009694 <f_write+0x114>
 8009688:	68fb      	ldr	r3, [r7, #12]
 800968a:	2202      	movs	r2, #2
 800968c:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 8009690:	2302      	movs	r3, #2
 8009692:	e11e      	b.n	80098d2 <f_write+0x352>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 8009694:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009696:	f1b3 3fff 	cmp.w	r3, #4294967295
 800969a:	d105      	bne.n	80096a8 <f_write+0x128>
 800969c:	68fb      	ldr	r3, [r7, #12]
 800969e:	2201      	movs	r2, #1
 80096a0:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 80096a4:	2301      	movs	r3, #1
 80096a6:	e114      	b.n	80098d2 <f_write+0x352>
				fp->clust = clst;			/* Update current cluster */
 80096a8:	68fb      	ldr	r3, [r7, #12]
 80096aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80096ac:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
				if (fp->sclust == 0) fp->sclust = clst;	/* Set start cluster if the first write */
 80096b0:	68fb      	ldr	r3, [r7, #12]
 80096b2:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 80096b6:	2b00      	cmp	r3, #0
 80096b8:	d103      	bne.n	80096c2 <f_write+0x142>
 80096ba:	68fb      	ldr	r3, [r7, #12]
 80096bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80096be:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
			}
#if _FS_TINY
			if (fp->fs->winsect == fp->dsect && sync_window(fp->fs))	/* Write-back sector cache */
				ABORT(fp->fs, FR_DISK_ERR);
#else
			if (fp->flag & FA__DIRTY) {		/* Write-back sector cache */
 80096c2:	68fb      	ldr	r3, [r7, #12]
 80096c4:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 80096c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80096cc:	2b00      	cmp	r3, #0
 80096ce:	d01d      	beq.n	800970c <f_write+0x18c>
				if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 80096d0:	68fb      	ldr	r3, [r7, #12]
 80096d2:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80096d6:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 80096da:	68f9      	ldr	r1, [r7, #12]
 80096dc:	68fb      	ldr	r3, [r7, #12]
 80096de:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 80096e2:	2301      	movs	r3, #1
 80096e4:	f7fd fcea 	bl	80070bc <disk_write>
 80096e8:	4603      	mov	r3, r0
 80096ea:	2b00      	cmp	r3, #0
 80096ec:	d005      	beq.n	80096fa <f_write+0x17a>
					ABORT(fp->fs, FR_DISK_ERR);
 80096ee:	68fb      	ldr	r3, [r7, #12]
 80096f0:	2201      	movs	r2, #1
 80096f2:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 80096f6:	2301      	movs	r3, #1
 80096f8:	e0eb      	b.n	80098d2 <f_write+0x352>
				fp->flag &= ~FA__DIRTY;
 80096fa:	68fb      	ldr	r3, [r7, #12]
 80096fc:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 8009700:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009704:	b2da      	uxtb	r2, r3
 8009706:	68fb      	ldr	r3, [r7, #12]
 8009708:	f883 2206 	strb.w	r2, [r3, #518]	; 0x206
			}
#endif
			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
 800970c:	68fb      	ldr	r3, [r7, #12]
 800970e:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8009712:	68fb      	ldr	r3, [r7, #12]
 8009714:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8009718:	4619      	mov	r1, r3
 800971a:	4610      	mov	r0, r2
 800971c:	f7fe f864 	bl	80077e8 <clust2sect>
 8009720:	6138      	str	r0, [r7, #16]
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
 8009722:	693b      	ldr	r3, [r7, #16]
 8009724:	2b00      	cmp	r3, #0
 8009726:	d105      	bne.n	8009734 <f_write+0x1b4>
 8009728:	68fb      	ldr	r3, [r7, #12]
 800972a:	2202      	movs	r2, #2
 800972c:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 8009730:	2302      	movs	r3, #2
 8009732:	e0ce      	b.n	80098d2 <f_write+0x352>
			sect += csect;
 8009734:	7dbb      	ldrb	r3, [r7, #22]
 8009736:	693a      	ldr	r2, [r7, #16]
 8009738:	4413      	add	r3, r2
 800973a:	613b      	str	r3, [r7, #16]
			cc = btw / SS(fp->fs);			/* When remaining bytes >= sector size, */
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	0a5b      	lsrs	r3, r3, #9
 8009740:	61fb      	str	r3, [r7, #28]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8009742:	69fb      	ldr	r3, [r7, #28]
 8009744:	2b00      	cmp	r3, #0
 8009746:	d048      	beq.n	80097da <f_write+0x25a>
				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
 8009748:	7dba      	ldrb	r2, [r7, #22]
 800974a:	69fb      	ldr	r3, [r7, #28]
 800974c:	4413      	add	r3, r2
 800974e:	68fa      	ldr	r2, [r7, #12]
 8009750:	f8d2 2200 	ldr.w	r2, [r2, #512]	; 0x200
 8009754:	f892 2202 	ldrb.w	r2, [r2, #514]	; 0x202
 8009758:	4293      	cmp	r3, r2
 800975a:	d908      	bls.n	800976e <f_write+0x1ee>
					cc = fp->fs->csize - csect;
 800975c:	68fb      	ldr	r3, [r7, #12]
 800975e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8009762:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 8009766:	461a      	mov	r2, r3
 8009768:	7dbb      	ldrb	r3, [r7, #22]
 800976a:	1ad3      	subs	r3, r2, r3
 800976c:	61fb      	str	r3, [r7, #28]
				if (disk_write(fp->fs->drv, wbuff, sect, cc) != RES_OK)
 800976e:	68fb      	ldr	r3, [r7, #12]
 8009770:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8009774:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 8009778:	69fb      	ldr	r3, [r7, #28]
 800977a:	693a      	ldr	r2, [r7, #16]
 800977c:	69b9      	ldr	r1, [r7, #24]
 800977e:	f7fd fc9d 	bl	80070bc <disk_write>
 8009782:	4603      	mov	r3, r0
 8009784:	2b00      	cmp	r3, #0
 8009786:	d005      	beq.n	8009794 <f_write+0x214>
					ABORT(fp->fs, FR_DISK_ERR);
 8009788:	68fb      	ldr	r3, [r7, #12]
 800978a:	2201      	movs	r2, #1
 800978c:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 8009790:	2301      	movs	r3, #1
 8009792:	e09e      	b.n	80098d2 <f_write+0x352>
				if (fp->fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fp->fs->win.d8, wbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), SS(fp->fs));
					fp->fs->wflag = 0;
				}
#else
				if (fp->dsect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8009794:	68fb      	ldr	r3, [r7, #12]
 8009796:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 800979a:	693b      	ldr	r3, [r7, #16]
 800979c:	1ad3      	subs	r3, r2, r3
 800979e:	69fa      	ldr	r2, [r7, #28]
 80097a0:	429a      	cmp	r2, r3
 80097a2:	d916      	bls.n	80097d2 <f_write+0x252>
					mem_cpy(fp->buf.d8, wbuff + ((fp->dsect - sect) * SS(fp->fs)), SS(fp->fs));
 80097a4:	68f8      	ldr	r0, [r7, #12]
 80097a6:	68fb      	ldr	r3, [r7, #12]
 80097a8:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 80097ac:	693b      	ldr	r3, [r7, #16]
 80097ae:	1ad3      	subs	r3, r2, r3
 80097b0:	025b      	lsls	r3, r3, #9
 80097b2:	69ba      	ldr	r2, [r7, #24]
 80097b4:	4413      	add	r3, r2
 80097b6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80097ba:	4619      	mov	r1, r3
 80097bc:	f7fd fcbc 	bl	8007138 <mem_cpy>
					fp->flag &= ~FA__DIRTY;
 80097c0:	68fb      	ldr	r3, [r7, #12]
 80097c2:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 80097c6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80097ca:	b2da      	uxtb	r2, r3
 80097cc:	68fb      	ldr	r3, [r7, #12]
 80097ce:	f883 2206 	strb.w	r2, [r3, #518]	; 0x206
				}
#endif
#endif
				wcnt = SS(fp->fs) * cc;		/* Number of bytes transferred */
 80097d2:	69fb      	ldr	r3, [r7, #28]
 80097d4:	025b      	lsls	r3, r3, #9
 80097d6:	623b      	str	r3, [r7, #32]
				continue;
 80097d8:	e047      	b.n	800986a <f_write+0x2ea>
			if (fp->fptr >= fp->fsize) {	/* Avoid silly cache filling at growing edge */
				if (sync_window(fp->fs)) ABORT(fp->fs, FR_DISK_ERR);
				fp->fs->winsect = sect;
			}
#else
			if (fp->dsect != sect) {		/* Fill sector cache with file data */
 80097da:	68fb      	ldr	r3, [r7, #12]
 80097dc:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 80097e0:	693a      	ldr	r2, [r7, #16]
 80097e2:	429a      	cmp	r2, r3
 80097e4:	d01a      	beq.n	800981c <f_write+0x29c>
				if (fp->fptr < fp->fsize &&
 80097e6:	68fb      	ldr	r3, [r7, #12]
 80097e8:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 80097ec:	68fb      	ldr	r3, [r7, #12]
 80097ee:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 80097f2:	429a      	cmp	r2, r3
 80097f4:	d212      	bcs.n	800981c <f_write+0x29c>
					disk_read(fp->fs->drv, fp->buf.d8, sect, 1) != RES_OK)
 80097f6:	68fb      	ldr	r3, [r7, #12]
 80097f8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80097fc:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 8009800:	68f9      	ldr	r1, [r7, #12]
 8009802:	2301      	movs	r3, #1
 8009804:	693a      	ldr	r2, [r7, #16]
 8009806:	f7fd fc39 	bl	800707c <disk_read>
 800980a:	4603      	mov	r3, r0
				if (fp->fptr < fp->fsize &&
 800980c:	2b00      	cmp	r3, #0
 800980e:	d005      	beq.n	800981c <f_write+0x29c>
						ABORT(fp->fs, FR_DISK_ERR);
 8009810:	68fb      	ldr	r3, [r7, #12]
 8009812:	2201      	movs	r2, #1
 8009814:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 8009818:	2301      	movs	r3, #1
 800981a:	e05a      	b.n	80098d2 <f_write+0x352>
			}
#endif
			fp->dsect = sect;
 800981c:	68fb      	ldr	r3, [r7, #12]
 800981e:	693a      	ldr	r2, [r7, #16]
 8009820:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
		}
		wcnt = SS(fp->fs) - ((UINT)fp->fptr % SS(fp->fs));/* Put partial sector into file I/O buffer */
 8009824:	68fb      	ldr	r3, [r7, #12]
 8009826:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 800982a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800982e:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8009832:	623b      	str	r3, [r7, #32]
		if (wcnt > btw) wcnt = btw;
 8009834:	6a3a      	ldr	r2, [r7, #32]
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	429a      	cmp	r2, r3
 800983a:	d901      	bls.n	8009840 <f_write+0x2c0>
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	623b      	str	r3, [r7, #32]
		if (move_window(fp->fs, fp->dsect) != FR_OK)	/* Move sector window */
			ABORT(fp->fs, FR_DISK_ERR);
		mem_cpy(&fp->fs->win.d8[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
		fp->fs->wflag = 1;
#else
		mem_cpy(&fp->buf.d8[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
 8009840:	68fb      	ldr	r3, [r7, #12]
 8009842:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 8009846:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800984a:	68fa      	ldr	r2, [r7, #12]
 800984c:	4413      	add	r3, r2
 800984e:	6a3a      	ldr	r2, [r7, #32]
 8009850:	69b9      	ldr	r1, [r7, #24]
 8009852:	4618      	mov	r0, r3
 8009854:	f7fd fc70 	bl	8007138 <mem_cpy>
		fp->flag |= FA__DIRTY;
 8009858:	68fb      	ldr	r3, [r7, #12]
 800985a:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 800985e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009862:	b2da      	uxtb	r2, r3
 8009864:	68fb      	ldr	r3, [r7, #12]
 8009866:	f883 2206 	strb.w	r2, [r3, #518]	; 0x206
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
 800986a:	69ba      	ldr	r2, [r7, #24]
 800986c:	6a3b      	ldr	r3, [r7, #32]
 800986e:	4413      	add	r3, r2
 8009870:	61bb      	str	r3, [r7, #24]
 8009872:	68fb      	ldr	r3, [r7, #12]
 8009874:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8009878:	6a3b      	ldr	r3, [r7, #32]
 800987a:	441a      	add	r2, r3
 800987c:	68fb      	ldr	r3, [r7, #12]
 800987e:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
 8009882:	683b      	ldr	r3, [r7, #0]
 8009884:	681a      	ldr	r2, [r3, #0]
 8009886:	6a3b      	ldr	r3, [r7, #32]
 8009888:	441a      	add	r2, r3
 800988a:	683b      	ldr	r3, [r7, #0]
 800988c:	601a      	str	r2, [r3, #0]
 800988e:	687a      	ldr	r2, [r7, #4]
 8009890:	6a3b      	ldr	r3, [r7, #32]
 8009892:	1ad3      	subs	r3, r2, r3
 8009894:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8009896:	687b      	ldr	r3, [r7, #4]
 8009898:	2b00      	cmp	r3, #0
 800989a:	f47f aea7 	bne.w	80095ec <f_write+0x6c>
 800989e:	e000      	b.n	80098a2 <f_write+0x322>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 80098a0:	bf00      	nop
#endif
	}

	if (fp->fptr > fp->fsize) fp->fsize = fp->fptr;	/* Update file size if needed */
 80098a2:	68fb      	ldr	r3, [r7, #12]
 80098a4:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 80098a8:	68fb      	ldr	r3, [r7, #12]
 80098aa:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 80098ae:	429a      	cmp	r2, r3
 80098b0:	d905      	bls.n	80098be <f_write+0x33e>
 80098b2:	68fb      	ldr	r3, [r7, #12]
 80098b4:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 80098b8:	68fb      	ldr	r3, [r7, #12]
 80098ba:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
	fp->flag |= FA__WRITTEN;						/* Set file change flag */
 80098be:	68fb      	ldr	r3, [r7, #12]
 80098c0:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 80098c4:	f043 0320 	orr.w	r3, r3, #32
 80098c8:	b2da      	uxtb	r2, r3
 80098ca:	68fb      	ldr	r3, [r7, #12]
 80098cc:	f883 2206 	strb.w	r2, [r3, #518]	; 0x206

	LEAVE_FF(fp->fs, FR_OK);
 80098d0:	2300      	movs	r3, #0
}
 80098d2:	4618      	mov	r0, r3
 80098d4:	3728      	adds	r7, #40	; 0x28
 80098d6:	46bd      	mov	sp, r7
 80098d8:	bd80      	pop	{r7, pc}

080098da <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 80098da:	b580      	push	{r7, lr}
 80098dc:	b086      	sub	sp, #24
 80098de:	af00      	add	r7, sp, #0
 80098e0:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DWORD tm;
	BYTE *dir;


	res = validate(fp);					/* Check validity of the object */
 80098e2:	6878      	ldr	r0, [r7, #4]
 80098e4:	f7ff f9ec 	bl	8008cc0 <validate>
 80098e8:	4603      	mov	r3, r0
 80098ea:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 80098ec:	7dfb      	ldrb	r3, [r7, #23]
 80098ee:	2b00      	cmp	r3, #0
 80098f0:	f040 80a8 	bne.w	8009a44 <f_sync+0x16a>
		if (fp->flag & FA__WRITTEN) {	/* Has the file been written? */
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 80098fa:	f003 0320 	and.w	r3, r3, #32
 80098fe:	2b00      	cmp	r3, #0
 8009900:	f000 80a0 	beq.w	8009a44 <f_sync+0x16a>
			/* Write-back dirty buffer */
#if !_FS_TINY
			if (fp->flag & FA__DIRTY) {
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 800990a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800990e:	2b00      	cmp	r3, #0
 8009910:	d019      	beq.n	8009946 <f_sync+0x6c>
				if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8009918:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 800991c:	6879      	ldr	r1, [r7, #4]
 800991e:	687b      	ldr	r3, [r7, #4]
 8009920:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 8009924:	2301      	movs	r3, #1
 8009926:	f7fd fbc9 	bl	80070bc <disk_write>
 800992a:	4603      	mov	r3, r0
 800992c:	2b00      	cmp	r3, #0
 800992e:	d001      	beq.n	8009934 <f_sync+0x5a>
					LEAVE_FF(fp->fs, FR_DISK_ERR);
 8009930:	2301      	movs	r3, #1
 8009932:	e088      	b.n	8009a46 <f_sync+0x16c>
				fp->flag &= ~FA__DIRTY;
 8009934:	687b      	ldr	r3, [r7, #4]
 8009936:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 800993a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800993e:	b2da      	uxtb	r2, r3
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	f883 2206 	strb.w	r2, [r3, #518]	; 0x206
			}
#endif
			/* Update the directory entry */
			res = move_window(fp->fs, fp->dir_sect);
 8009946:	687b      	ldr	r3, [r7, #4]
 8009948:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 800994c:	687b      	ldr	r3, [r7, #4]
 800994e:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 8009952:	4619      	mov	r1, r3
 8009954:	4610      	mov	r0, r2
 8009956:	f7fd fe6c 	bl	8007632 <move_window>
 800995a:	4603      	mov	r3, r0
 800995c:	75fb      	strb	r3, [r7, #23]
			if (res == FR_OK) {
 800995e:	7dfb      	ldrb	r3, [r7, #23]
 8009960:	2b00      	cmp	r3, #0
 8009962:	d16f      	bne.n	8009a44 <f_sync+0x16a>
				dir = fp->dir_ptr;
 8009964:	687b      	ldr	r3, [r7, #4]
 8009966:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 800996a:	613b      	str	r3, [r7, #16]
				dir[DIR_Attr] |= AM_ARC;					/* Set archive bit */
 800996c:	693b      	ldr	r3, [r7, #16]
 800996e:	330b      	adds	r3, #11
 8009970:	781a      	ldrb	r2, [r3, #0]
 8009972:	693b      	ldr	r3, [r7, #16]
 8009974:	330b      	adds	r3, #11
 8009976:	f042 0220 	orr.w	r2, r2, #32
 800997a:	b2d2      	uxtb	r2, r2
 800997c:	701a      	strb	r2, [r3, #0]
				ST_DWORD(dir + DIR_FileSize, fp->fsize);	/* Update file size */
 800997e:	687b      	ldr	r3, [r7, #4]
 8009980:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8009984:	693b      	ldr	r3, [r7, #16]
 8009986:	331c      	adds	r3, #28
 8009988:	b2d2      	uxtb	r2, r2
 800998a:	701a      	strb	r2, [r3, #0]
 800998c:	687b      	ldr	r3, [r7, #4]
 800998e:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8009992:	b29b      	uxth	r3, r3
 8009994:	0a1b      	lsrs	r3, r3, #8
 8009996:	b29a      	uxth	r2, r3
 8009998:	693b      	ldr	r3, [r7, #16]
 800999a:	331d      	adds	r3, #29
 800999c:	b2d2      	uxtb	r2, r2
 800999e:	701a      	strb	r2, [r3, #0]
 80099a0:	687b      	ldr	r3, [r7, #4]
 80099a2:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 80099a6:	0c1a      	lsrs	r2, r3, #16
 80099a8:	693b      	ldr	r3, [r7, #16]
 80099aa:	331e      	adds	r3, #30
 80099ac:	b2d2      	uxtb	r2, r2
 80099ae:	701a      	strb	r2, [r3, #0]
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 80099b6:	0e1a      	lsrs	r2, r3, #24
 80099b8:	693b      	ldr	r3, [r7, #16]
 80099ba:	331f      	adds	r3, #31
 80099bc:	b2d2      	uxtb	r2, r2
 80099be:	701a      	strb	r2, [r3, #0]
				st_clust(dir, fp->sclust);					/* Update start cluster */
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 80099c6:	4619      	mov	r1, r3
 80099c8:	6938      	ldr	r0, [r7, #16]
 80099ca:	f7fe fc26 	bl	800821a <st_clust>
				tm = GET_FATTIME();							/* Update updated time */
 80099ce:	f7fc fddd 	bl	800658c <get_fattime>
 80099d2:	60f8      	str	r0, [r7, #12]
				ST_DWORD(dir + DIR_WrtTime, tm);
 80099d4:	693b      	ldr	r3, [r7, #16]
 80099d6:	3316      	adds	r3, #22
 80099d8:	68fa      	ldr	r2, [r7, #12]
 80099da:	b2d2      	uxtb	r2, r2
 80099dc:	701a      	strb	r2, [r3, #0]
 80099de:	68fb      	ldr	r3, [r7, #12]
 80099e0:	b29b      	uxth	r3, r3
 80099e2:	0a1b      	lsrs	r3, r3, #8
 80099e4:	b29a      	uxth	r2, r3
 80099e6:	693b      	ldr	r3, [r7, #16]
 80099e8:	3317      	adds	r3, #23
 80099ea:	b2d2      	uxtb	r2, r2
 80099ec:	701a      	strb	r2, [r3, #0]
 80099ee:	68fb      	ldr	r3, [r7, #12]
 80099f0:	0c1a      	lsrs	r2, r3, #16
 80099f2:	693b      	ldr	r3, [r7, #16]
 80099f4:	3318      	adds	r3, #24
 80099f6:	b2d2      	uxtb	r2, r2
 80099f8:	701a      	strb	r2, [r3, #0]
 80099fa:	68fb      	ldr	r3, [r7, #12]
 80099fc:	0e1a      	lsrs	r2, r3, #24
 80099fe:	693b      	ldr	r3, [r7, #16]
 8009a00:	3319      	adds	r3, #25
 8009a02:	b2d2      	uxtb	r2, r2
 8009a04:	701a      	strb	r2, [r3, #0]
				ST_WORD(dir + DIR_LstAccDate, 0);
 8009a06:	693b      	ldr	r3, [r7, #16]
 8009a08:	3312      	adds	r3, #18
 8009a0a:	2200      	movs	r2, #0
 8009a0c:	701a      	strb	r2, [r3, #0]
 8009a0e:	693b      	ldr	r3, [r7, #16]
 8009a10:	3313      	adds	r3, #19
 8009a12:	2200      	movs	r2, #0
 8009a14:	701a      	strb	r2, [r3, #0]
				fp->flag &= ~FA__WRITTEN;
 8009a16:	687b      	ldr	r3, [r7, #4]
 8009a18:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 8009a1c:	f023 0320 	bic.w	r3, r3, #32
 8009a20:	b2da      	uxtb	r2, r3
 8009a22:	687b      	ldr	r3, [r7, #4]
 8009a24:	f883 2206 	strb.w	r2, [r3, #518]	; 0x206
				fp->fs->wflag = 1;
 8009a28:	687b      	ldr	r3, [r7, #4]
 8009a2a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8009a2e:	2201      	movs	r2, #1
 8009a30:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
				res = sync_fs(fp->fs);
 8009a34:	687b      	ldr	r3, [r7, #4]
 8009a36:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8009a3a:	4618      	mov	r0, r3
 8009a3c:	f7fd fe27 	bl	800768e <sync_fs>
 8009a40:	4603      	mov	r3, r0
 8009a42:	75fb      	strb	r3, [r7, #23]
			}
		}
	}

	LEAVE_FF(fp->fs, res);
 8009a44:	7dfb      	ldrb	r3, [r7, #23]
}
 8009a46:	4618      	mov	r0, r3
 8009a48:	3718      	adds	r7, #24
 8009a4a:	46bd      	mov	sp, r7
 8009a4c:	bd80      	pop	{r7, pc}

08009a4e <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL *fp		/* Pointer to the file object to be closed */
)
{
 8009a4e:	b580      	push	{r7, lr}
 8009a50:	b084      	sub	sp, #16
 8009a52:	af00      	add	r7, sp, #0
 8009a54:	6078      	str	r0, [r7, #4]
	FRESULT res;


#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8009a56:	6878      	ldr	r0, [r7, #4]
 8009a58:	f7ff ff3f 	bl	80098da <f_sync>
 8009a5c:	4603      	mov	r3, r0
 8009a5e:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8009a60:	7bfb      	ldrb	r3, [r7, #15]
 8009a62:	2b00      	cmp	r3, #0
 8009a64:	d116      	bne.n	8009a94 <f_close+0x46>
#endif
	{
		res = validate(fp);				/* Lock volume */
 8009a66:	6878      	ldr	r0, [r7, #4]
 8009a68:	f7ff f92a 	bl	8008cc0 <validate>
 8009a6c:	4603      	mov	r3, r0
 8009a6e:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8009a70:	7bfb      	ldrb	r3, [r7, #15]
 8009a72:	2b00      	cmp	r3, #0
 8009a74:	d10e      	bne.n	8009a94 <f_close+0x46>
#if _FS_REENTRANT
			FATFS *fs = fp->fs;
#endif
#if _FS_LOCK
			res = dec_lock(fp->lockid);	/* Decrement file open counter */
 8009a76:	687b      	ldr	r3, [r7, #4]
 8009a78:	f8d3 3228 	ldr.w	r3, [r3, #552]	; 0x228
 8009a7c:	4618      	mov	r0, r3
 8009a7e:	f7fd fd21 	bl	80074c4 <dec_lock>
 8009a82:	4603      	mov	r3, r0
 8009a84:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8009a86:	7bfb      	ldrb	r3, [r7, #15]
 8009a88:	2b00      	cmp	r3, #0
 8009a8a:	d103      	bne.n	8009a94 <f_close+0x46>
#endif
				fp->fs = 0;				/* Invalidate file object */
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	2200      	movs	r2, #0
 8009a90:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8009a94:	7bfb      	ldrb	r3, [r7, #15]
}
 8009a96:	4618      	mov	r0, r3
 8009a98:	3710      	adds	r7, #16
 8009a9a:	46bd      	mov	sp, r7
 8009a9c:	bd80      	pop	{r7, pc}

08009a9e <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	DWORD ofs		/* File pointer from top of file */
)
{
 8009a9e:	b580      	push	{r7, lr}
 8009aa0:	b090      	sub	sp, #64	; 0x40
 8009aa2:	af00      	add	r7, sp, #0
 8009aa4:	6078      	str	r0, [r7, #4]
 8009aa6:	6039      	str	r1, [r7, #0]
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif


	res = validate(fp);					/* Check validity of the object */
 8009aa8:	6878      	ldr	r0, [r7, #4]
 8009aaa:	f7ff f909 	bl	8008cc0 <validate>
 8009aae:	4603      	mov	r3, r0
 8009ab0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
 8009ab4:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8009ab8:	2b00      	cmp	r3, #0
 8009aba:	d002      	beq.n	8009ac2 <f_lseek+0x24>
 8009abc:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8009ac0:	e247      	b.n	8009f52 <f_lseek+0x4b4>
	if (fp->err)						/* Check error */
 8009ac2:	687b      	ldr	r3, [r7, #4]
 8009ac4:	f893 3207 	ldrb.w	r3, [r3, #519]	; 0x207
 8009ac8:	2b00      	cmp	r3, #0
 8009aca:	d003      	beq.n	8009ad4 <f_lseek+0x36>
		LEAVE_FF(fp->fs, (FRESULT)fp->err);
 8009acc:	687b      	ldr	r3, [r7, #4]
 8009ace:	f893 3207 	ldrb.w	r3, [r3, #519]	; 0x207
 8009ad2:	e23e      	b.n	8009f52 <f_lseek+0x4b4>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	f8d3 3224 	ldr.w	r3, [r3, #548]	; 0x224
 8009ada:	2b00      	cmp	r3, #0
 8009adc:	f000 80f2 	beq.w	8009cc4 <f_lseek+0x226>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 8009ae0:	683b      	ldr	r3, [r7, #0]
 8009ae2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009ae6:	d164      	bne.n	8009bb2 <f_lseek+0x114>
			tbl = fp->cltbl;
 8009ae8:	687b      	ldr	r3, [r7, #4]
 8009aea:	f8d3 3224 	ldr.w	r3, [r3, #548]	; 0x224
 8009aee:	627b      	str	r3, [r7, #36]	; 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 8009af0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009af2:	1d1a      	adds	r2, r3, #4
 8009af4:	627a      	str	r2, [r7, #36]	; 0x24
 8009af6:	681b      	ldr	r3, [r3, #0]
 8009af8:	617b      	str	r3, [r7, #20]
 8009afa:	2302      	movs	r3, #2
 8009afc:	62bb      	str	r3, [r7, #40]	; 0x28
			cl = fp->sclust;			/* Top of the chain */
 8009afe:	687b      	ldr	r3, [r7, #4]
 8009b00:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8009b04:	633b      	str	r3, [r7, #48]	; 0x30
			if (cl) {
 8009b06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b08:	2b00      	cmp	r3, #0
 8009b0a:	d041      	beq.n	8009b90 <f_lseek+0xf2>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 8009b0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b0e:	613b      	str	r3, [r7, #16]
 8009b10:	2300      	movs	r3, #0
 8009b12:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009b14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b16:	3302      	adds	r3, #2
 8009b18:	62bb      	str	r3, [r7, #40]	; 0x28
					do {
						pcl = cl; ncl++;
 8009b1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b1c:	60fb      	str	r3, [r7, #12]
 8009b1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009b20:	3301      	adds	r3, #1
 8009b22:	62fb      	str	r3, [r7, #44]	; 0x2c
						cl = get_fat(fp->fs, cl);
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8009b2a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8009b2c:	4618      	mov	r0, r3
 8009b2e:	f7fd fe7d 	bl	800782c <get_fat>
 8009b32:	6338      	str	r0, [r7, #48]	; 0x30
						if (cl <= 1) ABORT(fp->fs, FR_INT_ERR);
 8009b34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b36:	2b01      	cmp	r3, #1
 8009b38:	d805      	bhi.n	8009b46 <f_lseek+0xa8>
 8009b3a:	687b      	ldr	r3, [r7, #4]
 8009b3c:	2202      	movs	r2, #2
 8009b3e:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 8009b42:	2302      	movs	r3, #2
 8009b44:	e205      	b.n	8009f52 <f_lseek+0x4b4>
						if (cl == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 8009b46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009b4c:	d105      	bne.n	8009b5a <f_lseek+0xbc>
 8009b4e:	687b      	ldr	r3, [r7, #4]
 8009b50:	2201      	movs	r2, #1
 8009b52:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 8009b56:	2301      	movs	r3, #1
 8009b58:	e1fb      	b.n	8009f52 <f_lseek+0x4b4>
					} while (cl == pcl + 1);
 8009b5a:	68fb      	ldr	r3, [r7, #12]
 8009b5c:	3301      	adds	r3, #1
 8009b5e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009b60:	429a      	cmp	r2, r3
 8009b62:	d0da      	beq.n	8009b1a <f_lseek+0x7c>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 8009b64:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009b66:	697b      	ldr	r3, [r7, #20]
 8009b68:	429a      	cmp	r2, r3
 8009b6a:	d809      	bhi.n	8009b80 <f_lseek+0xe2>
						*tbl++ = ncl; *tbl++ = tcl;
 8009b6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b6e:	1d1a      	adds	r2, r3, #4
 8009b70:	627a      	str	r2, [r7, #36]	; 0x24
 8009b72:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009b74:	601a      	str	r2, [r3, #0]
 8009b76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b78:	1d1a      	adds	r2, r3, #4
 8009b7a:	627a      	str	r2, [r7, #36]	; 0x24
 8009b7c:	693a      	ldr	r2, [r7, #16]
 8009b7e:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fp->fs->n_fatent);	/* Repeat until end of chain */
 8009b80:	687b      	ldr	r3, [r7, #4]
 8009b82:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8009b86:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8009b8a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009b8c:	429a      	cmp	r2, r3
 8009b8e:	d3bd      	bcc.n	8009b0c <f_lseek+0x6e>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	f8d3 3224 	ldr.w	r3, [r3, #548]	; 0x224
 8009b96:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009b98:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen)
 8009b9a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009b9c:	697b      	ldr	r3, [r7, #20]
 8009b9e:	429a      	cmp	r2, r3
 8009ba0:	d803      	bhi.n	8009baa <f_lseek+0x10c>
				*tbl = 0;		/* Terminate table */
 8009ba2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ba4:	2200      	movs	r2, #0
 8009ba6:	601a      	str	r2, [r3, #0]
 8009ba8:	e1d1      	b.n	8009f4e <f_lseek+0x4b0>
			else
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 8009baa:	2311      	movs	r3, #17
 8009bac:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8009bb0:	e1cd      	b.n	8009f4e <f_lseek+0x4b0>

		} else {						/* Fast seek */
			if (ofs > fp->fsize)		/* Clip offset at the file size */
 8009bb2:	687b      	ldr	r3, [r7, #4]
 8009bb4:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8009bb8:	683a      	ldr	r2, [r7, #0]
 8009bba:	429a      	cmp	r2, r3
 8009bbc:	d903      	bls.n	8009bc6 <f_lseek+0x128>
				ofs = fp->fsize;
 8009bbe:	687b      	ldr	r3, [r7, #4]
 8009bc0:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8009bc4:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 8009bc6:	687b      	ldr	r3, [r7, #4]
 8009bc8:	683a      	ldr	r2, [r7, #0]
 8009bca:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
			if (ofs) {
 8009bce:	683b      	ldr	r3, [r7, #0]
 8009bd0:	2b00      	cmp	r3, #0
 8009bd2:	f000 81bc 	beq.w	8009f4e <f_lseek+0x4b0>
				fp->clust = clmt_clust(fp, ofs - 1);
 8009bd6:	683b      	ldr	r3, [r7, #0]
 8009bd8:	3b01      	subs	r3, #1
 8009bda:	4619      	mov	r1, r3
 8009bdc:	6878      	ldr	r0, [r7, #4]
 8009bde:	f7fe f8e4 	bl	8007daa <clmt_clust>
 8009be2:	4602      	mov	r2, r0
 8009be4:	687b      	ldr	r3, [r7, #4]
 8009be6:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
				dsc = clust2sect(fp->fs, fp->clust);
 8009bea:	687b      	ldr	r3, [r7, #4]
 8009bec:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8009bf0:	687b      	ldr	r3, [r7, #4]
 8009bf2:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8009bf6:	4619      	mov	r1, r3
 8009bf8:	4610      	mov	r0, r2
 8009bfa:	f7fd fdf5 	bl	80077e8 <clust2sect>
 8009bfe:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fp->fs, FR_INT_ERR);
 8009c00:	69bb      	ldr	r3, [r7, #24]
 8009c02:	2b00      	cmp	r3, #0
 8009c04:	d105      	bne.n	8009c12 <f_lseek+0x174>
 8009c06:	687b      	ldr	r3, [r7, #4]
 8009c08:	2202      	movs	r2, #2
 8009c0a:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 8009c0e:	2302      	movs	r3, #2
 8009c10:	e19f      	b.n	8009f52 <f_lseek+0x4b4>
				dsc += (ofs - 1) / SS(fp->fs) & (fp->fs->csize - 1);
 8009c12:	683b      	ldr	r3, [r7, #0]
 8009c14:	3b01      	subs	r3, #1
 8009c16:	0a5b      	lsrs	r3, r3, #9
 8009c18:	687a      	ldr	r2, [r7, #4]
 8009c1a:	f8d2 2200 	ldr.w	r2, [r2, #512]	; 0x200
 8009c1e:	f892 2202 	ldrb.w	r2, [r2, #514]	; 0x202
 8009c22:	3a01      	subs	r2, #1
 8009c24:	4013      	ands	r3, r2
 8009c26:	69ba      	ldr	r2, [r7, #24]
 8009c28:	4413      	add	r3, r2
 8009c2a:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fp->fs) && dsc != fp->dsect) {	/* Refill sector cache if needed */
 8009c2c:	687b      	ldr	r3, [r7, #4]
 8009c2e:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 8009c32:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009c36:	2b00      	cmp	r3, #0
 8009c38:	f000 8189 	beq.w	8009f4e <f_lseek+0x4b0>
 8009c3c:	687b      	ldr	r3, [r7, #4]
 8009c3e:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8009c42:	69ba      	ldr	r2, [r7, #24]
 8009c44:	429a      	cmp	r2, r3
 8009c46:	f000 8182 	beq.w	8009f4e <f_lseek+0x4b0>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA__DIRTY) {		/* Write-back dirty sector cache */
 8009c4a:	687b      	ldr	r3, [r7, #4]
 8009c4c:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 8009c50:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009c54:	2b00      	cmp	r3, #0
 8009c56:	d01d      	beq.n	8009c94 <f_lseek+0x1f6>
						if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8009c5e:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 8009c62:	6879      	ldr	r1, [r7, #4]
 8009c64:	687b      	ldr	r3, [r7, #4]
 8009c66:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 8009c6a:	2301      	movs	r3, #1
 8009c6c:	f7fd fa26 	bl	80070bc <disk_write>
 8009c70:	4603      	mov	r3, r0
 8009c72:	2b00      	cmp	r3, #0
 8009c74:	d005      	beq.n	8009c82 <f_lseek+0x1e4>
							ABORT(fp->fs, FR_DISK_ERR);
 8009c76:	687b      	ldr	r3, [r7, #4]
 8009c78:	2201      	movs	r2, #1
 8009c7a:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 8009c7e:	2301      	movs	r3, #1
 8009c80:	e167      	b.n	8009f52 <f_lseek+0x4b4>
						fp->flag &= ~FA__DIRTY;
 8009c82:	687b      	ldr	r3, [r7, #4]
 8009c84:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 8009c88:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009c8c:	b2da      	uxtb	r2, r3
 8009c8e:	687b      	ldr	r3, [r7, #4]
 8009c90:	f883 2206 	strb.w	r2, [r3, #518]	; 0x206
					}
#endif
					if (disk_read(fp->fs->drv, fp->buf.d8, dsc, 1) != RES_OK)	/* Load current sector */
 8009c94:	687b      	ldr	r3, [r7, #4]
 8009c96:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8009c9a:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 8009c9e:	6879      	ldr	r1, [r7, #4]
 8009ca0:	2301      	movs	r3, #1
 8009ca2:	69ba      	ldr	r2, [r7, #24]
 8009ca4:	f7fd f9ea 	bl	800707c <disk_read>
 8009ca8:	4603      	mov	r3, r0
 8009caa:	2b00      	cmp	r3, #0
 8009cac:	d005      	beq.n	8009cba <f_lseek+0x21c>
						ABORT(fp->fs, FR_DISK_ERR);
 8009cae:	687b      	ldr	r3, [r7, #4]
 8009cb0:	2201      	movs	r2, #1
 8009cb2:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 8009cb6:	2301      	movs	r3, #1
 8009cb8:	e14b      	b.n	8009f52 <f_lseek+0x4b4>
#endif
					fp->dsect = dsc;
 8009cba:	687b      	ldr	r3, [r7, #4]
 8009cbc:	69ba      	ldr	r2, [r7, #24]
 8009cbe:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
 8009cc2:	e144      	b.n	8009f4e <f_lseek+0x4b0>
	} else
#endif

	/* Normal Seek */
	{
		if (ofs > fp->fsize					/* In read-only mode, clip offset with the file size */
 8009cc4:	687b      	ldr	r3, [r7, #4]
 8009cc6:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8009cca:	683a      	ldr	r2, [r7, #0]
 8009ccc:	429a      	cmp	r2, r3
 8009cce:	d90a      	bls.n	8009ce6 <f_lseek+0x248>
#if !_FS_READONLY
			 && !(fp->flag & FA_WRITE)
 8009cd0:	687b      	ldr	r3, [r7, #4]
 8009cd2:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 8009cd6:	f003 0302 	and.w	r3, r3, #2
 8009cda:	2b00      	cmp	r3, #0
 8009cdc:	d103      	bne.n	8009ce6 <f_lseek+0x248>
#endif
			) ofs = fp->fsize;
 8009cde:	687b      	ldr	r3, [r7, #4]
 8009ce0:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8009ce4:	603b      	str	r3, [r7, #0]

		ifptr = fp->fptr;
 8009ce6:	687b      	ldr	r3, [r7, #4]
 8009ce8:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 8009cec:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 8009cee:	2300      	movs	r3, #0
 8009cf0:	637b      	str	r3, [r7, #52]	; 0x34
 8009cf2:	687b      	ldr	r3, [r7, #4]
 8009cf4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009cf6:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
		if (ofs) {
 8009cfa:	683b      	ldr	r3, [r7, #0]
 8009cfc:	2b00      	cmp	r3, #0
 8009cfe:	f000 80c6 	beq.w	8009e8e <f_lseek+0x3f0>
			bcs = (DWORD)fp->fs->csize * SS(fp->fs);	/* Cluster size (byte) */
 8009d02:	687b      	ldr	r3, [r7, #4]
 8009d04:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8009d08:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 8009d0c:	025b      	lsls	r3, r3, #9
 8009d0e:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 8009d10:	6a3b      	ldr	r3, [r7, #32]
 8009d12:	2b00      	cmp	r3, #0
 8009d14:	d01e      	beq.n	8009d54 <f_lseek+0x2b6>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 8009d16:	683b      	ldr	r3, [r7, #0]
 8009d18:	1e5a      	subs	r2, r3, #1
 8009d1a:	69fb      	ldr	r3, [r7, #28]
 8009d1c:	fbb2 f2f3 	udiv	r2, r2, r3
 8009d20:	6a3b      	ldr	r3, [r7, #32]
 8009d22:	1e59      	subs	r1, r3, #1
 8009d24:	69fb      	ldr	r3, [r7, #28]
 8009d26:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 8009d2a:	429a      	cmp	r2, r3
 8009d2c:	d312      	bcc.n	8009d54 <f_lseek+0x2b6>
				fp->fptr = (ifptr - 1) & ~(bcs - 1);	/* start from the current cluster */
 8009d2e:	6a3b      	ldr	r3, [r7, #32]
 8009d30:	1e5a      	subs	r2, r3, #1
 8009d32:	69fb      	ldr	r3, [r7, #28]
 8009d34:	425b      	negs	r3, r3
 8009d36:	401a      	ands	r2, r3
 8009d38:	687b      	ldr	r3, [r7, #4]
 8009d3a:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
				ofs -= fp->fptr;
 8009d3e:	687b      	ldr	r3, [r7, #4]
 8009d40:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 8009d44:	683a      	ldr	r2, [r7, #0]
 8009d46:	1ad3      	subs	r3, r2, r3
 8009d48:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8009d50:	63bb      	str	r3, [r7, #56]	; 0x38
 8009d52:	e029      	b.n	8009da8 <f_lseek+0x30a>
			} else {									/* When seek to back cluster, */
				clst = fp->sclust;						/* start from the first cluster */
 8009d54:	687b      	ldr	r3, [r7, #4]
 8009d56:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8009d5a:	63bb      	str	r3, [r7, #56]	; 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 8009d5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009d5e:	2b00      	cmp	r3, #0
 8009d60:	d11e      	bne.n	8009da0 <f_lseek+0x302>
					clst = create_chain(fp->fs, 0);
 8009d62:	687b      	ldr	r3, [r7, #4]
 8009d64:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8009d68:	2100      	movs	r1, #0
 8009d6a:	4618      	mov	r0, r3
 8009d6c:	f7fd ff80 	bl	8007c70 <create_chain>
 8009d70:	63b8      	str	r0, [r7, #56]	; 0x38
					if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
 8009d72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009d74:	2b01      	cmp	r3, #1
 8009d76:	d105      	bne.n	8009d84 <f_lseek+0x2e6>
 8009d78:	687b      	ldr	r3, [r7, #4]
 8009d7a:	2202      	movs	r2, #2
 8009d7c:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 8009d80:	2302      	movs	r3, #2
 8009d82:	e0e6      	b.n	8009f52 <f_lseek+0x4b4>
					if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 8009d84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009d86:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009d8a:	d105      	bne.n	8009d98 <f_lseek+0x2fa>
 8009d8c:	687b      	ldr	r3, [r7, #4]
 8009d8e:	2201      	movs	r2, #1
 8009d90:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 8009d94:	2301      	movs	r3, #1
 8009d96:	e0dc      	b.n	8009f52 <f_lseek+0x4b4>
					fp->sclust = clst;
 8009d98:	687b      	ldr	r3, [r7, #4]
 8009d9a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009d9c:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
				}
#endif
				fp->clust = clst;
 8009da0:	687b      	ldr	r3, [r7, #4]
 8009da2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009da4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
			}
			if (clst != 0) {
 8009da8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009daa:	2b00      	cmp	r3, #0
 8009dac:	d06f      	beq.n	8009e8e <f_lseek+0x3f0>
				while (ofs > bcs) {						/* Cluster following loop */
 8009dae:	e047      	b.n	8009e40 <f_lseek+0x3a2>
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 8009db6:	f003 0302 	and.w	r3, r3, #2
 8009dba:	2b00      	cmp	r3, #0
 8009dbc:	d00d      	beq.n	8009dda <f_lseek+0x33c>
						clst = create_chain(fp->fs, clst);	/* Force stretch if in write mode */
 8009dbe:	687b      	ldr	r3, [r7, #4]
 8009dc0:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8009dc4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8009dc6:	4618      	mov	r0, r3
 8009dc8:	f7fd ff52 	bl	8007c70 <create_chain>
 8009dcc:	63b8      	str	r0, [r7, #56]	; 0x38
						if (clst == 0) {				/* When disk gets full, clip file size */
 8009dce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009dd0:	2b00      	cmp	r3, #0
 8009dd2:	d10a      	bne.n	8009dea <f_lseek+0x34c>
							ofs = bcs; break;
 8009dd4:	69fb      	ldr	r3, [r7, #28]
 8009dd6:	603b      	str	r3, [r7, #0]
 8009dd8:	e036      	b.n	8009e48 <f_lseek+0x3aa>
						}
					} else
#endif
						clst = get_fat(fp->fs, clst);	/* Follow cluster chain if not in write mode */
 8009dda:	687b      	ldr	r3, [r7, #4]
 8009ddc:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8009de0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8009de2:	4618      	mov	r0, r3
 8009de4:	f7fd fd22 	bl	800782c <get_fat>
 8009de8:	63b8      	str	r0, [r7, #56]	; 0x38
					if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 8009dea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009dec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009df0:	d105      	bne.n	8009dfe <f_lseek+0x360>
 8009df2:	687b      	ldr	r3, [r7, #4]
 8009df4:	2201      	movs	r2, #1
 8009df6:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 8009dfa:	2301      	movs	r3, #1
 8009dfc:	e0a9      	b.n	8009f52 <f_lseek+0x4b4>
					if (clst <= 1 || clst >= fp->fs->n_fatent) ABORT(fp->fs, FR_INT_ERR);
 8009dfe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009e00:	2b01      	cmp	r3, #1
 8009e02:	d907      	bls.n	8009e14 <f_lseek+0x376>
 8009e04:	687b      	ldr	r3, [r7, #4]
 8009e06:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8009e0a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8009e0e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009e10:	429a      	cmp	r2, r3
 8009e12:	d305      	bcc.n	8009e20 <f_lseek+0x382>
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	2202      	movs	r2, #2
 8009e18:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 8009e1c:	2302      	movs	r3, #2
 8009e1e:	e098      	b.n	8009f52 <f_lseek+0x4b4>
					fp->clust = clst;
 8009e20:	687b      	ldr	r3, [r7, #4]
 8009e22:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009e24:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
					fp->fptr += bcs;
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8009e2e:	69fb      	ldr	r3, [r7, #28]
 8009e30:	441a      	add	r2, r3
 8009e32:	687b      	ldr	r3, [r7, #4]
 8009e34:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
					ofs -= bcs;
 8009e38:	683a      	ldr	r2, [r7, #0]
 8009e3a:	69fb      	ldr	r3, [r7, #28]
 8009e3c:	1ad3      	subs	r3, r2, r3
 8009e3e:	603b      	str	r3, [r7, #0]
				while (ofs > bcs) {						/* Cluster following loop */
 8009e40:	683a      	ldr	r2, [r7, #0]
 8009e42:	69fb      	ldr	r3, [r7, #28]
 8009e44:	429a      	cmp	r2, r3
 8009e46:	d8b3      	bhi.n	8009db0 <f_lseek+0x312>
				}
				fp->fptr += ofs;
 8009e48:	687b      	ldr	r3, [r7, #4]
 8009e4a:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8009e4e:	683b      	ldr	r3, [r7, #0]
 8009e50:	441a      	add	r2, r3
 8009e52:	687b      	ldr	r3, [r7, #4]
 8009e54:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
				if (ofs % SS(fp->fs)) {
 8009e58:	683b      	ldr	r3, [r7, #0]
 8009e5a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009e5e:	2b00      	cmp	r3, #0
 8009e60:	d015      	beq.n	8009e8e <f_lseek+0x3f0>
					nsect = clust2sect(fp->fs, clst);	/* Current sector */
 8009e62:	687b      	ldr	r3, [r7, #4]
 8009e64:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8009e68:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8009e6a:	4618      	mov	r0, r3
 8009e6c:	f7fd fcbc 	bl	80077e8 <clust2sect>
 8009e70:	6378      	str	r0, [r7, #52]	; 0x34
					if (!nsect) ABORT(fp->fs, FR_INT_ERR);
 8009e72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009e74:	2b00      	cmp	r3, #0
 8009e76:	d105      	bne.n	8009e84 <f_lseek+0x3e6>
 8009e78:	687b      	ldr	r3, [r7, #4]
 8009e7a:	2202      	movs	r2, #2
 8009e7c:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 8009e80:	2302      	movs	r3, #2
 8009e82:	e066      	b.n	8009f52 <f_lseek+0x4b4>
					nsect += ofs / SS(fp->fs);
 8009e84:	683b      	ldr	r3, [r7, #0]
 8009e86:	0a5b      	lsrs	r3, r3, #9
 8009e88:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009e8a:	4413      	add	r3, r2
 8009e8c:	637b      	str	r3, [r7, #52]	; 0x34
				}
			}
		}
		if (fp->fptr % SS(fp->fs) && nsect != fp->dsect) {	/* Fill sector cache if needed */
 8009e8e:	687b      	ldr	r3, [r7, #4]
 8009e90:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 8009e94:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009e98:	2b00      	cmp	r3, #0
 8009e9a:	d041      	beq.n	8009f20 <f_lseek+0x482>
 8009e9c:	687b      	ldr	r3, [r7, #4]
 8009e9e:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8009ea2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009ea4:	429a      	cmp	r2, r3
 8009ea6:	d03b      	beq.n	8009f20 <f_lseek+0x482>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA__DIRTY) {			/* Write-back dirty sector cache */
 8009ea8:	687b      	ldr	r3, [r7, #4]
 8009eaa:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 8009eae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009eb2:	2b00      	cmp	r3, #0
 8009eb4:	d01d      	beq.n	8009ef2 <f_lseek+0x454>
				if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 8009eb6:	687b      	ldr	r3, [r7, #4]
 8009eb8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8009ebc:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 8009ec0:	6879      	ldr	r1, [r7, #4]
 8009ec2:	687b      	ldr	r3, [r7, #4]
 8009ec4:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 8009ec8:	2301      	movs	r3, #1
 8009eca:	f7fd f8f7 	bl	80070bc <disk_write>
 8009ece:	4603      	mov	r3, r0
 8009ed0:	2b00      	cmp	r3, #0
 8009ed2:	d005      	beq.n	8009ee0 <f_lseek+0x442>
					ABORT(fp->fs, FR_DISK_ERR);
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	2201      	movs	r2, #1
 8009ed8:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 8009edc:	2301      	movs	r3, #1
 8009ede:	e038      	b.n	8009f52 <f_lseek+0x4b4>
				fp->flag &= ~FA__DIRTY;
 8009ee0:	687b      	ldr	r3, [r7, #4]
 8009ee2:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 8009ee6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009eea:	b2da      	uxtb	r2, r3
 8009eec:	687b      	ldr	r3, [r7, #4]
 8009eee:	f883 2206 	strb.w	r2, [r3, #518]	; 0x206
			}
#endif
			if (disk_read(fp->fs->drv, fp->buf.d8, nsect, 1) != RES_OK)	/* Fill sector cache */
 8009ef2:	687b      	ldr	r3, [r7, #4]
 8009ef4:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8009ef8:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 8009efc:	6879      	ldr	r1, [r7, #4]
 8009efe:	2301      	movs	r3, #1
 8009f00:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009f02:	f7fd f8bb 	bl	800707c <disk_read>
 8009f06:	4603      	mov	r3, r0
 8009f08:	2b00      	cmp	r3, #0
 8009f0a:	d005      	beq.n	8009f18 <f_lseek+0x47a>
				ABORT(fp->fs, FR_DISK_ERR);
 8009f0c:	687b      	ldr	r3, [r7, #4]
 8009f0e:	2201      	movs	r2, #1
 8009f10:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 8009f14:	2301      	movs	r3, #1
 8009f16:	e01c      	b.n	8009f52 <f_lseek+0x4b4>
#endif
			fp->dsect = nsect;
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009f1c:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
		}
#if !_FS_READONLY
		if (fp->fptr > fp->fsize) {			/* Set file change flag if the file size is extended */
 8009f20:	687b      	ldr	r3, [r7, #4]
 8009f22:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8009f26:	687b      	ldr	r3, [r7, #4]
 8009f28:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8009f2c:	429a      	cmp	r2, r3
 8009f2e:	d90e      	bls.n	8009f4e <f_lseek+0x4b0>
			fp->fsize = fp->fptr;
 8009f30:	687b      	ldr	r3, [r7, #4]
 8009f32:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8009f36:	687b      	ldr	r3, [r7, #4]
 8009f38:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
			fp->flag |= FA__WRITTEN;
 8009f3c:	687b      	ldr	r3, [r7, #4]
 8009f3e:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 8009f42:	f043 0320 	orr.w	r3, r3, #32
 8009f46:	b2da      	uxtb	r2, r3
 8009f48:	687b      	ldr	r3, [r7, #4]
 8009f4a:	f883 2206 	strb.w	r2, [r3, #518]	; 0x206
		}
#endif
	}

	LEAVE_FF(fp->fs, res);
 8009f4e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 8009f52:	4618      	mov	r0, r3
 8009f54:	3740      	adds	r7, #64	; 0x40
 8009f56:	46bd      	mov	sp, r7
 8009f58:	bd80      	pop	{r7, pc}
	...

08009f5c <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the paramter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8009f5c:	b480      	push	{r7}
 8009f5e:	b087      	sub	sp, #28
 8009f60:	af00      	add	r7, sp, #0
 8009f62:	60f8      	str	r0, [r7, #12]
 8009f64:	60b9      	str	r1, [r7, #8]
 8009f66:	4613      	mov	r3, r2
 8009f68:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8009f6a:	2301      	movs	r3, #1
 8009f6c:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8009f6e:	2300      	movs	r3, #0
 8009f70:	75bb      	strb	r3, [r7, #22]
  
  if(disk.nbr <= _VOLUMES)
 8009f72:	4b1f      	ldr	r3, [pc, #124]	; (8009ff0 <FATFS_LinkDriverEx+0x94>)
 8009f74:	7a5b      	ldrb	r3, [r3, #9]
 8009f76:	b2db      	uxtb	r3, r3
 8009f78:	2b01      	cmp	r3, #1
 8009f7a:	d831      	bhi.n	8009fe0 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8009f7c:	4b1c      	ldr	r3, [pc, #112]	; (8009ff0 <FATFS_LinkDriverEx+0x94>)
 8009f7e:	7a5b      	ldrb	r3, [r3, #9]
 8009f80:	b2db      	uxtb	r3, r3
 8009f82:	461a      	mov	r2, r3
 8009f84:	4b1a      	ldr	r3, [pc, #104]	; (8009ff0 <FATFS_LinkDriverEx+0x94>)
 8009f86:	2100      	movs	r1, #0
 8009f88:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;  
 8009f8a:	4b19      	ldr	r3, [pc, #100]	; (8009ff0 <FATFS_LinkDriverEx+0x94>)
 8009f8c:	7a5b      	ldrb	r3, [r3, #9]
 8009f8e:	b2db      	uxtb	r3, r3
 8009f90:	4a17      	ldr	r2, [pc, #92]	; (8009ff0 <FATFS_LinkDriverEx+0x94>)
 8009f92:	009b      	lsls	r3, r3, #2
 8009f94:	4413      	add	r3, r2
 8009f96:	68fa      	ldr	r2, [r7, #12]
 8009f98:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;  
 8009f9a:	4b15      	ldr	r3, [pc, #84]	; (8009ff0 <FATFS_LinkDriverEx+0x94>)
 8009f9c:	7a5b      	ldrb	r3, [r3, #9]
 8009f9e:	b2db      	uxtb	r3, r3
 8009fa0:	461a      	mov	r2, r3
 8009fa2:	4b13      	ldr	r3, [pc, #76]	; (8009ff0 <FATFS_LinkDriverEx+0x94>)
 8009fa4:	4413      	add	r3, r2
 8009fa6:	79fa      	ldrb	r2, [r7, #7]
 8009fa8:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8009faa:	4b11      	ldr	r3, [pc, #68]	; (8009ff0 <FATFS_LinkDriverEx+0x94>)
 8009fac:	7a5b      	ldrb	r3, [r3, #9]
 8009fae:	b2db      	uxtb	r3, r3
 8009fb0:	1c5a      	adds	r2, r3, #1
 8009fb2:	b2d1      	uxtb	r1, r2
 8009fb4:	4a0e      	ldr	r2, [pc, #56]	; (8009ff0 <FATFS_LinkDriverEx+0x94>)
 8009fb6:	7251      	strb	r1, [r2, #9]
 8009fb8:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8009fba:	7dbb      	ldrb	r3, [r7, #22]
 8009fbc:	3330      	adds	r3, #48	; 0x30
 8009fbe:	b2da      	uxtb	r2, r3
 8009fc0:	68bb      	ldr	r3, [r7, #8]
 8009fc2:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8009fc4:	68bb      	ldr	r3, [r7, #8]
 8009fc6:	3301      	adds	r3, #1
 8009fc8:	223a      	movs	r2, #58	; 0x3a
 8009fca:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8009fcc:	68bb      	ldr	r3, [r7, #8]
 8009fce:	3302      	adds	r3, #2
 8009fd0:	222f      	movs	r2, #47	; 0x2f
 8009fd2:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8009fd4:	68bb      	ldr	r3, [r7, #8]
 8009fd6:	3303      	adds	r3, #3
 8009fd8:	2200      	movs	r2, #0
 8009fda:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8009fdc:	2300      	movs	r3, #0
 8009fde:	75fb      	strb	r3, [r7, #23]
  }
  
  return ret;
 8009fe0:	7dfb      	ldrb	r3, [r7, #23]
}
 8009fe2:	4618      	mov	r0, r3
 8009fe4:	371c      	adds	r7, #28
 8009fe6:	46bd      	mov	sp, r7
 8009fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fec:	4770      	bx	lr
 8009fee:	bf00      	nop
 8009ff0:	20001450 	.word	0x20001450

08009ff4 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path 
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(Diskio_drvTypeDef *drv, char *path)
{
 8009ff4:	b580      	push	{r7, lr}
 8009ff6:	b082      	sub	sp, #8
 8009ff8:	af00      	add	r7, sp, #0
 8009ffa:	6078      	str	r0, [r7, #4]
 8009ffc:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8009ffe:	2200      	movs	r2, #0
 800a000:	6839      	ldr	r1, [r7, #0]
 800a002:	6878      	ldr	r0, [r7, #4]
 800a004:	f7ff ffaa 	bl	8009f5c <FATFS_LinkDriverEx>
 800a008:	4603      	mov	r3, r0
}
 800a00a:	4618      	mov	r0, r3
 800a00c:	3708      	adds	r7, #8
 800a00e:	46bd      	mov	sp, r7
 800a010:	bd80      	pop	{r7, pc}
	...

0800a014 <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800a014:	b480      	push	{r7}
 800a016:	b085      	sub	sp, #20
 800a018:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a01a:	f3ef 8305 	mrs	r3, IPSR
 800a01e:	60bb      	str	r3, [r7, #8]
  return(result);
 800a020:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800a022:	2b00      	cmp	r3, #0
 800a024:	d10f      	bne.n	800a046 <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a026:	f3ef 8310 	mrs	r3, PRIMASK
 800a02a:	607b      	str	r3, [r7, #4]
  return(result);
 800a02c:	687b      	ldr	r3, [r7, #4]
 800a02e:	2b00      	cmp	r3, #0
 800a030:	d109      	bne.n	800a046 <osKernelInitialize+0x32>
 800a032:	4b11      	ldr	r3, [pc, #68]	; (800a078 <osKernelInitialize+0x64>)
 800a034:	681b      	ldr	r3, [r3, #0]
 800a036:	2b02      	cmp	r3, #2
 800a038:	d109      	bne.n	800a04e <osKernelInitialize+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800a03a:	f3ef 8311 	mrs	r3, BASEPRI
 800a03e:	603b      	str	r3, [r7, #0]
  return(result);
 800a040:	683b      	ldr	r3, [r7, #0]
 800a042:	2b00      	cmp	r3, #0
 800a044:	d003      	beq.n	800a04e <osKernelInitialize+0x3a>
    stat = osErrorISR;
 800a046:	f06f 0305 	mvn.w	r3, #5
 800a04a:	60fb      	str	r3, [r7, #12]
 800a04c:	e00c      	b.n	800a068 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 800a04e:	4b0a      	ldr	r3, [pc, #40]	; (800a078 <osKernelInitialize+0x64>)
 800a050:	681b      	ldr	r3, [r3, #0]
 800a052:	2b00      	cmp	r3, #0
 800a054:	d105      	bne.n	800a062 <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 800a056:	4b08      	ldr	r3, [pc, #32]	; (800a078 <osKernelInitialize+0x64>)
 800a058:	2201      	movs	r2, #1
 800a05a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800a05c:	2300      	movs	r3, #0
 800a05e:	60fb      	str	r3, [r7, #12]
 800a060:	e002      	b.n	800a068 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 800a062:	f04f 33ff 	mov.w	r3, #4294967295
 800a066:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800a068:	68fb      	ldr	r3, [r7, #12]
}
 800a06a:	4618      	mov	r0, r3
 800a06c:	3714      	adds	r7, #20
 800a06e:	46bd      	mov	sp, r7
 800a070:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a074:	4770      	bx	lr
 800a076:	bf00      	nop
 800a078:	2000145c 	.word	0x2000145c

0800a07c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800a07c:	b580      	push	{r7, lr}
 800a07e:	b084      	sub	sp, #16
 800a080:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a082:	f3ef 8305 	mrs	r3, IPSR
 800a086:	60bb      	str	r3, [r7, #8]
  return(result);
 800a088:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800a08a:	2b00      	cmp	r3, #0
 800a08c:	d10f      	bne.n	800a0ae <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a08e:	f3ef 8310 	mrs	r3, PRIMASK
 800a092:	607b      	str	r3, [r7, #4]
  return(result);
 800a094:	687b      	ldr	r3, [r7, #4]
 800a096:	2b00      	cmp	r3, #0
 800a098:	d109      	bne.n	800a0ae <osKernelStart+0x32>
 800a09a:	4b11      	ldr	r3, [pc, #68]	; (800a0e0 <osKernelStart+0x64>)
 800a09c:	681b      	ldr	r3, [r3, #0]
 800a09e:	2b02      	cmp	r3, #2
 800a0a0:	d109      	bne.n	800a0b6 <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800a0a2:	f3ef 8311 	mrs	r3, BASEPRI
 800a0a6:	603b      	str	r3, [r7, #0]
  return(result);
 800a0a8:	683b      	ldr	r3, [r7, #0]
 800a0aa:	2b00      	cmp	r3, #0
 800a0ac:	d003      	beq.n	800a0b6 <osKernelStart+0x3a>
    stat = osErrorISR;
 800a0ae:	f06f 0305 	mvn.w	r3, #5
 800a0b2:	60fb      	str	r3, [r7, #12]
 800a0b4:	e00e      	b.n	800a0d4 <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 800a0b6:	4b0a      	ldr	r3, [pc, #40]	; (800a0e0 <osKernelStart+0x64>)
 800a0b8:	681b      	ldr	r3, [r3, #0]
 800a0ba:	2b01      	cmp	r3, #1
 800a0bc:	d107      	bne.n	800a0ce <osKernelStart+0x52>
      KernelState = osKernelRunning;
 800a0be:	4b08      	ldr	r3, [pc, #32]	; (800a0e0 <osKernelStart+0x64>)
 800a0c0:	2202      	movs	r2, #2
 800a0c2:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 800a0c4:	f001 faec 	bl	800b6a0 <vTaskStartScheduler>
      stat = osOK;
 800a0c8:	2300      	movs	r3, #0
 800a0ca:	60fb      	str	r3, [r7, #12]
 800a0cc:	e002      	b.n	800a0d4 <osKernelStart+0x58>
    } else {
      stat = osError;
 800a0ce:	f04f 33ff 	mov.w	r3, #4294967295
 800a0d2:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800a0d4:	68fb      	ldr	r3, [r7, #12]
}
 800a0d6:	4618      	mov	r0, r3
 800a0d8:	3710      	adds	r7, #16
 800a0da:	46bd      	mov	sp, r7
 800a0dc:	bd80      	pop	{r7, pc}
 800a0de:	bf00      	nop
 800a0e0:	2000145c 	.word	0x2000145c

0800a0e4 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800a0e4:	b580      	push	{r7, lr}
 800a0e6:	b092      	sub	sp, #72	; 0x48
 800a0e8:	af04      	add	r7, sp, #16
 800a0ea:	60f8      	str	r0, [r7, #12]
 800a0ec:	60b9      	str	r1, [r7, #8]
 800a0ee:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800a0f0:	2300      	movs	r3, #0
 800a0f2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a0f4:	f3ef 8305 	mrs	r3, IPSR
 800a0f8:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 800a0fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  if (!IS_IRQ() && (func != NULL)) {
 800a0fc:	2b00      	cmp	r3, #0
 800a0fe:	f040 8094 	bne.w	800a22a <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a102:	f3ef 8310 	mrs	r3, PRIMASK
 800a106:	623b      	str	r3, [r7, #32]
  return(result);
 800a108:	6a3b      	ldr	r3, [r7, #32]
 800a10a:	2b00      	cmp	r3, #0
 800a10c:	f040 808d 	bne.w	800a22a <osThreadNew+0x146>
 800a110:	4b48      	ldr	r3, [pc, #288]	; (800a234 <osThreadNew+0x150>)
 800a112:	681b      	ldr	r3, [r3, #0]
 800a114:	2b02      	cmp	r3, #2
 800a116:	d106      	bne.n	800a126 <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800a118:	f3ef 8311 	mrs	r3, BASEPRI
 800a11c:	61fb      	str	r3, [r7, #28]
  return(result);
 800a11e:	69fb      	ldr	r3, [r7, #28]
 800a120:	2b00      	cmp	r3, #0
 800a122:	f040 8082 	bne.w	800a22a <osThreadNew+0x146>
 800a126:	68fb      	ldr	r3, [r7, #12]
 800a128:	2b00      	cmp	r3, #0
 800a12a:	d07e      	beq.n	800a22a <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 800a12c:	2380      	movs	r3, #128	; 0x80
 800a12e:	633b      	str	r3, [r7, #48]	; 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 800a130:	2318      	movs	r3, #24
 800a132:	62fb      	str	r3, [r7, #44]	; 0x2c

    empty = '\0';
 800a134:	2300      	movs	r3, #0
 800a136:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 800a138:	f107 031b 	add.w	r3, r7, #27
 800a13c:	637b      	str	r3, [r7, #52]	; 0x34
    mem   = -1;
 800a13e:	f04f 33ff 	mov.w	r3, #4294967295
 800a142:	62bb      	str	r3, [r7, #40]	; 0x28

    if (attr != NULL) {
 800a144:	687b      	ldr	r3, [r7, #4]
 800a146:	2b00      	cmp	r3, #0
 800a148:	d045      	beq.n	800a1d6 <osThreadNew+0xf2>
      if (attr->name != NULL) {
 800a14a:	687b      	ldr	r3, [r7, #4]
 800a14c:	681b      	ldr	r3, [r3, #0]
 800a14e:	2b00      	cmp	r3, #0
 800a150:	d002      	beq.n	800a158 <osThreadNew+0x74>
        name = attr->name;
 800a152:	687b      	ldr	r3, [r7, #4]
 800a154:	681b      	ldr	r3, [r3, #0]
 800a156:	637b      	str	r3, [r7, #52]	; 0x34
      }
      if (attr->priority != osPriorityNone) {
 800a158:	687b      	ldr	r3, [r7, #4]
 800a15a:	699b      	ldr	r3, [r3, #24]
 800a15c:	2b00      	cmp	r3, #0
 800a15e:	d002      	beq.n	800a166 <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 800a160:	687b      	ldr	r3, [r7, #4]
 800a162:	699b      	ldr	r3, [r3, #24]
 800a164:	62fb      	str	r3, [r7, #44]	; 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800a166:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a168:	2b00      	cmp	r3, #0
 800a16a:	d008      	beq.n	800a17e <osThreadNew+0x9a>
 800a16c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a16e:	2b38      	cmp	r3, #56	; 0x38
 800a170:	d805      	bhi.n	800a17e <osThreadNew+0x9a>
 800a172:	687b      	ldr	r3, [r7, #4]
 800a174:	685b      	ldr	r3, [r3, #4]
 800a176:	f003 0301 	and.w	r3, r3, #1
 800a17a:	2b00      	cmp	r3, #0
 800a17c:	d001      	beq.n	800a182 <osThreadNew+0x9e>
        return (NULL);
 800a17e:	2300      	movs	r3, #0
 800a180:	e054      	b.n	800a22c <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 800a182:	687b      	ldr	r3, [r7, #4]
 800a184:	695b      	ldr	r3, [r3, #20]
 800a186:	2b00      	cmp	r3, #0
 800a188:	d003      	beq.n	800a192 <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800a18a:	687b      	ldr	r3, [r7, #4]
 800a18c:	695b      	ldr	r3, [r3, #20]
 800a18e:	089b      	lsrs	r3, r3, #2
 800a190:	633b      	str	r3, [r7, #48]	; 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800a192:	687b      	ldr	r3, [r7, #4]
 800a194:	689b      	ldr	r3, [r3, #8]
 800a196:	2b00      	cmp	r3, #0
 800a198:	d00e      	beq.n	800a1b8 <osThreadNew+0xd4>
 800a19a:	687b      	ldr	r3, [r7, #4]
 800a19c:	68db      	ldr	r3, [r3, #12]
 800a19e:	2ba7      	cmp	r3, #167	; 0xa7
 800a1a0:	d90a      	bls.n	800a1b8 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800a1a2:	687b      	ldr	r3, [r7, #4]
 800a1a4:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800a1a6:	2b00      	cmp	r3, #0
 800a1a8:	d006      	beq.n	800a1b8 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800a1aa:	687b      	ldr	r3, [r7, #4]
 800a1ac:	695b      	ldr	r3, [r3, #20]
 800a1ae:	2b00      	cmp	r3, #0
 800a1b0:	d002      	beq.n	800a1b8 <osThreadNew+0xd4>
        mem = 1;
 800a1b2:	2301      	movs	r3, #1
 800a1b4:	62bb      	str	r3, [r7, #40]	; 0x28
 800a1b6:	e010      	b.n	800a1da <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800a1b8:	687b      	ldr	r3, [r7, #4]
 800a1ba:	689b      	ldr	r3, [r3, #8]
 800a1bc:	2b00      	cmp	r3, #0
 800a1be:	d10c      	bne.n	800a1da <osThreadNew+0xf6>
 800a1c0:	687b      	ldr	r3, [r7, #4]
 800a1c2:	68db      	ldr	r3, [r3, #12]
 800a1c4:	2b00      	cmp	r3, #0
 800a1c6:	d108      	bne.n	800a1da <osThreadNew+0xf6>
 800a1c8:	687b      	ldr	r3, [r7, #4]
 800a1ca:	691b      	ldr	r3, [r3, #16]
 800a1cc:	2b00      	cmp	r3, #0
 800a1ce:	d104      	bne.n	800a1da <osThreadNew+0xf6>
          mem = 0;
 800a1d0:	2300      	movs	r3, #0
 800a1d2:	62bb      	str	r3, [r7, #40]	; 0x28
 800a1d4:	e001      	b.n	800a1da <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 800a1d6:	2300      	movs	r3, #0
 800a1d8:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    if (mem == 1) {
 800a1da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a1dc:	2b01      	cmp	r3, #1
 800a1de:	d110      	bne.n	800a202 <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800a1e0:	687b      	ldr	r3, [r7, #4]
 800a1e2:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 800a1e4:	687a      	ldr	r2, [r7, #4]
 800a1e6:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800a1e8:	9202      	str	r2, [sp, #8]
 800a1ea:	9301      	str	r3, [sp, #4]
 800a1ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a1ee:	9300      	str	r3, [sp, #0]
 800a1f0:	68bb      	ldr	r3, [r7, #8]
 800a1f2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a1f4:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800a1f6:	68f8      	ldr	r0, [r7, #12]
 800a1f8:	f001 f86f 	bl	800b2da <xTaskCreateStatic>
 800a1fc:	4603      	mov	r3, r0
 800a1fe:	617b      	str	r3, [r7, #20]
 800a200:	e013      	b.n	800a22a <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 800a202:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a204:	2b00      	cmp	r3, #0
 800a206:	d110      	bne.n	800a22a <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800a208:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a20a:	b29a      	uxth	r2, r3
 800a20c:	f107 0314 	add.w	r3, r7, #20
 800a210:	9301      	str	r3, [sp, #4]
 800a212:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a214:	9300      	str	r3, [sp, #0]
 800a216:	68bb      	ldr	r3, [r7, #8]
 800a218:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800a21a:	68f8      	ldr	r0, [r7, #12]
 800a21c:	f001 f8b9 	bl	800b392 <xTaskCreate>
 800a220:	4603      	mov	r3, r0
 800a222:	2b01      	cmp	r3, #1
 800a224:	d001      	beq.n	800a22a <osThreadNew+0x146>
          hTask = NULL;
 800a226:	2300      	movs	r3, #0
 800a228:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 800a22a:	697b      	ldr	r3, [r7, #20]
}
 800a22c:	4618      	mov	r0, r3
 800a22e:	3738      	adds	r7, #56	; 0x38
 800a230:	46bd      	mov	sp, r7
 800a232:	bd80      	pop	{r7, pc}
 800a234:	2000145c 	.word	0x2000145c

0800a238 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 800a238:	b580      	push	{r7, lr}
 800a23a:	b086      	sub	sp, #24
 800a23c:	af00      	add	r7, sp, #0
 800a23e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a240:	f3ef 8305 	mrs	r3, IPSR
 800a244:	613b      	str	r3, [r7, #16]
  return(result);
 800a246:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 800a248:	2b00      	cmp	r3, #0
 800a24a:	d10f      	bne.n	800a26c <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a24c:	f3ef 8310 	mrs	r3, PRIMASK
 800a250:	60fb      	str	r3, [r7, #12]
  return(result);
 800a252:	68fb      	ldr	r3, [r7, #12]
 800a254:	2b00      	cmp	r3, #0
 800a256:	d109      	bne.n	800a26c <osDelay+0x34>
 800a258:	4b0d      	ldr	r3, [pc, #52]	; (800a290 <osDelay+0x58>)
 800a25a:	681b      	ldr	r3, [r3, #0]
 800a25c:	2b02      	cmp	r3, #2
 800a25e:	d109      	bne.n	800a274 <osDelay+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800a260:	f3ef 8311 	mrs	r3, BASEPRI
 800a264:	60bb      	str	r3, [r7, #8]
  return(result);
 800a266:	68bb      	ldr	r3, [r7, #8]
 800a268:	2b00      	cmp	r3, #0
 800a26a:	d003      	beq.n	800a274 <osDelay+0x3c>
    stat = osErrorISR;
 800a26c:	f06f 0305 	mvn.w	r3, #5
 800a270:	617b      	str	r3, [r7, #20]
 800a272:	e007      	b.n	800a284 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 800a274:	2300      	movs	r3, #0
 800a276:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 800a278:	687b      	ldr	r3, [r7, #4]
 800a27a:	2b00      	cmp	r3, #0
 800a27c:	d002      	beq.n	800a284 <osDelay+0x4c>
      vTaskDelay(ticks);
 800a27e:	6878      	ldr	r0, [r7, #4]
 800a280:	f001 f9da 	bl	800b638 <vTaskDelay>
    }
  }

  return (stat);
 800a284:	697b      	ldr	r3, [r7, #20]
}
 800a286:	4618      	mov	r0, r3
 800a288:	3718      	adds	r7, #24
 800a28a:	46bd      	mov	sp, r7
 800a28c:	bd80      	pop	{r7, pc}
 800a28e:	bf00      	nop
 800a290:	2000145c 	.word	0x2000145c

0800a294 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800a294:	b480      	push	{r7}
 800a296:	b085      	sub	sp, #20
 800a298:	af00      	add	r7, sp, #0
 800a29a:	60f8      	str	r0, [r7, #12]
 800a29c:	60b9      	str	r1, [r7, #8]
 800a29e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800a2a0:	68fb      	ldr	r3, [r7, #12]
 800a2a2:	4a07      	ldr	r2, [pc, #28]	; (800a2c0 <vApplicationGetIdleTaskMemory+0x2c>)
 800a2a4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800a2a6:	68bb      	ldr	r3, [r7, #8]
 800a2a8:	4a06      	ldr	r2, [pc, #24]	; (800a2c4 <vApplicationGetIdleTaskMemory+0x30>)
 800a2aa:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800a2ac:	687b      	ldr	r3, [r7, #4]
 800a2ae:	2280      	movs	r2, #128	; 0x80
 800a2b0:	601a      	str	r2, [r3, #0]
}
 800a2b2:	bf00      	nop
 800a2b4:	3714      	adds	r7, #20
 800a2b6:	46bd      	mov	sp, r7
 800a2b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2bc:	4770      	bx	lr
 800a2be:	bf00      	nop
 800a2c0:	20001460 	.word	0x20001460
 800a2c4:	20001508 	.word	0x20001508

0800a2c8 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800a2c8:	b480      	push	{r7}
 800a2ca:	b085      	sub	sp, #20
 800a2cc:	af00      	add	r7, sp, #0
 800a2ce:	60f8      	str	r0, [r7, #12]
 800a2d0:	60b9      	str	r1, [r7, #8]
 800a2d2:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800a2d4:	68fb      	ldr	r3, [r7, #12]
 800a2d6:	4a07      	ldr	r2, [pc, #28]	; (800a2f4 <vApplicationGetTimerTaskMemory+0x2c>)
 800a2d8:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800a2da:	68bb      	ldr	r3, [r7, #8]
 800a2dc:	4a06      	ldr	r2, [pc, #24]	; (800a2f8 <vApplicationGetTimerTaskMemory+0x30>)
 800a2de:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800a2e0:	687b      	ldr	r3, [r7, #4]
 800a2e2:	f44f 7280 	mov.w	r2, #256	; 0x100
 800a2e6:	601a      	str	r2, [r3, #0]
}
 800a2e8:	bf00      	nop
 800a2ea:	3714      	adds	r7, #20
 800a2ec:	46bd      	mov	sp, r7
 800a2ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2f2:	4770      	bx	lr
 800a2f4:	20001708 	.word	0x20001708
 800a2f8:	200017b0 	.word	0x200017b0

0800a2fc <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800a2fc:	b480      	push	{r7}
 800a2fe:	b083      	sub	sp, #12
 800a300:	af00      	add	r7, sp, #0
 800a302:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a304:	687b      	ldr	r3, [r7, #4]
 800a306:	f103 0208 	add.w	r2, r3, #8
 800a30a:	687b      	ldr	r3, [r7, #4]
 800a30c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800a30e:	687b      	ldr	r3, [r7, #4]
 800a310:	f04f 32ff 	mov.w	r2, #4294967295
 800a314:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a316:	687b      	ldr	r3, [r7, #4]
 800a318:	f103 0208 	add.w	r2, r3, #8
 800a31c:	687b      	ldr	r3, [r7, #4]
 800a31e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a320:	687b      	ldr	r3, [r7, #4]
 800a322:	f103 0208 	add.w	r2, r3, #8
 800a326:	687b      	ldr	r3, [r7, #4]
 800a328:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800a32a:	687b      	ldr	r3, [r7, #4]
 800a32c:	2200      	movs	r2, #0
 800a32e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800a330:	bf00      	nop
 800a332:	370c      	adds	r7, #12
 800a334:	46bd      	mov	sp, r7
 800a336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a33a:	4770      	bx	lr

0800a33c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800a33c:	b480      	push	{r7}
 800a33e:	b083      	sub	sp, #12
 800a340:	af00      	add	r7, sp, #0
 800a342:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 800a344:	687b      	ldr	r3, [r7, #4]
 800a346:	2200      	movs	r2, #0
 800a348:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800a34a:	bf00      	nop
 800a34c:	370c      	adds	r7, #12
 800a34e:	46bd      	mov	sp, r7
 800a350:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a354:	4770      	bx	lr

0800a356 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800a356:	b480      	push	{r7}
 800a358:	b085      	sub	sp, #20
 800a35a:	af00      	add	r7, sp, #0
 800a35c:	6078      	str	r0, [r7, #4]
 800a35e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800a360:	687b      	ldr	r3, [r7, #4]
 800a362:	685b      	ldr	r3, [r3, #4]
 800a364:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800a366:	683b      	ldr	r3, [r7, #0]
 800a368:	68fa      	ldr	r2, [r7, #12]
 800a36a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800a36c:	68fb      	ldr	r3, [r7, #12]
 800a36e:	689a      	ldr	r2, [r3, #8]
 800a370:	683b      	ldr	r3, [r7, #0]
 800a372:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800a374:	68fb      	ldr	r3, [r7, #12]
 800a376:	689b      	ldr	r3, [r3, #8]
 800a378:	683a      	ldr	r2, [r7, #0]
 800a37a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800a37c:	68fb      	ldr	r3, [r7, #12]
 800a37e:	683a      	ldr	r2, [r7, #0]
 800a380:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800a382:	683b      	ldr	r3, [r7, #0]
 800a384:	687a      	ldr	r2, [r7, #4]
 800a386:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800a388:	687b      	ldr	r3, [r7, #4]
 800a38a:	681b      	ldr	r3, [r3, #0]
 800a38c:	1c5a      	adds	r2, r3, #1
 800a38e:	687b      	ldr	r3, [r7, #4]
 800a390:	601a      	str	r2, [r3, #0]
}
 800a392:	bf00      	nop
 800a394:	3714      	adds	r7, #20
 800a396:	46bd      	mov	sp, r7
 800a398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a39c:	4770      	bx	lr

0800a39e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800a39e:	b480      	push	{r7}
 800a3a0:	b085      	sub	sp, #20
 800a3a2:	af00      	add	r7, sp, #0
 800a3a4:	6078      	str	r0, [r7, #4]
 800a3a6:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800a3a8:	683b      	ldr	r3, [r7, #0]
 800a3aa:	681b      	ldr	r3, [r3, #0]
 800a3ac:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800a3ae:	68bb      	ldr	r3, [r7, #8]
 800a3b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a3b4:	d103      	bne.n	800a3be <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800a3b6:	687b      	ldr	r3, [r7, #4]
 800a3b8:	691b      	ldr	r3, [r3, #16]
 800a3ba:	60fb      	str	r3, [r7, #12]
 800a3bc:	e00c      	b.n	800a3d8 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a3be:	687b      	ldr	r3, [r7, #4]
 800a3c0:	3308      	adds	r3, #8
 800a3c2:	60fb      	str	r3, [r7, #12]
 800a3c4:	e002      	b.n	800a3cc <vListInsert+0x2e>
 800a3c6:	68fb      	ldr	r3, [r7, #12]
 800a3c8:	685b      	ldr	r3, [r3, #4]
 800a3ca:	60fb      	str	r3, [r7, #12]
 800a3cc:	68fb      	ldr	r3, [r7, #12]
 800a3ce:	685b      	ldr	r3, [r3, #4]
 800a3d0:	681b      	ldr	r3, [r3, #0]
 800a3d2:	68ba      	ldr	r2, [r7, #8]
 800a3d4:	429a      	cmp	r2, r3
 800a3d6:	d2f6      	bcs.n	800a3c6 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800a3d8:	68fb      	ldr	r3, [r7, #12]
 800a3da:	685a      	ldr	r2, [r3, #4]
 800a3dc:	683b      	ldr	r3, [r7, #0]
 800a3de:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800a3e0:	683b      	ldr	r3, [r7, #0]
 800a3e2:	685b      	ldr	r3, [r3, #4]
 800a3e4:	683a      	ldr	r2, [r7, #0]
 800a3e6:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800a3e8:	683b      	ldr	r3, [r7, #0]
 800a3ea:	68fa      	ldr	r2, [r7, #12]
 800a3ec:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800a3ee:	68fb      	ldr	r3, [r7, #12]
 800a3f0:	683a      	ldr	r2, [r7, #0]
 800a3f2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800a3f4:	683b      	ldr	r3, [r7, #0]
 800a3f6:	687a      	ldr	r2, [r7, #4]
 800a3f8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800a3fa:	687b      	ldr	r3, [r7, #4]
 800a3fc:	681b      	ldr	r3, [r3, #0]
 800a3fe:	1c5a      	adds	r2, r3, #1
 800a400:	687b      	ldr	r3, [r7, #4]
 800a402:	601a      	str	r2, [r3, #0]
}
 800a404:	bf00      	nop
 800a406:	3714      	adds	r7, #20
 800a408:	46bd      	mov	sp, r7
 800a40a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a40e:	4770      	bx	lr

0800a410 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800a410:	b480      	push	{r7}
 800a412:	b085      	sub	sp, #20
 800a414:	af00      	add	r7, sp, #0
 800a416:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 800a418:	687b      	ldr	r3, [r7, #4]
 800a41a:	691b      	ldr	r3, [r3, #16]
 800a41c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800a41e:	687b      	ldr	r3, [r7, #4]
 800a420:	685b      	ldr	r3, [r3, #4]
 800a422:	687a      	ldr	r2, [r7, #4]
 800a424:	6892      	ldr	r2, [r2, #8]
 800a426:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800a428:	687b      	ldr	r3, [r7, #4]
 800a42a:	689b      	ldr	r3, [r3, #8]
 800a42c:	687a      	ldr	r2, [r7, #4]
 800a42e:	6852      	ldr	r2, [r2, #4]
 800a430:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800a432:	68fb      	ldr	r3, [r7, #12]
 800a434:	685b      	ldr	r3, [r3, #4]
 800a436:	687a      	ldr	r2, [r7, #4]
 800a438:	429a      	cmp	r2, r3
 800a43a:	d103      	bne.n	800a444 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800a43c:	687b      	ldr	r3, [r7, #4]
 800a43e:	689a      	ldr	r2, [r3, #8]
 800a440:	68fb      	ldr	r3, [r7, #12]
 800a442:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 800a444:	687b      	ldr	r3, [r7, #4]
 800a446:	2200      	movs	r2, #0
 800a448:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800a44a:	68fb      	ldr	r3, [r7, #12]
 800a44c:	681b      	ldr	r3, [r3, #0]
 800a44e:	1e5a      	subs	r2, r3, #1
 800a450:	68fb      	ldr	r3, [r7, #12]
 800a452:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800a454:	68fb      	ldr	r3, [r7, #12]
 800a456:	681b      	ldr	r3, [r3, #0]
}
 800a458:	4618      	mov	r0, r3
 800a45a:	3714      	adds	r7, #20
 800a45c:	46bd      	mov	sp, r7
 800a45e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a462:	4770      	bx	lr

0800a464 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800a464:	b580      	push	{r7, lr}
 800a466:	b084      	sub	sp, #16
 800a468:	af00      	add	r7, sp, #0
 800a46a:	6078      	str	r0, [r7, #4]
 800a46c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800a46e:	687b      	ldr	r3, [r7, #4]
 800a470:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800a472:	68fb      	ldr	r3, [r7, #12]
 800a474:	2b00      	cmp	r3, #0
 800a476:	d10a      	bne.n	800a48e <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800a478:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a47c:	f383 8811 	msr	BASEPRI, r3
 800a480:	f3bf 8f6f 	isb	sy
 800a484:	f3bf 8f4f 	dsb	sy
 800a488:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800a48a:	bf00      	nop
 800a48c:	e7fe      	b.n	800a48c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800a48e:	f002 fbe9 	bl	800cc64 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 800a492:	68fb      	ldr	r3, [r7, #12]
 800a494:	681a      	ldr	r2, [r3, #0]
 800a496:	68fb      	ldr	r3, [r7, #12]
 800a498:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a49a:	68f9      	ldr	r1, [r7, #12]
 800a49c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800a49e:	fb01 f303 	mul.w	r3, r1, r3
 800a4a2:	441a      	add	r2, r3
 800a4a4:	68fb      	ldr	r3, [r7, #12]
 800a4a6:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800a4a8:	68fb      	ldr	r3, [r7, #12]
 800a4aa:	2200      	movs	r2, #0
 800a4ac:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800a4ae:	68fb      	ldr	r3, [r7, #12]
 800a4b0:	681a      	ldr	r2, [r3, #0]
 800a4b2:	68fb      	ldr	r3, [r7, #12]
 800a4b4:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 800a4b6:	68fb      	ldr	r3, [r7, #12]
 800a4b8:	681a      	ldr	r2, [r3, #0]
 800a4ba:	68fb      	ldr	r3, [r7, #12]
 800a4bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a4be:	3b01      	subs	r3, #1
 800a4c0:	68f9      	ldr	r1, [r7, #12]
 800a4c2:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800a4c4:	fb01 f303 	mul.w	r3, r1, r3
 800a4c8:	441a      	add	r2, r3
 800a4ca:	68fb      	ldr	r3, [r7, #12]
 800a4cc:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800a4ce:	68fb      	ldr	r3, [r7, #12]
 800a4d0:	22ff      	movs	r2, #255	; 0xff
 800a4d2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800a4d6:	68fb      	ldr	r3, [r7, #12]
 800a4d8:	22ff      	movs	r2, #255	; 0xff
 800a4da:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800a4de:	683b      	ldr	r3, [r7, #0]
 800a4e0:	2b00      	cmp	r3, #0
 800a4e2:	d114      	bne.n	800a50e <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a4e4:	68fb      	ldr	r3, [r7, #12]
 800a4e6:	691b      	ldr	r3, [r3, #16]
 800a4e8:	2b00      	cmp	r3, #0
 800a4ea:	d01a      	beq.n	800a522 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a4ec:	68fb      	ldr	r3, [r7, #12]
 800a4ee:	3310      	adds	r3, #16
 800a4f0:	4618      	mov	r0, r3
 800a4f2:	f001 fb73 	bl	800bbdc <xTaskRemoveFromEventList>
 800a4f6:	4603      	mov	r3, r0
 800a4f8:	2b00      	cmp	r3, #0
 800a4fa:	d012      	beq.n	800a522 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800a4fc:	4b0c      	ldr	r3, [pc, #48]	; (800a530 <xQueueGenericReset+0xcc>)
 800a4fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a502:	601a      	str	r2, [r3, #0]
 800a504:	f3bf 8f4f 	dsb	sy
 800a508:	f3bf 8f6f 	isb	sy
 800a50c:	e009      	b.n	800a522 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800a50e:	68fb      	ldr	r3, [r7, #12]
 800a510:	3310      	adds	r3, #16
 800a512:	4618      	mov	r0, r3
 800a514:	f7ff fef2 	bl	800a2fc <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800a518:	68fb      	ldr	r3, [r7, #12]
 800a51a:	3324      	adds	r3, #36	; 0x24
 800a51c:	4618      	mov	r0, r3
 800a51e:	f7ff feed 	bl	800a2fc <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800a522:	f002 fbcf 	bl	800ccc4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800a526:	2301      	movs	r3, #1
}
 800a528:	4618      	mov	r0, r3
 800a52a:	3710      	adds	r7, #16
 800a52c:	46bd      	mov	sp, r7
 800a52e:	bd80      	pop	{r7, pc}
 800a530:	e000ed04 	.word	0xe000ed04

0800a534 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800a534:	b580      	push	{r7, lr}
 800a536:	b08e      	sub	sp, #56	; 0x38
 800a538:	af02      	add	r7, sp, #8
 800a53a:	60f8      	str	r0, [r7, #12]
 800a53c:	60b9      	str	r1, [r7, #8]
 800a53e:	607a      	str	r2, [r7, #4]
 800a540:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800a542:	68fb      	ldr	r3, [r7, #12]
 800a544:	2b00      	cmp	r3, #0
 800a546:	d10a      	bne.n	800a55e <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800a548:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a54c:	f383 8811 	msr	BASEPRI, r3
 800a550:	f3bf 8f6f 	isb	sy
 800a554:	f3bf 8f4f 	dsb	sy
 800a558:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800a55a:	bf00      	nop
 800a55c:	e7fe      	b.n	800a55c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800a55e:	683b      	ldr	r3, [r7, #0]
 800a560:	2b00      	cmp	r3, #0
 800a562:	d10a      	bne.n	800a57a <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800a564:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a568:	f383 8811 	msr	BASEPRI, r3
 800a56c:	f3bf 8f6f 	isb	sy
 800a570:	f3bf 8f4f 	dsb	sy
 800a574:	627b      	str	r3, [r7, #36]	; 0x24
}
 800a576:	bf00      	nop
 800a578:	e7fe      	b.n	800a578 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800a57a:	687b      	ldr	r3, [r7, #4]
 800a57c:	2b00      	cmp	r3, #0
 800a57e:	d002      	beq.n	800a586 <xQueueGenericCreateStatic+0x52>
 800a580:	68bb      	ldr	r3, [r7, #8]
 800a582:	2b00      	cmp	r3, #0
 800a584:	d001      	beq.n	800a58a <xQueueGenericCreateStatic+0x56>
 800a586:	2301      	movs	r3, #1
 800a588:	e000      	b.n	800a58c <xQueueGenericCreateStatic+0x58>
 800a58a:	2300      	movs	r3, #0
 800a58c:	2b00      	cmp	r3, #0
 800a58e:	d10a      	bne.n	800a5a6 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800a590:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a594:	f383 8811 	msr	BASEPRI, r3
 800a598:	f3bf 8f6f 	isb	sy
 800a59c:	f3bf 8f4f 	dsb	sy
 800a5a0:	623b      	str	r3, [r7, #32]
}
 800a5a2:	bf00      	nop
 800a5a4:	e7fe      	b.n	800a5a4 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800a5a6:	687b      	ldr	r3, [r7, #4]
 800a5a8:	2b00      	cmp	r3, #0
 800a5aa:	d102      	bne.n	800a5b2 <xQueueGenericCreateStatic+0x7e>
 800a5ac:	68bb      	ldr	r3, [r7, #8]
 800a5ae:	2b00      	cmp	r3, #0
 800a5b0:	d101      	bne.n	800a5b6 <xQueueGenericCreateStatic+0x82>
 800a5b2:	2301      	movs	r3, #1
 800a5b4:	e000      	b.n	800a5b8 <xQueueGenericCreateStatic+0x84>
 800a5b6:	2300      	movs	r3, #0
 800a5b8:	2b00      	cmp	r3, #0
 800a5ba:	d10a      	bne.n	800a5d2 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800a5bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a5c0:	f383 8811 	msr	BASEPRI, r3
 800a5c4:	f3bf 8f6f 	isb	sy
 800a5c8:	f3bf 8f4f 	dsb	sy
 800a5cc:	61fb      	str	r3, [r7, #28]
}
 800a5ce:	bf00      	nop
 800a5d0:	e7fe      	b.n	800a5d0 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800a5d2:	2354      	movs	r3, #84	; 0x54
 800a5d4:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800a5d6:	697b      	ldr	r3, [r7, #20]
 800a5d8:	2b54      	cmp	r3, #84	; 0x54
 800a5da:	d00a      	beq.n	800a5f2 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800a5dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a5e0:	f383 8811 	msr	BASEPRI, r3
 800a5e4:	f3bf 8f6f 	isb	sy
 800a5e8:	f3bf 8f4f 	dsb	sy
 800a5ec:	61bb      	str	r3, [r7, #24]
}
 800a5ee:	bf00      	nop
 800a5f0:	e7fe      	b.n	800a5f0 <xQueueGenericCreateStatic+0xbc>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800a5f2:	683b      	ldr	r3, [r7, #0]
 800a5f4:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800a5f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a5f8:	2b00      	cmp	r3, #0
 800a5fa:	d00d      	beq.n	800a618 <xQueueGenericCreateStatic+0xe4>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800a5fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a5fe:	2201      	movs	r2, #1
 800a600:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800a604:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800a608:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a60a:	9300      	str	r3, [sp, #0]
 800a60c:	4613      	mov	r3, r2
 800a60e:	687a      	ldr	r2, [r7, #4]
 800a610:	68b9      	ldr	r1, [r7, #8]
 800a612:	68f8      	ldr	r0, [r7, #12]
 800a614:	f000 f843 	bl	800a69e <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 800a618:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800a61a:	4618      	mov	r0, r3
 800a61c:	3730      	adds	r7, #48	; 0x30
 800a61e:	46bd      	mov	sp, r7
 800a620:	bd80      	pop	{r7, pc}

0800a622 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800a622:	b580      	push	{r7, lr}
 800a624:	b08a      	sub	sp, #40	; 0x28
 800a626:	af02      	add	r7, sp, #8
 800a628:	60f8      	str	r0, [r7, #12]
 800a62a:	60b9      	str	r1, [r7, #8]
 800a62c:	4613      	mov	r3, r2
 800a62e:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800a630:	68fb      	ldr	r3, [r7, #12]
 800a632:	2b00      	cmp	r3, #0
 800a634:	d10a      	bne.n	800a64c <xQueueGenericCreate+0x2a>
	__asm volatile
 800a636:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a63a:	f383 8811 	msr	BASEPRI, r3
 800a63e:	f3bf 8f6f 	isb	sy
 800a642:	f3bf 8f4f 	dsb	sy
 800a646:	613b      	str	r3, [r7, #16]
}
 800a648:	bf00      	nop
 800a64a:	e7fe      	b.n	800a64a <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 800a64c:	68bb      	ldr	r3, [r7, #8]
 800a64e:	2b00      	cmp	r3, #0
 800a650:	d102      	bne.n	800a658 <xQueueGenericCreate+0x36>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 800a652:	2300      	movs	r3, #0
 800a654:	61fb      	str	r3, [r7, #28]
 800a656:	e004      	b.n	800a662 <xQueueGenericCreate+0x40>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a658:	68fb      	ldr	r3, [r7, #12]
 800a65a:	68ba      	ldr	r2, [r7, #8]
 800a65c:	fb02 f303 	mul.w	r3, r2, r3
 800a660:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 800a662:	69fb      	ldr	r3, [r7, #28]
 800a664:	3354      	adds	r3, #84	; 0x54
 800a666:	4618      	mov	r0, r3
 800a668:	f002 fc1e 	bl	800cea8 <pvPortMalloc>
 800a66c:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800a66e:	69bb      	ldr	r3, [r7, #24]
 800a670:	2b00      	cmp	r3, #0
 800a672:	d00f      	beq.n	800a694 <xQueueGenericCreate+0x72>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 800a674:	69bb      	ldr	r3, [r7, #24]
 800a676:	3354      	adds	r3, #84	; 0x54
 800a678:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800a67a:	69bb      	ldr	r3, [r7, #24]
 800a67c:	2200      	movs	r2, #0
 800a67e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800a682:	79fa      	ldrb	r2, [r7, #7]
 800a684:	69bb      	ldr	r3, [r7, #24]
 800a686:	9300      	str	r3, [sp, #0]
 800a688:	4613      	mov	r3, r2
 800a68a:	697a      	ldr	r2, [r7, #20]
 800a68c:	68b9      	ldr	r1, [r7, #8]
 800a68e:	68f8      	ldr	r0, [r7, #12]
 800a690:	f000 f805 	bl	800a69e <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 800a694:	69bb      	ldr	r3, [r7, #24]
	}
 800a696:	4618      	mov	r0, r3
 800a698:	3720      	adds	r7, #32
 800a69a:	46bd      	mov	sp, r7
 800a69c:	bd80      	pop	{r7, pc}

0800a69e <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800a69e:	b580      	push	{r7, lr}
 800a6a0:	b084      	sub	sp, #16
 800a6a2:	af00      	add	r7, sp, #0
 800a6a4:	60f8      	str	r0, [r7, #12]
 800a6a6:	60b9      	str	r1, [r7, #8]
 800a6a8:	607a      	str	r2, [r7, #4]
 800a6aa:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800a6ac:	68bb      	ldr	r3, [r7, #8]
 800a6ae:	2b00      	cmp	r3, #0
 800a6b0:	d103      	bne.n	800a6ba <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800a6b2:	69bb      	ldr	r3, [r7, #24]
 800a6b4:	69ba      	ldr	r2, [r7, #24]
 800a6b6:	601a      	str	r2, [r3, #0]
 800a6b8:	e002      	b.n	800a6c0 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800a6ba:	69bb      	ldr	r3, [r7, #24]
 800a6bc:	687a      	ldr	r2, [r7, #4]
 800a6be:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800a6c0:	69bb      	ldr	r3, [r7, #24]
 800a6c2:	68fa      	ldr	r2, [r7, #12]
 800a6c4:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800a6c6:	69bb      	ldr	r3, [r7, #24]
 800a6c8:	68ba      	ldr	r2, [r7, #8]
 800a6ca:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800a6cc:	2101      	movs	r1, #1
 800a6ce:	69b8      	ldr	r0, [r7, #24]
 800a6d0:	f7ff fec8 	bl	800a464 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800a6d4:	69bb      	ldr	r3, [r7, #24]
 800a6d6:	78fa      	ldrb	r2, [r7, #3]
 800a6d8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_TRACE_FACILITY */

	#if( configUSE_QUEUE_SETS == 1 )
	{
		pxNewQueue->pxQueueSetContainer = NULL;
 800a6dc:	69bb      	ldr	r3, [r7, #24]
 800a6de:	2200      	movs	r2, #0
 800a6e0:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800a6e2:	bf00      	nop
 800a6e4:	3710      	adds	r7, #16
 800a6e6:	46bd      	mov	sp, r7
 800a6e8:	bd80      	pop	{r7, pc}
	...

0800a6ec <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800a6ec:	b580      	push	{r7, lr}
 800a6ee:	b08e      	sub	sp, #56	; 0x38
 800a6f0:	af00      	add	r7, sp, #0
 800a6f2:	60f8      	str	r0, [r7, #12]
 800a6f4:	60b9      	str	r1, [r7, #8]
 800a6f6:	607a      	str	r2, [r7, #4]
 800a6f8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800a6fa:	2300      	movs	r3, #0
 800a6fc:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800a6fe:	68fb      	ldr	r3, [r7, #12]
 800a700:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800a702:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a704:	2b00      	cmp	r3, #0
 800a706:	d10a      	bne.n	800a71e <xQueueGenericSend+0x32>
	__asm volatile
 800a708:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a70c:	f383 8811 	msr	BASEPRI, r3
 800a710:	f3bf 8f6f 	isb	sy
 800a714:	f3bf 8f4f 	dsb	sy
 800a718:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800a71a:	bf00      	nop
 800a71c:	e7fe      	b.n	800a71c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a71e:	68bb      	ldr	r3, [r7, #8]
 800a720:	2b00      	cmp	r3, #0
 800a722:	d103      	bne.n	800a72c <xQueueGenericSend+0x40>
 800a724:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a726:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a728:	2b00      	cmp	r3, #0
 800a72a:	d101      	bne.n	800a730 <xQueueGenericSend+0x44>
 800a72c:	2301      	movs	r3, #1
 800a72e:	e000      	b.n	800a732 <xQueueGenericSend+0x46>
 800a730:	2300      	movs	r3, #0
 800a732:	2b00      	cmp	r3, #0
 800a734:	d10a      	bne.n	800a74c <xQueueGenericSend+0x60>
	__asm volatile
 800a736:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a73a:	f383 8811 	msr	BASEPRI, r3
 800a73e:	f3bf 8f6f 	isb	sy
 800a742:	f3bf 8f4f 	dsb	sy
 800a746:	627b      	str	r3, [r7, #36]	; 0x24
}
 800a748:	bf00      	nop
 800a74a:	e7fe      	b.n	800a74a <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800a74c:	683b      	ldr	r3, [r7, #0]
 800a74e:	2b02      	cmp	r3, #2
 800a750:	d103      	bne.n	800a75a <xQueueGenericSend+0x6e>
 800a752:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a754:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a756:	2b01      	cmp	r3, #1
 800a758:	d101      	bne.n	800a75e <xQueueGenericSend+0x72>
 800a75a:	2301      	movs	r3, #1
 800a75c:	e000      	b.n	800a760 <xQueueGenericSend+0x74>
 800a75e:	2300      	movs	r3, #0
 800a760:	2b00      	cmp	r3, #0
 800a762:	d10a      	bne.n	800a77a <xQueueGenericSend+0x8e>
	__asm volatile
 800a764:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a768:	f383 8811 	msr	BASEPRI, r3
 800a76c:	f3bf 8f6f 	isb	sy
 800a770:	f3bf 8f4f 	dsb	sy
 800a774:	623b      	str	r3, [r7, #32]
}
 800a776:	bf00      	nop
 800a778:	e7fe      	b.n	800a778 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a77a:	f001 fbf7 	bl	800bf6c <xTaskGetSchedulerState>
 800a77e:	4603      	mov	r3, r0
 800a780:	2b00      	cmp	r3, #0
 800a782:	d102      	bne.n	800a78a <xQueueGenericSend+0x9e>
 800a784:	687b      	ldr	r3, [r7, #4]
 800a786:	2b00      	cmp	r3, #0
 800a788:	d101      	bne.n	800a78e <xQueueGenericSend+0xa2>
 800a78a:	2301      	movs	r3, #1
 800a78c:	e000      	b.n	800a790 <xQueueGenericSend+0xa4>
 800a78e:	2300      	movs	r3, #0
 800a790:	2b00      	cmp	r3, #0
 800a792:	d10a      	bne.n	800a7aa <xQueueGenericSend+0xbe>
	__asm volatile
 800a794:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a798:	f383 8811 	msr	BASEPRI, r3
 800a79c:	f3bf 8f6f 	isb	sy
 800a7a0:	f3bf 8f4f 	dsb	sy
 800a7a4:	61fb      	str	r3, [r7, #28]
}
 800a7a6:	bf00      	nop
 800a7a8:	e7fe      	b.n	800a7a8 <xQueueGenericSend+0xbc>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a7aa:	f002 fa5b 	bl	800cc64 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800a7ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a7b0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a7b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a7b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a7b6:	429a      	cmp	r2, r3
 800a7b8:	d302      	bcc.n	800a7c0 <xQueueGenericSend+0xd4>
 800a7ba:	683b      	ldr	r3, [r7, #0]
 800a7bc:	2b02      	cmp	r3, #2
 800a7be:	d13d      	bne.n	800a83c <xQueueGenericSend+0x150>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800a7c0:	683a      	ldr	r2, [r7, #0]
 800a7c2:	68b9      	ldr	r1, [r7, #8]
 800a7c4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a7c6:	f000 fb6f 	bl	800aea8 <prvCopyDataToQueue>
 800a7ca:	62f8      	str	r0, [r7, #44]	; 0x2c

				#if ( configUSE_QUEUE_SETS == 1 )
				{
					if( pxQueue->pxQueueSetContainer != NULL )
 800a7cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a7ce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a7d0:	2b00      	cmp	r3, #0
 800a7d2:	d00f      	beq.n	800a7f4 <xQueueGenericSend+0x108>
					{
						if( prvNotifyQueueSetContainer( pxQueue, xCopyPosition ) != pdFALSE )
 800a7d4:	6839      	ldr	r1, [r7, #0]
 800a7d6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a7d8:	f000 fd25 	bl	800b226 <prvNotifyQueueSetContainer>
 800a7dc:	4603      	mov	r3, r0
 800a7de:	2b00      	cmp	r3, #0
 800a7e0:	d028      	beq.n	800a834 <xQueueGenericSend+0x148>
						{
							/* The queue is a member of a queue set, and posting
							to the queue set caused a higher priority task to
							unblock. A context switch is required. */
							queueYIELD_IF_USING_PREEMPTION();
 800a7e2:	4b4a      	ldr	r3, [pc, #296]	; (800a90c <xQueueGenericSend+0x220>)
 800a7e4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a7e8:	601a      	str	r2, [r3, #0]
 800a7ea:	f3bf 8f4f 	dsb	sy
 800a7ee:	f3bf 8f6f 	isb	sy
 800a7f2:	e01f      	b.n	800a834 <xQueueGenericSend+0x148>
					}
					else
					{
						/* If there was a task waiting for data to arrive on the
						queue then unblock it now. */
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a7f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a7f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a7f8:	2b00      	cmp	r3, #0
 800a7fa:	d010      	beq.n	800a81e <xQueueGenericSend+0x132>
						{
							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a7fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a7fe:	3324      	adds	r3, #36	; 0x24
 800a800:	4618      	mov	r0, r3
 800a802:	f001 f9eb 	bl	800bbdc <xTaskRemoveFromEventList>
 800a806:	4603      	mov	r3, r0
 800a808:	2b00      	cmp	r3, #0
 800a80a:	d013      	beq.n	800a834 <xQueueGenericSend+0x148>
							{
								/* The unblocked task has a priority higher than
								our own so yield immediately.  Yes it is ok to
								do this from within the critical section - the
								kernel takes care of that. */
								queueYIELD_IF_USING_PREEMPTION();
 800a80c:	4b3f      	ldr	r3, [pc, #252]	; (800a90c <xQueueGenericSend+0x220>)
 800a80e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a812:	601a      	str	r2, [r3, #0]
 800a814:	f3bf 8f4f 	dsb	sy
 800a818:	f3bf 8f6f 	isb	sy
 800a81c:	e00a      	b.n	800a834 <xQueueGenericSend+0x148>
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
						}
						else if( xYieldRequired != pdFALSE )
 800a81e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a820:	2b00      	cmp	r3, #0
 800a822:	d007      	beq.n	800a834 <xQueueGenericSend+0x148>
						{
							/* This path is a special case that will only get
							executed if the task was holding multiple mutexes
							and the mutexes were given back in an order that is
							different to that in which they were taken. */
							queueYIELD_IF_USING_PREEMPTION();
 800a824:	4b39      	ldr	r3, [pc, #228]	; (800a90c <xQueueGenericSend+0x220>)
 800a826:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a82a:	601a      	str	r2, [r3, #0]
 800a82c:	f3bf 8f4f 	dsb	sy
 800a830:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800a834:	f002 fa46 	bl	800ccc4 <vPortExitCritical>
				return pdPASS;
 800a838:	2301      	movs	r3, #1
 800a83a:	e063      	b.n	800a904 <xQueueGenericSend+0x218>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a83c:	687b      	ldr	r3, [r7, #4]
 800a83e:	2b00      	cmp	r3, #0
 800a840:	d103      	bne.n	800a84a <xQueueGenericSend+0x15e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800a842:	f002 fa3f 	bl	800ccc4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800a846:	2300      	movs	r3, #0
 800a848:	e05c      	b.n	800a904 <xQueueGenericSend+0x218>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a84a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a84c:	2b00      	cmp	r3, #0
 800a84e:	d106      	bne.n	800a85e <xQueueGenericSend+0x172>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a850:	f107 0314 	add.w	r3, r7, #20
 800a854:	4618      	mov	r0, r3
 800a856:	f001 fa25 	bl	800bca4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a85a:	2301      	movs	r3, #1
 800a85c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a85e:	f002 fa31 	bl	800ccc4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a862:	f000 ff8d 	bl	800b780 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a866:	f002 f9fd 	bl	800cc64 <vPortEnterCritical>
 800a86a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a86c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a870:	b25b      	sxtb	r3, r3
 800a872:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a876:	d103      	bne.n	800a880 <xQueueGenericSend+0x194>
 800a878:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a87a:	2200      	movs	r2, #0
 800a87c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a880:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a882:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a886:	b25b      	sxtb	r3, r3
 800a888:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a88c:	d103      	bne.n	800a896 <xQueueGenericSend+0x1aa>
 800a88e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a890:	2200      	movs	r2, #0
 800a892:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a896:	f002 fa15 	bl	800ccc4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a89a:	1d3a      	adds	r2, r7, #4
 800a89c:	f107 0314 	add.w	r3, r7, #20
 800a8a0:	4611      	mov	r1, r2
 800a8a2:	4618      	mov	r0, r3
 800a8a4:	f001 fa14 	bl	800bcd0 <xTaskCheckForTimeOut>
 800a8a8:	4603      	mov	r3, r0
 800a8aa:	2b00      	cmp	r3, #0
 800a8ac:	d124      	bne.n	800a8f8 <xQueueGenericSend+0x20c>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800a8ae:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a8b0:	f000 fc00 	bl	800b0b4 <prvIsQueueFull>
 800a8b4:	4603      	mov	r3, r0
 800a8b6:	2b00      	cmp	r3, #0
 800a8b8:	d018      	beq.n	800a8ec <xQueueGenericSend+0x200>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800a8ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a8bc:	3310      	adds	r3, #16
 800a8be:	687a      	ldr	r2, [r7, #4]
 800a8c0:	4611      	mov	r1, r2
 800a8c2:	4618      	mov	r0, r3
 800a8c4:	f001 f93a 	bl	800bb3c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800a8c8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a8ca:	f000 fb7d 	bl	800afc8 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800a8ce:	f000 ff65 	bl	800b79c <xTaskResumeAll>
 800a8d2:	4603      	mov	r3, r0
 800a8d4:	2b00      	cmp	r3, #0
 800a8d6:	f47f af68 	bne.w	800a7aa <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800a8da:	4b0c      	ldr	r3, [pc, #48]	; (800a90c <xQueueGenericSend+0x220>)
 800a8dc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a8e0:	601a      	str	r2, [r3, #0]
 800a8e2:	f3bf 8f4f 	dsb	sy
 800a8e6:	f3bf 8f6f 	isb	sy
 800a8ea:	e75e      	b.n	800a7aa <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800a8ec:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a8ee:	f000 fb6b 	bl	800afc8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a8f2:	f000 ff53 	bl	800b79c <xTaskResumeAll>
 800a8f6:	e758      	b.n	800a7aa <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800a8f8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a8fa:	f000 fb65 	bl	800afc8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a8fe:	f000 ff4d 	bl	800b79c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800a902:	2300      	movs	r3, #0
		}
	}
}
 800a904:	4618      	mov	r0, r3
 800a906:	3738      	adds	r7, #56	; 0x38
 800a908:	46bd      	mov	sp, r7
 800a90a:	bd80      	pop	{r7, pc}
 800a90c:	e000ed04 	.word	0xe000ed04

0800a910 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800a910:	b580      	push	{r7, lr}
 800a912:	b08e      	sub	sp, #56	; 0x38
 800a914:	af00      	add	r7, sp, #0
 800a916:	60f8      	str	r0, [r7, #12]
 800a918:	60b9      	str	r1, [r7, #8]
 800a91a:	607a      	str	r2, [r7, #4]
 800a91c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800a91e:	68fb      	ldr	r3, [r7, #12]
 800a920:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800a922:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a924:	2b00      	cmp	r3, #0
 800a926:	d10a      	bne.n	800a93e <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800a928:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a92c:	f383 8811 	msr	BASEPRI, r3
 800a930:	f3bf 8f6f 	isb	sy
 800a934:	f3bf 8f4f 	dsb	sy
 800a938:	627b      	str	r3, [r7, #36]	; 0x24
}
 800a93a:	bf00      	nop
 800a93c:	e7fe      	b.n	800a93c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a93e:	68bb      	ldr	r3, [r7, #8]
 800a940:	2b00      	cmp	r3, #0
 800a942:	d103      	bne.n	800a94c <xQueueGenericSendFromISR+0x3c>
 800a944:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a946:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a948:	2b00      	cmp	r3, #0
 800a94a:	d101      	bne.n	800a950 <xQueueGenericSendFromISR+0x40>
 800a94c:	2301      	movs	r3, #1
 800a94e:	e000      	b.n	800a952 <xQueueGenericSendFromISR+0x42>
 800a950:	2300      	movs	r3, #0
 800a952:	2b00      	cmp	r3, #0
 800a954:	d10a      	bne.n	800a96c <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800a956:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a95a:	f383 8811 	msr	BASEPRI, r3
 800a95e:	f3bf 8f6f 	isb	sy
 800a962:	f3bf 8f4f 	dsb	sy
 800a966:	623b      	str	r3, [r7, #32]
}
 800a968:	bf00      	nop
 800a96a:	e7fe      	b.n	800a96a <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800a96c:	683b      	ldr	r3, [r7, #0]
 800a96e:	2b02      	cmp	r3, #2
 800a970:	d103      	bne.n	800a97a <xQueueGenericSendFromISR+0x6a>
 800a972:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a974:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a976:	2b01      	cmp	r3, #1
 800a978:	d101      	bne.n	800a97e <xQueueGenericSendFromISR+0x6e>
 800a97a:	2301      	movs	r3, #1
 800a97c:	e000      	b.n	800a980 <xQueueGenericSendFromISR+0x70>
 800a97e:	2300      	movs	r3, #0
 800a980:	2b00      	cmp	r3, #0
 800a982:	d10a      	bne.n	800a99a <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800a984:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a988:	f383 8811 	msr	BASEPRI, r3
 800a98c:	f3bf 8f6f 	isb	sy
 800a990:	f3bf 8f4f 	dsb	sy
 800a994:	61fb      	str	r3, [r7, #28]
}
 800a996:	bf00      	nop
 800a998:	e7fe      	b.n	800a998 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a99a:	f002 fa45 	bl	800ce28 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800a99e:	f3ef 8211 	mrs	r2, BASEPRI
 800a9a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a9a6:	f383 8811 	msr	BASEPRI, r3
 800a9aa:	f3bf 8f6f 	isb	sy
 800a9ae:	f3bf 8f4f 	dsb	sy
 800a9b2:	61ba      	str	r2, [r7, #24]
 800a9b4:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800a9b6:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800a9b8:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800a9ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a9bc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a9be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a9c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a9c2:	429a      	cmp	r2, r3
 800a9c4:	d302      	bcc.n	800a9cc <xQueueGenericSendFromISR+0xbc>
 800a9c6:	683b      	ldr	r3, [r7, #0]
 800a9c8:	2b02      	cmp	r3, #2
 800a9ca:	d13e      	bne.n	800aa4a <xQueueGenericSendFromISR+0x13a>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800a9cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a9ce:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a9d2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800a9d6:	683a      	ldr	r2, [r7, #0]
 800a9d8:	68b9      	ldr	r1, [r7, #8]
 800a9da:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a9dc:	f000 fa64 	bl	800aea8 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800a9e0:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800a9e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a9e8:	d124      	bne.n	800aa34 <xQueueGenericSendFromISR+0x124>
			{
				#if ( configUSE_QUEUE_SETS == 1 )
				{
					if( pxQueue->pxQueueSetContainer != NULL )
 800a9ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a9ec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a9ee:	2b00      	cmp	r3, #0
 800a9f0:	d00d      	beq.n	800aa0e <xQueueGenericSendFromISR+0xfe>
					{
						if( prvNotifyQueueSetContainer( pxQueue, xCopyPosition ) != pdFALSE )
 800a9f2:	6839      	ldr	r1, [r7, #0]
 800a9f4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a9f6:	f000 fc16 	bl	800b226 <prvNotifyQueueSetContainer>
 800a9fa:	4603      	mov	r3, r0
 800a9fc:	2b00      	cmp	r3, #0
 800a9fe:	d021      	beq.n	800aa44 <xQueueGenericSendFromISR+0x134>
						{
							/* The queue is a member of a queue set, and posting
							to the queue set caused a higher priority task to
							unblock.  A context switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800aa00:	687b      	ldr	r3, [r7, #4]
 800aa02:	2b00      	cmp	r3, #0
 800aa04:	d01e      	beq.n	800aa44 <xQueueGenericSendFromISR+0x134>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800aa06:	687b      	ldr	r3, [r7, #4]
 800aa08:	2201      	movs	r2, #1
 800aa0a:	601a      	str	r2, [r3, #0]
 800aa0c:	e01a      	b.n	800aa44 <xQueueGenericSendFromISR+0x134>
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else
					{
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800aa0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa12:	2b00      	cmp	r3, #0
 800aa14:	d016      	beq.n	800aa44 <xQueueGenericSendFromISR+0x134>
						{
							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800aa16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa18:	3324      	adds	r3, #36	; 0x24
 800aa1a:	4618      	mov	r0, r3
 800aa1c:	f001 f8de 	bl	800bbdc <xTaskRemoveFromEventList>
 800aa20:	4603      	mov	r3, r0
 800aa22:	2b00      	cmp	r3, #0
 800aa24:	d00e      	beq.n	800aa44 <xQueueGenericSendFromISR+0x134>
							{
								/* The task waiting has a higher priority so
								record that a context switch is required. */
								if( pxHigherPriorityTaskWoken != NULL )
 800aa26:	687b      	ldr	r3, [r7, #4]
 800aa28:	2b00      	cmp	r3, #0
 800aa2a:	d00b      	beq.n	800aa44 <xQueueGenericSendFromISR+0x134>
								{
									*pxHigherPriorityTaskWoken = pdTRUE;
 800aa2c:	687b      	ldr	r3, [r7, #4]
 800aa2e:	2201      	movs	r2, #1
 800aa30:	601a      	str	r2, [r3, #0]
 800aa32:	e007      	b.n	800aa44 <xQueueGenericSendFromISR+0x134>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800aa34:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800aa38:	3301      	adds	r3, #1
 800aa3a:	b2db      	uxtb	r3, r3
 800aa3c:	b25a      	sxtb	r2, r3
 800aa3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa40:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800aa44:	2301      	movs	r3, #1
 800aa46:	637b      	str	r3, [r7, #52]	; 0x34
		{
 800aa48:	e001      	b.n	800aa4e <xQueueGenericSendFromISR+0x13e>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800aa4a:	2300      	movs	r3, #0
 800aa4c:	637b      	str	r3, [r7, #52]	; 0x34
 800aa4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aa50:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800aa52:	693b      	ldr	r3, [r7, #16]
 800aa54:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800aa58:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800aa5a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800aa5c:	4618      	mov	r0, r3
 800aa5e:	3738      	adds	r7, #56	; 0x38
 800aa60:	46bd      	mov	sp, r7
 800aa62:	bd80      	pop	{r7, pc}

0800aa64 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800aa64:	b580      	push	{r7, lr}
 800aa66:	b08c      	sub	sp, #48	; 0x30
 800aa68:	af00      	add	r7, sp, #0
 800aa6a:	60f8      	str	r0, [r7, #12]
 800aa6c:	60b9      	str	r1, [r7, #8]
 800aa6e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800aa70:	2300      	movs	r3, #0
 800aa72:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800aa74:	68fb      	ldr	r3, [r7, #12]
 800aa76:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800aa78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa7a:	2b00      	cmp	r3, #0
 800aa7c:	d10a      	bne.n	800aa94 <xQueueReceive+0x30>
	__asm volatile
 800aa7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa82:	f383 8811 	msr	BASEPRI, r3
 800aa86:	f3bf 8f6f 	isb	sy
 800aa8a:	f3bf 8f4f 	dsb	sy
 800aa8e:	623b      	str	r3, [r7, #32]
}
 800aa90:	bf00      	nop
 800aa92:	e7fe      	b.n	800aa92 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800aa94:	68bb      	ldr	r3, [r7, #8]
 800aa96:	2b00      	cmp	r3, #0
 800aa98:	d103      	bne.n	800aaa2 <xQueueReceive+0x3e>
 800aa9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aa9e:	2b00      	cmp	r3, #0
 800aaa0:	d101      	bne.n	800aaa6 <xQueueReceive+0x42>
 800aaa2:	2301      	movs	r3, #1
 800aaa4:	e000      	b.n	800aaa8 <xQueueReceive+0x44>
 800aaa6:	2300      	movs	r3, #0
 800aaa8:	2b00      	cmp	r3, #0
 800aaaa:	d10a      	bne.n	800aac2 <xQueueReceive+0x5e>
	__asm volatile
 800aaac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aab0:	f383 8811 	msr	BASEPRI, r3
 800aab4:	f3bf 8f6f 	isb	sy
 800aab8:	f3bf 8f4f 	dsb	sy
 800aabc:	61fb      	str	r3, [r7, #28]
}
 800aabe:	bf00      	nop
 800aac0:	e7fe      	b.n	800aac0 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800aac2:	f001 fa53 	bl	800bf6c <xTaskGetSchedulerState>
 800aac6:	4603      	mov	r3, r0
 800aac8:	2b00      	cmp	r3, #0
 800aaca:	d102      	bne.n	800aad2 <xQueueReceive+0x6e>
 800aacc:	687b      	ldr	r3, [r7, #4]
 800aace:	2b00      	cmp	r3, #0
 800aad0:	d101      	bne.n	800aad6 <xQueueReceive+0x72>
 800aad2:	2301      	movs	r3, #1
 800aad4:	e000      	b.n	800aad8 <xQueueReceive+0x74>
 800aad6:	2300      	movs	r3, #0
 800aad8:	2b00      	cmp	r3, #0
 800aada:	d10a      	bne.n	800aaf2 <xQueueReceive+0x8e>
	__asm volatile
 800aadc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aae0:	f383 8811 	msr	BASEPRI, r3
 800aae4:	f3bf 8f6f 	isb	sy
 800aae8:	f3bf 8f4f 	dsb	sy
 800aaec:	61bb      	str	r3, [r7, #24]
}
 800aaee:	bf00      	nop
 800aaf0:	e7fe      	b.n	800aaf0 <xQueueReceive+0x8c>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 800aaf2:	f002 f8b7 	bl	800cc64 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800aaf6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aaf8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aafa:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800aafc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aafe:	2b00      	cmp	r3, #0
 800ab00:	d01f      	beq.n	800ab42 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800ab02:	68b9      	ldr	r1, [r7, #8]
 800ab04:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ab06:	f000 fa39 	bl	800af7c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800ab0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab0c:	1e5a      	subs	r2, r3, #1
 800ab0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab10:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ab12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab14:	691b      	ldr	r3, [r3, #16]
 800ab16:	2b00      	cmp	r3, #0
 800ab18:	d00f      	beq.n	800ab3a <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ab1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab1c:	3310      	adds	r3, #16
 800ab1e:	4618      	mov	r0, r3
 800ab20:	f001 f85c 	bl	800bbdc <xTaskRemoveFromEventList>
 800ab24:	4603      	mov	r3, r0
 800ab26:	2b00      	cmp	r3, #0
 800ab28:	d007      	beq.n	800ab3a <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800ab2a:	4b3d      	ldr	r3, [pc, #244]	; (800ac20 <xQueueReceive+0x1bc>)
 800ab2c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ab30:	601a      	str	r2, [r3, #0]
 800ab32:	f3bf 8f4f 	dsb	sy
 800ab36:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800ab3a:	f002 f8c3 	bl	800ccc4 <vPortExitCritical>
				return pdPASS;
 800ab3e:	2301      	movs	r3, #1
 800ab40:	e069      	b.n	800ac16 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800ab42:	687b      	ldr	r3, [r7, #4]
 800ab44:	2b00      	cmp	r3, #0
 800ab46:	d103      	bne.n	800ab50 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800ab48:	f002 f8bc 	bl	800ccc4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800ab4c:	2300      	movs	r3, #0
 800ab4e:	e062      	b.n	800ac16 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800ab50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab52:	2b00      	cmp	r3, #0
 800ab54:	d106      	bne.n	800ab64 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800ab56:	f107 0310 	add.w	r3, r7, #16
 800ab5a:	4618      	mov	r0, r3
 800ab5c:	f001 f8a2 	bl	800bca4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800ab60:	2301      	movs	r3, #1
 800ab62:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800ab64:	f002 f8ae 	bl	800ccc4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800ab68:	f000 fe0a 	bl	800b780 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800ab6c:	f002 f87a 	bl	800cc64 <vPortEnterCritical>
 800ab70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab72:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ab76:	b25b      	sxtb	r3, r3
 800ab78:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ab7c:	d103      	bne.n	800ab86 <xQueueReceive+0x122>
 800ab7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab80:	2200      	movs	r2, #0
 800ab82:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ab86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab88:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ab8c:	b25b      	sxtb	r3, r3
 800ab8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ab92:	d103      	bne.n	800ab9c <xQueueReceive+0x138>
 800ab94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab96:	2200      	movs	r2, #0
 800ab98:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800ab9c:	f002 f892 	bl	800ccc4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800aba0:	1d3a      	adds	r2, r7, #4
 800aba2:	f107 0310 	add.w	r3, r7, #16
 800aba6:	4611      	mov	r1, r2
 800aba8:	4618      	mov	r0, r3
 800abaa:	f001 f891 	bl	800bcd0 <xTaskCheckForTimeOut>
 800abae:	4603      	mov	r3, r0
 800abb0:	2b00      	cmp	r3, #0
 800abb2:	d123      	bne.n	800abfc <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800abb4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800abb6:	f000 fa67 	bl	800b088 <prvIsQueueEmpty>
 800abba:	4603      	mov	r3, r0
 800abbc:	2b00      	cmp	r3, #0
 800abbe:	d017      	beq.n	800abf0 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800abc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800abc2:	3324      	adds	r3, #36	; 0x24
 800abc4:	687a      	ldr	r2, [r7, #4]
 800abc6:	4611      	mov	r1, r2
 800abc8:	4618      	mov	r0, r3
 800abca:	f000 ffb7 	bl	800bb3c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800abce:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800abd0:	f000 f9fa 	bl	800afc8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800abd4:	f000 fde2 	bl	800b79c <xTaskResumeAll>
 800abd8:	4603      	mov	r3, r0
 800abda:	2b00      	cmp	r3, #0
 800abdc:	d189      	bne.n	800aaf2 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800abde:	4b10      	ldr	r3, [pc, #64]	; (800ac20 <xQueueReceive+0x1bc>)
 800abe0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800abe4:	601a      	str	r2, [r3, #0]
 800abe6:	f3bf 8f4f 	dsb	sy
 800abea:	f3bf 8f6f 	isb	sy
 800abee:	e780      	b.n	800aaf2 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800abf0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800abf2:	f000 f9e9 	bl	800afc8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800abf6:	f000 fdd1 	bl	800b79c <xTaskResumeAll>
 800abfa:	e77a      	b.n	800aaf2 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800abfc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800abfe:	f000 f9e3 	bl	800afc8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800ac02:	f000 fdcb 	bl	800b79c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800ac06:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ac08:	f000 fa3e 	bl	800b088 <prvIsQueueEmpty>
 800ac0c:	4603      	mov	r3, r0
 800ac0e:	2b00      	cmp	r3, #0
 800ac10:	f43f af6f 	beq.w	800aaf2 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800ac14:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 800ac16:	4618      	mov	r0, r3
 800ac18:	3730      	adds	r7, #48	; 0x30
 800ac1a:	46bd      	mov	sp, r7
 800ac1c:	bd80      	pop	{r7, pc}
 800ac1e:	bf00      	nop
 800ac20:	e000ed04 	.word	0xe000ed04

0800ac24 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800ac24:	b580      	push	{r7, lr}
 800ac26:	b08e      	sub	sp, #56	; 0x38
 800ac28:	af00      	add	r7, sp, #0
 800ac2a:	6078      	str	r0, [r7, #4]
 800ac2c:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800ac2e:	2300      	movs	r3, #0
 800ac30:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800ac32:	687b      	ldr	r3, [r7, #4]
 800ac34:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800ac36:	2300      	movs	r3, #0
 800ac38:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800ac3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ac3c:	2b00      	cmp	r3, #0
 800ac3e:	d10a      	bne.n	800ac56 <xQueueSemaphoreTake+0x32>
	__asm volatile
 800ac40:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac44:	f383 8811 	msr	BASEPRI, r3
 800ac48:	f3bf 8f6f 	isb	sy
 800ac4c:	f3bf 8f4f 	dsb	sy
 800ac50:	623b      	str	r3, [r7, #32]
}
 800ac52:	bf00      	nop
 800ac54:	e7fe      	b.n	800ac54 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800ac56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ac58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ac5a:	2b00      	cmp	r3, #0
 800ac5c:	d00a      	beq.n	800ac74 <xQueueSemaphoreTake+0x50>
	__asm volatile
 800ac5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac62:	f383 8811 	msr	BASEPRI, r3
 800ac66:	f3bf 8f6f 	isb	sy
 800ac6a:	f3bf 8f4f 	dsb	sy
 800ac6e:	61fb      	str	r3, [r7, #28]
}
 800ac70:	bf00      	nop
 800ac72:	e7fe      	b.n	800ac72 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800ac74:	f001 f97a 	bl	800bf6c <xTaskGetSchedulerState>
 800ac78:	4603      	mov	r3, r0
 800ac7a:	2b00      	cmp	r3, #0
 800ac7c:	d102      	bne.n	800ac84 <xQueueSemaphoreTake+0x60>
 800ac7e:	683b      	ldr	r3, [r7, #0]
 800ac80:	2b00      	cmp	r3, #0
 800ac82:	d101      	bne.n	800ac88 <xQueueSemaphoreTake+0x64>
 800ac84:	2301      	movs	r3, #1
 800ac86:	e000      	b.n	800ac8a <xQueueSemaphoreTake+0x66>
 800ac88:	2300      	movs	r3, #0
 800ac8a:	2b00      	cmp	r3, #0
 800ac8c:	d10a      	bne.n	800aca4 <xQueueSemaphoreTake+0x80>
	__asm volatile
 800ac8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac92:	f383 8811 	msr	BASEPRI, r3
 800ac96:	f3bf 8f6f 	isb	sy
 800ac9a:	f3bf 8f4f 	dsb	sy
 800ac9e:	61bb      	str	r3, [r7, #24]
}
 800aca0:	bf00      	nop
 800aca2:	e7fe      	b.n	800aca2 <xQueueSemaphoreTake+0x7e>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 800aca4:	f001 ffde 	bl	800cc64 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800aca8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800acaa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800acac:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800acae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800acb0:	2b00      	cmp	r3, #0
 800acb2:	d024      	beq.n	800acfe <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800acb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800acb6:	1e5a      	subs	r2, r3, #1
 800acb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800acba:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800acbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800acbe:	681b      	ldr	r3, [r3, #0]
 800acc0:	2b00      	cmp	r3, #0
 800acc2:	d104      	bne.n	800acce <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 800acc4:	f001 fad2 	bl	800c26c <pvTaskIncrementMutexHeldCount>
 800acc8:	4602      	mov	r2, r0
 800acca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800accc:	605a      	str	r2, [r3, #4]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800acce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800acd0:	691b      	ldr	r3, [r3, #16]
 800acd2:	2b00      	cmp	r3, #0
 800acd4:	d00f      	beq.n	800acf6 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800acd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800acd8:	3310      	adds	r3, #16
 800acda:	4618      	mov	r0, r3
 800acdc:	f000 ff7e 	bl	800bbdc <xTaskRemoveFromEventList>
 800ace0:	4603      	mov	r3, r0
 800ace2:	2b00      	cmp	r3, #0
 800ace4:	d007      	beq.n	800acf6 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800ace6:	4b54      	ldr	r3, [pc, #336]	; (800ae38 <xQueueSemaphoreTake+0x214>)
 800ace8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800acec:	601a      	str	r2, [r3, #0]
 800acee:	f3bf 8f4f 	dsb	sy
 800acf2:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800acf6:	f001 ffe5 	bl	800ccc4 <vPortExitCritical>
				return pdPASS;
 800acfa:	2301      	movs	r3, #1
 800acfc:	e097      	b.n	800ae2e <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800acfe:	683b      	ldr	r3, [r7, #0]
 800ad00:	2b00      	cmp	r3, #0
 800ad02:	d111      	bne.n	800ad28 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800ad04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad06:	2b00      	cmp	r3, #0
 800ad08:	d00a      	beq.n	800ad20 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 800ad0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad0e:	f383 8811 	msr	BASEPRI, r3
 800ad12:	f3bf 8f6f 	isb	sy
 800ad16:	f3bf 8f4f 	dsb	sy
 800ad1a:	617b      	str	r3, [r7, #20]
}
 800ad1c:	bf00      	nop
 800ad1e:	e7fe      	b.n	800ad1e <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800ad20:	f001 ffd0 	bl	800ccc4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800ad24:	2300      	movs	r3, #0
 800ad26:	e082      	b.n	800ae2e <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 800ad28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ad2a:	2b00      	cmp	r3, #0
 800ad2c:	d106      	bne.n	800ad3c <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800ad2e:	f107 030c 	add.w	r3, r7, #12
 800ad32:	4618      	mov	r0, r3
 800ad34:	f000 ffb6 	bl	800bca4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800ad38:	2301      	movs	r3, #1
 800ad3a:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800ad3c:	f001 ffc2 	bl	800ccc4 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800ad40:	f000 fd1e 	bl	800b780 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800ad44:	f001 ff8e 	bl	800cc64 <vPortEnterCritical>
 800ad48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad4a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ad4e:	b25b      	sxtb	r3, r3
 800ad50:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ad54:	d103      	bne.n	800ad5e <xQueueSemaphoreTake+0x13a>
 800ad56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad58:	2200      	movs	r2, #0
 800ad5a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ad5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad60:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ad64:	b25b      	sxtb	r3, r3
 800ad66:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ad6a:	d103      	bne.n	800ad74 <xQueueSemaphoreTake+0x150>
 800ad6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad6e:	2200      	movs	r2, #0
 800ad70:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800ad74:	f001 ffa6 	bl	800ccc4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800ad78:	463a      	mov	r2, r7
 800ad7a:	f107 030c 	add.w	r3, r7, #12
 800ad7e:	4611      	mov	r1, r2
 800ad80:	4618      	mov	r0, r3
 800ad82:	f000 ffa5 	bl	800bcd0 <xTaskCheckForTimeOut>
 800ad86:	4603      	mov	r3, r0
 800ad88:	2b00      	cmp	r3, #0
 800ad8a:	d132      	bne.n	800adf2 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800ad8c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ad8e:	f000 f97b 	bl	800b088 <prvIsQueueEmpty>
 800ad92:	4603      	mov	r3, r0
 800ad94:	2b00      	cmp	r3, #0
 800ad96:	d026      	beq.n	800ade6 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800ad98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad9a:	681b      	ldr	r3, [r3, #0]
 800ad9c:	2b00      	cmp	r3, #0
 800ad9e:	d109      	bne.n	800adb4 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 800ada0:	f001 ff60 	bl	800cc64 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 800ada4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ada6:	685b      	ldr	r3, [r3, #4]
 800ada8:	4618      	mov	r0, r3
 800adaa:	f001 f8fd 	bl	800bfa8 <xTaskPriorityInherit>
 800adae:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800adb0:	f001 ff88 	bl	800ccc4 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800adb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800adb6:	3324      	adds	r3, #36	; 0x24
 800adb8:	683a      	ldr	r2, [r7, #0]
 800adba:	4611      	mov	r1, r2
 800adbc:	4618      	mov	r0, r3
 800adbe:	f000 febd 	bl	800bb3c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800adc2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800adc4:	f000 f900 	bl	800afc8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800adc8:	f000 fce8 	bl	800b79c <xTaskResumeAll>
 800adcc:	4603      	mov	r3, r0
 800adce:	2b00      	cmp	r3, #0
 800add0:	f47f af68 	bne.w	800aca4 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 800add4:	4b18      	ldr	r3, [pc, #96]	; (800ae38 <xQueueSemaphoreTake+0x214>)
 800add6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800adda:	601a      	str	r2, [r3, #0]
 800addc:	f3bf 8f4f 	dsb	sy
 800ade0:	f3bf 8f6f 	isb	sy
 800ade4:	e75e      	b.n	800aca4 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800ade6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ade8:	f000 f8ee 	bl	800afc8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800adec:	f000 fcd6 	bl	800b79c <xTaskResumeAll>
 800adf0:	e758      	b.n	800aca4 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800adf2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800adf4:	f000 f8e8 	bl	800afc8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800adf8:	f000 fcd0 	bl	800b79c <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800adfc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800adfe:	f000 f943 	bl	800b088 <prvIsQueueEmpty>
 800ae02:	4603      	mov	r3, r0
 800ae04:	2b00      	cmp	r3, #0
 800ae06:	f43f af4d 	beq.w	800aca4 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800ae0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae0c:	2b00      	cmp	r3, #0
 800ae0e:	d00d      	beq.n	800ae2c <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 800ae10:	f001 ff28 	bl	800cc64 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800ae14:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ae16:	f000 f82f 	bl	800ae78 <prvGetDisinheritPriorityAfterTimeout>
 800ae1a:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
 800ae1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae1e:	685b      	ldr	r3, [r3, #4]
 800ae20:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800ae22:	4618      	mov	r0, r3
 800ae24:	f001 f99c 	bl	800c160 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800ae28:	f001 ff4c 	bl	800ccc4 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800ae2c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 800ae2e:	4618      	mov	r0, r3
 800ae30:	3738      	adds	r7, #56	; 0x38
 800ae32:	46bd      	mov	sp, r7
 800ae34:	bd80      	pop	{r7, pc}
 800ae36:	bf00      	nop
 800ae38:	e000ed04 	.word	0xe000ed04

0800ae3c <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 800ae3c:	b580      	push	{r7, lr}
 800ae3e:	b084      	sub	sp, #16
 800ae40:	af00      	add	r7, sp, #0
 800ae42:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 800ae44:	687b      	ldr	r3, [r7, #4]
 800ae46:	2b00      	cmp	r3, #0
 800ae48:	d10a      	bne.n	800ae60 <uxQueueMessagesWaiting+0x24>
	__asm volatile
 800ae4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae4e:	f383 8811 	msr	BASEPRI, r3
 800ae52:	f3bf 8f6f 	isb	sy
 800ae56:	f3bf 8f4f 	dsb	sy
 800ae5a:	60bb      	str	r3, [r7, #8]
}
 800ae5c:	bf00      	nop
 800ae5e:	e7fe      	b.n	800ae5e <uxQueueMessagesWaiting+0x22>

	taskENTER_CRITICAL();
 800ae60:	f001 ff00 	bl	800cc64 <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 800ae64:	687b      	ldr	r3, [r7, #4]
 800ae66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ae68:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 800ae6a:	f001 ff2b 	bl	800ccc4 <vPortExitCritical>

	return uxReturn;
 800ae6e:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 800ae70:	4618      	mov	r0, r3
 800ae72:	3710      	adds	r7, #16
 800ae74:	46bd      	mov	sp, r7
 800ae76:	bd80      	pop	{r7, pc}

0800ae78 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800ae78:	b480      	push	{r7}
 800ae7a:	b085      	sub	sp, #20
 800ae7c:	af00      	add	r7, sp, #0
 800ae7e:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
 800ae80:	687b      	ldr	r3, [r7, #4]
 800ae82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae84:	2b00      	cmp	r3, #0
 800ae86:	d006      	beq.n	800ae96 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800ae88:	687b      	ldr	r3, [r7, #4]
 800ae8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ae8c:	681b      	ldr	r3, [r3, #0]
 800ae8e:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 800ae92:	60fb      	str	r3, [r7, #12]
 800ae94:	e001      	b.n	800ae9a <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800ae96:	2300      	movs	r3, #0
 800ae98:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800ae9a:	68fb      	ldr	r3, [r7, #12]
	}
 800ae9c:	4618      	mov	r0, r3
 800ae9e:	3714      	adds	r7, #20
 800aea0:	46bd      	mov	sp, r7
 800aea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aea6:	4770      	bx	lr

0800aea8 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800aea8:	b580      	push	{r7, lr}
 800aeaa:	b086      	sub	sp, #24
 800aeac:	af00      	add	r7, sp, #0
 800aeae:	60f8      	str	r0, [r7, #12]
 800aeb0:	60b9      	str	r1, [r7, #8]
 800aeb2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800aeb4:	2300      	movs	r3, #0
 800aeb6:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800aeb8:	68fb      	ldr	r3, [r7, #12]
 800aeba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aebc:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800aebe:	68fb      	ldr	r3, [r7, #12]
 800aec0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aec2:	2b00      	cmp	r3, #0
 800aec4:	d10d      	bne.n	800aee2 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800aec6:	68fb      	ldr	r3, [r7, #12]
 800aec8:	681b      	ldr	r3, [r3, #0]
 800aeca:	2b00      	cmp	r3, #0
 800aecc:	d14d      	bne.n	800af6a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 800aece:	68fb      	ldr	r3, [r7, #12]
 800aed0:	685b      	ldr	r3, [r3, #4]
 800aed2:	4618      	mov	r0, r3
 800aed4:	f001 f8d6 	bl	800c084 <xTaskPriorityDisinherit>
 800aed8:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 800aeda:	68fb      	ldr	r3, [r7, #12]
 800aedc:	2200      	movs	r2, #0
 800aede:	605a      	str	r2, [r3, #4]
 800aee0:	e043      	b.n	800af6a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800aee2:	687b      	ldr	r3, [r7, #4]
 800aee4:	2b00      	cmp	r3, #0
 800aee6:	d119      	bne.n	800af1c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 800aee8:	68fb      	ldr	r3, [r7, #12]
 800aeea:	6898      	ldr	r0, [r3, #8]
 800aeec:	68fb      	ldr	r3, [r7, #12]
 800aeee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aef0:	461a      	mov	r2, r3
 800aef2:	68b9      	ldr	r1, [r7, #8]
 800aef4:	f002 fa4c 	bl	800d390 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 800aef8:	68fb      	ldr	r3, [r7, #12]
 800aefa:	689a      	ldr	r2, [r3, #8]
 800aefc:	68fb      	ldr	r3, [r7, #12]
 800aefe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800af00:	441a      	add	r2, r3
 800af02:	68fb      	ldr	r3, [r7, #12]
 800af04:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800af06:	68fb      	ldr	r3, [r7, #12]
 800af08:	689a      	ldr	r2, [r3, #8]
 800af0a:	68fb      	ldr	r3, [r7, #12]
 800af0c:	685b      	ldr	r3, [r3, #4]
 800af0e:	429a      	cmp	r2, r3
 800af10:	d32b      	bcc.n	800af6a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800af12:	68fb      	ldr	r3, [r7, #12]
 800af14:	681a      	ldr	r2, [r3, #0]
 800af16:	68fb      	ldr	r3, [r7, #12]
 800af18:	609a      	str	r2, [r3, #8]
 800af1a:	e026      	b.n	800af6a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800af1c:	68fb      	ldr	r3, [r7, #12]
 800af1e:	68d8      	ldr	r0, [r3, #12]
 800af20:	68fb      	ldr	r3, [r7, #12]
 800af22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800af24:	461a      	mov	r2, r3
 800af26:	68b9      	ldr	r1, [r7, #8]
 800af28:	f002 fa32 	bl	800d390 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 800af2c:	68fb      	ldr	r3, [r7, #12]
 800af2e:	68da      	ldr	r2, [r3, #12]
 800af30:	68fb      	ldr	r3, [r7, #12]
 800af32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800af34:	425b      	negs	r3, r3
 800af36:	441a      	add	r2, r3
 800af38:	68fb      	ldr	r3, [r7, #12]
 800af3a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800af3c:	68fb      	ldr	r3, [r7, #12]
 800af3e:	68da      	ldr	r2, [r3, #12]
 800af40:	68fb      	ldr	r3, [r7, #12]
 800af42:	681b      	ldr	r3, [r3, #0]
 800af44:	429a      	cmp	r2, r3
 800af46:	d207      	bcs.n	800af58 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 800af48:	68fb      	ldr	r3, [r7, #12]
 800af4a:	685a      	ldr	r2, [r3, #4]
 800af4c:	68fb      	ldr	r3, [r7, #12]
 800af4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800af50:	425b      	negs	r3, r3
 800af52:	441a      	add	r2, r3
 800af54:	68fb      	ldr	r3, [r7, #12]
 800af56:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800af58:	687b      	ldr	r3, [r7, #4]
 800af5a:	2b02      	cmp	r3, #2
 800af5c:	d105      	bne.n	800af6a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800af5e:	693b      	ldr	r3, [r7, #16]
 800af60:	2b00      	cmp	r3, #0
 800af62:	d002      	beq.n	800af6a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800af64:	693b      	ldr	r3, [r7, #16]
 800af66:	3b01      	subs	r3, #1
 800af68:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800af6a:	693b      	ldr	r3, [r7, #16]
 800af6c:	1c5a      	adds	r2, r3, #1
 800af6e:	68fb      	ldr	r3, [r7, #12]
 800af70:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800af72:	697b      	ldr	r3, [r7, #20]
}
 800af74:	4618      	mov	r0, r3
 800af76:	3718      	adds	r7, #24
 800af78:	46bd      	mov	sp, r7
 800af7a:	bd80      	pop	{r7, pc}

0800af7c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800af7c:	b580      	push	{r7, lr}
 800af7e:	b082      	sub	sp, #8
 800af80:	af00      	add	r7, sp, #0
 800af82:	6078      	str	r0, [r7, #4]
 800af84:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800af86:	687b      	ldr	r3, [r7, #4]
 800af88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800af8a:	2b00      	cmp	r3, #0
 800af8c:	d018      	beq.n	800afc0 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 800af8e:	687b      	ldr	r3, [r7, #4]
 800af90:	68da      	ldr	r2, [r3, #12]
 800af92:	687b      	ldr	r3, [r7, #4]
 800af94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800af96:	441a      	add	r2, r3
 800af98:	687b      	ldr	r3, [r7, #4]
 800af9a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800af9c:	687b      	ldr	r3, [r7, #4]
 800af9e:	68da      	ldr	r2, [r3, #12]
 800afa0:	687b      	ldr	r3, [r7, #4]
 800afa2:	685b      	ldr	r3, [r3, #4]
 800afa4:	429a      	cmp	r2, r3
 800afa6:	d303      	bcc.n	800afb0 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 800afa8:	687b      	ldr	r3, [r7, #4]
 800afaa:	681a      	ldr	r2, [r3, #0]
 800afac:	687b      	ldr	r3, [r7, #4]
 800afae:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 800afb0:	687b      	ldr	r3, [r7, #4]
 800afb2:	68d9      	ldr	r1, [r3, #12]
 800afb4:	687b      	ldr	r3, [r7, #4]
 800afb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800afb8:	461a      	mov	r2, r3
 800afba:	6838      	ldr	r0, [r7, #0]
 800afbc:	f002 f9e8 	bl	800d390 <memcpy>
	}
}
 800afc0:	bf00      	nop
 800afc2:	3708      	adds	r7, #8
 800afc4:	46bd      	mov	sp, r7
 800afc6:	bd80      	pop	{r7, pc}

0800afc8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800afc8:	b580      	push	{r7, lr}
 800afca:	b084      	sub	sp, #16
 800afcc:	af00      	add	r7, sp, #0
 800afce:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800afd0:	f001 fe48 	bl	800cc64 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800afd4:	687b      	ldr	r3, [r7, #4]
 800afd6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800afda:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800afdc:	e01f      	b.n	800b01e <prvUnlockQueue+0x56>
		{
			/* Data was posted while the queue was locked.  Are any tasks
			blocked waiting for data to become available? */
			#if ( configUSE_QUEUE_SETS == 1 )
			{
				if( pxQueue->pxQueueSetContainer != NULL )
 800afde:	687b      	ldr	r3, [r7, #4]
 800afe0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800afe2:	2b00      	cmp	r3, #0
 800afe4:	d009      	beq.n	800affa <prvUnlockQueue+0x32>
				{
					if( prvNotifyQueueSetContainer( pxQueue, queueSEND_TO_BACK ) != pdFALSE )
 800afe6:	2100      	movs	r1, #0
 800afe8:	6878      	ldr	r0, [r7, #4]
 800afea:	f000 f91c 	bl	800b226 <prvNotifyQueueSetContainer>
 800afee:	4603      	mov	r3, r0
 800aff0:	2b00      	cmp	r3, #0
 800aff2:	d010      	beq.n	800b016 <prvUnlockQueue+0x4e>
					{
						/* The queue is a member of a queue set, and posting to
						the queue set caused a higher priority task to unblock.
						A context switch is required. */
						vTaskMissedYield();
 800aff4:	f000 fece 	bl	800bd94 <vTaskMissedYield>
 800aff8:	e00d      	b.n	800b016 <prvUnlockQueue+0x4e>
				else
				{
					/* Tasks that are removed from the event list will get
					added to the pending ready list as the scheduler is still
					suspended. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800affa:	687b      	ldr	r3, [r7, #4]
 800affc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800affe:	2b00      	cmp	r3, #0
 800b000:	d012      	beq.n	800b028 <prvUnlockQueue+0x60>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b002:	687b      	ldr	r3, [r7, #4]
 800b004:	3324      	adds	r3, #36	; 0x24
 800b006:	4618      	mov	r0, r3
 800b008:	f000 fde8 	bl	800bbdc <xTaskRemoveFromEventList>
 800b00c:	4603      	mov	r3, r0
 800b00e:	2b00      	cmp	r3, #0
 800b010:	d001      	beq.n	800b016 <prvUnlockQueue+0x4e>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							vTaskMissedYield();
 800b012:	f000 febf 	bl	800bd94 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800b016:	7bfb      	ldrb	r3, [r7, #15]
 800b018:	3b01      	subs	r3, #1
 800b01a:	b2db      	uxtb	r3, r3
 800b01c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800b01e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b022:	2b00      	cmp	r3, #0
 800b024:	dcdb      	bgt.n	800afde <prvUnlockQueue+0x16>
 800b026:	e000      	b.n	800b02a <prvUnlockQueue+0x62>
						break;
 800b028:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800b02a:	687b      	ldr	r3, [r7, #4]
 800b02c:	22ff      	movs	r2, #255	; 0xff
 800b02e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800b032:	f001 fe47 	bl	800ccc4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800b036:	f001 fe15 	bl	800cc64 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800b03a:	687b      	ldr	r3, [r7, #4]
 800b03c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b040:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800b042:	e011      	b.n	800b068 <prvUnlockQueue+0xa0>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b044:	687b      	ldr	r3, [r7, #4]
 800b046:	691b      	ldr	r3, [r3, #16]
 800b048:	2b00      	cmp	r3, #0
 800b04a:	d012      	beq.n	800b072 <prvUnlockQueue+0xaa>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b04c:	687b      	ldr	r3, [r7, #4]
 800b04e:	3310      	adds	r3, #16
 800b050:	4618      	mov	r0, r3
 800b052:	f000 fdc3 	bl	800bbdc <xTaskRemoveFromEventList>
 800b056:	4603      	mov	r3, r0
 800b058:	2b00      	cmp	r3, #0
 800b05a:	d001      	beq.n	800b060 <prvUnlockQueue+0x98>
				{
					vTaskMissedYield();
 800b05c:	f000 fe9a 	bl	800bd94 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800b060:	7bbb      	ldrb	r3, [r7, #14]
 800b062:	3b01      	subs	r3, #1
 800b064:	b2db      	uxtb	r3, r3
 800b066:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800b068:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b06c:	2b00      	cmp	r3, #0
 800b06e:	dce9      	bgt.n	800b044 <prvUnlockQueue+0x7c>
 800b070:	e000      	b.n	800b074 <prvUnlockQueue+0xac>
			}
			else
			{
				break;
 800b072:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800b074:	687b      	ldr	r3, [r7, #4]
 800b076:	22ff      	movs	r2, #255	; 0xff
 800b078:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800b07c:	f001 fe22 	bl	800ccc4 <vPortExitCritical>
}
 800b080:	bf00      	nop
 800b082:	3710      	adds	r7, #16
 800b084:	46bd      	mov	sp, r7
 800b086:	bd80      	pop	{r7, pc}

0800b088 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800b088:	b580      	push	{r7, lr}
 800b08a:	b084      	sub	sp, #16
 800b08c:	af00      	add	r7, sp, #0
 800b08e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800b090:	f001 fde8 	bl	800cc64 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800b094:	687b      	ldr	r3, [r7, #4]
 800b096:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b098:	2b00      	cmp	r3, #0
 800b09a:	d102      	bne.n	800b0a2 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800b09c:	2301      	movs	r3, #1
 800b09e:	60fb      	str	r3, [r7, #12]
 800b0a0:	e001      	b.n	800b0a6 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800b0a2:	2300      	movs	r3, #0
 800b0a4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800b0a6:	f001 fe0d 	bl	800ccc4 <vPortExitCritical>

	return xReturn;
 800b0aa:	68fb      	ldr	r3, [r7, #12]
}
 800b0ac:	4618      	mov	r0, r3
 800b0ae:	3710      	adds	r7, #16
 800b0b0:	46bd      	mov	sp, r7
 800b0b2:	bd80      	pop	{r7, pc}

0800b0b4 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800b0b4:	b580      	push	{r7, lr}
 800b0b6:	b084      	sub	sp, #16
 800b0b8:	af00      	add	r7, sp, #0
 800b0ba:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800b0bc:	f001 fdd2 	bl	800cc64 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800b0c0:	687b      	ldr	r3, [r7, #4]
 800b0c2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b0c4:	687b      	ldr	r3, [r7, #4]
 800b0c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b0c8:	429a      	cmp	r2, r3
 800b0ca:	d102      	bne.n	800b0d2 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800b0cc:	2301      	movs	r3, #1
 800b0ce:	60fb      	str	r3, [r7, #12]
 800b0d0:	e001      	b.n	800b0d6 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800b0d2:	2300      	movs	r3, #0
 800b0d4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800b0d6:	f001 fdf5 	bl	800ccc4 <vPortExitCritical>

	return xReturn;
 800b0da:	68fb      	ldr	r3, [r7, #12]
}
 800b0dc:	4618      	mov	r0, r3
 800b0de:	3710      	adds	r7, #16
 800b0e0:	46bd      	mov	sp, r7
 800b0e2:	bd80      	pop	{r7, pc}

0800b0e4 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800b0e4:	b480      	push	{r7}
 800b0e6:	b085      	sub	sp, #20
 800b0e8:	af00      	add	r7, sp, #0
 800b0ea:	6078      	str	r0, [r7, #4]
 800b0ec:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800b0ee:	2300      	movs	r3, #0
 800b0f0:	60fb      	str	r3, [r7, #12]
 800b0f2:	e014      	b.n	800b11e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800b0f4:	4a0f      	ldr	r2, [pc, #60]	; (800b134 <vQueueAddToRegistry+0x50>)
 800b0f6:	68fb      	ldr	r3, [r7, #12]
 800b0f8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800b0fc:	2b00      	cmp	r3, #0
 800b0fe:	d10b      	bne.n	800b118 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800b100:	490c      	ldr	r1, [pc, #48]	; (800b134 <vQueueAddToRegistry+0x50>)
 800b102:	68fb      	ldr	r3, [r7, #12]
 800b104:	683a      	ldr	r2, [r7, #0]
 800b106:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800b10a:	4a0a      	ldr	r2, [pc, #40]	; (800b134 <vQueueAddToRegistry+0x50>)
 800b10c:	68fb      	ldr	r3, [r7, #12]
 800b10e:	00db      	lsls	r3, r3, #3
 800b110:	4413      	add	r3, r2
 800b112:	687a      	ldr	r2, [r7, #4]
 800b114:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800b116:	e006      	b.n	800b126 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800b118:	68fb      	ldr	r3, [r7, #12]
 800b11a:	3301      	adds	r3, #1
 800b11c:	60fb      	str	r3, [r7, #12]
 800b11e:	68fb      	ldr	r3, [r7, #12]
 800b120:	2b07      	cmp	r3, #7
 800b122:	d9e7      	bls.n	800b0f4 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800b124:	bf00      	nop
 800b126:	bf00      	nop
 800b128:	3714      	adds	r7, #20
 800b12a:	46bd      	mov	sp, r7
 800b12c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b130:	4770      	bx	lr
 800b132:	bf00      	nop
 800b134:	20001bb0 	.word	0x20001bb0

0800b138 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800b138:	b580      	push	{r7, lr}
 800b13a:	b086      	sub	sp, #24
 800b13c:	af00      	add	r7, sp, #0
 800b13e:	60f8      	str	r0, [r7, #12]
 800b140:	60b9      	str	r1, [r7, #8]
 800b142:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800b144:	68fb      	ldr	r3, [r7, #12]
 800b146:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800b148:	f001 fd8c 	bl	800cc64 <vPortEnterCritical>
 800b14c:	697b      	ldr	r3, [r7, #20]
 800b14e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b152:	b25b      	sxtb	r3, r3
 800b154:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b158:	d103      	bne.n	800b162 <vQueueWaitForMessageRestricted+0x2a>
 800b15a:	697b      	ldr	r3, [r7, #20]
 800b15c:	2200      	movs	r2, #0
 800b15e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b162:	697b      	ldr	r3, [r7, #20]
 800b164:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b168:	b25b      	sxtb	r3, r3
 800b16a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b16e:	d103      	bne.n	800b178 <vQueueWaitForMessageRestricted+0x40>
 800b170:	697b      	ldr	r3, [r7, #20]
 800b172:	2200      	movs	r2, #0
 800b174:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b178:	f001 fda4 	bl	800ccc4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800b17c:	697b      	ldr	r3, [r7, #20]
 800b17e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b180:	2b00      	cmp	r3, #0
 800b182:	d106      	bne.n	800b192 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800b184:	697b      	ldr	r3, [r7, #20]
 800b186:	3324      	adds	r3, #36	; 0x24
 800b188:	687a      	ldr	r2, [r7, #4]
 800b18a:	68b9      	ldr	r1, [r7, #8]
 800b18c:	4618      	mov	r0, r3
 800b18e:	f000 fcf9 	bl	800bb84 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800b192:	6978      	ldr	r0, [r7, #20]
 800b194:	f7ff ff18 	bl	800afc8 <prvUnlockQueue>
	}
 800b198:	bf00      	nop
 800b19a:	3718      	adds	r7, #24
 800b19c:	46bd      	mov	sp, r7
 800b19e:	bd80      	pop	{r7, pc}

0800b1a0 <xQueueCreateSet>:
/*-----------------------------------------------------------*/

#if( ( configUSE_QUEUE_SETS == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueSetHandle_t xQueueCreateSet( const UBaseType_t uxEventQueueLength )
	{
 800b1a0:	b580      	push	{r7, lr}
 800b1a2:	b084      	sub	sp, #16
 800b1a4:	af00      	add	r7, sp, #0
 800b1a6:	6078      	str	r0, [r7, #4]
	QueueSetHandle_t pxQueue;

		pxQueue = xQueueGenericCreate( uxEventQueueLength, ( UBaseType_t ) sizeof( Queue_t * ), queueQUEUE_TYPE_SET );
 800b1a8:	2200      	movs	r2, #0
 800b1aa:	2104      	movs	r1, #4
 800b1ac:	6878      	ldr	r0, [r7, #4]
 800b1ae:	f7ff fa38 	bl	800a622 <xQueueGenericCreate>
 800b1b2:	60f8      	str	r0, [r7, #12]

		return pxQueue;
 800b1b4:	68fb      	ldr	r3, [r7, #12]
	}
 800b1b6:	4618      	mov	r0, r3
 800b1b8:	3710      	adds	r7, #16
 800b1ba:	46bd      	mov	sp, r7
 800b1bc:	bd80      	pop	{r7, pc}

0800b1be <xQueueAddToSet>:
/*-----------------------------------------------------------*/

#if ( configUSE_QUEUE_SETS == 1 )

	BaseType_t xQueueAddToSet( QueueSetMemberHandle_t xQueueOrSemaphore, QueueSetHandle_t xQueueSet )
	{
 800b1be:	b580      	push	{r7, lr}
 800b1c0:	b084      	sub	sp, #16
 800b1c2:	af00      	add	r7, sp, #0
 800b1c4:	6078      	str	r0, [r7, #4]
 800b1c6:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 800b1c8:	f001 fd4c 	bl	800cc64 <vPortEnterCritical>
		{
			if( ( ( Queue_t * ) xQueueOrSemaphore )->pxQueueSetContainer != NULL )
 800b1cc:	687b      	ldr	r3, [r7, #4]
 800b1ce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b1d0:	2b00      	cmp	r3, #0
 800b1d2:	d002      	beq.n	800b1da <xQueueAddToSet+0x1c>
			{
				/* Cannot add a queue/semaphore to more than one queue set. */
				xReturn = pdFAIL;
 800b1d4:	2300      	movs	r3, #0
 800b1d6:	60fb      	str	r3, [r7, #12]
 800b1d8:	e00b      	b.n	800b1f2 <xQueueAddToSet+0x34>
			}
			else if( ( ( Queue_t * ) xQueueOrSemaphore )->uxMessagesWaiting != ( UBaseType_t ) 0 )
 800b1da:	687b      	ldr	r3, [r7, #4]
 800b1dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b1de:	2b00      	cmp	r3, #0
 800b1e0:	d002      	beq.n	800b1e8 <xQueueAddToSet+0x2a>
			{
				/* Cannot add a queue/semaphore to a queue set if there are already
				items in the queue/semaphore. */
				xReturn = pdFAIL;
 800b1e2:	2300      	movs	r3, #0
 800b1e4:	60fb      	str	r3, [r7, #12]
 800b1e6:	e004      	b.n	800b1f2 <xQueueAddToSet+0x34>
			}
			else
			{
				( ( Queue_t * ) xQueueOrSemaphore )->pxQueueSetContainer = xQueueSet;
 800b1e8:	687b      	ldr	r3, [r7, #4]
 800b1ea:	683a      	ldr	r2, [r7, #0]
 800b1ec:	649a      	str	r2, [r3, #72]	; 0x48
				xReturn = pdPASS;
 800b1ee:	2301      	movs	r3, #1
 800b1f0:	60fb      	str	r3, [r7, #12]
			}
		}
		taskEXIT_CRITICAL();
 800b1f2:	f001 fd67 	bl	800ccc4 <vPortExitCritical>

		return xReturn;
 800b1f6:	68fb      	ldr	r3, [r7, #12]
	}
 800b1f8:	4618      	mov	r0, r3
 800b1fa:	3710      	adds	r7, #16
 800b1fc:	46bd      	mov	sp, r7
 800b1fe:	bd80      	pop	{r7, pc}

0800b200 <xQueueSelectFromSet>:
/*-----------------------------------------------------------*/

#if ( configUSE_QUEUE_SETS == 1 )

	QueueSetMemberHandle_t xQueueSelectFromSet( QueueSetHandle_t xQueueSet, TickType_t const xTicksToWait )
	{
 800b200:	b580      	push	{r7, lr}
 800b202:	b084      	sub	sp, #16
 800b204:	af00      	add	r7, sp, #0
 800b206:	6078      	str	r0, [r7, #4]
 800b208:	6039      	str	r1, [r7, #0]
	QueueSetMemberHandle_t xReturn = NULL;
 800b20a:	2300      	movs	r3, #0
 800b20c:	60fb      	str	r3, [r7, #12]

		( void ) xQueueReceive( ( QueueHandle_t ) xQueueSet, &xReturn, xTicksToWait ); /*lint !e961 Casting from one typedef to another is not redundant. */
 800b20e:	f107 030c 	add.w	r3, r7, #12
 800b212:	683a      	ldr	r2, [r7, #0]
 800b214:	4619      	mov	r1, r3
 800b216:	6878      	ldr	r0, [r7, #4]
 800b218:	f7ff fc24 	bl	800aa64 <xQueueReceive>
		return xReturn;
 800b21c:	68fb      	ldr	r3, [r7, #12]
	}
 800b21e:	4618      	mov	r0, r3
 800b220:	3710      	adds	r7, #16
 800b222:	46bd      	mov	sp, r7
 800b224:	bd80      	pop	{r7, pc}

0800b226 <prvNotifyQueueSetContainer>:
/*-----------------------------------------------------------*/

#if ( configUSE_QUEUE_SETS == 1 )

	static BaseType_t prvNotifyQueueSetContainer( const Queue_t * const pxQueue, const BaseType_t xCopyPosition )
	{
 800b226:	b580      	push	{r7, lr}
 800b228:	b088      	sub	sp, #32
 800b22a:	af00      	add	r7, sp, #0
 800b22c:	6078      	str	r0, [r7, #4]
 800b22e:	6039      	str	r1, [r7, #0]
	Queue_t *pxQueueSetContainer = pxQueue->pxQueueSetContainer;
 800b230:	687b      	ldr	r3, [r7, #4]
 800b232:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b234:	61bb      	str	r3, [r7, #24]
	BaseType_t xReturn = pdFALSE;
 800b236:	2300      	movs	r3, #0
 800b238:	61fb      	str	r3, [r7, #28]

		/* This function must be called form a critical section. */

		configASSERT( pxQueueSetContainer );
 800b23a:	69bb      	ldr	r3, [r7, #24]
 800b23c:	2b00      	cmp	r3, #0
 800b23e:	d10a      	bne.n	800b256 <prvNotifyQueueSetContainer+0x30>
	__asm volatile
 800b240:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b244:	f383 8811 	msr	BASEPRI, r3
 800b248:	f3bf 8f6f 	isb	sy
 800b24c:	f3bf 8f4f 	dsb	sy
 800b250:	613b      	str	r3, [r7, #16]
}
 800b252:	bf00      	nop
 800b254:	e7fe      	b.n	800b254 <prvNotifyQueueSetContainer+0x2e>
		configASSERT( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength );
 800b256:	69bb      	ldr	r3, [r7, #24]
 800b258:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b25a:	69bb      	ldr	r3, [r7, #24]
 800b25c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b25e:	429a      	cmp	r2, r3
 800b260:	d30a      	bcc.n	800b278 <prvNotifyQueueSetContainer+0x52>
	__asm volatile
 800b262:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b266:	f383 8811 	msr	BASEPRI, r3
 800b26a:	f3bf 8f6f 	isb	sy
 800b26e:	f3bf 8f4f 	dsb	sy
 800b272:	60fb      	str	r3, [r7, #12]
}
 800b274:	bf00      	nop
 800b276:	e7fe      	b.n	800b276 <prvNotifyQueueSetContainer+0x50>

		if( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength )
 800b278:	69bb      	ldr	r3, [r7, #24]
 800b27a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b27c:	69bb      	ldr	r3, [r7, #24]
 800b27e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b280:	429a      	cmp	r2, r3
 800b282:	d225      	bcs.n	800b2d0 <prvNotifyQueueSetContainer+0xaa>
		{
			const int8_t cTxLock = pxQueueSetContainer->cTxLock;
 800b284:	69bb      	ldr	r3, [r7, #24]
 800b286:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b28a:	75fb      	strb	r3, [r7, #23]

			traceQUEUE_SEND( pxQueueSetContainer );

			/* The data copied is the handle of the queue that contains data. */
			xReturn = prvCopyDataToQueue( pxQueueSetContainer, &pxQueue, xCopyPosition );
 800b28c:	1d3b      	adds	r3, r7, #4
 800b28e:	683a      	ldr	r2, [r7, #0]
 800b290:	4619      	mov	r1, r3
 800b292:	69b8      	ldr	r0, [r7, #24]
 800b294:	f7ff fe08 	bl	800aea8 <prvCopyDataToQueue>
 800b298:	61f8      	str	r0, [r7, #28]

			if( cTxLock == queueUNLOCKED )
 800b29a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800b29e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b2a2:	d10e      	bne.n	800b2c2 <prvNotifyQueueSetContainer+0x9c>
			{
				if( listLIST_IS_EMPTY( &( pxQueueSetContainer->xTasksWaitingToReceive ) ) == pdFALSE )
 800b2a4:	69bb      	ldr	r3, [r7, #24]
 800b2a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b2a8:	2b00      	cmp	r3, #0
 800b2aa:	d011      	beq.n	800b2d0 <prvNotifyQueueSetContainer+0xaa>
				{
					if( xTaskRemoveFromEventList( &( pxQueueSetContainer->xTasksWaitingToReceive ) ) != pdFALSE )
 800b2ac:	69bb      	ldr	r3, [r7, #24]
 800b2ae:	3324      	adds	r3, #36	; 0x24
 800b2b0:	4618      	mov	r0, r3
 800b2b2:	f000 fc93 	bl	800bbdc <xTaskRemoveFromEventList>
 800b2b6:	4603      	mov	r3, r0
 800b2b8:	2b00      	cmp	r3, #0
 800b2ba:	d009      	beq.n	800b2d0 <prvNotifyQueueSetContainer+0xaa>
					{
						/* The task waiting has a higher priority. */
						xReturn = pdTRUE;
 800b2bc:	2301      	movs	r3, #1
 800b2be:	61fb      	str	r3, [r7, #28]
 800b2c0:	e006      	b.n	800b2d0 <prvNotifyQueueSetContainer+0xaa>
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else
			{
				pxQueueSetContainer->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800b2c2:	7dfb      	ldrb	r3, [r7, #23]
 800b2c4:	3301      	adds	r3, #1
 800b2c6:	b2db      	uxtb	r3, r3
 800b2c8:	b25a      	sxtb	r2, r3
 800b2ca:	69bb      	ldr	r3, [r7, #24]
 800b2cc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800b2d0:	69fb      	ldr	r3, [r7, #28]
	}
 800b2d2:	4618      	mov	r0, r3
 800b2d4:	3720      	adds	r7, #32
 800b2d6:	46bd      	mov	sp, r7
 800b2d8:	bd80      	pop	{r7, pc}

0800b2da <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800b2da:	b580      	push	{r7, lr}
 800b2dc:	b08e      	sub	sp, #56	; 0x38
 800b2de:	af04      	add	r7, sp, #16
 800b2e0:	60f8      	str	r0, [r7, #12]
 800b2e2:	60b9      	str	r1, [r7, #8]
 800b2e4:	607a      	str	r2, [r7, #4]
 800b2e6:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800b2e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b2ea:	2b00      	cmp	r3, #0
 800b2ec:	d10a      	bne.n	800b304 <xTaskCreateStatic+0x2a>
	__asm volatile
 800b2ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b2f2:	f383 8811 	msr	BASEPRI, r3
 800b2f6:	f3bf 8f6f 	isb	sy
 800b2fa:	f3bf 8f4f 	dsb	sy
 800b2fe:	623b      	str	r3, [r7, #32]
}
 800b300:	bf00      	nop
 800b302:	e7fe      	b.n	800b302 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800b304:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b306:	2b00      	cmp	r3, #0
 800b308:	d10a      	bne.n	800b320 <xTaskCreateStatic+0x46>
	__asm volatile
 800b30a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b30e:	f383 8811 	msr	BASEPRI, r3
 800b312:	f3bf 8f6f 	isb	sy
 800b316:	f3bf 8f4f 	dsb	sy
 800b31a:	61fb      	str	r3, [r7, #28]
}
 800b31c:	bf00      	nop
 800b31e:	e7fe      	b.n	800b31e <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800b320:	23a8      	movs	r3, #168	; 0xa8
 800b322:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800b324:	693b      	ldr	r3, [r7, #16]
 800b326:	2ba8      	cmp	r3, #168	; 0xa8
 800b328:	d00a      	beq.n	800b340 <xTaskCreateStatic+0x66>
	__asm volatile
 800b32a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b32e:	f383 8811 	msr	BASEPRI, r3
 800b332:	f3bf 8f6f 	isb	sy
 800b336:	f3bf 8f4f 	dsb	sy
 800b33a:	61bb      	str	r3, [r7, #24]
}
 800b33c:	bf00      	nop
 800b33e:	e7fe      	b.n	800b33e <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800b340:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b342:	2b00      	cmp	r3, #0
 800b344:	d01e      	beq.n	800b384 <xTaskCreateStatic+0xaa>
 800b346:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b348:	2b00      	cmp	r3, #0
 800b34a:	d01b      	beq.n	800b384 <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800b34c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b34e:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800b350:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b352:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b354:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800b356:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b358:	2202      	movs	r2, #2
 800b35a:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800b35e:	2300      	movs	r3, #0
 800b360:	9303      	str	r3, [sp, #12]
 800b362:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b364:	9302      	str	r3, [sp, #8]
 800b366:	f107 0314 	add.w	r3, r7, #20
 800b36a:	9301      	str	r3, [sp, #4]
 800b36c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b36e:	9300      	str	r3, [sp, #0]
 800b370:	683b      	ldr	r3, [r7, #0]
 800b372:	687a      	ldr	r2, [r7, #4]
 800b374:	68b9      	ldr	r1, [r7, #8]
 800b376:	68f8      	ldr	r0, [r7, #12]
 800b378:	f000 f850 	bl	800b41c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800b37c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b37e:	f000 f8eb 	bl	800b558 <prvAddNewTaskToReadyList>
 800b382:	e001      	b.n	800b388 <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 800b384:	2300      	movs	r3, #0
 800b386:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800b388:	697b      	ldr	r3, [r7, #20]
	}
 800b38a:	4618      	mov	r0, r3
 800b38c:	3728      	adds	r7, #40	; 0x28
 800b38e:	46bd      	mov	sp, r7
 800b390:	bd80      	pop	{r7, pc}

0800b392 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800b392:	b580      	push	{r7, lr}
 800b394:	b08c      	sub	sp, #48	; 0x30
 800b396:	af04      	add	r7, sp, #16
 800b398:	60f8      	str	r0, [r7, #12]
 800b39a:	60b9      	str	r1, [r7, #8]
 800b39c:	603b      	str	r3, [r7, #0]
 800b39e:	4613      	mov	r3, r2
 800b3a0:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b3a2:	88fb      	ldrh	r3, [r7, #6]
 800b3a4:	009b      	lsls	r3, r3, #2
 800b3a6:	4618      	mov	r0, r3
 800b3a8:	f001 fd7e 	bl	800cea8 <pvPortMalloc>
 800b3ac:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800b3ae:	697b      	ldr	r3, [r7, #20]
 800b3b0:	2b00      	cmp	r3, #0
 800b3b2:	d00e      	beq.n	800b3d2 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 800b3b4:	20a8      	movs	r0, #168	; 0xa8
 800b3b6:	f001 fd77 	bl	800cea8 <pvPortMalloc>
 800b3ba:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800b3bc:	69fb      	ldr	r3, [r7, #28]
 800b3be:	2b00      	cmp	r3, #0
 800b3c0:	d003      	beq.n	800b3ca <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800b3c2:	69fb      	ldr	r3, [r7, #28]
 800b3c4:	697a      	ldr	r2, [r7, #20]
 800b3c6:	631a      	str	r2, [r3, #48]	; 0x30
 800b3c8:	e005      	b.n	800b3d6 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800b3ca:	6978      	ldr	r0, [r7, #20]
 800b3cc:	f001 fe30 	bl	800d030 <vPortFree>
 800b3d0:	e001      	b.n	800b3d6 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800b3d2:	2300      	movs	r3, #0
 800b3d4:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800b3d6:	69fb      	ldr	r3, [r7, #28]
 800b3d8:	2b00      	cmp	r3, #0
 800b3da:	d017      	beq.n	800b40c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800b3dc:	69fb      	ldr	r3, [r7, #28]
 800b3de:	2200      	movs	r2, #0
 800b3e0:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800b3e4:	88fa      	ldrh	r2, [r7, #6]
 800b3e6:	2300      	movs	r3, #0
 800b3e8:	9303      	str	r3, [sp, #12]
 800b3ea:	69fb      	ldr	r3, [r7, #28]
 800b3ec:	9302      	str	r3, [sp, #8]
 800b3ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b3f0:	9301      	str	r3, [sp, #4]
 800b3f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b3f4:	9300      	str	r3, [sp, #0]
 800b3f6:	683b      	ldr	r3, [r7, #0]
 800b3f8:	68b9      	ldr	r1, [r7, #8]
 800b3fa:	68f8      	ldr	r0, [r7, #12]
 800b3fc:	f000 f80e 	bl	800b41c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800b400:	69f8      	ldr	r0, [r7, #28]
 800b402:	f000 f8a9 	bl	800b558 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800b406:	2301      	movs	r3, #1
 800b408:	61bb      	str	r3, [r7, #24]
 800b40a:	e002      	b.n	800b412 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800b40c:	f04f 33ff 	mov.w	r3, #4294967295
 800b410:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800b412:	69bb      	ldr	r3, [r7, #24]
	}
 800b414:	4618      	mov	r0, r3
 800b416:	3720      	adds	r7, #32
 800b418:	46bd      	mov	sp, r7
 800b41a:	bd80      	pop	{r7, pc}

0800b41c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800b41c:	b580      	push	{r7, lr}
 800b41e:	b088      	sub	sp, #32
 800b420:	af00      	add	r7, sp, #0
 800b422:	60f8      	str	r0, [r7, #12]
 800b424:	60b9      	str	r1, [r7, #8]
 800b426:	607a      	str	r2, [r7, #4]
 800b428:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800b42a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b42c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800b42e:	687b      	ldr	r3, [r7, #4]
 800b430:	009b      	lsls	r3, r3, #2
 800b432:	461a      	mov	r2, r3
 800b434:	21a5      	movs	r1, #165	; 0xa5
 800b436:	f001 ff11 	bl	800d25c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 800b43a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b43c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b43e:	687b      	ldr	r3, [r7, #4]
 800b440:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800b444:	3b01      	subs	r3, #1
 800b446:	009b      	lsls	r3, r3, #2
 800b448:	4413      	add	r3, r2
 800b44a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 800b44c:	69bb      	ldr	r3, [r7, #24]
 800b44e:	f023 0307 	bic.w	r3, r3, #7
 800b452:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800b454:	69bb      	ldr	r3, [r7, #24]
 800b456:	f003 0307 	and.w	r3, r3, #7
 800b45a:	2b00      	cmp	r3, #0
 800b45c:	d00a      	beq.n	800b474 <prvInitialiseNewTask+0x58>
	__asm volatile
 800b45e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b462:	f383 8811 	msr	BASEPRI, r3
 800b466:	f3bf 8f6f 	isb	sy
 800b46a:	f3bf 8f4f 	dsb	sy
 800b46e:	617b      	str	r3, [r7, #20]
}
 800b470:	bf00      	nop
 800b472:	e7fe      	b.n	800b472 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800b474:	2300      	movs	r3, #0
 800b476:	61fb      	str	r3, [r7, #28]
 800b478:	e012      	b.n	800b4a0 <prvInitialiseNewTask+0x84>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800b47a:	68ba      	ldr	r2, [r7, #8]
 800b47c:	69fb      	ldr	r3, [r7, #28]
 800b47e:	4413      	add	r3, r2
 800b480:	7819      	ldrb	r1, [r3, #0]
 800b482:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b484:	69fb      	ldr	r3, [r7, #28]
 800b486:	4413      	add	r3, r2
 800b488:	3334      	adds	r3, #52	; 0x34
 800b48a:	460a      	mov	r2, r1
 800b48c:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 800b48e:	68ba      	ldr	r2, [r7, #8]
 800b490:	69fb      	ldr	r3, [r7, #28]
 800b492:	4413      	add	r3, r2
 800b494:	781b      	ldrb	r3, [r3, #0]
 800b496:	2b00      	cmp	r3, #0
 800b498:	d006      	beq.n	800b4a8 <prvInitialiseNewTask+0x8c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800b49a:	69fb      	ldr	r3, [r7, #28]
 800b49c:	3301      	adds	r3, #1
 800b49e:	61fb      	str	r3, [r7, #28]
 800b4a0:	69fb      	ldr	r3, [r7, #28]
 800b4a2:	2b0f      	cmp	r3, #15
 800b4a4:	d9e9      	bls.n	800b47a <prvInitialiseNewTask+0x5e>
 800b4a6:	e000      	b.n	800b4aa <prvInitialiseNewTask+0x8e>
		{
			break;
 800b4a8:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800b4aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b4ac:	2200      	movs	r2, #0
 800b4ae:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800b4b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b4b4:	2b37      	cmp	r3, #55	; 0x37
 800b4b6:	d901      	bls.n	800b4bc <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800b4b8:	2337      	movs	r3, #55	; 0x37
 800b4ba:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800b4bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b4be:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b4c0:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800b4c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b4c4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b4c6:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800b4c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b4ca:	2200      	movs	r2, #0
 800b4cc:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800b4ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b4d0:	3304      	adds	r3, #4
 800b4d2:	4618      	mov	r0, r3
 800b4d4:	f7fe ff32 	bl	800a33c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800b4d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b4da:	3318      	adds	r3, #24
 800b4dc:	4618      	mov	r0, r3
 800b4de:	f7fe ff2d 	bl	800a33c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800b4e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b4e4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b4e6:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b4e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b4ea:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800b4ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b4f0:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800b4f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b4f4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b4f6:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800b4f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b4fa:	2200      	movs	r2, #0
 800b4fc:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800b500:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b502:	2200      	movs	r2, #0
 800b504:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800b508:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b50a:	3354      	adds	r3, #84	; 0x54
 800b50c:	224c      	movs	r2, #76	; 0x4c
 800b50e:	2100      	movs	r1, #0
 800b510:	4618      	mov	r0, r3
 800b512:	f001 fea3 	bl	800d25c <memset>
 800b516:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b518:	4a0c      	ldr	r2, [pc, #48]	; (800b54c <prvInitialiseNewTask+0x130>)
 800b51a:	659a      	str	r2, [r3, #88]	; 0x58
 800b51c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b51e:	4a0c      	ldr	r2, [pc, #48]	; (800b550 <prvInitialiseNewTask+0x134>)
 800b520:	65da      	str	r2, [r3, #92]	; 0x5c
 800b522:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b524:	4a0b      	ldr	r2, [pc, #44]	; (800b554 <prvInitialiseNewTask+0x138>)
 800b526:	661a      	str	r2, [r3, #96]	; 0x60
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800b528:	683a      	ldr	r2, [r7, #0]
 800b52a:	68f9      	ldr	r1, [r7, #12]
 800b52c:	69b8      	ldr	r0, [r7, #24]
 800b52e:	f001 fa6b 	bl	800ca08 <pxPortInitialiseStack>
 800b532:	4602      	mov	r2, r0
 800b534:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b536:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 800b538:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b53a:	2b00      	cmp	r3, #0
 800b53c:	d002      	beq.n	800b544 <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800b53e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b540:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b542:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b544:	bf00      	nop
 800b546:	3720      	adds	r7, #32
 800b548:	46bd      	mov	sp, r7
 800b54a:	bd80      	pop	{r7, pc}
 800b54c:	20002e40 	.word	0x20002e40
 800b550:	20002ea8 	.word	0x20002ea8
 800b554:	20002f10 	.word	0x20002f10

0800b558 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800b558:	b580      	push	{r7, lr}
 800b55a:	b082      	sub	sp, #8
 800b55c:	af00      	add	r7, sp, #0
 800b55e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800b560:	f001 fb80 	bl	800cc64 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800b564:	4b2d      	ldr	r3, [pc, #180]	; (800b61c <prvAddNewTaskToReadyList+0xc4>)
 800b566:	681b      	ldr	r3, [r3, #0]
 800b568:	3301      	adds	r3, #1
 800b56a:	4a2c      	ldr	r2, [pc, #176]	; (800b61c <prvAddNewTaskToReadyList+0xc4>)
 800b56c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800b56e:	4b2c      	ldr	r3, [pc, #176]	; (800b620 <prvAddNewTaskToReadyList+0xc8>)
 800b570:	681b      	ldr	r3, [r3, #0]
 800b572:	2b00      	cmp	r3, #0
 800b574:	d109      	bne.n	800b58a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800b576:	4a2a      	ldr	r2, [pc, #168]	; (800b620 <prvAddNewTaskToReadyList+0xc8>)
 800b578:	687b      	ldr	r3, [r7, #4]
 800b57a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800b57c:	4b27      	ldr	r3, [pc, #156]	; (800b61c <prvAddNewTaskToReadyList+0xc4>)
 800b57e:	681b      	ldr	r3, [r3, #0]
 800b580:	2b01      	cmp	r3, #1
 800b582:	d110      	bne.n	800b5a6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800b584:	f000 fc2a 	bl	800bddc <prvInitialiseTaskLists>
 800b588:	e00d      	b.n	800b5a6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800b58a:	4b26      	ldr	r3, [pc, #152]	; (800b624 <prvAddNewTaskToReadyList+0xcc>)
 800b58c:	681b      	ldr	r3, [r3, #0]
 800b58e:	2b00      	cmp	r3, #0
 800b590:	d109      	bne.n	800b5a6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800b592:	4b23      	ldr	r3, [pc, #140]	; (800b620 <prvAddNewTaskToReadyList+0xc8>)
 800b594:	681b      	ldr	r3, [r3, #0]
 800b596:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b598:	687b      	ldr	r3, [r7, #4]
 800b59a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b59c:	429a      	cmp	r2, r3
 800b59e:	d802      	bhi.n	800b5a6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800b5a0:	4a1f      	ldr	r2, [pc, #124]	; (800b620 <prvAddNewTaskToReadyList+0xc8>)
 800b5a2:	687b      	ldr	r3, [r7, #4]
 800b5a4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800b5a6:	4b20      	ldr	r3, [pc, #128]	; (800b628 <prvAddNewTaskToReadyList+0xd0>)
 800b5a8:	681b      	ldr	r3, [r3, #0]
 800b5aa:	3301      	adds	r3, #1
 800b5ac:	4a1e      	ldr	r2, [pc, #120]	; (800b628 <prvAddNewTaskToReadyList+0xd0>)
 800b5ae:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800b5b0:	4b1d      	ldr	r3, [pc, #116]	; (800b628 <prvAddNewTaskToReadyList+0xd0>)
 800b5b2:	681a      	ldr	r2, [r3, #0]
 800b5b4:	687b      	ldr	r3, [r7, #4]
 800b5b6:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800b5b8:	687b      	ldr	r3, [r7, #4]
 800b5ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b5bc:	4b1b      	ldr	r3, [pc, #108]	; (800b62c <prvAddNewTaskToReadyList+0xd4>)
 800b5be:	681b      	ldr	r3, [r3, #0]
 800b5c0:	429a      	cmp	r2, r3
 800b5c2:	d903      	bls.n	800b5cc <prvAddNewTaskToReadyList+0x74>
 800b5c4:	687b      	ldr	r3, [r7, #4]
 800b5c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b5c8:	4a18      	ldr	r2, [pc, #96]	; (800b62c <prvAddNewTaskToReadyList+0xd4>)
 800b5ca:	6013      	str	r3, [r2, #0]
 800b5cc:	687b      	ldr	r3, [r7, #4]
 800b5ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b5d0:	4613      	mov	r3, r2
 800b5d2:	009b      	lsls	r3, r3, #2
 800b5d4:	4413      	add	r3, r2
 800b5d6:	009b      	lsls	r3, r3, #2
 800b5d8:	4a15      	ldr	r2, [pc, #84]	; (800b630 <prvAddNewTaskToReadyList+0xd8>)
 800b5da:	441a      	add	r2, r3
 800b5dc:	687b      	ldr	r3, [r7, #4]
 800b5de:	3304      	adds	r3, #4
 800b5e0:	4619      	mov	r1, r3
 800b5e2:	4610      	mov	r0, r2
 800b5e4:	f7fe feb7 	bl	800a356 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800b5e8:	f001 fb6c 	bl	800ccc4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800b5ec:	4b0d      	ldr	r3, [pc, #52]	; (800b624 <prvAddNewTaskToReadyList+0xcc>)
 800b5ee:	681b      	ldr	r3, [r3, #0]
 800b5f0:	2b00      	cmp	r3, #0
 800b5f2:	d00e      	beq.n	800b612 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800b5f4:	4b0a      	ldr	r3, [pc, #40]	; (800b620 <prvAddNewTaskToReadyList+0xc8>)
 800b5f6:	681b      	ldr	r3, [r3, #0]
 800b5f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b5fa:	687b      	ldr	r3, [r7, #4]
 800b5fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b5fe:	429a      	cmp	r2, r3
 800b600:	d207      	bcs.n	800b612 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800b602:	4b0c      	ldr	r3, [pc, #48]	; (800b634 <prvAddNewTaskToReadyList+0xdc>)
 800b604:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b608:	601a      	str	r2, [r3, #0]
 800b60a:	f3bf 8f4f 	dsb	sy
 800b60e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b612:	bf00      	nop
 800b614:	3708      	adds	r7, #8
 800b616:	46bd      	mov	sp, r7
 800b618:	bd80      	pop	{r7, pc}
 800b61a:	bf00      	nop
 800b61c:	200020c4 	.word	0x200020c4
 800b620:	20001bf0 	.word	0x20001bf0
 800b624:	200020d0 	.word	0x200020d0
 800b628:	200020e0 	.word	0x200020e0
 800b62c:	200020cc 	.word	0x200020cc
 800b630:	20001bf4 	.word	0x20001bf4
 800b634:	e000ed04 	.word	0xe000ed04

0800b638 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800b638:	b580      	push	{r7, lr}
 800b63a:	b084      	sub	sp, #16
 800b63c:	af00      	add	r7, sp, #0
 800b63e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800b640:	2300      	movs	r3, #0
 800b642:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800b644:	687b      	ldr	r3, [r7, #4]
 800b646:	2b00      	cmp	r3, #0
 800b648:	d017      	beq.n	800b67a <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800b64a:	4b13      	ldr	r3, [pc, #76]	; (800b698 <vTaskDelay+0x60>)
 800b64c:	681b      	ldr	r3, [r3, #0]
 800b64e:	2b00      	cmp	r3, #0
 800b650:	d00a      	beq.n	800b668 <vTaskDelay+0x30>
	__asm volatile
 800b652:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b656:	f383 8811 	msr	BASEPRI, r3
 800b65a:	f3bf 8f6f 	isb	sy
 800b65e:	f3bf 8f4f 	dsb	sy
 800b662:	60bb      	str	r3, [r7, #8]
}
 800b664:	bf00      	nop
 800b666:	e7fe      	b.n	800b666 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800b668:	f000 f88a 	bl	800b780 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800b66c:	2100      	movs	r1, #0
 800b66e:	6878      	ldr	r0, [r7, #4]
 800b670:	f000 fe10 	bl	800c294 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800b674:	f000 f892 	bl	800b79c <xTaskResumeAll>
 800b678:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800b67a:	68fb      	ldr	r3, [r7, #12]
 800b67c:	2b00      	cmp	r3, #0
 800b67e:	d107      	bne.n	800b690 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800b680:	4b06      	ldr	r3, [pc, #24]	; (800b69c <vTaskDelay+0x64>)
 800b682:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b686:	601a      	str	r2, [r3, #0]
 800b688:	f3bf 8f4f 	dsb	sy
 800b68c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800b690:	bf00      	nop
 800b692:	3710      	adds	r7, #16
 800b694:	46bd      	mov	sp, r7
 800b696:	bd80      	pop	{r7, pc}
 800b698:	200020ec 	.word	0x200020ec
 800b69c:	e000ed04 	.word	0xe000ed04

0800b6a0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800b6a0:	b580      	push	{r7, lr}
 800b6a2:	b08a      	sub	sp, #40	; 0x28
 800b6a4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800b6a6:	2300      	movs	r3, #0
 800b6a8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800b6aa:	2300      	movs	r3, #0
 800b6ac:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800b6ae:	463a      	mov	r2, r7
 800b6b0:	1d39      	adds	r1, r7, #4
 800b6b2:	f107 0308 	add.w	r3, r7, #8
 800b6b6:	4618      	mov	r0, r3
 800b6b8:	f7fe fdec 	bl	800a294 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800b6bc:	6839      	ldr	r1, [r7, #0]
 800b6be:	687b      	ldr	r3, [r7, #4]
 800b6c0:	68ba      	ldr	r2, [r7, #8]
 800b6c2:	9202      	str	r2, [sp, #8]
 800b6c4:	9301      	str	r3, [sp, #4]
 800b6c6:	2300      	movs	r3, #0
 800b6c8:	9300      	str	r3, [sp, #0]
 800b6ca:	2300      	movs	r3, #0
 800b6cc:	460a      	mov	r2, r1
 800b6ce:	4924      	ldr	r1, [pc, #144]	; (800b760 <vTaskStartScheduler+0xc0>)
 800b6d0:	4824      	ldr	r0, [pc, #144]	; (800b764 <vTaskStartScheduler+0xc4>)
 800b6d2:	f7ff fe02 	bl	800b2da <xTaskCreateStatic>
 800b6d6:	4603      	mov	r3, r0
 800b6d8:	4a23      	ldr	r2, [pc, #140]	; (800b768 <vTaskStartScheduler+0xc8>)
 800b6da:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800b6dc:	4b22      	ldr	r3, [pc, #136]	; (800b768 <vTaskStartScheduler+0xc8>)
 800b6de:	681b      	ldr	r3, [r3, #0]
 800b6e0:	2b00      	cmp	r3, #0
 800b6e2:	d002      	beq.n	800b6ea <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800b6e4:	2301      	movs	r3, #1
 800b6e6:	617b      	str	r3, [r7, #20]
 800b6e8:	e001      	b.n	800b6ee <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800b6ea:	2300      	movs	r3, #0
 800b6ec:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800b6ee:	697b      	ldr	r3, [r7, #20]
 800b6f0:	2b01      	cmp	r3, #1
 800b6f2:	d102      	bne.n	800b6fa <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800b6f4:	f000 fe22 	bl	800c33c <xTimerCreateTimerTask>
 800b6f8:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800b6fa:	697b      	ldr	r3, [r7, #20]
 800b6fc:	2b01      	cmp	r3, #1
 800b6fe:	d11b      	bne.n	800b738 <vTaskStartScheduler+0x98>
	__asm volatile
 800b700:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b704:	f383 8811 	msr	BASEPRI, r3
 800b708:	f3bf 8f6f 	isb	sy
 800b70c:	f3bf 8f4f 	dsb	sy
 800b710:	613b      	str	r3, [r7, #16]
}
 800b712:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800b714:	4b15      	ldr	r3, [pc, #84]	; (800b76c <vTaskStartScheduler+0xcc>)
 800b716:	681b      	ldr	r3, [r3, #0]
 800b718:	3354      	adds	r3, #84	; 0x54
 800b71a:	4a15      	ldr	r2, [pc, #84]	; (800b770 <vTaskStartScheduler+0xd0>)
 800b71c:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800b71e:	4b15      	ldr	r3, [pc, #84]	; (800b774 <vTaskStartScheduler+0xd4>)
 800b720:	f04f 32ff 	mov.w	r2, #4294967295
 800b724:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800b726:	4b14      	ldr	r3, [pc, #80]	; (800b778 <vTaskStartScheduler+0xd8>)
 800b728:	2201      	movs	r2, #1
 800b72a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 800b72c:	4b13      	ldr	r3, [pc, #76]	; (800b77c <vTaskStartScheduler+0xdc>)
 800b72e:	2200      	movs	r2, #0
 800b730:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800b732:	f001 f9f5 	bl	800cb20 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800b736:	e00e      	b.n	800b756 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800b738:	697b      	ldr	r3, [r7, #20]
 800b73a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b73e:	d10a      	bne.n	800b756 <vTaskStartScheduler+0xb6>
	__asm volatile
 800b740:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b744:	f383 8811 	msr	BASEPRI, r3
 800b748:	f3bf 8f6f 	isb	sy
 800b74c:	f3bf 8f4f 	dsb	sy
 800b750:	60fb      	str	r3, [r7, #12]
}
 800b752:	bf00      	nop
 800b754:	e7fe      	b.n	800b754 <vTaskStartScheduler+0xb4>
}
 800b756:	bf00      	nop
 800b758:	3718      	adds	r7, #24
 800b75a:	46bd      	mov	sp, r7
 800b75c:	bd80      	pop	{r7, pc}
 800b75e:	bf00      	nop
 800b760:	0800d608 	.word	0x0800d608
 800b764:	0800bdad 	.word	0x0800bdad
 800b768:	200020e8 	.word	0x200020e8
 800b76c:	20001bf0 	.word	0x20001bf0
 800b770:	20000090 	.word	0x20000090
 800b774:	200020e4 	.word	0x200020e4
 800b778:	200020d0 	.word	0x200020d0
 800b77c:	200020c8 	.word	0x200020c8

0800b780 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800b780:	b480      	push	{r7}
 800b782:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800b784:	4b04      	ldr	r3, [pc, #16]	; (800b798 <vTaskSuspendAll+0x18>)
 800b786:	681b      	ldr	r3, [r3, #0]
 800b788:	3301      	adds	r3, #1
 800b78a:	4a03      	ldr	r2, [pc, #12]	; (800b798 <vTaskSuspendAll+0x18>)
 800b78c:	6013      	str	r3, [r2, #0]
}
 800b78e:	bf00      	nop
 800b790:	46bd      	mov	sp, r7
 800b792:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b796:	4770      	bx	lr
 800b798:	200020ec 	.word	0x200020ec

0800b79c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800b79c:	b580      	push	{r7, lr}
 800b79e:	b084      	sub	sp, #16
 800b7a0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800b7a2:	2300      	movs	r3, #0
 800b7a4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800b7a6:	2300      	movs	r3, #0
 800b7a8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800b7aa:	4b42      	ldr	r3, [pc, #264]	; (800b8b4 <xTaskResumeAll+0x118>)
 800b7ac:	681b      	ldr	r3, [r3, #0]
 800b7ae:	2b00      	cmp	r3, #0
 800b7b0:	d10a      	bne.n	800b7c8 <xTaskResumeAll+0x2c>
	__asm volatile
 800b7b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b7b6:	f383 8811 	msr	BASEPRI, r3
 800b7ba:	f3bf 8f6f 	isb	sy
 800b7be:	f3bf 8f4f 	dsb	sy
 800b7c2:	603b      	str	r3, [r7, #0]
}
 800b7c4:	bf00      	nop
 800b7c6:	e7fe      	b.n	800b7c6 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800b7c8:	f001 fa4c 	bl	800cc64 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800b7cc:	4b39      	ldr	r3, [pc, #228]	; (800b8b4 <xTaskResumeAll+0x118>)
 800b7ce:	681b      	ldr	r3, [r3, #0]
 800b7d0:	3b01      	subs	r3, #1
 800b7d2:	4a38      	ldr	r2, [pc, #224]	; (800b8b4 <xTaskResumeAll+0x118>)
 800b7d4:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b7d6:	4b37      	ldr	r3, [pc, #220]	; (800b8b4 <xTaskResumeAll+0x118>)
 800b7d8:	681b      	ldr	r3, [r3, #0]
 800b7da:	2b00      	cmp	r3, #0
 800b7dc:	d162      	bne.n	800b8a4 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800b7de:	4b36      	ldr	r3, [pc, #216]	; (800b8b8 <xTaskResumeAll+0x11c>)
 800b7e0:	681b      	ldr	r3, [r3, #0]
 800b7e2:	2b00      	cmp	r3, #0
 800b7e4:	d05e      	beq.n	800b8a4 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b7e6:	e02f      	b.n	800b848 <xTaskResumeAll+0xac>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 800b7e8:	4b34      	ldr	r3, [pc, #208]	; (800b8bc <xTaskResumeAll+0x120>)
 800b7ea:	68db      	ldr	r3, [r3, #12]
 800b7ec:	68db      	ldr	r3, [r3, #12]
 800b7ee:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b7f0:	68fb      	ldr	r3, [r7, #12]
 800b7f2:	3318      	adds	r3, #24
 800b7f4:	4618      	mov	r0, r3
 800b7f6:	f7fe fe0b 	bl	800a410 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b7fa:	68fb      	ldr	r3, [r7, #12]
 800b7fc:	3304      	adds	r3, #4
 800b7fe:	4618      	mov	r0, r3
 800b800:	f7fe fe06 	bl	800a410 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800b804:	68fb      	ldr	r3, [r7, #12]
 800b806:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b808:	4b2d      	ldr	r3, [pc, #180]	; (800b8c0 <xTaskResumeAll+0x124>)
 800b80a:	681b      	ldr	r3, [r3, #0]
 800b80c:	429a      	cmp	r2, r3
 800b80e:	d903      	bls.n	800b818 <xTaskResumeAll+0x7c>
 800b810:	68fb      	ldr	r3, [r7, #12]
 800b812:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b814:	4a2a      	ldr	r2, [pc, #168]	; (800b8c0 <xTaskResumeAll+0x124>)
 800b816:	6013      	str	r3, [r2, #0]
 800b818:	68fb      	ldr	r3, [r7, #12]
 800b81a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b81c:	4613      	mov	r3, r2
 800b81e:	009b      	lsls	r3, r3, #2
 800b820:	4413      	add	r3, r2
 800b822:	009b      	lsls	r3, r3, #2
 800b824:	4a27      	ldr	r2, [pc, #156]	; (800b8c4 <xTaskResumeAll+0x128>)
 800b826:	441a      	add	r2, r3
 800b828:	68fb      	ldr	r3, [r7, #12]
 800b82a:	3304      	adds	r3, #4
 800b82c:	4619      	mov	r1, r3
 800b82e:	4610      	mov	r0, r2
 800b830:	f7fe fd91 	bl	800a356 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b834:	68fb      	ldr	r3, [r7, #12]
 800b836:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b838:	4b23      	ldr	r3, [pc, #140]	; (800b8c8 <xTaskResumeAll+0x12c>)
 800b83a:	681b      	ldr	r3, [r3, #0]
 800b83c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b83e:	429a      	cmp	r2, r3
 800b840:	d302      	bcc.n	800b848 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800b842:	4b22      	ldr	r3, [pc, #136]	; (800b8cc <xTaskResumeAll+0x130>)
 800b844:	2201      	movs	r2, #1
 800b846:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b848:	4b1c      	ldr	r3, [pc, #112]	; (800b8bc <xTaskResumeAll+0x120>)
 800b84a:	681b      	ldr	r3, [r3, #0]
 800b84c:	2b00      	cmp	r3, #0
 800b84e:	d1cb      	bne.n	800b7e8 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800b850:	68fb      	ldr	r3, [r7, #12]
 800b852:	2b00      	cmp	r3, #0
 800b854:	d001      	beq.n	800b85a <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800b856:	f000 fb63 	bl	800bf20 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800b85a:	4b1d      	ldr	r3, [pc, #116]	; (800b8d0 <xTaskResumeAll+0x134>)
 800b85c:	681b      	ldr	r3, [r3, #0]
 800b85e:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800b860:	687b      	ldr	r3, [r7, #4]
 800b862:	2b00      	cmp	r3, #0
 800b864:	d010      	beq.n	800b888 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800b866:	f000 f847 	bl	800b8f8 <xTaskIncrementTick>
 800b86a:	4603      	mov	r3, r0
 800b86c:	2b00      	cmp	r3, #0
 800b86e:	d002      	beq.n	800b876 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800b870:	4b16      	ldr	r3, [pc, #88]	; (800b8cc <xTaskResumeAll+0x130>)
 800b872:	2201      	movs	r2, #1
 800b874:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800b876:	687b      	ldr	r3, [r7, #4]
 800b878:	3b01      	subs	r3, #1
 800b87a:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800b87c:	687b      	ldr	r3, [r7, #4]
 800b87e:	2b00      	cmp	r3, #0
 800b880:	d1f1      	bne.n	800b866 <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 800b882:	4b13      	ldr	r3, [pc, #76]	; (800b8d0 <xTaskResumeAll+0x134>)
 800b884:	2200      	movs	r2, #0
 800b886:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800b888:	4b10      	ldr	r3, [pc, #64]	; (800b8cc <xTaskResumeAll+0x130>)
 800b88a:	681b      	ldr	r3, [r3, #0]
 800b88c:	2b00      	cmp	r3, #0
 800b88e:	d009      	beq.n	800b8a4 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800b890:	2301      	movs	r3, #1
 800b892:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800b894:	4b0f      	ldr	r3, [pc, #60]	; (800b8d4 <xTaskResumeAll+0x138>)
 800b896:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b89a:	601a      	str	r2, [r3, #0]
 800b89c:	f3bf 8f4f 	dsb	sy
 800b8a0:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800b8a4:	f001 fa0e 	bl	800ccc4 <vPortExitCritical>

	return xAlreadyYielded;
 800b8a8:	68bb      	ldr	r3, [r7, #8]
}
 800b8aa:	4618      	mov	r0, r3
 800b8ac:	3710      	adds	r7, #16
 800b8ae:	46bd      	mov	sp, r7
 800b8b0:	bd80      	pop	{r7, pc}
 800b8b2:	bf00      	nop
 800b8b4:	200020ec 	.word	0x200020ec
 800b8b8:	200020c4 	.word	0x200020c4
 800b8bc:	20002084 	.word	0x20002084
 800b8c0:	200020cc 	.word	0x200020cc
 800b8c4:	20001bf4 	.word	0x20001bf4
 800b8c8:	20001bf0 	.word	0x20001bf0
 800b8cc:	200020d8 	.word	0x200020d8
 800b8d0:	200020d4 	.word	0x200020d4
 800b8d4:	e000ed04 	.word	0xe000ed04

0800b8d8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800b8d8:	b480      	push	{r7}
 800b8da:	b083      	sub	sp, #12
 800b8dc:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800b8de:	4b05      	ldr	r3, [pc, #20]	; (800b8f4 <xTaskGetTickCount+0x1c>)
 800b8e0:	681b      	ldr	r3, [r3, #0]
 800b8e2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800b8e4:	687b      	ldr	r3, [r7, #4]
}
 800b8e6:	4618      	mov	r0, r3
 800b8e8:	370c      	adds	r7, #12
 800b8ea:	46bd      	mov	sp, r7
 800b8ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8f0:	4770      	bx	lr
 800b8f2:	bf00      	nop
 800b8f4:	200020c8 	.word	0x200020c8

0800b8f8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800b8f8:	b580      	push	{r7, lr}
 800b8fa:	b086      	sub	sp, #24
 800b8fc:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800b8fe:	2300      	movs	r3, #0
 800b900:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b902:	4b51      	ldr	r3, [pc, #324]	; (800ba48 <xTaskIncrementTick+0x150>)
 800b904:	681b      	ldr	r3, [r3, #0]
 800b906:	2b00      	cmp	r3, #0
 800b908:	f040 808e 	bne.w	800ba28 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800b90c:	4b4f      	ldr	r3, [pc, #316]	; (800ba4c <xTaskIncrementTick+0x154>)
 800b90e:	681b      	ldr	r3, [r3, #0]
 800b910:	3301      	adds	r3, #1
 800b912:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800b914:	4a4d      	ldr	r2, [pc, #308]	; (800ba4c <xTaskIncrementTick+0x154>)
 800b916:	693b      	ldr	r3, [r7, #16]
 800b918:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800b91a:	693b      	ldr	r3, [r7, #16]
 800b91c:	2b00      	cmp	r3, #0
 800b91e:	d120      	bne.n	800b962 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800b920:	4b4b      	ldr	r3, [pc, #300]	; (800ba50 <xTaskIncrementTick+0x158>)
 800b922:	681b      	ldr	r3, [r3, #0]
 800b924:	681b      	ldr	r3, [r3, #0]
 800b926:	2b00      	cmp	r3, #0
 800b928:	d00a      	beq.n	800b940 <xTaskIncrementTick+0x48>
	__asm volatile
 800b92a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b92e:	f383 8811 	msr	BASEPRI, r3
 800b932:	f3bf 8f6f 	isb	sy
 800b936:	f3bf 8f4f 	dsb	sy
 800b93a:	603b      	str	r3, [r7, #0]
}
 800b93c:	bf00      	nop
 800b93e:	e7fe      	b.n	800b93e <xTaskIncrementTick+0x46>
 800b940:	4b43      	ldr	r3, [pc, #268]	; (800ba50 <xTaskIncrementTick+0x158>)
 800b942:	681b      	ldr	r3, [r3, #0]
 800b944:	60fb      	str	r3, [r7, #12]
 800b946:	4b43      	ldr	r3, [pc, #268]	; (800ba54 <xTaskIncrementTick+0x15c>)
 800b948:	681b      	ldr	r3, [r3, #0]
 800b94a:	4a41      	ldr	r2, [pc, #260]	; (800ba50 <xTaskIncrementTick+0x158>)
 800b94c:	6013      	str	r3, [r2, #0]
 800b94e:	4a41      	ldr	r2, [pc, #260]	; (800ba54 <xTaskIncrementTick+0x15c>)
 800b950:	68fb      	ldr	r3, [r7, #12]
 800b952:	6013      	str	r3, [r2, #0]
 800b954:	4b40      	ldr	r3, [pc, #256]	; (800ba58 <xTaskIncrementTick+0x160>)
 800b956:	681b      	ldr	r3, [r3, #0]
 800b958:	3301      	adds	r3, #1
 800b95a:	4a3f      	ldr	r2, [pc, #252]	; (800ba58 <xTaskIncrementTick+0x160>)
 800b95c:	6013      	str	r3, [r2, #0]
 800b95e:	f000 fadf 	bl	800bf20 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800b962:	4b3e      	ldr	r3, [pc, #248]	; (800ba5c <xTaskIncrementTick+0x164>)
 800b964:	681b      	ldr	r3, [r3, #0]
 800b966:	693a      	ldr	r2, [r7, #16]
 800b968:	429a      	cmp	r2, r3
 800b96a:	d34e      	bcc.n	800ba0a <xTaskIncrementTick+0x112>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b96c:	4b38      	ldr	r3, [pc, #224]	; (800ba50 <xTaskIncrementTick+0x158>)
 800b96e:	681b      	ldr	r3, [r3, #0]
 800b970:	681b      	ldr	r3, [r3, #0]
 800b972:	2b00      	cmp	r3, #0
 800b974:	d101      	bne.n	800b97a <xTaskIncrementTick+0x82>
 800b976:	2301      	movs	r3, #1
 800b978:	e000      	b.n	800b97c <xTaskIncrementTick+0x84>
 800b97a:	2300      	movs	r3, #0
 800b97c:	2b00      	cmp	r3, #0
 800b97e:	d004      	beq.n	800b98a <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b980:	4b36      	ldr	r3, [pc, #216]	; (800ba5c <xTaskIncrementTick+0x164>)
 800b982:	f04f 32ff 	mov.w	r2, #4294967295
 800b986:	601a      	str	r2, [r3, #0]
					break;
 800b988:	e03f      	b.n	800ba0a <xTaskIncrementTick+0x112>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800b98a:	4b31      	ldr	r3, [pc, #196]	; (800ba50 <xTaskIncrementTick+0x158>)
 800b98c:	681b      	ldr	r3, [r3, #0]
 800b98e:	68db      	ldr	r3, [r3, #12]
 800b990:	68db      	ldr	r3, [r3, #12]
 800b992:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800b994:	68bb      	ldr	r3, [r7, #8]
 800b996:	685b      	ldr	r3, [r3, #4]
 800b998:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800b99a:	693a      	ldr	r2, [r7, #16]
 800b99c:	687b      	ldr	r3, [r7, #4]
 800b99e:	429a      	cmp	r2, r3
 800b9a0:	d203      	bcs.n	800b9aa <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800b9a2:	4a2e      	ldr	r2, [pc, #184]	; (800ba5c <xTaskIncrementTick+0x164>)
 800b9a4:	687b      	ldr	r3, [r7, #4]
 800b9a6:	6013      	str	r3, [r2, #0]
						break;
 800b9a8:	e02f      	b.n	800ba0a <xTaskIncrementTick+0x112>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b9aa:	68bb      	ldr	r3, [r7, #8]
 800b9ac:	3304      	adds	r3, #4
 800b9ae:	4618      	mov	r0, r3
 800b9b0:	f7fe fd2e 	bl	800a410 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800b9b4:	68bb      	ldr	r3, [r7, #8]
 800b9b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b9b8:	2b00      	cmp	r3, #0
 800b9ba:	d004      	beq.n	800b9c6 <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b9bc:	68bb      	ldr	r3, [r7, #8]
 800b9be:	3318      	adds	r3, #24
 800b9c0:	4618      	mov	r0, r3
 800b9c2:	f7fe fd25 	bl	800a410 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800b9c6:	68bb      	ldr	r3, [r7, #8]
 800b9c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b9ca:	4b25      	ldr	r3, [pc, #148]	; (800ba60 <xTaskIncrementTick+0x168>)
 800b9cc:	681b      	ldr	r3, [r3, #0]
 800b9ce:	429a      	cmp	r2, r3
 800b9d0:	d903      	bls.n	800b9da <xTaskIncrementTick+0xe2>
 800b9d2:	68bb      	ldr	r3, [r7, #8]
 800b9d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b9d6:	4a22      	ldr	r2, [pc, #136]	; (800ba60 <xTaskIncrementTick+0x168>)
 800b9d8:	6013      	str	r3, [r2, #0]
 800b9da:	68bb      	ldr	r3, [r7, #8]
 800b9dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b9de:	4613      	mov	r3, r2
 800b9e0:	009b      	lsls	r3, r3, #2
 800b9e2:	4413      	add	r3, r2
 800b9e4:	009b      	lsls	r3, r3, #2
 800b9e6:	4a1f      	ldr	r2, [pc, #124]	; (800ba64 <xTaskIncrementTick+0x16c>)
 800b9e8:	441a      	add	r2, r3
 800b9ea:	68bb      	ldr	r3, [r7, #8]
 800b9ec:	3304      	adds	r3, #4
 800b9ee:	4619      	mov	r1, r3
 800b9f0:	4610      	mov	r0, r2
 800b9f2:	f7fe fcb0 	bl	800a356 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b9f6:	68bb      	ldr	r3, [r7, #8]
 800b9f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b9fa:	4b1b      	ldr	r3, [pc, #108]	; (800ba68 <xTaskIncrementTick+0x170>)
 800b9fc:	681b      	ldr	r3, [r3, #0]
 800b9fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ba00:	429a      	cmp	r2, r3
 800ba02:	d3b3      	bcc.n	800b96c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800ba04:	2301      	movs	r3, #1
 800ba06:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800ba08:	e7b0      	b.n	800b96c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800ba0a:	4b17      	ldr	r3, [pc, #92]	; (800ba68 <xTaskIncrementTick+0x170>)
 800ba0c:	681b      	ldr	r3, [r3, #0]
 800ba0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ba10:	4914      	ldr	r1, [pc, #80]	; (800ba64 <xTaskIncrementTick+0x16c>)
 800ba12:	4613      	mov	r3, r2
 800ba14:	009b      	lsls	r3, r3, #2
 800ba16:	4413      	add	r3, r2
 800ba18:	009b      	lsls	r3, r3, #2
 800ba1a:	440b      	add	r3, r1
 800ba1c:	681b      	ldr	r3, [r3, #0]
 800ba1e:	2b01      	cmp	r3, #1
 800ba20:	d907      	bls.n	800ba32 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 800ba22:	2301      	movs	r3, #1
 800ba24:	617b      	str	r3, [r7, #20]
 800ba26:	e004      	b.n	800ba32 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800ba28:	4b10      	ldr	r3, [pc, #64]	; (800ba6c <xTaskIncrementTick+0x174>)
 800ba2a:	681b      	ldr	r3, [r3, #0]
 800ba2c:	3301      	adds	r3, #1
 800ba2e:	4a0f      	ldr	r2, [pc, #60]	; (800ba6c <xTaskIncrementTick+0x174>)
 800ba30:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800ba32:	4b0f      	ldr	r3, [pc, #60]	; (800ba70 <xTaskIncrementTick+0x178>)
 800ba34:	681b      	ldr	r3, [r3, #0]
 800ba36:	2b00      	cmp	r3, #0
 800ba38:	d001      	beq.n	800ba3e <xTaskIncrementTick+0x146>
		{
			xSwitchRequired = pdTRUE;
 800ba3a:	2301      	movs	r3, #1
 800ba3c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800ba3e:	697b      	ldr	r3, [r7, #20]
}
 800ba40:	4618      	mov	r0, r3
 800ba42:	3718      	adds	r7, #24
 800ba44:	46bd      	mov	sp, r7
 800ba46:	bd80      	pop	{r7, pc}
 800ba48:	200020ec 	.word	0x200020ec
 800ba4c:	200020c8 	.word	0x200020c8
 800ba50:	2000207c 	.word	0x2000207c
 800ba54:	20002080 	.word	0x20002080
 800ba58:	200020dc 	.word	0x200020dc
 800ba5c:	200020e4 	.word	0x200020e4
 800ba60:	200020cc 	.word	0x200020cc
 800ba64:	20001bf4 	.word	0x20001bf4
 800ba68:	20001bf0 	.word	0x20001bf0
 800ba6c:	200020d4 	.word	0x200020d4
 800ba70:	200020d8 	.word	0x200020d8

0800ba74 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800ba74:	b480      	push	{r7}
 800ba76:	b085      	sub	sp, #20
 800ba78:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800ba7a:	4b2a      	ldr	r3, [pc, #168]	; (800bb24 <vTaskSwitchContext+0xb0>)
 800ba7c:	681b      	ldr	r3, [r3, #0]
 800ba7e:	2b00      	cmp	r3, #0
 800ba80:	d003      	beq.n	800ba8a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800ba82:	4b29      	ldr	r3, [pc, #164]	; (800bb28 <vTaskSwitchContext+0xb4>)
 800ba84:	2201      	movs	r2, #1
 800ba86:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800ba88:	e046      	b.n	800bb18 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 800ba8a:	4b27      	ldr	r3, [pc, #156]	; (800bb28 <vTaskSwitchContext+0xb4>)
 800ba8c:	2200      	movs	r2, #0
 800ba8e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 800ba90:	4b26      	ldr	r3, [pc, #152]	; (800bb2c <vTaskSwitchContext+0xb8>)
 800ba92:	681b      	ldr	r3, [r3, #0]
 800ba94:	60fb      	str	r3, [r7, #12]
 800ba96:	e010      	b.n	800baba <vTaskSwitchContext+0x46>
 800ba98:	68fb      	ldr	r3, [r7, #12]
 800ba9a:	2b00      	cmp	r3, #0
 800ba9c:	d10a      	bne.n	800bab4 <vTaskSwitchContext+0x40>
	__asm volatile
 800ba9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800baa2:	f383 8811 	msr	BASEPRI, r3
 800baa6:	f3bf 8f6f 	isb	sy
 800baaa:	f3bf 8f4f 	dsb	sy
 800baae:	607b      	str	r3, [r7, #4]
}
 800bab0:	bf00      	nop
 800bab2:	e7fe      	b.n	800bab2 <vTaskSwitchContext+0x3e>
 800bab4:	68fb      	ldr	r3, [r7, #12]
 800bab6:	3b01      	subs	r3, #1
 800bab8:	60fb      	str	r3, [r7, #12]
 800baba:	491d      	ldr	r1, [pc, #116]	; (800bb30 <vTaskSwitchContext+0xbc>)
 800babc:	68fa      	ldr	r2, [r7, #12]
 800babe:	4613      	mov	r3, r2
 800bac0:	009b      	lsls	r3, r3, #2
 800bac2:	4413      	add	r3, r2
 800bac4:	009b      	lsls	r3, r3, #2
 800bac6:	440b      	add	r3, r1
 800bac8:	681b      	ldr	r3, [r3, #0]
 800baca:	2b00      	cmp	r3, #0
 800bacc:	d0e4      	beq.n	800ba98 <vTaskSwitchContext+0x24>
 800bace:	68fa      	ldr	r2, [r7, #12]
 800bad0:	4613      	mov	r3, r2
 800bad2:	009b      	lsls	r3, r3, #2
 800bad4:	4413      	add	r3, r2
 800bad6:	009b      	lsls	r3, r3, #2
 800bad8:	4a15      	ldr	r2, [pc, #84]	; (800bb30 <vTaskSwitchContext+0xbc>)
 800bada:	4413      	add	r3, r2
 800badc:	60bb      	str	r3, [r7, #8]
 800bade:	68bb      	ldr	r3, [r7, #8]
 800bae0:	685b      	ldr	r3, [r3, #4]
 800bae2:	685a      	ldr	r2, [r3, #4]
 800bae4:	68bb      	ldr	r3, [r7, #8]
 800bae6:	605a      	str	r2, [r3, #4]
 800bae8:	68bb      	ldr	r3, [r7, #8]
 800baea:	685a      	ldr	r2, [r3, #4]
 800baec:	68bb      	ldr	r3, [r7, #8]
 800baee:	3308      	adds	r3, #8
 800baf0:	429a      	cmp	r2, r3
 800baf2:	d104      	bne.n	800bafe <vTaskSwitchContext+0x8a>
 800baf4:	68bb      	ldr	r3, [r7, #8]
 800baf6:	685b      	ldr	r3, [r3, #4]
 800baf8:	685a      	ldr	r2, [r3, #4]
 800bafa:	68bb      	ldr	r3, [r7, #8]
 800bafc:	605a      	str	r2, [r3, #4]
 800bafe:	68bb      	ldr	r3, [r7, #8]
 800bb00:	685b      	ldr	r3, [r3, #4]
 800bb02:	68db      	ldr	r3, [r3, #12]
 800bb04:	4a0b      	ldr	r2, [pc, #44]	; (800bb34 <vTaskSwitchContext+0xc0>)
 800bb06:	6013      	str	r3, [r2, #0]
 800bb08:	4a08      	ldr	r2, [pc, #32]	; (800bb2c <vTaskSwitchContext+0xb8>)
 800bb0a:	68fb      	ldr	r3, [r7, #12]
 800bb0c:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800bb0e:	4b09      	ldr	r3, [pc, #36]	; (800bb34 <vTaskSwitchContext+0xc0>)
 800bb10:	681b      	ldr	r3, [r3, #0]
 800bb12:	3354      	adds	r3, #84	; 0x54
 800bb14:	4a08      	ldr	r2, [pc, #32]	; (800bb38 <vTaskSwitchContext+0xc4>)
 800bb16:	6013      	str	r3, [r2, #0]
}
 800bb18:	bf00      	nop
 800bb1a:	3714      	adds	r7, #20
 800bb1c:	46bd      	mov	sp, r7
 800bb1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb22:	4770      	bx	lr
 800bb24:	200020ec 	.word	0x200020ec
 800bb28:	200020d8 	.word	0x200020d8
 800bb2c:	200020cc 	.word	0x200020cc
 800bb30:	20001bf4 	.word	0x20001bf4
 800bb34:	20001bf0 	.word	0x20001bf0
 800bb38:	20000090 	.word	0x20000090

0800bb3c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800bb3c:	b580      	push	{r7, lr}
 800bb3e:	b084      	sub	sp, #16
 800bb40:	af00      	add	r7, sp, #0
 800bb42:	6078      	str	r0, [r7, #4]
 800bb44:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800bb46:	687b      	ldr	r3, [r7, #4]
 800bb48:	2b00      	cmp	r3, #0
 800bb4a:	d10a      	bne.n	800bb62 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800bb4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb50:	f383 8811 	msr	BASEPRI, r3
 800bb54:	f3bf 8f6f 	isb	sy
 800bb58:	f3bf 8f4f 	dsb	sy
 800bb5c:	60fb      	str	r3, [r7, #12]
}
 800bb5e:	bf00      	nop
 800bb60:	e7fe      	b.n	800bb60 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800bb62:	4b07      	ldr	r3, [pc, #28]	; (800bb80 <vTaskPlaceOnEventList+0x44>)
 800bb64:	681b      	ldr	r3, [r3, #0]
 800bb66:	3318      	adds	r3, #24
 800bb68:	4619      	mov	r1, r3
 800bb6a:	6878      	ldr	r0, [r7, #4]
 800bb6c:	f7fe fc17 	bl	800a39e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800bb70:	2101      	movs	r1, #1
 800bb72:	6838      	ldr	r0, [r7, #0]
 800bb74:	f000 fb8e 	bl	800c294 <prvAddCurrentTaskToDelayedList>
}
 800bb78:	bf00      	nop
 800bb7a:	3710      	adds	r7, #16
 800bb7c:	46bd      	mov	sp, r7
 800bb7e:	bd80      	pop	{r7, pc}
 800bb80:	20001bf0 	.word	0x20001bf0

0800bb84 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800bb84:	b580      	push	{r7, lr}
 800bb86:	b086      	sub	sp, #24
 800bb88:	af00      	add	r7, sp, #0
 800bb8a:	60f8      	str	r0, [r7, #12]
 800bb8c:	60b9      	str	r1, [r7, #8]
 800bb8e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800bb90:	68fb      	ldr	r3, [r7, #12]
 800bb92:	2b00      	cmp	r3, #0
 800bb94:	d10a      	bne.n	800bbac <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800bb96:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb9a:	f383 8811 	msr	BASEPRI, r3
 800bb9e:	f3bf 8f6f 	isb	sy
 800bba2:	f3bf 8f4f 	dsb	sy
 800bba6:	617b      	str	r3, [r7, #20]
}
 800bba8:	bf00      	nop
 800bbaa:	e7fe      	b.n	800bbaa <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800bbac:	4b0a      	ldr	r3, [pc, #40]	; (800bbd8 <vTaskPlaceOnEventListRestricted+0x54>)
 800bbae:	681b      	ldr	r3, [r3, #0]
 800bbb0:	3318      	adds	r3, #24
 800bbb2:	4619      	mov	r1, r3
 800bbb4:	68f8      	ldr	r0, [r7, #12]
 800bbb6:	f7fe fbce 	bl	800a356 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800bbba:	687b      	ldr	r3, [r7, #4]
 800bbbc:	2b00      	cmp	r3, #0
 800bbbe:	d002      	beq.n	800bbc6 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800bbc0:	f04f 33ff 	mov.w	r3, #4294967295
 800bbc4:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800bbc6:	6879      	ldr	r1, [r7, #4]
 800bbc8:	68b8      	ldr	r0, [r7, #8]
 800bbca:	f000 fb63 	bl	800c294 <prvAddCurrentTaskToDelayedList>
	}
 800bbce:	bf00      	nop
 800bbd0:	3718      	adds	r7, #24
 800bbd2:	46bd      	mov	sp, r7
 800bbd4:	bd80      	pop	{r7, pc}
 800bbd6:	bf00      	nop
 800bbd8:	20001bf0 	.word	0x20001bf0

0800bbdc <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800bbdc:	b580      	push	{r7, lr}
 800bbde:	b086      	sub	sp, #24
 800bbe0:	af00      	add	r7, sp, #0
 800bbe2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 800bbe4:	687b      	ldr	r3, [r7, #4]
 800bbe6:	68db      	ldr	r3, [r3, #12]
 800bbe8:	68db      	ldr	r3, [r3, #12]
 800bbea:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800bbec:	693b      	ldr	r3, [r7, #16]
 800bbee:	2b00      	cmp	r3, #0
 800bbf0:	d10a      	bne.n	800bc08 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800bbf2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bbf6:	f383 8811 	msr	BASEPRI, r3
 800bbfa:	f3bf 8f6f 	isb	sy
 800bbfe:	f3bf 8f4f 	dsb	sy
 800bc02:	60fb      	str	r3, [r7, #12]
}
 800bc04:	bf00      	nop
 800bc06:	e7fe      	b.n	800bc06 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800bc08:	693b      	ldr	r3, [r7, #16]
 800bc0a:	3318      	adds	r3, #24
 800bc0c:	4618      	mov	r0, r3
 800bc0e:	f7fe fbff 	bl	800a410 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800bc12:	4b1e      	ldr	r3, [pc, #120]	; (800bc8c <xTaskRemoveFromEventList+0xb0>)
 800bc14:	681b      	ldr	r3, [r3, #0]
 800bc16:	2b00      	cmp	r3, #0
 800bc18:	d11d      	bne.n	800bc56 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800bc1a:	693b      	ldr	r3, [r7, #16]
 800bc1c:	3304      	adds	r3, #4
 800bc1e:	4618      	mov	r0, r3
 800bc20:	f7fe fbf6 	bl	800a410 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800bc24:	693b      	ldr	r3, [r7, #16]
 800bc26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bc28:	4b19      	ldr	r3, [pc, #100]	; (800bc90 <xTaskRemoveFromEventList+0xb4>)
 800bc2a:	681b      	ldr	r3, [r3, #0]
 800bc2c:	429a      	cmp	r2, r3
 800bc2e:	d903      	bls.n	800bc38 <xTaskRemoveFromEventList+0x5c>
 800bc30:	693b      	ldr	r3, [r7, #16]
 800bc32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bc34:	4a16      	ldr	r2, [pc, #88]	; (800bc90 <xTaskRemoveFromEventList+0xb4>)
 800bc36:	6013      	str	r3, [r2, #0]
 800bc38:	693b      	ldr	r3, [r7, #16]
 800bc3a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bc3c:	4613      	mov	r3, r2
 800bc3e:	009b      	lsls	r3, r3, #2
 800bc40:	4413      	add	r3, r2
 800bc42:	009b      	lsls	r3, r3, #2
 800bc44:	4a13      	ldr	r2, [pc, #76]	; (800bc94 <xTaskRemoveFromEventList+0xb8>)
 800bc46:	441a      	add	r2, r3
 800bc48:	693b      	ldr	r3, [r7, #16]
 800bc4a:	3304      	adds	r3, #4
 800bc4c:	4619      	mov	r1, r3
 800bc4e:	4610      	mov	r0, r2
 800bc50:	f7fe fb81 	bl	800a356 <vListInsertEnd>
 800bc54:	e005      	b.n	800bc62 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800bc56:	693b      	ldr	r3, [r7, #16]
 800bc58:	3318      	adds	r3, #24
 800bc5a:	4619      	mov	r1, r3
 800bc5c:	480e      	ldr	r0, [pc, #56]	; (800bc98 <xTaskRemoveFromEventList+0xbc>)
 800bc5e:	f7fe fb7a 	bl	800a356 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800bc62:	693b      	ldr	r3, [r7, #16]
 800bc64:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bc66:	4b0d      	ldr	r3, [pc, #52]	; (800bc9c <xTaskRemoveFromEventList+0xc0>)
 800bc68:	681b      	ldr	r3, [r3, #0]
 800bc6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bc6c:	429a      	cmp	r2, r3
 800bc6e:	d905      	bls.n	800bc7c <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800bc70:	2301      	movs	r3, #1
 800bc72:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800bc74:	4b0a      	ldr	r3, [pc, #40]	; (800bca0 <xTaskRemoveFromEventList+0xc4>)
 800bc76:	2201      	movs	r2, #1
 800bc78:	601a      	str	r2, [r3, #0]
 800bc7a:	e001      	b.n	800bc80 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800bc7c:	2300      	movs	r3, #0
 800bc7e:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 800bc80:	697b      	ldr	r3, [r7, #20]
}
 800bc82:	4618      	mov	r0, r3
 800bc84:	3718      	adds	r7, #24
 800bc86:	46bd      	mov	sp, r7
 800bc88:	bd80      	pop	{r7, pc}
 800bc8a:	bf00      	nop
 800bc8c:	200020ec 	.word	0x200020ec
 800bc90:	200020cc 	.word	0x200020cc
 800bc94:	20001bf4 	.word	0x20001bf4
 800bc98:	20002084 	.word	0x20002084
 800bc9c:	20001bf0 	.word	0x20001bf0
 800bca0:	200020d8 	.word	0x200020d8

0800bca4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800bca4:	b480      	push	{r7}
 800bca6:	b083      	sub	sp, #12
 800bca8:	af00      	add	r7, sp, #0
 800bcaa:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800bcac:	4b06      	ldr	r3, [pc, #24]	; (800bcc8 <vTaskInternalSetTimeOutState+0x24>)
 800bcae:	681a      	ldr	r2, [r3, #0]
 800bcb0:	687b      	ldr	r3, [r7, #4]
 800bcb2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800bcb4:	4b05      	ldr	r3, [pc, #20]	; (800bccc <vTaskInternalSetTimeOutState+0x28>)
 800bcb6:	681a      	ldr	r2, [r3, #0]
 800bcb8:	687b      	ldr	r3, [r7, #4]
 800bcba:	605a      	str	r2, [r3, #4]
}
 800bcbc:	bf00      	nop
 800bcbe:	370c      	adds	r7, #12
 800bcc0:	46bd      	mov	sp, r7
 800bcc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcc6:	4770      	bx	lr
 800bcc8:	200020dc 	.word	0x200020dc
 800bccc:	200020c8 	.word	0x200020c8

0800bcd0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800bcd0:	b580      	push	{r7, lr}
 800bcd2:	b088      	sub	sp, #32
 800bcd4:	af00      	add	r7, sp, #0
 800bcd6:	6078      	str	r0, [r7, #4]
 800bcd8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800bcda:	687b      	ldr	r3, [r7, #4]
 800bcdc:	2b00      	cmp	r3, #0
 800bcde:	d10a      	bne.n	800bcf6 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800bce0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bce4:	f383 8811 	msr	BASEPRI, r3
 800bce8:	f3bf 8f6f 	isb	sy
 800bcec:	f3bf 8f4f 	dsb	sy
 800bcf0:	613b      	str	r3, [r7, #16]
}
 800bcf2:	bf00      	nop
 800bcf4:	e7fe      	b.n	800bcf4 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800bcf6:	683b      	ldr	r3, [r7, #0]
 800bcf8:	2b00      	cmp	r3, #0
 800bcfa:	d10a      	bne.n	800bd12 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800bcfc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd00:	f383 8811 	msr	BASEPRI, r3
 800bd04:	f3bf 8f6f 	isb	sy
 800bd08:	f3bf 8f4f 	dsb	sy
 800bd0c:	60fb      	str	r3, [r7, #12]
}
 800bd0e:	bf00      	nop
 800bd10:	e7fe      	b.n	800bd10 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800bd12:	f000 ffa7 	bl	800cc64 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800bd16:	4b1d      	ldr	r3, [pc, #116]	; (800bd8c <xTaskCheckForTimeOut+0xbc>)
 800bd18:	681b      	ldr	r3, [r3, #0]
 800bd1a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800bd1c:	687b      	ldr	r3, [r7, #4]
 800bd1e:	685b      	ldr	r3, [r3, #4]
 800bd20:	69ba      	ldr	r2, [r7, #24]
 800bd22:	1ad3      	subs	r3, r2, r3
 800bd24:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800bd26:	683b      	ldr	r3, [r7, #0]
 800bd28:	681b      	ldr	r3, [r3, #0]
 800bd2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bd2e:	d102      	bne.n	800bd36 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800bd30:	2300      	movs	r3, #0
 800bd32:	61fb      	str	r3, [r7, #28]
 800bd34:	e023      	b.n	800bd7e <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800bd36:	687b      	ldr	r3, [r7, #4]
 800bd38:	681a      	ldr	r2, [r3, #0]
 800bd3a:	4b15      	ldr	r3, [pc, #84]	; (800bd90 <xTaskCheckForTimeOut+0xc0>)
 800bd3c:	681b      	ldr	r3, [r3, #0]
 800bd3e:	429a      	cmp	r2, r3
 800bd40:	d007      	beq.n	800bd52 <xTaskCheckForTimeOut+0x82>
 800bd42:	687b      	ldr	r3, [r7, #4]
 800bd44:	685b      	ldr	r3, [r3, #4]
 800bd46:	69ba      	ldr	r2, [r7, #24]
 800bd48:	429a      	cmp	r2, r3
 800bd4a:	d302      	bcc.n	800bd52 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800bd4c:	2301      	movs	r3, #1
 800bd4e:	61fb      	str	r3, [r7, #28]
 800bd50:	e015      	b.n	800bd7e <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800bd52:	683b      	ldr	r3, [r7, #0]
 800bd54:	681b      	ldr	r3, [r3, #0]
 800bd56:	697a      	ldr	r2, [r7, #20]
 800bd58:	429a      	cmp	r2, r3
 800bd5a:	d20b      	bcs.n	800bd74 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800bd5c:	683b      	ldr	r3, [r7, #0]
 800bd5e:	681a      	ldr	r2, [r3, #0]
 800bd60:	697b      	ldr	r3, [r7, #20]
 800bd62:	1ad2      	subs	r2, r2, r3
 800bd64:	683b      	ldr	r3, [r7, #0]
 800bd66:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800bd68:	6878      	ldr	r0, [r7, #4]
 800bd6a:	f7ff ff9b 	bl	800bca4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800bd6e:	2300      	movs	r3, #0
 800bd70:	61fb      	str	r3, [r7, #28]
 800bd72:	e004      	b.n	800bd7e <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800bd74:	683b      	ldr	r3, [r7, #0]
 800bd76:	2200      	movs	r2, #0
 800bd78:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800bd7a:	2301      	movs	r3, #1
 800bd7c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800bd7e:	f000 ffa1 	bl	800ccc4 <vPortExitCritical>

	return xReturn;
 800bd82:	69fb      	ldr	r3, [r7, #28]
}
 800bd84:	4618      	mov	r0, r3
 800bd86:	3720      	adds	r7, #32
 800bd88:	46bd      	mov	sp, r7
 800bd8a:	bd80      	pop	{r7, pc}
 800bd8c:	200020c8 	.word	0x200020c8
 800bd90:	200020dc 	.word	0x200020dc

0800bd94 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800bd94:	b480      	push	{r7}
 800bd96:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800bd98:	4b03      	ldr	r3, [pc, #12]	; (800bda8 <vTaskMissedYield+0x14>)
 800bd9a:	2201      	movs	r2, #1
 800bd9c:	601a      	str	r2, [r3, #0]
}
 800bd9e:	bf00      	nop
 800bda0:	46bd      	mov	sp, r7
 800bda2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bda6:	4770      	bx	lr
 800bda8:	200020d8 	.word	0x200020d8

0800bdac <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800bdac:	b580      	push	{r7, lr}
 800bdae:	b082      	sub	sp, #8
 800bdb0:	af00      	add	r7, sp, #0
 800bdb2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800bdb4:	f000 f852 	bl	800be5c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800bdb8:	4b06      	ldr	r3, [pc, #24]	; (800bdd4 <prvIdleTask+0x28>)
 800bdba:	681b      	ldr	r3, [r3, #0]
 800bdbc:	2b01      	cmp	r3, #1
 800bdbe:	d9f9      	bls.n	800bdb4 <prvIdleTask+0x8>
			{
				taskYIELD();
 800bdc0:	4b05      	ldr	r3, [pc, #20]	; (800bdd8 <prvIdleTask+0x2c>)
 800bdc2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bdc6:	601a      	str	r2, [r3, #0]
 800bdc8:	f3bf 8f4f 	dsb	sy
 800bdcc:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800bdd0:	e7f0      	b.n	800bdb4 <prvIdleTask+0x8>
 800bdd2:	bf00      	nop
 800bdd4:	20001bf4 	.word	0x20001bf4
 800bdd8:	e000ed04 	.word	0xe000ed04

0800bddc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800bddc:	b580      	push	{r7, lr}
 800bdde:	b082      	sub	sp, #8
 800bde0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800bde2:	2300      	movs	r3, #0
 800bde4:	607b      	str	r3, [r7, #4]
 800bde6:	e00c      	b.n	800be02 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800bde8:	687a      	ldr	r2, [r7, #4]
 800bdea:	4613      	mov	r3, r2
 800bdec:	009b      	lsls	r3, r3, #2
 800bdee:	4413      	add	r3, r2
 800bdf0:	009b      	lsls	r3, r3, #2
 800bdf2:	4a12      	ldr	r2, [pc, #72]	; (800be3c <prvInitialiseTaskLists+0x60>)
 800bdf4:	4413      	add	r3, r2
 800bdf6:	4618      	mov	r0, r3
 800bdf8:	f7fe fa80 	bl	800a2fc <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800bdfc:	687b      	ldr	r3, [r7, #4]
 800bdfe:	3301      	adds	r3, #1
 800be00:	607b      	str	r3, [r7, #4]
 800be02:	687b      	ldr	r3, [r7, #4]
 800be04:	2b37      	cmp	r3, #55	; 0x37
 800be06:	d9ef      	bls.n	800bde8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800be08:	480d      	ldr	r0, [pc, #52]	; (800be40 <prvInitialiseTaskLists+0x64>)
 800be0a:	f7fe fa77 	bl	800a2fc <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800be0e:	480d      	ldr	r0, [pc, #52]	; (800be44 <prvInitialiseTaskLists+0x68>)
 800be10:	f7fe fa74 	bl	800a2fc <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800be14:	480c      	ldr	r0, [pc, #48]	; (800be48 <prvInitialiseTaskLists+0x6c>)
 800be16:	f7fe fa71 	bl	800a2fc <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800be1a:	480c      	ldr	r0, [pc, #48]	; (800be4c <prvInitialiseTaskLists+0x70>)
 800be1c:	f7fe fa6e 	bl	800a2fc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800be20:	480b      	ldr	r0, [pc, #44]	; (800be50 <prvInitialiseTaskLists+0x74>)
 800be22:	f7fe fa6b 	bl	800a2fc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800be26:	4b0b      	ldr	r3, [pc, #44]	; (800be54 <prvInitialiseTaskLists+0x78>)
 800be28:	4a05      	ldr	r2, [pc, #20]	; (800be40 <prvInitialiseTaskLists+0x64>)
 800be2a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800be2c:	4b0a      	ldr	r3, [pc, #40]	; (800be58 <prvInitialiseTaskLists+0x7c>)
 800be2e:	4a05      	ldr	r2, [pc, #20]	; (800be44 <prvInitialiseTaskLists+0x68>)
 800be30:	601a      	str	r2, [r3, #0]
}
 800be32:	bf00      	nop
 800be34:	3708      	adds	r7, #8
 800be36:	46bd      	mov	sp, r7
 800be38:	bd80      	pop	{r7, pc}
 800be3a:	bf00      	nop
 800be3c:	20001bf4 	.word	0x20001bf4
 800be40:	20002054 	.word	0x20002054
 800be44:	20002068 	.word	0x20002068
 800be48:	20002084 	.word	0x20002084
 800be4c:	20002098 	.word	0x20002098
 800be50:	200020b0 	.word	0x200020b0
 800be54:	2000207c 	.word	0x2000207c
 800be58:	20002080 	.word	0x20002080

0800be5c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800be5c:	b580      	push	{r7, lr}
 800be5e:	b082      	sub	sp, #8
 800be60:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800be62:	e019      	b.n	800be98 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800be64:	f000 fefe 	bl	800cc64 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 800be68:	4b10      	ldr	r3, [pc, #64]	; (800beac <prvCheckTasksWaitingTermination+0x50>)
 800be6a:	68db      	ldr	r3, [r3, #12]
 800be6c:	68db      	ldr	r3, [r3, #12]
 800be6e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800be70:	687b      	ldr	r3, [r7, #4]
 800be72:	3304      	adds	r3, #4
 800be74:	4618      	mov	r0, r3
 800be76:	f7fe facb 	bl	800a410 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800be7a:	4b0d      	ldr	r3, [pc, #52]	; (800beb0 <prvCheckTasksWaitingTermination+0x54>)
 800be7c:	681b      	ldr	r3, [r3, #0]
 800be7e:	3b01      	subs	r3, #1
 800be80:	4a0b      	ldr	r2, [pc, #44]	; (800beb0 <prvCheckTasksWaitingTermination+0x54>)
 800be82:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800be84:	4b0b      	ldr	r3, [pc, #44]	; (800beb4 <prvCheckTasksWaitingTermination+0x58>)
 800be86:	681b      	ldr	r3, [r3, #0]
 800be88:	3b01      	subs	r3, #1
 800be8a:	4a0a      	ldr	r2, [pc, #40]	; (800beb4 <prvCheckTasksWaitingTermination+0x58>)
 800be8c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800be8e:	f000 ff19 	bl	800ccc4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800be92:	6878      	ldr	r0, [r7, #4]
 800be94:	f000 f810 	bl	800beb8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800be98:	4b06      	ldr	r3, [pc, #24]	; (800beb4 <prvCheckTasksWaitingTermination+0x58>)
 800be9a:	681b      	ldr	r3, [r3, #0]
 800be9c:	2b00      	cmp	r3, #0
 800be9e:	d1e1      	bne.n	800be64 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800bea0:	bf00      	nop
 800bea2:	bf00      	nop
 800bea4:	3708      	adds	r7, #8
 800bea6:	46bd      	mov	sp, r7
 800bea8:	bd80      	pop	{r7, pc}
 800beaa:	bf00      	nop
 800beac:	20002098 	.word	0x20002098
 800beb0:	200020c4 	.word	0x200020c4
 800beb4:	200020ac 	.word	0x200020ac

0800beb8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800beb8:	b580      	push	{r7, lr}
 800beba:	b084      	sub	sp, #16
 800bebc:	af00      	add	r7, sp, #0
 800bebe:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800bec0:	687b      	ldr	r3, [r7, #4]
 800bec2:	3354      	adds	r3, #84	; 0x54
 800bec4:	4618      	mov	r0, r3
 800bec6:	f001 f9e7 	bl	800d298 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800beca:	687b      	ldr	r3, [r7, #4]
 800becc:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 800bed0:	2b00      	cmp	r3, #0
 800bed2:	d108      	bne.n	800bee6 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800bed4:	687b      	ldr	r3, [r7, #4]
 800bed6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bed8:	4618      	mov	r0, r3
 800beda:	f001 f8a9 	bl	800d030 <vPortFree>
				vPortFree( pxTCB );
 800bede:	6878      	ldr	r0, [r7, #4]
 800bee0:	f001 f8a6 	bl	800d030 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800bee4:	e018      	b.n	800bf18 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800bee6:	687b      	ldr	r3, [r7, #4]
 800bee8:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 800beec:	2b01      	cmp	r3, #1
 800beee:	d103      	bne.n	800bef8 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800bef0:	6878      	ldr	r0, [r7, #4]
 800bef2:	f001 f89d 	bl	800d030 <vPortFree>
	}
 800bef6:	e00f      	b.n	800bf18 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800bef8:	687b      	ldr	r3, [r7, #4]
 800befa:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 800befe:	2b02      	cmp	r3, #2
 800bf00:	d00a      	beq.n	800bf18 <prvDeleteTCB+0x60>
	__asm volatile
 800bf02:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf06:	f383 8811 	msr	BASEPRI, r3
 800bf0a:	f3bf 8f6f 	isb	sy
 800bf0e:	f3bf 8f4f 	dsb	sy
 800bf12:	60fb      	str	r3, [r7, #12]
}
 800bf14:	bf00      	nop
 800bf16:	e7fe      	b.n	800bf16 <prvDeleteTCB+0x5e>
	}
 800bf18:	bf00      	nop
 800bf1a:	3710      	adds	r7, #16
 800bf1c:	46bd      	mov	sp, r7
 800bf1e:	bd80      	pop	{r7, pc}

0800bf20 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800bf20:	b480      	push	{r7}
 800bf22:	b083      	sub	sp, #12
 800bf24:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800bf26:	4b0f      	ldr	r3, [pc, #60]	; (800bf64 <prvResetNextTaskUnblockTime+0x44>)
 800bf28:	681b      	ldr	r3, [r3, #0]
 800bf2a:	681b      	ldr	r3, [r3, #0]
 800bf2c:	2b00      	cmp	r3, #0
 800bf2e:	d101      	bne.n	800bf34 <prvResetNextTaskUnblockTime+0x14>
 800bf30:	2301      	movs	r3, #1
 800bf32:	e000      	b.n	800bf36 <prvResetNextTaskUnblockTime+0x16>
 800bf34:	2300      	movs	r3, #0
 800bf36:	2b00      	cmp	r3, #0
 800bf38:	d004      	beq.n	800bf44 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800bf3a:	4b0b      	ldr	r3, [pc, #44]	; (800bf68 <prvResetNextTaskUnblockTime+0x48>)
 800bf3c:	f04f 32ff 	mov.w	r2, #4294967295
 800bf40:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800bf42:	e008      	b.n	800bf56 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800bf44:	4b07      	ldr	r3, [pc, #28]	; (800bf64 <prvResetNextTaskUnblockTime+0x44>)
 800bf46:	681b      	ldr	r3, [r3, #0]
 800bf48:	68db      	ldr	r3, [r3, #12]
 800bf4a:	68db      	ldr	r3, [r3, #12]
 800bf4c:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800bf4e:	687b      	ldr	r3, [r7, #4]
 800bf50:	685b      	ldr	r3, [r3, #4]
 800bf52:	4a05      	ldr	r2, [pc, #20]	; (800bf68 <prvResetNextTaskUnblockTime+0x48>)
 800bf54:	6013      	str	r3, [r2, #0]
}
 800bf56:	bf00      	nop
 800bf58:	370c      	adds	r7, #12
 800bf5a:	46bd      	mov	sp, r7
 800bf5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf60:	4770      	bx	lr
 800bf62:	bf00      	nop
 800bf64:	2000207c 	.word	0x2000207c
 800bf68:	200020e4 	.word	0x200020e4

0800bf6c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800bf6c:	b480      	push	{r7}
 800bf6e:	b083      	sub	sp, #12
 800bf70:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800bf72:	4b0b      	ldr	r3, [pc, #44]	; (800bfa0 <xTaskGetSchedulerState+0x34>)
 800bf74:	681b      	ldr	r3, [r3, #0]
 800bf76:	2b00      	cmp	r3, #0
 800bf78:	d102      	bne.n	800bf80 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800bf7a:	2301      	movs	r3, #1
 800bf7c:	607b      	str	r3, [r7, #4]
 800bf7e:	e008      	b.n	800bf92 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800bf80:	4b08      	ldr	r3, [pc, #32]	; (800bfa4 <xTaskGetSchedulerState+0x38>)
 800bf82:	681b      	ldr	r3, [r3, #0]
 800bf84:	2b00      	cmp	r3, #0
 800bf86:	d102      	bne.n	800bf8e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800bf88:	2302      	movs	r3, #2
 800bf8a:	607b      	str	r3, [r7, #4]
 800bf8c:	e001      	b.n	800bf92 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800bf8e:	2300      	movs	r3, #0
 800bf90:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800bf92:	687b      	ldr	r3, [r7, #4]
	}
 800bf94:	4618      	mov	r0, r3
 800bf96:	370c      	adds	r7, #12
 800bf98:	46bd      	mov	sp, r7
 800bf9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf9e:	4770      	bx	lr
 800bfa0:	200020d0 	.word	0x200020d0
 800bfa4:	200020ec 	.word	0x200020ec

0800bfa8 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800bfa8:	b580      	push	{r7, lr}
 800bfaa:	b084      	sub	sp, #16
 800bfac:	af00      	add	r7, sp, #0
 800bfae:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = ( TCB_t * ) pxMutexHolder;
 800bfb0:	687b      	ldr	r3, [r7, #4]
 800bfb2:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800bfb4:	2300      	movs	r3, #0
 800bfb6:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800bfb8:	687b      	ldr	r3, [r7, #4]
 800bfba:	2b00      	cmp	r3, #0
 800bfbc:	d056      	beq.n	800c06c <xTaskPriorityInherit+0xc4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800bfbe:	68bb      	ldr	r3, [r7, #8]
 800bfc0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bfc2:	4b2d      	ldr	r3, [pc, #180]	; (800c078 <xTaskPriorityInherit+0xd0>)
 800bfc4:	681b      	ldr	r3, [r3, #0]
 800bfc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bfc8:	429a      	cmp	r2, r3
 800bfca:	d246      	bcs.n	800c05a <xTaskPriorityInherit+0xb2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800bfcc:	68bb      	ldr	r3, [r7, #8]
 800bfce:	699b      	ldr	r3, [r3, #24]
 800bfd0:	2b00      	cmp	r3, #0
 800bfd2:	db06      	blt.n	800bfe2 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bfd4:	4b28      	ldr	r3, [pc, #160]	; (800c078 <xTaskPriorityInherit+0xd0>)
 800bfd6:	681b      	ldr	r3, [r3, #0]
 800bfd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bfda:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800bfde:	68bb      	ldr	r3, [r7, #8]
 800bfe0:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800bfe2:	68bb      	ldr	r3, [r7, #8]
 800bfe4:	6959      	ldr	r1, [r3, #20]
 800bfe6:	68bb      	ldr	r3, [r7, #8]
 800bfe8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bfea:	4613      	mov	r3, r2
 800bfec:	009b      	lsls	r3, r3, #2
 800bfee:	4413      	add	r3, r2
 800bff0:	009b      	lsls	r3, r3, #2
 800bff2:	4a22      	ldr	r2, [pc, #136]	; (800c07c <xTaskPriorityInherit+0xd4>)
 800bff4:	4413      	add	r3, r2
 800bff6:	4299      	cmp	r1, r3
 800bff8:	d101      	bne.n	800bffe <xTaskPriorityInherit+0x56>
 800bffa:	2301      	movs	r3, #1
 800bffc:	e000      	b.n	800c000 <xTaskPriorityInherit+0x58>
 800bffe:	2300      	movs	r3, #0
 800c000:	2b00      	cmp	r3, #0
 800c002:	d022      	beq.n	800c04a <xTaskPriorityInherit+0xa2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c004:	68bb      	ldr	r3, [r7, #8]
 800c006:	3304      	adds	r3, #4
 800c008:	4618      	mov	r0, r3
 800c00a:	f7fe fa01 	bl	800a410 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800c00e:	4b1a      	ldr	r3, [pc, #104]	; (800c078 <xTaskPriorityInherit+0xd0>)
 800c010:	681b      	ldr	r3, [r3, #0]
 800c012:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c014:	68bb      	ldr	r3, [r7, #8]
 800c016:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800c018:	68bb      	ldr	r3, [r7, #8]
 800c01a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c01c:	4b18      	ldr	r3, [pc, #96]	; (800c080 <xTaskPriorityInherit+0xd8>)
 800c01e:	681b      	ldr	r3, [r3, #0]
 800c020:	429a      	cmp	r2, r3
 800c022:	d903      	bls.n	800c02c <xTaskPriorityInherit+0x84>
 800c024:	68bb      	ldr	r3, [r7, #8]
 800c026:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c028:	4a15      	ldr	r2, [pc, #84]	; (800c080 <xTaskPriorityInherit+0xd8>)
 800c02a:	6013      	str	r3, [r2, #0]
 800c02c:	68bb      	ldr	r3, [r7, #8]
 800c02e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c030:	4613      	mov	r3, r2
 800c032:	009b      	lsls	r3, r3, #2
 800c034:	4413      	add	r3, r2
 800c036:	009b      	lsls	r3, r3, #2
 800c038:	4a10      	ldr	r2, [pc, #64]	; (800c07c <xTaskPriorityInherit+0xd4>)
 800c03a:	441a      	add	r2, r3
 800c03c:	68bb      	ldr	r3, [r7, #8]
 800c03e:	3304      	adds	r3, #4
 800c040:	4619      	mov	r1, r3
 800c042:	4610      	mov	r0, r2
 800c044:	f7fe f987 	bl	800a356 <vListInsertEnd>
 800c048:	e004      	b.n	800c054 <xTaskPriorityInherit+0xac>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800c04a:	4b0b      	ldr	r3, [pc, #44]	; (800c078 <xTaskPriorityInherit+0xd0>)
 800c04c:	681b      	ldr	r3, [r3, #0]
 800c04e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c050:	68bb      	ldr	r3, [r7, #8]
 800c052:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800c054:	2301      	movs	r3, #1
 800c056:	60fb      	str	r3, [r7, #12]
 800c058:	e008      	b.n	800c06c <xTaskPriorityInherit+0xc4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800c05a:	68bb      	ldr	r3, [r7, #8]
 800c05c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800c05e:	4b06      	ldr	r3, [pc, #24]	; (800c078 <xTaskPriorityInherit+0xd0>)
 800c060:	681b      	ldr	r3, [r3, #0]
 800c062:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c064:	429a      	cmp	r2, r3
 800c066:	d201      	bcs.n	800c06c <xTaskPriorityInherit+0xc4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800c068:	2301      	movs	r3, #1
 800c06a:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800c06c:	68fb      	ldr	r3, [r7, #12]
	}
 800c06e:	4618      	mov	r0, r3
 800c070:	3710      	adds	r7, #16
 800c072:	46bd      	mov	sp, r7
 800c074:	bd80      	pop	{r7, pc}
 800c076:	bf00      	nop
 800c078:	20001bf0 	.word	0x20001bf0
 800c07c:	20001bf4 	.word	0x20001bf4
 800c080:	200020cc 	.word	0x200020cc

0800c084 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800c084:	b580      	push	{r7, lr}
 800c086:	b086      	sub	sp, #24
 800c088:	af00      	add	r7, sp, #0
 800c08a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 800c08c:	687b      	ldr	r3, [r7, #4]
 800c08e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800c090:	2300      	movs	r3, #0
 800c092:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800c094:	687b      	ldr	r3, [r7, #4]
 800c096:	2b00      	cmp	r3, #0
 800c098:	d056      	beq.n	800c148 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800c09a:	4b2e      	ldr	r3, [pc, #184]	; (800c154 <xTaskPriorityDisinherit+0xd0>)
 800c09c:	681b      	ldr	r3, [r3, #0]
 800c09e:	693a      	ldr	r2, [r7, #16]
 800c0a0:	429a      	cmp	r2, r3
 800c0a2:	d00a      	beq.n	800c0ba <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800c0a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c0a8:	f383 8811 	msr	BASEPRI, r3
 800c0ac:	f3bf 8f6f 	isb	sy
 800c0b0:	f3bf 8f4f 	dsb	sy
 800c0b4:	60fb      	str	r3, [r7, #12]
}
 800c0b6:	bf00      	nop
 800c0b8:	e7fe      	b.n	800c0b8 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800c0ba:	693b      	ldr	r3, [r7, #16]
 800c0bc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c0be:	2b00      	cmp	r3, #0
 800c0c0:	d10a      	bne.n	800c0d8 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800c0c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c0c6:	f383 8811 	msr	BASEPRI, r3
 800c0ca:	f3bf 8f6f 	isb	sy
 800c0ce:	f3bf 8f4f 	dsb	sy
 800c0d2:	60bb      	str	r3, [r7, #8]
}
 800c0d4:	bf00      	nop
 800c0d6:	e7fe      	b.n	800c0d6 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800c0d8:	693b      	ldr	r3, [r7, #16]
 800c0da:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c0dc:	1e5a      	subs	r2, r3, #1
 800c0de:	693b      	ldr	r3, [r7, #16]
 800c0e0:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800c0e2:	693b      	ldr	r3, [r7, #16]
 800c0e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c0e6:	693b      	ldr	r3, [r7, #16]
 800c0e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c0ea:	429a      	cmp	r2, r3
 800c0ec:	d02c      	beq.n	800c148 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800c0ee:	693b      	ldr	r3, [r7, #16]
 800c0f0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c0f2:	2b00      	cmp	r3, #0
 800c0f4:	d128      	bne.n	800c148 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c0f6:	693b      	ldr	r3, [r7, #16]
 800c0f8:	3304      	adds	r3, #4
 800c0fa:	4618      	mov	r0, r3
 800c0fc:	f7fe f988 	bl	800a410 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800c100:	693b      	ldr	r3, [r7, #16]
 800c102:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800c104:	693b      	ldr	r3, [r7, #16]
 800c106:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c108:	693b      	ldr	r3, [r7, #16]
 800c10a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c10c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800c110:	693b      	ldr	r3, [r7, #16]
 800c112:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800c114:	693b      	ldr	r3, [r7, #16]
 800c116:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c118:	4b0f      	ldr	r3, [pc, #60]	; (800c158 <xTaskPriorityDisinherit+0xd4>)
 800c11a:	681b      	ldr	r3, [r3, #0]
 800c11c:	429a      	cmp	r2, r3
 800c11e:	d903      	bls.n	800c128 <xTaskPriorityDisinherit+0xa4>
 800c120:	693b      	ldr	r3, [r7, #16]
 800c122:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c124:	4a0c      	ldr	r2, [pc, #48]	; (800c158 <xTaskPriorityDisinherit+0xd4>)
 800c126:	6013      	str	r3, [r2, #0]
 800c128:	693b      	ldr	r3, [r7, #16]
 800c12a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c12c:	4613      	mov	r3, r2
 800c12e:	009b      	lsls	r3, r3, #2
 800c130:	4413      	add	r3, r2
 800c132:	009b      	lsls	r3, r3, #2
 800c134:	4a09      	ldr	r2, [pc, #36]	; (800c15c <xTaskPriorityDisinherit+0xd8>)
 800c136:	441a      	add	r2, r3
 800c138:	693b      	ldr	r3, [r7, #16]
 800c13a:	3304      	adds	r3, #4
 800c13c:	4619      	mov	r1, r3
 800c13e:	4610      	mov	r0, r2
 800c140:	f7fe f909 	bl	800a356 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800c144:	2301      	movs	r3, #1
 800c146:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800c148:	697b      	ldr	r3, [r7, #20]
	}
 800c14a:	4618      	mov	r0, r3
 800c14c:	3718      	adds	r7, #24
 800c14e:	46bd      	mov	sp, r7
 800c150:	bd80      	pop	{r7, pc}
 800c152:	bf00      	nop
 800c154:	20001bf0 	.word	0x20001bf0
 800c158:	200020cc 	.word	0x200020cc
 800c15c:	20001bf4 	.word	0x20001bf4

0800c160 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800c160:	b580      	push	{r7, lr}
 800c162:	b088      	sub	sp, #32
 800c164:	af00      	add	r7, sp, #0
 800c166:	6078      	str	r0, [r7, #4]
 800c168:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 800c16a:	687b      	ldr	r3, [r7, #4]
 800c16c:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800c16e:	2301      	movs	r3, #1
 800c170:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800c172:	687b      	ldr	r3, [r7, #4]
 800c174:	2b00      	cmp	r3, #0
 800c176:	d06f      	beq.n	800c258 <vTaskPriorityDisinheritAfterTimeout+0xf8>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800c178:	69bb      	ldr	r3, [r7, #24]
 800c17a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c17c:	2b00      	cmp	r3, #0
 800c17e:	d10a      	bne.n	800c196 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 800c180:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c184:	f383 8811 	msr	BASEPRI, r3
 800c188:	f3bf 8f6f 	isb	sy
 800c18c:	f3bf 8f4f 	dsb	sy
 800c190:	60fb      	str	r3, [r7, #12]
}
 800c192:	bf00      	nop
 800c194:	e7fe      	b.n	800c194 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800c196:	69bb      	ldr	r3, [r7, #24]
 800c198:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c19a:	683a      	ldr	r2, [r7, #0]
 800c19c:	429a      	cmp	r2, r3
 800c19e:	d902      	bls.n	800c1a6 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800c1a0:	683b      	ldr	r3, [r7, #0]
 800c1a2:	61fb      	str	r3, [r7, #28]
 800c1a4:	e002      	b.n	800c1ac <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800c1a6:	69bb      	ldr	r3, [r7, #24]
 800c1a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c1aa:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800c1ac:	69bb      	ldr	r3, [r7, #24]
 800c1ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c1b0:	69fa      	ldr	r2, [r7, #28]
 800c1b2:	429a      	cmp	r2, r3
 800c1b4:	d050      	beq.n	800c258 <vTaskPriorityDisinheritAfterTimeout+0xf8>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800c1b6:	69bb      	ldr	r3, [r7, #24]
 800c1b8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c1ba:	697a      	ldr	r2, [r7, #20]
 800c1bc:	429a      	cmp	r2, r3
 800c1be:	d14b      	bne.n	800c258 <vTaskPriorityDisinheritAfterTimeout+0xf8>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800c1c0:	4b27      	ldr	r3, [pc, #156]	; (800c260 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800c1c2:	681b      	ldr	r3, [r3, #0]
 800c1c4:	69ba      	ldr	r2, [r7, #24]
 800c1c6:	429a      	cmp	r2, r3
 800c1c8:	d10a      	bne.n	800c1e0 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 800c1ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c1ce:	f383 8811 	msr	BASEPRI, r3
 800c1d2:	f3bf 8f6f 	isb	sy
 800c1d6:	f3bf 8f4f 	dsb	sy
 800c1da:	60bb      	str	r3, [r7, #8]
}
 800c1dc:	bf00      	nop
 800c1de:	e7fe      	b.n	800c1de <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800c1e0:	69bb      	ldr	r3, [r7, #24]
 800c1e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c1e4:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800c1e6:	69bb      	ldr	r3, [r7, #24]
 800c1e8:	69fa      	ldr	r2, [r7, #28]
 800c1ea:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800c1ec:	69bb      	ldr	r3, [r7, #24]
 800c1ee:	699b      	ldr	r3, [r3, #24]
 800c1f0:	2b00      	cmp	r3, #0
 800c1f2:	db04      	blt.n	800c1fe <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c1f4:	69fb      	ldr	r3, [r7, #28]
 800c1f6:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800c1fa:	69bb      	ldr	r3, [r7, #24]
 800c1fc:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800c1fe:	69bb      	ldr	r3, [r7, #24]
 800c200:	6959      	ldr	r1, [r3, #20]
 800c202:	693a      	ldr	r2, [r7, #16]
 800c204:	4613      	mov	r3, r2
 800c206:	009b      	lsls	r3, r3, #2
 800c208:	4413      	add	r3, r2
 800c20a:	009b      	lsls	r3, r3, #2
 800c20c:	4a15      	ldr	r2, [pc, #84]	; (800c264 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 800c20e:	4413      	add	r3, r2
 800c210:	4299      	cmp	r1, r3
 800c212:	d101      	bne.n	800c218 <vTaskPriorityDisinheritAfterTimeout+0xb8>
 800c214:	2301      	movs	r3, #1
 800c216:	e000      	b.n	800c21a <vTaskPriorityDisinheritAfterTimeout+0xba>
 800c218:	2300      	movs	r3, #0
 800c21a:	2b00      	cmp	r3, #0
 800c21c:	d01c      	beq.n	800c258 <vTaskPriorityDisinheritAfterTimeout+0xf8>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c21e:	69bb      	ldr	r3, [r7, #24]
 800c220:	3304      	adds	r3, #4
 800c222:	4618      	mov	r0, r3
 800c224:	f7fe f8f4 	bl	800a410 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800c228:	69bb      	ldr	r3, [r7, #24]
 800c22a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c22c:	4b0e      	ldr	r3, [pc, #56]	; (800c268 <vTaskPriorityDisinheritAfterTimeout+0x108>)
 800c22e:	681b      	ldr	r3, [r3, #0]
 800c230:	429a      	cmp	r2, r3
 800c232:	d903      	bls.n	800c23c <vTaskPriorityDisinheritAfterTimeout+0xdc>
 800c234:	69bb      	ldr	r3, [r7, #24]
 800c236:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c238:	4a0b      	ldr	r2, [pc, #44]	; (800c268 <vTaskPriorityDisinheritAfterTimeout+0x108>)
 800c23a:	6013      	str	r3, [r2, #0]
 800c23c:	69bb      	ldr	r3, [r7, #24]
 800c23e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c240:	4613      	mov	r3, r2
 800c242:	009b      	lsls	r3, r3, #2
 800c244:	4413      	add	r3, r2
 800c246:	009b      	lsls	r3, r3, #2
 800c248:	4a06      	ldr	r2, [pc, #24]	; (800c264 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 800c24a:	441a      	add	r2, r3
 800c24c:	69bb      	ldr	r3, [r7, #24]
 800c24e:	3304      	adds	r3, #4
 800c250:	4619      	mov	r1, r3
 800c252:	4610      	mov	r0, r2
 800c254:	f7fe f87f 	bl	800a356 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800c258:	bf00      	nop
 800c25a:	3720      	adds	r7, #32
 800c25c:	46bd      	mov	sp, r7
 800c25e:	bd80      	pop	{r7, pc}
 800c260:	20001bf0 	.word	0x20001bf0
 800c264:	20001bf4 	.word	0x20001bf4
 800c268:	200020cc 	.word	0x200020cc

0800c26c <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
 800c26c:	b480      	push	{r7}
 800c26e:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800c270:	4b07      	ldr	r3, [pc, #28]	; (800c290 <pvTaskIncrementMutexHeldCount+0x24>)
 800c272:	681b      	ldr	r3, [r3, #0]
 800c274:	2b00      	cmp	r3, #0
 800c276:	d004      	beq.n	800c282 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800c278:	4b05      	ldr	r3, [pc, #20]	; (800c290 <pvTaskIncrementMutexHeldCount+0x24>)
 800c27a:	681b      	ldr	r3, [r3, #0]
 800c27c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800c27e:	3201      	adds	r2, #1
 800c280:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 800c282:	4b03      	ldr	r3, [pc, #12]	; (800c290 <pvTaskIncrementMutexHeldCount+0x24>)
 800c284:	681b      	ldr	r3, [r3, #0]
	}
 800c286:	4618      	mov	r0, r3
 800c288:	46bd      	mov	sp, r7
 800c28a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c28e:	4770      	bx	lr
 800c290:	20001bf0 	.word	0x20001bf0

0800c294 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800c294:	b580      	push	{r7, lr}
 800c296:	b084      	sub	sp, #16
 800c298:	af00      	add	r7, sp, #0
 800c29a:	6078      	str	r0, [r7, #4]
 800c29c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800c29e:	4b21      	ldr	r3, [pc, #132]	; (800c324 <prvAddCurrentTaskToDelayedList+0x90>)
 800c2a0:	681b      	ldr	r3, [r3, #0]
 800c2a2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c2a4:	4b20      	ldr	r3, [pc, #128]	; (800c328 <prvAddCurrentTaskToDelayedList+0x94>)
 800c2a6:	681b      	ldr	r3, [r3, #0]
 800c2a8:	3304      	adds	r3, #4
 800c2aa:	4618      	mov	r0, r3
 800c2ac:	f7fe f8b0 	bl	800a410 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800c2b0:	687b      	ldr	r3, [r7, #4]
 800c2b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c2b6:	d10a      	bne.n	800c2ce <prvAddCurrentTaskToDelayedList+0x3a>
 800c2b8:	683b      	ldr	r3, [r7, #0]
 800c2ba:	2b00      	cmp	r3, #0
 800c2bc:	d007      	beq.n	800c2ce <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c2be:	4b1a      	ldr	r3, [pc, #104]	; (800c328 <prvAddCurrentTaskToDelayedList+0x94>)
 800c2c0:	681b      	ldr	r3, [r3, #0]
 800c2c2:	3304      	adds	r3, #4
 800c2c4:	4619      	mov	r1, r3
 800c2c6:	4819      	ldr	r0, [pc, #100]	; (800c32c <prvAddCurrentTaskToDelayedList+0x98>)
 800c2c8:	f7fe f845 	bl	800a356 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800c2cc:	e026      	b.n	800c31c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800c2ce:	68fa      	ldr	r2, [r7, #12]
 800c2d0:	687b      	ldr	r3, [r7, #4]
 800c2d2:	4413      	add	r3, r2
 800c2d4:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800c2d6:	4b14      	ldr	r3, [pc, #80]	; (800c328 <prvAddCurrentTaskToDelayedList+0x94>)
 800c2d8:	681b      	ldr	r3, [r3, #0]
 800c2da:	68ba      	ldr	r2, [r7, #8]
 800c2dc:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800c2de:	68ba      	ldr	r2, [r7, #8]
 800c2e0:	68fb      	ldr	r3, [r7, #12]
 800c2e2:	429a      	cmp	r2, r3
 800c2e4:	d209      	bcs.n	800c2fa <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c2e6:	4b12      	ldr	r3, [pc, #72]	; (800c330 <prvAddCurrentTaskToDelayedList+0x9c>)
 800c2e8:	681a      	ldr	r2, [r3, #0]
 800c2ea:	4b0f      	ldr	r3, [pc, #60]	; (800c328 <prvAddCurrentTaskToDelayedList+0x94>)
 800c2ec:	681b      	ldr	r3, [r3, #0]
 800c2ee:	3304      	adds	r3, #4
 800c2f0:	4619      	mov	r1, r3
 800c2f2:	4610      	mov	r0, r2
 800c2f4:	f7fe f853 	bl	800a39e <vListInsert>
}
 800c2f8:	e010      	b.n	800c31c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c2fa:	4b0e      	ldr	r3, [pc, #56]	; (800c334 <prvAddCurrentTaskToDelayedList+0xa0>)
 800c2fc:	681a      	ldr	r2, [r3, #0]
 800c2fe:	4b0a      	ldr	r3, [pc, #40]	; (800c328 <prvAddCurrentTaskToDelayedList+0x94>)
 800c300:	681b      	ldr	r3, [r3, #0]
 800c302:	3304      	adds	r3, #4
 800c304:	4619      	mov	r1, r3
 800c306:	4610      	mov	r0, r2
 800c308:	f7fe f849 	bl	800a39e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800c30c:	4b0a      	ldr	r3, [pc, #40]	; (800c338 <prvAddCurrentTaskToDelayedList+0xa4>)
 800c30e:	681b      	ldr	r3, [r3, #0]
 800c310:	68ba      	ldr	r2, [r7, #8]
 800c312:	429a      	cmp	r2, r3
 800c314:	d202      	bcs.n	800c31c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800c316:	4a08      	ldr	r2, [pc, #32]	; (800c338 <prvAddCurrentTaskToDelayedList+0xa4>)
 800c318:	68bb      	ldr	r3, [r7, #8]
 800c31a:	6013      	str	r3, [r2, #0]
}
 800c31c:	bf00      	nop
 800c31e:	3710      	adds	r7, #16
 800c320:	46bd      	mov	sp, r7
 800c322:	bd80      	pop	{r7, pc}
 800c324:	200020c8 	.word	0x200020c8
 800c328:	20001bf0 	.word	0x20001bf0
 800c32c:	200020b0 	.word	0x200020b0
 800c330:	20002080 	.word	0x20002080
 800c334:	2000207c 	.word	0x2000207c
 800c338:	200020e4 	.word	0x200020e4

0800c33c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800c33c:	b580      	push	{r7, lr}
 800c33e:	b08a      	sub	sp, #40	; 0x28
 800c340:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800c342:	2300      	movs	r3, #0
 800c344:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800c346:	f000 fb1f 	bl	800c988 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800c34a:	4b1c      	ldr	r3, [pc, #112]	; (800c3bc <xTimerCreateTimerTask+0x80>)
 800c34c:	681b      	ldr	r3, [r3, #0]
 800c34e:	2b00      	cmp	r3, #0
 800c350:	d021      	beq.n	800c396 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800c352:	2300      	movs	r3, #0
 800c354:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800c356:	2300      	movs	r3, #0
 800c358:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800c35a:	1d3a      	adds	r2, r7, #4
 800c35c:	f107 0108 	add.w	r1, r7, #8
 800c360:	f107 030c 	add.w	r3, r7, #12
 800c364:	4618      	mov	r0, r3
 800c366:	f7fd ffaf 	bl	800a2c8 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800c36a:	6879      	ldr	r1, [r7, #4]
 800c36c:	68bb      	ldr	r3, [r7, #8]
 800c36e:	68fa      	ldr	r2, [r7, #12]
 800c370:	9202      	str	r2, [sp, #8]
 800c372:	9301      	str	r3, [sp, #4]
 800c374:	2302      	movs	r3, #2
 800c376:	9300      	str	r3, [sp, #0]
 800c378:	2300      	movs	r3, #0
 800c37a:	460a      	mov	r2, r1
 800c37c:	4910      	ldr	r1, [pc, #64]	; (800c3c0 <xTimerCreateTimerTask+0x84>)
 800c37e:	4811      	ldr	r0, [pc, #68]	; (800c3c4 <xTimerCreateTimerTask+0x88>)
 800c380:	f7fe ffab 	bl	800b2da <xTaskCreateStatic>
 800c384:	4603      	mov	r3, r0
 800c386:	4a10      	ldr	r2, [pc, #64]	; (800c3c8 <xTimerCreateTimerTask+0x8c>)
 800c388:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800c38a:	4b0f      	ldr	r3, [pc, #60]	; (800c3c8 <xTimerCreateTimerTask+0x8c>)
 800c38c:	681b      	ldr	r3, [r3, #0]
 800c38e:	2b00      	cmp	r3, #0
 800c390:	d001      	beq.n	800c396 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800c392:	2301      	movs	r3, #1
 800c394:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800c396:	697b      	ldr	r3, [r7, #20]
 800c398:	2b00      	cmp	r3, #0
 800c39a:	d10a      	bne.n	800c3b2 <xTimerCreateTimerTask+0x76>
	__asm volatile
 800c39c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c3a0:	f383 8811 	msr	BASEPRI, r3
 800c3a4:	f3bf 8f6f 	isb	sy
 800c3a8:	f3bf 8f4f 	dsb	sy
 800c3ac:	613b      	str	r3, [r7, #16]
}
 800c3ae:	bf00      	nop
 800c3b0:	e7fe      	b.n	800c3b0 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800c3b2:	697b      	ldr	r3, [r7, #20]
}
 800c3b4:	4618      	mov	r0, r3
 800c3b6:	3718      	adds	r7, #24
 800c3b8:	46bd      	mov	sp, r7
 800c3ba:	bd80      	pop	{r7, pc}
 800c3bc:	20002120 	.word	0x20002120
 800c3c0:	0800d610 	.word	0x0800d610
 800c3c4:	0800c591 	.word	0x0800c591
 800c3c8:	20002124 	.word	0x20002124

0800c3cc <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 800c3cc:	b580      	push	{r7, lr}
 800c3ce:	b088      	sub	sp, #32
 800c3d0:	af02      	add	r7, sp, #8
 800c3d2:	60f8      	str	r0, [r7, #12]
 800c3d4:	60b9      	str	r1, [r7, #8]
 800c3d6:	607a      	str	r2, [r7, #4]
 800c3d8:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) );
 800c3da:	2030      	movs	r0, #48	; 0x30
 800c3dc:	f000 fd64 	bl	800cea8 <pvPortMalloc>
 800c3e0:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 800c3e2:	697b      	ldr	r3, [r7, #20]
 800c3e4:	2b00      	cmp	r3, #0
 800c3e6:	d00d      	beq.n	800c404 <xTimerCreate+0x38>
		{
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 800c3e8:	697b      	ldr	r3, [r7, #20]
 800c3ea:	9301      	str	r3, [sp, #4]
 800c3ec:	6a3b      	ldr	r3, [r7, #32]
 800c3ee:	9300      	str	r3, [sp, #0]
 800c3f0:	683b      	ldr	r3, [r7, #0]
 800c3f2:	687a      	ldr	r2, [r7, #4]
 800c3f4:	68b9      	ldr	r1, [r7, #8]
 800c3f6:	68f8      	ldr	r0, [r7, #12]
 800c3f8:	f000 f809 	bl	800c40e <prvInitialiseNewTimer>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Timers can be created statically or dynamically, so note this
				timer was created dynamically in case the timer is later
				deleted. */
				pxNewTimer->ucStaticallyAllocated = pdFALSE;
 800c3fc:	697b      	ldr	r3, [r7, #20]
 800c3fe:	2200      	movs	r2, #0
 800c400:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */
		}

		return pxNewTimer;
 800c404:	697b      	ldr	r3, [r7, #20]
	}
 800c406:	4618      	mov	r0, r3
 800c408:	3718      	adds	r7, #24
 800c40a:	46bd      	mov	sp, r7
 800c40c:	bd80      	pop	{r7, pc}

0800c40e <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 800c40e:	b580      	push	{r7, lr}
 800c410:	b086      	sub	sp, #24
 800c412:	af00      	add	r7, sp, #0
 800c414:	60f8      	str	r0, [r7, #12]
 800c416:	60b9      	str	r1, [r7, #8]
 800c418:	607a      	str	r2, [r7, #4]
 800c41a:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 800c41c:	68bb      	ldr	r3, [r7, #8]
 800c41e:	2b00      	cmp	r3, #0
 800c420:	d10a      	bne.n	800c438 <prvInitialiseNewTimer+0x2a>
	__asm volatile
 800c422:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c426:	f383 8811 	msr	BASEPRI, r3
 800c42a:	f3bf 8f6f 	isb	sy
 800c42e:	f3bf 8f4f 	dsb	sy
 800c432:	617b      	str	r3, [r7, #20]
}
 800c434:	bf00      	nop
 800c436:	e7fe      	b.n	800c436 <prvInitialiseNewTimer+0x28>

	if( pxNewTimer != NULL )
 800c438:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c43a:	2b00      	cmp	r3, #0
 800c43c:	d015      	beq.n	800c46a <prvInitialiseNewTimer+0x5c>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 800c43e:	f000 faa3 	bl	800c988 <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 800c442:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c444:	68fa      	ldr	r2, [r7, #12]
 800c446:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 800c448:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c44a:	68ba      	ldr	r2, [r7, #8]
 800c44c:	619a      	str	r2, [r3, #24]
		pxNewTimer->uxAutoReload = uxAutoReload;
 800c44e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c450:	687a      	ldr	r2, [r7, #4]
 800c452:	61da      	str	r2, [r3, #28]
		pxNewTimer->pvTimerID = pvTimerID;
 800c454:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c456:	683a      	ldr	r2, [r7, #0]
 800c458:	621a      	str	r2, [r3, #32]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 800c45a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c45c:	6a3a      	ldr	r2, [r7, #32]
 800c45e:	625a      	str	r2, [r3, #36]	; 0x24
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 800c460:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c462:	3304      	adds	r3, #4
 800c464:	4618      	mov	r0, r3
 800c466:	f7fd ff69 	bl	800a33c <vListInitialiseItem>
		traceTIMER_CREATE( pxNewTimer );
	}
}
 800c46a:	bf00      	nop
 800c46c:	3718      	adds	r7, #24
 800c46e:	46bd      	mov	sp, r7
 800c470:	bd80      	pop	{r7, pc}
	...

0800c474 <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800c474:	b580      	push	{r7, lr}
 800c476:	b08a      	sub	sp, #40	; 0x28
 800c478:	af00      	add	r7, sp, #0
 800c47a:	60f8      	str	r0, [r7, #12]
 800c47c:	60b9      	str	r1, [r7, #8]
 800c47e:	607a      	str	r2, [r7, #4]
 800c480:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800c482:	2300      	movs	r3, #0
 800c484:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800c486:	68fb      	ldr	r3, [r7, #12]
 800c488:	2b00      	cmp	r3, #0
 800c48a:	d10a      	bne.n	800c4a2 <xTimerGenericCommand+0x2e>
	__asm volatile
 800c48c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c490:	f383 8811 	msr	BASEPRI, r3
 800c494:	f3bf 8f6f 	isb	sy
 800c498:	f3bf 8f4f 	dsb	sy
 800c49c:	623b      	str	r3, [r7, #32]
}
 800c49e:	bf00      	nop
 800c4a0:	e7fe      	b.n	800c4a0 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800c4a2:	4b1a      	ldr	r3, [pc, #104]	; (800c50c <xTimerGenericCommand+0x98>)
 800c4a4:	681b      	ldr	r3, [r3, #0]
 800c4a6:	2b00      	cmp	r3, #0
 800c4a8:	d02a      	beq.n	800c500 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800c4aa:	68bb      	ldr	r3, [r7, #8]
 800c4ac:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800c4ae:	687b      	ldr	r3, [r7, #4]
 800c4b0:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 800c4b2:	68fb      	ldr	r3, [r7, #12]
 800c4b4:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800c4b6:	68bb      	ldr	r3, [r7, #8]
 800c4b8:	2b05      	cmp	r3, #5
 800c4ba:	dc18      	bgt.n	800c4ee <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800c4bc:	f7ff fd56 	bl	800bf6c <xTaskGetSchedulerState>
 800c4c0:	4603      	mov	r3, r0
 800c4c2:	2b02      	cmp	r3, #2
 800c4c4:	d109      	bne.n	800c4da <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800c4c6:	4b11      	ldr	r3, [pc, #68]	; (800c50c <xTimerGenericCommand+0x98>)
 800c4c8:	6818      	ldr	r0, [r3, #0]
 800c4ca:	f107 0110 	add.w	r1, r7, #16
 800c4ce:	2300      	movs	r3, #0
 800c4d0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c4d2:	f7fe f90b 	bl	800a6ec <xQueueGenericSend>
 800c4d6:	6278      	str	r0, [r7, #36]	; 0x24
 800c4d8:	e012      	b.n	800c500 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800c4da:	4b0c      	ldr	r3, [pc, #48]	; (800c50c <xTimerGenericCommand+0x98>)
 800c4dc:	6818      	ldr	r0, [r3, #0]
 800c4de:	f107 0110 	add.w	r1, r7, #16
 800c4e2:	2300      	movs	r3, #0
 800c4e4:	2200      	movs	r2, #0
 800c4e6:	f7fe f901 	bl	800a6ec <xQueueGenericSend>
 800c4ea:	6278      	str	r0, [r7, #36]	; 0x24
 800c4ec:	e008      	b.n	800c500 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800c4ee:	4b07      	ldr	r3, [pc, #28]	; (800c50c <xTimerGenericCommand+0x98>)
 800c4f0:	6818      	ldr	r0, [r3, #0]
 800c4f2:	f107 0110 	add.w	r1, r7, #16
 800c4f6:	2300      	movs	r3, #0
 800c4f8:	683a      	ldr	r2, [r7, #0]
 800c4fa:	f7fe fa09 	bl	800a910 <xQueueGenericSendFromISR>
 800c4fe:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800c500:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800c502:	4618      	mov	r0, r3
 800c504:	3728      	adds	r7, #40	; 0x28
 800c506:	46bd      	mov	sp, r7
 800c508:	bd80      	pop	{r7, pc}
 800c50a:	bf00      	nop
 800c50c:	20002120 	.word	0x20002120

0800c510 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800c510:	b580      	push	{r7, lr}
 800c512:	b088      	sub	sp, #32
 800c514:	af02      	add	r7, sp, #8
 800c516:	6078      	str	r0, [r7, #4]
 800c518:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800c51a:	4b1c      	ldr	r3, [pc, #112]	; (800c58c <prvProcessExpiredTimer+0x7c>)
 800c51c:	681b      	ldr	r3, [r3, #0]
 800c51e:	68db      	ldr	r3, [r3, #12]
 800c520:	68db      	ldr	r3, [r3, #12]
 800c522:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c524:	697b      	ldr	r3, [r7, #20]
 800c526:	3304      	adds	r3, #4
 800c528:	4618      	mov	r0, r3
 800c52a:	f7fd ff71 	bl	800a410 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800c52e:	697b      	ldr	r3, [r7, #20]
 800c530:	69db      	ldr	r3, [r3, #28]
 800c532:	2b01      	cmp	r3, #1
 800c534:	d122      	bne.n	800c57c <prvProcessExpiredTimer+0x6c>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800c536:	697b      	ldr	r3, [r7, #20]
 800c538:	699a      	ldr	r2, [r3, #24]
 800c53a:	687b      	ldr	r3, [r7, #4]
 800c53c:	18d1      	adds	r1, r2, r3
 800c53e:	687b      	ldr	r3, [r7, #4]
 800c540:	683a      	ldr	r2, [r7, #0]
 800c542:	6978      	ldr	r0, [r7, #20]
 800c544:	f000 f8c8 	bl	800c6d8 <prvInsertTimerInActiveList>
 800c548:	4603      	mov	r3, r0
 800c54a:	2b00      	cmp	r3, #0
 800c54c:	d016      	beq.n	800c57c <prvProcessExpiredTimer+0x6c>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800c54e:	2300      	movs	r3, #0
 800c550:	9300      	str	r3, [sp, #0]
 800c552:	2300      	movs	r3, #0
 800c554:	687a      	ldr	r2, [r7, #4]
 800c556:	2100      	movs	r1, #0
 800c558:	6978      	ldr	r0, [r7, #20]
 800c55a:	f7ff ff8b 	bl	800c474 <xTimerGenericCommand>
 800c55e:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800c560:	693b      	ldr	r3, [r7, #16]
 800c562:	2b00      	cmp	r3, #0
 800c564:	d10a      	bne.n	800c57c <prvProcessExpiredTimer+0x6c>
	__asm volatile
 800c566:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c56a:	f383 8811 	msr	BASEPRI, r3
 800c56e:	f3bf 8f6f 	isb	sy
 800c572:	f3bf 8f4f 	dsb	sy
 800c576:	60fb      	str	r3, [r7, #12]
}
 800c578:	bf00      	nop
 800c57a:	e7fe      	b.n	800c57a <prvProcessExpiredTimer+0x6a>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c57c:	697b      	ldr	r3, [r7, #20]
 800c57e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c580:	6978      	ldr	r0, [r7, #20]
 800c582:	4798      	blx	r3
}
 800c584:	bf00      	nop
 800c586:	3718      	adds	r7, #24
 800c588:	46bd      	mov	sp, r7
 800c58a:	bd80      	pop	{r7, pc}
 800c58c:	20002118 	.word	0x20002118

0800c590 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 800c590:	b580      	push	{r7, lr}
 800c592:	b084      	sub	sp, #16
 800c594:	af00      	add	r7, sp, #0
 800c596:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800c598:	f107 0308 	add.w	r3, r7, #8
 800c59c:	4618      	mov	r0, r3
 800c59e:	f000 f857 	bl	800c650 <prvGetNextExpireTime>
 800c5a2:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800c5a4:	68bb      	ldr	r3, [r7, #8]
 800c5a6:	4619      	mov	r1, r3
 800c5a8:	68f8      	ldr	r0, [r7, #12]
 800c5aa:	f000 f803 	bl	800c5b4 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800c5ae:	f000 f8d5 	bl	800c75c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800c5b2:	e7f1      	b.n	800c598 <prvTimerTask+0x8>

0800c5b4 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800c5b4:	b580      	push	{r7, lr}
 800c5b6:	b084      	sub	sp, #16
 800c5b8:	af00      	add	r7, sp, #0
 800c5ba:	6078      	str	r0, [r7, #4]
 800c5bc:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800c5be:	f7ff f8df 	bl	800b780 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800c5c2:	f107 0308 	add.w	r3, r7, #8
 800c5c6:	4618      	mov	r0, r3
 800c5c8:	f000 f866 	bl	800c698 <prvSampleTimeNow>
 800c5cc:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800c5ce:	68bb      	ldr	r3, [r7, #8]
 800c5d0:	2b00      	cmp	r3, #0
 800c5d2:	d130      	bne.n	800c636 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800c5d4:	683b      	ldr	r3, [r7, #0]
 800c5d6:	2b00      	cmp	r3, #0
 800c5d8:	d10a      	bne.n	800c5f0 <prvProcessTimerOrBlockTask+0x3c>
 800c5da:	687a      	ldr	r2, [r7, #4]
 800c5dc:	68fb      	ldr	r3, [r7, #12]
 800c5de:	429a      	cmp	r2, r3
 800c5e0:	d806      	bhi.n	800c5f0 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800c5e2:	f7ff f8db 	bl	800b79c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800c5e6:	68f9      	ldr	r1, [r7, #12]
 800c5e8:	6878      	ldr	r0, [r7, #4]
 800c5ea:	f7ff ff91 	bl	800c510 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800c5ee:	e024      	b.n	800c63a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800c5f0:	683b      	ldr	r3, [r7, #0]
 800c5f2:	2b00      	cmp	r3, #0
 800c5f4:	d008      	beq.n	800c608 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800c5f6:	4b13      	ldr	r3, [pc, #76]	; (800c644 <prvProcessTimerOrBlockTask+0x90>)
 800c5f8:	681b      	ldr	r3, [r3, #0]
 800c5fa:	681b      	ldr	r3, [r3, #0]
 800c5fc:	2b00      	cmp	r3, #0
 800c5fe:	bf0c      	ite	eq
 800c600:	2301      	moveq	r3, #1
 800c602:	2300      	movne	r3, #0
 800c604:	b2db      	uxtb	r3, r3
 800c606:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800c608:	4b0f      	ldr	r3, [pc, #60]	; (800c648 <prvProcessTimerOrBlockTask+0x94>)
 800c60a:	6818      	ldr	r0, [r3, #0]
 800c60c:	687a      	ldr	r2, [r7, #4]
 800c60e:	68fb      	ldr	r3, [r7, #12]
 800c610:	1ad3      	subs	r3, r2, r3
 800c612:	683a      	ldr	r2, [r7, #0]
 800c614:	4619      	mov	r1, r3
 800c616:	f7fe fd8f 	bl	800b138 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800c61a:	f7ff f8bf 	bl	800b79c <xTaskResumeAll>
 800c61e:	4603      	mov	r3, r0
 800c620:	2b00      	cmp	r3, #0
 800c622:	d10a      	bne.n	800c63a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800c624:	4b09      	ldr	r3, [pc, #36]	; (800c64c <prvProcessTimerOrBlockTask+0x98>)
 800c626:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c62a:	601a      	str	r2, [r3, #0]
 800c62c:	f3bf 8f4f 	dsb	sy
 800c630:	f3bf 8f6f 	isb	sy
}
 800c634:	e001      	b.n	800c63a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800c636:	f7ff f8b1 	bl	800b79c <xTaskResumeAll>
}
 800c63a:	bf00      	nop
 800c63c:	3710      	adds	r7, #16
 800c63e:	46bd      	mov	sp, r7
 800c640:	bd80      	pop	{r7, pc}
 800c642:	bf00      	nop
 800c644:	2000211c 	.word	0x2000211c
 800c648:	20002120 	.word	0x20002120
 800c64c:	e000ed04 	.word	0xe000ed04

0800c650 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800c650:	b480      	push	{r7}
 800c652:	b085      	sub	sp, #20
 800c654:	af00      	add	r7, sp, #0
 800c656:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800c658:	4b0e      	ldr	r3, [pc, #56]	; (800c694 <prvGetNextExpireTime+0x44>)
 800c65a:	681b      	ldr	r3, [r3, #0]
 800c65c:	681b      	ldr	r3, [r3, #0]
 800c65e:	2b00      	cmp	r3, #0
 800c660:	bf0c      	ite	eq
 800c662:	2301      	moveq	r3, #1
 800c664:	2300      	movne	r3, #0
 800c666:	b2db      	uxtb	r3, r3
 800c668:	461a      	mov	r2, r3
 800c66a:	687b      	ldr	r3, [r7, #4]
 800c66c:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800c66e:	687b      	ldr	r3, [r7, #4]
 800c670:	681b      	ldr	r3, [r3, #0]
 800c672:	2b00      	cmp	r3, #0
 800c674:	d105      	bne.n	800c682 <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800c676:	4b07      	ldr	r3, [pc, #28]	; (800c694 <prvGetNextExpireTime+0x44>)
 800c678:	681b      	ldr	r3, [r3, #0]
 800c67a:	68db      	ldr	r3, [r3, #12]
 800c67c:	681b      	ldr	r3, [r3, #0]
 800c67e:	60fb      	str	r3, [r7, #12]
 800c680:	e001      	b.n	800c686 <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800c682:	2300      	movs	r3, #0
 800c684:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800c686:	68fb      	ldr	r3, [r7, #12]
}
 800c688:	4618      	mov	r0, r3
 800c68a:	3714      	adds	r7, #20
 800c68c:	46bd      	mov	sp, r7
 800c68e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c692:	4770      	bx	lr
 800c694:	20002118 	.word	0x20002118

0800c698 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800c698:	b580      	push	{r7, lr}
 800c69a:	b084      	sub	sp, #16
 800c69c:	af00      	add	r7, sp, #0
 800c69e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800c6a0:	f7ff f91a 	bl	800b8d8 <xTaskGetTickCount>
 800c6a4:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800c6a6:	4b0b      	ldr	r3, [pc, #44]	; (800c6d4 <prvSampleTimeNow+0x3c>)
 800c6a8:	681b      	ldr	r3, [r3, #0]
 800c6aa:	68fa      	ldr	r2, [r7, #12]
 800c6ac:	429a      	cmp	r2, r3
 800c6ae:	d205      	bcs.n	800c6bc <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800c6b0:	f000 f908 	bl	800c8c4 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800c6b4:	687b      	ldr	r3, [r7, #4]
 800c6b6:	2201      	movs	r2, #1
 800c6b8:	601a      	str	r2, [r3, #0]
 800c6ba:	e002      	b.n	800c6c2 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800c6bc:	687b      	ldr	r3, [r7, #4]
 800c6be:	2200      	movs	r2, #0
 800c6c0:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800c6c2:	4a04      	ldr	r2, [pc, #16]	; (800c6d4 <prvSampleTimeNow+0x3c>)
 800c6c4:	68fb      	ldr	r3, [r7, #12]
 800c6c6:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800c6c8:	68fb      	ldr	r3, [r7, #12]
}
 800c6ca:	4618      	mov	r0, r3
 800c6cc:	3710      	adds	r7, #16
 800c6ce:	46bd      	mov	sp, r7
 800c6d0:	bd80      	pop	{r7, pc}
 800c6d2:	bf00      	nop
 800c6d4:	20002128 	.word	0x20002128

0800c6d8 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800c6d8:	b580      	push	{r7, lr}
 800c6da:	b086      	sub	sp, #24
 800c6dc:	af00      	add	r7, sp, #0
 800c6de:	60f8      	str	r0, [r7, #12]
 800c6e0:	60b9      	str	r1, [r7, #8]
 800c6e2:	607a      	str	r2, [r7, #4]
 800c6e4:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800c6e6:	2300      	movs	r3, #0
 800c6e8:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800c6ea:	68fb      	ldr	r3, [r7, #12]
 800c6ec:	68ba      	ldr	r2, [r7, #8]
 800c6ee:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800c6f0:	68fb      	ldr	r3, [r7, #12]
 800c6f2:	68fa      	ldr	r2, [r7, #12]
 800c6f4:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800c6f6:	68ba      	ldr	r2, [r7, #8]
 800c6f8:	687b      	ldr	r3, [r7, #4]
 800c6fa:	429a      	cmp	r2, r3
 800c6fc:	d812      	bhi.n	800c724 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c6fe:	687a      	ldr	r2, [r7, #4]
 800c700:	683b      	ldr	r3, [r7, #0]
 800c702:	1ad2      	subs	r2, r2, r3
 800c704:	68fb      	ldr	r3, [r7, #12]
 800c706:	699b      	ldr	r3, [r3, #24]
 800c708:	429a      	cmp	r2, r3
 800c70a:	d302      	bcc.n	800c712 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800c70c:	2301      	movs	r3, #1
 800c70e:	617b      	str	r3, [r7, #20]
 800c710:	e01b      	b.n	800c74a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800c712:	4b10      	ldr	r3, [pc, #64]	; (800c754 <prvInsertTimerInActiveList+0x7c>)
 800c714:	681a      	ldr	r2, [r3, #0]
 800c716:	68fb      	ldr	r3, [r7, #12]
 800c718:	3304      	adds	r3, #4
 800c71a:	4619      	mov	r1, r3
 800c71c:	4610      	mov	r0, r2
 800c71e:	f7fd fe3e 	bl	800a39e <vListInsert>
 800c722:	e012      	b.n	800c74a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800c724:	687a      	ldr	r2, [r7, #4]
 800c726:	683b      	ldr	r3, [r7, #0]
 800c728:	429a      	cmp	r2, r3
 800c72a:	d206      	bcs.n	800c73a <prvInsertTimerInActiveList+0x62>
 800c72c:	68ba      	ldr	r2, [r7, #8]
 800c72e:	683b      	ldr	r3, [r7, #0]
 800c730:	429a      	cmp	r2, r3
 800c732:	d302      	bcc.n	800c73a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800c734:	2301      	movs	r3, #1
 800c736:	617b      	str	r3, [r7, #20]
 800c738:	e007      	b.n	800c74a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800c73a:	4b07      	ldr	r3, [pc, #28]	; (800c758 <prvInsertTimerInActiveList+0x80>)
 800c73c:	681a      	ldr	r2, [r3, #0]
 800c73e:	68fb      	ldr	r3, [r7, #12]
 800c740:	3304      	adds	r3, #4
 800c742:	4619      	mov	r1, r3
 800c744:	4610      	mov	r0, r2
 800c746:	f7fd fe2a 	bl	800a39e <vListInsert>
		}
	}

	return xProcessTimerNow;
 800c74a:	697b      	ldr	r3, [r7, #20]
}
 800c74c:	4618      	mov	r0, r3
 800c74e:	3718      	adds	r7, #24
 800c750:	46bd      	mov	sp, r7
 800c752:	bd80      	pop	{r7, pc}
 800c754:	2000211c 	.word	0x2000211c
 800c758:	20002118 	.word	0x20002118

0800c75c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800c75c:	b580      	push	{r7, lr}
 800c75e:	b08e      	sub	sp, #56	; 0x38
 800c760:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800c762:	e09d      	b.n	800c8a0 <prvProcessReceivedCommands+0x144>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800c764:	687b      	ldr	r3, [r7, #4]
 800c766:	2b00      	cmp	r3, #0
 800c768:	da18      	bge.n	800c79c <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800c76a:	1d3b      	adds	r3, r7, #4
 800c76c:	3304      	adds	r3, #4
 800c76e:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800c770:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c772:	2b00      	cmp	r3, #0
 800c774:	d10a      	bne.n	800c78c <prvProcessReceivedCommands+0x30>
	__asm volatile
 800c776:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c77a:	f383 8811 	msr	BASEPRI, r3
 800c77e:	f3bf 8f6f 	isb	sy
 800c782:	f3bf 8f4f 	dsb	sy
 800c786:	61fb      	str	r3, [r7, #28]
}
 800c788:	bf00      	nop
 800c78a:	e7fe      	b.n	800c78a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800c78c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c78e:	681b      	ldr	r3, [r3, #0]
 800c790:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c792:	6850      	ldr	r0, [r2, #4]
 800c794:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c796:	6892      	ldr	r2, [r2, #8]
 800c798:	4611      	mov	r1, r2
 800c79a:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800c79c:	687b      	ldr	r3, [r7, #4]
 800c79e:	2b00      	cmp	r3, #0
 800c7a0:	db7e      	blt.n	800c8a0 <prvProcessReceivedCommands+0x144>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800c7a2:	68fb      	ldr	r3, [r7, #12]
 800c7a4:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800c7a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c7a8:	695b      	ldr	r3, [r3, #20]
 800c7aa:	2b00      	cmp	r3, #0
 800c7ac:	d004      	beq.n	800c7b8 <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c7ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c7b0:	3304      	adds	r3, #4
 800c7b2:	4618      	mov	r0, r3
 800c7b4:	f7fd fe2c 	bl	800a410 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800c7b8:	463b      	mov	r3, r7
 800c7ba:	4618      	mov	r0, r3
 800c7bc:	f7ff ff6c 	bl	800c698 <prvSampleTimeNow>
 800c7c0:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800c7c2:	687b      	ldr	r3, [r7, #4]
 800c7c4:	2b09      	cmp	r3, #9
 800c7c6:	d86a      	bhi.n	800c89e <prvProcessReceivedCommands+0x142>
 800c7c8:	a201      	add	r2, pc, #4	; (adr r2, 800c7d0 <prvProcessReceivedCommands+0x74>)
 800c7ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c7ce:	bf00      	nop
 800c7d0:	0800c7f9 	.word	0x0800c7f9
 800c7d4:	0800c7f9 	.word	0x0800c7f9
 800c7d8:	0800c7f9 	.word	0x0800c7f9
 800c7dc:	0800c8a1 	.word	0x0800c8a1
 800c7e0:	0800c855 	.word	0x0800c855
 800c7e4:	0800c88d 	.word	0x0800c88d
 800c7e8:	0800c7f9 	.word	0x0800c7f9
 800c7ec:	0800c7f9 	.word	0x0800c7f9
 800c7f0:	0800c8a1 	.word	0x0800c8a1
 800c7f4:	0800c855 	.word	0x0800c855
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800c7f8:	68ba      	ldr	r2, [r7, #8]
 800c7fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c7fc:	699b      	ldr	r3, [r3, #24]
 800c7fe:	18d1      	adds	r1, r2, r3
 800c800:	68bb      	ldr	r3, [r7, #8]
 800c802:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c804:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c806:	f7ff ff67 	bl	800c6d8 <prvInsertTimerInActiveList>
 800c80a:	4603      	mov	r3, r0
 800c80c:	2b00      	cmp	r3, #0
 800c80e:	d047      	beq.n	800c8a0 <prvProcessReceivedCommands+0x144>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c810:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c812:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c814:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c816:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800c818:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c81a:	69db      	ldr	r3, [r3, #28]
 800c81c:	2b01      	cmp	r3, #1
 800c81e:	d13f      	bne.n	800c8a0 <prvProcessReceivedCommands+0x144>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800c820:	68ba      	ldr	r2, [r7, #8]
 800c822:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c824:	699b      	ldr	r3, [r3, #24]
 800c826:	441a      	add	r2, r3
 800c828:	2300      	movs	r3, #0
 800c82a:	9300      	str	r3, [sp, #0]
 800c82c:	2300      	movs	r3, #0
 800c82e:	2100      	movs	r1, #0
 800c830:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c832:	f7ff fe1f 	bl	800c474 <xTimerGenericCommand>
 800c836:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800c838:	6a3b      	ldr	r3, [r7, #32]
 800c83a:	2b00      	cmp	r3, #0
 800c83c:	d130      	bne.n	800c8a0 <prvProcessReceivedCommands+0x144>
	__asm volatile
 800c83e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c842:	f383 8811 	msr	BASEPRI, r3
 800c846:	f3bf 8f6f 	isb	sy
 800c84a:	f3bf 8f4f 	dsb	sy
 800c84e:	61bb      	str	r3, [r7, #24]
}
 800c850:	bf00      	nop
 800c852:	e7fe      	b.n	800c852 <prvProcessReceivedCommands+0xf6>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800c854:	68ba      	ldr	r2, [r7, #8]
 800c856:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c858:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800c85a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c85c:	699b      	ldr	r3, [r3, #24]
 800c85e:	2b00      	cmp	r3, #0
 800c860:	d10a      	bne.n	800c878 <prvProcessReceivedCommands+0x11c>
	__asm volatile
 800c862:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c866:	f383 8811 	msr	BASEPRI, r3
 800c86a:	f3bf 8f6f 	isb	sy
 800c86e:	f3bf 8f4f 	dsb	sy
 800c872:	617b      	str	r3, [r7, #20]
}
 800c874:	bf00      	nop
 800c876:	e7fe      	b.n	800c876 <prvProcessReceivedCommands+0x11a>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800c878:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c87a:	699a      	ldr	r2, [r3, #24]
 800c87c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c87e:	18d1      	adds	r1, r2, r3
 800c880:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c882:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c884:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c886:	f7ff ff27 	bl	800c6d8 <prvInsertTimerInActiveList>
					break;
 800c88a:	e009      	b.n	800c8a0 <prvProcessReceivedCommands+0x144>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800c88c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c88e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800c892:	2b00      	cmp	r3, #0
 800c894:	d104      	bne.n	800c8a0 <prvProcessReceivedCommands+0x144>
						{
							vPortFree( pxTimer );
 800c896:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c898:	f000 fbca 	bl	800d030 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800c89c:	e000      	b.n	800c8a0 <prvProcessReceivedCommands+0x144>

				default	:
					/* Don't expect to get here. */
					break;
 800c89e:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800c8a0:	4b07      	ldr	r3, [pc, #28]	; (800c8c0 <prvProcessReceivedCommands+0x164>)
 800c8a2:	681b      	ldr	r3, [r3, #0]
 800c8a4:	1d39      	adds	r1, r7, #4
 800c8a6:	2200      	movs	r2, #0
 800c8a8:	4618      	mov	r0, r3
 800c8aa:	f7fe f8db 	bl	800aa64 <xQueueReceive>
 800c8ae:	4603      	mov	r3, r0
 800c8b0:	2b00      	cmp	r3, #0
 800c8b2:	f47f af57 	bne.w	800c764 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800c8b6:	bf00      	nop
 800c8b8:	bf00      	nop
 800c8ba:	3730      	adds	r7, #48	; 0x30
 800c8bc:	46bd      	mov	sp, r7
 800c8be:	bd80      	pop	{r7, pc}
 800c8c0:	20002120 	.word	0x20002120

0800c8c4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800c8c4:	b580      	push	{r7, lr}
 800c8c6:	b088      	sub	sp, #32
 800c8c8:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800c8ca:	e045      	b.n	800c958 <prvSwitchTimerLists+0x94>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800c8cc:	4b2c      	ldr	r3, [pc, #176]	; (800c980 <prvSwitchTimerLists+0xbc>)
 800c8ce:	681b      	ldr	r3, [r3, #0]
 800c8d0:	68db      	ldr	r3, [r3, #12]
 800c8d2:	681b      	ldr	r3, [r3, #0]
 800c8d4:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800c8d6:	4b2a      	ldr	r3, [pc, #168]	; (800c980 <prvSwitchTimerLists+0xbc>)
 800c8d8:	681b      	ldr	r3, [r3, #0]
 800c8da:	68db      	ldr	r3, [r3, #12]
 800c8dc:	68db      	ldr	r3, [r3, #12]
 800c8de:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c8e0:	68fb      	ldr	r3, [r7, #12]
 800c8e2:	3304      	adds	r3, #4
 800c8e4:	4618      	mov	r0, r3
 800c8e6:	f7fd fd93 	bl	800a410 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c8ea:	68fb      	ldr	r3, [r7, #12]
 800c8ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c8ee:	68f8      	ldr	r0, [r7, #12]
 800c8f0:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800c8f2:	68fb      	ldr	r3, [r7, #12]
 800c8f4:	69db      	ldr	r3, [r3, #28]
 800c8f6:	2b01      	cmp	r3, #1
 800c8f8:	d12e      	bne.n	800c958 <prvSwitchTimerLists+0x94>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800c8fa:	68fb      	ldr	r3, [r7, #12]
 800c8fc:	699b      	ldr	r3, [r3, #24]
 800c8fe:	693a      	ldr	r2, [r7, #16]
 800c900:	4413      	add	r3, r2
 800c902:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800c904:	68ba      	ldr	r2, [r7, #8]
 800c906:	693b      	ldr	r3, [r7, #16]
 800c908:	429a      	cmp	r2, r3
 800c90a:	d90e      	bls.n	800c92a <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800c90c:	68fb      	ldr	r3, [r7, #12]
 800c90e:	68ba      	ldr	r2, [r7, #8]
 800c910:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800c912:	68fb      	ldr	r3, [r7, #12]
 800c914:	68fa      	ldr	r2, [r7, #12]
 800c916:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800c918:	4b19      	ldr	r3, [pc, #100]	; (800c980 <prvSwitchTimerLists+0xbc>)
 800c91a:	681a      	ldr	r2, [r3, #0]
 800c91c:	68fb      	ldr	r3, [r7, #12]
 800c91e:	3304      	adds	r3, #4
 800c920:	4619      	mov	r1, r3
 800c922:	4610      	mov	r0, r2
 800c924:	f7fd fd3b 	bl	800a39e <vListInsert>
 800c928:	e016      	b.n	800c958 <prvSwitchTimerLists+0x94>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800c92a:	2300      	movs	r3, #0
 800c92c:	9300      	str	r3, [sp, #0]
 800c92e:	2300      	movs	r3, #0
 800c930:	693a      	ldr	r2, [r7, #16]
 800c932:	2100      	movs	r1, #0
 800c934:	68f8      	ldr	r0, [r7, #12]
 800c936:	f7ff fd9d 	bl	800c474 <xTimerGenericCommand>
 800c93a:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800c93c:	687b      	ldr	r3, [r7, #4]
 800c93e:	2b00      	cmp	r3, #0
 800c940:	d10a      	bne.n	800c958 <prvSwitchTimerLists+0x94>
	__asm volatile
 800c942:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c946:	f383 8811 	msr	BASEPRI, r3
 800c94a:	f3bf 8f6f 	isb	sy
 800c94e:	f3bf 8f4f 	dsb	sy
 800c952:	603b      	str	r3, [r7, #0]
}
 800c954:	bf00      	nop
 800c956:	e7fe      	b.n	800c956 <prvSwitchTimerLists+0x92>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800c958:	4b09      	ldr	r3, [pc, #36]	; (800c980 <prvSwitchTimerLists+0xbc>)
 800c95a:	681b      	ldr	r3, [r3, #0]
 800c95c:	681b      	ldr	r3, [r3, #0]
 800c95e:	2b00      	cmp	r3, #0
 800c960:	d1b4      	bne.n	800c8cc <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800c962:	4b07      	ldr	r3, [pc, #28]	; (800c980 <prvSwitchTimerLists+0xbc>)
 800c964:	681b      	ldr	r3, [r3, #0]
 800c966:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800c968:	4b06      	ldr	r3, [pc, #24]	; (800c984 <prvSwitchTimerLists+0xc0>)
 800c96a:	681b      	ldr	r3, [r3, #0]
 800c96c:	4a04      	ldr	r2, [pc, #16]	; (800c980 <prvSwitchTimerLists+0xbc>)
 800c96e:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800c970:	4a04      	ldr	r2, [pc, #16]	; (800c984 <prvSwitchTimerLists+0xc0>)
 800c972:	697b      	ldr	r3, [r7, #20]
 800c974:	6013      	str	r3, [r2, #0]
}
 800c976:	bf00      	nop
 800c978:	3718      	adds	r7, #24
 800c97a:	46bd      	mov	sp, r7
 800c97c:	bd80      	pop	{r7, pc}
 800c97e:	bf00      	nop
 800c980:	20002118 	.word	0x20002118
 800c984:	2000211c 	.word	0x2000211c

0800c988 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800c988:	b580      	push	{r7, lr}
 800c98a:	b082      	sub	sp, #8
 800c98c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800c98e:	f000 f969 	bl	800cc64 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800c992:	4b15      	ldr	r3, [pc, #84]	; (800c9e8 <prvCheckForValidListAndQueue+0x60>)
 800c994:	681b      	ldr	r3, [r3, #0]
 800c996:	2b00      	cmp	r3, #0
 800c998:	d120      	bne.n	800c9dc <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800c99a:	4814      	ldr	r0, [pc, #80]	; (800c9ec <prvCheckForValidListAndQueue+0x64>)
 800c99c:	f7fd fcae 	bl	800a2fc <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800c9a0:	4813      	ldr	r0, [pc, #76]	; (800c9f0 <prvCheckForValidListAndQueue+0x68>)
 800c9a2:	f7fd fcab 	bl	800a2fc <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800c9a6:	4b13      	ldr	r3, [pc, #76]	; (800c9f4 <prvCheckForValidListAndQueue+0x6c>)
 800c9a8:	4a10      	ldr	r2, [pc, #64]	; (800c9ec <prvCheckForValidListAndQueue+0x64>)
 800c9aa:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800c9ac:	4b12      	ldr	r3, [pc, #72]	; (800c9f8 <prvCheckForValidListAndQueue+0x70>)
 800c9ae:	4a10      	ldr	r2, [pc, #64]	; (800c9f0 <prvCheckForValidListAndQueue+0x68>)
 800c9b0:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800c9b2:	2300      	movs	r3, #0
 800c9b4:	9300      	str	r3, [sp, #0]
 800c9b6:	4b11      	ldr	r3, [pc, #68]	; (800c9fc <prvCheckForValidListAndQueue+0x74>)
 800c9b8:	4a11      	ldr	r2, [pc, #68]	; (800ca00 <prvCheckForValidListAndQueue+0x78>)
 800c9ba:	2110      	movs	r1, #16
 800c9bc:	200a      	movs	r0, #10
 800c9be:	f7fd fdb9 	bl	800a534 <xQueueGenericCreateStatic>
 800c9c2:	4603      	mov	r3, r0
 800c9c4:	4a08      	ldr	r2, [pc, #32]	; (800c9e8 <prvCheckForValidListAndQueue+0x60>)
 800c9c6:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800c9c8:	4b07      	ldr	r3, [pc, #28]	; (800c9e8 <prvCheckForValidListAndQueue+0x60>)
 800c9ca:	681b      	ldr	r3, [r3, #0]
 800c9cc:	2b00      	cmp	r3, #0
 800c9ce:	d005      	beq.n	800c9dc <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800c9d0:	4b05      	ldr	r3, [pc, #20]	; (800c9e8 <prvCheckForValidListAndQueue+0x60>)
 800c9d2:	681b      	ldr	r3, [r3, #0]
 800c9d4:	490b      	ldr	r1, [pc, #44]	; (800ca04 <prvCheckForValidListAndQueue+0x7c>)
 800c9d6:	4618      	mov	r0, r3
 800c9d8:	f7fe fb84 	bl	800b0e4 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800c9dc:	f000 f972 	bl	800ccc4 <vPortExitCritical>
}
 800c9e0:	bf00      	nop
 800c9e2:	46bd      	mov	sp, r7
 800c9e4:	bd80      	pop	{r7, pc}
 800c9e6:	bf00      	nop
 800c9e8:	20002120 	.word	0x20002120
 800c9ec:	200020f0 	.word	0x200020f0
 800c9f0:	20002104 	.word	0x20002104
 800c9f4:	20002118 	.word	0x20002118
 800c9f8:	2000211c 	.word	0x2000211c
 800c9fc:	200021cc 	.word	0x200021cc
 800ca00:	2000212c 	.word	0x2000212c
 800ca04:	0800d618 	.word	0x0800d618

0800ca08 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800ca08:	b480      	push	{r7}
 800ca0a:	b085      	sub	sp, #20
 800ca0c:	af00      	add	r7, sp, #0
 800ca0e:	60f8      	str	r0, [r7, #12]
 800ca10:	60b9      	str	r1, [r7, #8]
 800ca12:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800ca14:	68fb      	ldr	r3, [r7, #12]
 800ca16:	3b04      	subs	r3, #4
 800ca18:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800ca1a:	68fb      	ldr	r3, [r7, #12]
 800ca1c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800ca20:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800ca22:	68fb      	ldr	r3, [r7, #12]
 800ca24:	3b04      	subs	r3, #4
 800ca26:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800ca28:	68bb      	ldr	r3, [r7, #8]
 800ca2a:	f023 0201 	bic.w	r2, r3, #1
 800ca2e:	68fb      	ldr	r3, [r7, #12]
 800ca30:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800ca32:	68fb      	ldr	r3, [r7, #12]
 800ca34:	3b04      	subs	r3, #4
 800ca36:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800ca38:	4a0c      	ldr	r2, [pc, #48]	; (800ca6c <pxPortInitialiseStack+0x64>)
 800ca3a:	68fb      	ldr	r3, [r7, #12]
 800ca3c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800ca3e:	68fb      	ldr	r3, [r7, #12]
 800ca40:	3b14      	subs	r3, #20
 800ca42:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800ca44:	687a      	ldr	r2, [r7, #4]
 800ca46:	68fb      	ldr	r3, [r7, #12]
 800ca48:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800ca4a:	68fb      	ldr	r3, [r7, #12]
 800ca4c:	3b04      	subs	r3, #4
 800ca4e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800ca50:	68fb      	ldr	r3, [r7, #12]
 800ca52:	f06f 0202 	mvn.w	r2, #2
 800ca56:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800ca58:	68fb      	ldr	r3, [r7, #12]
 800ca5a:	3b20      	subs	r3, #32
 800ca5c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800ca5e:	68fb      	ldr	r3, [r7, #12]
}
 800ca60:	4618      	mov	r0, r3
 800ca62:	3714      	adds	r7, #20
 800ca64:	46bd      	mov	sp, r7
 800ca66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca6a:	4770      	bx	lr
 800ca6c:	0800ca71 	.word	0x0800ca71

0800ca70 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800ca70:	b480      	push	{r7}
 800ca72:	b085      	sub	sp, #20
 800ca74:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800ca76:	2300      	movs	r3, #0
 800ca78:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800ca7a:	4b12      	ldr	r3, [pc, #72]	; (800cac4 <prvTaskExitError+0x54>)
 800ca7c:	681b      	ldr	r3, [r3, #0]
 800ca7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ca82:	d00a      	beq.n	800ca9a <prvTaskExitError+0x2a>
	__asm volatile
 800ca84:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca88:	f383 8811 	msr	BASEPRI, r3
 800ca8c:	f3bf 8f6f 	isb	sy
 800ca90:	f3bf 8f4f 	dsb	sy
 800ca94:	60fb      	str	r3, [r7, #12]
}
 800ca96:	bf00      	nop
 800ca98:	e7fe      	b.n	800ca98 <prvTaskExitError+0x28>
	__asm volatile
 800ca9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca9e:	f383 8811 	msr	BASEPRI, r3
 800caa2:	f3bf 8f6f 	isb	sy
 800caa6:	f3bf 8f4f 	dsb	sy
 800caaa:	60bb      	str	r3, [r7, #8]
}
 800caac:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800caae:	bf00      	nop
 800cab0:	687b      	ldr	r3, [r7, #4]
 800cab2:	2b00      	cmp	r3, #0
 800cab4:	d0fc      	beq.n	800cab0 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800cab6:	bf00      	nop
 800cab8:	bf00      	nop
 800caba:	3714      	adds	r7, #20
 800cabc:	46bd      	mov	sp, r7
 800cabe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cac2:	4770      	bx	lr
 800cac4:	20000040 	.word	0x20000040
	...

0800cad0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800cad0:	4b07      	ldr	r3, [pc, #28]	; (800caf0 <pxCurrentTCBConst2>)
 800cad2:	6819      	ldr	r1, [r3, #0]
 800cad4:	6808      	ldr	r0, [r1, #0]
 800cad6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cada:	f380 8809 	msr	PSP, r0
 800cade:	f3bf 8f6f 	isb	sy
 800cae2:	f04f 0000 	mov.w	r0, #0
 800cae6:	f380 8811 	msr	BASEPRI, r0
 800caea:	4770      	bx	lr
 800caec:	f3af 8000 	nop.w

0800caf0 <pxCurrentTCBConst2>:
 800caf0:	20001bf0 	.word	0x20001bf0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800caf4:	bf00      	nop
 800caf6:	bf00      	nop

0800caf8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800caf8:	4808      	ldr	r0, [pc, #32]	; (800cb1c <prvPortStartFirstTask+0x24>)
 800cafa:	6800      	ldr	r0, [r0, #0]
 800cafc:	6800      	ldr	r0, [r0, #0]
 800cafe:	f380 8808 	msr	MSP, r0
 800cb02:	f04f 0000 	mov.w	r0, #0
 800cb06:	f380 8814 	msr	CONTROL, r0
 800cb0a:	b662      	cpsie	i
 800cb0c:	b661      	cpsie	f
 800cb0e:	f3bf 8f4f 	dsb	sy
 800cb12:	f3bf 8f6f 	isb	sy
 800cb16:	df00      	svc	0
 800cb18:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800cb1a:	bf00      	nop
 800cb1c:	e000ed08 	.word	0xe000ed08

0800cb20 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800cb20:	b580      	push	{r7, lr}
 800cb22:	b086      	sub	sp, #24
 800cb24:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800cb26:	4b46      	ldr	r3, [pc, #280]	; (800cc40 <xPortStartScheduler+0x120>)
 800cb28:	681b      	ldr	r3, [r3, #0]
 800cb2a:	4a46      	ldr	r2, [pc, #280]	; (800cc44 <xPortStartScheduler+0x124>)
 800cb2c:	4293      	cmp	r3, r2
 800cb2e:	d10a      	bne.n	800cb46 <xPortStartScheduler+0x26>
	__asm volatile
 800cb30:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cb34:	f383 8811 	msr	BASEPRI, r3
 800cb38:	f3bf 8f6f 	isb	sy
 800cb3c:	f3bf 8f4f 	dsb	sy
 800cb40:	613b      	str	r3, [r7, #16]
}
 800cb42:	bf00      	nop
 800cb44:	e7fe      	b.n	800cb44 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800cb46:	4b3e      	ldr	r3, [pc, #248]	; (800cc40 <xPortStartScheduler+0x120>)
 800cb48:	681b      	ldr	r3, [r3, #0]
 800cb4a:	4a3f      	ldr	r2, [pc, #252]	; (800cc48 <xPortStartScheduler+0x128>)
 800cb4c:	4293      	cmp	r3, r2
 800cb4e:	d10a      	bne.n	800cb66 <xPortStartScheduler+0x46>
	__asm volatile
 800cb50:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cb54:	f383 8811 	msr	BASEPRI, r3
 800cb58:	f3bf 8f6f 	isb	sy
 800cb5c:	f3bf 8f4f 	dsb	sy
 800cb60:	60fb      	str	r3, [r7, #12]
}
 800cb62:	bf00      	nop
 800cb64:	e7fe      	b.n	800cb64 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800cb66:	4b39      	ldr	r3, [pc, #228]	; (800cc4c <xPortStartScheduler+0x12c>)
 800cb68:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800cb6a:	697b      	ldr	r3, [r7, #20]
 800cb6c:	781b      	ldrb	r3, [r3, #0]
 800cb6e:	b2db      	uxtb	r3, r3
 800cb70:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800cb72:	697b      	ldr	r3, [r7, #20]
 800cb74:	22ff      	movs	r2, #255	; 0xff
 800cb76:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800cb78:	697b      	ldr	r3, [r7, #20]
 800cb7a:	781b      	ldrb	r3, [r3, #0]
 800cb7c:	b2db      	uxtb	r3, r3
 800cb7e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800cb80:	78fb      	ldrb	r3, [r7, #3]
 800cb82:	b2db      	uxtb	r3, r3
 800cb84:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800cb88:	b2da      	uxtb	r2, r3
 800cb8a:	4b31      	ldr	r3, [pc, #196]	; (800cc50 <xPortStartScheduler+0x130>)
 800cb8c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800cb8e:	4b31      	ldr	r3, [pc, #196]	; (800cc54 <xPortStartScheduler+0x134>)
 800cb90:	2207      	movs	r2, #7
 800cb92:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800cb94:	e009      	b.n	800cbaa <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800cb96:	4b2f      	ldr	r3, [pc, #188]	; (800cc54 <xPortStartScheduler+0x134>)
 800cb98:	681b      	ldr	r3, [r3, #0]
 800cb9a:	3b01      	subs	r3, #1
 800cb9c:	4a2d      	ldr	r2, [pc, #180]	; (800cc54 <xPortStartScheduler+0x134>)
 800cb9e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800cba0:	78fb      	ldrb	r3, [r7, #3]
 800cba2:	b2db      	uxtb	r3, r3
 800cba4:	005b      	lsls	r3, r3, #1
 800cba6:	b2db      	uxtb	r3, r3
 800cba8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800cbaa:	78fb      	ldrb	r3, [r7, #3]
 800cbac:	b2db      	uxtb	r3, r3
 800cbae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800cbb2:	2b80      	cmp	r3, #128	; 0x80
 800cbb4:	d0ef      	beq.n	800cb96 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800cbb6:	4b27      	ldr	r3, [pc, #156]	; (800cc54 <xPortStartScheduler+0x134>)
 800cbb8:	681b      	ldr	r3, [r3, #0]
 800cbba:	f1c3 0307 	rsb	r3, r3, #7
 800cbbe:	2b04      	cmp	r3, #4
 800cbc0:	d00a      	beq.n	800cbd8 <xPortStartScheduler+0xb8>
	__asm volatile
 800cbc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cbc6:	f383 8811 	msr	BASEPRI, r3
 800cbca:	f3bf 8f6f 	isb	sy
 800cbce:	f3bf 8f4f 	dsb	sy
 800cbd2:	60bb      	str	r3, [r7, #8]
}
 800cbd4:	bf00      	nop
 800cbd6:	e7fe      	b.n	800cbd6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800cbd8:	4b1e      	ldr	r3, [pc, #120]	; (800cc54 <xPortStartScheduler+0x134>)
 800cbda:	681b      	ldr	r3, [r3, #0]
 800cbdc:	021b      	lsls	r3, r3, #8
 800cbde:	4a1d      	ldr	r2, [pc, #116]	; (800cc54 <xPortStartScheduler+0x134>)
 800cbe0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800cbe2:	4b1c      	ldr	r3, [pc, #112]	; (800cc54 <xPortStartScheduler+0x134>)
 800cbe4:	681b      	ldr	r3, [r3, #0]
 800cbe6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800cbea:	4a1a      	ldr	r2, [pc, #104]	; (800cc54 <xPortStartScheduler+0x134>)
 800cbec:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800cbee:	687b      	ldr	r3, [r7, #4]
 800cbf0:	b2da      	uxtb	r2, r3
 800cbf2:	697b      	ldr	r3, [r7, #20]
 800cbf4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800cbf6:	4b18      	ldr	r3, [pc, #96]	; (800cc58 <xPortStartScheduler+0x138>)
 800cbf8:	681b      	ldr	r3, [r3, #0]
 800cbfa:	4a17      	ldr	r2, [pc, #92]	; (800cc58 <xPortStartScheduler+0x138>)
 800cbfc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800cc00:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800cc02:	4b15      	ldr	r3, [pc, #84]	; (800cc58 <xPortStartScheduler+0x138>)
 800cc04:	681b      	ldr	r3, [r3, #0]
 800cc06:	4a14      	ldr	r2, [pc, #80]	; (800cc58 <xPortStartScheduler+0x138>)
 800cc08:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800cc0c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800cc0e:	f000 f8dd 	bl	800cdcc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800cc12:	4b12      	ldr	r3, [pc, #72]	; (800cc5c <xPortStartScheduler+0x13c>)
 800cc14:	2200      	movs	r2, #0
 800cc16:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800cc18:	f000 f8fc 	bl	800ce14 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800cc1c:	4b10      	ldr	r3, [pc, #64]	; (800cc60 <xPortStartScheduler+0x140>)
 800cc1e:	681b      	ldr	r3, [r3, #0]
 800cc20:	4a0f      	ldr	r2, [pc, #60]	; (800cc60 <xPortStartScheduler+0x140>)
 800cc22:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800cc26:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800cc28:	f7ff ff66 	bl	800caf8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800cc2c:	f7fe ff22 	bl	800ba74 <vTaskSwitchContext>
	prvTaskExitError();
 800cc30:	f7ff ff1e 	bl	800ca70 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800cc34:	2300      	movs	r3, #0
}
 800cc36:	4618      	mov	r0, r3
 800cc38:	3718      	adds	r7, #24
 800cc3a:	46bd      	mov	sp, r7
 800cc3c:	bd80      	pop	{r7, pc}
 800cc3e:	bf00      	nop
 800cc40:	e000ed00 	.word	0xe000ed00
 800cc44:	410fc271 	.word	0x410fc271
 800cc48:	410fc270 	.word	0x410fc270
 800cc4c:	e000e400 	.word	0xe000e400
 800cc50:	20002220 	.word	0x20002220
 800cc54:	20002224 	.word	0x20002224
 800cc58:	e000ed20 	.word	0xe000ed20
 800cc5c:	20000040 	.word	0x20000040
 800cc60:	e000ef34 	.word	0xe000ef34

0800cc64 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800cc64:	b480      	push	{r7}
 800cc66:	b083      	sub	sp, #12
 800cc68:	af00      	add	r7, sp, #0
	__asm volatile
 800cc6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc6e:	f383 8811 	msr	BASEPRI, r3
 800cc72:	f3bf 8f6f 	isb	sy
 800cc76:	f3bf 8f4f 	dsb	sy
 800cc7a:	607b      	str	r3, [r7, #4]
}
 800cc7c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800cc7e:	4b0f      	ldr	r3, [pc, #60]	; (800ccbc <vPortEnterCritical+0x58>)
 800cc80:	681b      	ldr	r3, [r3, #0]
 800cc82:	3301      	adds	r3, #1
 800cc84:	4a0d      	ldr	r2, [pc, #52]	; (800ccbc <vPortEnterCritical+0x58>)
 800cc86:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800cc88:	4b0c      	ldr	r3, [pc, #48]	; (800ccbc <vPortEnterCritical+0x58>)
 800cc8a:	681b      	ldr	r3, [r3, #0]
 800cc8c:	2b01      	cmp	r3, #1
 800cc8e:	d10f      	bne.n	800ccb0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800cc90:	4b0b      	ldr	r3, [pc, #44]	; (800ccc0 <vPortEnterCritical+0x5c>)
 800cc92:	681b      	ldr	r3, [r3, #0]
 800cc94:	b2db      	uxtb	r3, r3
 800cc96:	2b00      	cmp	r3, #0
 800cc98:	d00a      	beq.n	800ccb0 <vPortEnterCritical+0x4c>
	__asm volatile
 800cc9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc9e:	f383 8811 	msr	BASEPRI, r3
 800cca2:	f3bf 8f6f 	isb	sy
 800cca6:	f3bf 8f4f 	dsb	sy
 800ccaa:	603b      	str	r3, [r7, #0]
}
 800ccac:	bf00      	nop
 800ccae:	e7fe      	b.n	800ccae <vPortEnterCritical+0x4a>
	}
}
 800ccb0:	bf00      	nop
 800ccb2:	370c      	adds	r7, #12
 800ccb4:	46bd      	mov	sp, r7
 800ccb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccba:	4770      	bx	lr
 800ccbc:	20000040 	.word	0x20000040
 800ccc0:	e000ed04 	.word	0xe000ed04

0800ccc4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800ccc4:	b480      	push	{r7}
 800ccc6:	b083      	sub	sp, #12
 800ccc8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800ccca:	4b12      	ldr	r3, [pc, #72]	; (800cd14 <vPortExitCritical+0x50>)
 800cccc:	681b      	ldr	r3, [r3, #0]
 800ccce:	2b00      	cmp	r3, #0
 800ccd0:	d10a      	bne.n	800cce8 <vPortExitCritical+0x24>
	__asm volatile
 800ccd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ccd6:	f383 8811 	msr	BASEPRI, r3
 800ccda:	f3bf 8f6f 	isb	sy
 800ccde:	f3bf 8f4f 	dsb	sy
 800cce2:	607b      	str	r3, [r7, #4]
}
 800cce4:	bf00      	nop
 800cce6:	e7fe      	b.n	800cce6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800cce8:	4b0a      	ldr	r3, [pc, #40]	; (800cd14 <vPortExitCritical+0x50>)
 800ccea:	681b      	ldr	r3, [r3, #0]
 800ccec:	3b01      	subs	r3, #1
 800ccee:	4a09      	ldr	r2, [pc, #36]	; (800cd14 <vPortExitCritical+0x50>)
 800ccf0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800ccf2:	4b08      	ldr	r3, [pc, #32]	; (800cd14 <vPortExitCritical+0x50>)
 800ccf4:	681b      	ldr	r3, [r3, #0]
 800ccf6:	2b00      	cmp	r3, #0
 800ccf8:	d105      	bne.n	800cd06 <vPortExitCritical+0x42>
 800ccfa:	2300      	movs	r3, #0
 800ccfc:	603b      	str	r3, [r7, #0]
	__asm volatile
 800ccfe:	683b      	ldr	r3, [r7, #0]
 800cd00:	f383 8811 	msr	BASEPRI, r3
}
 800cd04:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800cd06:	bf00      	nop
 800cd08:	370c      	adds	r7, #12
 800cd0a:	46bd      	mov	sp, r7
 800cd0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd10:	4770      	bx	lr
 800cd12:	bf00      	nop
 800cd14:	20000040 	.word	0x20000040
	...

0800cd20 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800cd20:	f3ef 8009 	mrs	r0, PSP
 800cd24:	f3bf 8f6f 	isb	sy
 800cd28:	4b15      	ldr	r3, [pc, #84]	; (800cd80 <pxCurrentTCBConst>)
 800cd2a:	681a      	ldr	r2, [r3, #0]
 800cd2c:	f01e 0f10 	tst.w	lr, #16
 800cd30:	bf08      	it	eq
 800cd32:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800cd36:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cd3a:	6010      	str	r0, [r2, #0]
 800cd3c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800cd40:	f04f 0050 	mov.w	r0, #80	; 0x50
 800cd44:	f380 8811 	msr	BASEPRI, r0
 800cd48:	f3bf 8f4f 	dsb	sy
 800cd4c:	f3bf 8f6f 	isb	sy
 800cd50:	f7fe fe90 	bl	800ba74 <vTaskSwitchContext>
 800cd54:	f04f 0000 	mov.w	r0, #0
 800cd58:	f380 8811 	msr	BASEPRI, r0
 800cd5c:	bc09      	pop	{r0, r3}
 800cd5e:	6819      	ldr	r1, [r3, #0]
 800cd60:	6808      	ldr	r0, [r1, #0]
 800cd62:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cd66:	f01e 0f10 	tst.w	lr, #16
 800cd6a:	bf08      	it	eq
 800cd6c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800cd70:	f380 8809 	msr	PSP, r0
 800cd74:	f3bf 8f6f 	isb	sy
 800cd78:	4770      	bx	lr
 800cd7a:	bf00      	nop
 800cd7c:	f3af 8000 	nop.w

0800cd80 <pxCurrentTCBConst>:
 800cd80:	20001bf0 	.word	0x20001bf0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800cd84:	bf00      	nop
 800cd86:	bf00      	nop

0800cd88 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800cd88:	b580      	push	{r7, lr}
 800cd8a:	b082      	sub	sp, #8
 800cd8c:	af00      	add	r7, sp, #0
	__asm volatile
 800cd8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd92:	f383 8811 	msr	BASEPRI, r3
 800cd96:	f3bf 8f6f 	isb	sy
 800cd9a:	f3bf 8f4f 	dsb	sy
 800cd9e:	607b      	str	r3, [r7, #4]
}
 800cda0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800cda2:	f7fe fda9 	bl	800b8f8 <xTaskIncrementTick>
 800cda6:	4603      	mov	r3, r0
 800cda8:	2b00      	cmp	r3, #0
 800cdaa:	d003      	beq.n	800cdb4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800cdac:	4b06      	ldr	r3, [pc, #24]	; (800cdc8 <SysTick_Handler+0x40>)
 800cdae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cdb2:	601a      	str	r2, [r3, #0]
 800cdb4:	2300      	movs	r3, #0
 800cdb6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800cdb8:	683b      	ldr	r3, [r7, #0]
 800cdba:	f383 8811 	msr	BASEPRI, r3
}
 800cdbe:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800cdc0:	bf00      	nop
 800cdc2:	3708      	adds	r7, #8
 800cdc4:	46bd      	mov	sp, r7
 800cdc6:	bd80      	pop	{r7, pc}
 800cdc8:	e000ed04 	.word	0xe000ed04

0800cdcc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800cdcc:	b480      	push	{r7}
 800cdce:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800cdd0:	4b0b      	ldr	r3, [pc, #44]	; (800ce00 <vPortSetupTimerInterrupt+0x34>)
 800cdd2:	2200      	movs	r2, #0
 800cdd4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800cdd6:	4b0b      	ldr	r3, [pc, #44]	; (800ce04 <vPortSetupTimerInterrupt+0x38>)
 800cdd8:	2200      	movs	r2, #0
 800cdda:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800cddc:	4b0a      	ldr	r3, [pc, #40]	; (800ce08 <vPortSetupTimerInterrupt+0x3c>)
 800cdde:	681b      	ldr	r3, [r3, #0]
 800cde0:	4a0a      	ldr	r2, [pc, #40]	; (800ce0c <vPortSetupTimerInterrupt+0x40>)
 800cde2:	fba2 2303 	umull	r2, r3, r2, r3
 800cde6:	099b      	lsrs	r3, r3, #6
 800cde8:	4a09      	ldr	r2, [pc, #36]	; (800ce10 <vPortSetupTimerInterrupt+0x44>)
 800cdea:	3b01      	subs	r3, #1
 800cdec:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800cdee:	4b04      	ldr	r3, [pc, #16]	; (800ce00 <vPortSetupTimerInterrupt+0x34>)
 800cdf0:	2207      	movs	r2, #7
 800cdf2:	601a      	str	r2, [r3, #0]
}
 800cdf4:	bf00      	nop
 800cdf6:	46bd      	mov	sp, r7
 800cdf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdfc:	4770      	bx	lr
 800cdfe:	bf00      	nop
 800ce00:	e000e010 	.word	0xe000e010
 800ce04:	e000e018 	.word	0xe000e018
 800ce08:	2000001c 	.word	0x2000001c
 800ce0c:	10624dd3 	.word	0x10624dd3
 800ce10:	e000e014 	.word	0xe000e014

0800ce14 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800ce14:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800ce24 <vPortEnableVFP+0x10>
 800ce18:	6801      	ldr	r1, [r0, #0]
 800ce1a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800ce1e:	6001      	str	r1, [r0, #0]
 800ce20:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800ce22:	bf00      	nop
 800ce24:	e000ed88 	.word	0xe000ed88

0800ce28 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800ce28:	b480      	push	{r7}
 800ce2a:	b085      	sub	sp, #20
 800ce2c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800ce2e:	f3ef 8305 	mrs	r3, IPSR
 800ce32:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800ce34:	68fb      	ldr	r3, [r7, #12]
 800ce36:	2b0f      	cmp	r3, #15
 800ce38:	d914      	bls.n	800ce64 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800ce3a:	4a17      	ldr	r2, [pc, #92]	; (800ce98 <vPortValidateInterruptPriority+0x70>)
 800ce3c:	68fb      	ldr	r3, [r7, #12]
 800ce3e:	4413      	add	r3, r2
 800ce40:	781b      	ldrb	r3, [r3, #0]
 800ce42:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800ce44:	4b15      	ldr	r3, [pc, #84]	; (800ce9c <vPortValidateInterruptPriority+0x74>)
 800ce46:	781b      	ldrb	r3, [r3, #0]
 800ce48:	7afa      	ldrb	r2, [r7, #11]
 800ce4a:	429a      	cmp	r2, r3
 800ce4c:	d20a      	bcs.n	800ce64 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800ce4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ce52:	f383 8811 	msr	BASEPRI, r3
 800ce56:	f3bf 8f6f 	isb	sy
 800ce5a:	f3bf 8f4f 	dsb	sy
 800ce5e:	607b      	str	r3, [r7, #4]
}
 800ce60:	bf00      	nop
 800ce62:	e7fe      	b.n	800ce62 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800ce64:	4b0e      	ldr	r3, [pc, #56]	; (800cea0 <vPortValidateInterruptPriority+0x78>)
 800ce66:	681b      	ldr	r3, [r3, #0]
 800ce68:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800ce6c:	4b0d      	ldr	r3, [pc, #52]	; (800cea4 <vPortValidateInterruptPriority+0x7c>)
 800ce6e:	681b      	ldr	r3, [r3, #0]
 800ce70:	429a      	cmp	r2, r3
 800ce72:	d90a      	bls.n	800ce8a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800ce74:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ce78:	f383 8811 	msr	BASEPRI, r3
 800ce7c:	f3bf 8f6f 	isb	sy
 800ce80:	f3bf 8f4f 	dsb	sy
 800ce84:	603b      	str	r3, [r7, #0]
}
 800ce86:	bf00      	nop
 800ce88:	e7fe      	b.n	800ce88 <vPortValidateInterruptPriority+0x60>
	}
 800ce8a:	bf00      	nop
 800ce8c:	3714      	adds	r7, #20
 800ce8e:	46bd      	mov	sp, r7
 800ce90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce94:	4770      	bx	lr
 800ce96:	bf00      	nop
 800ce98:	e000e3f0 	.word	0xe000e3f0
 800ce9c:	20002220 	.word	0x20002220
 800cea0:	e000ed0c 	.word	0xe000ed0c
 800cea4:	20002224 	.word	0x20002224

0800cea8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800cea8:	b580      	push	{r7, lr}
 800ceaa:	b08a      	sub	sp, #40	; 0x28
 800ceac:	af00      	add	r7, sp, #0
 800ceae:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800ceb0:	2300      	movs	r3, #0
 800ceb2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800ceb4:	f7fe fc64 	bl	800b780 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800ceb8:	4b58      	ldr	r3, [pc, #352]	; (800d01c <pvPortMalloc+0x174>)
 800ceba:	681b      	ldr	r3, [r3, #0]
 800cebc:	2b00      	cmp	r3, #0
 800cebe:	d101      	bne.n	800cec4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800cec0:	f000 f910 	bl	800d0e4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800cec4:	4b56      	ldr	r3, [pc, #344]	; (800d020 <pvPortMalloc+0x178>)
 800cec6:	681a      	ldr	r2, [r3, #0]
 800cec8:	687b      	ldr	r3, [r7, #4]
 800ceca:	4013      	ands	r3, r2
 800cecc:	2b00      	cmp	r3, #0
 800cece:	f040 808e 	bne.w	800cfee <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800ced2:	687b      	ldr	r3, [r7, #4]
 800ced4:	2b00      	cmp	r3, #0
 800ced6:	d01d      	beq.n	800cf14 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800ced8:	2208      	movs	r2, #8
 800ceda:	687b      	ldr	r3, [r7, #4]
 800cedc:	4413      	add	r3, r2
 800cede:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800cee0:	687b      	ldr	r3, [r7, #4]
 800cee2:	f003 0307 	and.w	r3, r3, #7
 800cee6:	2b00      	cmp	r3, #0
 800cee8:	d014      	beq.n	800cf14 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800ceea:	687b      	ldr	r3, [r7, #4]
 800ceec:	f023 0307 	bic.w	r3, r3, #7
 800cef0:	3308      	adds	r3, #8
 800cef2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800cef4:	687b      	ldr	r3, [r7, #4]
 800cef6:	f003 0307 	and.w	r3, r3, #7
 800cefa:	2b00      	cmp	r3, #0
 800cefc:	d00a      	beq.n	800cf14 <pvPortMalloc+0x6c>
	__asm volatile
 800cefe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf02:	f383 8811 	msr	BASEPRI, r3
 800cf06:	f3bf 8f6f 	isb	sy
 800cf0a:	f3bf 8f4f 	dsb	sy
 800cf0e:	617b      	str	r3, [r7, #20]
}
 800cf10:	bf00      	nop
 800cf12:	e7fe      	b.n	800cf12 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800cf14:	687b      	ldr	r3, [r7, #4]
 800cf16:	2b00      	cmp	r3, #0
 800cf18:	d069      	beq.n	800cfee <pvPortMalloc+0x146>
 800cf1a:	4b42      	ldr	r3, [pc, #264]	; (800d024 <pvPortMalloc+0x17c>)
 800cf1c:	681b      	ldr	r3, [r3, #0]
 800cf1e:	687a      	ldr	r2, [r7, #4]
 800cf20:	429a      	cmp	r2, r3
 800cf22:	d864      	bhi.n	800cfee <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800cf24:	4b40      	ldr	r3, [pc, #256]	; (800d028 <pvPortMalloc+0x180>)
 800cf26:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800cf28:	4b3f      	ldr	r3, [pc, #252]	; (800d028 <pvPortMalloc+0x180>)
 800cf2a:	681b      	ldr	r3, [r3, #0]
 800cf2c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800cf2e:	e004      	b.n	800cf3a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800cf30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf32:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800cf34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf36:	681b      	ldr	r3, [r3, #0]
 800cf38:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800cf3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf3c:	685b      	ldr	r3, [r3, #4]
 800cf3e:	687a      	ldr	r2, [r7, #4]
 800cf40:	429a      	cmp	r2, r3
 800cf42:	d903      	bls.n	800cf4c <pvPortMalloc+0xa4>
 800cf44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf46:	681b      	ldr	r3, [r3, #0]
 800cf48:	2b00      	cmp	r3, #0
 800cf4a:	d1f1      	bne.n	800cf30 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800cf4c:	4b33      	ldr	r3, [pc, #204]	; (800d01c <pvPortMalloc+0x174>)
 800cf4e:	681b      	ldr	r3, [r3, #0]
 800cf50:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cf52:	429a      	cmp	r2, r3
 800cf54:	d04b      	beq.n	800cfee <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800cf56:	6a3b      	ldr	r3, [r7, #32]
 800cf58:	681b      	ldr	r3, [r3, #0]
 800cf5a:	2208      	movs	r2, #8
 800cf5c:	4413      	add	r3, r2
 800cf5e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800cf60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf62:	681a      	ldr	r2, [r3, #0]
 800cf64:	6a3b      	ldr	r3, [r7, #32]
 800cf66:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800cf68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf6a:	685a      	ldr	r2, [r3, #4]
 800cf6c:	687b      	ldr	r3, [r7, #4]
 800cf6e:	1ad2      	subs	r2, r2, r3
 800cf70:	2308      	movs	r3, #8
 800cf72:	005b      	lsls	r3, r3, #1
 800cf74:	429a      	cmp	r2, r3
 800cf76:	d91f      	bls.n	800cfb8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800cf78:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cf7a:	687b      	ldr	r3, [r7, #4]
 800cf7c:	4413      	add	r3, r2
 800cf7e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800cf80:	69bb      	ldr	r3, [r7, #24]
 800cf82:	f003 0307 	and.w	r3, r3, #7
 800cf86:	2b00      	cmp	r3, #0
 800cf88:	d00a      	beq.n	800cfa0 <pvPortMalloc+0xf8>
	__asm volatile
 800cf8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf8e:	f383 8811 	msr	BASEPRI, r3
 800cf92:	f3bf 8f6f 	isb	sy
 800cf96:	f3bf 8f4f 	dsb	sy
 800cf9a:	613b      	str	r3, [r7, #16]
}
 800cf9c:	bf00      	nop
 800cf9e:	e7fe      	b.n	800cf9e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800cfa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cfa2:	685a      	ldr	r2, [r3, #4]
 800cfa4:	687b      	ldr	r3, [r7, #4]
 800cfa6:	1ad2      	subs	r2, r2, r3
 800cfa8:	69bb      	ldr	r3, [r7, #24]
 800cfaa:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800cfac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cfae:	687a      	ldr	r2, [r7, #4]
 800cfb0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800cfb2:	69b8      	ldr	r0, [r7, #24]
 800cfb4:	f000 f8f8 	bl	800d1a8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800cfb8:	4b1a      	ldr	r3, [pc, #104]	; (800d024 <pvPortMalloc+0x17c>)
 800cfba:	681a      	ldr	r2, [r3, #0]
 800cfbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cfbe:	685b      	ldr	r3, [r3, #4]
 800cfc0:	1ad3      	subs	r3, r2, r3
 800cfc2:	4a18      	ldr	r2, [pc, #96]	; (800d024 <pvPortMalloc+0x17c>)
 800cfc4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800cfc6:	4b17      	ldr	r3, [pc, #92]	; (800d024 <pvPortMalloc+0x17c>)
 800cfc8:	681a      	ldr	r2, [r3, #0]
 800cfca:	4b18      	ldr	r3, [pc, #96]	; (800d02c <pvPortMalloc+0x184>)
 800cfcc:	681b      	ldr	r3, [r3, #0]
 800cfce:	429a      	cmp	r2, r3
 800cfd0:	d203      	bcs.n	800cfda <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800cfd2:	4b14      	ldr	r3, [pc, #80]	; (800d024 <pvPortMalloc+0x17c>)
 800cfd4:	681b      	ldr	r3, [r3, #0]
 800cfd6:	4a15      	ldr	r2, [pc, #84]	; (800d02c <pvPortMalloc+0x184>)
 800cfd8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800cfda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cfdc:	685a      	ldr	r2, [r3, #4]
 800cfde:	4b10      	ldr	r3, [pc, #64]	; (800d020 <pvPortMalloc+0x178>)
 800cfe0:	681b      	ldr	r3, [r3, #0]
 800cfe2:	431a      	orrs	r2, r3
 800cfe4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cfe6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800cfe8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cfea:	2200      	movs	r2, #0
 800cfec:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800cfee:	f7fe fbd5 	bl	800b79c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800cff2:	69fb      	ldr	r3, [r7, #28]
 800cff4:	f003 0307 	and.w	r3, r3, #7
 800cff8:	2b00      	cmp	r3, #0
 800cffa:	d00a      	beq.n	800d012 <pvPortMalloc+0x16a>
	__asm volatile
 800cffc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d000:	f383 8811 	msr	BASEPRI, r3
 800d004:	f3bf 8f6f 	isb	sy
 800d008:	f3bf 8f4f 	dsb	sy
 800d00c:	60fb      	str	r3, [r7, #12]
}
 800d00e:	bf00      	nop
 800d010:	e7fe      	b.n	800d010 <pvPortMalloc+0x168>
	return pvReturn;
 800d012:	69fb      	ldr	r3, [r7, #28]
}
 800d014:	4618      	mov	r0, r3
 800d016:	3728      	adds	r7, #40	; 0x28
 800d018:	46bd      	mov	sp, r7
 800d01a:	bd80      	pop	{r7, pc}
 800d01c:	20002e30 	.word	0x20002e30
 800d020:	20002e3c 	.word	0x20002e3c
 800d024:	20002e34 	.word	0x20002e34
 800d028:	20002e28 	.word	0x20002e28
 800d02c:	20002e38 	.word	0x20002e38

0800d030 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800d030:	b580      	push	{r7, lr}
 800d032:	b086      	sub	sp, #24
 800d034:	af00      	add	r7, sp, #0
 800d036:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800d038:	687b      	ldr	r3, [r7, #4]
 800d03a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800d03c:	687b      	ldr	r3, [r7, #4]
 800d03e:	2b00      	cmp	r3, #0
 800d040:	d048      	beq.n	800d0d4 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800d042:	2308      	movs	r3, #8
 800d044:	425b      	negs	r3, r3
 800d046:	697a      	ldr	r2, [r7, #20]
 800d048:	4413      	add	r3, r2
 800d04a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800d04c:	697b      	ldr	r3, [r7, #20]
 800d04e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800d050:	693b      	ldr	r3, [r7, #16]
 800d052:	685a      	ldr	r2, [r3, #4]
 800d054:	4b21      	ldr	r3, [pc, #132]	; (800d0dc <vPortFree+0xac>)
 800d056:	681b      	ldr	r3, [r3, #0]
 800d058:	4013      	ands	r3, r2
 800d05a:	2b00      	cmp	r3, #0
 800d05c:	d10a      	bne.n	800d074 <vPortFree+0x44>
	__asm volatile
 800d05e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d062:	f383 8811 	msr	BASEPRI, r3
 800d066:	f3bf 8f6f 	isb	sy
 800d06a:	f3bf 8f4f 	dsb	sy
 800d06e:	60fb      	str	r3, [r7, #12]
}
 800d070:	bf00      	nop
 800d072:	e7fe      	b.n	800d072 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800d074:	693b      	ldr	r3, [r7, #16]
 800d076:	681b      	ldr	r3, [r3, #0]
 800d078:	2b00      	cmp	r3, #0
 800d07a:	d00a      	beq.n	800d092 <vPortFree+0x62>
	__asm volatile
 800d07c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d080:	f383 8811 	msr	BASEPRI, r3
 800d084:	f3bf 8f6f 	isb	sy
 800d088:	f3bf 8f4f 	dsb	sy
 800d08c:	60bb      	str	r3, [r7, #8]
}
 800d08e:	bf00      	nop
 800d090:	e7fe      	b.n	800d090 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800d092:	693b      	ldr	r3, [r7, #16]
 800d094:	685a      	ldr	r2, [r3, #4]
 800d096:	4b11      	ldr	r3, [pc, #68]	; (800d0dc <vPortFree+0xac>)
 800d098:	681b      	ldr	r3, [r3, #0]
 800d09a:	4013      	ands	r3, r2
 800d09c:	2b00      	cmp	r3, #0
 800d09e:	d019      	beq.n	800d0d4 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800d0a0:	693b      	ldr	r3, [r7, #16]
 800d0a2:	681b      	ldr	r3, [r3, #0]
 800d0a4:	2b00      	cmp	r3, #0
 800d0a6:	d115      	bne.n	800d0d4 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800d0a8:	693b      	ldr	r3, [r7, #16]
 800d0aa:	685a      	ldr	r2, [r3, #4]
 800d0ac:	4b0b      	ldr	r3, [pc, #44]	; (800d0dc <vPortFree+0xac>)
 800d0ae:	681b      	ldr	r3, [r3, #0]
 800d0b0:	43db      	mvns	r3, r3
 800d0b2:	401a      	ands	r2, r3
 800d0b4:	693b      	ldr	r3, [r7, #16]
 800d0b6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800d0b8:	f7fe fb62 	bl	800b780 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800d0bc:	693b      	ldr	r3, [r7, #16]
 800d0be:	685a      	ldr	r2, [r3, #4]
 800d0c0:	4b07      	ldr	r3, [pc, #28]	; (800d0e0 <vPortFree+0xb0>)
 800d0c2:	681b      	ldr	r3, [r3, #0]
 800d0c4:	4413      	add	r3, r2
 800d0c6:	4a06      	ldr	r2, [pc, #24]	; (800d0e0 <vPortFree+0xb0>)
 800d0c8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800d0ca:	6938      	ldr	r0, [r7, #16]
 800d0cc:	f000 f86c 	bl	800d1a8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800d0d0:	f7fe fb64 	bl	800b79c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800d0d4:	bf00      	nop
 800d0d6:	3718      	adds	r7, #24
 800d0d8:	46bd      	mov	sp, r7
 800d0da:	bd80      	pop	{r7, pc}
 800d0dc:	20002e3c 	.word	0x20002e3c
 800d0e0:	20002e34 	.word	0x20002e34

0800d0e4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800d0e4:	b480      	push	{r7}
 800d0e6:	b085      	sub	sp, #20
 800d0e8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800d0ea:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800d0ee:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800d0f0:	4b27      	ldr	r3, [pc, #156]	; (800d190 <prvHeapInit+0xac>)
 800d0f2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800d0f4:	68fb      	ldr	r3, [r7, #12]
 800d0f6:	f003 0307 	and.w	r3, r3, #7
 800d0fa:	2b00      	cmp	r3, #0
 800d0fc:	d00c      	beq.n	800d118 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800d0fe:	68fb      	ldr	r3, [r7, #12]
 800d100:	3307      	adds	r3, #7
 800d102:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800d104:	68fb      	ldr	r3, [r7, #12]
 800d106:	f023 0307 	bic.w	r3, r3, #7
 800d10a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800d10c:	68ba      	ldr	r2, [r7, #8]
 800d10e:	68fb      	ldr	r3, [r7, #12]
 800d110:	1ad3      	subs	r3, r2, r3
 800d112:	4a1f      	ldr	r2, [pc, #124]	; (800d190 <prvHeapInit+0xac>)
 800d114:	4413      	add	r3, r2
 800d116:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800d118:	68fb      	ldr	r3, [r7, #12]
 800d11a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800d11c:	4a1d      	ldr	r2, [pc, #116]	; (800d194 <prvHeapInit+0xb0>)
 800d11e:	687b      	ldr	r3, [r7, #4]
 800d120:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800d122:	4b1c      	ldr	r3, [pc, #112]	; (800d194 <prvHeapInit+0xb0>)
 800d124:	2200      	movs	r2, #0
 800d126:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800d128:	687b      	ldr	r3, [r7, #4]
 800d12a:	68ba      	ldr	r2, [r7, #8]
 800d12c:	4413      	add	r3, r2
 800d12e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800d130:	2208      	movs	r2, #8
 800d132:	68fb      	ldr	r3, [r7, #12]
 800d134:	1a9b      	subs	r3, r3, r2
 800d136:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800d138:	68fb      	ldr	r3, [r7, #12]
 800d13a:	f023 0307 	bic.w	r3, r3, #7
 800d13e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800d140:	68fb      	ldr	r3, [r7, #12]
 800d142:	4a15      	ldr	r2, [pc, #84]	; (800d198 <prvHeapInit+0xb4>)
 800d144:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800d146:	4b14      	ldr	r3, [pc, #80]	; (800d198 <prvHeapInit+0xb4>)
 800d148:	681b      	ldr	r3, [r3, #0]
 800d14a:	2200      	movs	r2, #0
 800d14c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800d14e:	4b12      	ldr	r3, [pc, #72]	; (800d198 <prvHeapInit+0xb4>)
 800d150:	681b      	ldr	r3, [r3, #0]
 800d152:	2200      	movs	r2, #0
 800d154:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800d156:	687b      	ldr	r3, [r7, #4]
 800d158:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800d15a:	683b      	ldr	r3, [r7, #0]
 800d15c:	68fa      	ldr	r2, [r7, #12]
 800d15e:	1ad2      	subs	r2, r2, r3
 800d160:	683b      	ldr	r3, [r7, #0]
 800d162:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800d164:	4b0c      	ldr	r3, [pc, #48]	; (800d198 <prvHeapInit+0xb4>)
 800d166:	681a      	ldr	r2, [r3, #0]
 800d168:	683b      	ldr	r3, [r7, #0]
 800d16a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800d16c:	683b      	ldr	r3, [r7, #0]
 800d16e:	685b      	ldr	r3, [r3, #4]
 800d170:	4a0a      	ldr	r2, [pc, #40]	; (800d19c <prvHeapInit+0xb8>)
 800d172:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800d174:	683b      	ldr	r3, [r7, #0]
 800d176:	685b      	ldr	r3, [r3, #4]
 800d178:	4a09      	ldr	r2, [pc, #36]	; (800d1a0 <prvHeapInit+0xbc>)
 800d17a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800d17c:	4b09      	ldr	r3, [pc, #36]	; (800d1a4 <prvHeapInit+0xc0>)
 800d17e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800d182:	601a      	str	r2, [r3, #0]
}
 800d184:	bf00      	nop
 800d186:	3714      	adds	r7, #20
 800d188:	46bd      	mov	sp, r7
 800d18a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d18e:	4770      	bx	lr
 800d190:	20002228 	.word	0x20002228
 800d194:	20002e28 	.word	0x20002e28
 800d198:	20002e30 	.word	0x20002e30
 800d19c:	20002e38 	.word	0x20002e38
 800d1a0:	20002e34 	.word	0x20002e34
 800d1a4:	20002e3c 	.word	0x20002e3c

0800d1a8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800d1a8:	b480      	push	{r7}
 800d1aa:	b085      	sub	sp, #20
 800d1ac:	af00      	add	r7, sp, #0
 800d1ae:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800d1b0:	4b28      	ldr	r3, [pc, #160]	; (800d254 <prvInsertBlockIntoFreeList+0xac>)
 800d1b2:	60fb      	str	r3, [r7, #12]
 800d1b4:	e002      	b.n	800d1bc <prvInsertBlockIntoFreeList+0x14>
 800d1b6:	68fb      	ldr	r3, [r7, #12]
 800d1b8:	681b      	ldr	r3, [r3, #0]
 800d1ba:	60fb      	str	r3, [r7, #12]
 800d1bc:	68fb      	ldr	r3, [r7, #12]
 800d1be:	681b      	ldr	r3, [r3, #0]
 800d1c0:	687a      	ldr	r2, [r7, #4]
 800d1c2:	429a      	cmp	r2, r3
 800d1c4:	d8f7      	bhi.n	800d1b6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800d1c6:	68fb      	ldr	r3, [r7, #12]
 800d1c8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800d1ca:	68fb      	ldr	r3, [r7, #12]
 800d1cc:	685b      	ldr	r3, [r3, #4]
 800d1ce:	68ba      	ldr	r2, [r7, #8]
 800d1d0:	4413      	add	r3, r2
 800d1d2:	687a      	ldr	r2, [r7, #4]
 800d1d4:	429a      	cmp	r2, r3
 800d1d6:	d108      	bne.n	800d1ea <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800d1d8:	68fb      	ldr	r3, [r7, #12]
 800d1da:	685a      	ldr	r2, [r3, #4]
 800d1dc:	687b      	ldr	r3, [r7, #4]
 800d1de:	685b      	ldr	r3, [r3, #4]
 800d1e0:	441a      	add	r2, r3
 800d1e2:	68fb      	ldr	r3, [r7, #12]
 800d1e4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800d1e6:	68fb      	ldr	r3, [r7, #12]
 800d1e8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800d1ea:	687b      	ldr	r3, [r7, #4]
 800d1ec:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800d1ee:	687b      	ldr	r3, [r7, #4]
 800d1f0:	685b      	ldr	r3, [r3, #4]
 800d1f2:	68ba      	ldr	r2, [r7, #8]
 800d1f4:	441a      	add	r2, r3
 800d1f6:	68fb      	ldr	r3, [r7, #12]
 800d1f8:	681b      	ldr	r3, [r3, #0]
 800d1fa:	429a      	cmp	r2, r3
 800d1fc:	d118      	bne.n	800d230 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800d1fe:	68fb      	ldr	r3, [r7, #12]
 800d200:	681a      	ldr	r2, [r3, #0]
 800d202:	4b15      	ldr	r3, [pc, #84]	; (800d258 <prvInsertBlockIntoFreeList+0xb0>)
 800d204:	681b      	ldr	r3, [r3, #0]
 800d206:	429a      	cmp	r2, r3
 800d208:	d00d      	beq.n	800d226 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800d20a:	687b      	ldr	r3, [r7, #4]
 800d20c:	685a      	ldr	r2, [r3, #4]
 800d20e:	68fb      	ldr	r3, [r7, #12]
 800d210:	681b      	ldr	r3, [r3, #0]
 800d212:	685b      	ldr	r3, [r3, #4]
 800d214:	441a      	add	r2, r3
 800d216:	687b      	ldr	r3, [r7, #4]
 800d218:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800d21a:	68fb      	ldr	r3, [r7, #12]
 800d21c:	681b      	ldr	r3, [r3, #0]
 800d21e:	681a      	ldr	r2, [r3, #0]
 800d220:	687b      	ldr	r3, [r7, #4]
 800d222:	601a      	str	r2, [r3, #0]
 800d224:	e008      	b.n	800d238 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800d226:	4b0c      	ldr	r3, [pc, #48]	; (800d258 <prvInsertBlockIntoFreeList+0xb0>)
 800d228:	681a      	ldr	r2, [r3, #0]
 800d22a:	687b      	ldr	r3, [r7, #4]
 800d22c:	601a      	str	r2, [r3, #0]
 800d22e:	e003      	b.n	800d238 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800d230:	68fb      	ldr	r3, [r7, #12]
 800d232:	681a      	ldr	r2, [r3, #0]
 800d234:	687b      	ldr	r3, [r7, #4]
 800d236:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800d238:	68fa      	ldr	r2, [r7, #12]
 800d23a:	687b      	ldr	r3, [r7, #4]
 800d23c:	429a      	cmp	r2, r3
 800d23e:	d002      	beq.n	800d246 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800d240:	68fb      	ldr	r3, [r7, #12]
 800d242:	687a      	ldr	r2, [r7, #4]
 800d244:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800d246:	bf00      	nop
 800d248:	3714      	adds	r7, #20
 800d24a:	46bd      	mov	sp, r7
 800d24c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d250:	4770      	bx	lr
 800d252:	bf00      	nop
 800d254:	20002e28 	.word	0x20002e28
 800d258:	20002e30 	.word	0x20002e30

0800d25c <memset>:
 800d25c:	4402      	add	r2, r0
 800d25e:	4603      	mov	r3, r0
 800d260:	4293      	cmp	r3, r2
 800d262:	d100      	bne.n	800d266 <memset+0xa>
 800d264:	4770      	bx	lr
 800d266:	f803 1b01 	strb.w	r1, [r3], #1
 800d26a:	e7f9      	b.n	800d260 <memset+0x4>

0800d26c <strstr>:
 800d26c:	780a      	ldrb	r2, [r1, #0]
 800d26e:	b570      	push	{r4, r5, r6, lr}
 800d270:	b96a      	cbnz	r2, 800d28e <strstr+0x22>
 800d272:	bd70      	pop	{r4, r5, r6, pc}
 800d274:	429a      	cmp	r2, r3
 800d276:	d109      	bne.n	800d28c <strstr+0x20>
 800d278:	460c      	mov	r4, r1
 800d27a:	4605      	mov	r5, r0
 800d27c:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 800d280:	2b00      	cmp	r3, #0
 800d282:	d0f6      	beq.n	800d272 <strstr+0x6>
 800d284:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 800d288:	429e      	cmp	r6, r3
 800d28a:	d0f7      	beq.n	800d27c <strstr+0x10>
 800d28c:	3001      	adds	r0, #1
 800d28e:	7803      	ldrb	r3, [r0, #0]
 800d290:	2b00      	cmp	r3, #0
 800d292:	d1ef      	bne.n	800d274 <strstr+0x8>
 800d294:	4618      	mov	r0, r3
 800d296:	e7ec      	b.n	800d272 <strstr+0x6>

0800d298 <_reclaim_reent>:
 800d298:	4b29      	ldr	r3, [pc, #164]	; (800d340 <_reclaim_reent+0xa8>)
 800d29a:	681b      	ldr	r3, [r3, #0]
 800d29c:	4283      	cmp	r3, r0
 800d29e:	b570      	push	{r4, r5, r6, lr}
 800d2a0:	4604      	mov	r4, r0
 800d2a2:	d04b      	beq.n	800d33c <_reclaim_reent+0xa4>
 800d2a4:	69c3      	ldr	r3, [r0, #28]
 800d2a6:	b143      	cbz	r3, 800d2ba <_reclaim_reent+0x22>
 800d2a8:	68db      	ldr	r3, [r3, #12]
 800d2aa:	2b00      	cmp	r3, #0
 800d2ac:	d144      	bne.n	800d338 <_reclaim_reent+0xa0>
 800d2ae:	69e3      	ldr	r3, [r4, #28]
 800d2b0:	6819      	ldr	r1, [r3, #0]
 800d2b2:	b111      	cbz	r1, 800d2ba <_reclaim_reent+0x22>
 800d2b4:	4620      	mov	r0, r4
 800d2b6:	f000 f879 	bl	800d3ac <_free_r>
 800d2ba:	6961      	ldr	r1, [r4, #20]
 800d2bc:	b111      	cbz	r1, 800d2c4 <_reclaim_reent+0x2c>
 800d2be:	4620      	mov	r0, r4
 800d2c0:	f000 f874 	bl	800d3ac <_free_r>
 800d2c4:	69e1      	ldr	r1, [r4, #28]
 800d2c6:	b111      	cbz	r1, 800d2ce <_reclaim_reent+0x36>
 800d2c8:	4620      	mov	r0, r4
 800d2ca:	f000 f86f 	bl	800d3ac <_free_r>
 800d2ce:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800d2d0:	b111      	cbz	r1, 800d2d8 <_reclaim_reent+0x40>
 800d2d2:	4620      	mov	r0, r4
 800d2d4:	f000 f86a 	bl	800d3ac <_free_r>
 800d2d8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d2da:	b111      	cbz	r1, 800d2e2 <_reclaim_reent+0x4a>
 800d2dc:	4620      	mov	r0, r4
 800d2de:	f000 f865 	bl	800d3ac <_free_r>
 800d2e2:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800d2e4:	b111      	cbz	r1, 800d2ec <_reclaim_reent+0x54>
 800d2e6:	4620      	mov	r0, r4
 800d2e8:	f000 f860 	bl	800d3ac <_free_r>
 800d2ec:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800d2ee:	b111      	cbz	r1, 800d2f6 <_reclaim_reent+0x5e>
 800d2f0:	4620      	mov	r0, r4
 800d2f2:	f000 f85b 	bl	800d3ac <_free_r>
 800d2f6:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800d2f8:	b111      	cbz	r1, 800d300 <_reclaim_reent+0x68>
 800d2fa:	4620      	mov	r0, r4
 800d2fc:	f000 f856 	bl	800d3ac <_free_r>
 800d300:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800d302:	b111      	cbz	r1, 800d30a <_reclaim_reent+0x72>
 800d304:	4620      	mov	r0, r4
 800d306:	f000 f851 	bl	800d3ac <_free_r>
 800d30a:	6a23      	ldr	r3, [r4, #32]
 800d30c:	b1b3      	cbz	r3, 800d33c <_reclaim_reent+0xa4>
 800d30e:	4620      	mov	r0, r4
 800d310:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800d314:	4718      	bx	r3
 800d316:	5949      	ldr	r1, [r1, r5]
 800d318:	b941      	cbnz	r1, 800d32c <_reclaim_reent+0x94>
 800d31a:	3504      	adds	r5, #4
 800d31c:	69e3      	ldr	r3, [r4, #28]
 800d31e:	2d80      	cmp	r5, #128	; 0x80
 800d320:	68d9      	ldr	r1, [r3, #12]
 800d322:	d1f8      	bne.n	800d316 <_reclaim_reent+0x7e>
 800d324:	4620      	mov	r0, r4
 800d326:	f000 f841 	bl	800d3ac <_free_r>
 800d32a:	e7c0      	b.n	800d2ae <_reclaim_reent+0x16>
 800d32c:	680e      	ldr	r6, [r1, #0]
 800d32e:	4620      	mov	r0, r4
 800d330:	f000 f83c 	bl	800d3ac <_free_r>
 800d334:	4631      	mov	r1, r6
 800d336:	e7ef      	b.n	800d318 <_reclaim_reent+0x80>
 800d338:	2500      	movs	r5, #0
 800d33a:	e7ef      	b.n	800d31c <_reclaim_reent+0x84>
 800d33c:	bd70      	pop	{r4, r5, r6, pc}
 800d33e:	bf00      	nop
 800d340:	20000090 	.word	0x20000090

0800d344 <__libc_init_array>:
 800d344:	b570      	push	{r4, r5, r6, lr}
 800d346:	4d0d      	ldr	r5, [pc, #52]	; (800d37c <__libc_init_array+0x38>)
 800d348:	4c0d      	ldr	r4, [pc, #52]	; (800d380 <__libc_init_array+0x3c>)
 800d34a:	1b64      	subs	r4, r4, r5
 800d34c:	10a4      	asrs	r4, r4, #2
 800d34e:	2600      	movs	r6, #0
 800d350:	42a6      	cmp	r6, r4
 800d352:	d109      	bne.n	800d368 <__libc_init_array+0x24>
 800d354:	4d0b      	ldr	r5, [pc, #44]	; (800d384 <__libc_init_array+0x40>)
 800d356:	4c0c      	ldr	r4, [pc, #48]	; (800d388 <__libc_init_array+0x44>)
 800d358:	f000 f880 	bl	800d45c <_init>
 800d35c:	1b64      	subs	r4, r4, r5
 800d35e:	10a4      	asrs	r4, r4, #2
 800d360:	2600      	movs	r6, #0
 800d362:	42a6      	cmp	r6, r4
 800d364:	d105      	bne.n	800d372 <__libc_init_array+0x2e>
 800d366:	bd70      	pop	{r4, r5, r6, pc}
 800d368:	f855 3b04 	ldr.w	r3, [r5], #4
 800d36c:	4798      	blx	r3
 800d36e:	3601      	adds	r6, #1
 800d370:	e7ee      	b.n	800d350 <__libc_init_array+0xc>
 800d372:	f855 3b04 	ldr.w	r3, [r5], #4
 800d376:	4798      	blx	r3
 800d378:	3601      	adds	r6, #1
 800d37a:	e7f2      	b.n	800d362 <__libc_init_array+0x1e>
 800d37c:	0800d6fc 	.word	0x0800d6fc
 800d380:	0800d6fc 	.word	0x0800d6fc
 800d384:	0800d6fc 	.word	0x0800d6fc
 800d388:	0800d700 	.word	0x0800d700

0800d38c <__retarget_lock_acquire_recursive>:
 800d38c:	4770      	bx	lr

0800d38e <__retarget_lock_release_recursive>:
 800d38e:	4770      	bx	lr

0800d390 <memcpy>:
 800d390:	440a      	add	r2, r1
 800d392:	4291      	cmp	r1, r2
 800d394:	f100 33ff 	add.w	r3, r0, #4294967295
 800d398:	d100      	bne.n	800d39c <memcpy+0xc>
 800d39a:	4770      	bx	lr
 800d39c:	b510      	push	{r4, lr}
 800d39e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d3a2:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d3a6:	4291      	cmp	r1, r2
 800d3a8:	d1f9      	bne.n	800d39e <memcpy+0xe>
 800d3aa:	bd10      	pop	{r4, pc}

0800d3ac <_free_r>:
 800d3ac:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800d3ae:	2900      	cmp	r1, #0
 800d3b0:	d044      	beq.n	800d43c <_free_r+0x90>
 800d3b2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d3b6:	9001      	str	r0, [sp, #4]
 800d3b8:	2b00      	cmp	r3, #0
 800d3ba:	f1a1 0404 	sub.w	r4, r1, #4
 800d3be:	bfb8      	it	lt
 800d3c0:	18e4      	addlt	r4, r4, r3
 800d3c2:	f000 f83f 	bl	800d444 <__malloc_lock>
 800d3c6:	4a1e      	ldr	r2, [pc, #120]	; (800d440 <_free_r+0x94>)
 800d3c8:	9801      	ldr	r0, [sp, #4]
 800d3ca:	6813      	ldr	r3, [r2, #0]
 800d3cc:	b933      	cbnz	r3, 800d3dc <_free_r+0x30>
 800d3ce:	6063      	str	r3, [r4, #4]
 800d3d0:	6014      	str	r4, [r2, #0]
 800d3d2:	b003      	add	sp, #12
 800d3d4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800d3d8:	f000 b83a 	b.w	800d450 <__malloc_unlock>
 800d3dc:	42a3      	cmp	r3, r4
 800d3de:	d908      	bls.n	800d3f2 <_free_r+0x46>
 800d3e0:	6825      	ldr	r5, [r4, #0]
 800d3e2:	1961      	adds	r1, r4, r5
 800d3e4:	428b      	cmp	r3, r1
 800d3e6:	bf01      	itttt	eq
 800d3e8:	6819      	ldreq	r1, [r3, #0]
 800d3ea:	685b      	ldreq	r3, [r3, #4]
 800d3ec:	1949      	addeq	r1, r1, r5
 800d3ee:	6021      	streq	r1, [r4, #0]
 800d3f0:	e7ed      	b.n	800d3ce <_free_r+0x22>
 800d3f2:	461a      	mov	r2, r3
 800d3f4:	685b      	ldr	r3, [r3, #4]
 800d3f6:	b10b      	cbz	r3, 800d3fc <_free_r+0x50>
 800d3f8:	42a3      	cmp	r3, r4
 800d3fa:	d9fa      	bls.n	800d3f2 <_free_r+0x46>
 800d3fc:	6811      	ldr	r1, [r2, #0]
 800d3fe:	1855      	adds	r5, r2, r1
 800d400:	42a5      	cmp	r5, r4
 800d402:	d10b      	bne.n	800d41c <_free_r+0x70>
 800d404:	6824      	ldr	r4, [r4, #0]
 800d406:	4421      	add	r1, r4
 800d408:	1854      	adds	r4, r2, r1
 800d40a:	42a3      	cmp	r3, r4
 800d40c:	6011      	str	r1, [r2, #0]
 800d40e:	d1e0      	bne.n	800d3d2 <_free_r+0x26>
 800d410:	681c      	ldr	r4, [r3, #0]
 800d412:	685b      	ldr	r3, [r3, #4]
 800d414:	6053      	str	r3, [r2, #4]
 800d416:	440c      	add	r4, r1
 800d418:	6014      	str	r4, [r2, #0]
 800d41a:	e7da      	b.n	800d3d2 <_free_r+0x26>
 800d41c:	d902      	bls.n	800d424 <_free_r+0x78>
 800d41e:	230c      	movs	r3, #12
 800d420:	6003      	str	r3, [r0, #0]
 800d422:	e7d6      	b.n	800d3d2 <_free_r+0x26>
 800d424:	6825      	ldr	r5, [r4, #0]
 800d426:	1961      	adds	r1, r4, r5
 800d428:	428b      	cmp	r3, r1
 800d42a:	bf04      	itt	eq
 800d42c:	6819      	ldreq	r1, [r3, #0]
 800d42e:	685b      	ldreq	r3, [r3, #4]
 800d430:	6063      	str	r3, [r4, #4]
 800d432:	bf04      	itt	eq
 800d434:	1949      	addeq	r1, r1, r5
 800d436:	6021      	streq	r1, [r4, #0]
 800d438:	6054      	str	r4, [r2, #4]
 800d43a:	e7ca      	b.n	800d3d2 <_free_r+0x26>
 800d43c:	b003      	add	sp, #12
 800d43e:	bd30      	pop	{r4, r5, pc}
 800d440:	20002f7c 	.word	0x20002f7c

0800d444 <__malloc_lock>:
 800d444:	4801      	ldr	r0, [pc, #4]	; (800d44c <__malloc_lock+0x8>)
 800d446:	f7ff bfa1 	b.w	800d38c <__retarget_lock_acquire_recursive>
 800d44a:	bf00      	nop
 800d44c:	20002f78 	.word	0x20002f78

0800d450 <__malloc_unlock>:
 800d450:	4801      	ldr	r0, [pc, #4]	; (800d458 <__malloc_unlock+0x8>)
 800d452:	f7ff bf9c 	b.w	800d38e <__retarget_lock_release_recursive>
 800d456:	bf00      	nop
 800d458:	20002f78 	.word	0x20002f78

0800d45c <_init>:
 800d45c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d45e:	bf00      	nop
 800d460:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d462:	bc08      	pop	{r3}
 800d464:	469e      	mov	lr, r3
 800d466:	4770      	bx	lr

0800d468 <_fini>:
 800d468:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d46a:	bf00      	nop
 800d46c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d46e:	bc08      	pop	{r3}
 800d470:	469e      	mov	lr, r3
 800d472:	4770      	bx	lr
