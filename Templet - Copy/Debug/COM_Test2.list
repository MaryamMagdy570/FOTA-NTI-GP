
COM_Test2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002b7c  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08002d10  08002d10  00012d10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002d48  08002d48  000200cc  2**0
                  CONTENTS
  4 .ARM          00000000  08002d48  08002d48  000200cc  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002d48  08002d48  000200cc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002d48  08002d48  00012d48  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002d4c  08002d4c  00012d4c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000cc  20000000  08002d50  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000200cc  2**0
                  CONTENTS
 10 .bss          0000006c  200000cc  200000cc  000200cc  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000138  20000138  000200cc  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000200cc  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000a558  00000000  00000000  000200fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000179d  00000000  00000000  0002a654  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000728  00000000  00000000  0002bdf8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000690  00000000  00000000  0002c520  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00020240  00000000  00000000  0002cbb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000a212  00000000  00000000  0004cdf0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c01a7  00000000  00000000  00057002  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  001171a9  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00001b98  00000000  00000000  001171fc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	200000cc 	.word	0x200000cc
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08002cf8 	.word	0x08002cf8

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	200000d0 	.word	0x200000d0
 80001d0:	08002cf8 	.word	0x08002cf8

080001d4 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80001d4:	b580      	push	{r7, lr}
 80001d6:	b082      	sub	sp, #8
 80001d8:	af00      	add	r7, sp, #0
 80001da:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80001dc:	4b12      	ldr	r3, [pc, #72]	; (8000228 <HAL_InitTick+0x54>)
 80001de:	681a      	ldr	r2, [r3, #0]
 80001e0:	4b12      	ldr	r3, [pc, #72]	; (800022c <HAL_InitTick+0x58>)
 80001e2:	781b      	ldrb	r3, [r3, #0]
 80001e4:	4619      	mov	r1, r3
 80001e6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80001ea:	fbb3 f3f1 	udiv	r3, r3, r1
 80001ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80001f2:	4618      	mov	r0, r3
 80001f4:	f000 f8e8 	bl	80003c8 <HAL_SYSTICK_Config>
 80001f8:	4603      	mov	r3, r0
 80001fa:	2b00      	cmp	r3, #0
 80001fc:	d001      	beq.n	8000202 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80001fe:	2301      	movs	r3, #1
 8000200:	e00e      	b.n	8000220 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000202:	687b      	ldr	r3, [r7, #4]
 8000204:	2b0f      	cmp	r3, #15
 8000206:	d80a      	bhi.n	800021e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000208:	2200      	movs	r2, #0
 800020a:	6879      	ldr	r1, [r7, #4]
 800020c:	f04f 30ff 	mov.w	r0, #4294967295
 8000210:	f000 f8be 	bl	8000390 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000214:	4a06      	ldr	r2, [pc, #24]	; (8000230 <HAL_InitTick+0x5c>)
 8000216:	687b      	ldr	r3, [r7, #4]
 8000218:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 800021a:	2300      	movs	r3, #0
 800021c:	e000      	b.n	8000220 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800021e:	2301      	movs	r3, #1
}
 8000220:	4618      	mov	r0, r3
 8000222:	3708      	adds	r7, #8
 8000224:	46bd      	mov	sp, r7
 8000226:	bd80      	pop	{r7, pc}
 8000228:	20000008 	.word	0x20000008
 800022c:	20000004 	.word	0x20000004
 8000230:	20000000 	.word	0x20000000

08000234 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000234:	b480      	push	{r7}
 8000236:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000238:	4b06      	ldr	r3, [pc, #24]	; (8000254 <HAL_IncTick+0x20>)
 800023a:	781b      	ldrb	r3, [r3, #0]
 800023c:	461a      	mov	r2, r3
 800023e:	4b06      	ldr	r3, [pc, #24]	; (8000258 <HAL_IncTick+0x24>)
 8000240:	681b      	ldr	r3, [r3, #0]
 8000242:	4413      	add	r3, r2
 8000244:	4a04      	ldr	r2, [pc, #16]	; (8000258 <HAL_IncTick+0x24>)
 8000246:	6013      	str	r3, [r2, #0]
}
 8000248:	bf00      	nop
 800024a:	46bd      	mov	sp, r7
 800024c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000250:	4770      	bx	lr
 8000252:	bf00      	nop
 8000254:	20000004 	.word	0x20000004
 8000258:	200000e8 	.word	0x200000e8

0800025c <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800025c:	b480      	push	{r7}
 800025e:	af00      	add	r7, sp, #0
  return uwTick;  
 8000260:	4b03      	ldr	r3, [pc, #12]	; (8000270 <HAL_GetTick+0x14>)
 8000262:	681b      	ldr	r3, [r3, #0]
}
 8000264:	4618      	mov	r0, r3
 8000266:	46bd      	mov	sp, r7
 8000268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop
 8000270:	200000e8 	.word	0x200000e8

08000274 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000274:	b480      	push	{r7}
 8000276:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000278:	4b04      	ldr	r3, [pc, #16]	; (800028c <__NVIC_GetPriorityGrouping+0x18>)
 800027a:	68db      	ldr	r3, [r3, #12]
 800027c:	0a1b      	lsrs	r3, r3, #8
 800027e:	f003 0307 	and.w	r3, r3, #7
}
 8000282:	4618      	mov	r0, r3
 8000284:	46bd      	mov	sp, r7
 8000286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800028a:	4770      	bx	lr
 800028c:	e000ed00 	.word	0xe000ed00

08000290 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000290:	b480      	push	{r7}
 8000292:	b083      	sub	sp, #12
 8000294:	af00      	add	r7, sp, #0
 8000296:	4603      	mov	r3, r0
 8000298:	6039      	str	r1, [r7, #0]
 800029a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800029c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80002a0:	2b00      	cmp	r3, #0
 80002a2:	db0a      	blt.n	80002ba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002a4:	683b      	ldr	r3, [r7, #0]
 80002a6:	b2da      	uxtb	r2, r3
 80002a8:	490c      	ldr	r1, [pc, #48]	; (80002dc <__NVIC_SetPriority+0x4c>)
 80002aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80002ae:	0112      	lsls	r2, r2, #4
 80002b0:	b2d2      	uxtb	r2, r2
 80002b2:	440b      	add	r3, r1
 80002b4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80002b8:	e00a      	b.n	80002d0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002ba:	683b      	ldr	r3, [r7, #0]
 80002bc:	b2da      	uxtb	r2, r3
 80002be:	4908      	ldr	r1, [pc, #32]	; (80002e0 <__NVIC_SetPriority+0x50>)
 80002c0:	79fb      	ldrb	r3, [r7, #7]
 80002c2:	f003 030f 	and.w	r3, r3, #15
 80002c6:	3b04      	subs	r3, #4
 80002c8:	0112      	lsls	r2, r2, #4
 80002ca:	b2d2      	uxtb	r2, r2
 80002cc:	440b      	add	r3, r1
 80002ce:	761a      	strb	r2, [r3, #24]
}
 80002d0:	bf00      	nop
 80002d2:	370c      	adds	r7, #12
 80002d4:	46bd      	mov	sp, r7
 80002d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002da:	4770      	bx	lr
 80002dc:	e000e100 	.word	0xe000e100
 80002e0:	e000ed00 	.word	0xe000ed00

080002e4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80002e4:	b480      	push	{r7}
 80002e6:	b089      	sub	sp, #36	; 0x24
 80002e8:	af00      	add	r7, sp, #0
 80002ea:	60f8      	str	r0, [r7, #12]
 80002ec:	60b9      	str	r1, [r7, #8]
 80002ee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80002f0:	68fb      	ldr	r3, [r7, #12]
 80002f2:	f003 0307 	and.w	r3, r3, #7
 80002f6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80002f8:	69fb      	ldr	r3, [r7, #28]
 80002fa:	f1c3 0307 	rsb	r3, r3, #7
 80002fe:	2b04      	cmp	r3, #4
 8000300:	bf28      	it	cs
 8000302:	2304      	movcs	r3, #4
 8000304:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000306:	69fb      	ldr	r3, [r7, #28]
 8000308:	3304      	adds	r3, #4
 800030a:	2b06      	cmp	r3, #6
 800030c:	d902      	bls.n	8000314 <NVIC_EncodePriority+0x30>
 800030e:	69fb      	ldr	r3, [r7, #28]
 8000310:	3b03      	subs	r3, #3
 8000312:	e000      	b.n	8000316 <NVIC_EncodePriority+0x32>
 8000314:	2300      	movs	r3, #0
 8000316:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000318:	f04f 32ff 	mov.w	r2, #4294967295
 800031c:	69bb      	ldr	r3, [r7, #24]
 800031e:	fa02 f303 	lsl.w	r3, r2, r3
 8000322:	43da      	mvns	r2, r3
 8000324:	68bb      	ldr	r3, [r7, #8]
 8000326:	401a      	ands	r2, r3
 8000328:	697b      	ldr	r3, [r7, #20]
 800032a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800032c:	f04f 31ff 	mov.w	r1, #4294967295
 8000330:	697b      	ldr	r3, [r7, #20]
 8000332:	fa01 f303 	lsl.w	r3, r1, r3
 8000336:	43d9      	mvns	r1, r3
 8000338:	687b      	ldr	r3, [r7, #4]
 800033a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800033c:	4313      	orrs	r3, r2
         );
}
 800033e:	4618      	mov	r0, r3
 8000340:	3724      	adds	r7, #36	; 0x24
 8000342:	46bd      	mov	sp, r7
 8000344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000348:	4770      	bx	lr
	...

0800034c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800034c:	b580      	push	{r7, lr}
 800034e:	b082      	sub	sp, #8
 8000350:	af00      	add	r7, sp, #0
 8000352:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000354:	687b      	ldr	r3, [r7, #4]
 8000356:	3b01      	subs	r3, #1
 8000358:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800035c:	d301      	bcc.n	8000362 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800035e:	2301      	movs	r3, #1
 8000360:	e00f      	b.n	8000382 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000362:	4a0a      	ldr	r2, [pc, #40]	; (800038c <SysTick_Config+0x40>)
 8000364:	687b      	ldr	r3, [r7, #4]
 8000366:	3b01      	subs	r3, #1
 8000368:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800036a:	210f      	movs	r1, #15
 800036c:	f04f 30ff 	mov.w	r0, #4294967295
 8000370:	f7ff ff8e 	bl	8000290 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000374:	4b05      	ldr	r3, [pc, #20]	; (800038c <SysTick_Config+0x40>)
 8000376:	2200      	movs	r2, #0
 8000378:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800037a:	4b04      	ldr	r3, [pc, #16]	; (800038c <SysTick_Config+0x40>)
 800037c:	2207      	movs	r2, #7
 800037e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000380:	2300      	movs	r3, #0
}
 8000382:	4618      	mov	r0, r3
 8000384:	3708      	adds	r7, #8
 8000386:	46bd      	mov	sp, r7
 8000388:	bd80      	pop	{r7, pc}
 800038a:	bf00      	nop
 800038c:	e000e010 	.word	0xe000e010

08000390 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000390:	b580      	push	{r7, lr}
 8000392:	b086      	sub	sp, #24
 8000394:	af00      	add	r7, sp, #0
 8000396:	4603      	mov	r3, r0
 8000398:	60b9      	str	r1, [r7, #8]
 800039a:	607a      	str	r2, [r7, #4]
 800039c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800039e:	2300      	movs	r3, #0
 80003a0:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80003a2:	f7ff ff67 	bl	8000274 <__NVIC_GetPriorityGrouping>
 80003a6:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80003a8:	687a      	ldr	r2, [r7, #4]
 80003aa:	68b9      	ldr	r1, [r7, #8]
 80003ac:	6978      	ldr	r0, [r7, #20]
 80003ae:	f7ff ff99 	bl	80002e4 <NVIC_EncodePriority>
 80003b2:	4602      	mov	r2, r0
 80003b4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80003b8:	4611      	mov	r1, r2
 80003ba:	4618      	mov	r0, r3
 80003bc:	f7ff ff68 	bl	8000290 <__NVIC_SetPriority>
}
 80003c0:	bf00      	nop
 80003c2:	3718      	adds	r7, #24
 80003c4:	46bd      	mov	sp, r7
 80003c6:	bd80      	pop	{r7, pc}

080003c8 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80003c8:	b580      	push	{r7, lr}
 80003ca:	b082      	sub	sp, #8
 80003cc:	af00      	add	r7, sp, #0
 80003ce:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80003d0:	6878      	ldr	r0, [r7, #4]
 80003d2:	f7ff ffbb 	bl	800034c <SysTick_Config>
 80003d6:	4603      	mov	r3, r0
}
 80003d8:	4618      	mov	r0, r3
 80003da:	3708      	adds	r7, #8
 80003dc:	46bd      	mov	sp, r7
 80003de:	bd80      	pop	{r7, pc}

080003e0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80003e0:	b480      	push	{r7}
 80003e2:	b087      	sub	sp, #28
 80003e4:	af00      	add	r7, sp, #0
 80003e6:	6078      	str	r0, [r7, #4]
 80003e8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80003ea:	2300      	movs	r3, #0
 80003ec:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80003ee:	e160      	b.n	80006b2 <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80003f0:	683b      	ldr	r3, [r7, #0]
 80003f2:	681a      	ldr	r2, [r3, #0]
 80003f4:	2101      	movs	r1, #1
 80003f6:	697b      	ldr	r3, [r7, #20]
 80003f8:	fa01 f303 	lsl.w	r3, r1, r3
 80003fc:	4013      	ands	r3, r2
 80003fe:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000400:	68fb      	ldr	r3, [r7, #12]
 8000402:	2b00      	cmp	r3, #0
 8000404:	f000 8152 	beq.w	80006ac <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000408:	683b      	ldr	r3, [r7, #0]
 800040a:	685b      	ldr	r3, [r3, #4]
 800040c:	f003 0303 	and.w	r3, r3, #3
 8000410:	2b01      	cmp	r3, #1
 8000412:	d005      	beq.n	8000420 <HAL_GPIO_Init+0x40>
 8000414:	683b      	ldr	r3, [r7, #0]
 8000416:	685b      	ldr	r3, [r3, #4]
 8000418:	f003 0303 	and.w	r3, r3, #3
 800041c:	2b02      	cmp	r3, #2
 800041e:	d130      	bne.n	8000482 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000420:	687b      	ldr	r3, [r7, #4]
 8000422:	689b      	ldr	r3, [r3, #8]
 8000424:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000426:	697b      	ldr	r3, [r7, #20]
 8000428:	005b      	lsls	r3, r3, #1
 800042a:	2203      	movs	r2, #3
 800042c:	fa02 f303 	lsl.w	r3, r2, r3
 8000430:	43db      	mvns	r3, r3
 8000432:	693a      	ldr	r2, [r7, #16]
 8000434:	4013      	ands	r3, r2
 8000436:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000438:	683b      	ldr	r3, [r7, #0]
 800043a:	68da      	ldr	r2, [r3, #12]
 800043c:	697b      	ldr	r3, [r7, #20]
 800043e:	005b      	lsls	r3, r3, #1
 8000440:	fa02 f303 	lsl.w	r3, r2, r3
 8000444:	693a      	ldr	r2, [r7, #16]
 8000446:	4313      	orrs	r3, r2
 8000448:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800044a:	687b      	ldr	r3, [r7, #4]
 800044c:	693a      	ldr	r2, [r7, #16]
 800044e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000450:	687b      	ldr	r3, [r7, #4]
 8000452:	685b      	ldr	r3, [r3, #4]
 8000454:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000456:	2201      	movs	r2, #1
 8000458:	697b      	ldr	r3, [r7, #20]
 800045a:	fa02 f303 	lsl.w	r3, r2, r3
 800045e:	43db      	mvns	r3, r3
 8000460:	693a      	ldr	r2, [r7, #16]
 8000462:	4013      	ands	r3, r2
 8000464:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000466:	683b      	ldr	r3, [r7, #0]
 8000468:	685b      	ldr	r3, [r3, #4]
 800046a:	091b      	lsrs	r3, r3, #4
 800046c:	f003 0201 	and.w	r2, r3, #1
 8000470:	697b      	ldr	r3, [r7, #20]
 8000472:	fa02 f303 	lsl.w	r3, r2, r3
 8000476:	693a      	ldr	r2, [r7, #16]
 8000478:	4313      	orrs	r3, r2
 800047a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800047c:	687b      	ldr	r3, [r7, #4]
 800047e:	693a      	ldr	r2, [r7, #16]
 8000480:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000482:	683b      	ldr	r3, [r7, #0]
 8000484:	685b      	ldr	r3, [r3, #4]
 8000486:	f003 0303 	and.w	r3, r3, #3
 800048a:	2b03      	cmp	r3, #3
 800048c:	d017      	beq.n	80004be <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800048e:	687b      	ldr	r3, [r7, #4]
 8000490:	68db      	ldr	r3, [r3, #12]
 8000492:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000494:	697b      	ldr	r3, [r7, #20]
 8000496:	005b      	lsls	r3, r3, #1
 8000498:	2203      	movs	r2, #3
 800049a:	fa02 f303 	lsl.w	r3, r2, r3
 800049e:	43db      	mvns	r3, r3
 80004a0:	693a      	ldr	r2, [r7, #16]
 80004a2:	4013      	ands	r3, r2
 80004a4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80004a6:	683b      	ldr	r3, [r7, #0]
 80004a8:	689a      	ldr	r2, [r3, #8]
 80004aa:	697b      	ldr	r3, [r7, #20]
 80004ac:	005b      	lsls	r3, r3, #1
 80004ae:	fa02 f303 	lsl.w	r3, r2, r3
 80004b2:	693a      	ldr	r2, [r7, #16]
 80004b4:	4313      	orrs	r3, r2
 80004b6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80004b8:	687b      	ldr	r3, [r7, #4]
 80004ba:	693a      	ldr	r2, [r7, #16]
 80004bc:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80004be:	683b      	ldr	r3, [r7, #0]
 80004c0:	685b      	ldr	r3, [r3, #4]
 80004c2:	f003 0303 	and.w	r3, r3, #3
 80004c6:	2b02      	cmp	r3, #2
 80004c8:	d123      	bne.n	8000512 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80004ca:	697b      	ldr	r3, [r7, #20]
 80004cc:	08da      	lsrs	r2, r3, #3
 80004ce:	687b      	ldr	r3, [r7, #4]
 80004d0:	3208      	adds	r2, #8
 80004d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80004d6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80004d8:	697b      	ldr	r3, [r7, #20]
 80004da:	f003 0307 	and.w	r3, r3, #7
 80004de:	009b      	lsls	r3, r3, #2
 80004e0:	220f      	movs	r2, #15
 80004e2:	fa02 f303 	lsl.w	r3, r2, r3
 80004e6:	43db      	mvns	r3, r3
 80004e8:	693a      	ldr	r2, [r7, #16]
 80004ea:	4013      	ands	r3, r2
 80004ec:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80004ee:	683b      	ldr	r3, [r7, #0]
 80004f0:	691a      	ldr	r2, [r3, #16]
 80004f2:	697b      	ldr	r3, [r7, #20]
 80004f4:	f003 0307 	and.w	r3, r3, #7
 80004f8:	009b      	lsls	r3, r3, #2
 80004fa:	fa02 f303 	lsl.w	r3, r2, r3
 80004fe:	693a      	ldr	r2, [r7, #16]
 8000500:	4313      	orrs	r3, r2
 8000502:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000504:	697b      	ldr	r3, [r7, #20]
 8000506:	08da      	lsrs	r2, r3, #3
 8000508:	687b      	ldr	r3, [r7, #4]
 800050a:	3208      	adds	r2, #8
 800050c:	6939      	ldr	r1, [r7, #16]
 800050e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000512:	687b      	ldr	r3, [r7, #4]
 8000514:	681b      	ldr	r3, [r3, #0]
 8000516:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000518:	697b      	ldr	r3, [r7, #20]
 800051a:	005b      	lsls	r3, r3, #1
 800051c:	2203      	movs	r2, #3
 800051e:	fa02 f303 	lsl.w	r3, r2, r3
 8000522:	43db      	mvns	r3, r3
 8000524:	693a      	ldr	r2, [r7, #16]
 8000526:	4013      	ands	r3, r2
 8000528:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800052a:	683b      	ldr	r3, [r7, #0]
 800052c:	685b      	ldr	r3, [r3, #4]
 800052e:	f003 0203 	and.w	r2, r3, #3
 8000532:	697b      	ldr	r3, [r7, #20]
 8000534:	005b      	lsls	r3, r3, #1
 8000536:	fa02 f303 	lsl.w	r3, r2, r3
 800053a:	693a      	ldr	r2, [r7, #16]
 800053c:	4313      	orrs	r3, r2
 800053e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000540:	687b      	ldr	r3, [r7, #4]
 8000542:	693a      	ldr	r2, [r7, #16]
 8000544:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000546:	683b      	ldr	r3, [r7, #0]
 8000548:	685b      	ldr	r3, [r3, #4]
 800054a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800054e:	2b00      	cmp	r3, #0
 8000550:	f000 80ac 	beq.w	80006ac <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000554:	4b5e      	ldr	r3, [pc, #376]	; (80006d0 <HAL_GPIO_Init+0x2f0>)
 8000556:	699b      	ldr	r3, [r3, #24]
 8000558:	4a5d      	ldr	r2, [pc, #372]	; (80006d0 <HAL_GPIO_Init+0x2f0>)
 800055a:	f043 0301 	orr.w	r3, r3, #1
 800055e:	6193      	str	r3, [r2, #24]
 8000560:	4b5b      	ldr	r3, [pc, #364]	; (80006d0 <HAL_GPIO_Init+0x2f0>)
 8000562:	699b      	ldr	r3, [r3, #24]
 8000564:	f003 0301 	and.w	r3, r3, #1
 8000568:	60bb      	str	r3, [r7, #8]
 800056a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800056c:	4a59      	ldr	r2, [pc, #356]	; (80006d4 <HAL_GPIO_Init+0x2f4>)
 800056e:	697b      	ldr	r3, [r7, #20]
 8000570:	089b      	lsrs	r3, r3, #2
 8000572:	3302      	adds	r3, #2
 8000574:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000578:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800057a:	697b      	ldr	r3, [r7, #20]
 800057c:	f003 0303 	and.w	r3, r3, #3
 8000580:	009b      	lsls	r3, r3, #2
 8000582:	220f      	movs	r2, #15
 8000584:	fa02 f303 	lsl.w	r3, r2, r3
 8000588:	43db      	mvns	r3, r3
 800058a:	693a      	ldr	r2, [r7, #16]
 800058c:	4013      	ands	r3, r2
 800058e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000590:	687b      	ldr	r3, [r7, #4]
 8000592:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000596:	d025      	beq.n	80005e4 <HAL_GPIO_Init+0x204>
 8000598:	687b      	ldr	r3, [r7, #4]
 800059a:	4a4f      	ldr	r2, [pc, #316]	; (80006d8 <HAL_GPIO_Init+0x2f8>)
 800059c:	4293      	cmp	r3, r2
 800059e:	d01f      	beq.n	80005e0 <HAL_GPIO_Init+0x200>
 80005a0:	687b      	ldr	r3, [r7, #4]
 80005a2:	4a4e      	ldr	r2, [pc, #312]	; (80006dc <HAL_GPIO_Init+0x2fc>)
 80005a4:	4293      	cmp	r3, r2
 80005a6:	d019      	beq.n	80005dc <HAL_GPIO_Init+0x1fc>
 80005a8:	687b      	ldr	r3, [r7, #4]
 80005aa:	4a4d      	ldr	r2, [pc, #308]	; (80006e0 <HAL_GPIO_Init+0x300>)
 80005ac:	4293      	cmp	r3, r2
 80005ae:	d013      	beq.n	80005d8 <HAL_GPIO_Init+0x1f8>
 80005b0:	687b      	ldr	r3, [r7, #4]
 80005b2:	4a4c      	ldr	r2, [pc, #304]	; (80006e4 <HAL_GPIO_Init+0x304>)
 80005b4:	4293      	cmp	r3, r2
 80005b6:	d00d      	beq.n	80005d4 <HAL_GPIO_Init+0x1f4>
 80005b8:	687b      	ldr	r3, [r7, #4]
 80005ba:	4a4b      	ldr	r2, [pc, #300]	; (80006e8 <HAL_GPIO_Init+0x308>)
 80005bc:	4293      	cmp	r3, r2
 80005be:	d007      	beq.n	80005d0 <HAL_GPIO_Init+0x1f0>
 80005c0:	687b      	ldr	r3, [r7, #4]
 80005c2:	4a4a      	ldr	r2, [pc, #296]	; (80006ec <HAL_GPIO_Init+0x30c>)
 80005c4:	4293      	cmp	r3, r2
 80005c6:	d101      	bne.n	80005cc <HAL_GPIO_Init+0x1ec>
 80005c8:	2306      	movs	r3, #6
 80005ca:	e00c      	b.n	80005e6 <HAL_GPIO_Init+0x206>
 80005cc:	2307      	movs	r3, #7
 80005ce:	e00a      	b.n	80005e6 <HAL_GPIO_Init+0x206>
 80005d0:	2305      	movs	r3, #5
 80005d2:	e008      	b.n	80005e6 <HAL_GPIO_Init+0x206>
 80005d4:	2304      	movs	r3, #4
 80005d6:	e006      	b.n	80005e6 <HAL_GPIO_Init+0x206>
 80005d8:	2303      	movs	r3, #3
 80005da:	e004      	b.n	80005e6 <HAL_GPIO_Init+0x206>
 80005dc:	2302      	movs	r3, #2
 80005de:	e002      	b.n	80005e6 <HAL_GPIO_Init+0x206>
 80005e0:	2301      	movs	r3, #1
 80005e2:	e000      	b.n	80005e6 <HAL_GPIO_Init+0x206>
 80005e4:	2300      	movs	r3, #0
 80005e6:	697a      	ldr	r2, [r7, #20]
 80005e8:	f002 0203 	and.w	r2, r2, #3
 80005ec:	0092      	lsls	r2, r2, #2
 80005ee:	4093      	lsls	r3, r2
 80005f0:	693a      	ldr	r2, [r7, #16]
 80005f2:	4313      	orrs	r3, r2
 80005f4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80005f6:	4937      	ldr	r1, [pc, #220]	; (80006d4 <HAL_GPIO_Init+0x2f4>)
 80005f8:	697b      	ldr	r3, [r7, #20]
 80005fa:	089b      	lsrs	r3, r3, #2
 80005fc:	3302      	adds	r3, #2
 80005fe:	693a      	ldr	r2, [r7, #16]
 8000600:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000604:	4b3a      	ldr	r3, [pc, #232]	; (80006f0 <HAL_GPIO_Init+0x310>)
 8000606:	689b      	ldr	r3, [r3, #8]
 8000608:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800060a:	68fb      	ldr	r3, [r7, #12]
 800060c:	43db      	mvns	r3, r3
 800060e:	693a      	ldr	r2, [r7, #16]
 8000610:	4013      	ands	r3, r2
 8000612:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000614:	683b      	ldr	r3, [r7, #0]
 8000616:	685b      	ldr	r3, [r3, #4]
 8000618:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800061c:	2b00      	cmp	r3, #0
 800061e:	d003      	beq.n	8000628 <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 8000620:	693a      	ldr	r2, [r7, #16]
 8000622:	68fb      	ldr	r3, [r7, #12]
 8000624:	4313      	orrs	r3, r2
 8000626:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000628:	4a31      	ldr	r2, [pc, #196]	; (80006f0 <HAL_GPIO_Init+0x310>)
 800062a:	693b      	ldr	r3, [r7, #16]
 800062c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800062e:	4b30      	ldr	r3, [pc, #192]	; (80006f0 <HAL_GPIO_Init+0x310>)
 8000630:	68db      	ldr	r3, [r3, #12]
 8000632:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000634:	68fb      	ldr	r3, [r7, #12]
 8000636:	43db      	mvns	r3, r3
 8000638:	693a      	ldr	r2, [r7, #16]
 800063a:	4013      	ands	r3, r2
 800063c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800063e:	683b      	ldr	r3, [r7, #0]
 8000640:	685b      	ldr	r3, [r3, #4]
 8000642:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000646:	2b00      	cmp	r3, #0
 8000648:	d003      	beq.n	8000652 <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 800064a:	693a      	ldr	r2, [r7, #16]
 800064c:	68fb      	ldr	r3, [r7, #12]
 800064e:	4313      	orrs	r3, r2
 8000650:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000652:	4a27      	ldr	r2, [pc, #156]	; (80006f0 <HAL_GPIO_Init+0x310>)
 8000654:	693b      	ldr	r3, [r7, #16]
 8000656:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000658:	4b25      	ldr	r3, [pc, #148]	; (80006f0 <HAL_GPIO_Init+0x310>)
 800065a:	685b      	ldr	r3, [r3, #4]
 800065c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800065e:	68fb      	ldr	r3, [r7, #12]
 8000660:	43db      	mvns	r3, r3
 8000662:	693a      	ldr	r2, [r7, #16]
 8000664:	4013      	ands	r3, r2
 8000666:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000668:	683b      	ldr	r3, [r7, #0]
 800066a:	685b      	ldr	r3, [r3, #4]
 800066c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000670:	2b00      	cmp	r3, #0
 8000672:	d003      	beq.n	800067c <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8000674:	693a      	ldr	r2, [r7, #16]
 8000676:	68fb      	ldr	r3, [r7, #12]
 8000678:	4313      	orrs	r3, r2
 800067a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800067c:	4a1c      	ldr	r2, [pc, #112]	; (80006f0 <HAL_GPIO_Init+0x310>)
 800067e:	693b      	ldr	r3, [r7, #16]
 8000680:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000682:	4b1b      	ldr	r3, [pc, #108]	; (80006f0 <HAL_GPIO_Init+0x310>)
 8000684:	681b      	ldr	r3, [r3, #0]
 8000686:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000688:	68fb      	ldr	r3, [r7, #12]
 800068a:	43db      	mvns	r3, r3
 800068c:	693a      	ldr	r2, [r7, #16]
 800068e:	4013      	ands	r3, r2
 8000690:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000692:	683b      	ldr	r3, [r7, #0]
 8000694:	685b      	ldr	r3, [r3, #4]
 8000696:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800069a:	2b00      	cmp	r3, #0
 800069c:	d003      	beq.n	80006a6 <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 800069e:	693a      	ldr	r2, [r7, #16]
 80006a0:	68fb      	ldr	r3, [r7, #12]
 80006a2:	4313      	orrs	r3, r2
 80006a4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80006a6:	4a12      	ldr	r2, [pc, #72]	; (80006f0 <HAL_GPIO_Init+0x310>)
 80006a8:	693b      	ldr	r3, [r7, #16]
 80006aa:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80006ac:	697b      	ldr	r3, [r7, #20]
 80006ae:	3301      	adds	r3, #1
 80006b0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80006b2:	683b      	ldr	r3, [r7, #0]
 80006b4:	681a      	ldr	r2, [r3, #0]
 80006b6:	697b      	ldr	r3, [r7, #20]
 80006b8:	fa22 f303 	lsr.w	r3, r2, r3
 80006bc:	2b00      	cmp	r3, #0
 80006be:	f47f ae97 	bne.w	80003f0 <HAL_GPIO_Init+0x10>
  }
}
 80006c2:	bf00      	nop
 80006c4:	bf00      	nop
 80006c6:	371c      	adds	r7, #28
 80006c8:	46bd      	mov	sp, r7
 80006ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ce:	4770      	bx	lr
 80006d0:	40021000 	.word	0x40021000
 80006d4:	40010000 	.word	0x40010000
 80006d8:	48000400 	.word	0x48000400
 80006dc:	48000800 	.word	0x48000800
 80006e0:	48000c00 	.word	0x48000c00
 80006e4:	48001000 	.word	0x48001000
 80006e8:	48001400 	.word	0x48001400
 80006ec:	48001800 	.word	0x48001800
 80006f0:	40010400 	.word	0x40010400

080006f4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80006f4:	b580      	push	{r7, lr}
 80006f6:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 80006fa:	af00      	add	r7, sp, #0
 80006fc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8000700:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8000704:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000706:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800070a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800070e:	681b      	ldr	r3, [r3, #0]
 8000710:	2b00      	cmp	r3, #0
 8000712:	d102      	bne.n	800071a <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8000714:	2301      	movs	r3, #1
 8000716:	f001 b83a 	b.w	800178e <HAL_RCC_OscConfig+0x109a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800071a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800071e:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8000722:	681b      	ldr	r3, [r3, #0]
 8000724:	681b      	ldr	r3, [r3, #0]
 8000726:	f003 0301 	and.w	r3, r3, #1
 800072a:	2b00      	cmp	r3, #0
 800072c:	f000 816f 	beq.w	8000a0e <HAL_RCC_OscConfig+0x31a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000730:	4bb5      	ldr	r3, [pc, #724]	; (8000a08 <HAL_RCC_OscConfig+0x314>)
 8000732:	685b      	ldr	r3, [r3, #4]
 8000734:	f003 030c 	and.w	r3, r3, #12
 8000738:	2b04      	cmp	r3, #4
 800073a:	d00c      	beq.n	8000756 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800073c:	4bb2      	ldr	r3, [pc, #712]	; (8000a08 <HAL_RCC_OscConfig+0x314>)
 800073e:	685b      	ldr	r3, [r3, #4]
 8000740:	f003 030c 	and.w	r3, r3, #12
 8000744:	2b08      	cmp	r3, #8
 8000746:	d15c      	bne.n	8000802 <HAL_RCC_OscConfig+0x10e>
 8000748:	4baf      	ldr	r3, [pc, #700]	; (8000a08 <HAL_RCC_OscConfig+0x314>)
 800074a:	685b      	ldr	r3, [r3, #4]
 800074c:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8000750:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000754:	d155      	bne.n	8000802 <HAL_RCC_OscConfig+0x10e>
 8000756:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800075a:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800075e:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8000762:	fa93 f3a3 	rbit	r3, r3
 8000766:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800076a:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800076e:	fab3 f383 	clz	r3, r3
 8000772:	b2db      	uxtb	r3, r3
 8000774:	095b      	lsrs	r3, r3, #5
 8000776:	b2db      	uxtb	r3, r3
 8000778:	f043 0301 	orr.w	r3, r3, #1
 800077c:	b2db      	uxtb	r3, r3
 800077e:	2b01      	cmp	r3, #1
 8000780:	d102      	bne.n	8000788 <HAL_RCC_OscConfig+0x94>
 8000782:	4ba1      	ldr	r3, [pc, #644]	; (8000a08 <HAL_RCC_OscConfig+0x314>)
 8000784:	681b      	ldr	r3, [r3, #0]
 8000786:	e015      	b.n	80007b4 <HAL_RCC_OscConfig+0xc0>
 8000788:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800078c:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000790:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 8000794:	fa93 f3a3 	rbit	r3, r3
 8000798:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 800079c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80007a0:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 80007a4:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 80007a8:	fa93 f3a3 	rbit	r3, r3
 80007ac:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 80007b0:	4b95      	ldr	r3, [pc, #596]	; (8000a08 <HAL_RCC_OscConfig+0x314>)
 80007b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80007b4:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80007b8:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 80007bc:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 80007c0:	fa92 f2a2 	rbit	r2, r2
 80007c4:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
  return result;
 80007c8:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 80007cc:	fab2 f282 	clz	r2, r2
 80007d0:	b2d2      	uxtb	r2, r2
 80007d2:	f042 0220 	orr.w	r2, r2, #32
 80007d6:	b2d2      	uxtb	r2, r2
 80007d8:	f002 021f 	and.w	r2, r2, #31
 80007dc:	2101      	movs	r1, #1
 80007de:	fa01 f202 	lsl.w	r2, r1, r2
 80007e2:	4013      	ands	r3, r2
 80007e4:	2b00      	cmp	r3, #0
 80007e6:	f000 8111 	beq.w	8000a0c <HAL_RCC_OscConfig+0x318>
 80007ea:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80007ee:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80007f2:	681b      	ldr	r3, [r3, #0]
 80007f4:	685b      	ldr	r3, [r3, #4]
 80007f6:	2b00      	cmp	r3, #0
 80007f8:	f040 8108 	bne.w	8000a0c <HAL_RCC_OscConfig+0x318>
      {
        return HAL_ERROR;
 80007fc:	2301      	movs	r3, #1
 80007fe:	f000 bfc6 	b.w	800178e <HAL_RCC_OscConfig+0x109a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000802:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8000806:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800080a:	681b      	ldr	r3, [r3, #0]
 800080c:	685b      	ldr	r3, [r3, #4]
 800080e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000812:	d106      	bne.n	8000822 <HAL_RCC_OscConfig+0x12e>
 8000814:	4b7c      	ldr	r3, [pc, #496]	; (8000a08 <HAL_RCC_OscConfig+0x314>)
 8000816:	681b      	ldr	r3, [r3, #0]
 8000818:	4a7b      	ldr	r2, [pc, #492]	; (8000a08 <HAL_RCC_OscConfig+0x314>)
 800081a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800081e:	6013      	str	r3, [r2, #0]
 8000820:	e036      	b.n	8000890 <HAL_RCC_OscConfig+0x19c>
 8000822:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8000826:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800082a:	681b      	ldr	r3, [r3, #0]
 800082c:	685b      	ldr	r3, [r3, #4]
 800082e:	2b00      	cmp	r3, #0
 8000830:	d10c      	bne.n	800084c <HAL_RCC_OscConfig+0x158>
 8000832:	4b75      	ldr	r3, [pc, #468]	; (8000a08 <HAL_RCC_OscConfig+0x314>)
 8000834:	681b      	ldr	r3, [r3, #0]
 8000836:	4a74      	ldr	r2, [pc, #464]	; (8000a08 <HAL_RCC_OscConfig+0x314>)
 8000838:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800083c:	6013      	str	r3, [r2, #0]
 800083e:	4b72      	ldr	r3, [pc, #456]	; (8000a08 <HAL_RCC_OscConfig+0x314>)
 8000840:	681b      	ldr	r3, [r3, #0]
 8000842:	4a71      	ldr	r2, [pc, #452]	; (8000a08 <HAL_RCC_OscConfig+0x314>)
 8000844:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000848:	6013      	str	r3, [r2, #0]
 800084a:	e021      	b.n	8000890 <HAL_RCC_OscConfig+0x19c>
 800084c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8000850:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8000854:	681b      	ldr	r3, [r3, #0]
 8000856:	685b      	ldr	r3, [r3, #4]
 8000858:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800085c:	d10c      	bne.n	8000878 <HAL_RCC_OscConfig+0x184>
 800085e:	4b6a      	ldr	r3, [pc, #424]	; (8000a08 <HAL_RCC_OscConfig+0x314>)
 8000860:	681b      	ldr	r3, [r3, #0]
 8000862:	4a69      	ldr	r2, [pc, #420]	; (8000a08 <HAL_RCC_OscConfig+0x314>)
 8000864:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000868:	6013      	str	r3, [r2, #0]
 800086a:	4b67      	ldr	r3, [pc, #412]	; (8000a08 <HAL_RCC_OscConfig+0x314>)
 800086c:	681b      	ldr	r3, [r3, #0]
 800086e:	4a66      	ldr	r2, [pc, #408]	; (8000a08 <HAL_RCC_OscConfig+0x314>)
 8000870:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000874:	6013      	str	r3, [r2, #0]
 8000876:	e00b      	b.n	8000890 <HAL_RCC_OscConfig+0x19c>
 8000878:	4b63      	ldr	r3, [pc, #396]	; (8000a08 <HAL_RCC_OscConfig+0x314>)
 800087a:	681b      	ldr	r3, [r3, #0]
 800087c:	4a62      	ldr	r2, [pc, #392]	; (8000a08 <HAL_RCC_OscConfig+0x314>)
 800087e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000882:	6013      	str	r3, [r2, #0]
 8000884:	4b60      	ldr	r3, [pc, #384]	; (8000a08 <HAL_RCC_OscConfig+0x314>)
 8000886:	681b      	ldr	r3, [r3, #0]
 8000888:	4a5f      	ldr	r2, [pc, #380]	; (8000a08 <HAL_RCC_OscConfig+0x314>)
 800088a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800088e:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000890:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8000894:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8000898:	681b      	ldr	r3, [r3, #0]
 800089a:	685b      	ldr	r3, [r3, #4]
 800089c:	2b00      	cmp	r3, #0
 800089e:	d059      	beq.n	8000954 <HAL_RCC_OscConfig+0x260>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80008a0:	f7ff fcdc 	bl	800025c <HAL_GetTick>
 80008a4:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80008a8:	e00a      	b.n	80008c0 <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80008aa:	f7ff fcd7 	bl	800025c <HAL_GetTick>
 80008ae:	4602      	mov	r2, r0
 80008b0:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80008b4:	1ad3      	subs	r3, r2, r3
 80008b6:	2b64      	cmp	r3, #100	; 0x64
 80008b8:	d902      	bls.n	80008c0 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 80008ba:	2303      	movs	r3, #3
 80008bc:	f000 bf67 	b.w	800178e <HAL_RCC_OscConfig+0x109a>
 80008c0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80008c4:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80008c8:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 80008cc:	fa93 f3a3 	rbit	r3, r3
 80008d0:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
  return result;
 80008d4:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80008d8:	fab3 f383 	clz	r3, r3
 80008dc:	b2db      	uxtb	r3, r3
 80008de:	095b      	lsrs	r3, r3, #5
 80008e0:	b2db      	uxtb	r3, r3
 80008e2:	f043 0301 	orr.w	r3, r3, #1
 80008e6:	b2db      	uxtb	r3, r3
 80008e8:	2b01      	cmp	r3, #1
 80008ea:	d102      	bne.n	80008f2 <HAL_RCC_OscConfig+0x1fe>
 80008ec:	4b46      	ldr	r3, [pc, #280]	; (8000a08 <HAL_RCC_OscConfig+0x314>)
 80008ee:	681b      	ldr	r3, [r3, #0]
 80008f0:	e015      	b.n	800091e <HAL_RCC_OscConfig+0x22a>
 80008f2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80008f6:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80008fa:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 80008fe:	fa93 f3a3 	rbit	r3, r3
 8000902:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 8000906:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800090a:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 800090e:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 8000912:	fa93 f3a3 	rbit	r3, r3
 8000916:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 800091a:	4b3b      	ldr	r3, [pc, #236]	; (8000a08 <HAL_RCC_OscConfig+0x314>)
 800091c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800091e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000922:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
 8000926:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 800092a:	fa92 f2a2 	rbit	r2, r2
 800092e:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
  return result;
 8000932:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8000936:	fab2 f282 	clz	r2, r2
 800093a:	b2d2      	uxtb	r2, r2
 800093c:	f042 0220 	orr.w	r2, r2, #32
 8000940:	b2d2      	uxtb	r2, r2
 8000942:	f002 021f 	and.w	r2, r2, #31
 8000946:	2101      	movs	r1, #1
 8000948:	fa01 f202 	lsl.w	r2, r1, r2
 800094c:	4013      	ands	r3, r2
 800094e:	2b00      	cmp	r3, #0
 8000950:	d0ab      	beq.n	80008aa <HAL_RCC_OscConfig+0x1b6>
 8000952:	e05c      	b.n	8000a0e <HAL_RCC_OscConfig+0x31a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000954:	f7ff fc82 	bl	800025c <HAL_GetTick>
 8000958:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800095c:	e00a      	b.n	8000974 <HAL_RCC_OscConfig+0x280>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800095e:	f7ff fc7d 	bl	800025c <HAL_GetTick>
 8000962:	4602      	mov	r2, r0
 8000964:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8000968:	1ad3      	subs	r3, r2, r3
 800096a:	2b64      	cmp	r3, #100	; 0x64
 800096c:	d902      	bls.n	8000974 <HAL_RCC_OscConfig+0x280>
          {
            return HAL_TIMEOUT;
 800096e:	2303      	movs	r3, #3
 8000970:	f000 bf0d 	b.w	800178e <HAL_RCC_OscConfig+0x109a>
 8000974:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000978:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800097c:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 8000980:	fa93 f3a3 	rbit	r3, r3
 8000984:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
  return result;
 8000988:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800098c:	fab3 f383 	clz	r3, r3
 8000990:	b2db      	uxtb	r3, r3
 8000992:	095b      	lsrs	r3, r3, #5
 8000994:	b2db      	uxtb	r3, r3
 8000996:	f043 0301 	orr.w	r3, r3, #1
 800099a:	b2db      	uxtb	r3, r3
 800099c:	2b01      	cmp	r3, #1
 800099e:	d102      	bne.n	80009a6 <HAL_RCC_OscConfig+0x2b2>
 80009a0:	4b19      	ldr	r3, [pc, #100]	; (8000a08 <HAL_RCC_OscConfig+0x314>)
 80009a2:	681b      	ldr	r3, [r3, #0]
 80009a4:	e015      	b.n	80009d2 <HAL_RCC_OscConfig+0x2de>
 80009a6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80009aa:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80009ae:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 80009b2:	fa93 f3a3 	rbit	r3, r3
 80009b6:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 80009ba:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80009be:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 80009c2:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80009c6:	fa93 f3a3 	rbit	r3, r3
 80009ca:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 80009ce:	4b0e      	ldr	r3, [pc, #56]	; (8000a08 <HAL_RCC_OscConfig+0x314>)
 80009d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80009d2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80009d6:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 80009da:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 80009de:	fa92 f2a2 	rbit	r2, r2
 80009e2:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
  return result;
 80009e6:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 80009ea:	fab2 f282 	clz	r2, r2
 80009ee:	b2d2      	uxtb	r2, r2
 80009f0:	f042 0220 	orr.w	r2, r2, #32
 80009f4:	b2d2      	uxtb	r2, r2
 80009f6:	f002 021f 	and.w	r2, r2, #31
 80009fa:	2101      	movs	r1, #1
 80009fc:	fa01 f202 	lsl.w	r2, r1, r2
 8000a00:	4013      	ands	r3, r2
 8000a02:	2b00      	cmp	r3, #0
 8000a04:	d1ab      	bne.n	800095e <HAL_RCC_OscConfig+0x26a>
 8000a06:	e002      	b.n	8000a0e <HAL_RCC_OscConfig+0x31a>
 8000a08:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000a0c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000a0e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8000a12:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8000a16:	681b      	ldr	r3, [r3, #0]
 8000a18:	681b      	ldr	r3, [r3, #0]
 8000a1a:	f003 0302 	and.w	r3, r3, #2
 8000a1e:	2b00      	cmp	r3, #0
 8000a20:	f000 817f 	beq.w	8000d22 <HAL_RCC_OscConfig+0x62e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8000a24:	4ba7      	ldr	r3, [pc, #668]	; (8000cc4 <HAL_RCC_OscConfig+0x5d0>)
 8000a26:	685b      	ldr	r3, [r3, #4]
 8000a28:	f003 030c 	and.w	r3, r3, #12
 8000a2c:	2b00      	cmp	r3, #0
 8000a2e:	d00c      	beq.n	8000a4a <HAL_RCC_OscConfig+0x356>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8000a30:	4ba4      	ldr	r3, [pc, #656]	; (8000cc4 <HAL_RCC_OscConfig+0x5d0>)
 8000a32:	685b      	ldr	r3, [r3, #4]
 8000a34:	f003 030c 	and.w	r3, r3, #12
 8000a38:	2b08      	cmp	r3, #8
 8000a3a:	d173      	bne.n	8000b24 <HAL_RCC_OscConfig+0x430>
 8000a3c:	4ba1      	ldr	r3, [pc, #644]	; (8000cc4 <HAL_RCC_OscConfig+0x5d0>)
 8000a3e:	685b      	ldr	r3, [r3, #4]
 8000a40:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8000a44:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000a48:	d16c      	bne.n	8000b24 <HAL_RCC_OscConfig+0x430>
 8000a4a:	2302      	movs	r3, #2
 8000a4c:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000a50:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8000a54:	fa93 f3a3 	rbit	r3, r3
 8000a58:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
  return result;
 8000a5c:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000a60:	fab3 f383 	clz	r3, r3
 8000a64:	b2db      	uxtb	r3, r3
 8000a66:	095b      	lsrs	r3, r3, #5
 8000a68:	b2db      	uxtb	r3, r3
 8000a6a:	f043 0301 	orr.w	r3, r3, #1
 8000a6e:	b2db      	uxtb	r3, r3
 8000a70:	2b01      	cmp	r3, #1
 8000a72:	d102      	bne.n	8000a7a <HAL_RCC_OscConfig+0x386>
 8000a74:	4b93      	ldr	r3, [pc, #588]	; (8000cc4 <HAL_RCC_OscConfig+0x5d0>)
 8000a76:	681b      	ldr	r3, [r3, #0]
 8000a78:	e013      	b.n	8000aa2 <HAL_RCC_OscConfig+0x3ae>
 8000a7a:	2302      	movs	r3, #2
 8000a7c:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000a80:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8000a84:	fa93 f3a3 	rbit	r3, r3
 8000a88:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 8000a8c:	2302      	movs	r3, #2
 8000a8e:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8000a92:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8000a96:	fa93 f3a3 	rbit	r3, r3
 8000a9a:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8000a9e:	4b89      	ldr	r3, [pc, #548]	; (8000cc4 <HAL_RCC_OscConfig+0x5d0>)
 8000aa0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000aa2:	2202      	movs	r2, #2
 8000aa4:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 8000aa8:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 8000aac:	fa92 f2a2 	rbit	r2, r2
 8000ab0:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
  return result;
 8000ab4:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8000ab8:	fab2 f282 	clz	r2, r2
 8000abc:	b2d2      	uxtb	r2, r2
 8000abe:	f042 0220 	orr.w	r2, r2, #32
 8000ac2:	b2d2      	uxtb	r2, r2
 8000ac4:	f002 021f 	and.w	r2, r2, #31
 8000ac8:	2101      	movs	r1, #1
 8000aca:	fa01 f202 	lsl.w	r2, r1, r2
 8000ace:	4013      	ands	r3, r2
 8000ad0:	2b00      	cmp	r3, #0
 8000ad2:	d00a      	beq.n	8000aea <HAL_RCC_OscConfig+0x3f6>
 8000ad4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8000ad8:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8000adc:	681b      	ldr	r3, [r3, #0]
 8000ade:	68db      	ldr	r3, [r3, #12]
 8000ae0:	2b01      	cmp	r3, #1
 8000ae2:	d002      	beq.n	8000aea <HAL_RCC_OscConfig+0x3f6>
      {
        return HAL_ERROR;
 8000ae4:	2301      	movs	r3, #1
 8000ae6:	f000 be52 	b.w	800178e <HAL_RCC_OscConfig+0x109a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000aea:	4b76      	ldr	r3, [pc, #472]	; (8000cc4 <HAL_RCC_OscConfig+0x5d0>)
 8000aec:	681b      	ldr	r3, [r3, #0]
 8000aee:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000af2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8000af6:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8000afa:	681b      	ldr	r3, [r3, #0]
 8000afc:	691b      	ldr	r3, [r3, #16]
 8000afe:	21f8      	movs	r1, #248	; 0xf8
 8000b00:	f8c7 1174 	str.w	r1, [r7, #372]	; 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000b04:	f8d7 1174 	ldr.w	r1, [r7, #372]	; 0x174
 8000b08:	fa91 f1a1 	rbit	r1, r1
 8000b0c:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
  return result;
 8000b10:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8000b14:	fab1 f181 	clz	r1, r1
 8000b18:	b2c9      	uxtb	r1, r1
 8000b1a:	408b      	lsls	r3, r1
 8000b1c:	4969      	ldr	r1, [pc, #420]	; (8000cc4 <HAL_RCC_OscConfig+0x5d0>)
 8000b1e:	4313      	orrs	r3, r2
 8000b20:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000b22:	e0fe      	b.n	8000d22 <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000b24:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8000b28:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8000b2c:	681b      	ldr	r3, [r3, #0]
 8000b2e:	68db      	ldr	r3, [r3, #12]
 8000b30:	2b00      	cmp	r3, #0
 8000b32:	f000 8088 	beq.w	8000c46 <HAL_RCC_OscConfig+0x552>
 8000b36:	2301      	movs	r3, #1
 8000b38:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000b3c:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8000b40:	fa93 f3a3 	rbit	r3, r3
 8000b44:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  return result;
 8000b48:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000b4c:	fab3 f383 	clz	r3, r3
 8000b50:	b2db      	uxtb	r3, r3
 8000b52:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8000b56:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8000b5a:	009b      	lsls	r3, r3, #2
 8000b5c:	461a      	mov	r2, r3
 8000b5e:	2301      	movs	r3, #1
 8000b60:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000b62:	f7ff fb7b 	bl	800025c <HAL_GetTick>
 8000b66:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000b6a:	e00a      	b.n	8000b82 <HAL_RCC_OscConfig+0x48e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000b6c:	f7ff fb76 	bl	800025c <HAL_GetTick>
 8000b70:	4602      	mov	r2, r0
 8000b72:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8000b76:	1ad3      	subs	r3, r2, r3
 8000b78:	2b02      	cmp	r3, #2
 8000b7a:	d902      	bls.n	8000b82 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8000b7c:	2303      	movs	r3, #3
 8000b7e:	f000 be06 	b.w	800178e <HAL_RCC_OscConfig+0x109a>
 8000b82:	2302      	movs	r3, #2
 8000b84:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000b88:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8000b8c:	fa93 f3a3 	rbit	r3, r3
 8000b90:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
  return result;
 8000b94:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000b98:	fab3 f383 	clz	r3, r3
 8000b9c:	b2db      	uxtb	r3, r3
 8000b9e:	095b      	lsrs	r3, r3, #5
 8000ba0:	b2db      	uxtb	r3, r3
 8000ba2:	f043 0301 	orr.w	r3, r3, #1
 8000ba6:	b2db      	uxtb	r3, r3
 8000ba8:	2b01      	cmp	r3, #1
 8000baa:	d102      	bne.n	8000bb2 <HAL_RCC_OscConfig+0x4be>
 8000bac:	4b45      	ldr	r3, [pc, #276]	; (8000cc4 <HAL_RCC_OscConfig+0x5d0>)
 8000bae:	681b      	ldr	r3, [r3, #0]
 8000bb0:	e013      	b.n	8000bda <HAL_RCC_OscConfig+0x4e6>
 8000bb2:	2302      	movs	r3, #2
 8000bb4:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000bb8:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8000bbc:	fa93 f3a3 	rbit	r3, r3
 8000bc0:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 8000bc4:	2302      	movs	r3, #2
 8000bc6:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8000bca:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8000bce:	fa93 f3a3 	rbit	r3, r3
 8000bd2:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8000bd6:	4b3b      	ldr	r3, [pc, #236]	; (8000cc4 <HAL_RCC_OscConfig+0x5d0>)
 8000bd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000bda:	2202      	movs	r2, #2
 8000bdc:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 8000be0:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8000be4:	fa92 f2a2 	rbit	r2, r2
 8000be8:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
  return result;
 8000bec:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8000bf0:	fab2 f282 	clz	r2, r2
 8000bf4:	b2d2      	uxtb	r2, r2
 8000bf6:	f042 0220 	orr.w	r2, r2, #32
 8000bfa:	b2d2      	uxtb	r2, r2
 8000bfc:	f002 021f 	and.w	r2, r2, #31
 8000c00:	2101      	movs	r1, #1
 8000c02:	fa01 f202 	lsl.w	r2, r1, r2
 8000c06:	4013      	ands	r3, r2
 8000c08:	2b00      	cmp	r3, #0
 8000c0a:	d0af      	beq.n	8000b6c <HAL_RCC_OscConfig+0x478>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000c0c:	4b2d      	ldr	r3, [pc, #180]	; (8000cc4 <HAL_RCC_OscConfig+0x5d0>)
 8000c0e:	681b      	ldr	r3, [r3, #0]
 8000c10:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000c14:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8000c18:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8000c1c:	681b      	ldr	r3, [r3, #0]
 8000c1e:	691b      	ldr	r3, [r3, #16]
 8000c20:	21f8      	movs	r1, #248	; 0xf8
 8000c22:	f8c7 1144 	str.w	r1, [r7, #324]	; 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000c26:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 8000c2a:	fa91 f1a1 	rbit	r1, r1
 8000c2e:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
  return result;
 8000c32:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8000c36:	fab1 f181 	clz	r1, r1
 8000c3a:	b2c9      	uxtb	r1, r1
 8000c3c:	408b      	lsls	r3, r1
 8000c3e:	4921      	ldr	r1, [pc, #132]	; (8000cc4 <HAL_RCC_OscConfig+0x5d0>)
 8000c40:	4313      	orrs	r3, r2
 8000c42:	600b      	str	r3, [r1, #0]
 8000c44:	e06d      	b.n	8000d22 <HAL_RCC_OscConfig+0x62e>
 8000c46:	2301      	movs	r3, #1
 8000c48:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000c4c:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8000c50:	fa93 f3a3 	rbit	r3, r3
 8000c54:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  return result;
 8000c58:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000c5c:	fab3 f383 	clz	r3, r3
 8000c60:	b2db      	uxtb	r3, r3
 8000c62:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8000c66:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8000c6a:	009b      	lsls	r3, r3, #2
 8000c6c:	461a      	mov	r2, r3
 8000c6e:	2300      	movs	r3, #0
 8000c70:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000c72:	f7ff faf3 	bl	800025c <HAL_GetTick>
 8000c76:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000c7a:	e00a      	b.n	8000c92 <HAL_RCC_OscConfig+0x59e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000c7c:	f7ff faee 	bl	800025c <HAL_GetTick>
 8000c80:	4602      	mov	r2, r0
 8000c82:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8000c86:	1ad3      	subs	r3, r2, r3
 8000c88:	2b02      	cmp	r3, #2
 8000c8a:	d902      	bls.n	8000c92 <HAL_RCC_OscConfig+0x59e>
          {
            return HAL_TIMEOUT;
 8000c8c:	2303      	movs	r3, #3
 8000c8e:	f000 bd7e 	b.w	800178e <HAL_RCC_OscConfig+0x109a>
 8000c92:	2302      	movs	r3, #2
 8000c94:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000c98:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8000c9c:	fa93 f3a3 	rbit	r3, r3
 8000ca0:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  return result;
 8000ca4:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000ca8:	fab3 f383 	clz	r3, r3
 8000cac:	b2db      	uxtb	r3, r3
 8000cae:	095b      	lsrs	r3, r3, #5
 8000cb0:	b2db      	uxtb	r3, r3
 8000cb2:	f043 0301 	orr.w	r3, r3, #1
 8000cb6:	b2db      	uxtb	r3, r3
 8000cb8:	2b01      	cmp	r3, #1
 8000cba:	d105      	bne.n	8000cc8 <HAL_RCC_OscConfig+0x5d4>
 8000cbc:	4b01      	ldr	r3, [pc, #4]	; (8000cc4 <HAL_RCC_OscConfig+0x5d0>)
 8000cbe:	681b      	ldr	r3, [r3, #0]
 8000cc0:	e016      	b.n	8000cf0 <HAL_RCC_OscConfig+0x5fc>
 8000cc2:	bf00      	nop
 8000cc4:	40021000 	.word	0x40021000
 8000cc8:	2302      	movs	r3, #2
 8000cca:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000cce:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8000cd2:	fa93 f3a3 	rbit	r3, r3
 8000cd6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8000cda:	2302      	movs	r3, #2
 8000cdc:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8000ce0:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8000ce4:	fa93 f3a3 	rbit	r3, r3
 8000ce8:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8000cec:	4bbf      	ldr	r3, [pc, #764]	; (8000fec <HAL_RCC_OscConfig+0x8f8>)
 8000cee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000cf0:	2202      	movs	r2, #2
 8000cf2:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 8000cf6:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 8000cfa:	fa92 f2a2 	rbit	r2, r2
 8000cfe:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
  return result;
 8000d02:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8000d06:	fab2 f282 	clz	r2, r2
 8000d0a:	b2d2      	uxtb	r2, r2
 8000d0c:	f042 0220 	orr.w	r2, r2, #32
 8000d10:	b2d2      	uxtb	r2, r2
 8000d12:	f002 021f 	and.w	r2, r2, #31
 8000d16:	2101      	movs	r1, #1
 8000d18:	fa01 f202 	lsl.w	r2, r1, r2
 8000d1c:	4013      	ands	r3, r2
 8000d1e:	2b00      	cmp	r3, #0
 8000d20:	d1ac      	bne.n	8000c7c <HAL_RCC_OscConfig+0x588>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000d22:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8000d26:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8000d2a:	681b      	ldr	r3, [r3, #0]
 8000d2c:	681b      	ldr	r3, [r3, #0]
 8000d2e:	f003 0308 	and.w	r3, r3, #8
 8000d32:	2b00      	cmp	r3, #0
 8000d34:	f000 8113 	beq.w	8000f5e <HAL_RCC_OscConfig+0x86a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000d38:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8000d3c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8000d40:	681b      	ldr	r3, [r3, #0]
 8000d42:	695b      	ldr	r3, [r3, #20]
 8000d44:	2b00      	cmp	r3, #0
 8000d46:	d07c      	beq.n	8000e42 <HAL_RCC_OscConfig+0x74e>
 8000d48:	2301      	movs	r3, #1
 8000d4a:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000d4e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8000d52:	fa93 f3a3 	rbit	r3, r3
 8000d56:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  return result;
 8000d5a:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000d5e:	fab3 f383 	clz	r3, r3
 8000d62:	b2db      	uxtb	r3, r3
 8000d64:	461a      	mov	r2, r3
 8000d66:	4ba2      	ldr	r3, [pc, #648]	; (8000ff0 <HAL_RCC_OscConfig+0x8fc>)
 8000d68:	4413      	add	r3, r2
 8000d6a:	009b      	lsls	r3, r3, #2
 8000d6c:	461a      	mov	r2, r3
 8000d6e:	2301      	movs	r3, #1
 8000d70:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000d72:	f7ff fa73 	bl	800025c <HAL_GetTick>
 8000d76:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000d7a:	e00a      	b.n	8000d92 <HAL_RCC_OscConfig+0x69e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000d7c:	f7ff fa6e 	bl	800025c <HAL_GetTick>
 8000d80:	4602      	mov	r2, r0
 8000d82:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8000d86:	1ad3      	subs	r3, r2, r3
 8000d88:	2b02      	cmp	r3, #2
 8000d8a:	d902      	bls.n	8000d92 <HAL_RCC_OscConfig+0x69e>
        {
          return HAL_TIMEOUT;
 8000d8c:	2303      	movs	r3, #3
 8000d8e:	f000 bcfe 	b.w	800178e <HAL_RCC_OscConfig+0x109a>
 8000d92:	2302      	movs	r3, #2
 8000d94:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000d98:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8000d9c:	fa93 f2a3 	rbit	r2, r3
 8000da0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8000da4:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8000da8:	601a      	str	r2, [r3, #0]
 8000daa:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8000dae:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8000db2:	2202      	movs	r2, #2
 8000db4:	601a      	str	r2, [r3, #0]
 8000db6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8000dba:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	fa93 f2a3 	rbit	r2, r3
 8000dc4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8000dc8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8000dcc:	601a      	str	r2, [r3, #0]
 8000dce:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8000dd2:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8000dd6:	2202      	movs	r2, #2
 8000dd8:	601a      	str	r2, [r3, #0]
 8000dda:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8000dde:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	fa93 f2a3 	rbit	r2, r3
 8000de8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8000dec:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8000df0:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000df2:	4b7e      	ldr	r3, [pc, #504]	; (8000fec <HAL_RCC_OscConfig+0x8f8>)
 8000df4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000df6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8000dfa:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8000dfe:	2102      	movs	r1, #2
 8000e00:	6019      	str	r1, [r3, #0]
 8000e02:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8000e06:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	fa93 f1a3 	rbit	r1, r3
 8000e10:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8000e14:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8000e18:	6019      	str	r1, [r3, #0]
  return result;
 8000e1a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8000e1e:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	fab3 f383 	clz	r3, r3
 8000e28:	b2db      	uxtb	r3, r3
 8000e2a:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8000e2e:	b2db      	uxtb	r3, r3
 8000e30:	f003 031f 	and.w	r3, r3, #31
 8000e34:	2101      	movs	r1, #1
 8000e36:	fa01 f303 	lsl.w	r3, r1, r3
 8000e3a:	4013      	ands	r3, r2
 8000e3c:	2b00      	cmp	r3, #0
 8000e3e:	d09d      	beq.n	8000d7c <HAL_RCC_OscConfig+0x688>
 8000e40:	e08d      	b.n	8000f5e <HAL_RCC_OscConfig+0x86a>
 8000e42:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8000e46:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8000e4a:	2201      	movs	r2, #1
 8000e4c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000e4e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8000e52:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	fa93 f2a3 	rbit	r2, r3
 8000e5c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8000e60:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8000e64:	601a      	str	r2, [r3, #0]
  return result;
 8000e66:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8000e6a:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8000e6e:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000e70:	fab3 f383 	clz	r3, r3
 8000e74:	b2db      	uxtb	r3, r3
 8000e76:	461a      	mov	r2, r3
 8000e78:	4b5d      	ldr	r3, [pc, #372]	; (8000ff0 <HAL_RCC_OscConfig+0x8fc>)
 8000e7a:	4413      	add	r3, r2
 8000e7c:	009b      	lsls	r3, r3, #2
 8000e7e:	461a      	mov	r2, r3
 8000e80:	2300      	movs	r3, #0
 8000e82:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000e84:	f7ff f9ea 	bl	800025c <HAL_GetTick>
 8000e88:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000e8c:	e00a      	b.n	8000ea4 <HAL_RCC_OscConfig+0x7b0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000e8e:	f7ff f9e5 	bl	800025c <HAL_GetTick>
 8000e92:	4602      	mov	r2, r0
 8000e94:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8000e98:	1ad3      	subs	r3, r2, r3
 8000e9a:	2b02      	cmp	r3, #2
 8000e9c:	d902      	bls.n	8000ea4 <HAL_RCC_OscConfig+0x7b0>
        {
          return HAL_TIMEOUT;
 8000e9e:	2303      	movs	r3, #3
 8000ea0:	f000 bc75 	b.w	800178e <HAL_RCC_OscConfig+0x109a>
 8000ea4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8000ea8:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8000eac:	2202      	movs	r2, #2
 8000eae:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000eb0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8000eb4:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8000eb8:	681b      	ldr	r3, [r3, #0]
 8000eba:	fa93 f2a3 	rbit	r2, r3
 8000ebe:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8000ec2:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8000ec6:	601a      	str	r2, [r3, #0]
 8000ec8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8000ecc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8000ed0:	2202      	movs	r2, #2
 8000ed2:	601a      	str	r2, [r3, #0]
 8000ed4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8000ed8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	fa93 f2a3 	rbit	r2, r3
 8000ee2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8000ee6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8000eea:	601a      	str	r2, [r3, #0]
 8000eec:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8000ef0:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8000ef4:	2202      	movs	r2, #2
 8000ef6:	601a      	str	r2, [r3, #0]
 8000ef8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8000efc:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8000f00:	681b      	ldr	r3, [r3, #0]
 8000f02:	fa93 f2a3 	rbit	r2, r3
 8000f06:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8000f0a:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8000f0e:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000f10:	4b36      	ldr	r3, [pc, #216]	; (8000fec <HAL_RCC_OscConfig+0x8f8>)
 8000f12:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000f14:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8000f18:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8000f1c:	2102      	movs	r1, #2
 8000f1e:	6019      	str	r1, [r3, #0]
 8000f20:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8000f24:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8000f28:	681b      	ldr	r3, [r3, #0]
 8000f2a:	fa93 f1a3 	rbit	r1, r3
 8000f2e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8000f32:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8000f36:	6019      	str	r1, [r3, #0]
  return result;
 8000f38:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8000f3c:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8000f40:	681b      	ldr	r3, [r3, #0]
 8000f42:	fab3 f383 	clz	r3, r3
 8000f46:	b2db      	uxtb	r3, r3
 8000f48:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8000f4c:	b2db      	uxtb	r3, r3
 8000f4e:	f003 031f 	and.w	r3, r3, #31
 8000f52:	2101      	movs	r1, #1
 8000f54:	fa01 f303 	lsl.w	r3, r1, r3
 8000f58:	4013      	ands	r3, r2
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	d197      	bne.n	8000e8e <HAL_RCC_OscConfig+0x79a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000f5e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8000f62:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	681b      	ldr	r3, [r3, #0]
 8000f6a:	f003 0304 	and.w	r3, r3, #4
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	f000 81a5 	beq.w	80012be <HAL_RCC_OscConfig+0xbca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000f74:	2300      	movs	r3, #0
 8000f76:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000f7a:	4b1c      	ldr	r3, [pc, #112]	; (8000fec <HAL_RCC_OscConfig+0x8f8>)
 8000f7c:	69db      	ldr	r3, [r3, #28]
 8000f7e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	d116      	bne.n	8000fb4 <HAL_RCC_OscConfig+0x8c0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000f86:	4b19      	ldr	r3, [pc, #100]	; (8000fec <HAL_RCC_OscConfig+0x8f8>)
 8000f88:	69db      	ldr	r3, [r3, #28]
 8000f8a:	4a18      	ldr	r2, [pc, #96]	; (8000fec <HAL_RCC_OscConfig+0x8f8>)
 8000f8c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f90:	61d3      	str	r3, [r2, #28]
 8000f92:	4b16      	ldr	r3, [pc, #88]	; (8000fec <HAL_RCC_OscConfig+0x8f8>)
 8000f94:	69db      	ldr	r3, [r3, #28]
 8000f96:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8000f9a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8000f9e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000fa2:	601a      	str	r2, [r3, #0]
 8000fa4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8000fa8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000fac:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8000fae:	2301      	movs	r3, #1
 8000fb0:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000fb4:	4b0f      	ldr	r3, [pc, #60]	; (8000ff4 <HAL_RCC_OscConfig+0x900>)
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	d121      	bne.n	8001004 <HAL_RCC_OscConfig+0x910>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000fc0:	4b0c      	ldr	r3, [pc, #48]	; (8000ff4 <HAL_RCC_OscConfig+0x900>)
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	4a0b      	ldr	r2, [pc, #44]	; (8000ff4 <HAL_RCC_OscConfig+0x900>)
 8000fc6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000fca:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000fcc:	f7ff f946 	bl	800025c <HAL_GetTick>
 8000fd0:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000fd4:	e010      	b.n	8000ff8 <HAL_RCC_OscConfig+0x904>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000fd6:	f7ff f941 	bl	800025c <HAL_GetTick>
 8000fda:	4602      	mov	r2, r0
 8000fdc:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8000fe0:	1ad3      	subs	r3, r2, r3
 8000fe2:	2b64      	cmp	r3, #100	; 0x64
 8000fe4:	d908      	bls.n	8000ff8 <HAL_RCC_OscConfig+0x904>
        {
          return HAL_TIMEOUT;
 8000fe6:	2303      	movs	r3, #3
 8000fe8:	e3d1      	b.n	800178e <HAL_RCC_OscConfig+0x109a>
 8000fea:	bf00      	nop
 8000fec:	40021000 	.word	0x40021000
 8000ff0:	10908120 	.word	0x10908120
 8000ff4:	40007000 	.word	0x40007000
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000ff8:	4b8d      	ldr	r3, [pc, #564]	; (8001230 <HAL_RCC_OscConfig+0xb3c>)
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001000:	2b00      	cmp	r3, #0
 8001002:	d0e8      	beq.n	8000fd6 <HAL_RCC_OscConfig+0x8e2>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001004:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001008:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	689b      	ldr	r3, [r3, #8]
 8001010:	2b01      	cmp	r3, #1
 8001012:	d106      	bne.n	8001022 <HAL_RCC_OscConfig+0x92e>
 8001014:	4b87      	ldr	r3, [pc, #540]	; (8001234 <HAL_RCC_OscConfig+0xb40>)
 8001016:	6a1b      	ldr	r3, [r3, #32]
 8001018:	4a86      	ldr	r2, [pc, #536]	; (8001234 <HAL_RCC_OscConfig+0xb40>)
 800101a:	f043 0301 	orr.w	r3, r3, #1
 800101e:	6213      	str	r3, [r2, #32]
 8001020:	e035      	b.n	800108e <HAL_RCC_OscConfig+0x99a>
 8001022:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001026:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	689b      	ldr	r3, [r3, #8]
 800102e:	2b00      	cmp	r3, #0
 8001030:	d10c      	bne.n	800104c <HAL_RCC_OscConfig+0x958>
 8001032:	4b80      	ldr	r3, [pc, #512]	; (8001234 <HAL_RCC_OscConfig+0xb40>)
 8001034:	6a1b      	ldr	r3, [r3, #32]
 8001036:	4a7f      	ldr	r2, [pc, #508]	; (8001234 <HAL_RCC_OscConfig+0xb40>)
 8001038:	f023 0301 	bic.w	r3, r3, #1
 800103c:	6213      	str	r3, [r2, #32]
 800103e:	4b7d      	ldr	r3, [pc, #500]	; (8001234 <HAL_RCC_OscConfig+0xb40>)
 8001040:	6a1b      	ldr	r3, [r3, #32]
 8001042:	4a7c      	ldr	r2, [pc, #496]	; (8001234 <HAL_RCC_OscConfig+0xb40>)
 8001044:	f023 0304 	bic.w	r3, r3, #4
 8001048:	6213      	str	r3, [r2, #32]
 800104a:	e020      	b.n	800108e <HAL_RCC_OscConfig+0x99a>
 800104c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001050:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	689b      	ldr	r3, [r3, #8]
 8001058:	2b05      	cmp	r3, #5
 800105a:	d10c      	bne.n	8001076 <HAL_RCC_OscConfig+0x982>
 800105c:	4b75      	ldr	r3, [pc, #468]	; (8001234 <HAL_RCC_OscConfig+0xb40>)
 800105e:	6a1b      	ldr	r3, [r3, #32]
 8001060:	4a74      	ldr	r2, [pc, #464]	; (8001234 <HAL_RCC_OscConfig+0xb40>)
 8001062:	f043 0304 	orr.w	r3, r3, #4
 8001066:	6213      	str	r3, [r2, #32]
 8001068:	4b72      	ldr	r3, [pc, #456]	; (8001234 <HAL_RCC_OscConfig+0xb40>)
 800106a:	6a1b      	ldr	r3, [r3, #32]
 800106c:	4a71      	ldr	r2, [pc, #452]	; (8001234 <HAL_RCC_OscConfig+0xb40>)
 800106e:	f043 0301 	orr.w	r3, r3, #1
 8001072:	6213      	str	r3, [r2, #32]
 8001074:	e00b      	b.n	800108e <HAL_RCC_OscConfig+0x99a>
 8001076:	4b6f      	ldr	r3, [pc, #444]	; (8001234 <HAL_RCC_OscConfig+0xb40>)
 8001078:	6a1b      	ldr	r3, [r3, #32]
 800107a:	4a6e      	ldr	r2, [pc, #440]	; (8001234 <HAL_RCC_OscConfig+0xb40>)
 800107c:	f023 0301 	bic.w	r3, r3, #1
 8001080:	6213      	str	r3, [r2, #32]
 8001082:	4b6c      	ldr	r3, [pc, #432]	; (8001234 <HAL_RCC_OscConfig+0xb40>)
 8001084:	6a1b      	ldr	r3, [r3, #32]
 8001086:	4a6b      	ldr	r2, [pc, #428]	; (8001234 <HAL_RCC_OscConfig+0xb40>)
 8001088:	f023 0304 	bic.w	r3, r3, #4
 800108c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800108e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001092:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	689b      	ldr	r3, [r3, #8]
 800109a:	2b00      	cmp	r3, #0
 800109c:	f000 8081 	beq.w	80011a2 <HAL_RCC_OscConfig+0xaae>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80010a0:	f7ff f8dc 	bl	800025c <HAL_GetTick>
 80010a4:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80010a8:	e00b      	b.n	80010c2 <HAL_RCC_OscConfig+0x9ce>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80010aa:	f7ff f8d7 	bl	800025c <HAL_GetTick>
 80010ae:	4602      	mov	r2, r0
 80010b0:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80010b4:	1ad3      	subs	r3, r2, r3
 80010b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80010ba:	4293      	cmp	r3, r2
 80010bc:	d901      	bls.n	80010c2 <HAL_RCC_OscConfig+0x9ce>
        {
          return HAL_TIMEOUT;
 80010be:	2303      	movs	r3, #3
 80010c0:	e365      	b.n	800178e <HAL_RCC_OscConfig+0x109a>
 80010c2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80010c6:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 80010ca:	2202      	movs	r2, #2
 80010cc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80010ce:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80010d2:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	fa93 f2a3 	rbit	r2, r3
 80010dc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80010e0:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80010e4:	601a      	str	r2, [r3, #0]
 80010e6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80010ea:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80010ee:	2202      	movs	r2, #2
 80010f0:	601a      	str	r2, [r3, #0]
 80010f2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80010f6:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	fa93 f2a3 	rbit	r2, r3
 8001100:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001104:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8001108:	601a      	str	r2, [r3, #0]
  return result;
 800110a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800110e:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8001112:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001114:	fab3 f383 	clz	r3, r3
 8001118:	b2db      	uxtb	r3, r3
 800111a:	095b      	lsrs	r3, r3, #5
 800111c:	b2db      	uxtb	r3, r3
 800111e:	f043 0302 	orr.w	r3, r3, #2
 8001122:	b2db      	uxtb	r3, r3
 8001124:	2b02      	cmp	r3, #2
 8001126:	d102      	bne.n	800112e <HAL_RCC_OscConfig+0xa3a>
 8001128:	4b42      	ldr	r3, [pc, #264]	; (8001234 <HAL_RCC_OscConfig+0xb40>)
 800112a:	6a1b      	ldr	r3, [r3, #32]
 800112c:	e013      	b.n	8001156 <HAL_RCC_OscConfig+0xa62>
 800112e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001132:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8001136:	2202      	movs	r2, #2
 8001138:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800113a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800113e:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	fa93 f2a3 	rbit	r2, r3
 8001148:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800114c:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 8001150:	601a      	str	r2, [r3, #0]
 8001152:	4b38      	ldr	r3, [pc, #224]	; (8001234 <HAL_RCC_OscConfig+0xb40>)
 8001154:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001156:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800115a:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 800115e:	2102      	movs	r1, #2
 8001160:	6011      	str	r1, [r2, #0]
 8001162:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001166:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 800116a:	6812      	ldr	r2, [r2, #0]
 800116c:	fa92 f1a2 	rbit	r1, r2
 8001170:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001174:	f5a2 72b0 	sub.w	r2, r2, #352	; 0x160
 8001178:	6011      	str	r1, [r2, #0]
  return result;
 800117a:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800117e:	f5a2 72b0 	sub.w	r2, r2, #352	; 0x160
 8001182:	6812      	ldr	r2, [r2, #0]
 8001184:	fab2 f282 	clz	r2, r2
 8001188:	b2d2      	uxtb	r2, r2
 800118a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800118e:	b2d2      	uxtb	r2, r2
 8001190:	f002 021f 	and.w	r2, r2, #31
 8001194:	2101      	movs	r1, #1
 8001196:	fa01 f202 	lsl.w	r2, r1, r2
 800119a:	4013      	ands	r3, r2
 800119c:	2b00      	cmp	r3, #0
 800119e:	d084      	beq.n	80010aa <HAL_RCC_OscConfig+0x9b6>
 80011a0:	e083      	b.n	80012aa <HAL_RCC_OscConfig+0xbb6>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80011a2:	f7ff f85b 	bl	800025c <HAL_GetTick>
 80011a6:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80011aa:	e00b      	b.n	80011c4 <HAL_RCC_OscConfig+0xad0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80011ac:	f7ff f856 	bl	800025c <HAL_GetTick>
 80011b0:	4602      	mov	r2, r0
 80011b2:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80011b6:	1ad3      	subs	r3, r2, r3
 80011b8:	f241 3288 	movw	r2, #5000	; 0x1388
 80011bc:	4293      	cmp	r3, r2
 80011be:	d901      	bls.n	80011c4 <HAL_RCC_OscConfig+0xad0>
        {
          return HAL_TIMEOUT;
 80011c0:	2303      	movs	r3, #3
 80011c2:	e2e4      	b.n	800178e <HAL_RCC_OscConfig+0x109a>
 80011c4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80011c8:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 80011cc:	2202      	movs	r2, #2
 80011ce:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80011d0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80011d4:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	fa93 f2a3 	rbit	r2, r3
 80011de:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80011e2:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 80011e6:	601a      	str	r2, [r3, #0]
 80011e8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80011ec:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 80011f0:	2202      	movs	r2, #2
 80011f2:	601a      	str	r2, [r3, #0]
 80011f4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80011f8:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	fa93 f2a3 	rbit	r2, r3
 8001202:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001206:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 800120a:	601a      	str	r2, [r3, #0]
  return result;
 800120c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001210:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8001214:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001216:	fab3 f383 	clz	r3, r3
 800121a:	b2db      	uxtb	r3, r3
 800121c:	095b      	lsrs	r3, r3, #5
 800121e:	b2db      	uxtb	r3, r3
 8001220:	f043 0302 	orr.w	r3, r3, #2
 8001224:	b2db      	uxtb	r3, r3
 8001226:	2b02      	cmp	r3, #2
 8001228:	d106      	bne.n	8001238 <HAL_RCC_OscConfig+0xb44>
 800122a:	4b02      	ldr	r3, [pc, #8]	; (8001234 <HAL_RCC_OscConfig+0xb40>)
 800122c:	6a1b      	ldr	r3, [r3, #32]
 800122e:	e017      	b.n	8001260 <HAL_RCC_OscConfig+0xb6c>
 8001230:	40007000 	.word	0x40007000
 8001234:	40021000 	.word	0x40021000
 8001238:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800123c:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8001240:	2202      	movs	r2, #2
 8001242:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001244:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001248:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	fa93 f2a3 	rbit	r2, r3
 8001252:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001256:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 800125a:	601a      	str	r2, [r3, #0]
 800125c:	4bb3      	ldr	r3, [pc, #716]	; (800152c <HAL_RCC_OscConfig+0xe38>)
 800125e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001260:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001264:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8001268:	2102      	movs	r1, #2
 800126a:	6011      	str	r1, [r2, #0]
 800126c:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001270:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8001274:	6812      	ldr	r2, [r2, #0]
 8001276:	fa92 f1a2 	rbit	r1, r2
 800127a:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800127e:	f5a2 72c0 	sub.w	r2, r2, #384	; 0x180
 8001282:	6011      	str	r1, [r2, #0]
  return result;
 8001284:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001288:	f5a2 72c0 	sub.w	r2, r2, #384	; 0x180
 800128c:	6812      	ldr	r2, [r2, #0]
 800128e:	fab2 f282 	clz	r2, r2
 8001292:	b2d2      	uxtb	r2, r2
 8001294:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001298:	b2d2      	uxtb	r2, r2
 800129a:	f002 021f 	and.w	r2, r2, #31
 800129e:	2101      	movs	r1, #1
 80012a0:	fa01 f202 	lsl.w	r2, r1, r2
 80012a4:	4013      	ands	r3, r2
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d180      	bne.n	80011ac <HAL_RCC_OscConfig+0xab8>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80012aa:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 80012ae:	2b01      	cmp	r3, #1
 80012b0:	d105      	bne.n	80012be <HAL_RCC_OscConfig+0xbca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80012b2:	4b9e      	ldr	r3, [pc, #632]	; (800152c <HAL_RCC_OscConfig+0xe38>)
 80012b4:	69db      	ldr	r3, [r3, #28]
 80012b6:	4a9d      	ldr	r2, [pc, #628]	; (800152c <HAL_RCC_OscConfig+0xe38>)
 80012b8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80012bc:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80012be:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80012c2:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	699b      	ldr	r3, [r3, #24]
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	f000 825e 	beq.w	800178c <HAL_RCC_OscConfig+0x1098>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80012d0:	4b96      	ldr	r3, [pc, #600]	; (800152c <HAL_RCC_OscConfig+0xe38>)
 80012d2:	685b      	ldr	r3, [r3, #4]
 80012d4:	f003 030c 	and.w	r3, r3, #12
 80012d8:	2b08      	cmp	r3, #8
 80012da:	f000 821f 	beq.w	800171c <HAL_RCC_OscConfig+0x1028>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80012de:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80012e2:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	699b      	ldr	r3, [r3, #24]
 80012ea:	2b02      	cmp	r3, #2
 80012ec:	f040 8170 	bne.w	80015d0 <HAL_RCC_OscConfig+0xedc>
 80012f0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80012f4:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 80012f8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80012fc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012fe:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001302:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	fa93 f2a3 	rbit	r2, r3
 800130c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001310:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8001314:	601a      	str	r2, [r3, #0]
  return result;
 8001316:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800131a:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 800131e:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001320:	fab3 f383 	clz	r3, r3
 8001324:	b2db      	uxtb	r3, r3
 8001326:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800132a:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800132e:	009b      	lsls	r3, r3, #2
 8001330:	461a      	mov	r2, r3
 8001332:	2300      	movs	r3, #0
 8001334:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001336:	f7fe ff91 	bl	800025c <HAL_GetTick>
 800133a:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800133e:	e009      	b.n	8001354 <HAL_RCC_OscConfig+0xc60>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001340:	f7fe ff8c 	bl	800025c <HAL_GetTick>
 8001344:	4602      	mov	r2, r0
 8001346:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800134a:	1ad3      	subs	r3, r2, r3
 800134c:	2b02      	cmp	r3, #2
 800134e:	d901      	bls.n	8001354 <HAL_RCC_OscConfig+0xc60>
          {
            return HAL_TIMEOUT;
 8001350:	2303      	movs	r3, #3
 8001352:	e21c      	b.n	800178e <HAL_RCC_OscConfig+0x109a>
 8001354:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001358:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 800135c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001360:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001362:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001366:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	fa93 f2a3 	rbit	r2, r3
 8001370:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001374:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8001378:	601a      	str	r2, [r3, #0]
  return result;
 800137a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800137e:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8001382:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001384:	fab3 f383 	clz	r3, r3
 8001388:	b2db      	uxtb	r3, r3
 800138a:	095b      	lsrs	r3, r3, #5
 800138c:	b2db      	uxtb	r3, r3
 800138e:	f043 0301 	orr.w	r3, r3, #1
 8001392:	b2db      	uxtb	r3, r3
 8001394:	2b01      	cmp	r3, #1
 8001396:	d102      	bne.n	800139e <HAL_RCC_OscConfig+0xcaa>
 8001398:	4b64      	ldr	r3, [pc, #400]	; (800152c <HAL_RCC_OscConfig+0xe38>)
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	e027      	b.n	80013ee <HAL_RCC_OscConfig+0xcfa>
 800139e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80013a2:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 80013a6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80013aa:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80013ac:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80013b0:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	fa93 f2a3 	rbit	r2, r3
 80013ba:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80013be:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 80013c2:	601a      	str	r2, [r3, #0]
 80013c4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80013c8:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 80013cc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80013d0:	601a      	str	r2, [r3, #0]
 80013d2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80013d6:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	fa93 f2a3 	rbit	r2, r3
 80013e0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80013e4:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 80013e8:	601a      	str	r2, [r3, #0]
 80013ea:	4b50      	ldr	r3, [pc, #320]	; (800152c <HAL_RCC_OscConfig+0xe38>)
 80013ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013ee:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80013f2:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 80013f6:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80013fa:	6011      	str	r1, [r2, #0]
 80013fc:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001400:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8001404:	6812      	ldr	r2, [r2, #0]
 8001406:	fa92 f1a2 	rbit	r1, r2
 800140a:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800140e:	f5a2 72d4 	sub.w	r2, r2, #424	; 0x1a8
 8001412:	6011      	str	r1, [r2, #0]
  return result;
 8001414:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001418:	f5a2 72d4 	sub.w	r2, r2, #424	; 0x1a8
 800141c:	6812      	ldr	r2, [r2, #0]
 800141e:	fab2 f282 	clz	r2, r2
 8001422:	b2d2      	uxtb	r2, r2
 8001424:	f042 0220 	orr.w	r2, r2, #32
 8001428:	b2d2      	uxtb	r2, r2
 800142a:	f002 021f 	and.w	r2, r2, #31
 800142e:	2101      	movs	r1, #1
 8001430:	fa01 f202 	lsl.w	r2, r1, r2
 8001434:	4013      	ands	r3, r2
 8001436:	2b00      	cmp	r3, #0
 8001438:	d182      	bne.n	8001340 <HAL_RCC_OscConfig+0xc4c>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800143a:	4b3c      	ldr	r3, [pc, #240]	; (800152c <HAL_RCC_OscConfig+0xe38>)
 800143c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800143e:	f023 020f 	bic.w	r2, r3, #15
 8001442:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001446:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800144e:	4937      	ldr	r1, [pc, #220]	; (800152c <HAL_RCC_OscConfig+0xe38>)
 8001450:	4313      	orrs	r3, r2
 8001452:	62cb      	str	r3, [r1, #44]	; 0x2c
 8001454:	4b35      	ldr	r3, [pc, #212]	; (800152c <HAL_RCC_OscConfig+0xe38>)
 8001456:	685b      	ldr	r3, [r3, #4]
 8001458:	f423 1276 	bic.w	r2, r3, #4030464	; 0x3d8000
 800145c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001460:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	6a19      	ldr	r1, [r3, #32]
 8001468:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800146c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	69db      	ldr	r3, [r3, #28]
 8001474:	430b      	orrs	r3, r1
 8001476:	492d      	ldr	r1, [pc, #180]	; (800152c <HAL_RCC_OscConfig+0xe38>)
 8001478:	4313      	orrs	r3, r2
 800147a:	604b      	str	r3, [r1, #4]
 800147c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001480:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8001484:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001488:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800148a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800148e:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	fa93 f2a3 	rbit	r2, r3
 8001498:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800149c:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 80014a0:	601a      	str	r2, [r3, #0]
  return result;
 80014a2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80014a6:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 80014aa:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80014ac:	fab3 f383 	clz	r3, r3
 80014b0:	b2db      	uxtb	r3, r3
 80014b2:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80014b6:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80014ba:	009b      	lsls	r3, r3, #2
 80014bc:	461a      	mov	r2, r3
 80014be:	2301      	movs	r3, #1
 80014c0:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014c2:	f7fe fecb 	bl	800025c <HAL_GetTick>
 80014c6:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80014ca:	e009      	b.n	80014e0 <HAL_RCC_OscConfig+0xdec>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80014cc:	f7fe fec6 	bl	800025c <HAL_GetTick>
 80014d0:	4602      	mov	r2, r0
 80014d2:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80014d6:	1ad3      	subs	r3, r2, r3
 80014d8:	2b02      	cmp	r3, #2
 80014da:	d901      	bls.n	80014e0 <HAL_RCC_OscConfig+0xdec>
          {
            return HAL_TIMEOUT;
 80014dc:	2303      	movs	r3, #3
 80014de:	e156      	b.n	800178e <HAL_RCC_OscConfig+0x109a>
 80014e0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80014e4:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 80014e8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80014ec:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014ee:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80014f2:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	fa93 f2a3 	rbit	r2, r3
 80014fc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001500:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8001504:	601a      	str	r2, [r3, #0]
  return result;
 8001506:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800150a:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 800150e:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001510:	fab3 f383 	clz	r3, r3
 8001514:	b2db      	uxtb	r3, r3
 8001516:	095b      	lsrs	r3, r3, #5
 8001518:	b2db      	uxtb	r3, r3
 800151a:	f043 0301 	orr.w	r3, r3, #1
 800151e:	b2db      	uxtb	r3, r3
 8001520:	2b01      	cmp	r3, #1
 8001522:	d105      	bne.n	8001530 <HAL_RCC_OscConfig+0xe3c>
 8001524:	4b01      	ldr	r3, [pc, #4]	; (800152c <HAL_RCC_OscConfig+0xe38>)
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	e02a      	b.n	8001580 <HAL_RCC_OscConfig+0xe8c>
 800152a:	bf00      	nop
 800152c:	40021000 	.word	0x40021000
 8001530:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001534:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8001538:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800153c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800153e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001542:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	fa93 f2a3 	rbit	r2, r3
 800154c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001550:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8001554:	601a      	str	r2, [r3, #0]
 8001556:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800155a:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 800155e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001562:	601a      	str	r2, [r3, #0]
 8001564:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001568:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	fa93 f2a3 	rbit	r2, r3
 8001572:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001576:	f5a3 73e4 	sub.w	r3, r3, #456	; 0x1c8
 800157a:	601a      	str	r2, [r3, #0]
 800157c:	4b86      	ldr	r3, [pc, #536]	; (8001798 <HAL_RCC_OscConfig+0x10a4>)
 800157e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001580:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001584:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8001588:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800158c:	6011      	str	r1, [r2, #0]
 800158e:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001592:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8001596:	6812      	ldr	r2, [r2, #0]
 8001598:	fa92 f1a2 	rbit	r1, r2
 800159c:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80015a0:	f5a2 72e8 	sub.w	r2, r2, #464	; 0x1d0
 80015a4:	6011      	str	r1, [r2, #0]
  return result;
 80015a6:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80015aa:	f5a2 72e8 	sub.w	r2, r2, #464	; 0x1d0
 80015ae:	6812      	ldr	r2, [r2, #0]
 80015b0:	fab2 f282 	clz	r2, r2
 80015b4:	b2d2      	uxtb	r2, r2
 80015b6:	f042 0220 	orr.w	r2, r2, #32
 80015ba:	b2d2      	uxtb	r2, r2
 80015bc:	f002 021f 	and.w	r2, r2, #31
 80015c0:	2101      	movs	r1, #1
 80015c2:	fa01 f202 	lsl.w	r2, r1, r2
 80015c6:	4013      	ands	r3, r2
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	f43f af7f 	beq.w	80014cc <HAL_RCC_OscConfig+0xdd8>
 80015ce:	e0dd      	b.n	800178c <HAL_RCC_OscConfig+0x1098>
 80015d0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80015d4:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 80015d8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80015dc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015de:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80015e2:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	fa93 f2a3 	rbit	r2, r3
 80015ec:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80015f0:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 80015f4:	601a      	str	r2, [r3, #0]
  return result;
 80015f6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80015fa:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 80015fe:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001600:	fab3 f383 	clz	r3, r3
 8001604:	b2db      	uxtb	r3, r3
 8001606:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800160a:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800160e:	009b      	lsls	r3, r3, #2
 8001610:	461a      	mov	r2, r3
 8001612:	2300      	movs	r3, #0
 8001614:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001616:	f7fe fe21 	bl	800025c <HAL_GetTick>
 800161a:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800161e:	e009      	b.n	8001634 <HAL_RCC_OscConfig+0xf40>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001620:	f7fe fe1c 	bl	800025c <HAL_GetTick>
 8001624:	4602      	mov	r2, r0
 8001626:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800162a:	1ad3      	subs	r3, r2, r3
 800162c:	2b02      	cmp	r3, #2
 800162e:	d901      	bls.n	8001634 <HAL_RCC_OscConfig+0xf40>
          {
            return HAL_TIMEOUT;
 8001630:	2303      	movs	r3, #3
 8001632:	e0ac      	b.n	800178e <HAL_RCC_OscConfig+0x109a>
 8001634:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001638:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 800163c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001640:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001642:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001646:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	fa93 f2a3 	rbit	r2, r3
 8001650:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001654:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8001658:	601a      	str	r2, [r3, #0]
  return result;
 800165a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800165e:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8001662:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001664:	fab3 f383 	clz	r3, r3
 8001668:	b2db      	uxtb	r3, r3
 800166a:	095b      	lsrs	r3, r3, #5
 800166c:	b2db      	uxtb	r3, r3
 800166e:	f043 0301 	orr.w	r3, r3, #1
 8001672:	b2db      	uxtb	r3, r3
 8001674:	2b01      	cmp	r3, #1
 8001676:	d102      	bne.n	800167e <HAL_RCC_OscConfig+0xf8a>
 8001678:	4b47      	ldr	r3, [pc, #284]	; (8001798 <HAL_RCC_OscConfig+0x10a4>)
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	e027      	b.n	80016ce <HAL_RCC_OscConfig+0xfda>
 800167e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001682:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8001686:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800168a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800168c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001690:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	fa93 f2a3 	rbit	r2, r3
 800169a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800169e:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 80016a2:	601a      	str	r2, [r3, #0]
 80016a4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80016a8:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 80016ac:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80016b0:	601a      	str	r2, [r3, #0]
 80016b2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80016b6:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	fa93 f2a3 	rbit	r2, r3
 80016c0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80016c4:	f5a3 73f8 	sub.w	r3, r3, #496	; 0x1f0
 80016c8:	601a      	str	r2, [r3, #0]
 80016ca:	4b33      	ldr	r3, [pc, #204]	; (8001798 <HAL_RCC_OscConfig+0x10a4>)
 80016cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016ce:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80016d2:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 80016d6:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80016da:	6011      	str	r1, [r2, #0]
 80016dc:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80016e0:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 80016e4:	6812      	ldr	r2, [r2, #0]
 80016e6:	fa92 f1a2 	rbit	r1, r2
 80016ea:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80016ee:	f5a2 72fc 	sub.w	r2, r2, #504	; 0x1f8
 80016f2:	6011      	str	r1, [r2, #0]
  return result;
 80016f4:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80016f8:	f5a2 72fc 	sub.w	r2, r2, #504	; 0x1f8
 80016fc:	6812      	ldr	r2, [r2, #0]
 80016fe:	fab2 f282 	clz	r2, r2
 8001702:	b2d2      	uxtb	r2, r2
 8001704:	f042 0220 	orr.w	r2, r2, #32
 8001708:	b2d2      	uxtb	r2, r2
 800170a:	f002 021f 	and.w	r2, r2, #31
 800170e:	2101      	movs	r1, #1
 8001710:	fa01 f202 	lsl.w	r2, r1, r2
 8001714:	4013      	ands	r3, r2
 8001716:	2b00      	cmp	r3, #0
 8001718:	d182      	bne.n	8001620 <HAL_RCC_OscConfig+0xf2c>
 800171a:	e037      	b.n	800178c <HAL_RCC_OscConfig+0x1098>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800171c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001720:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	699b      	ldr	r3, [r3, #24]
 8001728:	2b01      	cmp	r3, #1
 800172a:	d101      	bne.n	8001730 <HAL_RCC_OscConfig+0x103c>
      {
        return HAL_ERROR;
 800172c:	2301      	movs	r3, #1
 800172e:	e02e      	b.n	800178e <HAL_RCC_OscConfig+0x109a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001730:	4b19      	ldr	r3, [pc, #100]	; (8001798 <HAL_RCC_OscConfig+0x10a4>)
 8001732:	685b      	ldr	r3, [r3, #4]
 8001734:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 8001738:	4b17      	ldr	r3, [pc, #92]	; (8001798 <HAL_RCC_OscConfig+0x10a4>)
 800173a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800173c:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001740:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8001744:	f403 32c0 	and.w	r2, r3, #98304	; 0x18000
 8001748:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800174c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	69db      	ldr	r3, [r3, #28]
 8001754:	429a      	cmp	r2, r3
 8001756:	d117      	bne.n	8001788 <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8001758:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800175c:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001760:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001764:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800176c:	429a      	cmp	r2, r3
 800176e:	d10b      	bne.n	8001788 <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 8001770:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001774:	f003 020f 	and.w	r2, r3, #15
 8001778:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800177c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	6a5b      	ldr	r3, [r3, #36]	; 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8001784:	429a      	cmp	r2, r3
 8001786:	d001      	beq.n	800178c <HAL_RCC_OscConfig+0x1098>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 8001788:	2301      	movs	r3, #1
 800178a:	e000      	b.n	800178e <HAL_RCC_OscConfig+0x109a>
        }
      }
    }
  }

  return HAL_OK;
 800178c:	2300      	movs	r3, #0
}
 800178e:	4618      	mov	r0, r3
 8001790:	f507 7702 	add.w	r7, r7, #520	; 0x208
 8001794:	46bd      	mov	sp, r7
 8001796:	bd80      	pop	{r7, pc}
 8001798:	40021000 	.word	0x40021000

0800179c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800179c:	b580      	push	{r7, lr}
 800179e:	b09e      	sub	sp, #120	; 0x78
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	6078      	str	r0, [r7, #4]
 80017a4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80017a6:	2300      	movs	r3, #0
 80017a8:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d101      	bne.n	80017b4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80017b0:	2301      	movs	r3, #1
 80017b2:	e162      	b.n	8001a7a <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80017b4:	4b90      	ldr	r3, [pc, #576]	; (80019f8 <HAL_RCC_ClockConfig+0x25c>)
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	f003 0307 	and.w	r3, r3, #7
 80017bc:	683a      	ldr	r2, [r7, #0]
 80017be:	429a      	cmp	r2, r3
 80017c0:	d910      	bls.n	80017e4 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80017c2:	4b8d      	ldr	r3, [pc, #564]	; (80019f8 <HAL_RCC_ClockConfig+0x25c>)
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	f023 0207 	bic.w	r2, r3, #7
 80017ca:	498b      	ldr	r1, [pc, #556]	; (80019f8 <HAL_RCC_ClockConfig+0x25c>)
 80017cc:	683b      	ldr	r3, [r7, #0]
 80017ce:	4313      	orrs	r3, r2
 80017d0:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80017d2:	4b89      	ldr	r3, [pc, #548]	; (80019f8 <HAL_RCC_ClockConfig+0x25c>)
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	f003 0307 	and.w	r3, r3, #7
 80017da:	683a      	ldr	r2, [r7, #0]
 80017dc:	429a      	cmp	r2, r3
 80017de:	d001      	beq.n	80017e4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80017e0:	2301      	movs	r3, #1
 80017e2:	e14a      	b.n	8001a7a <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	f003 0302 	and.w	r3, r3, #2
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d008      	beq.n	8001802 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80017f0:	4b82      	ldr	r3, [pc, #520]	; (80019fc <HAL_RCC_ClockConfig+0x260>)
 80017f2:	685b      	ldr	r3, [r3, #4]
 80017f4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	689b      	ldr	r3, [r3, #8]
 80017fc:	497f      	ldr	r1, [pc, #508]	; (80019fc <HAL_RCC_ClockConfig+0x260>)
 80017fe:	4313      	orrs	r3, r2
 8001800:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	f003 0301 	and.w	r3, r3, #1
 800180a:	2b00      	cmp	r3, #0
 800180c:	f000 80dc 	beq.w	80019c8 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	685b      	ldr	r3, [r3, #4]
 8001814:	2b01      	cmp	r3, #1
 8001816:	d13c      	bne.n	8001892 <HAL_RCC_ClockConfig+0xf6>
 8001818:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800181c:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800181e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001820:	fa93 f3a3 	rbit	r3, r3
 8001824:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8001826:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001828:	fab3 f383 	clz	r3, r3
 800182c:	b2db      	uxtb	r3, r3
 800182e:	095b      	lsrs	r3, r3, #5
 8001830:	b2db      	uxtb	r3, r3
 8001832:	f043 0301 	orr.w	r3, r3, #1
 8001836:	b2db      	uxtb	r3, r3
 8001838:	2b01      	cmp	r3, #1
 800183a:	d102      	bne.n	8001842 <HAL_RCC_ClockConfig+0xa6>
 800183c:	4b6f      	ldr	r3, [pc, #444]	; (80019fc <HAL_RCC_ClockConfig+0x260>)
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	e00f      	b.n	8001862 <HAL_RCC_ClockConfig+0xc6>
 8001842:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001846:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001848:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800184a:	fa93 f3a3 	rbit	r3, r3
 800184e:	667b      	str	r3, [r7, #100]	; 0x64
 8001850:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001854:	663b      	str	r3, [r7, #96]	; 0x60
 8001856:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001858:	fa93 f3a3 	rbit	r3, r3
 800185c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800185e:	4b67      	ldr	r3, [pc, #412]	; (80019fc <HAL_RCC_ClockConfig+0x260>)
 8001860:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001862:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001866:	65ba      	str	r2, [r7, #88]	; 0x58
 8001868:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800186a:	fa92 f2a2 	rbit	r2, r2
 800186e:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8001870:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001872:	fab2 f282 	clz	r2, r2
 8001876:	b2d2      	uxtb	r2, r2
 8001878:	f042 0220 	orr.w	r2, r2, #32
 800187c:	b2d2      	uxtb	r2, r2
 800187e:	f002 021f 	and.w	r2, r2, #31
 8001882:	2101      	movs	r1, #1
 8001884:	fa01 f202 	lsl.w	r2, r1, r2
 8001888:	4013      	ands	r3, r2
 800188a:	2b00      	cmp	r3, #0
 800188c:	d17b      	bne.n	8001986 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800188e:	2301      	movs	r3, #1
 8001890:	e0f3      	b.n	8001a7a <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	685b      	ldr	r3, [r3, #4]
 8001896:	2b02      	cmp	r3, #2
 8001898:	d13c      	bne.n	8001914 <HAL_RCC_ClockConfig+0x178>
 800189a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800189e:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018a0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80018a2:	fa93 f3a3 	rbit	r3, r3
 80018a6:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80018a8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80018aa:	fab3 f383 	clz	r3, r3
 80018ae:	b2db      	uxtb	r3, r3
 80018b0:	095b      	lsrs	r3, r3, #5
 80018b2:	b2db      	uxtb	r3, r3
 80018b4:	f043 0301 	orr.w	r3, r3, #1
 80018b8:	b2db      	uxtb	r3, r3
 80018ba:	2b01      	cmp	r3, #1
 80018bc:	d102      	bne.n	80018c4 <HAL_RCC_ClockConfig+0x128>
 80018be:	4b4f      	ldr	r3, [pc, #316]	; (80019fc <HAL_RCC_ClockConfig+0x260>)
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	e00f      	b.n	80018e4 <HAL_RCC_ClockConfig+0x148>
 80018c4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80018c8:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018ca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80018cc:	fa93 f3a3 	rbit	r3, r3
 80018d0:	647b      	str	r3, [r7, #68]	; 0x44
 80018d2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80018d6:	643b      	str	r3, [r7, #64]	; 0x40
 80018d8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80018da:	fa93 f3a3 	rbit	r3, r3
 80018de:	63fb      	str	r3, [r7, #60]	; 0x3c
 80018e0:	4b46      	ldr	r3, [pc, #280]	; (80019fc <HAL_RCC_ClockConfig+0x260>)
 80018e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018e4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80018e8:	63ba      	str	r2, [r7, #56]	; 0x38
 80018ea:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80018ec:	fa92 f2a2 	rbit	r2, r2
 80018f0:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 80018f2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80018f4:	fab2 f282 	clz	r2, r2
 80018f8:	b2d2      	uxtb	r2, r2
 80018fa:	f042 0220 	orr.w	r2, r2, #32
 80018fe:	b2d2      	uxtb	r2, r2
 8001900:	f002 021f 	and.w	r2, r2, #31
 8001904:	2101      	movs	r1, #1
 8001906:	fa01 f202 	lsl.w	r2, r1, r2
 800190a:	4013      	ands	r3, r2
 800190c:	2b00      	cmp	r3, #0
 800190e:	d13a      	bne.n	8001986 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001910:	2301      	movs	r3, #1
 8001912:	e0b2      	b.n	8001a7a <HAL_RCC_ClockConfig+0x2de>
 8001914:	2302      	movs	r3, #2
 8001916:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001918:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800191a:	fa93 f3a3 	rbit	r3, r3
 800191e:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8001920:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001922:	fab3 f383 	clz	r3, r3
 8001926:	b2db      	uxtb	r3, r3
 8001928:	095b      	lsrs	r3, r3, #5
 800192a:	b2db      	uxtb	r3, r3
 800192c:	f043 0301 	orr.w	r3, r3, #1
 8001930:	b2db      	uxtb	r3, r3
 8001932:	2b01      	cmp	r3, #1
 8001934:	d102      	bne.n	800193c <HAL_RCC_ClockConfig+0x1a0>
 8001936:	4b31      	ldr	r3, [pc, #196]	; (80019fc <HAL_RCC_ClockConfig+0x260>)
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	e00d      	b.n	8001958 <HAL_RCC_ClockConfig+0x1bc>
 800193c:	2302      	movs	r3, #2
 800193e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001940:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001942:	fa93 f3a3 	rbit	r3, r3
 8001946:	627b      	str	r3, [r7, #36]	; 0x24
 8001948:	2302      	movs	r3, #2
 800194a:	623b      	str	r3, [r7, #32]
 800194c:	6a3b      	ldr	r3, [r7, #32]
 800194e:	fa93 f3a3 	rbit	r3, r3
 8001952:	61fb      	str	r3, [r7, #28]
 8001954:	4b29      	ldr	r3, [pc, #164]	; (80019fc <HAL_RCC_ClockConfig+0x260>)
 8001956:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001958:	2202      	movs	r2, #2
 800195a:	61ba      	str	r2, [r7, #24]
 800195c:	69ba      	ldr	r2, [r7, #24]
 800195e:	fa92 f2a2 	rbit	r2, r2
 8001962:	617a      	str	r2, [r7, #20]
  return result;
 8001964:	697a      	ldr	r2, [r7, #20]
 8001966:	fab2 f282 	clz	r2, r2
 800196a:	b2d2      	uxtb	r2, r2
 800196c:	f042 0220 	orr.w	r2, r2, #32
 8001970:	b2d2      	uxtb	r2, r2
 8001972:	f002 021f 	and.w	r2, r2, #31
 8001976:	2101      	movs	r1, #1
 8001978:	fa01 f202 	lsl.w	r2, r1, r2
 800197c:	4013      	ands	r3, r2
 800197e:	2b00      	cmp	r3, #0
 8001980:	d101      	bne.n	8001986 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001982:	2301      	movs	r3, #1
 8001984:	e079      	b.n	8001a7a <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001986:	4b1d      	ldr	r3, [pc, #116]	; (80019fc <HAL_RCC_ClockConfig+0x260>)
 8001988:	685b      	ldr	r3, [r3, #4]
 800198a:	f023 0203 	bic.w	r2, r3, #3
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	685b      	ldr	r3, [r3, #4]
 8001992:	491a      	ldr	r1, [pc, #104]	; (80019fc <HAL_RCC_ClockConfig+0x260>)
 8001994:	4313      	orrs	r3, r2
 8001996:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001998:	f7fe fc60 	bl	800025c <HAL_GetTick>
 800199c:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800199e:	e00a      	b.n	80019b6 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80019a0:	f7fe fc5c 	bl	800025c <HAL_GetTick>
 80019a4:	4602      	mov	r2, r0
 80019a6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80019a8:	1ad3      	subs	r3, r2, r3
 80019aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80019ae:	4293      	cmp	r3, r2
 80019b0:	d901      	bls.n	80019b6 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 80019b2:	2303      	movs	r3, #3
 80019b4:	e061      	b.n	8001a7a <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80019b6:	4b11      	ldr	r3, [pc, #68]	; (80019fc <HAL_RCC_ClockConfig+0x260>)
 80019b8:	685b      	ldr	r3, [r3, #4]
 80019ba:	f003 020c 	and.w	r2, r3, #12
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	685b      	ldr	r3, [r3, #4]
 80019c2:	009b      	lsls	r3, r3, #2
 80019c4:	429a      	cmp	r2, r3
 80019c6:	d1eb      	bne.n	80019a0 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80019c8:	4b0b      	ldr	r3, [pc, #44]	; (80019f8 <HAL_RCC_ClockConfig+0x25c>)
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	f003 0307 	and.w	r3, r3, #7
 80019d0:	683a      	ldr	r2, [r7, #0]
 80019d2:	429a      	cmp	r2, r3
 80019d4:	d214      	bcs.n	8001a00 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80019d6:	4b08      	ldr	r3, [pc, #32]	; (80019f8 <HAL_RCC_ClockConfig+0x25c>)
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	f023 0207 	bic.w	r2, r3, #7
 80019de:	4906      	ldr	r1, [pc, #24]	; (80019f8 <HAL_RCC_ClockConfig+0x25c>)
 80019e0:	683b      	ldr	r3, [r7, #0]
 80019e2:	4313      	orrs	r3, r2
 80019e4:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80019e6:	4b04      	ldr	r3, [pc, #16]	; (80019f8 <HAL_RCC_ClockConfig+0x25c>)
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	f003 0307 	and.w	r3, r3, #7
 80019ee:	683a      	ldr	r2, [r7, #0]
 80019f0:	429a      	cmp	r2, r3
 80019f2:	d005      	beq.n	8001a00 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 80019f4:	2301      	movs	r3, #1
 80019f6:	e040      	b.n	8001a7a <HAL_RCC_ClockConfig+0x2de>
 80019f8:	40022000 	.word	0x40022000
 80019fc:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	f003 0304 	and.w	r3, r3, #4
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d008      	beq.n	8001a1e <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001a0c:	4b1d      	ldr	r3, [pc, #116]	; (8001a84 <HAL_RCC_ClockConfig+0x2e8>)
 8001a0e:	685b      	ldr	r3, [r3, #4]
 8001a10:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	68db      	ldr	r3, [r3, #12]
 8001a18:	491a      	ldr	r1, [pc, #104]	; (8001a84 <HAL_RCC_ClockConfig+0x2e8>)
 8001a1a:	4313      	orrs	r3, r2
 8001a1c:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	f003 0308 	and.w	r3, r3, #8
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d009      	beq.n	8001a3e <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001a2a:	4b16      	ldr	r3, [pc, #88]	; (8001a84 <HAL_RCC_ClockConfig+0x2e8>)
 8001a2c:	685b      	ldr	r3, [r3, #4]
 8001a2e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	691b      	ldr	r3, [r3, #16]
 8001a36:	00db      	lsls	r3, r3, #3
 8001a38:	4912      	ldr	r1, [pc, #72]	; (8001a84 <HAL_RCC_ClockConfig+0x2e8>)
 8001a3a:	4313      	orrs	r3, r2
 8001a3c:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8001a3e:	f000 f829 	bl	8001a94 <HAL_RCC_GetSysClockFreq>
 8001a42:	4601      	mov	r1, r0
 8001a44:	4b0f      	ldr	r3, [pc, #60]	; (8001a84 <HAL_RCC_ClockConfig+0x2e8>)
 8001a46:	685b      	ldr	r3, [r3, #4]
 8001a48:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001a4c:	22f0      	movs	r2, #240	; 0xf0
 8001a4e:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a50:	693a      	ldr	r2, [r7, #16]
 8001a52:	fa92 f2a2 	rbit	r2, r2
 8001a56:	60fa      	str	r2, [r7, #12]
  return result;
 8001a58:	68fa      	ldr	r2, [r7, #12]
 8001a5a:	fab2 f282 	clz	r2, r2
 8001a5e:	b2d2      	uxtb	r2, r2
 8001a60:	40d3      	lsrs	r3, r2
 8001a62:	4a09      	ldr	r2, [pc, #36]	; (8001a88 <HAL_RCC_ClockConfig+0x2ec>)
 8001a64:	5cd3      	ldrb	r3, [r2, r3]
 8001a66:	fa21 f303 	lsr.w	r3, r1, r3
 8001a6a:	4a08      	ldr	r2, [pc, #32]	; (8001a8c <HAL_RCC_ClockConfig+0x2f0>)
 8001a6c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8001a6e:	4b08      	ldr	r3, [pc, #32]	; (8001a90 <HAL_RCC_ClockConfig+0x2f4>)
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	4618      	mov	r0, r3
 8001a74:	f7fe fbae 	bl	80001d4 <HAL_InitTick>
  
  return HAL_OK;
 8001a78:	2300      	movs	r3, #0
}
 8001a7a:	4618      	mov	r0, r3
 8001a7c:	3778      	adds	r7, #120	; 0x78
 8001a7e:	46bd      	mov	sp, r7
 8001a80:	bd80      	pop	{r7, pc}
 8001a82:	bf00      	nop
 8001a84:	40021000 	.word	0x40021000
 8001a88:	08002d30 	.word	0x08002d30
 8001a8c:	20000008 	.word	0x20000008
 8001a90:	20000000 	.word	0x20000000

08001a94 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001a94:	b480      	push	{r7}
 8001a96:	b08b      	sub	sp, #44	; 0x2c
 8001a98:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001a9a:	2300      	movs	r3, #0
 8001a9c:	61fb      	str	r3, [r7, #28]
 8001a9e:	2300      	movs	r3, #0
 8001aa0:	61bb      	str	r3, [r7, #24]
 8001aa2:	2300      	movs	r3, #0
 8001aa4:	627b      	str	r3, [r7, #36]	; 0x24
 8001aa6:	2300      	movs	r3, #0
 8001aa8:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001aaa:	2300      	movs	r3, #0
 8001aac:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8001aae:	4b2a      	ldr	r3, [pc, #168]	; (8001b58 <HAL_RCC_GetSysClockFreq+0xc4>)
 8001ab0:	685b      	ldr	r3, [r3, #4]
 8001ab2:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001ab4:	69fb      	ldr	r3, [r7, #28]
 8001ab6:	f003 030c 	and.w	r3, r3, #12
 8001aba:	2b04      	cmp	r3, #4
 8001abc:	d002      	beq.n	8001ac4 <HAL_RCC_GetSysClockFreq+0x30>
 8001abe:	2b08      	cmp	r3, #8
 8001ac0:	d003      	beq.n	8001aca <HAL_RCC_GetSysClockFreq+0x36>
 8001ac2:	e03f      	b.n	8001b44 <HAL_RCC_GetSysClockFreq+0xb0>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001ac4:	4b25      	ldr	r3, [pc, #148]	; (8001b5c <HAL_RCC_GetSysClockFreq+0xc8>)
 8001ac6:	623b      	str	r3, [r7, #32]
      break;
 8001ac8:	e03f      	b.n	8001b4a <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8001aca:	69fb      	ldr	r3, [r7, #28]
 8001acc:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8001ad0:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8001ad4:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ad6:	68ba      	ldr	r2, [r7, #8]
 8001ad8:	fa92 f2a2 	rbit	r2, r2
 8001adc:	607a      	str	r2, [r7, #4]
  return result;
 8001ade:	687a      	ldr	r2, [r7, #4]
 8001ae0:	fab2 f282 	clz	r2, r2
 8001ae4:	b2d2      	uxtb	r2, r2
 8001ae6:	40d3      	lsrs	r3, r2
 8001ae8:	4a1d      	ldr	r2, [pc, #116]	; (8001b60 <HAL_RCC_GetSysClockFreq+0xcc>)
 8001aea:	5cd3      	ldrb	r3, [r2, r3]
 8001aec:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8001aee:	4b1a      	ldr	r3, [pc, #104]	; (8001b58 <HAL_RCC_GetSysClockFreq+0xc4>)
 8001af0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001af2:	f003 030f 	and.w	r3, r3, #15
 8001af6:	220f      	movs	r2, #15
 8001af8:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001afa:	693a      	ldr	r2, [r7, #16]
 8001afc:	fa92 f2a2 	rbit	r2, r2
 8001b00:	60fa      	str	r2, [r7, #12]
  return result;
 8001b02:	68fa      	ldr	r2, [r7, #12]
 8001b04:	fab2 f282 	clz	r2, r2
 8001b08:	b2d2      	uxtb	r2, r2
 8001b0a:	40d3      	lsrs	r3, r2
 8001b0c:	4a15      	ldr	r2, [pc, #84]	; (8001b64 <HAL_RCC_GetSysClockFreq+0xd0>)
 8001b0e:	5cd3      	ldrb	r3, [r2, r3]
 8001b10:	61bb      	str	r3, [r7, #24]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 8001b12:	69fb      	ldr	r3, [r7, #28]
 8001b14:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d008      	beq.n	8001b2e <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001b1c:	4a0f      	ldr	r2, [pc, #60]	; (8001b5c <HAL_RCC_GetSysClockFreq+0xc8>)
 8001b1e:	69bb      	ldr	r3, [r7, #24]
 8001b20:	fbb2 f2f3 	udiv	r2, r2, r3
 8001b24:	697b      	ldr	r3, [r7, #20]
 8001b26:	fb02 f303 	mul.w	r3, r2, r3
 8001b2a:	627b      	str	r3, [r7, #36]	; 0x24
 8001b2c:	e007      	b.n	8001b3e <HAL_RCC_GetSysClockFreq+0xaa>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001b2e:	4a0b      	ldr	r2, [pc, #44]	; (8001b5c <HAL_RCC_GetSysClockFreq+0xc8>)
 8001b30:	69bb      	ldr	r3, [r7, #24]
 8001b32:	fbb2 f2f3 	udiv	r2, r2, r3
 8001b36:	697b      	ldr	r3, [r7, #20]
 8001b38:	fb02 f303 	mul.w	r3, r2, r3
 8001b3c:	627b      	str	r3, [r7, #36]	; 0x24
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8001b3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b40:	623b      	str	r3, [r7, #32]
      break;
 8001b42:	e002      	b.n	8001b4a <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001b44:	4b05      	ldr	r3, [pc, #20]	; (8001b5c <HAL_RCC_GetSysClockFreq+0xc8>)
 8001b46:	623b      	str	r3, [r7, #32]
      break;
 8001b48:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001b4a:	6a3b      	ldr	r3, [r7, #32]
}
 8001b4c:	4618      	mov	r0, r3
 8001b4e:	372c      	adds	r7, #44	; 0x2c
 8001b50:	46bd      	mov	sp, r7
 8001b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b56:	4770      	bx	lr
 8001b58:	40021000 	.word	0x40021000
 8001b5c:	007a1200 	.word	0x007a1200
 8001b60:	08002d10 	.word	0x08002d10
 8001b64:	08002d20 	.word	0x08002d20

08001b68 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001b68:	b480      	push	{r7}
 8001b6a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001b6c:	4b03      	ldr	r3, [pc, #12]	; (8001b7c <HAL_RCC_GetHCLKFreq+0x14>)
 8001b6e:	681b      	ldr	r3, [r3, #0]
}
 8001b70:	4618      	mov	r0, r3
 8001b72:	46bd      	mov	sp, r7
 8001b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b78:	4770      	bx	lr
 8001b7a:	bf00      	nop
 8001b7c:	20000008 	.word	0x20000008

08001b80 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001b80:	b580      	push	{r7, lr}
 8001b82:	b082      	sub	sp, #8
 8001b84:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8001b86:	f7ff ffef 	bl	8001b68 <HAL_RCC_GetHCLKFreq>
 8001b8a:	4601      	mov	r1, r0
 8001b8c:	4b0b      	ldr	r3, [pc, #44]	; (8001bbc <HAL_RCC_GetPCLK1Freq+0x3c>)
 8001b8e:	685b      	ldr	r3, [r3, #4]
 8001b90:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8001b94:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8001b98:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b9a:	687a      	ldr	r2, [r7, #4]
 8001b9c:	fa92 f2a2 	rbit	r2, r2
 8001ba0:	603a      	str	r2, [r7, #0]
  return result;
 8001ba2:	683a      	ldr	r2, [r7, #0]
 8001ba4:	fab2 f282 	clz	r2, r2
 8001ba8:	b2d2      	uxtb	r2, r2
 8001baa:	40d3      	lsrs	r3, r2
 8001bac:	4a04      	ldr	r2, [pc, #16]	; (8001bc0 <HAL_RCC_GetPCLK1Freq+0x40>)
 8001bae:	5cd3      	ldrb	r3, [r2, r3]
 8001bb0:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8001bb4:	4618      	mov	r0, r3
 8001bb6:	3708      	adds	r7, #8
 8001bb8:	46bd      	mov	sp, r7
 8001bba:	bd80      	pop	{r7, pc}
 8001bbc:	40021000 	.word	0x40021000
 8001bc0:	08002d40 	.word	0x08002d40

08001bc4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001bc4:	b580      	push	{r7, lr}
 8001bc6:	b082      	sub	sp, #8
 8001bc8:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8001bca:	f7ff ffcd 	bl	8001b68 <HAL_RCC_GetHCLKFreq>
 8001bce:	4601      	mov	r1, r0
 8001bd0:	4b0b      	ldr	r3, [pc, #44]	; (8001c00 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8001bd2:	685b      	ldr	r3, [r3, #4]
 8001bd4:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8001bd8:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8001bdc:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bde:	687a      	ldr	r2, [r7, #4]
 8001be0:	fa92 f2a2 	rbit	r2, r2
 8001be4:	603a      	str	r2, [r7, #0]
  return result;
 8001be6:	683a      	ldr	r2, [r7, #0]
 8001be8:	fab2 f282 	clz	r2, r2
 8001bec:	b2d2      	uxtb	r2, r2
 8001bee:	40d3      	lsrs	r3, r2
 8001bf0:	4a04      	ldr	r2, [pc, #16]	; (8001c04 <HAL_RCC_GetPCLK2Freq+0x40>)
 8001bf2:	5cd3      	ldrb	r3, [r2, r3]
 8001bf4:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8001bf8:	4618      	mov	r0, r3
 8001bfa:	3708      	adds	r7, #8
 8001bfc:	46bd      	mov	sp, r7
 8001bfe:	bd80      	pop	{r7, pc}
 8001c00:	40021000 	.word	0x40021000
 8001c04:	08002d40 	.word	0x08002d40

08001c08 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001c08:	b580      	push	{r7, lr}
 8001c0a:	b092      	sub	sp, #72	; 0x48
 8001c0c:	af00      	add	r7, sp, #0
 8001c0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001c10:	2300      	movs	r3, #0
 8001c12:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8001c14:	2300      	movs	r3, #0
 8001c16:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8001c18:	2300      	movs	r3, #0
 8001c1a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	f000 80d4 	beq.w	8001dd4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001c2c:	4b4e      	ldr	r3, [pc, #312]	; (8001d68 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001c2e:	69db      	ldr	r3, [r3, #28]
 8001c30:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d10e      	bne.n	8001c56 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001c38:	4b4b      	ldr	r3, [pc, #300]	; (8001d68 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001c3a:	69db      	ldr	r3, [r3, #28]
 8001c3c:	4a4a      	ldr	r2, [pc, #296]	; (8001d68 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001c3e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c42:	61d3      	str	r3, [r2, #28]
 8001c44:	4b48      	ldr	r3, [pc, #288]	; (8001d68 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001c46:	69db      	ldr	r3, [r3, #28]
 8001c48:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c4c:	60bb      	str	r3, [r7, #8]
 8001c4e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001c50:	2301      	movs	r3, #1
 8001c52:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c56:	4b45      	ldr	r3, [pc, #276]	; (8001d6c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d118      	bne.n	8001c94 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001c62:	4b42      	ldr	r3, [pc, #264]	; (8001d6c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	4a41      	ldr	r2, [pc, #260]	; (8001d6c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001c68:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c6c:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001c6e:	f7fe faf5 	bl	800025c <HAL_GetTick>
 8001c72:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c74:	e008      	b.n	8001c88 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001c76:	f7fe faf1 	bl	800025c <HAL_GetTick>
 8001c7a:	4602      	mov	r2, r0
 8001c7c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001c7e:	1ad3      	subs	r3, r2, r3
 8001c80:	2b64      	cmp	r3, #100	; 0x64
 8001c82:	d901      	bls.n	8001c88 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8001c84:	2303      	movs	r3, #3
 8001c86:	e1d6      	b.n	8002036 <HAL_RCCEx_PeriphCLKConfig+0x42e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c88:	4b38      	ldr	r3, [pc, #224]	; (8001d6c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d0f0      	beq.n	8001c76 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001c94:	4b34      	ldr	r3, [pc, #208]	; (8001d68 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001c96:	6a1b      	ldr	r3, [r3, #32]
 8001c98:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001c9c:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001c9e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	f000 8084 	beq.w	8001dae <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	685b      	ldr	r3, [r3, #4]
 8001caa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001cae:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001cb0:	429a      	cmp	r2, r3
 8001cb2:	d07c      	beq.n	8001dae <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001cb4:	4b2c      	ldr	r3, [pc, #176]	; (8001d68 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001cb6:	6a1b      	ldr	r3, [r3, #32]
 8001cb8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001cbc:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001cbe:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001cc2:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001cc6:	fa93 f3a3 	rbit	r3, r3
 8001cca:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8001ccc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001cce:	fab3 f383 	clz	r3, r3
 8001cd2:	b2db      	uxtb	r3, r3
 8001cd4:	461a      	mov	r2, r3
 8001cd6:	4b26      	ldr	r3, [pc, #152]	; (8001d70 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8001cd8:	4413      	add	r3, r2
 8001cda:	009b      	lsls	r3, r3, #2
 8001cdc:	461a      	mov	r2, r3
 8001cde:	2301      	movs	r3, #1
 8001ce0:	6013      	str	r3, [r2, #0]
 8001ce2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001ce6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ce8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001cea:	fa93 f3a3 	rbit	r3, r3
 8001cee:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8001cf0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001cf2:	fab3 f383 	clz	r3, r3
 8001cf6:	b2db      	uxtb	r3, r3
 8001cf8:	461a      	mov	r2, r3
 8001cfa:	4b1d      	ldr	r3, [pc, #116]	; (8001d70 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8001cfc:	4413      	add	r3, r2
 8001cfe:	009b      	lsls	r3, r3, #2
 8001d00:	461a      	mov	r2, r3
 8001d02:	2300      	movs	r3, #0
 8001d04:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8001d06:	4a18      	ldr	r2, [pc, #96]	; (8001d68 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001d08:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001d0a:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8001d0c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001d0e:	f003 0301 	and.w	r3, r3, #1
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d04b      	beq.n	8001dae <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d16:	f7fe faa1 	bl	800025c <HAL_GetTick>
 8001d1a:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d1c:	e00a      	b.n	8001d34 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d1e:	f7fe fa9d 	bl	800025c <HAL_GetTick>
 8001d22:	4602      	mov	r2, r0
 8001d24:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001d26:	1ad3      	subs	r3, r2, r3
 8001d28:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d2c:	4293      	cmp	r3, r2
 8001d2e:	d901      	bls.n	8001d34 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8001d30:	2303      	movs	r3, #3
 8001d32:	e180      	b.n	8002036 <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8001d34:	2302      	movs	r3, #2
 8001d36:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d3a:	fa93 f3a3 	rbit	r3, r3
 8001d3e:	627b      	str	r3, [r7, #36]	; 0x24
 8001d40:	2302      	movs	r3, #2
 8001d42:	623b      	str	r3, [r7, #32]
 8001d44:	6a3b      	ldr	r3, [r7, #32]
 8001d46:	fa93 f3a3 	rbit	r3, r3
 8001d4a:	61fb      	str	r3, [r7, #28]
  return result;
 8001d4c:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d4e:	fab3 f383 	clz	r3, r3
 8001d52:	b2db      	uxtb	r3, r3
 8001d54:	095b      	lsrs	r3, r3, #5
 8001d56:	b2db      	uxtb	r3, r3
 8001d58:	f043 0302 	orr.w	r3, r3, #2
 8001d5c:	b2db      	uxtb	r3, r3
 8001d5e:	2b02      	cmp	r3, #2
 8001d60:	d108      	bne.n	8001d74 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8001d62:	4b01      	ldr	r3, [pc, #4]	; (8001d68 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001d64:	6a1b      	ldr	r3, [r3, #32]
 8001d66:	e00d      	b.n	8001d84 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8001d68:	40021000 	.word	0x40021000
 8001d6c:	40007000 	.word	0x40007000
 8001d70:	10908100 	.word	0x10908100
 8001d74:	2302      	movs	r3, #2
 8001d76:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d78:	69bb      	ldr	r3, [r7, #24]
 8001d7a:	fa93 f3a3 	rbit	r3, r3
 8001d7e:	617b      	str	r3, [r7, #20]
 8001d80:	4b9a      	ldr	r3, [pc, #616]	; (8001fec <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8001d82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d84:	2202      	movs	r2, #2
 8001d86:	613a      	str	r2, [r7, #16]
 8001d88:	693a      	ldr	r2, [r7, #16]
 8001d8a:	fa92 f2a2 	rbit	r2, r2
 8001d8e:	60fa      	str	r2, [r7, #12]
  return result;
 8001d90:	68fa      	ldr	r2, [r7, #12]
 8001d92:	fab2 f282 	clz	r2, r2
 8001d96:	b2d2      	uxtb	r2, r2
 8001d98:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001d9c:	b2d2      	uxtb	r2, r2
 8001d9e:	f002 021f 	and.w	r2, r2, #31
 8001da2:	2101      	movs	r1, #1
 8001da4:	fa01 f202 	lsl.w	r2, r1, r2
 8001da8:	4013      	ands	r3, r2
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d0b7      	beq.n	8001d1e <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8001dae:	4b8f      	ldr	r3, [pc, #572]	; (8001fec <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8001db0:	6a1b      	ldr	r3, [r3, #32]
 8001db2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	685b      	ldr	r3, [r3, #4]
 8001dba:	498c      	ldr	r1, [pc, #560]	; (8001fec <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8001dbc:	4313      	orrs	r3, r2
 8001dbe:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001dc0:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8001dc4:	2b01      	cmp	r3, #1
 8001dc6:	d105      	bne.n	8001dd4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001dc8:	4b88      	ldr	r3, [pc, #544]	; (8001fec <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8001dca:	69db      	ldr	r3, [r3, #28]
 8001dcc:	4a87      	ldr	r2, [pc, #540]	; (8001fec <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8001dce:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001dd2:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	f003 0301 	and.w	r3, r3, #1
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d008      	beq.n	8001df2 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001de0:	4b82      	ldr	r3, [pc, #520]	; (8001fec <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8001de2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001de4:	f023 0203 	bic.w	r2, r3, #3
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	689b      	ldr	r3, [r3, #8]
 8001dec:	497f      	ldr	r1, [pc, #508]	; (8001fec <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8001dee:	4313      	orrs	r3, r2
 8001df0:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	f003 0302 	and.w	r3, r3, #2
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d008      	beq.n	8001e10 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001dfe:	4b7b      	ldr	r3, [pc, #492]	; (8001fec <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8001e00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e02:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	68db      	ldr	r3, [r3, #12]
 8001e0a:	4978      	ldr	r1, [pc, #480]	; (8001fec <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8001e0c:	4313      	orrs	r3, r2
 8001e0e:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	f003 0304 	and.w	r3, r3, #4
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d008      	beq.n	8001e2e <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8001e1c:	4b73      	ldr	r3, [pc, #460]	; (8001fec <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8001e1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e20:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	691b      	ldr	r3, [r3, #16]
 8001e28:	4970      	ldr	r1, [pc, #448]	; (8001fec <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8001e2a:	4313      	orrs	r3, r2
 8001e2c:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	f003 0320 	and.w	r3, r3, #32
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d008      	beq.n	8001e4c <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001e3a:	4b6c      	ldr	r3, [pc, #432]	; (8001fec <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8001e3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e3e:	f023 0210 	bic.w	r2, r3, #16
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	69db      	ldr	r3, [r3, #28]
 8001e46:	4969      	ldr	r1, [pc, #420]	; (8001fec <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8001e48:	4313      	orrs	r3, r2
 8001e4a:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d008      	beq.n	8001e6a <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8001e58:	4b64      	ldr	r3, [pc, #400]	; (8001fec <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8001e5a:	685b      	ldr	r3, [r3, #4]
 8001e5c:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e64:	4961      	ldr	r1, [pc, #388]	; (8001fec <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8001e66:	4313      	orrs	r3, r2
 8001e68:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d008      	beq.n	8001e88 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8001e76:	4b5d      	ldr	r3, [pc, #372]	; (8001fec <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8001e78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e7a:	f023 0220 	bic.w	r2, r3, #32
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	6a1b      	ldr	r3, [r3, #32]
 8001e82:	495a      	ldr	r1, [pc, #360]	; (8001fec <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8001e84:	4313      	orrs	r3, r2
 8001e86:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d008      	beq.n	8001ea6 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8001e94:	4b55      	ldr	r3, [pc, #340]	; (8001fec <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8001e96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e98:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ea0:	4952      	ldr	r1, [pc, #328]	; (8001fec <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8001ea2:	4313      	orrs	r3, r2
 8001ea4:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	f003 0308 	and.w	r3, r3, #8
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d008      	beq.n	8001ec4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8001eb2:	4b4e      	ldr	r3, [pc, #312]	; (8001fec <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8001eb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eb6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	695b      	ldr	r3, [r3, #20]
 8001ebe:	494b      	ldr	r1, [pc, #300]	; (8001fec <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8001ec0:	4313      	orrs	r3, r2
 8001ec2:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	f003 0310 	and.w	r3, r3, #16
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d008      	beq.n	8001ee2 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8001ed0:	4b46      	ldr	r3, [pc, #280]	; (8001fec <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8001ed2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ed4:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	699b      	ldr	r3, [r3, #24]
 8001edc:	4943      	ldr	r1, [pc, #268]	; (8001fec <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8001ede:	4313      	orrs	r3, r2
 8001ee0:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d008      	beq.n	8001f00 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8001eee:	4b3f      	ldr	r3, [pc, #252]	; (8001fec <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8001ef0:	685b      	ldr	r3, [r3, #4]
 8001ef2:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001efa:	493c      	ldr	r1, [pc, #240]	; (8001fec <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8001efc:	4313      	orrs	r3, r2
 8001efe:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d008      	beq.n	8001f1e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8001f0c:	4b37      	ldr	r3, [pc, #220]	; (8001fec <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8001f0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f10:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f18:	4934      	ldr	r1, [pc, #208]	; (8001fec <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8001f1a:	4313      	orrs	r3, r2
 8001f1c:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d008      	beq.n	8001f3c <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8001f2a:	4b30      	ldr	r3, [pc, #192]	; (8001fec <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8001f2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f2e:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f36:	492d      	ldr	r1, [pc, #180]	; (8001fec <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8001f38:	4313      	orrs	r3, r2
 8001f3a:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d008      	beq.n	8001f5a <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8001f48:	4b28      	ldr	r3, [pc, #160]	; (8001fec <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8001f4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f4c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f54:	4925      	ldr	r1, [pc, #148]	; (8001fec <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8001f56:	4313      	orrs	r3, r2
 8001f58:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d008      	beq.n	8001f78 <HAL_RCCEx_PeriphCLKConfig+0x370>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8001f66:	4b21      	ldr	r3, [pc, #132]	; (8001fec <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8001f68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f6a:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f72:	491e      	ldr	r1, [pc, #120]	; (8001fec <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8001f74:	4313      	orrs	r3, r2
 8001f76:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d008      	beq.n	8001f96 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 8001f84:	4b19      	ldr	r3, [pc, #100]	; (8001fec <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8001f86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f88:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f90:	4916      	ldr	r1, [pc, #88]	; (8001fec <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8001f92:	4313      	orrs	r3, r2
 8001f94:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d008      	beq.n	8001fb4 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 8001fa2:	4b12      	ldr	r3, [pc, #72]	; (8001fec <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8001fa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fa6:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001fae:	490f      	ldr	r1, [pc, #60]	; (8001fec <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8001fb0:	4313      	orrs	r3, r2
 8001fb2:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d008      	beq.n	8001fd2 <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8001fc0:	4b0a      	ldr	r3, [pc, #40]	; (8001fec <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8001fc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fc4:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fcc:	4907      	ldr	r1, [pc, #28]	; (8001fec <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8001fce:	4313      	orrs	r3, r2
 8001fd0:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d00c      	beq.n	8001ff8 <HAL_RCCEx_PeriphCLKConfig+0x3f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 8001fde:	4b03      	ldr	r3, [pc, #12]	; (8001fec <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8001fe0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fe2:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	e002      	b.n	8001ff0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 8001fea:	bf00      	nop
 8001fec:	40021000 	.word	0x40021000
 8001ff0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001ff2:	4913      	ldr	r1, [pc, #76]	; (8002040 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8001ff4:	4313      	orrs	r3, r2
 8001ff6:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002000:	2b00      	cmp	r3, #0
 8002002:	d008      	beq.n	8002016 <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8002004:	4b0e      	ldr	r3, [pc, #56]	; (8002040 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002006:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002008:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002010:	490b      	ldr	r1, [pc, #44]	; (8002040 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002012:	4313      	orrs	r3, r2
 8002014:	630b      	str	r3, [r1, #48]	; 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800201e:	2b00      	cmp	r3, #0
 8002020:	d008      	beq.n	8002034 <HAL_RCCEx_PeriphCLKConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 8002022:	4b07      	ldr	r3, [pc, #28]	; (8002040 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002024:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002026:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800202e:	4904      	ldr	r1, [pc, #16]	; (8002040 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002030:	4313      	orrs	r3, r2
 8002032:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8002034:	2300      	movs	r3, #0
}
 8002036:	4618      	mov	r0, r3
 8002038:	3748      	adds	r7, #72	; 0x48
 800203a:	46bd      	mov	sp, r7
 800203c:	bd80      	pop	{r7, pc}
 800203e:	bf00      	nop
 8002040:	40021000 	.word	0x40021000

08002044 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002044:	b580      	push	{r7, lr}
 8002046:	b082      	sub	sp, #8
 8002048:	af00      	add	r7, sp, #0
 800204a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	2b00      	cmp	r3, #0
 8002050:	d101      	bne.n	8002056 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002052:	2301      	movs	r3, #1
 8002054:	e042      	b.n	80020dc <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800205c:	2b00      	cmp	r3, #0
 800205e:	d106      	bne.n	800206e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	2200      	movs	r2, #0
 8002064:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002068:	6878      	ldr	r0, [r7, #4]
 800206a:	f000 f83b 	bl	80020e4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	2224      	movs	r2, #36	; 0x24
 8002072:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  __HAL_UART_DISABLE(huart);
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	681a      	ldr	r2, [r3, #0]
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	f022 0201 	bic.w	r2, r2, #1
 8002084:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002086:	6878      	ldr	r0, [r7, #4]
 8002088:	f000 f836 	bl	80020f8 <UART_SetConfig>
 800208c:	4603      	mov	r3, r0
 800208e:	2b01      	cmp	r3, #1
 8002090:	d101      	bne.n	8002096 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8002092:	2301      	movs	r3, #1
 8002094:	e022      	b.n	80020dc <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800209a:	2b00      	cmp	r3, #0
 800209c:	d002      	beq.n	80020a4 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800209e:	6878      	ldr	r0, [r7, #4]
 80020a0:	f000 f9fe 	bl	80024a0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	685a      	ldr	r2, [r3, #4]
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80020b2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	689a      	ldr	r2, [r3, #8]
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80020c2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	681a      	ldr	r2, [r3, #0]
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	f042 0201 	orr.w	r2, r2, #1
 80020d2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80020d4:	6878      	ldr	r0, [r7, #4]
 80020d6:	f000 fa85 	bl	80025e4 <UART_CheckIdleState>
 80020da:	4603      	mov	r3, r0
}
 80020dc:	4618      	mov	r0, r3
 80020de:	3708      	adds	r7, #8
 80020e0:	46bd      	mov	sp, r7
 80020e2:	bd80      	pop	{r7, pc}

080020e4 <HAL_UART_MspInit>:
  * @brief Initialize the UART MSP.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 80020e4:	b480      	push	{r7}
 80020e6:	b083      	sub	sp, #12
 80020e8:	af00      	add	r7, sp, #0
 80020ea:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_MspInit can be implemented in the user file
   */
}
 80020ec:	bf00      	nop
 80020ee:	370c      	adds	r7, #12
 80020f0:	46bd      	mov	sp, r7
 80020f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f6:	4770      	bx	lr

080020f8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80020f8:	b580      	push	{r7, lr}
 80020fa:	b088      	sub	sp, #32
 80020fc:	af00      	add	r7, sp, #0
 80020fe:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002100:	2300      	movs	r3, #0
 8002102:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	689a      	ldr	r2, [r3, #8]
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	691b      	ldr	r3, [r3, #16]
 800210c:	431a      	orrs	r2, r3
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	695b      	ldr	r3, [r3, #20]
 8002112:	431a      	orrs	r2, r3
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	69db      	ldr	r3, [r3, #28]
 8002118:	4313      	orrs	r3, r2
 800211a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	681a      	ldr	r2, [r3, #0]
 8002122:	4b92      	ldr	r3, [pc, #584]	; (800236c <UART_SetConfig+0x274>)
 8002124:	4013      	ands	r3, r2
 8002126:	687a      	ldr	r2, [r7, #4]
 8002128:	6812      	ldr	r2, [r2, #0]
 800212a:	6979      	ldr	r1, [r7, #20]
 800212c:	430b      	orrs	r3, r1
 800212e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	685b      	ldr	r3, [r3, #4]
 8002136:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	68da      	ldr	r2, [r3, #12]
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	430a      	orrs	r2, r1
 8002144:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	699b      	ldr	r3, [r3, #24]
 800214a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	6a1b      	ldr	r3, [r3, #32]
 8002150:	697a      	ldr	r2, [r7, #20]
 8002152:	4313      	orrs	r3, r2
 8002154:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	689b      	ldr	r3, [r3, #8]
 800215c:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	697a      	ldr	r2, [r7, #20]
 8002166:	430a      	orrs	r2, r1
 8002168:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	4a80      	ldr	r2, [pc, #512]	; (8002370 <UART_SetConfig+0x278>)
 8002170:	4293      	cmp	r3, r2
 8002172:	d120      	bne.n	80021b6 <UART_SetConfig+0xbe>
 8002174:	4b7f      	ldr	r3, [pc, #508]	; (8002374 <UART_SetConfig+0x27c>)
 8002176:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002178:	f003 0303 	and.w	r3, r3, #3
 800217c:	2b03      	cmp	r3, #3
 800217e:	d817      	bhi.n	80021b0 <UART_SetConfig+0xb8>
 8002180:	a201      	add	r2, pc, #4	; (adr r2, 8002188 <UART_SetConfig+0x90>)
 8002182:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002186:	bf00      	nop
 8002188:	08002199 	.word	0x08002199
 800218c:	080021a5 	.word	0x080021a5
 8002190:	080021ab 	.word	0x080021ab
 8002194:	0800219f 	.word	0x0800219f
 8002198:	2301      	movs	r3, #1
 800219a:	77fb      	strb	r3, [r7, #31]
 800219c:	e0b5      	b.n	800230a <UART_SetConfig+0x212>
 800219e:	2302      	movs	r3, #2
 80021a0:	77fb      	strb	r3, [r7, #31]
 80021a2:	e0b2      	b.n	800230a <UART_SetConfig+0x212>
 80021a4:	2304      	movs	r3, #4
 80021a6:	77fb      	strb	r3, [r7, #31]
 80021a8:	e0af      	b.n	800230a <UART_SetConfig+0x212>
 80021aa:	2308      	movs	r3, #8
 80021ac:	77fb      	strb	r3, [r7, #31]
 80021ae:	e0ac      	b.n	800230a <UART_SetConfig+0x212>
 80021b0:	2310      	movs	r3, #16
 80021b2:	77fb      	strb	r3, [r7, #31]
 80021b4:	e0a9      	b.n	800230a <UART_SetConfig+0x212>
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	4a6f      	ldr	r2, [pc, #444]	; (8002378 <UART_SetConfig+0x280>)
 80021bc:	4293      	cmp	r3, r2
 80021be:	d124      	bne.n	800220a <UART_SetConfig+0x112>
 80021c0:	4b6c      	ldr	r3, [pc, #432]	; (8002374 <UART_SetConfig+0x27c>)
 80021c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021c4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80021c8:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80021cc:	d011      	beq.n	80021f2 <UART_SetConfig+0xfa>
 80021ce:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80021d2:	d817      	bhi.n	8002204 <UART_SetConfig+0x10c>
 80021d4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80021d8:	d011      	beq.n	80021fe <UART_SetConfig+0x106>
 80021da:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80021de:	d811      	bhi.n	8002204 <UART_SetConfig+0x10c>
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d003      	beq.n	80021ec <UART_SetConfig+0xf4>
 80021e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80021e8:	d006      	beq.n	80021f8 <UART_SetConfig+0x100>
 80021ea:	e00b      	b.n	8002204 <UART_SetConfig+0x10c>
 80021ec:	2300      	movs	r3, #0
 80021ee:	77fb      	strb	r3, [r7, #31]
 80021f0:	e08b      	b.n	800230a <UART_SetConfig+0x212>
 80021f2:	2302      	movs	r3, #2
 80021f4:	77fb      	strb	r3, [r7, #31]
 80021f6:	e088      	b.n	800230a <UART_SetConfig+0x212>
 80021f8:	2304      	movs	r3, #4
 80021fa:	77fb      	strb	r3, [r7, #31]
 80021fc:	e085      	b.n	800230a <UART_SetConfig+0x212>
 80021fe:	2308      	movs	r3, #8
 8002200:	77fb      	strb	r3, [r7, #31]
 8002202:	e082      	b.n	800230a <UART_SetConfig+0x212>
 8002204:	2310      	movs	r3, #16
 8002206:	77fb      	strb	r3, [r7, #31]
 8002208:	e07f      	b.n	800230a <UART_SetConfig+0x212>
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	4a5b      	ldr	r2, [pc, #364]	; (800237c <UART_SetConfig+0x284>)
 8002210:	4293      	cmp	r3, r2
 8002212:	d124      	bne.n	800225e <UART_SetConfig+0x166>
 8002214:	4b57      	ldr	r3, [pc, #348]	; (8002374 <UART_SetConfig+0x27c>)
 8002216:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002218:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 800221c:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8002220:	d011      	beq.n	8002246 <UART_SetConfig+0x14e>
 8002222:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8002226:	d817      	bhi.n	8002258 <UART_SetConfig+0x160>
 8002228:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800222c:	d011      	beq.n	8002252 <UART_SetConfig+0x15a>
 800222e:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002232:	d811      	bhi.n	8002258 <UART_SetConfig+0x160>
 8002234:	2b00      	cmp	r3, #0
 8002236:	d003      	beq.n	8002240 <UART_SetConfig+0x148>
 8002238:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800223c:	d006      	beq.n	800224c <UART_SetConfig+0x154>
 800223e:	e00b      	b.n	8002258 <UART_SetConfig+0x160>
 8002240:	2300      	movs	r3, #0
 8002242:	77fb      	strb	r3, [r7, #31]
 8002244:	e061      	b.n	800230a <UART_SetConfig+0x212>
 8002246:	2302      	movs	r3, #2
 8002248:	77fb      	strb	r3, [r7, #31]
 800224a:	e05e      	b.n	800230a <UART_SetConfig+0x212>
 800224c:	2304      	movs	r3, #4
 800224e:	77fb      	strb	r3, [r7, #31]
 8002250:	e05b      	b.n	800230a <UART_SetConfig+0x212>
 8002252:	2308      	movs	r3, #8
 8002254:	77fb      	strb	r3, [r7, #31]
 8002256:	e058      	b.n	800230a <UART_SetConfig+0x212>
 8002258:	2310      	movs	r3, #16
 800225a:	77fb      	strb	r3, [r7, #31]
 800225c:	e055      	b.n	800230a <UART_SetConfig+0x212>
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	4a47      	ldr	r2, [pc, #284]	; (8002380 <UART_SetConfig+0x288>)
 8002264:	4293      	cmp	r3, r2
 8002266:	d124      	bne.n	80022b2 <UART_SetConfig+0x1ba>
 8002268:	4b42      	ldr	r3, [pc, #264]	; (8002374 <UART_SetConfig+0x27c>)
 800226a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800226c:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8002270:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8002274:	d011      	beq.n	800229a <UART_SetConfig+0x1a2>
 8002276:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800227a:	d817      	bhi.n	80022ac <UART_SetConfig+0x1b4>
 800227c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002280:	d011      	beq.n	80022a6 <UART_SetConfig+0x1ae>
 8002282:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002286:	d811      	bhi.n	80022ac <UART_SetConfig+0x1b4>
 8002288:	2b00      	cmp	r3, #0
 800228a:	d003      	beq.n	8002294 <UART_SetConfig+0x19c>
 800228c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002290:	d006      	beq.n	80022a0 <UART_SetConfig+0x1a8>
 8002292:	e00b      	b.n	80022ac <UART_SetConfig+0x1b4>
 8002294:	2300      	movs	r3, #0
 8002296:	77fb      	strb	r3, [r7, #31]
 8002298:	e037      	b.n	800230a <UART_SetConfig+0x212>
 800229a:	2302      	movs	r3, #2
 800229c:	77fb      	strb	r3, [r7, #31]
 800229e:	e034      	b.n	800230a <UART_SetConfig+0x212>
 80022a0:	2304      	movs	r3, #4
 80022a2:	77fb      	strb	r3, [r7, #31]
 80022a4:	e031      	b.n	800230a <UART_SetConfig+0x212>
 80022a6:	2308      	movs	r3, #8
 80022a8:	77fb      	strb	r3, [r7, #31]
 80022aa:	e02e      	b.n	800230a <UART_SetConfig+0x212>
 80022ac:	2310      	movs	r3, #16
 80022ae:	77fb      	strb	r3, [r7, #31]
 80022b0:	e02b      	b.n	800230a <UART_SetConfig+0x212>
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	4a33      	ldr	r2, [pc, #204]	; (8002384 <UART_SetConfig+0x28c>)
 80022b8:	4293      	cmp	r3, r2
 80022ba:	d124      	bne.n	8002306 <UART_SetConfig+0x20e>
 80022bc:	4b2d      	ldr	r3, [pc, #180]	; (8002374 <UART_SetConfig+0x27c>)
 80022be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022c0:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 80022c4:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80022c8:	d011      	beq.n	80022ee <UART_SetConfig+0x1f6>
 80022ca:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80022ce:	d817      	bhi.n	8002300 <UART_SetConfig+0x208>
 80022d0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80022d4:	d011      	beq.n	80022fa <UART_SetConfig+0x202>
 80022d6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80022da:	d811      	bhi.n	8002300 <UART_SetConfig+0x208>
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d003      	beq.n	80022e8 <UART_SetConfig+0x1f0>
 80022e0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80022e4:	d006      	beq.n	80022f4 <UART_SetConfig+0x1fc>
 80022e6:	e00b      	b.n	8002300 <UART_SetConfig+0x208>
 80022e8:	2300      	movs	r3, #0
 80022ea:	77fb      	strb	r3, [r7, #31]
 80022ec:	e00d      	b.n	800230a <UART_SetConfig+0x212>
 80022ee:	2302      	movs	r3, #2
 80022f0:	77fb      	strb	r3, [r7, #31]
 80022f2:	e00a      	b.n	800230a <UART_SetConfig+0x212>
 80022f4:	2304      	movs	r3, #4
 80022f6:	77fb      	strb	r3, [r7, #31]
 80022f8:	e007      	b.n	800230a <UART_SetConfig+0x212>
 80022fa:	2308      	movs	r3, #8
 80022fc:	77fb      	strb	r3, [r7, #31]
 80022fe:	e004      	b.n	800230a <UART_SetConfig+0x212>
 8002300:	2310      	movs	r3, #16
 8002302:	77fb      	strb	r3, [r7, #31]
 8002304:	e001      	b.n	800230a <UART_SetConfig+0x212>
 8002306:	2310      	movs	r3, #16
 8002308:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	69db      	ldr	r3, [r3, #28]
 800230e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002312:	d16b      	bne.n	80023ec <UART_SetConfig+0x2f4>
  {
    switch (clocksource)
 8002314:	7ffb      	ldrb	r3, [r7, #31]
 8002316:	2b08      	cmp	r3, #8
 8002318:	d838      	bhi.n	800238c <UART_SetConfig+0x294>
 800231a:	a201      	add	r2, pc, #4	; (adr r2, 8002320 <UART_SetConfig+0x228>)
 800231c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002320:	08002345 	.word	0x08002345
 8002324:	0800234d 	.word	0x0800234d
 8002328:	08002355 	.word	0x08002355
 800232c:	0800238d 	.word	0x0800238d
 8002330:	0800235b 	.word	0x0800235b
 8002334:	0800238d 	.word	0x0800238d
 8002338:	0800238d 	.word	0x0800238d
 800233c:	0800238d 	.word	0x0800238d
 8002340:	08002363 	.word	0x08002363
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002344:	f7ff fc1c 	bl	8001b80 <HAL_RCC_GetPCLK1Freq>
 8002348:	61b8      	str	r0, [r7, #24]
        break;
 800234a:	e024      	b.n	8002396 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800234c:	f7ff fc3a 	bl	8001bc4 <HAL_RCC_GetPCLK2Freq>
 8002350:	61b8      	str	r0, [r7, #24]
        break;
 8002352:	e020      	b.n	8002396 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002354:	4b0c      	ldr	r3, [pc, #48]	; (8002388 <UART_SetConfig+0x290>)
 8002356:	61bb      	str	r3, [r7, #24]
        break;
 8002358:	e01d      	b.n	8002396 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800235a:	f7ff fb9b 	bl	8001a94 <HAL_RCC_GetSysClockFreq>
 800235e:	61b8      	str	r0, [r7, #24]
        break;
 8002360:	e019      	b.n	8002396 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002362:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002366:	61bb      	str	r3, [r7, #24]
        break;
 8002368:	e015      	b.n	8002396 <UART_SetConfig+0x29e>
 800236a:	bf00      	nop
 800236c:	efff69f3 	.word	0xefff69f3
 8002370:	40013800 	.word	0x40013800
 8002374:	40021000 	.word	0x40021000
 8002378:	40004400 	.word	0x40004400
 800237c:	40004800 	.word	0x40004800
 8002380:	40004c00 	.word	0x40004c00
 8002384:	40005000 	.word	0x40005000
 8002388:	007a1200 	.word	0x007a1200
      default:
        pclk = 0U;
 800238c:	2300      	movs	r3, #0
 800238e:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002390:	2301      	movs	r3, #1
 8002392:	77bb      	strb	r3, [r7, #30]
        break;
 8002394:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002396:	69bb      	ldr	r3, [r7, #24]
 8002398:	2b00      	cmp	r3, #0
 800239a:	d073      	beq.n	8002484 <UART_SetConfig+0x38c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800239c:	69bb      	ldr	r3, [r7, #24]
 800239e:	005a      	lsls	r2, r3, #1
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	685b      	ldr	r3, [r3, #4]
 80023a4:	085b      	lsrs	r3, r3, #1
 80023a6:	441a      	add	r2, r3
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	685b      	ldr	r3, [r3, #4]
 80023ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80023b0:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80023b2:	693b      	ldr	r3, [r7, #16]
 80023b4:	2b0f      	cmp	r3, #15
 80023b6:	d916      	bls.n	80023e6 <UART_SetConfig+0x2ee>
 80023b8:	693b      	ldr	r3, [r7, #16]
 80023ba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80023be:	d212      	bcs.n	80023e6 <UART_SetConfig+0x2ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80023c0:	693b      	ldr	r3, [r7, #16]
 80023c2:	b29b      	uxth	r3, r3
 80023c4:	f023 030f 	bic.w	r3, r3, #15
 80023c8:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80023ca:	693b      	ldr	r3, [r7, #16]
 80023cc:	085b      	lsrs	r3, r3, #1
 80023ce:	b29b      	uxth	r3, r3
 80023d0:	f003 0307 	and.w	r3, r3, #7
 80023d4:	b29a      	uxth	r2, r3
 80023d6:	89fb      	ldrh	r3, [r7, #14]
 80023d8:	4313      	orrs	r3, r2
 80023da:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	89fa      	ldrh	r2, [r7, #14]
 80023e2:	60da      	str	r2, [r3, #12]
 80023e4:	e04e      	b.n	8002484 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 80023e6:	2301      	movs	r3, #1
 80023e8:	77bb      	strb	r3, [r7, #30]
 80023ea:	e04b      	b.n	8002484 <UART_SetConfig+0x38c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80023ec:	7ffb      	ldrb	r3, [r7, #31]
 80023ee:	2b08      	cmp	r3, #8
 80023f0:	d827      	bhi.n	8002442 <UART_SetConfig+0x34a>
 80023f2:	a201      	add	r2, pc, #4	; (adr r2, 80023f8 <UART_SetConfig+0x300>)
 80023f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80023f8:	0800241d 	.word	0x0800241d
 80023fc:	08002425 	.word	0x08002425
 8002400:	0800242d 	.word	0x0800242d
 8002404:	08002443 	.word	0x08002443
 8002408:	08002433 	.word	0x08002433
 800240c:	08002443 	.word	0x08002443
 8002410:	08002443 	.word	0x08002443
 8002414:	08002443 	.word	0x08002443
 8002418:	0800243b 	.word	0x0800243b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800241c:	f7ff fbb0 	bl	8001b80 <HAL_RCC_GetPCLK1Freq>
 8002420:	61b8      	str	r0, [r7, #24]
        break;
 8002422:	e013      	b.n	800244c <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002424:	f7ff fbce 	bl	8001bc4 <HAL_RCC_GetPCLK2Freq>
 8002428:	61b8      	str	r0, [r7, #24]
        break;
 800242a:	e00f      	b.n	800244c <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800242c:	4b1b      	ldr	r3, [pc, #108]	; (800249c <UART_SetConfig+0x3a4>)
 800242e:	61bb      	str	r3, [r7, #24]
        break;
 8002430:	e00c      	b.n	800244c <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002432:	f7ff fb2f 	bl	8001a94 <HAL_RCC_GetSysClockFreq>
 8002436:	61b8      	str	r0, [r7, #24]
        break;
 8002438:	e008      	b.n	800244c <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800243a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800243e:	61bb      	str	r3, [r7, #24]
        break;
 8002440:	e004      	b.n	800244c <UART_SetConfig+0x354>
      default:
        pclk = 0U;
 8002442:	2300      	movs	r3, #0
 8002444:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002446:	2301      	movs	r3, #1
 8002448:	77bb      	strb	r3, [r7, #30]
        break;
 800244a:	bf00      	nop
    }

    if (pclk != 0U)
 800244c:	69bb      	ldr	r3, [r7, #24]
 800244e:	2b00      	cmp	r3, #0
 8002450:	d018      	beq.n	8002484 <UART_SetConfig+0x38c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	685b      	ldr	r3, [r3, #4]
 8002456:	085a      	lsrs	r2, r3, #1
 8002458:	69bb      	ldr	r3, [r7, #24]
 800245a:	441a      	add	r2, r3
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	685b      	ldr	r3, [r3, #4]
 8002460:	fbb2 f3f3 	udiv	r3, r2, r3
 8002464:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002466:	693b      	ldr	r3, [r7, #16]
 8002468:	2b0f      	cmp	r3, #15
 800246a:	d909      	bls.n	8002480 <UART_SetConfig+0x388>
 800246c:	693b      	ldr	r3, [r7, #16]
 800246e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002472:	d205      	bcs.n	8002480 <UART_SetConfig+0x388>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8002474:	693b      	ldr	r3, [r7, #16]
 8002476:	b29a      	uxth	r2, r3
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	60da      	str	r2, [r3, #12]
 800247e:	e001      	b.n	8002484 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 8002480:	2301      	movs	r3, #1
 8002482:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	2200      	movs	r2, #0
 8002488:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	2200      	movs	r2, #0
 800248e:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
 8002490:	7fbb      	ldrb	r3, [r7, #30]
}
 8002492:	4618      	mov	r0, r3
 8002494:	3720      	adds	r7, #32
 8002496:	46bd      	mov	sp, r7
 8002498:	bd80      	pop	{r7, pc}
 800249a:	bf00      	nop
 800249c:	007a1200 	.word	0x007a1200

080024a0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80024a0:	b480      	push	{r7}
 80024a2:	b083      	sub	sp, #12
 80024a4:	af00      	add	r7, sp, #0
 80024a6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024ac:	f003 0301 	and.w	r3, r3, #1
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d00a      	beq.n	80024ca <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	685b      	ldr	r3, [r3, #4]
 80024ba:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	430a      	orrs	r2, r1
 80024c8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024ce:	f003 0302 	and.w	r3, r3, #2
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d00a      	beq.n	80024ec <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	685b      	ldr	r3, [r3, #4]
 80024dc:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	430a      	orrs	r2, r1
 80024ea:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024f0:	f003 0304 	and.w	r3, r3, #4
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d00a      	beq.n	800250e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	685b      	ldr	r3, [r3, #4]
 80024fe:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	430a      	orrs	r2, r1
 800250c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002512:	f003 0308 	and.w	r3, r3, #8
 8002516:	2b00      	cmp	r3, #0
 8002518:	d00a      	beq.n	8002530 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	685b      	ldr	r3, [r3, #4]
 8002520:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	430a      	orrs	r2, r1
 800252e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002534:	f003 0310 	and.w	r3, r3, #16
 8002538:	2b00      	cmp	r3, #0
 800253a:	d00a      	beq.n	8002552 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	689b      	ldr	r3, [r3, #8]
 8002542:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	430a      	orrs	r2, r1
 8002550:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002556:	f003 0320 	and.w	r3, r3, #32
 800255a:	2b00      	cmp	r3, #0
 800255c:	d00a      	beq.n	8002574 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	689b      	ldr	r3, [r3, #8]
 8002564:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	430a      	orrs	r2, r1
 8002572:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002578:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800257c:	2b00      	cmp	r3, #0
 800257e:	d01a      	beq.n	80025b6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	685b      	ldr	r3, [r3, #4]
 8002586:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	430a      	orrs	r2, r1
 8002594:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800259a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800259e:	d10a      	bne.n	80025b6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	685b      	ldr	r3, [r3, #4]
 80025a6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	430a      	orrs	r2, r1
 80025b4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d00a      	beq.n	80025d8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	685b      	ldr	r3, [r3, #4]
 80025c8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	430a      	orrs	r2, r1
 80025d6:	605a      	str	r2, [r3, #4]
  }
}
 80025d8:	bf00      	nop
 80025da:	370c      	adds	r7, #12
 80025dc:	46bd      	mov	sp, r7
 80025de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e2:	4770      	bx	lr

080025e4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80025e4:	b580      	push	{r7, lr}
 80025e6:	b098      	sub	sp, #96	; 0x60
 80025e8:	af02      	add	r7, sp, #8
 80025ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	2200      	movs	r2, #0
 80025f0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80025f4:	f7fd fe32 	bl	800025c <HAL_GetTick>
 80025f8:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	f003 0308 	and.w	r3, r3, #8
 8002604:	2b08      	cmp	r3, #8
 8002606:	d12f      	bne.n	8002668 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002608:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800260c:	9300      	str	r3, [sp, #0]
 800260e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002610:	2200      	movs	r2, #0
 8002612:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8002616:	6878      	ldr	r0, [r7, #4]
 8002618:	f000 f88e 	bl	8002738 <UART_WaitOnFlagUntilTimeout>
 800261c:	4603      	mov	r3, r0
 800261e:	2b00      	cmp	r3, #0
 8002620:	d022      	beq.n	8002668 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002628:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800262a:	e853 3f00 	ldrex	r3, [r3]
 800262e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8002630:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002632:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002636:	653b      	str	r3, [r7, #80]	; 0x50
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	461a      	mov	r2, r3
 800263e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002640:	647b      	str	r3, [r7, #68]	; 0x44
 8002642:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002644:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8002646:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002648:	e841 2300 	strex	r3, r2, [r1]
 800264c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800264e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002650:	2b00      	cmp	r3, #0
 8002652:	d1e6      	bne.n	8002622 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	2220      	movs	r2, #32
 8002658:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	2200      	movs	r2, #0
 8002660:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002664:	2303      	movs	r3, #3
 8002666:	e063      	b.n	8002730 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	f003 0304 	and.w	r3, r3, #4
 8002672:	2b04      	cmp	r3, #4
 8002674:	d149      	bne.n	800270a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002676:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800267a:	9300      	str	r3, [sp, #0]
 800267c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800267e:	2200      	movs	r2, #0
 8002680:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8002684:	6878      	ldr	r0, [r7, #4]
 8002686:	f000 f857 	bl	8002738 <UART_WaitOnFlagUntilTimeout>
 800268a:	4603      	mov	r3, r0
 800268c:	2b00      	cmp	r3, #0
 800268e:	d03c      	beq.n	800270a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002696:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002698:	e853 3f00 	ldrex	r3, [r3]
 800269c:	623b      	str	r3, [r7, #32]
   return(result);
 800269e:	6a3b      	ldr	r3, [r7, #32]
 80026a0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80026a4:	64fb      	str	r3, [r7, #76]	; 0x4c
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	461a      	mov	r2, r3
 80026ac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80026ae:	633b      	str	r3, [r7, #48]	; 0x30
 80026b0:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80026b2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80026b4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80026b6:	e841 2300 	strex	r3, r2, [r1]
 80026ba:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80026bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d1e6      	bne.n	8002690 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	3308      	adds	r3, #8
 80026c8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80026ca:	693b      	ldr	r3, [r7, #16]
 80026cc:	e853 3f00 	ldrex	r3, [r3]
 80026d0:	60fb      	str	r3, [r7, #12]
   return(result);
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	f023 0301 	bic.w	r3, r3, #1
 80026d8:	64bb      	str	r3, [r7, #72]	; 0x48
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	3308      	adds	r3, #8
 80026e0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80026e2:	61fa      	str	r2, [r7, #28]
 80026e4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80026e6:	69b9      	ldr	r1, [r7, #24]
 80026e8:	69fa      	ldr	r2, [r7, #28]
 80026ea:	e841 2300 	strex	r3, r2, [r1]
 80026ee:	617b      	str	r3, [r7, #20]
   return(result);
 80026f0:	697b      	ldr	r3, [r7, #20]
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d1e5      	bne.n	80026c2 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	2220      	movs	r2, #32
 80026fa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

      __HAL_UNLOCK(huart);
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	2200      	movs	r2, #0
 8002702:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002706:	2303      	movs	r3, #3
 8002708:	e012      	b.n	8002730 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	2220      	movs	r2, #32
 800270e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	2220      	movs	r2, #32
 8002716:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	2200      	movs	r2, #0
 800271e:	665a      	str	r2, [r3, #100]	; 0x64
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	2200      	movs	r2, #0
 8002724:	669a      	str	r2, [r3, #104]	; 0x68

  __HAL_UNLOCK(huart);
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	2200      	movs	r2, #0
 800272a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800272e:	2300      	movs	r3, #0
}
 8002730:	4618      	mov	r0, r3
 8002732:	3758      	adds	r7, #88	; 0x58
 8002734:	46bd      	mov	sp, r7
 8002736:	bd80      	pop	{r7, pc}

08002738 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8002738:	b580      	push	{r7, lr}
 800273a:	b084      	sub	sp, #16
 800273c:	af00      	add	r7, sp, #0
 800273e:	60f8      	str	r0, [r7, #12]
 8002740:	60b9      	str	r1, [r7, #8]
 8002742:	603b      	str	r3, [r7, #0]
 8002744:	4613      	mov	r3, r2
 8002746:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002748:	e049      	b.n	80027de <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800274a:	69bb      	ldr	r3, [r7, #24]
 800274c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002750:	d045      	beq.n	80027de <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002752:	f7fd fd83 	bl	800025c <HAL_GetTick>
 8002756:	4602      	mov	r2, r0
 8002758:	683b      	ldr	r3, [r7, #0]
 800275a:	1ad3      	subs	r3, r2, r3
 800275c:	69ba      	ldr	r2, [r7, #24]
 800275e:	429a      	cmp	r2, r3
 8002760:	d302      	bcc.n	8002768 <UART_WaitOnFlagUntilTimeout+0x30>
 8002762:	69bb      	ldr	r3, [r7, #24]
 8002764:	2b00      	cmp	r3, #0
 8002766:	d101      	bne.n	800276c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8002768:	2303      	movs	r3, #3
 800276a:	e048      	b.n	80027fe <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	f003 0304 	and.w	r3, r3, #4
 8002776:	2b00      	cmp	r3, #0
 8002778:	d031      	beq.n	80027de <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	69db      	ldr	r3, [r3, #28]
 8002780:	f003 0308 	and.w	r3, r3, #8
 8002784:	2b08      	cmp	r3, #8
 8002786:	d110      	bne.n	80027aa <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	2208      	movs	r2, #8
 800278e:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8002790:	68f8      	ldr	r0, [r7, #12]
 8002792:	f000 f838 	bl	8002806 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	2208      	movs	r2, #8
 800279a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	2200      	movs	r2, #0
 80027a2:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

           return HAL_ERROR;
 80027a6:	2301      	movs	r3, #1
 80027a8:	e029      	b.n	80027fe <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	69db      	ldr	r3, [r3, #28]
 80027b0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80027b4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80027b8:	d111      	bne.n	80027de <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80027c2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80027c4:	68f8      	ldr	r0, [r7, #12]
 80027c6:	f000 f81e 	bl	8002806 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	2220      	movs	r2, #32
 80027ce:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	2200      	movs	r2, #0
 80027d6:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

          return HAL_TIMEOUT;
 80027da:	2303      	movs	r3, #3
 80027dc:	e00f      	b.n	80027fe <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	69da      	ldr	r2, [r3, #28]
 80027e4:	68bb      	ldr	r3, [r7, #8]
 80027e6:	4013      	ands	r3, r2
 80027e8:	68ba      	ldr	r2, [r7, #8]
 80027ea:	429a      	cmp	r2, r3
 80027ec:	bf0c      	ite	eq
 80027ee:	2301      	moveq	r3, #1
 80027f0:	2300      	movne	r3, #0
 80027f2:	b2db      	uxtb	r3, r3
 80027f4:	461a      	mov	r2, r3
 80027f6:	79fb      	ldrb	r3, [r7, #7]
 80027f8:	429a      	cmp	r2, r3
 80027fa:	d0a6      	beq.n	800274a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80027fc:	2300      	movs	r3, #0
}
 80027fe:	4618      	mov	r0, r3
 8002800:	3710      	adds	r7, #16
 8002802:	46bd      	mov	sp, r7
 8002804:	bd80      	pop	{r7, pc}

08002806 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002806:	b480      	push	{r7}
 8002808:	b095      	sub	sp, #84	; 0x54
 800280a:	af00      	add	r7, sp, #0
 800280c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002814:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002816:	e853 3f00 	ldrex	r3, [r3]
 800281a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800281c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800281e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002822:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	461a      	mov	r2, r3
 800282a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800282c:	643b      	str	r3, [r7, #64]	; 0x40
 800282e:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002830:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8002832:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002834:	e841 2300 	strex	r3, r2, [r1]
 8002838:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800283a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800283c:	2b00      	cmp	r3, #0
 800283e:	d1e6      	bne.n	800280e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	3308      	adds	r3, #8
 8002846:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002848:	6a3b      	ldr	r3, [r7, #32]
 800284a:	e853 3f00 	ldrex	r3, [r3]
 800284e:	61fb      	str	r3, [r7, #28]
   return(result);
 8002850:	69fb      	ldr	r3, [r7, #28]
 8002852:	f023 0301 	bic.w	r3, r3, #1
 8002856:	64bb      	str	r3, [r7, #72]	; 0x48
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	3308      	adds	r3, #8
 800285e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002860:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002862:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002864:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002866:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002868:	e841 2300 	strex	r3, r2, [r1]
 800286c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800286e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002870:	2b00      	cmp	r3, #0
 8002872:	d1e5      	bne.n	8002840 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002878:	2b01      	cmp	r3, #1
 800287a:	d118      	bne.n	80028ae <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	e853 3f00 	ldrex	r3, [r3]
 8002888:	60bb      	str	r3, [r7, #8]
   return(result);
 800288a:	68bb      	ldr	r3, [r7, #8]
 800288c:	f023 0310 	bic.w	r3, r3, #16
 8002890:	647b      	str	r3, [r7, #68]	; 0x44
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	461a      	mov	r2, r3
 8002898:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800289a:	61bb      	str	r3, [r7, #24]
 800289c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800289e:	6979      	ldr	r1, [r7, #20]
 80028a0:	69ba      	ldr	r2, [r7, #24]
 80028a2:	e841 2300 	strex	r3, r2, [r1]
 80028a6:	613b      	str	r3, [r7, #16]
   return(result);
 80028a8:	693b      	ldr	r3, [r7, #16]
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d1e6      	bne.n	800287c <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	2220      	movs	r2, #32
 80028b2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	2200      	movs	r2, #0
 80028ba:	665a      	str	r2, [r3, #100]	; 0x64

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	2200      	movs	r2, #0
 80028c0:	66da      	str	r2, [r3, #108]	; 0x6c
}
 80028c2:	bf00      	nop
 80028c4:	3754      	adds	r7, #84	; 0x54
 80028c6:	46bd      	mov	sp, r7
 80028c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028cc:	4770      	bx	lr
	...

080028d0 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80028d0:	b480      	push	{r7}
 80028d2:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80028d4:	4b06      	ldr	r3, [pc, #24]	; (80028f0 <SystemInit+0x20>)
 80028d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028da:	4a05      	ldr	r2, [pc, #20]	; (80028f0 <SystemInit+0x20>)
 80028dc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80028e0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80028e4:	bf00      	nop
 80028e6:	46bd      	mov	sp, r7
 80028e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ec:	4770      	bx	lr
 80028ee:	bf00      	nop
 80028f0:	e000ed00 	.word	0xe000ed00

080028f4 <COMM_SessionInit>:
  * @brief Session Initialization Function
  * @param Session handler.
  * @retval Final state.
 **/
SERVICES_StatusTypeDef COMM_SessionInit(COM_SESSION *SessionHandler)
{
 80028f4:	b580      	push	{r7, lr}
 80028f6:	b082      	sub	sp, #8
 80028f8:	af00      	add	r7, sp, #0
 80028fa:	6078      	str	r0, [r7, #4]
	// Initiate an array of sessions and make its first location point to the NULL_SESSION
	ARR_SESSIONS[0]	=	&NULL_SESSION;
 80028fc:	4b1d      	ldr	r3, [pc, #116]	; (8002974 <COMM_SessionInit+0x80>)
 80028fe:	4a1e      	ldr	r2, [pc, #120]	; (8002978 <COMM_SessionInit+0x84>)
 8002900:	601a      	str	r2, [r3, #0]

	// check the index validity.
	if (SessionHandler->SessionID != 0 && SessionHandler->SessionID < 8)
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	781b      	ldrb	r3, [r3, #0]
 8002906:	2b00      	cmp	r3, #0
 8002908:	d02c      	beq.n	8002964 <COMM_SessionInit+0x70>
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	781b      	ldrb	r3, [r3, #0]
 800290e:	2b07      	cmp	r3, #7
 8002910:	d828      	bhi.n	8002964 <COMM_SessionInit+0x70>
	{
		// initiate Session state.
		SessionHandler->SessionState = SESSION_FREE;
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	2200      	movs	r2, #0
 8002916:	709a      	strb	r2, [r3, #2]

		// initiate Session Process counter to zero.
		SessionHandler->SessionProcessCounter = 0;
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	2200      	movs	r2, #0
 800291c:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

		// initiate protocol Handler.
		switch (SessionHandler->Session_Protocol)
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8002926:	2b03      	cmp	r3, #3
 8002928:	d813      	bhi.n	8002952 <COMM_SessionInit+0x5e>
 800292a:	a201      	add	r2, pc, #4	; (adr r2, 8002930 <COMM_SessionInit+0x3c>)
 800292c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002930:	08002941 	.word	0x08002941
 8002934:	08002953 	.word	0x08002953
 8002938:	08002953 	.word	0x08002953
 800293c:	08002953 	.word	0x08002953
		{
			case SESSION_UART:
				/*		UART initialization function*/
				_USARTx_Init( (SessionHandler->pSessionHandler), SessionHandler->SessionID);
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	781b      	ldrb	r3, [r3, #0]
 8002948:	4619      	mov	r1, r3
 800294a:	4610      	mov	r0, r2
 800294c:	f000 f81b 	bl	8002986 <_USARTx_Init>
				break;
 8002950:	e000      	b.n	8002954 <COMM_SessionInit+0x60>
				break;
			case SESSION_CAN:
				/*		CAN initialization function*/
				break;
			default:
				break;
 8002952:	bf00      	nop
		}
		// last step, put the Session pointer into the Arr_Sessions.
		ARR_SESSIONS[SessionHandler->SessionID] = SessionHandler;
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	781b      	ldrb	r3, [r3, #0]
 8002958:	4619      	mov	r1, r3
 800295a:	4a06      	ldr	r2, [pc, #24]	; (8002974 <COMM_SessionInit+0x80>)
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 8002962:	e001      	b.n	8002968 <COMM_SessionInit+0x74>
	}
	else {
		Error_Handler();
 8002964:	f000 f80a 	bl	800297c <Error_Handler>
	}
	return SERVICES_OK;
 8002968:	2300      	movs	r3, #0
}
 800296a:	4618      	mov	r0, r3
 800296c:	3708      	adds	r7, #8
 800296e:	46bd      	mov	sp, r7
 8002970:	bd80      	pop	{r7, pc}
 8002972:	bf00      	nop
 8002974:	20000118 	.word	0x20000118
 8002978:	200000ec 	.word	0x200000ec

0800297c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
static void Error_Handler(void)
{
 800297c:	b480      	push	{r7}
 800297e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002980:	b672      	cpsid	i
}
 8002982:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002984:	e7fe      	b.n	8002984 <Error_Handler+0x8>

08002986 <_USARTx_Init>:
#endif



Uart_StatusTypeDef _USARTx_Init(UART_HANDLER *Huartx, uint8_t SessionID)
{
 8002986:	b580      	push	{r7, lr}
 8002988:	b082      	sub	sp, #8
 800298a:	af00      	add	r7, sp, #0
 800298c:	6078      	str	r0, [r7, #4]
 800298e:	460b      	mov	r3, r1
 8002990:	70fb      	strb	r3, [r7, #3]
	/*  Enable RCC, Configure GPIOS */
	UART_MspInit(Huartx->HUSARTx);
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	4618      	mov	r0, r3
 8002998:	f000 f81e 	bl	80029d8 <UART_MspInit>

	/*	Configure peripheral	*/
	if (Huartx->SESSION_ID == 0)
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	791b      	ldrb	r3, [r3, #4]
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d113      	bne.n	80029cc <_USARTx_Init+0x46>
	{
	  if (HAL_UART_Init(Huartx->HUSARTx) != HAL_OK)
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	4618      	mov	r0, r3
 80029aa:	f7ff fb4b 	bl	8002044 <HAL_UART_Init>
 80029ae:	4603      	mov	r3, r0
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d006      	beq.n	80029c2 <_USARTx_Init+0x3c>
	  {
	     Error_Handler();
 80029b4:	f000 f8b8 	bl	8002b28 <Error_Handler>
	     Huartx->SESSION_ID = 0;
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	2200      	movs	r2, #0
 80029bc:	711a      	strb	r2, [r3, #4]
	     return	Uart_ERROR;
 80029be:	2301      	movs	r3, #1
 80029c0:	e005      	b.n	80029ce <_USARTx_Init+0x48>
	   }
	   else
	   {
		   Huartx->SESSION_ID = SessionID;
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	78fa      	ldrb	r2, [r7, #3]
 80029c6:	711a      	strb	r2, [r3, #4]
		   return	Uart_OK;
 80029c8:	2300      	movs	r3, #0
 80029ca:	e000      	b.n	80029ce <_USARTx_Init+0x48>
	   }
	}
	else
	{
		return	Uart_BUSY;
 80029cc:	2302      	movs	r3, #2
	}
	return	Uart_OK;
}
 80029ce:	4618      	mov	r0, r3
 80029d0:	3708      	adds	r7, #8
 80029d2:	46bd      	mov	sp, r7
 80029d4:	bd80      	pop	{r7, pc}
	...

080029d8 <UART_MspInit>:




static void UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80029d8:	b580      	push	{r7, lr}
 80029da:	b08e      	sub	sp, #56	; 0x38
 80029dc:	af00      	add	r7, sp, #0
 80029de:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029e0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80029e4:	2200      	movs	r2, #0
 80029e6:	601a      	str	r2, [r3, #0]
 80029e8:	605a      	str	r2, [r3, #4]
 80029ea:	609a      	str	r2, [r3, #8]
 80029ec:	60da      	str	r2, [r3, #12]
 80029ee:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	4a46      	ldr	r2, [pc, #280]	; (8002b10 <UART_MspInit+0x138>)
 80029f6:	4293      	cmp	r3, r2
 80029f8:	d128      	bne.n	8002a4c <UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80029fa:	4b46      	ldr	r3, [pc, #280]	; (8002b14 <UART_MspInit+0x13c>)
 80029fc:	699b      	ldr	r3, [r3, #24]
 80029fe:	4a45      	ldr	r2, [pc, #276]	; (8002b14 <UART_MspInit+0x13c>)
 8002a00:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002a04:	6193      	str	r3, [r2, #24]
 8002a06:	4b43      	ldr	r3, [pc, #268]	; (8002b14 <UART_MspInit+0x13c>)
 8002a08:	699b      	ldr	r3, [r3, #24]
 8002a0a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002a0e:	623b      	str	r3, [r7, #32]
 8002a10:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002a12:	4b40      	ldr	r3, [pc, #256]	; (8002b14 <UART_MspInit+0x13c>)
 8002a14:	695b      	ldr	r3, [r3, #20]
 8002a16:	4a3f      	ldr	r2, [pc, #252]	; (8002b14 <UART_MspInit+0x13c>)
 8002a18:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8002a1c:	6153      	str	r3, [r2, #20]
 8002a1e:	4b3d      	ldr	r3, [pc, #244]	; (8002b14 <UART_MspInit+0x13c>)
 8002a20:	695b      	ldr	r3, [r3, #20]
 8002a22:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002a26:	61fb      	str	r3, [r7, #28]
 8002a28:	69fb      	ldr	r3, [r7, #28]
    /**USART1 GPIO Configuration
    PC4     ------> USART1_TX
    PC5     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8002a2a:	2330      	movs	r3, #48	; 0x30
 8002a2c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a2e:	2302      	movs	r3, #2
 8002a30:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a32:	2300      	movs	r3, #0
 8002a34:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002a36:	2303      	movs	r3, #3
 8002a38:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002a3a:	2307      	movs	r3, #7
 8002a3c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002a3e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002a42:	4619      	mov	r1, r3
 8002a44:	4834      	ldr	r0, [pc, #208]	; (8002b18 <UART_MspInit+0x140>)
 8002a46:	f7fd fccb 	bl	80003e0 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8002a4a:	e05c      	b.n	8002b06 <UART_MspInit+0x12e>
  else if(uartHandle->Instance==USART2)
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	4a32      	ldr	r2, [pc, #200]	; (8002b1c <UART_MspInit+0x144>)
 8002a52:	4293      	cmp	r3, r2
 8002a54:	d129      	bne.n	8002aaa <UART_MspInit+0xd2>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002a56:	4b2f      	ldr	r3, [pc, #188]	; (8002b14 <UART_MspInit+0x13c>)
 8002a58:	69db      	ldr	r3, [r3, #28]
 8002a5a:	4a2e      	ldr	r2, [pc, #184]	; (8002b14 <UART_MspInit+0x13c>)
 8002a5c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002a60:	61d3      	str	r3, [r2, #28]
 8002a62:	4b2c      	ldr	r3, [pc, #176]	; (8002b14 <UART_MspInit+0x13c>)
 8002a64:	69db      	ldr	r3, [r3, #28]
 8002a66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a6a:	61bb      	str	r3, [r7, #24]
 8002a6c:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a6e:	4b29      	ldr	r3, [pc, #164]	; (8002b14 <UART_MspInit+0x13c>)
 8002a70:	695b      	ldr	r3, [r3, #20]
 8002a72:	4a28      	ldr	r2, [pc, #160]	; (8002b14 <UART_MspInit+0x13c>)
 8002a74:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002a78:	6153      	str	r3, [r2, #20]
 8002a7a:	4b26      	ldr	r3, [pc, #152]	; (8002b14 <UART_MspInit+0x13c>)
 8002a7c:	695b      	ldr	r3, [r3, #20]
 8002a7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a82:	617b      	str	r3, [r7, #20]
 8002a84:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002a86:	230c      	movs	r3, #12
 8002a88:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a8a:	2302      	movs	r3, #2
 8002a8c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a8e:	2300      	movs	r3, #0
 8002a90:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a92:	2300      	movs	r3, #0
 8002a94:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002a96:	2307      	movs	r3, #7
 8002a98:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a9a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002a9e:	4619      	mov	r1, r3
 8002aa0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002aa4:	f7fd fc9c 	bl	80003e0 <HAL_GPIO_Init>
}
 8002aa8:	e02d      	b.n	8002b06 <UART_MspInit+0x12e>
  else if(uartHandle->Instance==USART3)
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	4a1c      	ldr	r2, [pc, #112]	; (8002b20 <UART_MspInit+0x148>)
 8002ab0:	4293      	cmp	r3, r2
 8002ab2:	d128      	bne.n	8002b06 <UART_MspInit+0x12e>
    __HAL_RCC_USART3_CLK_ENABLE();
 8002ab4:	4b17      	ldr	r3, [pc, #92]	; (8002b14 <UART_MspInit+0x13c>)
 8002ab6:	69db      	ldr	r3, [r3, #28]
 8002ab8:	4a16      	ldr	r2, [pc, #88]	; (8002b14 <UART_MspInit+0x13c>)
 8002aba:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002abe:	61d3      	str	r3, [r2, #28]
 8002ac0:	4b14      	ldr	r3, [pc, #80]	; (8002b14 <UART_MspInit+0x13c>)
 8002ac2:	69db      	ldr	r3, [r3, #28]
 8002ac4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002ac8:	613b      	str	r3, [r7, #16]
 8002aca:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002acc:	4b11      	ldr	r3, [pc, #68]	; (8002b14 <UART_MspInit+0x13c>)
 8002ace:	695b      	ldr	r3, [r3, #20]
 8002ad0:	4a10      	ldr	r2, [pc, #64]	; (8002b14 <UART_MspInit+0x13c>)
 8002ad2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002ad6:	6153      	str	r3, [r2, #20]
 8002ad8:	4b0e      	ldr	r3, [pc, #56]	; (8002b14 <UART_MspInit+0x13c>)
 8002ada:	695b      	ldr	r3, [r3, #20]
 8002adc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002ae0:	60fb      	str	r3, [r7, #12]
 8002ae2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8002ae4:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002ae8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002aea:	2302      	movs	r3, #2
 8002aec:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002aee:	2300      	movs	r3, #0
 8002af0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002af2:	2303      	movs	r3, #3
 8002af4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002af6:	2307      	movs	r3, #7
 8002af8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002afa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002afe:	4619      	mov	r1, r3
 8002b00:	4808      	ldr	r0, [pc, #32]	; (8002b24 <UART_MspInit+0x14c>)
 8002b02:	f7fd fc6d 	bl	80003e0 <HAL_GPIO_Init>
}
 8002b06:	bf00      	nop
 8002b08:	3738      	adds	r7, #56	; 0x38
 8002b0a:	46bd      	mov	sp, r7
 8002b0c:	bd80      	pop	{r7, pc}
 8002b0e:	bf00      	nop
 8002b10:	40013800 	.word	0x40013800
 8002b14:	40021000 	.word	0x40021000
 8002b18:	48000800 	.word	0x48000800
 8002b1c:	40004400 	.word	0x40004400
 8002b20:	40004800 	.word	0x40004800
 8002b24:	48000400 	.word	0x48000400

08002b28 <Error_Handler>:
  /* USER CODE END USART3_MspDeInit 1 */
  }
}

static void Error_Handler(void)
{
 8002b28:	b480      	push	{r7}
 8002b2a:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8002b2c:	b672      	cpsid	i
}
 8002b2e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002b30:	e7fe      	b.n	8002b30 <Error_Handler+0x8>

08002b32 <SystemClock_Config>:
static void Error_Handler(void);



void SystemClock_Config(void)
{
 8002b32:	b580      	push	{r7, lr}
 8002b34:	b0a6      	sub	sp, #152	; 0x98
 8002b36:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002b38:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8002b3c:	2228      	movs	r2, #40	; 0x28
 8002b3e:	2100      	movs	r1, #0
 8002b40:	4618      	mov	r0, r3
 8002b42:	f000 f8d1 	bl	8002ce8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002b46:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8002b4a:	2200      	movs	r2, #0
 8002b4c:	601a      	str	r2, [r3, #0]
 8002b4e:	605a      	str	r2, [r3, #4]
 8002b50:	609a      	str	r2, [r3, #8]
 8002b52:	60da      	str	r2, [r3, #12]
 8002b54:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002b56:	1d3b      	adds	r3, r7, #4
 8002b58:	2258      	movs	r2, #88	; 0x58
 8002b5a:	2100      	movs	r1, #0
 8002b5c:	4618      	mov	r0, r3
 8002b5e:	f000 f8c3 	bl	8002ce8 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002b62:	2302      	movs	r3, #2
 8002b64:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002b66:	2301      	movs	r3, #1
 8002b68:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002b6a:	2310      	movs	r3, #16
 8002b6c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8002b70:	2300      	movs	r3, #0
 8002b72:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002b76:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8002b7a:	4618      	mov	r0, r3
 8002b7c:	f7fd fdba 	bl	80006f4 <HAL_RCC_OscConfig>
 8002b80:	4603      	mov	r3, r0
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d001      	beq.n	8002b8a <SystemClock_Config+0x58>
  {
    Error_Handler();
 8002b86:	f000 f828 	bl	8002bda <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002b8a:	230f      	movs	r3, #15
 8002b8c:	65fb      	str	r3, [r7, #92]	; 0x5c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8002b8e:	2300      	movs	r3, #0
 8002b90:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002b92:	2300      	movs	r3, #0
 8002b94:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002b96:	2300      	movs	r3, #0
 8002b98:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002b9a:	2300      	movs	r3, #0
 8002b9c:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8002b9e:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8002ba2:	2100      	movs	r1, #0
 8002ba4:	4618      	mov	r0, r3
 8002ba6:	f7fe fdf9 	bl	800179c <HAL_RCC_ClockConfig>
 8002baa:	4603      	mov	r3, r0
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d001      	beq.n	8002bb4 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8002bb0:	f000 f813 	bl	8002bda <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_I2C1;
 8002bb4:	2321      	movs	r3, #33	; 0x21
 8002bb6:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8002bb8:	2300      	movs	r3, #0
 8002bba:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8002bbc:	2300      	movs	r3, #0
 8002bbe:	623b      	str	r3, [r7, #32]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002bc0:	1d3b      	adds	r3, r7, #4
 8002bc2:	4618      	mov	r0, r3
 8002bc4:	f7ff f820 	bl	8001c08 <HAL_RCCEx_PeriphCLKConfig>
 8002bc8:	4603      	mov	r3, r0
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d001      	beq.n	8002bd2 <SystemClock_Config+0xa0>
  {
    Error_Handler();
 8002bce:	f000 f804 	bl	8002bda <Error_Handler>
  }
}
 8002bd2:	bf00      	nop
 8002bd4:	3798      	adds	r7, #152	; 0x98
 8002bd6:	46bd      	mov	sp, r7
 8002bd8:	bd80      	pop	{r7, pc}

08002bda <Error_Handler>:




static void Error_Handler(void)
{
 8002bda:	b480      	push	{r7}
 8002bdc:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8002bde:	b672      	cpsid	i
}
 8002be0:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002be2:	e7fe      	b.n	8002be2 <Error_Handler+0x8>

08002be4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002be4:	b480      	push	{r7}
 8002be6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002be8:	e7fe      	b.n	8002be8 <NMI_Handler+0x4>

08002bea <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002bea:	b480      	push	{r7}
 8002bec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002bee:	e7fe      	b.n	8002bee <HardFault_Handler+0x4>

08002bf0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002bf0:	b480      	push	{r7}
 8002bf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002bf4:	e7fe      	b.n	8002bf4 <MemManage_Handler+0x4>

08002bf6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002bf6:	b480      	push	{r7}
 8002bf8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002bfa:	e7fe      	b.n	8002bfa <BusFault_Handler+0x4>

08002bfc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002bfc:	b480      	push	{r7}
 8002bfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002c00:	e7fe      	b.n	8002c00 <UsageFault_Handler+0x4>

08002c02 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002c02:	b480      	push	{r7}
 8002c04:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002c06:	bf00      	nop
 8002c08:	46bd      	mov	sp, r7
 8002c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c0e:	4770      	bx	lr

08002c10 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002c10:	b480      	push	{r7}
 8002c12:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002c14:	bf00      	nop
 8002c16:	46bd      	mov	sp, r7
 8002c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c1c:	4770      	bx	lr

08002c1e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002c1e:	b480      	push	{r7}
 8002c20:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002c22:	bf00      	nop
 8002c24:	46bd      	mov	sp, r7
 8002c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c2a:	4770      	bx	lr

08002c2c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002c2c:	b580      	push	{r7, lr}
 8002c2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002c30:	f7fd fb00 	bl	8000234 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002c34:	bf00      	nop
 8002c36:	bd80      	pop	{r7, pc}

08002c38 <main>:
		.SessionMODE = SESSION_NormalMODE,
		.pSessionHandler = &Huart1
};

int main(void)
{
 8002c38:	b580      	push	{r7, lr}
 8002c3a:	af00      	add	r7, sp, #0
	SystemClock_Config();
 8002c3c:	f7ff ff79 	bl	8002b32 <SystemClock_Config>
    COMM_SessionInit(&session_1);
 8002c40:	4801      	ldr	r0, [pc, #4]	; (8002c48 <main+0x10>)
 8002c42:	f7ff fe57 	bl	80028f4 <COMM_SessionInit>
	for(;;);
 8002c46:	e7fe      	b.n	8002c46 <main+0xe>
 8002c48:	200000a0 	.word	0x200000a0

08002c4c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002c4c:	480d      	ldr	r0, [pc, #52]	; (8002c84 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002c4e:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8002c50:	f7ff fe3e 	bl	80028d0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002c54:	480c      	ldr	r0, [pc, #48]	; (8002c88 <LoopForever+0x6>)
  ldr r1, =_edata
 8002c56:	490d      	ldr	r1, [pc, #52]	; (8002c8c <LoopForever+0xa>)
  ldr r2, =_sidata
 8002c58:	4a0d      	ldr	r2, [pc, #52]	; (8002c90 <LoopForever+0xe>)
  movs r3, #0
 8002c5a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002c5c:	e002      	b.n	8002c64 <LoopCopyDataInit>

08002c5e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002c5e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002c60:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002c62:	3304      	adds	r3, #4

08002c64 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002c64:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002c66:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002c68:	d3f9      	bcc.n	8002c5e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002c6a:	4a0a      	ldr	r2, [pc, #40]	; (8002c94 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002c6c:	4c0a      	ldr	r4, [pc, #40]	; (8002c98 <LoopForever+0x16>)
  movs r3, #0
 8002c6e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002c70:	e001      	b.n	8002c76 <LoopFillZerobss>

08002c72 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002c72:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002c74:	3204      	adds	r2, #4

08002c76 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002c76:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002c78:	d3fb      	bcc.n	8002c72 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8002c7a:	f000 f811 	bl	8002ca0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002c7e:	f7ff ffdb 	bl	8002c38 <main>

08002c82 <LoopForever>:

LoopForever:
  b LoopForever
 8002c82:	e7fe      	b.n	8002c82 <LoopForever>
  ldr   r0, =_estack
 8002c84:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8002c88:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002c8c:	200000cc 	.word	0x200000cc
  ldr r2, =_sidata
 8002c90:	08002d50 	.word	0x08002d50
  ldr r2, =_sbss
 8002c94:	200000cc 	.word	0x200000cc
  ldr r4, =_ebss
 8002c98:	20000138 	.word	0x20000138

08002c9c <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002c9c:	e7fe      	b.n	8002c9c <ADC1_2_IRQHandler>
	...

08002ca0 <__libc_init_array>:
 8002ca0:	b570      	push	{r4, r5, r6, lr}
 8002ca2:	4d0d      	ldr	r5, [pc, #52]	; (8002cd8 <__libc_init_array+0x38>)
 8002ca4:	4c0d      	ldr	r4, [pc, #52]	; (8002cdc <__libc_init_array+0x3c>)
 8002ca6:	1b64      	subs	r4, r4, r5
 8002ca8:	10a4      	asrs	r4, r4, #2
 8002caa:	2600      	movs	r6, #0
 8002cac:	42a6      	cmp	r6, r4
 8002cae:	d109      	bne.n	8002cc4 <__libc_init_array+0x24>
 8002cb0:	4d0b      	ldr	r5, [pc, #44]	; (8002ce0 <__libc_init_array+0x40>)
 8002cb2:	4c0c      	ldr	r4, [pc, #48]	; (8002ce4 <__libc_init_array+0x44>)
 8002cb4:	f000 f820 	bl	8002cf8 <_init>
 8002cb8:	1b64      	subs	r4, r4, r5
 8002cba:	10a4      	asrs	r4, r4, #2
 8002cbc:	2600      	movs	r6, #0
 8002cbe:	42a6      	cmp	r6, r4
 8002cc0:	d105      	bne.n	8002cce <__libc_init_array+0x2e>
 8002cc2:	bd70      	pop	{r4, r5, r6, pc}
 8002cc4:	f855 3b04 	ldr.w	r3, [r5], #4
 8002cc8:	4798      	blx	r3
 8002cca:	3601      	adds	r6, #1
 8002ccc:	e7ee      	b.n	8002cac <__libc_init_array+0xc>
 8002cce:	f855 3b04 	ldr.w	r3, [r5], #4
 8002cd2:	4798      	blx	r3
 8002cd4:	3601      	adds	r6, #1
 8002cd6:	e7f2      	b.n	8002cbe <__libc_init_array+0x1e>
 8002cd8:	08002d48 	.word	0x08002d48
 8002cdc:	08002d48 	.word	0x08002d48
 8002ce0:	08002d48 	.word	0x08002d48
 8002ce4:	08002d4c 	.word	0x08002d4c

08002ce8 <memset>:
 8002ce8:	4402      	add	r2, r0
 8002cea:	4603      	mov	r3, r0
 8002cec:	4293      	cmp	r3, r2
 8002cee:	d100      	bne.n	8002cf2 <memset+0xa>
 8002cf0:	4770      	bx	lr
 8002cf2:	f803 1b01 	strb.w	r1, [r3], #1
 8002cf6:	e7f9      	b.n	8002cec <memset+0x4>

08002cf8 <_init>:
 8002cf8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002cfa:	bf00      	nop
 8002cfc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002cfe:	bc08      	pop	{r3}
 8002d00:	469e      	mov	lr, r3
 8002d02:	4770      	bx	lr

08002d04 <_fini>:
 8002d04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002d06:	bf00      	nop
 8002d08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002d0a:	bc08      	pop	{r3}
 8002d0c:	469e      	mov	lr, r3
 8002d0e:	4770      	bx	lr
